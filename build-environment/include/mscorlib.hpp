#include "cli-predecl.hpp"

struct MANAGED_API Consts;
struct MANAGED_API Locale;
namespace Microsoft { namespace Win32 {
    struct MANAGED_API Registry;
    struct MANAGED_API RegistryKey;
    struct MANAGED_API ExpandString;
    struct MANAGED_API KeyHandler;
    struct MANAGED_API UnixRegistryApi;
    struct MANAGED_API Win32RegistryApi;
    struct MANAGED_API Win32ResultCode;
    struct MANAGED_API IRegistryApi;
}}
namespace Microsoft { namespace Win32 { namespace SafeHandles {
    struct MANAGED_API CriticalHandleMinusOneIsInvalid;
    struct MANAGED_API CriticalHandleZeroOrMinusOneIsInvalid;
    struct MANAGED_API SafeFileHandle;
    struct MANAGED_API SafeHandleMinusOneIsInvalid;
    struct MANAGED_API SafeHandleZeroOrMinusOneIsInvalid;
    struct MANAGED_API SafeRegistryHandle;
    struct MANAGED_API SafeWaitHandle;
}}}
namespace Mono {
    struct MANAGED_API PackContext;
    struct MANAGED_API CopyConverter;
    struct MANAGED_API SwapConverter;
    struct MANAGED_API DataConverter;
    struct MANAGED_API Runtime;
}
namespace Mono { namespace Globalization { namespace Unicode {
    struct MANAGED_API CodePointIndexer;
    struct MANAGED_API CollationElementTableUtil;
    struct MANAGED_API TailoringInfo;
    struct MANAGED_API Contraction;
    struct MANAGED_API ContractionComparer;
    struct MANAGED_API Level2Map;
    struct MANAGED_API Level2MapComparer;
    struct MANAGED_API MSCompatUnicodeTable;
    struct MANAGED_API MSCompatUnicodeTableUtil;
    struct MANAGED_API Normalization;
    struct MANAGED_API NormalizationTableUtil;
    struct MANAGED_API SimpleCollator;
    struct MANAGED_API SortKeyBuffer;
    struct MANAGED_API TestDriver;
    struct MANAGED_API Driver;
    struct MANAGED_API UnicodeData5_1_0;
    struct MANAGED_API UnicodeData;
    struct MANAGED_API UnicodeDataCodeGeneratorC5_1_0;
    struct MANAGED_API CodePointRange;
    struct MANAGED_API UcdCharacterProperty;
    struct MANAGED_API TableRange;
    struct MANAGED_API SortKeyValue;
    struct MANAGED_API Context;
    struct MANAGED_API PreviousInfo;
    struct MANAGED_API Escape;
}}}
namespace Mono { namespace Interop {
    struct MANAGED_API ComInteropProxy;
    struct MANAGED_API IDispatch;
    struct MANAGED_API IUnknown;
}}
namespace Mono { namespace Math {
    struct MANAGED_API ModulusRing;
    struct MANAGED_API Kernel;
    struct MANAGED_API BigInteger;
}}
namespace Mono { namespace Math { namespace Prime {
    struct MANAGED_API PrimalityTests;
}}}
namespace Mono { namespace Math { namespace Prime { namespace Generator {
    struct MANAGED_API NextPrimeFinder;
    struct MANAGED_API PrimeGeneratorBase;
    struct MANAGED_API SequentialSearchPrimeGeneratorBase;
}}}}
namespace Mono { namespace Security {
    struct MANAGED_API ASN1;
    struct MANAGED_API ASN1Convert;
    struct MANAGED_API BitConverterLE;
    struct MANAGED_API Oid;
    struct MANAGED_API ContentInfo;
    struct MANAGED_API EncryptedData;
    struct MANAGED_API EnvelopedData;
    struct MANAGED_API RecipientInfo;
    struct MANAGED_API SignedData;
    struct MANAGED_API SignerInfo;
    struct MANAGED_API PKCS7;
    struct MANAGED_API StrongNameSignature;
    struct MANAGED_API StrongName;
    struct MANAGED_API Element;
    struct MANAGED_API StrongNameManager;
    struct MANAGED_API Uri;
    struct MANAGED_API UriScheme;
}}
namespace Mono { namespace Security { namespace Authenticode {
    struct MANAGED_API AuthenticodeBase;
    struct MANAGED_API AuthenticodeDeformatter;
}}}
namespace Mono { namespace Security { namespace Cryptography {
    struct MANAGED_API CryptoConvert;
    struct MANAGED_API KeyBuilder;
    struct MANAGED_API BlockProcessor;
    struct MANAGED_API DSAManaged;
    struct MANAGED_API HMACAlgorithm;
    struct MANAGED_API KeyPairPersistence;
    struct MANAGED_API MACAlgorithm;
    struct MANAGED_API PKCS1;
    struct MANAGED_API PrivateKeyInfo;
    struct MANAGED_API EncryptedPrivateKeyInfo;
    struct MANAGED_API PKCS8;
    struct MANAGED_API RSAManaged;
    struct MANAGED_API SymmetricTransform;
}}}
namespace Mono { namespace Security { namespace X509 {
    struct MANAGED_API PKCS5;
    struct MANAGED_API PKCS9;
    struct MANAGED_API SafeBag;
    struct MANAGED_API DeriveBytes;
    struct MANAGED_API PKCS12;
    struct MANAGED_API TestAnchors;
    struct MANAGED_API TrustAnchors;
    struct MANAGED_API X501;
    struct MANAGED_API X509Certificate;
    struct MANAGED_API X509CertificateEnumerator;
    struct MANAGED_API X509CertificateCollection;
    struct MANAGED_API X509Chain;
    struct MANAGED_API X509CrlEntry;
    struct MANAGED_API X509Crl;
    struct MANAGED_API X509Extension;
    struct MANAGED_API X509ExtensionCollection;
    struct MANAGED_API X509Store;
    struct MANAGED_API X509StoreManager;
    struct MANAGED_API Names;
    struct MANAGED_API X509Stores;
    struct MANAGED_API AttributeTypeAndValue;
    struct MANAGED_API Name;
    struct MANAGED_API CommonName;
    struct MANAGED_API SerialNumber;
    struct MANAGED_API LocalityName;
    struct MANAGED_API StateOrProvinceName;
    struct MANAGED_API OrganizationName;
    struct MANAGED_API OrganizationalUnitName;
    struct MANAGED_API EmailAddress;
    struct MANAGED_API DomainComponent;
    struct MANAGED_API UserId;
    struct MANAGED_API Oid2;
    struct MANAGED_API Title;
    struct MANAGED_API CountryName;
    struct MANAGED_API DnQualifier;
    struct MANAGED_API Surname;
    struct MANAGED_API GivenName;
    struct MANAGED_API Initial;
    struct MANAGED_API X520;
    struct MANAGED_API ITrustAnchors;
}}}
namespace Mono { namespace Security { namespace X509 { namespace Extensions {
    struct MANAGED_API BasicConstraintsExtension;
    struct MANAGED_API KeyUsageExtension;
    struct MANAGED_API SubjectKeyIdentifierExtension;
}}}}
namespace Mono { namespace Xml {
    struct MANAGED_API SecurityParser;
    struct MANAGED_API DefaultHandler;
    struct MANAGED_API AttrListImpl;
    struct MANAGED_API SmallXmlParser;
    struct MANAGED_API SmallXmlParserException;
    struct MANAGED_API IContentHandler;
    struct MANAGED_API IAttrList;
}}
namespace System {
    struct MANAGED_API MonoTODOAttribute;
    struct MANAGED_API MonoDocumentationNoteAttribute;
    struct MANAGED_API MonoExtensionAttribute;
    struct MANAGED_API MonoInternalNoteAttribute;
    struct MANAGED_API MonoLimitationAttribute;
    struct MANAGED_API MonoNotSupportedAttribute;
    struct MANAGED_API AccessViolationException;
    struct MANAGED_API ActivationContext;
    struct MANAGED_API Activator;
    struct MANAGED_API AggregateException;
    struct MANAGED_API Loader;
    struct MANAGED_API Initializer;
    struct MANAGED_API AppDomain;
    struct MANAGED_API AppDomainManager;
    struct MANAGED_API AppDomainSetup;
    struct MANAGED_API AppDomainUnloadedException;
    struct MANAGED_API ApplicationException;
    struct MANAGED_API ApplicationId;
    struct MANAGED_API ApplicationIdentity;
    struct MANAGED_API ArgumentException;
    struct MANAGED_API ArgumentNullException;
    struct MANAGED_API ArgumentOutOfRangeException;
    struct MANAGED_API ArithmeticException;
    struct MANAGED_API SimpleEnumerator;
    struct MANAGED_API Array;
    struct MANAGED_API ArrayTypeMismatchException;
    struct MANAGED_API AssemblyLoadEventArgs;
    struct MANAGED_API Attribute;
    struct MANAGED_API AttributeUsageAttribute;
    struct MANAGED_API BadImageFormatException;
    struct MANAGED_API BitConverter;
    struct MANAGED_API Buffer;
    struct MANAGED_API CannotUnloadAppDomainException;
    struct MANAGED_API CharEnumerator;
    struct MANAGED_API CLSCompliantAttribute;
    struct MANAGED_API WindowsConsole;
    struct MANAGED_API Console;
    struct MANAGED_API ConsoleCancelEventArgs;
    struct MANAGED_API ConsoleDriver;
    struct MANAGED_API ContextBoundObject;
    struct MANAGED_API ContextMarshalException;
    struct MANAGED_API ContextStaticAttribute;
    struct MANAGED_API ControlCharacters;
    struct MANAGED_API Convert;
    struct MANAGED_API DataMisalignedException;
    struct MANAGED_API DateTimeUtils;
    struct MANAGED_API DBNull;
    struct MANAGED_API DelegateData;
    struct MANAGED_API Delegate;
    struct MANAGED_API DelegateEntry;
    struct MANAGED_API DelegateSerializationHolder;
    struct MANAGED_API DivideByZeroException;
    struct MANAGED_API DllNotFoundException;
    struct MANAGED_API DuplicateWaitObjectException;
    struct MANAGED_API EntryPointNotFoundException;
    struct MANAGED_API SByteComparer;
    struct MANAGED_API ShortComparer;
    struct MANAGED_API IntComparer;
    struct MANAGED_API LongComparer;
    struct MANAGED_API Enum;
    struct MANAGED_API Environment;
    struct MANAGED_API EventArgs;
    struct MANAGED_API Exception;
    struct MANAGED_API ExecutionEngineException;
    struct MANAGED_API FieldAccessException;
    struct MANAGED_API FlagsAttribute;
    struct MANAGED_API FormatException;
    struct MANAGED_API GC;
    struct MANAGED_API GuidParser;
    struct MANAGED_API IndexOutOfRangeException;
    struct MANAGED_API InsufficientExecutionStackException;
    struct MANAGED_API InsufficientMemoryException;
    struct MANAGED_API InvalidCastException;
    struct MANAGED_API InvalidOperationException;
    struct MANAGED_API InvalidProgramException;
    struct MANAGED_API InvalidTimeZoneException;
    struct MANAGED_API KnownTerminals;
    template<class T> struct MANAGED_API Lazy;
    struct MANAGED_API LoaderOptimizationAttribute;
    struct MANAGED_API LocalDataStoreSlot;
    struct MANAGED_API MarshalByRefObject;
    struct MANAGED_API Math;
    struct MANAGED_API MemberAccessException;
    struct MANAGED_API MethodAccessException;
    struct MANAGED_API MissingFieldException;
    struct MANAGED_API MissingMemberException;
    struct MANAGED_API MissingMethodException;
    struct MANAGED_API MonoAsyncCall;
    struct MANAGED_API MonoCQItem;
    struct MANAGED_API AttributeInfo;
    struct MANAGED_API MonoCustomAttrs;
    struct MANAGED_API MonoListItem;
    struct MANAGED_API MonoTypeInfo;
    struct MANAGED_API MonoType;
    struct MANAGED_API MTAThreadAttribute;
    struct MANAGED_API MulticastDelegate;
    struct MANAGED_API MulticastNotSupportedException;
    struct MANAGED_API NonSerializedAttribute;
    struct MANAGED_API NotCancelableException;
    struct MANAGED_API NotFiniteNumberException;
    struct MANAGED_API NotImplementedException;
    struct MANAGED_API NotSupportedException;
    struct MANAGED_API Nullable;
    struct MANAGED_API NullConsoleDriver;
    struct MANAGED_API NullReferenceException;
    struct MANAGED_API CustomInfo;
    struct MANAGED_API NumberFormatter;
    struct MANAGED_API Object;
    struct MANAGED_API ObjectDisposedException;
    struct MANAGED_API ObsoleteAttribute;
    struct MANAGED_API OperatingSystem;
    struct MANAGED_API OperationCanceledException;
    struct MANAGED_API OutOfMemoryException;
    struct MANAGED_API OverflowException;
    struct MANAGED_API ParamArrayAttribute;
    struct MANAGED_API PlatformNotSupportedException;
    struct MANAGED_API Random;
    struct MANAGED_API RankException;
    struct MANAGED_API ResolveEventArgs;
    struct MANAGED_API SerializableAttribute;
    struct MANAGED_API StackOverflowException;
    struct MANAGED_API STAThreadAttribute;
    struct MANAGED_API String;
    struct MANAGED_API StringComparer;
    struct MANAGED_API CultureAwareComparer;
    struct MANAGED_API OrdinalComparer;
    struct MANAGED_API SystemException;
    struct MANAGED_API TermInfoDriver;
    struct MANAGED_API ByteMatcher;
    struct MANAGED_API TermInfoReader;
    struct MANAGED_API ThreadStaticAttribute;
    struct MANAGED_API TimeoutException;
    struct MANAGED_API Parser;
    struct MANAGED_API FormatParser;
    struct MANAGED_API TimeZone;
    struct MANAGED_API CurrentSystemTimeZone;
    struct MANAGED_API TimeZoneNotFoundException;
    struct MANAGED_API Tuple;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class TRest> struct MANAGED_API Tuple2;
    template<class T1> struct MANAGED_API Tuple3;
    template<class T1, class T2> struct MANAGED_API Tuple4;
    template<class T1, class T2, class T3> struct MANAGED_API Tuple5;
    template<class T1, class T2, class T3, class T4> struct MANAGED_API Tuple6;
    template<class T1, class T2, class T3, class T4, class T5> struct MANAGED_API Tuple7;
    template<class T1, class T2, class T3, class T4, class T5, class T6> struct MANAGED_API Tuple8;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7> struct MANAGED_API Tuple9;
    struct MANAGED_API Type;
    struct MANAGED_API TypeAccessException;
    struct MANAGED_API TypeInitializationException;
    struct MANAGED_API TypeLoadException;
    struct MANAGED_API ArraySpec;
    struct MANAGED_API TypeSpec;
    struct MANAGED_API TypeUnloadedException;
    struct MANAGED_API UnauthorizedAccessException;
    struct MANAGED_API UnhandledExceptionEventArgs;
    struct MANAGED_API UnitySerializationHolder;
    struct MANAGED_API ValueType;
    struct MANAGED_API Version;
    struct MANAGED_API WeakReference;
    struct MANAGED_API WindowsConsoleDriver;
    struct MANAGED_API __ComObject;
    struct MANAGED_API ArgIterator;
    template<class T> struct MANAGED_API InternalEnumerator;
    template<class T> struct MANAGED_API ArraySegment;
    struct MANAGED_API Boolean;
    struct MANAGED_API Byte;
    struct MANAGED_API Char;
    struct MANAGED_API ConsoleKeyInfo;
    struct MANAGED_API DateTime;
    struct MANAGED_API DateTimeOffset;
    struct MANAGED_API Decimal;
    struct MANAGED_API Double;
    struct MANAGED_API MonoEnumInfo;
    struct MANAGED_API Guid;
    struct MANAGED_API Int16;
    struct MANAGED_API Int32;
    struct MANAGED_API Int64;
    struct MANAGED_API IntPtr;
    struct MANAGED_API ModuleHandle;
    template<class T> struct MANAGED_API Nullable2;
    struct MANAGED_API RuntimeArgumentHandle;
    struct MANAGED_API RuntimeFieldHandle;
    struct MANAGED_API RuntimeMethodHandle;
    struct MANAGED_API RuntimeTypeHandle;
    struct MANAGED_API SByte;
    struct MANAGED_API Single;
    struct MANAGED_API FormatElement;
    struct MANAGED_API TimeSpan;
    struct MANAGED_API TypedReference;
    struct MANAGED_API UInt16;
    struct MANAGED_API UInt32;
    struct MANAGED_API UInt64;
    struct MANAGED_API UIntPtr;
    struct MANAGED_API Variant;
    struct MANAGED_API BRECORD;
    struct MANAGED_API Void;
    struct MANAGED_API ConsoleCursorInfo;
    struct MANAGED_API InputRecord;
    struct MANAGED_API CharInfo;
    struct MANAGED_API Coord;
    struct MANAGED_API SmallRect;
    struct MANAGED_API ConsoleScreenBufferInfo;
    struct MANAGED_API IAppDomainSetup;
    struct MANAGED_API IApplicationDescription;
    struct MANAGED_API IAsyncResult;
    struct MANAGED_API ICloneable;
    struct MANAGED_API IComparable;
    template<class T> struct MANAGED_API IComparable2;
    struct MANAGED_API IConsoleDriver;
    struct MANAGED_API IConvertible;
    struct MANAGED_API ICustomFormatter;
    struct MANAGED_API IDisposable;
    template<class T> struct MANAGED_API IEquatable;
    struct MANAGED_API IFormatProvider;
    struct MANAGED_API IFormattable;
    struct MANAGED_API IHostContext;
    template<class T> struct MANAGED_API IObservable;
    template<class T> struct MANAGED_API IObserver;
    struct MANAGED_API IServiceProvider;
    struct MANAGED_API _AppDomain;
}
namespace System { namespace Collections {
    struct MANAGED_API ArrayListEnumerator;
    struct MANAGED_API SimpleEnumerator2;
    struct MANAGED_API EnumeratorWithRange;
    struct MANAGED_API ArrayListAdapter;
    struct MANAGED_API ArrayListWrapper;
    struct MANAGED_API SynchronizedArrayListWrapper;
    struct MANAGED_API FixedSizeArrayListWrapper;
    struct MANAGED_API ReadOnlyArrayListWrapper;
    struct MANAGED_API RangedArrayList;
    struct MANAGED_API SynchronizedListWrapper;
    struct MANAGED_API FixedSizeListWrapper;
    struct MANAGED_API ReadOnlyListWrapper;
    struct MANAGED_API ListWrapper;
    struct MANAGED_API ArrayList;
    struct MANAGED_API BitArrayEnumerator;
    struct MANAGED_API BitArray;
    struct MANAGED_API CaseInsensitiveComparer;
    struct MANAGED_API CaseInsensitiveHashCodeProvider;
    struct MANAGED_API CollectionBase;
    struct MANAGED_API CollectionDebuggerView;
    struct MANAGED_API Comparer;
    struct MANAGED_API DictionaryBase;
    struct MANAGED_API KeyMarker;
    struct MANAGED_API Enumerator;
    struct MANAGED_API HashKeys;
    struct MANAGED_API HashValues;
    struct MANAGED_API SyncHashtable;
    struct MANAGED_API Hashtable;
    struct MANAGED_API SyncQueue;
    struct MANAGED_API QueueEnumerator;
    struct MANAGED_API Queue;
    struct MANAGED_API ReadOnlyCollectionBase;
    struct MANAGED_API Enumerator2;
    struct MANAGED_API ListKeys;
    struct MANAGED_API ListValues;
    struct MANAGED_API SynchedSortedList;
    struct MANAGED_API SortedList;
    struct MANAGED_API SyncStack;
    struct MANAGED_API Enumerator3;
    struct MANAGED_API Stack;
    struct MANAGED_API ComparerImpl;
    struct MANAGED_API StructuralComparisons;
    struct MANAGED_API DictionaryEntry;
    struct MANAGED_API Slot;
    struct MANAGED_API Slot2;
    struct MANAGED_API ICollection;
    struct MANAGED_API IComparer;
    struct MANAGED_API IDictionary;
    struct MANAGED_API IDictionaryEnumerator;
    struct MANAGED_API IEnumerable;
    struct MANAGED_API IEnumerator;
    struct MANAGED_API IEqualityComparer;
    struct MANAGED_API IHashCodeProvider;
    struct MANAGED_API IList;
    struct MANAGED_API IStructuralComparable;
    struct MANAGED_API IStructuralEquatable;
}}
namespace System { namespace Collections { namespace Concurrent {
    template<class TKey, class TValue> struct MANAGED_API ConcurrentDictionaryEnumerator;
    template<class TKey, class TValue> struct MANAGED_API ConcurrentDictionary;
    template<class T> struct MANAGED_API Node;
    template<class T> struct MANAGED_API ConcurrentOrderedList;
    template<class T> struct MANAGED_API Node2;
    template<class T> struct MANAGED_API NodeObjectPool;
    template<class T> struct MANAGED_API ConcurrentQueue;
    template<class T> struct MANAGED_API Node3;
    template<class T> struct MANAGED_API NodeObjectPool2;
    template<class T> struct MANAGED_API ConcurrentStack;
    template<class T> struct MANAGED_API ObjectPool;
    template<class TSource> struct MANAGED_API ProxyEnumerator;
    template<class TSource> struct MANAGED_API OrderablePartitioner;
    struct MANAGED_API Partitioner2;
    template<class TSource> struct MANAGED_API Partitioner;
    template<class TKey, class T> struct MANAGED_API Node4;
    template<class TKey, class T> struct MANAGED_API NodeObjectPool3;
    template<class TKey, class T> struct MANAGED_API SplitOrderedList;
    template<class TKey, class T> struct MANAGED_API SimpleRwLock;
    template<class T> struct MANAGED_API IProducerConsumerCollection;
}}}
namespace System { namespace Collections { namespace Concurrent { namespace Partitioners {
    template<class T> struct MANAGED_API PartitionerState;
    template<class T> struct MANAGED_API EnumerablePartitioner;
    template<class T> struct MANAGED_API Range;
    template<class T> struct MANAGED_API ListPartitioner;
    struct MANAGED_API UserRangePartitioner;
    struct MANAGED_API UserLongRangePartitioner;
}}}}
namespace System { namespace Collections { namespace Generic {
    template<class T> struct MANAGED_API CollectionDebuggerView2;
    template<class T, class U> struct MANAGED_API CollectionDebuggerView3;
    template<class T> struct MANAGED_API DefaultComparer;
    template<class T> struct MANAGED_API Comparer2;
    template<class T> struct MANAGED_API GenericComparer;
    template<class TKey, class TValue> struct MANAGED_API ShimEnumerator;
    template<class TKey, class TValue> struct MANAGED_API KeyCollection;
    template<class TKey, class TValue> struct MANAGED_API ValueCollection;
    template<class TKey, class TValue> struct MANAGED_API Dictionary;
    template<class T> struct MANAGED_API DefaultComparer2;
    template<class T> struct MANAGED_API EqualityComparer;
    struct MANAGED_API InternalStringComparer;
    template<class T> struct MANAGED_API GenericEqualityComparer;
    struct MANAGED_API KeyNotFoundException;
    template<class T> struct MANAGED_API List;
    struct MANAGED_API Link;
    template<class TKey, class TValue> struct MANAGED_API Enumerator4;
    template<class TKey, class TValue> struct MANAGED_API Enumerator5;
    template<class TKey, class TValue> struct MANAGED_API Enumerator6;
    template<class TKey, class TValue> struct MANAGED_API KeyValuePair;
    template<class T> struct MANAGED_API Enumerator7;
    template<class T> struct MANAGED_API ICollection2;
    template<class T> struct MANAGED_API IComparer2;
    template<class TKey, class TValue> struct MANAGED_API IDictionary2;
    template<class T> struct MANAGED_API IEnumerable2;
    template<class T> struct MANAGED_API IEnumerator2;
    template<class T> struct MANAGED_API IEqualityComparer2;
    template<class T> struct MANAGED_API IList2;
}}}
namespace System { namespace Collections { namespace ObjectModel {
    template<class T> struct MANAGED_API Collection;
    template<class TKey, class TItem> struct MANAGED_API KeyedCollection;
    template<class T> struct MANAGED_API ReadOnlyCollection;
}}}
namespace System { namespace Configuration { namespace Assemblies {
    struct MANAGED_API AssemblyHash;
}}}
namespace System { namespace Deployment { namespace Internal {
    struct MANAGED_API InternalActivationContextHelper;
    struct MANAGED_API InternalApplicationIdentityHelper;
}}}
namespace System { namespace Diagnostics {
    struct MANAGED_API ConditionalAttribute;
    struct MANAGED_API DebuggableAttribute;
    struct MANAGED_API Debugger;
    struct MANAGED_API DebuggerBrowsableAttribute;
    struct MANAGED_API DebuggerDisplayAttribute;
    struct MANAGED_API DebuggerHiddenAttribute;
    struct MANAGED_API DebuggerNonUserCodeAttribute;
    struct MANAGED_API DebuggerStepperBoundaryAttribute;
    struct MANAGED_API DebuggerStepThroughAttribute;
    struct MANAGED_API DebuggerTypeProxyAttribute;
    struct MANAGED_API DebuggerVisualizerAttribute;
    struct MANAGED_API StackFrame;
    struct MANAGED_API StackTrace;
}}
namespace System { namespace Diagnostics { namespace CodeAnalysis {
    struct MANAGED_API SuppressMessageAttribute;
}}}
namespace System { namespace Diagnostics { namespace Contracts {
    struct MANAGED_API Contract;
    struct MANAGED_API ContractClassAttribute;
    struct MANAGED_API ContractClassForAttribute;
    struct MANAGED_API ContractException;
    struct MANAGED_API ContractFailedEventArgs;
    struct MANAGED_API ContractInvariantMethodAttribute;
    struct MANAGED_API ContractPublicPropertyNameAttribute;
    struct MANAGED_API ContractReferenceAssemblyAttribute;
    struct MANAGED_API ContractRuntimeIgnoredAttribute;
    struct MANAGED_API ContractShouldAssertException;
    struct MANAGED_API ContractVerificationAttribute;
    struct MANAGED_API PureAttribute;
}}}
namespace System { namespace Diagnostics { namespace Contracts { namespace Internal {
    struct MANAGED_API ContractHelper;
}}}}
namespace System { namespace Diagnostics { namespace SymbolStore {
    struct MANAGED_API SymDocumentType;
    struct MANAGED_API SymLanguageType;
    struct MANAGED_API SymLanguageVendor;
    struct MANAGED_API SymbolToken;
    struct MANAGED_API ISymbolBinder;
    struct MANAGED_API ISymbolBinder1;
    struct MANAGED_API ISymbolDocument;
    struct MANAGED_API ISymbolDocumentWriter;
    struct MANAGED_API ISymbolMethod;
    struct MANAGED_API ISymbolNamespace;
    struct MANAGED_API ISymbolReader;
    struct MANAGED_API ISymbolScope;
    struct MANAGED_API ISymbolVariable;
    struct MANAGED_API ISymbolWriter;
}}}
namespace System { namespace Globalization {
    struct MANAGED_API SortKey;
    struct MANAGED_API Calendar;
    struct MANAGED_API CCMath;
    struct MANAGED_API CCFixed;
    struct MANAGED_API CCGregorianCalendar;
    struct MANAGED_API CCJulianCalendar;
    struct MANAGED_API CCHebrewCalendar;
    struct MANAGED_API CCHijriCalendar;
    struct MANAGED_API CCEastAsianLunisolarCalendar;
    struct MANAGED_API CCGregorianEraHandler;
    struct MANAGED_API CCEastAsianLunisolarEraHandler;
    struct MANAGED_API CharUnicodeInfo;
    struct MANAGED_API ChineseLunisolarCalendar;
    struct MANAGED_API CodePageDataItem;
    struct MANAGED_API CompareInfo;
    struct MANAGED_API CultureInfo;
    struct MANAGED_API CultureNotFoundException;
    struct MANAGED_API DateTimeFormatInfo;
    struct MANAGED_API DaylightTime;
    struct MANAGED_API EastAsianLunisolarCalendar;
    struct MANAGED_API GregorianCalendar;
    struct MANAGED_API HebrewCalendar;
    struct MANAGED_API HijriCalendar;
    struct MANAGED_API IdnMapping;
    struct MANAGED_API Bootstring;
    struct MANAGED_API Punycode;
    struct MANAGED_API JapaneseCalendar;
    struct MANAGED_API JapaneseLunisolarCalendar;
    struct MANAGED_API JulianCalendar;
    struct MANAGED_API KoreanCalendar;
    struct MANAGED_API KoreanLunisolarCalendar;
    struct MANAGED_API NumberFormatInfo;
    struct MANAGED_API PersianCalendar;
    struct MANAGED_API RegionInfo;
    struct MANAGED_API StringInfo;
    struct MANAGED_API TaiwanCalendar;
    struct MANAGED_API TaiwanLunisolarCalendar;
    struct MANAGED_API TextElementEnumerator;
    struct MANAGED_API TextInfo;
    struct MANAGED_API ThaiBuddhistCalendar;
    struct MANAGED_API UmAlQuraCalendar;
    struct MANAGED_API Era;
    struct MANAGED_API Era2;
    struct MANAGED_API Data;
}}
namespace System { namespace IO {
    struct MANAGED_API CStreamReader;
    struct MANAGED_API CStreamWriter;
    struct MANAGED_API BinaryReader;
    struct MANAGED_API BinaryWriter;
    struct MANAGED_API BufferedStream;
    struct MANAGED_API Directory;
    struct MANAGED_API DirectoryInfo;
    struct MANAGED_API DirectoryNotFoundException;
    struct MANAGED_API DriveInfo;
    struct MANAGED_API DriveNotFoundException;
    struct MANAGED_API EndOfStreamException;
    struct MANAGED_API File;
    struct MANAGED_API FileInfo;
    struct MANAGED_API FileLoadException;
    struct MANAGED_API FileNotFoundException;
    struct MANAGED_API FileStream;
    struct MANAGED_API FileStreamAsyncResult;
    struct MANAGED_API FileSystemInfo;
    struct MANAGED_API IntPtrStream;
    struct MANAGED_API IOException;
    struct MANAGED_API MemoryStream;
    struct MANAGED_API MonoIO;
    struct MANAGED_API Path;
    struct MANAGED_API PathTooLongException;
    struct MANAGED_API SearchPattern;
    struct MANAGED_API Stream;
    struct MANAGED_API NullStream;
    struct MANAGED_API SynchronizedStream;
    struct MANAGED_API NullStreamReader;
    struct MANAGED_API StreamReader;
    struct MANAGED_API StreamWriter;
    struct MANAGED_API StringReader;
    struct MANAGED_API StringWriter;
    struct MANAGED_API NullTextReader;
    struct MANAGED_API TextReader;
    struct MANAGED_API SynchronizedReader;
    struct MANAGED_API NullTextWriter;
    struct MANAGED_API TextWriter;
    struct MANAGED_API SynchronizedWriter;
    struct MANAGED_API UnexceptionalStreamReader;
    struct MANAGED_API UnexceptionalStreamWriter;
    struct MANAGED_API UnmanagedMemoryAccessor;
    struct MANAGED_API UnmanagedMemoryStream;
    struct MANAGED_API MonoIOStat;
}}
namespace System { namespace IO { namespace IsolatedStorage {
    struct MANAGED_API IsolatedStorage;
    struct MANAGED_API IsolatedStorageException;
    struct MANAGED_API IsolatedStorageFile;
    struct MANAGED_API IsolatedStorageFileEnumerator;
    struct MANAGED_API IsolatedStorageFileStream;
    struct MANAGED_API IsolatedStorageSecurityState;
    struct MANAGED_API Identities;
    struct MANAGED_API INormalizeForIsolatedStorage;
}}}
namespace System { namespace Reflection {
    struct MANAGED_API AmbiguousMatchException;
    struct MANAGED_API ResolveEventHolder;
    struct MANAGED_API ResourceCloseHandler;
    struct MANAGED_API Assembly;
    struct MANAGED_API AssemblyAlgorithmIdAttribute;
    struct MANAGED_API AssemblyCompanyAttribute;
    struct MANAGED_API AssemblyConfigurationAttribute;
    struct MANAGED_API AssemblyCopyrightAttribute;
    struct MANAGED_API AssemblyCultureAttribute;
    struct MANAGED_API AssemblyDefaultAliasAttribute;
    struct MANAGED_API AssemblyDelaySignAttribute;
    struct MANAGED_API AssemblyDescriptionAttribute;
    struct MANAGED_API AssemblyFileVersionAttribute;
    struct MANAGED_API AssemblyFlagsAttribute;
    struct MANAGED_API AssemblyInformationalVersionAttribute;
    struct MANAGED_API AssemblyKeyFileAttribute;
    struct MANAGED_API AssemblyKeyNameAttribute;
    struct MANAGED_API AssemblyName;
    struct MANAGED_API AssemblyNameProxy;
    struct MANAGED_API AssemblyProductAttribute;
    struct MANAGED_API AssemblyTitleAttribute;
    struct MANAGED_API AssemblyTrademarkAttribute;
    struct MANAGED_API AssemblyVersionAttribute;
    struct MANAGED_API Default;
    struct MANAGED_API Binder;
    struct MANAGED_API ConstructorInfo;
    struct MANAGED_API LazyCAttrData;
    struct MANAGED_API CustomAttributeData;
    struct MANAGED_API CustomAttributeFormatException;
    struct MANAGED_API DefaultMemberAttribute;
    struct MANAGED_API EventInfo;
    struct MANAGED_API ExceptionHandlingClause;
    struct MANAGED_API FieldInfo;
    struct MANAGED_API InvalidFilterCriteriaException;
    struct MANAGED_API LocalVariableInfo;
    struct MANAGED_API ManifestResourceInfo;
    struct MANAGED_API MemberInfo;
    struct MANAGED_API MemberInfoSerializationHolder;
    struct MANAGED_API MethodBase;
    struct MANAGED_API MethodBody;
    struct MANAGED_API MethodInfo;
    struct MANAGED_API Missing;
    struct MANAGED_API Module;
    struct MANAGED_API MonoAssembly;
    struct MANAGED_API MonoEvent;
    struct MANAGED_API MonoField;
    struct MANAGED_API MonoGenericClass;
    struct MANAGED_API MonoGenericMethod;
    struct MANAGED_API MonoGenericCMethod;
    struct MANAGED_API MonoMethod;
    struct MANAGED_API MonoCMethod;
    struct MANAGED_API MonoModule;
    struct MANAGED_API MonoProperty;
    struct MANAGED_API ObfuscateAssemblyAttribute;
    struct MANAGED_API ObfuscationAttribute;
    struct MANAGED_API ParameterInfo;
    struct MANAGED_API Pointer;
    struct MANAGED_API PropertyInfo;
    struct MANAGED_API ReflectionTypeLoadException;
    struct MANAGED_API StrongNameKeyPair;
    struct MANAGED_API TargetException;
    struct MANAGED_API TargetInvocationException;
    struct MANAGED_API TargetParameterCountException;
    struct MANAGED_API TypeDelegator;
    struct MANAGED_API MonoArrayMethod;
    struct MANAGED_API CustomAttributeNamedArgument;
    struct MANAGED_API CustomAttributeTypedArgument;
    struct MANAGED_API InterfaceMapping;
    struct MANAGED_API MonoEventInfo;
    struct MANAGED_API MonoMethodInfo;
    struct MANAGED_API MonoPropertyInfo;
    struct MANAGED_API ParameterModifier;
    struct MANAGED_API ICustomAttributeProvider;
    struct MANAGED_API IReflect;
}}
namespace System { namespace Reflection { namespace Emit {
    struct MANAGED_API GenericInstanceKey;
    struct MANAGED_API AssemblyBuilder;
    struct MANAGED_API ConstructorBuilder;
    struct MANAGED_API ConstructorOnTypeBuilderInst;
    struct MANAGED_API CustomAttributeBuilder;
    struct MANAGED_API DerivedType;
    struct MANAGED_API ArrayType;
    struct MANAGED_API ByRefType;
    struct MANAGED_API PointerType;
    struct MANAGED_API DynamicILInfo;
    struct MANAGED_API AnonHostModuleHolder;
    struct MANAGED_API DynamicMethod;
    struct MANAGED_API DynamicMethodTokenGenerator;
    struct MANAGED_API EnumBuilder;
    struct MANAGED_API EventBuilder;
    struct MANAGED_API EventOnTypeBuilderInst;
    struct MANAGED_API FieldBuilder;
    struct MANAGED_API FieldOnTypeBuilderInst;
    struct MANAGED_API GenericTypeParameterBuilder;
    struct MANAGED_API ILGenerator;
    struct MANAGED_API SequencePointList;
    struct MANAGED_API LocalBuilder;
    struct MANAGED_API MethodBuilder;
    struct MANAGED_API MethodOnTypeBuilderInst;
    struct MANAGED_API MethodRental;
    struct MANAGED_API ModuleBuilder;
    struct MANAGED_API ModuleBuilderTokenGenerator;
    struct MANAGED_API OpCodeNames;
    struct MANAGED_API OpCodes;
    struct MANAGED_API ParameterBuilder;
    struct MANAGED_API PropertyBuilder;
    struct MANAGED_API PropertyOnTypeBuilderInst;
    struct MANAGED_API SignatureHelper;
    struct MANAGED_API TypeBuilder;
    struct MANAGED_API UnmanagedMarshal;
    struct MANAGED_API RefEmitPermissionSet;
    struct MANAGED_API MonoResource;
    struct MANAGED_API MonoWin32Resource;
    struct MANAGED_API CustomAttributeInfo;
    struct MANAGED_API EventToken;
    struct MANAGED_API FieldToken;
    struct MANAGED_API ILExceptionBlock;
    struct MANAGED_API ILExceptionInfo;
    struct MANAGED_API ILTokenInfo;
    struct MANAGED_API LabelFixup;
    struct MANAGED_API LabelData;
    struct MANAGED_API SequencePoint;
    struct MANAGED_API Label;
    struct MANAGED_API MethodToken;
    struct MANAGED_API OpCode;
    struct MANAGED_API ParameterToken;
    struct MANAGED_API PropertyToken;
    struct MANAGED_API SignatureToken;
    struct MANAGED_API StringToken;
    struct MANAGED_API TypeToken;
    struct MANAGED_API TokenGenerator;
}}}
namespace System { namespace Resources {
    struct MANAGED_API MissingManifestResourceException;
    struct MANAGED_API MissingSatelliteAssemblyException;
    struct MANAGED_API NeutralResourcesLanguageAttribute;
    struct MANAGED_API ResourceManager;
    struct MANAGED_API ResourceEnumerator;
    struct MANAGED_API ResourceReader;
    struct MANAGED_API ResourceSet;
    struct MANAGED_API TypeByNameObject;
    struct MANAGED_API StreamWrapper;
    struct MANAGED_API ResourceWriter;
    struct MANAGED_API RuntimeResourceSet;
    struct MANAGED_API SatelliteContractVersionAttribute;
    struct MANAGED_API NameOrId;
    struct MANAGED_API Win32Resource;
    struct MANAGED_API Win32EncodedResource;
    struct MANAGED_API Win32IconResource;
    struct MANAGED_API Win32GroupIconResource;
    struct MANAGED_API Win32VersionResource;
    struct MANAGED_API Win32ResFileReader;
    struct MANAGED_API ICONDIRENTRY;
    struct MANAGED_API Win32IconFileReader;
    struct MANAGED_API ResourceInfo;
    struct MANAGED_API ResourceCacheItem;
    struct MANAGED_API IResourceReader;
    struct MANAGED_API IResourceWriter;
}}
namespace System { namespace Runtime {
    struct MANAGED_API AssemblyTargetedPatchBandAttribute;
    struct MANAGED_API GCSettings;
    struct MANAGED_API MemoryFailPoint;
    struct MANAGED_API TargetedPatchingOptOutAttribute;
}}
namespace System { namespace Runtime { namespace CompilerServices {
    struct MANAGED_API AccessedThroughPropertyAttribute;
    struct MANAGED_API CallConvCdecl;
    struct MANAGED_API CallConvFastcall;
    struct MANAGED_API CallConvStdcall;
    struct MANAGED_API CallConvThiscall;
    struct MANAGED_API CompilationRelaxationsAttribute;
    struct MANAGED_API CompilerGeneratedAttribute;
    struct MANAGED_API CompilerGlobalScopeAttribute;
    struct MANAGED_API CompilerMarshalOverride;
    template<class TKey, class TValue> struct MANAGED_API ConditionalWeakTable;
    struct MANAGED_API CustomConstantAttribute;
    struct MANAGED_API DateTimeConstantAttribute;
    struct MANAGED_API DecimalConstantAttribute;
    struct MANAGED_API DefaultDependencyAttribute;
    struct MANAGED_API DependencyAttribute;
    struct MANAGED_API DiscardableAttribute;
    struct MANAGED_API FixedAddressValueTypeAttribute;
    struct MANAGED_API FixedBufferAttribute;
    struct MANAGED_API HasCopySemanticsAttribute;
    struct MANAGED_API IDispatchConstantAttribute;
    struct MANAGED_API IndexerNameAttribute;
    struct MANAGED_API InternalsVisibleToAttribute;
    struct MANAGED_API IsBoxed;
    struct MANAGED_API IsByValue;
    struct MANAGED_API IsConst;
    struct MANAGED_API IsCopyConstructed;
    struct MANAGED_API IsExplicitlyDereferenced;
    struct MANAGED_API IsImplicitlyDereferenced;
    struct MANAGED_API IsJitIntrinsic;
    struct MANAGED_API IsLong;
    struct MANAGED_API IsPinned;
    struct MANAGED_API IsSignUnspecifiedByte;
    struct MANAGED_API IsUdtReturn;
    struct MANAGED_API IsVolatile;
    struct MANAGED_API IUnknownConstantAttribute;
    struct MANAGED_API MethodImplAttribute;
    struct MANAGED_API NativeCppClassAttribute;
    struct MANAGED_API ReferenceAssemblyAttribute;
    struct MANAGED_API RequiredAttributeAttribute;
    struct MANAGED_API RuntimeCompatibilityAttribute;
    struct MANAGED_API RuntimeHelpers;
    struct MANAGED_API RuntimeWrappedException;
    struct MANAGED_API ScopelessEnumAttribute;
    struct MANAGED_API SpecialNameAttribute;
    struct MANAGED_API StringFreezingAttribute;
    struct MANAGED_API SuppressIldasmAttribute;
    struct MANAGED_API TypeForwardedFromAttribute;
    struct MANAGED_API TypeForwardedToAttribute;
    struct MANAGED_API UnsafeValueTypeAttribute;
    struct MANAGED_API Ephemeron;
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    struct MANAGED_API CriticalFinalizerObject;
    struct MANAGED_API PrePrepareMethodAttribute;
    struct MANAGED_API ReliabilityContractAttribute;
}}}
namespace System { namespace Runtime { namespace ExceptionServices {
    struct MANAGED_API FirstChanceExceptionEventArgs;
    struct MANAGED_API HandleProcessCorruptedStateExceptionsAttribute;
}}}
namespace System { namespace Runtime { namespace Hosting {
    struct MANAGED_API ActivationArguments;
    struct MANAGED_API ApplicationActivator;
}}}
namespace System { namespace Runtime { namespace InteropServices {
    struct MANAGED_API AllowReversePInvokeCallsAttribute;
    struct MANAGED_API AutomationProxyAttribute;
    struct MANAGED_API BestFitMappingAttribute;
    struct MANAGED_API BStrWrapper;
    struct MANAGED_API ClassInterfaceAttribute;
    struct MANAGED_API CoClassAttribute;
    struct MANAGED_API ComAliasNameAttribute;
    struct MANAGED_API ComCompatibleVersionAttribute;
    struct MANAGED_API ComConversionLossAttribute;
    struct MANAGED_API ComDefaultInterfaceAttribute;
    struct MANAGED_API ComEventInterfaceAttribute;
    struct MANAGED_API COMException;
    struct MANAGED_API ComImportAttribute;
    struct MANAGED_API ComRegisterFunctionAttribute;
    struct MANAGED_API ComSourceInterfacesAttribute;
    struct MANAGED_API ComUnregisterFunctionAttribute;
    struct MANAGED_API ComVisibleAttribute;
    struct MANAGED_API CriticalHandle;
    struct MANAGED_API CurrencyWrapper;
    struct MANAGED_API DefaultCharSetAttribute;
    struct MANAGED_API DispatchWrapper;
    struct MANAGED_API DispIdAttribute;
    struct MANAGED_API DllImportAttribute;
    struct MANAGED_API ErrorWrapper;
    struct MANAGED_API ExtensibleClassFactory;
    struct MANAGED_API ExternalException;
    struct MANAGED_API FieldOffsetAttribute;
    struct MANAGED_API GuidAttribute;
    struct MANAGED_API IDispatchImplAttribute;
    struct MANAGED_API ImportedFromTypeLibAttribute;
    struct MANAGED_API InAttribute;
    struct MANAGED_API InterfaceTypeAttribute;
    struct MANAGED_API InvalidComObjectException;
    struct MANAGED_API InvalidOleVariantTypeException;
    struct MANAGED_API LCIDConversionAttribute;
    struct MANAGED_API Marshal;
    struct MANAGED_API MarshalAsAttribute;
    struct MANAGED_API MarshalDirectiveException;
    struct MANAGED_API OptionalAttribute;
    struct MANAGED_API OutAttribute;
    struct MANAGED_API PreserveSigAttribute;
    struct MANAGED_API PrimaryInteropAssemblyAttribute;
    struct MANAGED_API ProgIdAttribute;
    struct MANAGED_API RegistrationServices;
    struct MANAGED_API RuntimeEnvironment;
    struct MANAGED_API SafeArrayRankMismatchException;
    struct MANAGED_API SafeArrayTypeMismatchException;
    struct MANAGED_API SafeBuffer;
    struct MANAGED_API SafeHandle;
    struct MANAGED_API SEHException;
    struct MANAGED_API SetWin32ContextInIDispatchAttribute;
    struct MANAGED_API StructLayoutAttribute;
    struct MANAGED_API TypeIdentifierAttribute;
    struct MANAGED_API TypeLibConverter;
    struct MANAGED_API TypeLibFuncAttribute;
    struct MANAGED_API TypeLibImportClassAttribute;
    struct MANAGED_API TypeLibTypeAttribute;
    struct MANAGED_API TypeLibVarAttribute;
    struct MANAGED_API TypeLibVersionAttribute;
    struct MANAGED_API UnknownWrapper;
    struct MANAGED_API UnmanagedFunctionPointerAttribute;
    struct MANAGED_API VariantWrapper;
    struct MANAGED_API ArrayWithOffset;
    struct MANAGED_API BINDPTR;
    struct MANAGED_API BIND_OPTS;
    struct MANAGED_API CONNECTDATA;
    struct MANAGED_API DISPPARAMS;
    struct MANAGED_API DESCUNION;
    struct MANAGED_API ELEMDESC;
    struct MANAGED_API EXCEPINFO;
    struct MANAGED_API FILETIME;
    struct MANAGED_API FUNCDESC;
    struct MANAGED_API GCHandle;
    struct MANAGED_API HandleRef;
    struct MANAGED_API IDLDESC;
    struct MANAGED_API PARAMDESC;
    struct MANAGED_API STATSTG;
    struct MANAGED_API TYPEATTR;
    struct MANAGED_API TYPEDESC;
    struct MANAGED_API TYPELIBATTR;
    struct MANAGED_API DESCUNION2;
    struct MANAGED_API VARDESC;
    struct MANAGED_API ICustomAdapter;
    struct MANAGED_API ICustomFactory;
    struct MANAGED_API ICustomMarshaler;
    struct MANAGED_API IRegistrationServices;
    struct MANAGED_API ITypeLibConverter;
    struct MANAGED_API ITypeLibExporterNameProvider;
    struct MANAGED_API ITypeLibExporterNotifySink;
    struct MANAGED_API ITypeLibImporterNotifySink;
    struct MANAGED_API UCOMIBindCtx;
    struct MANAGED_API UCOMIConnectionPoint;
    struct MANAGED_API UCOMIConnectionPointContainer;
    struct MANAGED_API UCOMIEnumConnectionPoints;
    struct MANAGED_API UCOMIEnumConnections;
    struct MANAGED_API UCOMIEnumMoniker;
    struct MANAGED_API UCOMIEnumString;
    struct MANAGED_API UCOMIEnumVARIANT;
    struct MANAGED_API UCOMIMoniker;
    struct MANAGED_API UCOMIPersistFile;
    struct MANAGED_API UCOMIRunningObjectTable;
    struct MANAGED_API UCOMIStream;
    struct MANAGED_API UCOMITypeComp;
    struct MANAGED_API UCOMITypeInfo;
    struct MANAGED_API UCOMITypeLib;
    struct MANAGED_API _Activator;
    struct MANAGED_API _Assembly;
    struct MANAGED_API _AssemblyBuilder;
    struct MANAGED_API _AssemblyName;
    struct MANAGED_API _Attribute;
    struct MANAGED_API _ConstructorBuilder;
    struct MANAGED_API _ConstructorInfo;
    struct MANAGED_API _CustomAttributeBuilder;
    struct MANAGED_API _EnumBuilder;
    struct MANAGED_API _EventBuilder;
    struct MANAGED_API _EventInfo;
    struct MANAGED_API _Exception;
    struct MANAGED_API _FieldBuilder;
    struct MANAGED_API _FieldInfo;
    struct MANAGED_API _ILGenerator;
    struct MANAGED_API _LocalBuilder;
    struct MANAGED_API _MemberInfo;
    struct MANAGED_API _MethodBase;
    struct MANAGED_API _MethodBuilder;
    struct MANAGED_API _MethodInfo;
    struct MANAGED_API _MethodRental;
    struct MANAGED_API _Module;
    struct MANAGED_API _ModuleBuilder;
    struct MANAGED_API _ParameterBuilder;
    struct MANAGED_API _ParameterInfo;
    struct MANAGED_API _PropertyBuilder;
    struct MANAGED_API _PropertyInfo;
    struct MANAGED_API _SignatureHelper;
    struct MANAGED_API _Thread;
    struct MANAGED_API _Type;
    struct MANAGED_API _TypeBuilder;
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    struct MANAGED_API BINDPTR2;
    struct MANAGED_API BIND_OPTS2;
    struct MANAGED_API CONNECTDATA2;
    struct MANAGED_API DISPPARAMS2;
    struct MANAGED_API DESCUNION3;
    struct MANAGED_API ELEMDESC2;
    struct MANAGED_API EXCEPINFO2;
    struct MANAGED_API FILETIME2;
    struct MANAGED_API FUNCDESC2;
    struct MANAGED_API IDLDESC2;
    struct MANAGED_API PARAMDESC2;
    struct MANAGED_API STATSTG2;
    struct MANAGED_API TYPEATTR2;
    struct MANAGED_API TYPEDESC2;
    struct MANAGED_API TYPELIBATTR2;
    struct MANAGED_API DESCUNION4;
    struct MANAGED_API VARDESC2;
    struct MANAGED_API IBindCtx;
    struct MANAGED_API IConnectionPoint;
    struct MANAGED_API IConnectionPointContainer;
    struct MANAGED_API IEnumConnectionPoints;
    struct MANAGED_API IEnumConnections;
    struct MANAGED_API IEnumMoniker;
    struct MANAGED_API IEnumString;
    struct MANAGED_API IEnumVARIANT;
    struct MANAGED_API IMoniker;
    struct MANAGED_API IPersistFile;
    struct MANAGED_API IRunningObjectTable;
    struct MANAGED_API IStream;
    struct MANAGED_API ITypeComp;
    struct MANAGED_API ITypeInfo;
    struct MANAGED_API ITypeInfo2;
    struct MANAGED_API ITypeLib;
    struct MANAGED_API ITypeLib2;
}}}}
namespace System { namespace Runtime { namespace InteropServices { namespace Expando {
    struct MANAGED_API IExpando;
}}}}
namespace System { namespace Runtime { namespace Reliability {
    struct MANAGED_API PrePrepareMethodAttribute2;
    struct MANAGED_API ReliabilityContractAttribute2;
}}}
namespace System { namespace Runtime { namespace Remoting {
    struct MANAGED_API ActivatedClientTypeEntry;
    struct MANAGED_API ActivatedServiceTypeEntry;
    struct MANAGED_API EnvoyInfo;
    struct MANAGED_API Identity;
    struct MANAGED_API ClientIdentity;
    struct MANAGED_API InternalRemotingServices;
    struct MANAGED_API ObjectHandle;
    struct MANAGED_API ObjRef;
    struct MANAGED_API RemotingConfiguration;
    struct MANAGED_API ConfigHandler;
    struct MANAGED_API ChannelData;
    struct MANAGED_API ProviderData;
    struct MANAGED_API FormatterData;
    struct MANAGED_API RemotingException;
    struct MANAGED_API CACD;
    struct MANAGED_API RemotingServices;
    struct MANAGED_API RemotingTimeoutException;
    struct MANAGED_API ServerException;
    struct MANAGED_API ServerIdentity;
    struct MANAGED_API ClientActivatedIdentity;
    struct MANAGED_API SingletonIdentity;
    struct MANAGED_API SingleCallIdentity;
    struct MANAGED_API DisposerReplySink;
    struct MANAGED_API TypeInfo;
    struct MANAGED_API SoapServices;
    struct MANAGED_API TypeEntry;
    struct MANAGED_API TypeInfo2;
    struct MANAGED_API WellKnownClientTypeEntry;
    struct MANAGED_API WellKnownServiceTypeEntry;
    struct MANAGED_API ChannelInfo;
    struct MANAGED_API IChannelInfo;
    struct MANAGED_API IEnvoyInfo;
    struct MANAGED_API IObjectHandle;
    struct MANAGED_API IRemotingTypeInfo;
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    struct MANAGED_API ActivationServices;
    struct MANAGED_API AppDomainLevelActivator;
    struct MANAGED_API ConstructionLevelActivator;
    struct MANAGED_API ContextLevelActivator;
    struct MANAGED_API RemoteActivationAttribute;
    struct MANAGED_API RemoteActivator;
    struct MANAGED_API UrlAttribute;
    struct MANAGED_API IActivator;
    struct MANAGED_API IConstructionCallMessage;
    struct MANAGED_API IConstructionReturnMessage;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    struct MANAGED_API AggregateDictionary;
    struct MANAGED_API AggregateEnumerator;
    struct MANAGED_API BaseChannelObjectWithProperties;
    struct MANAGED_API BaseChannelSinkWithProperties;
    struct MANAGED_API BaseChannelWithProperties;
    struct MANAGED_API ChannelDataStore;
    struct MANAGED_API ChannelServices;
    struct MANAGED_API ExceptionFilterSink;
    struct MANAGED_API ChanelSinkStackEntry;
    struct MANAGED_API ClientChannelSinkStack;
    struct MANAGED_API CrossAppDomainData;
    struct MANAGED_API CrossAppDomainChannel;
    struct MANAGED_API CrossAppDomainSink;
    struct MANAGED_API CADSerializer;
    struct MANAGED_API AsyncRequest;
    struct MANAGED_API ServerChannelSinkStack;
    struct MANAGED_API ServerDispatchSink;
    struct MANAGED_API ServerDispatchSinkProvider;
    struct MANAGED_API SinkProviderData;
    struct MANAGED_API TransportHeaders;
    struct MANAGED_API ProcessMessageRes;
    struct MANAGED_API IChannel;
    struct MANAGED_API IChannelDataStore;
    struct MANAGED_API IChannelReceiver;
    struct MANAGED_API IChannelReceiverHook;
    struct MANAGED_API IChannelSender;
    struct MANAGED_API IChannelSinkBase;
    struct MANAGED_API IClientChannelSink;
    struct MANAGED_API IClientChannelSinkProvider;
    struct MANAGED_API IClientChannelSinkStack;
    struct MANAGED_API IClientFormatterSink;
    struct MANAGED_API IClientFormatterSinkProvider;
    struct MANAGED_API IClientResponseChannelSinkStack;
    struct MANAGED_API ISecurableChannel;
    struct MANAGED_API IServerChannelSink;
    struct MANAGED_API IServerChannelSinkProvider;
    struct MANAGED_API IServerChannelSinkStack;
    struct MANAGED_API IServerFormatterSinkProvider;
    struct MANAGED_API IServerResponseChannelSinkStack;
    struct MANAGED_API ITransportHeaders;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    struct MANAGED_API NamedSlots;
    struct MANAGED_API Context2;
    struct MANAGED_API DynamicPropertyReg;
    struct MANAGED_API DynamicPropertyCollection;
    struct MANAGED_API ContextCallbackObject;
    struct MANAGED_API ContextAttribute;
    struct MANAGED_API ContextProperty;
    struct MANAGED_API ContextRestoreSink;
    struct MANAGED_API CrossContextChannel;
    struct MANAGED_API SynchronizationAttribute;
    struct MANAGED_API SynchronizedClientContextSink;
    struct MANAGED_API SynchronizedServerContextSink;
    struct MANAGED_API SynchronizedContextReplySink;
    struct MANAGED_API IContextAttribute;
    struct MANAGED_API IContextProperty;
    struct MANAGED_API IContextPropertyActivator;
    struct MANAGED_API IContributeClientContextSink;
    struct MANAGED_API IContributeDynamicSink;
    struct MANAGED_API IContributeEnvoySink;
    struct MANAGED_API IContributeObjectSink;
    struct MANAGED_API IContributeServerContextSink;
    struct MANAGED_API IDynamicMessageSink;
    struct MANAGED_API IDynamicProperty;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    struct MANAGED_API ClientSponsor;
    struct MANAGED_API Lease;
    struct MANAGED_API LeaseManager;
    struct MANAGED_API LeaseSink;
    struct MANAGED_API LifetimeServices;
    struct MANAGED_API ILease;
    struct MANAGED_API ISponsor;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    struct MANAGED_API ArgInfo;
    struct MANAGED_API AsyncResult;
    struct MANAGED_API CADArgHolder;
    struct MANAGED_API CADObjRef;
    struct MANAGED_API CADMessageBase;
    struct MANAGED_API CADMethodCallMessage;
    struct MANAGED_API CADMethodReturnMessage;
    struct MANAGED_API CallContext;
    struct MANAGED_API ClientContextTerminatorSink;
    struct MANAGED_API ClientContextReplySink;
    struct MANAGED_API ConstructionCall;
    struct MANAGED_API ConstructionCallDictionary;
    struct MANAGED_API ConstructionResponse;
    struct MANAGED_API EnvoyTerminatorSink;
    struct MANAGED_API ErrorMessage;
    struct MANAGED_API Header;
    struct MANAGED_API InternalMessageWrapper;
    struct MANAGED_API LogicalCallContext;
    struct MANAGED_API CallContextRemotingData;
    struct MANAGED_API MethodCall;
    struct MANAGED_API MethodCallDictionary;
    struct MANAGED_API DictionaryWrapper;
    struct MANAGED_API MethodCallMessageWrapper;
    struct MANAGED_API DictionaryEnumerator;
    struct MANAGED_API MethodDictionary;
    struct MANAGED_API MethodResponse;
    struct MANAGED_API MethodReturnDictionary;
    struct MANAGED_API DictionaryWrapper2;
    struct MANAGED_API MethodReturnMessageWrapper;
    struct MANAGED_API MonoMethodMessage;
    struct MANAGED_API OneWayAttribute;
    struct MANAGED_API RemotingSurrogate;
    struct MANAGED_API ObjRefSurrogate;
    struct MANAGED_API RemotingSurrogateSelector;
    struct MANAGED_API ReturnMessage;
    struct MANAGED_API ServerContextTerminatorSink;
    struct MANAGED_API ServerObjectTerminatorSink;
    struct MANAGED_API ServerObjectReplySink;
    struct MANAGED_API StackBuilderSink;
    struct MANAGED_API ILogicalThreadAffinative;
    struct MANAGED_API IInternalMessage;
    struct MANAGED_API IMessage;
    struct MANAGED_API IMessageCtrl;
    struct MANAGED_API IMessageSink;
    struct MANAGED_API IMethodCallMessage;
    struct MANAGED_API IMethodMessage;
    struct MANAGED_API IMethodReturnMessage;
    struct MANAGED_API IRemotingFormatter;
    struct MANAGED_API ISerializationRootObject;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    struct MANAGED_API SoapAttribute;
    struct MANAGED_API SoapFieldAttribute;
    struct MANAGED_API SoapMethodAttribute;
    struct MANAGED_API SoapParameterAttribute;
    struct MANAGED_API SoapTypeAttribute;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    struct MANAGED_API SoapAnyUri;
    struct MANAGED_API SoapBase64Binary;
    struct MANAGED_API SoapDate;
    struct MANAGED_API SoapDateTime;
    struct MANAGED_API SoapDay;
    struct MANAGED_API SoapDuration;
    struct MANAGED_API SoapEntities;
    struct MANAGED_API SoapEntity;
    struct MANAGED_API SoapHelper;
    struct MANAGED_API SoapHexBinary;
    struct MANAGED_API SoapId;
    struct MANAGED_API SoapIdref;
    struct MANAGED_API SoapIdrefs;
    struct MANAGED_API SoapInteger;
    struct MANAGED_API SoapLanguage;
    struct MANAGED_API SoapMonth;
    struct MANAGED_API SoapMonthDay;
    struct MANAGED_API SoapName;
    struct MANAGED_API SoapNcName;
    struct MANAGED_API SoapNegativeInteger;
    struct MANAGED_API SoapNmtoken;
    struct MANAGED_API SoapNmtokens;
    struct MANAGED_API SoapNonNegativeInteger;
    struct MANAGED_API SoapNonPositiveInteger;
    struct MANAGED_API SoapNormalizedString;
    struct MANAGED_API SoapNotation;
    struct MANAGED_API SoapPositiveInteger;
    struct MANAGED_API SoapQName;
    struct MANAGED_API SoapTime;
    struct MANAGED_API SoapToken;
    struct MANAGED_API SoapYear;
    struct MANAGED_API SoapYearMonth;
    struct MANAGED_API ISoapXsd;
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    struct MANAGED_API ProxyAttribute;
    struct MANAGED_API TransparentProxy;
    struct MANAGED_API RealProxy;
    struct MANAGED_API RemotingProxy;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Services {
    struct MANAGED_API EnterpriseServicesHelper;
    struct MANAGED_API TrackingServices;
    struct MANAGED_API ITrackingHandler;
}}}}
namespace System { namespace Runtime { namespace Serialization {
    struct MANAGED_API Formatter;
    struct MANAGED_API FormatterConverter;
    struct MANAGED_API FormatterServices;
    struct MANAGED_API InstanceComparer;
    struct MANAGED_API ObjectIDGenerator;
    struct MANAGED_API ObjectManager;
    struct MANAGED_API BaseFixupRecord;
    struct MANAGED_API ArrayFixupRecord;
    struct MANAGED_API MultiArrayFixupRecord;
    struct MANAGED_API FixupRecord;
    struct MANAGED_API DelayedFixupRecord;
    struct MANAGED_API ObjectRecord;
    struct MANAGED_API OnDeserializedAttribute;
    struct MANAGED_API OnDeserializingAttribute;
    struct MANAGED_API OnSerializedAttribute;
    struct MANAGED_API OnSerializingAttribute;
    struct MANAGED_API OptionalFieldAttribute;
    struct MANAGED_API SafeSerializationEventArgs;
    struct MANAGED_API SerializationBinder;
    struct MANAGED_API SerializationCallbacks;
    struct MANAGED_API SerializationException;
    struct MANAGED_API SerializationInfo;
    struct MANAGED_API SerializationInfoEnumerator;
    struct MANAGED_API HashHelper;
    struct MANAGED_API SerializationObjectManager;
    struct MANAGED_API SurrogateSelector;
    struct MANAGED_API SerializationEntry;
    struct MANAGED_API StreamingContext;
    struct MANAGED_API IDeserializationCallback;
    struct MANAGED_API IFormatter;
    struct MANAGED_API IFormatterConverter;
    struct MANAGED_API IObjectReference;
    struct MANAGED_API ISafeSerializationData;
    struct MANAGED_API ISerializable;
    struct MANAGED_API ISerializationSurrogate;
    struct MANAGED_API ISurrogateSelector;
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    struct MANAGED_API InternalRM;
    struct MANAGED_API InternalST;
    struct MANAGED_API ServerFault;
    struct MANAGED_API SoapFault;
    struct MANAGED_API SoapMessage;
    struct MANAGED_API IFieldInfo;
    struct MANAGED_API ISoapMessage;
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    struct MANAGED_API BinaryCommon;
    struct MANAGED_API BinaryFormatter;
    struct MANAGED_API CodeGenerator;
    struct MANAGED_API MessageFormatter;
    struct MANAGED_API TypeMetadata;
    struct MANAGED_API ArrayNullFiller;
    struct MANAGED_API ObjectReader;
    struct MANAGED_API TypeMetadata2;
    struct MANAGED_API ClrTypeMetadata;
    struct MANAGED_API SerializableTypeMetadata;
    struct MANAGED_API MemberTypeMetadata;
    struct MANAGED_API MetadataReference;
    struct MANAGED_API ObjectWriter;
}}}}}
namespace System { namespace Runtime { namespace Versioning {
    struct MANAGED_API ComponentGuaranteesAttribute;
    struct MANAGED_API ResourceConsumptionAttribute;
    struct MANAGED_API ResourceExposureAttribute;
    struct MANAGED_API TargetFrameworkAttribute;
    struct MANAGED_API VersioningHelper;
}}}
namespace System { namespace Security {
    struct MANAGED_API AllowPartiallyTrustedCallersAttribute;
    struct MANAGED_API CodeAccessPermission;
    struct MANAGED_API HostProtectionException;
    struct MANAGED_API HostSecurityManager;
    struct MANAGED_API NamedPermissionSet;
    struct MANAGED_API PermissionBuilder;
    struct MANAGED_API PermissionSet;
    struct MANAGED_API PermissionSetCollection;
    struct MANAGED_API SecureString;
    struct MANAGED_API SecurityContext;
    struct MANAGED_API SecurityCriticalAttribute;
    struct MANAGED_API SecurityAttribute;
    struct MANAGED_API SecurityElement;
    struct MANAGED_API SecurityException;
    struct MANAGED_API RuntimeSecurityFrame;
    struct MANAGED_API SecurityManager;
    struct MANAGED_API SecurityRulesAttribute;
    struct MANAGED_API SecuritySafeCriticalAttribute;
    struct MANAGED_API SecurityState;
    struct MANAGED_API SecurityTransparentAttribute;
    struct MANAGED_API SecurityTreatAsSafeAttribute;
    struct MANAGED_API SuppressUnmanagedCodeSecurityAttribute;
    struct MANAGED_API UnverifiableCodeAttribute;
    struct MANAGED_API VerificationException;
    struct MANAGED_API XmlSyntaxException;
    struct MANAGED_API RuntimeDeclSecurityEntry;
    struct MANAGED_API SecurityFrame;
    struct MANAGED_API RuntimeDeclSecurityActions;
    struct MANAGED_API IEvidenceFactory;
    struct MANAGED_API IPermission;
    struct MANAGED_API ISecurityEncodable;
    struct MANAGED_API ISecurityPolicyEncodable;
    struct MANAGED_API IStackWalk;
}}
namespace System { namespace Security { namespace AccessControl {
    struct MANAGED_API AccessRule;
    struct MANAGED_API AceEnumerator;
    struct MANAGED_API AuditRule;
    struct MANAGED_API AuthorizationRule;
    struct MANAGED_API AuthorizationRuleCollection;
    struct MANAGED_API CommonAce;
    struct MANAGED_API CommonAcl;
    struct MANAGED_API CommonObjectSecurity;
    struct MANAGED_API CommonSecurityDescriptor;
    struct MANAGED_API CompoundAce;
    struct MANAGED_API CryptoKeyAccessRule;
    struct MANAGED_API CryptoKeyAuditRule;
    struct MANAGED_API CryptoKeySecurity;
    struct MANAGED_API CustomAce;
    struct MANAGED_API DirectoryObjectSecurity;
    struct MANAGED_API DirectorySecurity;
    struct MANAGED_API DiscretionaryAcl;
    struct MANAGED_API EventWaitHandleAccessRule;
    struct MANAGED_API EventWaitHandleAuditRule;
    struct MANAGED_API EventWaitHandleSecurity;
    struct MANAGED_API FileSecurity;
    struct MANAGED_API FileSystemAccessRule;
    struct MANAGED_API FileSystemAuditRule;
    struct MANAGED_API FileSystemSecurity;
    struct MANAGED_API GenericAce;
    struct MANAGED_API GenericAcl;
    struct MANAGED_API GenericSecurityDescriptor;
    struct MANAGED_API KnownAce;
    struct MANAGED_API MutexAccessRule;
    struct MANAGED_API MutexAuditRule;
    struct MANAGED_API MutexSecurity;
    struct MANAGED_API NativeObjectSecurity;
    struct MANAGED_API ObjectAccessRule;
    struct MANAGED_API ObjectAce;
    struct MANAGED_API ObjectAuditRule;
    struct MANAGED_API ObjectSecurity;
    template<class T> struct MANAGED_API ObjectSecurity2;
    struct MANAGED_API PrivilegeNotHeldException;
    struct MANAGED_API QualifiedAce;
    struct MANAGED_API RawAcl;
    struct MANAGED_API RawSecurityDescriptor;
    struct MANAGED_API RegistryAccessRule;
    struct MANAGED_API RegistryAuditRule;
    struct MANAGED_API RegistrySecurity;
    struct MANAGED_API SddlAccessRight;
    struct MANAGED_API SystemAcl;
}}}
namespace System { namespace Security { namespace Cryptography {
    struct MANAGED_API AsymmetricAlgorithm;
    struct MANAGED_API AsymmetricKeyExchangeDeformatter;
    struct MANAGED_API AsymmetricKeyExchangeFormatter;
    struct MANAGED_API AsymmetricSignatureDeformatter;
    struct MANAGED_API AsymmetricSignatureFormatter;
    struct MANAGED_API Base64Constants;
    struct MANAGED_API CryptoAPITransform;
    struct MANAGED_API CryptoHandler;
    struct MANAGED_API CryptoConfig;
    struct MANAGED_API CryptographicException;
    struct MANAGED_API CryptographicUnexpectedOperationException;
    struct MANAGED_API CryptoStream;
    struct MANAGED_API CspKeyContainerInfo;
    struct MANAGED_API CspParameters;
    struct MANAGED_API DeriveBytes2;
    struct MANAGED_API DES;
    struct MANAGED_API DESTransform;
    struct MANAGED_API DESCryptoServiceProvider;
    struct MANAGED_API DSA;
    struct MANAGED_API DSACryptoServiceProvider;
    struct MANAGED_API DSASignatureDeformatter;
    struct MANAGED_API DSASignatureFormatter;
    struct MANAGED_API FromBase64Transform;
    struct MANAGED_API HashAlgorithm;
    struct MANAGED_API HMAC;
    struct MANAGED_API HMACMD5;
    struct MANAGED_API HMACRIPEMD160;
    struct MANAGED_API HMACSHA1;
    struct MANAGED_API HMACSHA256;
    struct MANAGED_API HMACSHA384;
    struct MANAGED_API HMACSHA512;
    struct MANAGED_API KeyedHashAlgorithm;
    struct MANAGED_API KeySizes;
    struct MANAGED_API MACTripleDES;
    struct MANAGED_API MaskGenerationMethod;
    struct MANAGED_API MD5;
    struct MANAGED_API MD5CryptoServiceProvider;
    struct MANAGED_API PasswordDeriveBytes;
    struct MANAGED_API PKCS1MaskGenerationMethod;
    struct MANAGED_API RandomNumberGenerator;
    struct MANAGED_API RC2;
    struct MANAGED_API RC2CryptoServiceProvider;
    struct MANAGED_API RC2Transform;
    struct MANAGED_API Rfc2898DeriveBytes;
    struct MANAGED_API Rijndael;
    struct MANAGED_API RijndaelManaged;
    struct MANAGED_API RijndaelTransform;
    struct MANAGED_API RijndaelManagedTransform;
    struct MANAGED_API RIPEMD160;
    struct MANAGED_API RIPEMD160Managed;
    struct MANAGED_API RNGCryptoServiceProvider;
    struct MANAGED_API RSA;
    struct MANAGED_API RSACryptoServiceProvider;
    struct MANAGED_API RSAOAEPKeyExchangeDeformatter;
    struct MANAGED_API RSAOAEPKeyExchangeFormatter;
    struct MANAGED_API RSAPKCS1KeyExchangeDeformatter;
    struct MANAGED_API RSAPKCS1KeyExchangeFormatter;
    struct MANAGED_API RSAPKCS1SignatureDeformatter;
    struct MANAGED_API RSAPKCS1SignatureFormatter;
    struct MANAGED_API SHA1;
    struct MANAGED_API SHA1Internal;
    struct MANAGED_API SHA1CryptoServiceProvider;
    struct MANAGED_API SHA1Managed;
    struct MANAGED_API SHA256;
    struct MANAGED_API SHA256Managed;
    struct MANAGED_API SHA384;
    struct MANAGED_API SHA384Managed;
    struct MANAGED_API SHA512;
    struct MANAGED_API SHA512Managed;
    struct MANAGED_API SHAConstants;
    struct MANAGED_API SignatureDescription;
    struct MANAGED_API DSASignatureDescription;
    struct MANAGED_API RSAPKCS1SHA1SignatureDescription;
    struct MANAGED_API SymmetricAlgorithm;
    struct MANAGED_API ToBase64Transform;
    struct MANAGED_API TripleDES;
    struct MANAGED_API TripleDESCryptoServiceProvider;
    struct MANAGED_API TripleDESTransform;
    struct MANAGED_API DSAParameters;
    struct MANAGED_API RSAParameters;
    struct MANAGED_API ICryptoTransform;
    struct MANAGED_API ICspAsymmetricAlgorithm;
}}}
namespace System { namespace Security { namespace Cryptography { namespace X509Certificates {
    struct MANAGED_API X509Certificate2;
    struct MANAGED_API CertificateContext;
}}}}
namespace System { namespace Security { namespace Permissions {
    struct MANAGED_API CodeAccessSecurityAttribute;
    struct MANAGED_API EnvironmentPermission;
    struct MANAGED_API EnvironmentPermissionAttribute;
    struct MANAGED_API FileDialogPermission;
    struct MANAGED_API FileDialogPermissionAttribute;
    struct MANAGED_API FileIOPermission;
    struct MANAGED_API FileIOPermissionAttribute;
    struct MANAGED_API GacIdentityPermission;
    struct MANAGED_API GacIdentityPermissionAttribute;
    struct MANAGED_API HostProtectionAttribute;
    struct MANAGED_API HostProtectionPermission;
    struct MANAGED_API IsolatedStorageFilePermission;
    struct MANAGED_API IsolatedStorageFilePermissionAttribute;
    struct MANAGED_API IsolatedStoragePermission;
    struct MANAGED_API IsolatedStoragePermissionAttribute;
    struct MANAGED_API KeyContainerPermission;
    struct MANAGED_API KeyContainerPermissionAccessEntry;
    struct MANAGED_API KeyContainerPermissionAccessEntryCollection;
    struct MANAGED_API KeyContainerPermissionAccessEntryEnumerator;
    struct MANAGED_API KeyContainerPermissionAttribute;
    struct MANAGED_API PermissionSetAttribute;
    struct MANAGED_API PrincipalInfo;
    struct MANAGED_API PrincipalPermission;
    struct MANAGED_API PrincipalPermissionAttribute;
    struct MANAGED_API PublisherIdentityPermission;
    struct MANAGED_API PublisherIdentityPermissionAttribute;
    struct MANAGED_API ReflectionPermission;
    struct MANAGED_API ReflectionPermissionAttribute;
    struct MANAGED_API RegistryPermission;
    struct MANAGED_API RegistryPermissionAttribute;
    struct MANAGED_API SecurityAttribute2;
    struct MANAGED_API SecurityPermission;
    struct MANAGED_API SecurityPermissionAttribute;
    struct MANAGED_API SiteIdentityPermission;
    struct MANAGED_API SiteIdentityPermissionAttribute;
    struct MANAGED_API StrongNameIdentityPermission;
    struct MANAGED_API StrongNameIdentityPermissionAttribute;
    struct MANAGED_API StrongNamePublicKeyBlob;
    struct MANAGED_API UIPermission;
    struct MANAGED_API UIPermissionAttribute;
    struct MANAGED_API UrlIdentityPermission;
    struct MANAGED_API UrlIdentityPermissionAttribute;
    struct MANAGED_API ZoneIdentityPermission;
    struct MANAGED_API ZoneIdentityPermissionAttribute;
    struct MANAGED_API SNIP;
    struct MANAGED_API IBuiltInPermission;
    struct MANAGED_API IUnrestrictedPermission;
}}}
namespace System { namespace Security { namespace Policy {
    struct MANAGED_API AllMembershipCondition;
    struct MANAGED_API ApplicationDefaultCodeGroup;
    struct MANAGED_API ApplicationDirectory;
    struct MANAGED_API ApplicationDirectoryMembershipCondition;
    struct MANAGED_API ApplicationMembershipCondition;
    struct MANAGED_API ApplicationSecurityInfo;
    struct MANAGED_API ApplicationSecurityManager;
    struct MANAGED_API ApplicationSecurityManagerCodeGroup;
    struct MANAGED_API ApplicationTrust;
    struct MANAGED_API ApplicationTrustCollection;
    struct MANAGED_API ApplicationTrustEnumerator;
    struct MANAGED_API CodeConnectAccess;
    struct MANAGED_API CodeGroup;
    struct MANAGED_API ReservedNames;
    struct MANAGED_API DefaultPolicies;
    struct MANAGED_API DomainApplicationMembershipCondition;
    struct MANAGED_API EvidenceEnumerator;
    struct MANAGED_API Evidence;
    struct MANAGED_API FileCodeGroup;
    struct MANAGED_API FirstMatchCodeGroup;
    struct MANAGED_API GacInstalled;
    struct MANAGED_API GacMembershipCondition;
    struct MANAGED_API Hash;
    struct MANAGED_API HashMembershipCondition;
    struct MANAGED_API MembershipConditionHelper;
    struct MANAGED_API MonoTrustManager;
    struct MANAGED_API NetCodeGroup;
    struct MANAGED_API PermissionRequestEvidence;
    struct MANAGED_API PolicyException;
    struct MANAGED_API PolicyLevel;
    struct MANAGED_API PolicyStatement;
    struct MANAGED_API ProvideAssemblyEvidenceEventArgs;
    struct MANAGED_API Publisher;
    struct MANAGED_API PublisherMembershipCondition;
    struct MANAGED_API Site;
    struct MANAGED_API SiteMembershipCondition;
    struct MANAGED_API StrongName2;
    struct MANAGED_API StrongNameMembershipCondition;
    struct MANAGED_API TrustLicenseIssuer;
    struct MANAGED_API TrustManagerContext;
    struct MANAGED_API TrustManagerZoneConfig;
    struct MANAGED_API UnionCodeGroup;
    struct MANAGED_API Url;
    struct MANAGED_API UrlMembershipCondition;
    struct MANAGED_API Zone;
    struct MANAGED_API ZoneMembershipCondition;
    struct MANAGED_API IApplicationTrustManager;
    struct MANAGED_API IBuiltInEvidence;
    struct MANAGED_API IConstantMembershipCondition;
    struct MANAGED_API IIdentityPermissionFactory;
    struct MANAGED_API IMembershipCondition;
    struct MANAGED_API ITrustLicenseIssuerCollection;
    struct MANAGED_API ITrustManager;
    struct MANAGED_API ITrustManagerConfig;
}}}
namespace System { namespace Security { namespace Principal {
    struct MANAGED_API GenericIdentity;
    struct MANAGED_API GenericPrincipal;
    struct MANAGED_API IdentityNotMappedException;
    struct MANAGED_API IdentityReference;
    struct MANAGED_API IdentityReferenceCollection;
    struct MANAGED_API NTAccount;
    struct MANAGED_API SecurityIdentifier;
    struct MANAGED_API WellKnownAccount;
    struct MANAGED_API WindowsIdentity;
    struct MANAGED_API WindowsImpersonationContext;
    struct MANAGED_API WindowsPrincipal;
    struct MANAGED_API IIdentity;
    struct MANAGED_API IPrincipal;
}}}
namespace System { namespace Text {
    struct MANAGED_API ASCIIEncoding;
    struct MANAGED_API Decoder;
    struct MANAGED_API CodePageEncoding;
    struct MANAGED_API Decoder2;
    struct MANAGED_API DecoderExceptionFallback;
    struct MANAGED_API DecoderExceptionFallbackBuffer;
    struct MANAGED_API DecoderFallback;
    struct MANAGED_API DecoderFallbackBuffer;
    struct MANAGED_API DecoderFallbackException;
    struct MANAGED_API DecoderReplacementFallback;
    struct MANAGED_API DecoderReplacementFallbackBuffer;
    struct MANAGED_API Encoder;
    struct MANAGED_API EncoderExceptionFallback;
    struct MANAGED_API EncoderExceptionFallbackBuffer;
    struct MANAGED_API EncoderFallback;
    struct MANAGED_API EncoderFallbackBuffer;
    struct MANAGED_API EncoderFallbackException;
    struct MANAGED_API EncoderReplacementFallback;
    struct MANAGED_API EncoderReplacementFallbackBuffer;
    struct MANAGED_API ForwardingDecoder;
    struct MANAGED_API ForwardingEncoder;
    struct MANAGED_API Encoding;
    struct MANAGED_API EncodingInfo;
    struct MANAGED_API Latin1Encoding;
    struct MANAGED_API MLangEncoder;
    struct MANAGED_API MLangDecoder;
    struct MANAGED_API MLangCodePageEncoding;
    struct MANAGED_API StringBuilder;
    struct MANAGED_API SurrogateEncoder;
    struct MANAGED_API UnicodeDecoder;
    struct MANAGED_API UnicodeEncoding;
    struct MANAGED_API UTF32Decoder;
    struct MANAGED_API UTF32Encoding;
    struct MANAGED_API UTF7Decoder;
    struct MANAGED_API UTF7Encoder;
    struct MANAGED_API UTF7Encoding;
    struct MANAGED_API UTF8Decoder;
    struct MANAGED_API UTF8Encoder;
    struct MANAGED_API UTF8Encoding;
}}
namespace System { namespace Threading {
    struct MANAGED_API AbandonedMutexException;
    struct MANAGED_API AtomicBoolean;
    struct MANAGED_API AutoResetEvent;
    struct MANAGED_API CancellationTokenSource;
    struct MANAGED_API CompressedStack;
    struct MANAGED_API CountdownEvent;
    struct MANAGED_API EventWaitHandle;
    struct MANAGED_API ExecutionContext;
    struct MANAGED_API HostExecutionContext;
    struct MANAGED_API HostExecutionContextManager;
    struct MANAGED_API Interlocked;
    struct MANAGED_API LazyInitializer;
    struct MANAGED_API LockQueue;
    struct MANAGED_API LockRecursionException;
    struct MANAGED_API ManualResetEvent;
    struct MANAGED_API ManualResetEventSlim;
    struct MANAGED_API Monitor;
    struct MANAGED_API Mutex;
    struct MANAGED_API NativeEventCalls;
    struct MANAGED_API Overlapped;
    struct MANAGED_API ReaderWriterLock;
    struct MANAGED_API RegisteredWaitHandle;
    struct MANAGED_API SemaphoreSlim;
    struct MANAGED_API SynchronizationContext;
    struct MANAGED_API SynchronizationLockException;
    struct MANAGED_API InternalThread;
    struct MANAGED_API Thread;
    struct MANAGED_API ThreadAbortException;
    struct MANAGED_API ThreadInterruptedException;
    template<class T> struct MANAGED_API ThreadLocal;
    struct MANAGED_API ThreadPool;
    struct MANAGED_API ThreadStartException;
    struct MANAGED_API ThreadStateException;
    struct MANAGED_API Timeout;
    struct MANAGED_API TimerComparer;
    struct MANAGED_API Scheduler;
    struct MANAGED_API Timer;
    struct MANAGED_API WaitHandle;
    struct MANAGED_API WaitHandleCannotBeOpenedException;
    struct MANAGED_API AsyncFlowControl;
    struct MANAGED_API AtomicBooleanValue;
    struct MANAGED_API CancellationToken;
    struct MANAGED_API CancellationTokenRegistration;
    struct MANAGED_API CompressedStackSwitcher;
    struct MANAGED_API ExecutionContextSwitcher;
    struct MANAGED_API HostExecutionContextSwitcher;
    struct MANAGED_API LockCookie;
    struct MANAGED_API NativeOverlapped;
    struct MANAGED_API TicketType;
    struct MANAGED_API SpinLock;
    struct MANAGED_API SpinWait;
    struct MANAGED_API SynchronizationContextSwitcher;
    template<class T> struct MANAGED_API TlsDatum;
    struct MANAGED_API Watch;
}}
namespace System { namespace Threading { namespace Tasks {
    template<class T> struct MANAGED_API CyclicDeque;
    template<class T> struct MANAGED_API CircularArray;
    struct MANAGED_API ManualEventSlot;
    struct MANAGED_API CountdownEventSlot;
    struct MANAGED_API StealRange;
    struct MANAGED_API Parallel;
    struct MANAGED_API ExternalInfos;
    struct MANAGED_API ParallelLoopState;
    struct MANAGED_API ParallelOptions;
    template<class T> struct MANAGED_API SimpleConcurrentBag;
    struct MANAGED_API SynchronizationContextScheduler;
    struct MANAGED_API Task;
    struct MANAGED_API EmptyTaskActionInvoker;
    struct MANAGED_API ActionInvoke;
    struct MANAGED_API ActionObjectInvoke;
    struct MANAGED_API ActionTaskInvoke;
    struct MANAGED_API ActionTasksInvoke;
    struct MANAGED_API ActionTaskObjectInvoke;
    template<class TResult> struct MANAGED_API ActionTaskObjectInvoke2;
    template<class TResult> struct MANAGED_API ActionTaskInvoke2;
    struct MANAGED_API ActionTaskSelected;
    template<class TResult> struct MANAGED_API FuncInvoke;
    template<class TResult> struct MANAGED_API FuncTaskInvoke;
    template<class TResult> struct MANAGED_API FuncTasksInvoke;
    template<class TResult> struct MANAGED_API FuncTaskSelected;
    template<class TResult, class TNewResult> struct MANAGED_API FuncTaskInvoke2;
    template<class TResult> struct MANAGED_API FuncObjectInvoke;
    template<class TResult> struct MANAGED_API FuncTaskObjectInvoke;
    template<class TResult, class TNewResult> struct MANAGED_API FuncTaskObjectInvoke2;
    struct MANAGED_API TaskActionInvoker;
    struct MANAGED_API TaskCanceledException;
    template<class TResult> struct MANAGED_API TaskCompletionSource;
    struct MANAGED_API TaskContinuation;
    struct MANAGED_API ActionContinuation;
    struct MANAGED_API SynchronizationContextContinuation;
    struct MANAGED_API TaskDebuggerView;
    struct MANAGED_API TaskExceptionSlot;
    struct MANAGED_API TaskFactory;
    template<class TResult> struct MANAGED_API TaskFactory2;
    struct MANAGED_API TaskScheduler;
    struct MANAGED_API TaskSchedulerException;
    template<class TResult> struct MANAGED_API Task2;
    struct MANAGED_API TpScheduler;
    struct MANAGED_API UnobservedTaskExceptionEventArgs;
    struct MANAGED_API StealValue64;
    struct MANAGED_API ParallelLoopResult;
    template<class TCompletion> struct MANAGED_API TaskCompletionQueue;
    template<class T> struct MANAGED_API IConcurrentDeque;
    struct MANAGED_API IScheduler;
    struct MANAGED_API IContinuation;
}}}
namespace System {
    
    struct MANAGED_API Object{
        
        virtual ~Object() { }
        void constructor();
        virtual void Finalize_b946fbc32e26afd6();
        virtual bool Equals_ed975d2f4a7d193e(Object* obj);
        static bool Equals2(Object* objA, Object* objB);
        virtual int32_t GetHashCode_6648aef0f235ee6c();
        Type* GetType();
        Object* MemberwiseClone();
        virtual String* ToString_1636a0751cb9ac11();
        static bool ReferenceEquals(Object* objA, Object* objB);
        static int32_t InternalGetHashCode(Object* o);
        void* obj_address();
        void FieldGetter(String* typeName, String* fieldName, Object* val);
        void FieldSetter(String* typeName, String* fieldName, Object* val);
        
    };
    
    
    struct MANAGED_API ValueType : public virtual Object{
        
        void constructor();
        static bool InternalEquals(Object* o1, Object* o2, cli::array<Object*>* fields);
        static bool DefaultEquals(Object* o1, Object* o2);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        static int32_t InternalGetHashCode2(Object* o, cli::array<Object*>* fields);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API IComparable : public virtual Object{
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) = 0;
        
    };
    
    
    struct MANAGED_API IConvertible : public virtual Object{
        
        virtual TypeCode GetTypeCode_701c52aeb2913904() = 0;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) = 0;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) = 0;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) = 0;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) = 0;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) = 0;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) = 0;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) = 0;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) = 0;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) = 0;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) = 0;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) = 0;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) = 0;
        virtual Object* ToType_bf083accfb52550a(Type* conversionType, IFormatProvider* provider) = 0;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) = 0;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) = 0;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) = 0;
        
    };
    
    
    struct MANAGED_API IFormattable : public virtual Object{
        
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* formatProvider) = 0;
        
    };
    
    
    struct MANAGED_API Enum : public virtual ValueType, public virtual IComparable, public virtual IConvertible, public virtual IFormattable{
        static cli::array<char16_t>* split_char;
        
        Enum();
        void constructor();
        static void static_constructor();
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        Object* get_value();
        static Array* GetValues(Type* enumType);
        static cli::array<String*>* GetNames(Type* enumType);
        static int32_t FindPosition(Type* enumType, Object* value, Array* values);
        static String* GetName(Type* enumType, Object* value);
        static bool IsDefined(Type* enumType, Object* value);
        static Type* get_underlying_type(Type* enumType);
        static Type* GetUnderlyingType(Type* enumType);
        static Object* Parse(Type* enumType, String* value);
        static int32_t FindName(Collections::Hashtable* name_hash, cli::array<String*>* names, String* name, bool ignoreCase);
        static uint64_t GetValue(Object* value, TypeCode typeCode);
        static Object* Parse2(Type* enumType, String* value, bool ignoreCase);
        template<class TEnum>
        static bool Parse_1(Type* enumType, String* value, bool ignoreCase, TEnum result);
        template<class TEnum>
        static bool TryParse_1(String* value, TEnum result);
        template<class TEnum>
        static bool TryParse_12(String* value, bool ignoreCase, TEnum result);
        int32_t compare_value_to(Object* other);
        int32_t CompareTo(Object* target);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        static Object* ToObject(Type* enumType, unsigned char value);
        static Object* ToObject2(Type* enumType, int16_t value);
        static Object* ToObject3(Type* enumType, int32_t value);
        static Object* ToObject4(Type* enumType, int64_t value);
        static Object* ToObject5(Type* enumType, Object* value);
        static Object* ToObject6(Type* enumType, signed char value);
        static Object* ToObject7(Type* enumType, uint16_t value);
        static Object* ToObject8(Type* enumType, uint32_t value);
        static Object* ToObject9(Type* enumType, uint64_t value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t get_hashcode();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static String* FormatSpecifier_X(Type* enumType, Object* value, bool upper);
        static String* FormatFlags(Type* enumType, Object* value);
        static String* Format2(Type* enumType, Object* value, String* format);
        bool HasFlag(Enum* flag);
        Object* get_Value();
        
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* target) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
    };
    
}

#include "cli-enum.hpp"

namespace Microsoft { namespace Win32 {
    
    enum class RegistryHive
    {
        ClassesRoot = -2147483648,
        CurrentConfig = -2147483643,
        CurrentUser = -2147483647,
        DynData = -2147483642,
        LocalMachine = -2147483646,
        PerformanceData = -2147483644,
        Users = -2147483645,
    };
    
    struct RegistryHive_Impl : public cli::enumeration<RegistryHive>
    {
        RegistryHive_Impl(const RegistryHive& val) : cli::enumeration<RegistryHive>(val) { }
        operator RegistryHive() { return value; }
        
        virtual const std::vector<RegistryHive>& GetValues() const override
        {
            static std::vector<RegistryHive> res =
            {
                RegistryHive::ClassesRoot,
                RegistryHive::CurrentConfig,
                RegistryHive::CurrentUser,
                RegistryHive::DynData,
                RegistryHive::LocalMachine,
                RegistryHive::PerformanceData,
                RegistryHive::Users,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ClassesRoot"),
                _T("CurrentConfig"),
                _T("CurrentUser"),
                _T("DynData"),
                _T("LocalMachine"),
                _T("PerformanceData"),
                _T("Users"),
            };
            return res;
        }
    };
    
    
    enum class RegistryKeyPermissionCheck
    {
        Default2 = 0,
        ReadSubTree = 1,
        ReadWriteSubTree = 2,
    };
    
    struct RegistryKeyPermissionCheck_Impl : public cli::enumeration<RegistryKeyPermissionCheck>
    {
        RegistryKeyPermissionCheck_Impl(const RegistryKeyPermissionCheck& val) : cli::enumeration<RegistryKeyPermissionCheck>(val) { }
        operator RegistryKeyPermissionCheck() { return value; }
        
        virtual const std::vector<RegistryKeyPermissionCheck>& GetValues() const override
        {
            static std::vector<RegistryKeyPermissionCheck> res =
            {
                RegistryKeyPermissionCheck::Default2,
                RegistryKeyPermissionCheck::ReadSubTree,
                RegistryKeyPermissionCheck::ReadWriteSubTree,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Default2"),
                _T("ReadSubTree"),
                _T("ReadWriteSubTree"),
            };
            return res;
        }
    };
    
    
    enum class RegistryOptions
    {
        None = 0,
        Volatile = 1,
    };
    
    struct RegistryOptions_Impl : public cli::enumeration<RegistryOptions>
    {
        RegistryOptions_Impl(const RegistryOptions& val) : cli::enumeration<RegistryOptions>(val) { }
        operator RegistryOptions() { return value; }
        
        virtual const std::vector<RegistryOptions>& GetValues() const override
        {
            static std::vector<RegistryOptions> res =
            {
                RegistryOptions::None,
                RegistryOptions::Volatile,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Volatile"),
            };
            return res;
        }
    };
    
    
    enum class RegistryValueKind
    {
        Unknown = 0,
        String2 = 1,
        ExpandString2 = 2,
        Binary = 3,
        DWord = 4,
        MultiString = 7,
        QWord = 11,
        None = -1,
    };
    
    struct RegistryValueKind_Impl : public cli::enumeration<RegistryValueKind>
    {
        RegistryValueKind_Impl(const RegistryValueKind& val) : cli::enumeration<RegistryValueKind>(val) { }
        operator RegistryValueKind() { return value; }
        
        virtual const std::vector<RegistryValueKind>& GetValues() const override
        {
            static std::vector<RegistryValueKind> res =
            {
                RegistryValueKind::Unknown,
                RegistryValueKind::String2,
                RegistryValueKind::ExpandString2,
                RegistryValueKind::Binary,
                RegistryValueKind::DWord,
                RegistryValueKind::MultiString,
                RegistryValueKind::QWord,
                RegistryValueKind::None,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unknown"),
                _T("String2"),
                _T("ExpandString2"),
                _T("Binary"),
                _T("DWord"),
                _T("MultiString"),
                _T("QWord"),
                _T("None"),
            };
            return res;
        }
    };
    
    
    enum class RegistryValueOptions
    {
        None = 0,
        DoNotExpandEnvironmentNames = 1,
    };
    
    struct RegistryValueOptions_Impl : public cli::enumeration<RegistryValueOptions>
    {
        RegistryValueOptions_Impl(const RegistryValueOptions& val) : cli::enumeration<RegistryValueOptions>(val) { }
        operator RegistryValueOptions() { return value; }
        
        virtual const std::vector<RegistryValueOptions>& GetValues() const override
        {
            static std::vector<RegistryValueOptions> res =
            {
                RegistryValueOptions::None,
                RegistryValueOptions::DoNotExpandEnvironmentNames,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("DoNotExpandEnvironmentNames"),
            };
            return res;
        }
    };
    
    
    enum class RegistryView
    {
        Default2 = 0,
        Registry64 = 256,
        Registry32 = 512,
    };
    
    struct RegistryView_Impl : public cli::enumeration<RegistryView>
    {
        RegistryView_Impl(const RegistryView& val) : cli::enumeration<RegistryView>(val) { }
        operator RegistryView() { return value; }
        
        virtual const std::vector<RegistryView>& GetValues() const override
        {
            static std::vector<RegistryView> res =
            {
                RegistryView::Default2,
                RegistryView::Registry64,
                RegistryView::Registry32,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Default2"),
                _T("Registry64"),
                _T("Registry32"),
            };
            return res;
        }
    };
    
}}
namespace Mono { namespace Globalization { namespace Unicode {
    
    enum class NormalizationCheck
    {
        Yes = 0,
        No = 1,
        Maybe = 2,
    };
    
    struct NormalizationCheck_Impl : public cli::enumeration<NormalizationCheck>
    {
        NormalizationCheck_Impl(const NormalizationCheck& val) : cli::enumeration<NormalizationCheck>(val) { }
        operator NormalizationCheck() { return value; }
        
        virtual const std::vector<NormalizationCheck>& GetValues() const override
        {
            static std::vector<NormalizationCheck> res =
            {
                NormalizationCheck::Yes,
                NormalizationCheck::No,
                NormalizationCheck::Maybe,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Yes"),
                _T("No"),
                _T("Maybe"),
            };
            return res;
        }
    };
    
    
    enum class ExtenderType
    {
        None = 0,
        Simple = 1,
        Voiced = 2,
        Conditional = 3,
        Buggy = 4,
    };
    
    struct ExtenderType_Impl : public cli::enumeration<ExtenderType>
    {
        ExtenderType_Impl(const ExtenderType& val) : cli::enumeration<ExtenderType>(val) { }
        operator ExtenderType() { return value; }
        
        virtual const std::vector<ExtenderType>& GetValues() const override
        {
            static std::vector<ExtenderType> res =
            {
                ExtenderType::None,
                ExtenderType::Simple,
                ExtenderType::Voiced,
                ExtenderType::Conditional,
                ExtenderType::Buggy,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Simple"),
                _T("Voiced"),
                _T("Conditional"),
                _T("Buggy"),
            };
            return res;
        }
    };
    
    
    enum class GUnicodeType
    {
        G_UNICODE_CONTROL = 0,
        G_UNICODE_FORMAT = 1,
        G_UNICODE_UNASSIGNED = 2,
        G_UNICODE_PRIVATE_USE = 3,
        G_UNICODE_SURROGATE = 4,
        G_UNICODE_LOWERCASE_LETTER = 5,
        G_UNICODE_MODIFIER_LETTER = 6,
        G_UNICODE_OTHER_LETTER = 7,
        G_UNICODE_TITLECASE_LETTER = 8,
        G_UNICODE_UPPERCASE_LETTER = 9,
        G_UNICODE_COMBINING_MARK = 10,
        G_UNICODE_ENCLOSING_MARK = 11,
        G_UNICODE_NON_SPACING_MARK = 12,
        G_UNICODE_DECIMAL_NUMBER = 13,
        G_UNICODE_LETTER_NUMBER = 14,
        G_UNICODE_OTHER_NUMBER = 15,
        G_UNICODE_CONNECT_PUNCTUATION = 16,
        G_UNICODE_DASH_PUNCTUATION = 17,
        G_UNICODE_CLOSE_PUNCTUATION = 18,
        G_UNICODE_FINAL_PUNCTUATION = 19,
        G_UNICODE_INITIAL_PUNCTUATION = 20,
        G_UNICODE_OTHER_PUNCTUATION = 21,
        G_UNICODE_OPEN_PUNCTUATION = 22,
        G_UNICODE_CURRENCY_SYMBOL = 23,
        G_UNICODE_MODIFIER_SYMBOL = 24,
        G_UNICODE_MATH_SYMBOL = 25,
        G_UNICODE_OTHER_SYMBOL = 26,
        G_UNICODE_LINE_SEPARATOR = 27,
        G_UNICODE_PARAGRAPH_SEPARATOR = 28,
        G_UNICODE_SPACE_SEPARATOR = 29,
    };
    
    struct GUnicodeType_Impl : public cli::enumeration<GUnicodeType>
    {
        GUnicodeType_Impl(const GUnicodeType& val) : cli::enumeration<GUnicodeType>(val) { }
        operator GUnicodeType() { return value; }
        
        virtual const std::vector<GUnicodeType>& GetValues() const override
        {
            static std::vector<GUnicodeType> res =
            {
                GUnicodeType::G_UNICODE_CONTROL,
                GUnicodeType::G_UNICODE_FORMAT,
                GUnicodeType::G_UNICODE_UNASSIGNED,
                GUnicodeType::G_UNICODE_PRIVATE_USE,
                GUnicodeType::G_UNICODE_SURROGATE,
                GUnicodeType::G_UNICODE_LOWERCASE_LETTER,
                GUnicodeType::G_UNICODE_MODIFIER_LETTER,
                GUnicodeType::G_UNICODE_OTHER_LETTER,
                GUnicodeType::G_UNICODE_TITLECASE_LETTER,
                GUnicodeType::G_UNICODE_UPPERCASE_LETTER,
                GUnicodeType::G_UNICODE_COMBINING_MARK,
                GUnicodeType::G_UNICODE_ENCLOSING_MARK,
                GUnicodeType::G_UNICODE_NON_SPACING_MARK,
                GUnicodeType::G_UNICODE_DECIMAL_NUMBER,
                GUnicodeType::G_UNICODE_LETTER_NUMBER,
                GUnicodeType::G_UNICODE_OTHER_NUMBER,
                GUnicodeType::G_UNICODE_CONNECT_PUNCTUATION,
                GUnicodeType::G_UNICODE_DASH_PUNCTUATION,
                GUnicodeType::G_UNICODE_CLOSE_PUNCTUATION,
                GUnicodeType::G_UNICODE_FINAL_PUNCTUATION,
                GUnicodeType::G_UNICODE_INITIAL_PUNCTUATION,
                GUnicodeType::G_UNICODE_OTHER_PUNCTUATION,
                GUnicodeType::G_UNICODE_OPEN_PUNCTUATION,
                GUnicodeType::G_UNICODE_CURRENCY_SYMBOL,
                GUnicodeType::G_UNICODE_MODIFIER_SYMBOL,
                GUnicodeType::G_UNICODE_MATH_SYMBOL,
                GUnicodeType::G_UNICODE_OTHER_SYMBOL,
                GUnicodeType::G_UNICODE_LINE_SEPARATOR,
                GUnicodeType::G_UNICODE_PARAGRAPH_SEPARATOR,
                GUnicodeType::G_UNICODE_SPACE_SEPARATOR,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("G_UNICODE_CONTROL"),
                _T("G_UNICODE_FORMAT"),
                _T("G_UNICODE_UNASSIGNED"),
                _T("G_UNICODE_PRIVATE_USE"),
                _T("G_UNICODE_SURROGATE"),
                _T("G_UNICODE_LOWERCASE_LETTER"),
                _T("G_UNICODE_MODIFIER_LETTER"),
                _T("G_UNICODE_OTHER_LETTER"),
                _T("G_UNICODE_TITLECASE_LETTER"),
                _T("G_UNICODE_UPPERCASE_LETTER"),
                _T("G_UNICODE_COMBINING_MARK"),
                _T("G_UNICODE_ENCLOSING_MARK"),
                _T("G_UNICODE_NON_SPACING_MARK"),
                _T("G_UNICODE_DECIMAL_NUMBER"),
                _T("G_UNICODE_LETTER_NUMBER"),
                _T("G_UNICODE_OTHER_NUMBER"),
                _T("G_UNICODE_CONNECT_PUNCTUATION"),
                _T("G_UNICODE_DASH_PUNCTUATION"),
                _T("G_UNICODE_CLOSE_PUNCTUATION"),
                _T("G_UNICODE_FINAL_PUNCTUATION"),
                _T("G_UNICODE_INITIAL_PUNCTUATION"),
                _T("G_UNICODE_OTHER_PUNCTUATION"),
                _T("G_UNICODE_OPEN_PUNCTUATION"),
                _T("G_UNICODE_CURRENCY_SYMBOL"),
                _T("G_UNICODE_MODIFIER_SYMBOL"),
                _T("G_UNICODE_MATH_SYMBOL"),
                _T("G_UNICODE_OTHER_SYMBOL"),
                _T("G_UNICODE_LINE_SEPARATOR"),
                _T("G_UNICODE_PARAGRAPH_SEPARATOR"),
                _T("G_UNICODE_SPACE_SEPARATOR"),
            };
            return res;
        }
    };
    
    
    enum class UcdBidiClass
    {
        None = 0,
        L = 1,
        LRE = 2,
        LRO = 3,
        R = 4,
        AL = 5,
        RLE = 6,
        RLO = 7,
        PDF = 8,
        EN = 9,
        ES = 10,
        ET = 11,
        AN = 12,
        CS = 13,
        NSM = 14,
        BN = 15,
        B = 16,
        S = 17,
        WS = 18,
        ON = 19,
    };
    
    struct UcdBidiClass_Impl : public cli::enumeration<UcdBidiClass>
    {
        UcdBidiClass_Impl(const UcdBidiClass& val) : cli::enumeration<UcdBidiClass>(val) { }
        operator UcdBidiClass() { return value; }
        
        virtual const std::vector<UcdBidiClass>& GetValues() const override
        {
            static std::vector<UcdBidiClass> res =
            {
                UcdBidiClass::None,
                UcdBidiClass::L,
                UcdBidiClass::LRE,
                UcdBidiClass::LRO,
                UcdBidiClass::R,
                UcdBidiClass::AL,
                UcdBidiClass::RLE,
                UcdBidiClass::RLO,
                UcdBidiClass::PDF,
                UcdBidiClass::EN,
                UcdBidiClass::ES,
                UcdBidiClass::ET,
                UcdBidiClass::AN,
                UcdBidiClass::CS,
                UcdBidiClass::NSM,
                UcdBidiClass::BN,
                UcdBidiClass::B,
                UcdBidiClass::S,
                UcdBidiClass::WS,
                UcdBidiClass::ON,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("L"),
                _T("LRE"),
                _T("LRO"),
                _T("R"),
                _T("AL"),
                _T("RLE"),
                _T("RLO"),
                _T("PDF"),
                _T("EN"),
                _T("ES"),
                _T("ET"),
                _T("AN"),
                _T("CS"),
                _T("NSM"),
                _T("BN"),
                _T("B"),
                _T("S"),
                _T("WS"),
                _T("ON"),
            };
            return res;
        }
    };
    
    
    enum class UcdDecompositionType
    {
        None = 0,
        Font = 1,
        NoBreak = 2,
        Initial2 = 3,
        Medial = 4,
        Final = 5,
        Isolated = 6,
        Circle = 7,
        Super = 8,
        Sub = 9,
        Vertical = 10,
        Wide = 11,
        Narrow = 12,
        Small = 13,
        Square = 14,
        Fraction = 15,
        Compat = 16,
    };
    
    struct UcdDecompositionType_Impl : public cli::enumeration<UcdDecompositionType>
    {
        UcdDecompositionType_Impl(const UcdDecompositionType& val) : cli::enumeration<UcdDecompositionType>(val) { }
        operator UcdDecompositionType() { return value; }
        
        virtual const std::vector<UcdDecompositionType>& GetValues() const override
        {
            static std::vector<UcdDecompositionType> res =
            {
                UcdDecompositionType::None,
                UcdDecompositionType::Font,
                UcdDecompositionType::NoBreak,
                UcdDecompositionType::Initial2,
                UcdDecompositionType::Medial,
                UcdDecompositionType::Final,
                UcdDecompositionType::Isolated,
                UcdDecompositionType::Circle,
                UcdDecompositionType::Super,
                UcdDecompositionType::Sub,
                UcdDecompositionType::Vertical,
                UcdDecompositionType::Wide,
                UcdDecompositionType::Narrow,
                UcdDecompositionType::Small,
                UcdDecompositionType::Square,
                UcdDecompositionType::Fraction,
                UcdDecompositionType::Compat,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Font"),
                _T("NoBreak"),
                _T("Initial2"),
                _T("Medial"),
                _T("Final"),
                _T("Isolated"),
                _T("Circle"),
                _T("Super"),
                _T("Sub"),
                _T("Vertical"),
                _T("Wide"),
                _T("Narrow"),
                _T("Small"),
                _T("Square"),
                _T("Fraction"),
                _T("Compat"),
            };
            return res;
        }
    };
    
}}}
namespace Mono { namespace Math {
    
    enum class Sign
    {
        Negative = -1,
        Zero = 0,
        Positive = 1,
    };
    
    struct Sign_Impl : public cli::enumeration<Sign>
    {
        Sign_Impl(const Sign& val) : cli::enumeration<Sign>(val) { }
        operator Sign() { return value; }
        
        virtual const std::vector<Sign>& GetValues() const override
        {
            static std::vector<Sign> res =
            {
                Sign::Negative,
                Sign::Zero,
                Sign::Positive,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Negative"),
                _T("Zero"),
                _T("Positive"),
            };
            return res;
        }
    };
    
}}
namespace Mono { namespace Math { namespace Prime {
    
    enum class ConfidenceFactor
    {
        ExtraLow = 0,
        Low = 1,
        Medium = 2,
        High = 3,
        ExtraHigh = 4,
        Provable = 5,
    };
    
    struct ConfidenceFactor_Impl : public cli::enumeration<ConfidenceFactor>
    {
        ConfidenceFactor_Impl(const ConfidenceFactor& val) : cli::enumeration<ConfidenceFactor>(val) { }
        operator ConfidenceFactor() { return value; }
        
        virtual const std::vector<ConfidenceFactor>& GetValues() const override
        {
            static std::vector<ConfidenceFactor> res =
            {
                ConfidenceFactor::ExtraLow,
                ConfidenceFactor::Low,
                ConfidenceFactor::Medium,
                ConfidenceFactor::High,
                ConfidenceFactor::ExtraHigh,
                ConfidenceFactor::Provable,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ExtraLow"),
                _T("Low"),
                _T("Medium"),
                _T("High"),
                _T("ExtraHigh"),
                _T("Provable"),
            };
            return res;
        }
    };
    
}}}
namespace Mono { namespace Security {
    
    enum class StrongNameOptions
    {
        Metadata = 0,
        Signature = 1,
    };
    
    struct StrongNameOptions_Impl : public cli::enumeration<StrongNameOptions>
    {
        StrongNameOptions_Impl(const StrongNameOptions& val) : cli::enumeration<StrongNameOptions>(val) { }
        operator StrongNameOptions() { return value; }
        
        virtual const std::vector<StrongNameOptions>& GetValues() const override
        {
            static std::vector<StrongNameOptions> res =
            {
                StrongNameOptions::Metadata,
                StrongNameOptions::Signature,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Metadata"),
                _T("Signature"),
            };
            return res;
        }
    };
    
    
    enum class UriPartial
    {
        Scheme = 0,
        Authority2 = 1,
        Path2 = 2,
    };
    
    struct UriPartial_Impl : public cli::enumeration<UriPartial>
    {
        UriPartial_Impl(const UriPartial& val) : cli::enumeration<UriPartial>(val) { }
        operator UriPartial() { return value; }
        
        virtual const std::vector<UriPartial>& GetValues() const override
        {
            static std::vector<UriPartial> res =
            {
                UriPartial::Scheme,
                UriPartial::Authority2,
                UriPartial::Path2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Scheme"),
                _T("Authority2"),
                _T("Path2"),
            };
            return res;
        }
    };
    
}}
namespace Mono { namespace Security { namespace Authenticode {
    
    enum class Authority
    {
        Individual = 0,
        Commercial = 1,
        Maximum = 2,
    };
    
    struct Authority_Impl : public cli::enumeration<Authority>
    {
        Authority_Impl(const Authority& val) : cli::enumeration<Authority>(val) { }
        operator Authority() { return value; }
        
        virtual const std::vector<Authority>& GetValues() const override
        {
            static std::vector<Authority> res =
            {
                Authority::Individual,
                Authority::Commercial,
                Authority::Maximum,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Individual"),
                _T("Commercial"),
                _T("Maximum"),
            };
            return res;
        }
    };
    
}}}
namespace Mono { namespace Security { namespace Cryptography {
    
    enum class KeyInfo
    {
        PrivateKey = 0,
        EncryptedPrivateKey = 1,
        Unknown = 2,
    };
    
    struct KeyInfo_Impl : public cli::enumeration<KeyInfo>
    {
        KeyInfo_Impl(const KeyInfo& val) : cli::enumeration<KeyInfo>(val) { }
        operator KeyInfo() { return value; }
        
        virtual const std::vector<KeyInfo>& GetValues() const override
        {
            static std::vector<KeyInfo> res =
            {
                KeyInfo::PrivateKey,
                KeyInfo::EncryptedPrivateKey,
                KeyInfo::Unknown,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PrivateKey"),
                _T("EncryptedPrivateKey"),
                _T("Unknown"),
            };
            return res;
        }
    };
    
}}}
namespace Mono { namespace Security { namespace X509 {
    
    enum class Purpose
    {
        Key2 = 0,
        IV = 1,
        MAC = 2,
    };
    
    struct Purpose_Impl : public cli::enumeration<Purpose>
    {
        Purpose_Impl(const Purpose& val) : cli::enumeration<Purpose>(val) { }
        operator Purpose() { return value; }
        
        virtual const std::vector<Purpose>& GetValues() const override
        {
            static std::vector<Purpose> res =
            {
                Purpose::Key2,
                Purpose::IV,
                Purpose::MAC,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Key2"),
                _T("IV"),
                _T("MAC"),
            };
            return res;
        }
    };
    
    
    enum class X509ChainStatusFlags
    {
        InvalidBasicConstraints = 1024,
        NoError = 0,
        NotSignatureValid = 8,
        NotTimeNested = 2,
        NotTimeValid = 1,
        PartialChain = 65536,
        UntrustedRoot = 32,
    };
    
    struct X509ChainStatusFlags_Impl : public cli::enumeration<X509ChainStatusFlags>
    {
        X509ChainStatusFlags_Impl(const X509ChainStatusFlags& val) : cli::enumeration<X509ChainStatusFlags>(val) { }
        operator X509ChainStatusFlags() { return value; }
        
        virtual const std::vector<X509ChainStatusFlags>& GetValues() const override
        {
            static std::vector<X509ChainStatusFlags> res =
            {
                X509ChainStatusFlags::InvalidBasicConstraints,
                X509ChainStatusFlags::NoError,
                X509ChainStatusFlags::NotSignatureValid,
                X509ChainStatusFlags::NotTimeNested,
                X509ChainStatusFlags::NotTimeValid,
                X509ChainStatusFlags::PartialChain,
                X509ChainStatusFlags::UntrustedRoot,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("InvalidBasicConstraints"),
                _T("NoError"),
                _T("NotSignatureValid"),
                _T("NotTimeNested"),
                _T("NotTimeValid"),
                _T("PartialChain"),
                _T("UntrustedRoot"),
            };
            return res;
        }
    };
    
}}}
namespace Mono { namespace Security { namespace X509 { namespace Extensions {
    
    enum class KeyUsages
    {
        digitalSignature = 128,
        nonRepudiation = 64,
        keyEncipherment = 32,
        dataEncipherment = 16,
        keyAgreement = 8,
        keyCertSign = 4,
        cRLSign = 2,
        encipherOnly = 1,
        decipherOnly = 2048,
        none = 0,
    };
    
    struct KeyUsages_Impl : public cli::enumeration<KeyUsages>
    {
        KeyUsages_Impl(const KeyUsages& val) : cli::enumeration<KeyUsages>(val) { }
        operator KeyUsages() { return value; }
        
        virtual const std::vector<KeyUsages>& GetValues() const override
        {
            static std::vector<KeyUsages> res =
            {
                KeyUsages::digitalSignature,
                KeyUsages::nonRepudiation,
                KeyUsages::keyEncipherment,
                KeyUsages::dataEncipherment,
                KeyUsages::keyAgreement,
                KeyUsages::keyCertSign,
                KeyUsages::cRLSign,
                KeyUsages::encipherOnly,
                KeyUsages::decipherOnly,
                KeyUsages::none,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("digitalSignature"),
                _T("nonRepudiation"),
                _T("keyEncipherment"),
                _T("dataEncipherment"),
                _T("keyAgreement"),
                _T("keyCertSign"),
                _T("cRLSign"),
                _T("encipherOnly"),
                _T("decipherOnly"),
                _T("none"),
            };
            return res;
        }
    };
    
}}}}
namespace System {
    
    enum class ContextForm
    {
        Loose = 0,
        StoreBounded = 1,
    };
    
    struct ContextForm_Impl : public cli::enumeration<ContextForm>
    {
        ContextForm_Impl(const ContextForm& val) : cli::enumeration<ContextForm>(val) { }
        operator ContextForm() { return value; }
        
        virtual const std::vector<ContextForm>& GetValues() const override
        {
            static std::vector<ContextForm> res =
            {
                ContextForm::Loose,
                ContextForm::StoreBounded,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Loose"),
                _T("StoreBounded"),
            };
            return res;
        }
    };
    
    
    enum class AttributeTargets
    {
        Assembly2 = 1,
        Module2 = 2,
        Class = 4,
        Struct = 8,
        Enum2 = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate2 = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    };
    
    struct AttributeTargets_Impl : public cli::enumeration<AttributeTargets>
    {
        AttributeTargets_Impl(const AttributeTargets& val) : cli::enumeration<AttributeTargets>(val) { }
        operator AttributeTargets() { return value; }
        
        virtual const std::vector<AttributeTargets>& GetValues() const override
        {
            static std::vector<AttributeTargets> res =
            {
                AttributeTargets::Assembly2,
                AttributeTargets::Module2,
                AttributeTargets::Class,
                AttributeTargets::Struct,
                AttributeTargets::Enum2,
                AttributeTargets::Constructor,
                AttributeTargets::Method,
                AttributeTargets::Property,
                AttributeTargets::Field,
                AttributeTargets::Event,
                AttributeTargets::Interface,
                AttributeTargets::Parameter,
                AttributeTargets::Delegate2,
                AttributeTargets::ReturnValue,
                AttributeTargets::GenericParameter,
                AttributeTargets::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Assembly2"),
                _T("Module2"),
                _T("Class"),
                _T("Struct"),
                _T("Enum2"),
                _T("Constructor"),
                _T("Method"),
                _T("Property"),
                _T("Field"),
                _T("Event"),
                _T("Interface"),
                _T("Parameter"),
                _T("Delegate2"),
                _T("ReturnValue"),
                _T("GenericParameter"),
                _T("All"),
            };
            return res;
        }
    };
    
    
    enum class Base64FormattingOptions
    {
        InsertLineBreaks = 1,
        None = 0,
    };
    
    struct Base64FormattingOptions_Impl : public cli::enumeration<Base64FormattingOptions>
    {
        Base64FormattingOptions_Impl(const Base64FormattingOptions& val) : cli::enumeration<Base64FormattingOptions>(val) { }
        operator Base64FormattingOptions() { return value; }
        
        virtual const std::vector<Base64FormattingOptions>& GetValues() const override
        {
            static std::vector<Base64FormattingOptions> res =
            {
                Base64FormattingOptions::InsertLineBreaks,
                Base64FormattingOptions::None,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("InsertLineBreaks"),
                _T("None"),
            };
            return res;
        }
    };
    
    
    enum class ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    };
    
    struct ConsoleColor_Impl : public cli::enumeration<ConsoleColor>
    {
        ConsoleColor_Impl(const ConsoleColor& val) : cli::enumeration<ConsoleColor>(val) { }
        operator ConsoleColor() { return value; }
        
        virtual const std::vector<ConsoleColor>& GetValues() const override
        {
            static std::vector<ConsoleColor> res =
            {
                ConsoleColor::Black,
                ConsoleColor::DarkBlue,
                ConsoleColor::DarkGreen,
                ConsoleColor::DarkCyan,
                ConsoleColor::DarkRed,
                ConsoleColor::DarkMagenta,
                ConsoleColor::DarkYellow,
                ConsoleColor::Gray,
                ConsoleColor::DarkGray,
                ConsoleColor::Blue,
                ConsoleColor::Green,
                ConsoleColor::Cyan,
                ConsoleColor::Red,
                ConsoleColor::Magenta,
                ConsoleColor::Yellow,
                ConsoleColor::White,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Black"),
                _T("DarkBlue"),
                _T("DarkGreen"),
                _T("DarkCyan"),
                _T("DarkRed"),
                _T("DarkMagenta"),
                _T("DarkYellow"),
                _T("Gray"),
                _T("DarkGray"),
                _T("Blue"),
                _T("Green"),
                _T("Cyan"),
                _T("Red"),
                _T("Magenta"),
                _T("Yellow"),
                _T("White"),
            };
            return res;
        }
    };
    
    
    enum class ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape2 = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal2 = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    };
    
    struct ConsoleKey_Impl : public cli::enumeration<ConsoleKey>
    {
        ConsoleKey_Impl(const ConsoleKey& val) : cli::enumeration<ConsoleKey>(val) { }
        operator ConsoleKey() { return value; }
        
        virtual const std::vector<ConsoleKey>& GetValues() const override
        {
            static std::vector<ConsoleKey> res =
            {
                ConsoleKey::Backspace,
                ConsoleKey::Tab,
                ConsoleKey::Clear,
                ConsoleKey::Enter,
                ConsoleKey::Pause,
                ConsoleKey::Escape2,
                ConsoleKey::Spacebar,
                ConsoleKey::PageUp,
                ConsoleKey::PageDown,
                ConsoleKey::End,
                ConsoleKey::Home,
                ConsoleKey::LeftArrow,
                ConsoleKey::UpArrow,
                ConsoleKey::RightArrow,
                ConsoleKey::DownArrow,
                ConsoleKey::Select,
                ConsoleKey::Print,
                ConsoleKey::Execute,
                ConsoleKey::PrintScreen,
                ConsoleKey::Insert,
                ConsoleKey::Delete,
                ConsoleKey::Help,
                ConsoleKey::D0,
                ConsoleKey::D1,
                ConsoleKey::D2,
                ConsoleKey::D3,
                ConsoleKey::D4,
                ConsoleKey::D5,
                ConsoleKey::D6,
                ConsoleKey::D7,
                ConsoleKey::D8,
                ConsoleKey::D9,
                ConsoleKey::A,
                ConsoleKey::B,
                ConsoleKey::C,
                ConsoleKey::D,
                ConsoleKey::E,
                ConsoleKey::F,
                ConsoleKey::G,
                ConsoleKey::H,
                ConsoleKey::I,
                ConsoleKey::J,
                ConsoleKey::K,
                ConsoleKey::L,
                ConsoleKey::M,
                ConsoleKey::N,
                ConsoleKey::O,
                ConsoleKey::P,
                ConsoleKey::Q,
                ConsoleKey::R,
                ConsoleKey::S,
                ConsoleKey::T,
                ConsoleKey::U,
                ConsoleKey::V,
                ConsoleKey::W,
                ConsoleKey::X,
                ConsoleKey::Y,
                ConsoleKey::Z,
                ConsoleKey::LeftWindows,
                ConsoleKey::RightWindows,
                ConsoleKey::Applications,
                ConsoleKey::Sleep,
                ConsoleKey::NumPad0,
                ConsoleKey::NumPad1,
                ConsoleKey::NumPad2,
                ConsoleKey::NumPad3,
                ConsoleKey::NumPad4,
                ConsoleKey::NumPad5,
                ConsoleKey::NumPad6,
                ConsoleKey::NumPad7,
                ConsoleKey::NumPad8,
                ConsoleKey::NumPad9,
                ConsoleKey::Multiply,
                ConsoleKey::Add,
                ConsoleKey::Separator,
                ConsoleKey::Subtract,
                ConsoleKey::Decimal2,
                ConsoleKey::Divide,
                ConsoleKey::F1,
                ConsoleKey::F2,
                ConsoleKey::F3,
                ConsoleKey::F4,
                ConsoleKey::F5,
                ConsoleKey::F6,
                ConsoleKey::F7,
                ConsoleKey::F8,
                ConsoleKey::F9,
                ConsoleKey::F10,
                ConsoleKey::F11,
                ConsoleKey::F12,
                ConsoleKey::F13,
                ConsoleKey::F14,
                ConsoleKey::F15,
                ConsoleKey::F16,
                ConsoleKey::F17,
                ConsoleKey::F18,
                ConsoleKey::F19,
                ConsoleKey::F20,
                ConsoleKey::F21,
                ConsoleKey::F22,
                ConsoleKey::F23,
                ConsoleKey::F24,
                ConsoleKey::BrowserBack,
                ConsoleKey::BrowserForward,
                ConsoleKey::BrowserRefresh,
                ConsoleKey::BrowserStop,
                ConsoleKey::BrowserSearch,
                ConsoleKey::BrowserFavorites,
                ConsoleKey::BrowserHome,
                ConsoleKey::VolumeMute,
                ConsoleKey::VolumeDown,
                ConsoleKey::VolumeUp,
                ConsoleKey::MediaNext,
                ConsoleKey::MediaPrevious,
                ConsoleKey::MediaStop,
                ConsoleKey::MediaPlay,
                ConsoleKey::LaunchMail,
                ConsoleKey::LaunchMediaSelect,
                ConsoleKey::LaunchApp1,
                ConsoleKey::LaunchApp2,
                ConsoleKey::Oem1,
                ConsoleKey::OemPlus,
                ConsoleKey::OemComma,
                ConsoleKey::OemMinus,
                ConsoleKey::OemPeriod,
                ConsoleKey::Oem2,
                ConsoleKey::Oem3,
                ConsoleKey::Oem4,
                ConsoleKey::Oem5,
                ConsoleKey::Oem6,
                ConsoleKey::Oem7,
                ConsoleKey::Oem8,
                ConsoleKey::Oem102,
                ConsoleKey::Process,
                ConsoleKey::Packet,
                ConsoleKey::Attention,
                ConsoleKey::CrSel,
                ConsoleKey::ExSel,
                ConsoleKey::EraseEndOfFile,
                ConsoleKey::Play,
                ConsoleKey::Zoom,
                ConsoleKey::NoName,
                ConsoleKey::Pa1,
                ConsoleKey::OemClear,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Backspace"),
                _T("Tab"),
                _T("Clear"),
                _T("Enter"),
                _T("Pause"),
                _T("Escape2"),
                _T("Spacebar"),
                _T("PageUp"),
                _T("PageDown"),
                _T("End"),
                _T("Home"),
                _T("LeftArrow"),
                _T("UpArrow"),
                _T("RightArrow"),
                _T("DownArrow"),
                _T("Select"),
                _T("Print"),
                _T("Execute"),
                _T("PrintScreen"),
                _T("Insert"),
                _T("Delete"),
                _T("Help"),
                _T("D0"),
                _T("D1"),
                _T("D2"),
                _T("D3"),
                _T("D4"),
                _T("D5"),
                _T("D6"),
                _T("D7"),
                _T("D8"),
                _T("D9"),
                _T("A"),
                _T("B"),
                _T("C"),
                _T("D"),
                _T("E"),
                _T("F"),
                _T("G"),
                _T("H"),
                _T("I"),
                _T("J"),
                _T("K"),
                _T("L"),
                _T("M"),
                _T("N"),
                _T("O"),
                _T("P"),
                _T("Q"),
                _T("R"),
                _T("S"),
                _T("T"),
                _T("U"),
                _T("V"),
                _T("W"),
                _T("X"),
                _T("Y"),
                _T("Z"),
                _T("LeftWindows"),
                _T("RightWindows"),
                _T("Applications"),
                _T("Sleep"),
                _T("NumPad0"),
                _T("NumPad1"),
                _T("NumPad2"),
                _T("NumPad3"),
                _T("NumPad4"),
                _T("NumPad5"),
                _T("NumPad6"),
                _T("NumPad7"),
                _T("NumPad8"),
                _T("NumPad9"),
                _T("Multiply"),
                _T("Add"),
                _T("Separator"),
                _T("Subtract"),
                _T("Decimal2"),
                _T("Divide"),
                _T("F1"),
                _T("F2"),
                _T("F3"),
                _T("F4"),
                _T("F5"),
                _T("F6"),
                _T("F7"),
                _T("F8"),
                _T("F9"),
                _T("F10"),
                _T("F11"),
                _T("F12"),
                _T("F13"),
                _T("F14"),
                _T("F15"),
                _T("F16"),
                _T("F17"),
                _T("F18"),
                _T("F19"),
                _T("F20"),
                _T("F21"),
                _T("F22"),
                _T("F23"),
                _T("F24"),
                _T("BrowserBack"),
                _T("BrowserForward"),
                _T("BrowserRefresh"),
                _T("BrowserStop"),
                _T("BrowserSearch"),
                _T("BrowserFavorites"),
                _T("BrowserHome"),
                _T("VolumeMute"),
                _T("VolumeDown"),
                _T("VolumeUp"),
                _T("MediaNext"),
                _T("MediaPrevious"),
                _T("MediaStop"),
                _T("MediaPlay"),
                _T("LaunchMail"),
                _T("LaunchMediaSelect"),
                _T("LaunchApp1"),
                _T("LaunchApp2"),
                _T("Oem1"),
                _T("OemPlus"),
                _T("OemComma"),
                _T("OemMinus"),
                _T("OemPeriod"),
                _T("Oem2"),
                _T("Oem3"),
                _T("Oem4"),
                _T("Oem5"),
                _T("Oem6"),
                _T("Oem7"),
                _T("Oem8"),
                _T("Oem102"),
                _T("Process"),
                _T("Packet"),
                _T("Attention"),
                _T("CrSel"),
                _T("ExSel"),
                _T("EraseEndOfFile"),
                _T("Play"),
                _T("Zoom"),
                _T("NoName"),
                _T("Pa1"),
                _T("OemClear"),
            };
            return res;
        }
    };
    
    
    enum class ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    };
    
    struct ConsoleModifiers_Impl : public cli::enumeration<ConsoleModifiers>
    {
        ConsoleModifiers_Impl(const ConsoleModifiers& val) : cli::enumeration<ConsoleModifiers>(val) { }
        operator ConsoleModifiers() { return value; }
        
        virtual const std::vector<ConsoleModifiers>& GetValues() const override
        {
            static std::vector<ConsoleModifiers> res =
            {
                ConsoleModifiers::Alt,
                ConsoleModifiers::Shift,
                ConsoleModifiers::Control,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Alt"),
                _T("Shift"),
                _T("Control"),
            };
            return res;
        }
    };
    
    
    enum class ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    };
    
    struct ConsoleSpecialKey_Impl : public cli::enumeration<ConsoleSpecialKey>
    {
        ConsoleSpecialKey_Impl(const ConsoleSpecialKey& val) : cli::enumeration<ConsoleSpecialKey>(val) { }
        operator ConsoleSpecialKey() { return value; }
        
        virtual const std::vector<ConsoleSpecialKey>& GetValues() const override
        {
            static std::vector<ConsoleSpecialKey> res =
            {
                ConsoleSpecialKey::ControlC,
                ConsoleSpecialKey::ControlBreak,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ControlC"),
                _T("ControlBreak"),
            };
            return res;
        }
    };
    
    
    enum class Which
    {
        Day = 0,
        DayYear = 1,
        Month5 = 2,
        Year = 3,
    };
    
    struct Which_Impl : public cli::enumeration<Which>
    {
        Which_Impl(const Which& val) : cli::enumeration<Which>(val) { }
        operator Which() { return value; }
        
        virtual const std::vector<Which>& GetValues() const override
        {
            static std::vector<Which> res =
            {
                Which::Day,
                Which::DayYear,
                Which::Month5,
                Which::Year,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Day"),
                _T("DayYear"),
                _T("Month5"),
                _T("Year"),
            };
            return res;
        }
    };
    
    
    enum class DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    };
    
    struct DateTimeKind_Impl : public cli::enumeration<DateTimeKind>
    {
        DateTimeKind_Impl(const DateTimeKind& val) : cli::enumeration<DateTimeKind>(val) { }
        operator DateTimeKind() { return value; }
        
        virtual const std::vector<DateTimeKind>& GetValues() const override
        {
            static std::vector<DateTimeKind> res =
            {
                DateTimeKind::Unspecified,
                DateTimeKind::Utc,
                DateTimeKind::Local,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unspecified"),
                _T("Utc"),
                _T("Local"),
            };
            return res;
        }
    };
    
    
    enum class DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    };
    
    struct DayOfWeek_Impl : public cli::enumeration<DayOfWeek>
    {
        DayOfWeek_Impl(const DayOfWeek& val) : cli::enumeration<DayOfWeek>(val) { }
        operator DayOfWeek() { return value; }
        
        virtual const std::vector<DayOfWeek>& GetValues() const override
        {
            static std::vector<DayOfWeek> res =
            {
                DayOfWeek::Sunday,
                DayOfWeek::Monday,
                DayOfWeek::Tuesday,
                DayOfWeek::Wednesday,
                DayOfWeek::Thursday,
                DayOfWeek::Friday,
                DayOfWeek::Saturday,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Sunday"),
                _T("Monday"),
                _T("Tuesday"),
                _T("Wednesday"),
                _T("Thursday"),
                _T("Friday"),
                _T("Saturday"),
            };
            return res;
        }
    };
    
    
    enum class AppDomainManagerInitializationOptions
    {
        None = 0,
        RegisterWithHost = 1,
    };
    
    struct AppDomainManagerInitializationOptions_Impl : public cli::enumeration<AppDomainManagerInitializationOptions>
    {
        AppDomainManagerInitializationOptions_Impl(const AppDomainManagerInitializationOptions& val) : cli::enumeration<AppDomainManagerInitializationOptions>(val) { }
        operator AppDomainManagerInitializationOptions() { return value; }
        
        virtual const std::vector<AppDomainManagerInitializationOptions>& GetValues() const override
        {
            static std::vector<AppDomainManagerInitializationOptions> res =
            {
                AppDomainManagerInitializationOptions::None,
                AppDomainManagerInitializationOptions::RegisterWithHost,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("RegisterWithHost"),
            };
            return res;
        }
    };
    
    
    enum class SpecialFolder
    {
        MyDocuments = 5,
        Desktop = 0,
        MyComputer = 17,
        Programs = 2,
        Personal = 5,
        Favorites = 6,
        Startup = 7,
        Recent = 8,
        SendTo = 9,
        StartMenu = 11,
        MyMusic = 13,
        DesktopDirectory = 16,
        Templates = 21,
        ApplicationData = 26,
        LocalApplicationData = 28,
        InternetCache = 32,
        Cookies = 33,
        History = 34,
        CommonApplicationData = 35,
        System = 37,
        ProgramFiles = 38,
        MyPictures = 39,
        CommonProgramFiles = 43,
        MyVideos = 14,
        NetworkShortcuts = 19,
        Fonts = 20,
        CommonStartMenu = 22,
        CommonPrograms = 23,
        CommonStartup = 24,
        CommonDesktopDirectory = 25,
        PrinterShortcuts = 27,
        Windows = 36,
        UserProfile = 40,
        SystemX86 = 41,
        ProgramFilesX86 = 42,
        CommonProgramFilesX86 = 44,
        CommonTemplates = 45,
        CommonDocuments = 46,
        CommonAdminTools = 47,
        AdminTools = 48,
        CommonMusic = 53,
        CommonPictures = 54,
        CommonVideos = 55,
        Resources = 56,
        LocalizedResources = 57,
        CommonOemLinks = 58,
        CDBurning = 59,
    };
    
    struct SpecialFolder_Impl : public cli::enumeration<SpecialFolder>
    {
        SpecialFolder_Impl(const SpecialFolder& val) : cli::enumeration<SpecialFolder>(val) { }
        operator SpecialFolder() { return value; }
        
        virtual const std::vector<SpecialFolder>& GetValues() const override
        {
            static std::vector<SpecialFolder> res =
            {
                SpecialFolder::MyDocuments,
                SpecialFolder::Desktop,
                SpecialFolder::MyComputer,
                SpecialFolder::Programs,
                SpecialFolder::Personal,
                SpecialFolder::Favorites,
                SpecialFolder::Startup,
                SpecialFolder::Recent,
                SpecialFolder::SendTo,
                SpecialFolder::StartMenu,
                SpecialFolder::MyMusic,
                SpecialFolder::DesktopDirectory,
                SpecialFolder::Templates,
                SpecialFolder::ApplicationData,
                SpecialFolder::LocalApplicationData,
                SpecialFolder::InternetCache,
                SpecialFolder::Cookies,
                SpecialFolder::History,
                SpecialFolder::CommonApplicationData,
                SpecialFolder::System,
                SpecialFolder::ProgramFiles,
                SpecialFolder::MyPictures,
                SpecialFolder::CommonProgramFiles,
                SpecialFolder::MyVideos,
                SpecialFolder::NetworkShortcuts,
                SpecialFolder::Fonts,
                SpecialFolder::CommonStartMenu,
                SpecialFolder::CommonPrograms,
                SpecialFolder::CommonStartup,
                SpecialFolder::CommonDesktopDirectory,
                SpecialFolder::PrinterShortcuts,
                SpecialFolder::Windows,
                SpecialFolder::UserProfile,
                SpecialFolder::SystemX86,
                SpecialFolder::ProgramFilesX86,
                SpecialFolder::CommonProgramFilesX86,
                SpecialFolder::CommonTemplates,
                SpecialFolder::CommonDocuments,
                SpecialFolder::CommonAdminTools,
                SpecialFolder::AdminTools,
                SpecialFolder::CommonMusic,
                SpecialFolder::CommonPictures,
                SpecialFolder::CommonVideos,
                SpecialFolder::Resources,
                SpecialFolder::LocalizedResources,
                SpecialFolder::CommonOemLinks,
                SpecialFolder::CDBurning,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MyDocuments"),
                _T("Desktop"),
                _T("MyComputer"),
                _T("Programs"),
                _T("Personal"),
                _T("Favorites"),
                _T("Startup"),
                _T("Recent"),
                _T("SendTo"),
                _T("StartMenu"),
                _T("MyMusic"),
                _T("DesktopDirectory"),
                _T("Templates"),
                _T("ApplicationData"),
                _T("LocalApplicationData"),
                _T("InternetCache"),
                _T("Cookies"),
                _T("History"),
                _T("CommonApplicationData"),
                _T("System"),
                _T("ProgramFiles"),
                _T("MyPictures"),
                _T("CommonProgramFiles"),
                _T("MyVideos"),
                _T("NetworkShortcuts"),
                _T("Fonts"),
                _T("CommonStartMenu"),
                _T("CommonPrograms"),
                _T("CommonStartup"),
                _T("CommonDesktopDirectory"),
                _T("PrinterShortcuts"),
                _T("Windows"),
                _T("UserProfile"),
                _T("SystemX86"),
                _T("ProgramFilesX86"),
                _T("CommonProgramFilesX86"),
                _T("CommonTemplates"),
                _T("CommonDocuments"),
                _T("CommonAdminTools"),
                _T("AdminTools"),
                _T("CommonMusic"),
                _T("CommonPictures"),
                _T("CommonVideos"),
                _T("Resources"),
                _T("LocalizedResources"),
                _T("CommonOemLinks"),
                _T("CDBurning"),
            };
            return res;
        }
    };
    
    
    enum class SpecialFolderOption
    {
        None = 0,
        DoNotVerify = 16384,
        Create = 32768,
    };
    
    struct SpecialFolderOption_Impl : public cli::enumeration<SpecialFolderOption>
    {
        SpecialFolderOption_Impl(const SpecialFolderOption& val) : cli::enumeration<SpecialFolderOption>(val) { }
        operator SpecialFolderOption() { return value; }
        
        virtual const std::vector<SpecialFolderOption>& GetValues() const override
        {
            static std::vector<SpecialFolderOption> res =
            {
                SpecialFolderOption::None,
                SpecialFolderOption::DoNotVerify,
                SpecialFolderOption::Create,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("DoNotVerify"),
                _T("Create"),
            };
            return res;
        }
    };
    
    
    enum class EnvironmentVariableTarget
    {
        Process = 0,
        User = 1,
        Machine = 2,
    };
    
    struct EnvironmentVariableTarget_Impl : public cli::enumeration<EnvironmentVariableTarget>
    {
        EnvironmentVariableTarget_Impl(const EnvironmentVariableTarget& val) : cli::enumeration<EnvironmentVariableTarget>(val) { }
        operator EnvironmentVariableTarget() { return value; }
        
        virtual const std::vector<EnvironmentVariableTarget>& GetValues() const override
        {
            static std::vector<EnvironmentVariableTarget> res =
            {
                EnvironmentVariableTarget::Process,
                EnvironmentVariableTarget::User,
                EnvironmentVariableTarget::Machine,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Process"),
                _T("User"),
                _T("Machine"),
            };
            return res;
        }
    };
    
    
    enum class GCCollectionMode
    {
        Default2 = 0,
        Forced = 1,
        Optimized = 2,
    };
    
    struct GCCollectionMode_Impl : public cli::enumeration<GCCollectionMode>
    {
        GCCollectionMode_Impl(const GCCollectionMode& val) : cli::enumeration<GCCollectionMode>(val) { }
        operator GCCollectionMode() { return value; }
        
        virtual const std::vector<GCCollectionMode>& GetValues() const override
        {
            static std::vector<GCCollectionMode> res =
            {
                GCCollectionMode::Default2,
                GCCollectionMode::Forced,
                GCCollectionMode::Optimized,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Default2"),
                _T("Forced"),
                _T("Optimized"),
            };
            return res;
        }
    };
    
    
    enum class GCNotificationStatus
    {
        Succeeded = 0,
        Failed = 1,
        Canceled = 2,
        Timeout2 = 3,
        NotApplicable = 4,
    };
    
    struct GCNotificationStatus_Impl : public cli::enumeration<GCNotificationStatus>
    {
        GCNotificationStatus_Impl(const GCNotificationStatus& val) : cli::enumeration<GCNotificationStatus>(val) { }
        operator GCNotificationStatus() { return value; }
        
        virtual const std::vector<GCNotificationStatus>& GetValues() const override
        {
            static std::vector<GCNotificationStatus> res =
            {
                GCNotificationStatus::Succeeded,
                GCNotificationStatus::Failed,
                GCNotificationStatus::Canceled,
                GCNotificationStatus::Timeout2,
                GCNotificationStatus::NotApplicable,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Succeeded"),
                _T("Failed"),
                _T("Canceled"),
                _T("Timeout2"),
                _T("NotApplicable"),
            };
            return res;
        }
    };
    
    
    enum class Format
    {
        N = 0,
        D = 1,
        B = 2,
        P = 3,
        X = 4,
    };
    
    struct Format_Impl : public cli::enumeration<Format>
    {
        Format_Impl(const Format& val) : cli::enumeration<Format>(val) { }
        operator Format() { return value; }
        
        virtual const std::vector<Format>& GetValues() const override
        {
            static std::vector<Format> res =
            {
                Format::N,
                Format::D,
                Format::B,
                Format::P,
                Format::X,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("N"),
                _T("D"),
                _T("B"),
                _T("P"),
                _T("X"),
            };
            return res;
        }
    };
    
    
    enum class LoaderOptimization
    {
        NotSpecified = 0,
        SingleDomain = 1,
        MultiDomain = 2,
        MultiDomainHost = 3,
        DomainMask = 3,
        DisallowBindings = 4,
    };
    
    struct LoaderOptimization_Impl : public cli::enumeration<LoaderOptimization>
    {
        LoaderOptimization_Impl(const LoaderOptimization& val) : cli::enumeration<LoaderOptimization>(val) { }
        operator LoaderOptimization() { return value; }
        
        virtual const std::vector<LoaderOptimization>& GetValues() const override
        {
            static std::vector<LoaderOptimization> res =
            {
                LoaderOptimization::NotSpecified,
                LoaderOptimization::SingleDomain,
                LoaderOptimization::MultiDomain,
                LoaderOptimization::MultiDomainHost,
                LoaderOptimization::DomainMask,
                LoaderOptimization::DisallowBindings,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NotSpecified"),
                _T("SingleDomain"),
                _T("MultiDomain"),
                _T("MultiDomainHost"),
                _T("DomainMask"),
                _T("DisallowBindings"),
            };
            return res;
        }
    };
    
    
    enum class MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    };
    
    struct MidpointRounding_Impl : public cli::enumeration<MidpointRounding>
    {
        MidpointRounding_Impl(const MidpointRounding& val) : cli::enumeration<MidpointRounding>(val) { }
        operator MidpointRounding() { return value; }
        
        virtual const std::vector<MidpointRounding>& GetValues() const override
        {
            static std::vector<MidpointRounding> res =
            {
                MidpointRounding::ToEven,
                MidpointRounding::AwayFromZero,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ToEven"),
                _T("AwayFromZero"),
            };
            return res;
        }
    };
    
    
    enum class PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    };
    
    struct PlatformID_Impl : public cli::enumeration<PlatformID>
    {
        PlatformID_Impl(const PlatformID& val) : cli::enumeration<PlatformID>(val) { }
        operator PlatformID() { return value; }
        
        virtual const std::vector<PlatformID>& GetValues() const override
        {
            static std::vector<PlatformID> res =
            {
                PlatformID::Win32S,
                PlatformID::Win32Windows,
                PlatformID::Win32NT,
                PlatformID::WinCE,
                PlatformID::Unix,
                PlatformID::Xbox,
                PlatformID::MacOSX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Win32S"),
                _T("Win32Windows"),
                _T("Win32NT"),
                _T("WinCE"),
                _T("Unix"),
                _T("Xbox"),
                _T("MacOSX"),
            };
            return res;
        }
    };
    
    
    enum class StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    };
    
    struct StringComparison_Impl : public cli::enumeration<StringComparison>
    {
        StringComparison_Impl(const StringComparison& val) : cli::enumeration<StringComparison>(val) { }
        operator StringComparison() { return value; }
        
        virtual const std::vector<StringComparison>& GetValues() const override
        {
            static std::vector<StringComparison> res =
            {
                StringComparison::CurrentCulture,
                StringComparison::CurrentCultureIgnoreCase,
                StringComparison::InvariantCulture,
                StringComparison::InvariantCultureIgnoreCase,
                StringComparison::Ordinal,
                StringComparison::OrdinalIgnoreCase,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CurrentCulture"),
                _T("CurrentCultureIgnoreCase"),
                _T("InvariantCulture"),
                _T("InvariantCultureIgnoreCase"),
                _T("Ordinal"),
                _T("OrdinalIgnoreCase"),
            };
            return res;
        }
    };
    
    
    enum class StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    };
    
    struct StringSplitOptions_Impl : public cli::enumeration<StringSplitOptions>
    {
        StringSplitOptions_Impl(const StringSplitOptions& val) : cli::enumeration<StringSplitOptions>(val) { }
        operator StringSplitOptions() { return value; }
        
        virtual const std::vector<StringSplitOptions>& GetValues() const override
        {
            static std::vector<StringSplitOptions> res =
            {
                StringSplitOptions::None,
                StringSplitOptions::RemoveEmptyEntries,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("RemoveEmptyEntries"),
            };
            return res;
        }
    };
    
    
    enum class TermInfoBooleans
    {
        AutoLeftMargin = 0,
        AutoRightMargin = 1,
        NoEscCtlc = 2,
        CeolStandoutGlitch = 3,
        EatNewlineGlitch = 4,
        EraseOverstrike = 5,
        GenericType = 6,
        HardCopy = 7,
        HasMetaKey = 8,
        HasStatusLine = 9,
        InsertNullGlitch = 10,
        MemoryAbove = 11,
        MemoryBelow = 12,
        MoveInsertMode = 13,
        MoveStandoutMode = 14,
        OverStrike = 15,
        StatusLineEscOk = 16,
        DestTabsMagicSmso = 17,
        TildeGlitch = 18,
        TransparentUnderline = 19,
        XonXoff = 20,
        NeedsXonXoff = 21,
        PrtrSilent = 22,
        HardCursor = 23,
        NonRevRmcup = 24,
        NoPadChar = 25,
        NonDestScrollRegion = 26,
        CanChange = 27,
        BackColorErase = 28,
        HueLightnessSaturation = 29,
        ColAddrGlitch = 30,
        CrCancelsMicroMode = 31,
        HasPrintWheel = 32,
        RowAddrGlitch = 33,
        SemiAutoRightMargin = 34,
        CpiChangesRes = 35,
        LpiChangesRes = 36,
        Last = 37,
    };
    
    struct TermInfoBooleans_Impl : public cli::enumeration<TermInfoBooleans>
    {
        TermInfoBooleans_Impl(const TermInfoBooleans& val) : cli::enumeration<TermInfoBooleans>(val) { }
        operator TermInfoBooleans() { return value; }
        
        virtual const std::vector<TermInfoBooleans>& GetValues() const override
        {
            static std::vector<TermInfoBooleans> res =
            {
                TermInfoBooleans::AutoLeftMargin,
                TermInfoBooleans::AutoRightMargin,
                TermInfoBooleans::NoEscCtlc,
                TermInfoBooleans::CeolStandoutGlitch,
                TermInfoBooleans::EatNewlineGlitch,
                TermInfoBooleans::EraseOverstrike,
                TermInfoBooleans::GenericType,
                TermInfoBooleans::HardCopy,
                TermInfoBooleans::HasMetaKey,
                TermInfoBooleans::HasStatusLine,
                TermInfoBooleans::InsertNullGlitch,
                TermInfoBooleans::MemoryAbove,
                TermInfoBooleans::MemoryBelow,
                TermInfoBooleans::MoveInsertMode,
                TermInfoBooleans::MoveStandoutMode,
                TermInfoBooleans::OverStrike,
                TermInfoBooleans::StatusLineEscOk,
                TermInfoBooleans::DestTabsMagicSmso,
                TermInfoBooleans::TildeGlitch,
                TermInfoBooleans::TransparentUnderline,
                TermInfoBooleans::XonXoff,
                TermInfoBooleans::NeedsXonXoff,
                TermInfoBooleans::PrtrSilent,
                TermInfoBooleans::HardCursor,
                TermInfoBooleans::NonRevRmcup,
                TermInfoBooleans::NoPadChar,
                TermInfoBooleans::NonDestScrollRegion,
                TermInfoBooleans::CanChange,
                TermInfoBooleans::BackColorErase,
                TermInfoBooleans::HueLightnessSaturation,
                TermInfoBooleans::ColAddrGlitch,
                TermInfoBooleans::CrCancelsMicroMode,
                TermInfoBooleans::HasPrintWheel,
                TermInfoBooleans::RowAddrGlitch,
                TermInfoBooleans::SemiAutoRightMargin,
                TermInfoBooleans::CpiChangesRes,
                TermInfoBooleans::LpiChangesRes,
                TermInfoBooleans::Last,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("AutoLeftMargin"),
                _T("AutoRightMargin"),
                _T("NoEscCtlc"),
                _T("CeolStandoutGlitch"),
                _T("EatNewlineGlitch"),
                _T("EraseOverstrike"),
                _T("GenericType"),
                _T("HardCopy"),
                _T("HasMetaKey"),
                _T("HasStatusLine"),
                _T("InsertNullGlitch"),
                _T("MemoryAbove"),
                _T("MemoryBelow"),
                _T("MoveInsertMode"),
                _T("MoveStandoutMode"),
                _T("OverStrike"),
                _T("StatusLineEscOk"),
                _T("DestTabsMagicSmso"),
                _T("TildeGlitch"),
                _T("TransparentUnderline"),
                _T("XonXoff"),
                _T("NeedsXonXoff"),
                _T("PrtrSilent"),
                _T("HardCursor"),
                _T("NonRevRmcup"),
                _T("NoPadChar"),
                _T("NonDestScrollRegion"),
                _T("CanChange"),
                _T("BackColorErase"),
                _T("HueLightnessSaturation"),
                _T("ColAddrGlitch"),
                _T("CrCancelsMicroMode"),
                _T("HasPrintWheel"),
                _T("RowAddrGlitch"),
                _T("SemiAutoRightMargin"),
                _T("CpiChangesRes"),
                _T("LpiChangesRes"),
                _T("Last"),
            };
            return res;
        }
    };
    
    
    enum class TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    };
    
    struct TermInfoNumbers_Impl : public cli::enumeration<TermInfoNumbers>
    {
        TermInfoNumbers_Impl(const TermInfoNumbers& val) : cli::enumeration<TermInfoNumbers>(val) { }
        operator TermInfoNumbers() { return value; }
        
        virtual const std::vector<TermInfoNumbers>& GetValues() const override
        {
            static std::vector<TermInfoNumbers> res =
            {
                TermInfoNumbers::Columns,
                TermInfoNumbers::InitTabs,
                TermInfoNumbers::Lines,
                TermInfoNumbers::LinesOfMemory,
                TermInfoNumbers::MagicCookieGlitch,
                TermInfoNumbers::PaddingBaudRate,
                TermInfoNumbers::VirtualTerminal,
                TermInfoNumbers::WidthStatusLine,
                TermInfoNumbers::NumLabels,
                TermInfoNumbers::LabelHeight,
                TermInfoNumbers::LabelWidth,
                TermInfoNumbers::MaxAttributes,
                TermInfoNumbers::MaximumWindows,
                TermInfoNumbers::MaxColors,
                TermInfoNumbers::MaxPairs,
                TermInfoNumbers::NoColorVideo,
                TermInfoNumbers::BufferCapacity,
                TermInfoNumbers::DotVertSpacing,
                TermInfoNumbers::DotHorzSpacing,
                TermInfoNumbers::MaxMicroAddress,
                TermInfoNumbers::MaxMicroJump,
                TermInfoNumbers::MicroColSize,
                TermInfoNumbers::MicroLineSize,
                TermInfoNumbers::NumberOfPins,
                TermInfoNumbers::OutputResChar,
                TermInfoNumbers::OutputResLine,
                TermInfoNumbers::OutputResHorzInch,
                TermInfoNumbers::OutputResVertInch,
                TermInfoNumbers::PrintRate,
                TermInfoNumbers::WideCharSize,
                TermInfoNumbers::Buttons,
                TermInfoNumbers::BitImageEntwining,
                TermInfoNumbers::BitImageType,
                TermInfoNumbers::Last,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Columns"),
                _T("InitTabs"),
                _T("Lines"),
                _T("LinesOfMemory"),
                _T("MagicCookieGlitch"),
                _T("PaddingBaudRate"),
                _T("VirtualTerminal"),
                _T("WidthStatusLine"),
                _T("NumLabels"),
                _T("LabelHeight"),
                _T("LabelWidth"),
                _T("MaxAttributes"),
                _T("MaximumWindows"),
                _T("MaxColors"),
                _T("MaxPairs"),
                _T("NoColorVideo"),
                _T("BufferCapacity"),
                _T("DotVertSpacing"),
                _T("DotHorzSpacing"),
                _T("MaxMicroAddress"),
                _T("MaxMicroJump"),
                _T("MicroColSize"),
                _T("MicroLineSize"),
                _T("NumberOfPins"),
                _T("OutputResChar"),
                _T("OutputResLine"),
                _T("OutputResHorzInch"),
                _T("OutputResVertInch"),
                _T("PrintRate"),
                _T("WideCharSize"),
                _T("Buttons"),
                _T("BitImageEntwining"),
                _T("BitImageType"),
                _T("Last"),
            };
            return res;
        }
    };
    
    
    enum class TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    };
    
    struct TermInfoStrings_Impl : public cli::enumeration<TermInfoStrings>
    {
        TermInfoStrings_Impl(const TermInfoStrings& val) : cli::enumeration<TermInfoStrings>(val) { }
        operator TermInfoStrings() { return value; }
        
        virtual const std::vector<TermInfoStrings>& GetValues() const override
        {
            static std::vector<TermInfoStrings> res =
            {
                TermInfoStrings::BackTab,
                TermInfoStrings::Bell,
                TermInfoStrings::CarriageReturn,
                TermInfoStrings::ChangeScrollRegion,
                TermInfoStrings::ClearAllTabs,
                TermInfoStrings::ClearScreen,
                TermInfoStrings::ClrEol,
                TermInfoStrings::ClrEos,
                TermInfoStrings::ColumnAddress,
                TermInfoStrings::CommandCharacter,
                TermInfoStrings::CursorAddress,
                TermInfoStrings::CursorDown,
                TermInfoStrings::CursorHome,
                TermInfoStrings::CursorInvisible,
                TermInfoStrings::CursorLeft,
                TermInfoStrings::CursorMemAddress,
                TermInfoStrings::CursorNormal,
                TermInfoStrings::CursorRight,
                TermInfoStrings::CursorToLl,
                TermInfoStrings::CursorUp,
                TermInfoStrings::CursorVisible,
                TermInfoStrings::DeleteCharacter,
                TermInfoStrings::DeleteLine,
                TermInfoStrings::DisStatusLine,
                TermInfoStrings::DownHalfLine,
                TermInfoStrings::EnterAltCharsetMode,
                TermInfoStrings::EnterBlinkMode,
                TermInfoStrings::EnterBoldMode,
                TermInfoStrings::EnterCaMode,
                TermInfoStrings::EnterDeleteMode,
                TermInfoStrings::EnterDimMode,
                TermInfoStrings::EnterInsertMode,
                TermInfoStrings::EnterSecureMode,
                TermInfoStrings::EnterProtectedMode,
                TermInfoStrings::EnterReverseMode,
                TermInfoStrings::EnterStandoutMode,
                TermInfoStrings::EnterUnderlineMode,
                TermInfoStrings::EraseChars,
                TermInfoStrings::ExitAltCharsetMode,
                TermInfoStrings::ExitAttributeMode,
                TermInfoStrings::ExitCaMode,
                TermInfoStrings::ExitDeleteMode,
                TermInfoStrings::ExitInsertMode,
                TermInfoStrings::ExitStandoutMode,
                TermInfoStrings::ExitUnderlineMode,
                TermInfoStrings::FlashScreen,
                TermInfoStrings::FormFeed,
                TermInfoStrings::FromStatusLine,
                TermInfoStrings::Init1string,
                TermInfoStrings::Init2string,
                TermInfoStrings::Init3string,
                TermInfoStrings::InitFile,
                TermInfoStrings::InsertCharacter,
                TermInfoStrings::InsertLine,
                TermInfoStrings::InsertPadding,
                TermInfoStrings::KeyBackspace,
                TermInfoStrings::KeyCatab,
                TermInfoStrings::KeyClear,
                TermInfoStrings::KeyCtab,
                TermInfoStrings::KeyDc,
                TermInfoStrings::KeyDl,
                TermInfoStrings::KeyDown,
                TermInfoStrings::KeyEic,
                TermInfoStrings::KeyEol,
                TermInfoStrings::KeyEos,
                TermInfoStrings::KeyF0,
                TermInfoStrings::KeyF1,
                TermInfoStrings::KeyF10,
                TermInfoStrings::KeyF2,
                TermInfoStrings::KeyF3,
                TermInfoStrings::KeyF4,
                TermInfoStrings::KeyF5,
                TermInfoStrings::KeyF6,
                TermInfoStrings::KeyF7,
                TermInfoStrings::KeyF8,
                TermInfoStrings::KeyF9,
                TermInfoStrings::KeyHome,
                TermInfoStrings::KeyIc,
                TermInfoStrings::KeyIl,
                TermInfoStrings::KeyLeft,
                TermInfoStrings::KeyLl,
                TermInfoStrings::KeyNpage,
                TermInfoStrings::KeyPpage,
                TermInfoStrings::KeyRight,
                TermInfoStrings::KeySf,
                TermInfoStrings::KeySr,
                TermInfoStrings::KeyStab,
                TermInfoStrings::KeyUp,
                TermInfoStrings::KeypadLocal,
                TermInfoStrings::KeypadXmit,
                TermInfoStrings::LabF0,
                TermInfoStrings::LabF1,
                TermInfoStrings::LabF10,
                TermInfoStrings::LabF2,
                TermInfoStrings::LabF3,
                TermInfoStrings::LabF4,
                TermInfoStrings::LabF5,
                TermInfoStrings::LabF6,
                TermInfoStrings::LabF7,
                TermInfoStrings::LabF8,
                TermInfoStrings::LabF9,
                TermInfoStrings::MetaOff,
                TermInfoStrings::MetaOn,
                TermInfoStrings::Newline,
                TermInfoStrings::PadChar,
                TermInfoStrings::ParmDch,
                TermInfoStrings::ParmDeleteLine,
                TermInfoStrings::ParmDownCursor,
                TermInfoStrings::ParmIch,
                TermInfoStrings::ParmIndex,
                TermInfoStrings::ParmInsertLine,
                TermInfoStrings::ParmLeftCursor,
                TermInfoStrings::ParmRightCursor,
                TermInfoStrings::ParmRindex,
                TermInfoStrings::ParmUpCursor,
                TermInfoStrings::PkeyKey,
                TermInfoStrings::PkeyLocal,
                TermInfoStrings::PkeyXmit,
                TermInfoStrings::PrintScreen,
                TermInfoStrings::PrtrOff,
                TermInfoStrings::PrtrOn,
                TermInfoStrings::RepeatChar,
                TermInfoStrings::Reset1string,
                TermInfoStrings::Reset2string,
                TermInfoStrings::Reset3string,
                TermInfoStrings::ResetFile,
                TermInfoStrings::RestoreCursor,
                TermInfoStrings::RowAddress,
                TermInfoStrings::SaveCursor,
                TermInfoStrings::ScrollForward,
                TermInfoStrings::ScrollReverse,
                TermInfoStrings::SetAttributes,
                TermInfoStrings::SetTab,
                TermInfoStrings::SetWindow,
                TermInfoStrings::Tab,
                TermInfoStrings::ToStatusLine,
                TermInfoStrings::UnderlineChar,
                TermInfoStrings::UpHalfLine,
                TermInfoStrings::InitProg,
                TermInfoStrings::KeyA1,
                TermInfoStrings::KeyA3,
                TermInfoStrings::KeyB2,
                TermInfoStrings::KeyC1,
                TermInfoStrings::KeyC3,
                TermInfoStrings::PrtrNon,
                TermInfoStrings::CharPadding,
                TermInfoStrings::AcsChars,
                TermInfoStrings::PlabNorm,
                TermInfoStrings::KeyBtab,
                TermInfoStrings::EnterXonMode,
                TermInfoStrings::ExitXonMode,
                TermInfoStrings::EnterAmMode,
                TermInfoStrings::ExitAmMode,
                TermInfoStrings::XonCharacter,
                TermInfoStrings::XoffCharacter,
                TermInfoStrings::EnaAcs,
                TermInfoStrings::LabelOn,
                TermInfoStrings::LabelOff,
                TermInfoStrings::KeyBeg,
                TermInfoStrings::KeyCancel,
                TermInfoStrings::KeyClose,
                TermInfoStrings::KeyCommand,
                TermInfoStrings::KeyCopy,
                TermInfoStrings::KeyCreate,
                TermInfoStrings::KeyEnd,
                TermInfoStrings::KeyEnter,
                TermInfoStrings::KeyExit,
                TermInfoStrings::KeyFind,
                TermInfoStrings::KeyHelp,
                TermInfoStrings::KeyMark,
                TermInfoStrings::KeyMessage,
                TermInfoStrings::KeyMove,
                TermInfoStrings::KeyNext,
                TermInfoStrings::KeyOpen,
                TermInfoStrings::KeyOptions,
                TermInfoStrings::KeyPrevious,
                TermInfoStrings::KeyPrint,
                TermInfoStrings::KeyRedo,
                TermInfoStrings::KeyReference,
                TermInfoStrings::KeyRefresh,
                TermInfoStrings::KeyReplace,
                TermInfoStrings::KeyRestart,
                TermInfoStrings::KeyResume,
                TermInfoStrings::KeySave,
                TermInfoStrings::KeySuspend,
                TermInfoStrings::KeyUndo,
                TermInfoStrings::KeySbeg,
                TermInfoStrings::KeyScancel,
                TermInfoStrings::KeyScommand,
                TermInfoStrings::KeyScopy,
                TermInfoStrings::KeyScreate,
                TermInfoStrings::KeySdc,
                TermInfoStrings::KeySdl,
                TermInfoStrings::KeySelect,
                TermInfoStrings::KeySend,
                TermInfoStrings::KeySeol,
                TermInfoStrings::KeySexit,
                TermInfoStrings::KeySfind,
                TermInfoStrings::KeyShelp,
                TermInfoStrings::KeyShome,
                TermInfoStrings::KeySic,
                TermInfoStrings::KeySleft,
                TermInfoStrings::KeySmessage,
                TermInfoStrings::KeySmove,
                TermInfoStrings::KeySnext,
                TermInfoStrings::KeySoptions,
                TermInfoStrings::KeySprevious,
                TermInfoStrings::KeySprint,
                TermInfoStrings::KeySredo,
                TermInfoStrings::KeySreplace,
                TermInfoStrings::KeySright,
                TermInfoStrings::KeySrsume,
                TermInfoStrings::KeySsave,
                TermInfoStrings::KeySsuspend,
                TermInfoStrings::KeySundo,
                TermInfoStrings::ReqForInput,
                TermInfoStrings::KeyF11,
                TermInfoStrings::KeyF12,
                TermInfoStrings::KeyF13,
                TermInfoStrings::KeyF14,
                TermInfoStrings::KeyF15,
                TermInfoStrings::KeyF16,
                TermInfoStrings::KeyF17,
                TermInfoStrings::KeyF18,
                TermInfoStrings::KeyF19,
                TermInfoStrings::KeyF20,
                TermInfoStrings::KeyF21,
                TermInfoStrings::KeyF22,
                TermInfoStrings::KeyF23,
                TermInfoStrings::KeyF24,
                TermInfoStrings::KeyF25,
                TermInfoStrings::KeyF26,
                TermInfoStrings::KeyF27,
                TermInfoStrings::KeyF28,
                TermInfoStrings::KeyF29,
                TermInfoStrings::KeyF30,
                TermInfoStrings::KeyF31,
                TermInfoStrings::KeyF32,
                TermInfoStrings::KeyF33,
                TermInfoStrings::KeyF34,
                TermInfoStrings::KeyF35,
                TermInfoStrings::KeyF36,
                TermInfoStrings::KeyF37,
                TermInfoStrings::KeyF38,
                TermInfoStrings::KeyF39,
                TermInfoStrings::KeyF40,
                TermInfoStrings::KeyF41,
                TermInfoStrings::KeyF42,
                TermInfoStrings::KeyF43,
                TermInfoStrings::KeyF44,
                TermInfoStrings::KeyF45,
                TermInfoStrings::KeyF46,
                TermInfoStrings::KeyF47,
                TermInfoStrings::KeyF48,
                TermInfoStrings::KeyF49,
                TermInfoStrings::KeyF50,
                TermInfoStrings::KeyF51,
                TermInfoStrings::KeyF52,
                TermInfoStrings::KeyF53,
                TermInfoStrings::KeyF54,
                TermInfoStrings::KeyF55,
                TermInfoStrings::KeyF56,
                TermInfoStrings::KeyF57,
                TermInfoStrings::KeyF58,
                TermInfoStrings::KeyF59,
                TermInfoStrings::KeyF60,
                TermInfoStrings::KeyF61,
                TermInfoStrings::KeyF62,
                TermInfoStrings::KeyF63,
                TermInfoStrings::ClrBol,
                TermInfoStrings::ClearMargins,
                TermInfoStrings::SetLeftMargin,
                TermInfoStrings::SetRightMargin,
                TermInfoStrings::LabelFormat,
                TermInfoStrings::SetClock,
                TermInfoStrings::DisplayClock,
                TermInfoStrings::RemoveClock,
                TermInfoStrings::CreateWindow,
                TermInfoStrings::GotoWindow,
                TermInfoStrings::Hangup,
                TermInfoStrings::DialPhone,
                TermInfoStrings::QuickDial,
                TermInfoStrings::Tone,
                TermInfoStrings::Pulse,
                TermInfoStrings::FlashHook,
                TermInfoStrings::FixedPause,
                TermInfoStrings::WaitTone,
                TermInfoStrings::User0,
                TermInfoStrings::User1,
                TermInfoStrings::User2,
                TermInfoStrings::User3,
                TermInfoStrings::User4,
                TermInfoStrings::User5,
                TermInfoStrings::User6,
                TermInfoStrings::User7,
                TermInfoStrings::User8,
                TermInfoStrings::User9,
                TermInfoStrings::OrigPair,
                TermInfoStrings::OrigColors,
                TermInfoStrings::InitializeColor,
                TermInfoStrings::InitializePair,
                TermInfoStrings::SetColorPair,
                TermInfoStrings::SetForeground,
                TermInfoStrings::SetBackground,
                TermInfoStrings::ChangeCharPitch,
                TermInfoStrings::ChangeLinePitch,
                TermInfoStrings::ChangeResHorz,
                TermInfoStrings::ChangeResVert,
                TermInfoStrings::DefineChar,
                TermInfoStrings::EnterDoublewideMode,
                TermInfoStrings::EnterDraftQuality,
                TermInfoStrings::EnterItalicsMode,
                TermInfoStrings::EnterLeftwardMode,
                TermInfoStrings::EnterMicroMode,
                TermInfoStrings::EnterNearLetterQuality,
                TermInfoStrings::EnterNormalQuality,
                TermInfoStrings::EnterShadowMode,
                TermInfoStrings::EnterSubscriptMode,
                TermInfoStrings::EnterSuperscriptMode,
                TermInfoStrings::EnterUpwardMode,
                TermInfoStrings::ExitDoublewideMode,
                TermInfoStrings::ExitItalicsMode,
                TermInfoStrings::ExitLeftwardMode,
                TermInfoStrings::ExitMicroMode,
                TermInfoStrings::ExitShadowMode,
                TermInfoStrings::ExitSubscriptMode,
                TermInfoStrings::ExitSuperscriptMode,
                TermInfoStrings::ExitUpwardMode,
                TermInfoStrings::MicroColumnAddress,
                TermInfoStrings::MicroDown,
                TermInfoStrings::MicroLeft,
                TermInfoStrings::MicroRight,
                TermInfoStrings::MicroRowAddress,
                TermInfoStrings::MicroUp,
                TermInfoStrings::OrderOfPins,
                TermInfoStrings::ParmDownMicro,
                TermInfoStrings::ParmLeftMicro,
                TermInfoStrings::ParmRightMicro,
                TermInfoStrings::ParmUpMicro,
                TermInfoStrings::SelectCharSet,
                TermInfoStrings::SetBottomMargin,
                TermInfoStrings::SetBottomMarginParm,
                TermInfoStrings::SetLeftMarginParm,
                TermInfoStrings::SetRightMarginParm,
                TermInfoStrings::SetTopMargin,
                TermInfoStrings::SetTopMarginParm,
                TermInfoStrings::StartBitImage,
                TermInfoStrings::StartCharSetDef,
                TermInfoStrings::StopBitImage,
                TermInfoStrings::StopCharSetDef,
                TermInfoStrings::SubscriptCharacters,
                TermInfoStrings::SuperscriptCharacters,
                TermInfoStrings::TheseCauseCr,
                TermInfoStrings::ZeroMotion,
                TermInfoStrings::CharSetNames,
                TermInfoStrings::KeyMouse,
                TermInfoStrings::MouseInfo,
                TermInfoStrings::ReqMousePos,
                TermInfoStrings::GetMouse,
                TermInfoStrings::SetAForeground,
                TermInfoStrings::SetABackground,
                TermInfoStrings::PkeyPlab,
                TermInfoStrings::DeviceType,
                TermInfoStrings::CodeSetInit,
                TermInfoStrings::Set0DesSeq,
                TermInfoStrings::Set1DesSeq,
                TermInfoStrings::Set2DesSeq,
                TermInfoStrings::Set3DesSeq,
                TermInfoStrings::SetLrMargin,
                TermInfoStrings::SetTbMargin,
                TermInfoStrings::BitImageRepeat,
                TermInfoStrings::BitImageNewline,
                TermInfoStrings::BitImageCarriageReturn,
                TermInfoStrings::ColorNames,
                TermInfoStrings::DefineBitImageRegion,
                TermInfoStrings::EndBitImageRegion,
                TermInfoStrings::SetColorBand,
                TermInfoStrings::SetPageLength,
                TermInfoStrings::DisplayPcChar,
                TermInfoStrings::EnterPcCharsetMode,
                TermInfoStrings::ExitPcCharsetMode,
                TermInfoStrings::EnterScancodeMode,
                TermInfoStrings::ExitScancodeMode,
                TermInfoStrings::PcTermOptions,
                TermInfoStrings::ScancodeEscape,
                TermInfoStrings::AltScancodeEsc,
                TermInfoStrings::EnterHorizontalHlMode,
                TermInfoStrings::EnterLeftHlMode,
                TermInfoStrings::EnterLowHlMode,
                TermInfoStrings::EnterRightHlMode,
                TermInfoStrings::EnterTopHlMode,
                TermInfoStrings::EnterVerticalHlMode,
                TermInfoStrings::SetAAttributes,
                TermInfoStrings::SetPglenInch,
                TermInfoStrings::Last,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("BackTab"),
                _T("Bell"),
                _T("CarriageReturn"),
                _T("ChangeScrollRegion"),
                _T("ClearAllTabs"),
                _T("ClearScreen"),
                _T("ClrEol"),
                _T("ClrEos"),
                _T("ColumnAddress"),
                _T("CommandCharacter"),
                _T("CursorAddress"),
                _T("CursorDown"),
                _T("CursorHome"),
                _T("CursorInvisible"),
                _T("CursorLeft"),
                _T("CursorMemAddress"),
                _T("CursorNormal"),
                _T("CursorRight"),
                _T("CursorToLl"),
                _T("CursorUp"),
                _T("CursorVisible"),
                _T("DeleteCharacter"),
                _T("DeleteLine"),
                _T("DisStatusLine"),
                _T("DownHalfLine"),
                _T("EnterAltCharsetMode"),
                _T("EnterBlinkMode"),
                _T("EnterBoldMode"),
                _T("EnterCaMode"),
                _T("EnterDeleteMode"),
                _T("EnterDimMode"),
                _T("EnterInsertMode"),
                _T("EnterSecureMode"),
                _T("EnterProtectedMode"),
                _T("EnterReverseMode"),
                _T("EnterStandoutMode"),
                _T("EnterUnderlineMode"),
                _T("EraseChars"),
                _T("ExitAltCharsetMode"),
                _T("ExitAttributeMode"),
                _T("ExitCaMode"),
                _T("ExitDeleteMode"),
                _T("ExitInsertMode"),
                _T("ExitStandoutMode"),
                _T("ExitUnderlineMode"),
                _T("FlashScreen"),
                _T("FormFeed"),
                _T("FromStatusLine"),
                _T("Init1string"),
                _T("Init2string"),
                _T("Init3string"),
                _T("InitFile"),
                _T("InsertCharacter"),
                _T("InsertLine"),
                _T("InsertPadding"),
                _T("KeyBackspace"),
                _T("KeyCatab"),
                _T("KeyClear"),
                _T("KeyCtab"),
                _T("KeyDc"),
                _T("KeyDl"),
                _T("KeyDown"),
                _T("KeyEic"),
                _T("KeyEol"),
                _T("KeyEos"),
                _T("KeyF0"),
                _T("KeyF1"),
                _T("KeyF10"),
                _T("KeyF2"),
                _T("KeyF3"),
                _T("KeyF4"),
                _T("KeyF5"),
                _T("KeyF6"),
                _T("KeyF7"),
                _T("KeyF8"),
                _T("KeyF9"),
                _T("KeyHome"),
                _T("KeyIc"),
                _T("KeyIl"),
                _T("KeyLeft"),
                _T("KeyLl"),
                _T("KeyNpage"),
                _T("KeyPpage"),
                _T("KeyRight"),
                _T("KeySf"),
                _T("KeySr"),
                _T("KeyStab"),
                _T("KeyUp"),
                _T("KeypadLocal"),
                _T("KeypadXmit"),
                _T("LabF0"),
                _T("LabF1"),
                _T("LabF10"),
                _T("LabF2"),
                _T("LabF3"),
                _T("LabF4"),
                _T("LabF5"),
                _T("LabF6"),
                _T("LabF7"),
                _T("LabF8"),
                _T("LabF9"),
                _T("MetaOff"),
                _T("MetaOn"),
                _T("Newline"),
                _T("PadChar"),
                _T("ParmDch"),
                _T("ParmDeleteLine"),
                _T("ParmDownCursor"),
                _T("ParmIch"),
                _T("ParmIndex"),
                _T("ParmInsertLine"),
                _T("ParmLeftCursor"),
                _T("ParmRightCursor"),
                _T("ParmRindex"),
                _T("ParmUpCursor"),
                _T("PkeyKey"),
                _T("PkeyLocal"),
                _T("PkeyXmit"),
                _T("PrintScreen"),
                _T("PrtrOff"),
                _T("PrtrOn"),
                _T("RepeatChar"),
                _T("Reset1string"),
                _T("Reset2string"),
                _T("Reset3string"),
                _T("ResetFile"),
                _T("RestoreCursor"),
                _T("RowAddress"),
                _T("SaveCursor"),
                _T("ScrollForward"),
                _T("ScrollReverse"),
                _T("SetAttributes"),
                _T("SetTab"),
                _T("SetWindow"),
                _T("Tab"),
                _T("ToStatusLine"),
                _T("UnderlineChar"),
                _T("UpHalfLine"),
                _T("InitProg"),
                _T("KeyA1"),
                _T("KeyA3"),
                _T("KeyB2"),
                _T("KeyC1"),
                _T("KeyC3"),
                _T("PrtrNon"),
                _T("CharPadding"),
                _T("AcsChars"),
                _T("PlabNorm"),
                _T("KeyBtab"),
                _T("EnterXonMode"),
                _T("ExitXonMode"),
                _T("EnterAmMode"),
                _T("ExitAmMode"),
                _T("XonCharacter"),
                _T("XoffCharacter"),
                _T("EnaAcs"),
                _T("LabelOn"),
                _T("LabelOff"),
                _T("KeyBeg"),
                _T("KeyCancel"),
                _T("KeyClose"),
                _T("KeyCommand"),
                _T("KeyCopy"),
                _T("KeyCreate"),
                _T("KeyEnd"),
                _T("KeyEnter"),
                _T("KeyExit"),
                _T("KeyFind"),
                _T("KeyHelp"),
                _T("KeyMark"),
                _T("KeyMessage"),
                _T("KeyMove"),
                _T("KeyNext"),
                _T("KeyOpen"),
                _T("KeyOptions"),
                _T("KeyPrevious"),
                _T("KeyPrint"),
                _T("KeyRedo"),
                _T("KeyReference"),
                _T("KeyRefresh"),
                _T("KeyReplace"),
                _T("KeyRestart"),
                _T("KeyResume"),
                _T("KeySave"),
                _T("KeySuspend"),
                _T("KeyUndo"),
                _T("KeySbeg"),
                _T("KeyScancel"),
                _T("KeyScommand"),
                _T("KeyScopy"),
                _T("KeyScreate"),
                _T("KeySdc"),
                _T("KeySdl"),
                _T("KeySelect"),
                _T("KeySend"),
                _T("KeySeol"),
                _T("KeySexit"),
                _T("KeySfind"),
                _T("KeyShelp"),
                _T("KeyShome"),
                _T("KeySic"),
                _T("KeySleft"),
                _T("KeySmessage"),
                _T("KeySmove"),
                _T("KeySnext"),
                _T("KeySoptions"),
                _T("KeySprevious"),
                _T("KeySprint"),
                _T("KeySredo"),
                _T("KeySreplace"),
                _T("KeySright"),
                _T("KeySrsume"),
                _T("KeySsave"),
                _T("KeySsuspend"),
                _T("KeySundo"),
                _T("ReqForInput"),
                _T("KeyF11"),
                _T("KeyF12"),
                _T("KeyF13"),
                _T("KeyF14"),
                _T("KeyF15"),
                _T("KeyF16"),
                _T("KeyF17"),
                _T("KeyF18"),
                _T("KeyF19"),
                _T("KeyF20"),
                _T("KeyF21"),
                _T("KeyF22"),
                _T("KeyF23"),
                _T("KeyF24"),
                _T("KeyF25"),
                _T("KeyF26"),
                _T("KeyF27"),
                _T("KeyF28"),
                _T("KeyF29"),
                _T("KeyF30"),
                _T("KeyF31"),
                _T("KeyF32"),
                _T("KeyF33"),
                _T("KeyF34"),
                _T("KeyF35"),
                _T("KeyF36"),
                _T("KeyF37"),
                _T("KeyF38"),
                _T("KeyF39"),
                _T("KeyF40"),
                _T("KeyF41"),
                _T("KeyF42"),
                _T("KeyF43"),
                _T("KeyF44"),
                _T("KeyF45"),
                _T("KeyF46"),
                _T("KeyF47"),
                _T("KeyF48"),
                _T("KeyF49"),
                _T("KeyF50"),
                _T("KeyF51"),
                _T("KeyF52"),
                _T("KeyF53"),
                _T("KeyF54"),
                _T("KeyF55"),
                _T("KeyF56"),
                _T("KeyF57"),
                _T("KeyF58"),
                _T("KeyF59"),
                _T("KeyF60"),
                _T("KeyF61"),
                _T("KeyF62"),
                _T("KeyF63"),
                _T("ClrBol"),
                _T("ClearMargins"),
                _T("SetLeftMargin"),
                _T("SetRightMargin"),
                _T("LabelFormat"),
                _T("SetClock"),
                _T("DisplayClock"),
                _T("RemoveClock"),
                _T("CreateWindow"),
                _T("GotoWindow"),
                _T("Hangup"),
                _T("DialPhone"),
                _T("QuickDial"),
                _T("Tone"),
                _T("Pulse"),
                _T("FlashHook"),
                _T("FixedPause"),
                _T("WaitTone"),
                _T("User0"),
                _T("User1"),
                _T("User2"),
                _T("User3"),
                _T("User4"),
                _T("User5"),
                _T("User6"),
                _T("User7"),
                _T("User8"),
                _T("User9"),
                _T("OrigPair"),
                _T("OrigColors"),
                _T("InitializeColor"),
                _T("InitializePair"),
                _T("SetColorPair"),
                _T("SetForeground"),
                _T("SetBackground"),
                _T("ChangeCharPitch"),
                _T("ChangeLinePitch"),
                _T("ChangeResHorz"),
                _T("ChangeResVert"),
                _T("DefineChar"),
                _T("EnterDoublewideMode"),
                _T("EnterDraftQuality"),
                _T("EnterItalicsMode"),
                _T("EnterLeftwardMode"),
                _T("EnterMicroMode"),
                _T("EnterNearLetterQuality"),
                _T("EnterNormalQuality"),
                _T("EnterShadowMode"),
                _T("EnterSubscriptMode"),
                _T("EnterSuperscriptMode"),
                _T("EnterUpwardMode"),
                _T("ExitDoublewideMode"),
                _T("ExitItalicsMode"),
                _T("ExitLeftwardMode"),
                _T("ExitMicroMode"),
                _T("ExitShadowMode"),
                _T("ExitSubscriptMode"),
                _T("ExitSuperscriptMode"),
                _T("ExitUpwardMode"),
                _T("MicroColumnAddress"),
                _T("MicroDown"),
                _T("MicroLeft"),
                _T("MicroRight"),
                _T("MicroRowAddress"),
                _T("MicroUp"),
                _T("OrderOfPins"),
                _T("ParmDownMicro"),
                _T("ParmLeftMicro"),
                _T("ParmRightMicro"),
                _T("ParmUpMicro"),
                _T("SelectCharSet"),
                _T("SetBottomMargin"),
                _T("SetBottomMarginParm"),
                _T("SetLeftMarginParm"),
                _T("SetRightMarginParm"),
                _T("SetTopMargin"),
                _T("SetTopMarginParm"),
                _T("StartBitImage"),
                _T("StartCharSetDef"),
                _T("StopBitImage"),
                _T("StopCharSetDef"),
                _T("SubscriptCharacters"),
                _T("SuperscriptCharacters"),
                _T("TheseCauseCr"),
                _T("ZeroMotion"),
                _T("CharSetNames"),
                _T("KeyMouse"),
                _T("MouseInfo"),
                _T("ReqMousePos"),
                _T("GetMouse"),
                _T("SetAForeground"),
                _T("SetABackground"),
                _T("PkeyPlab"),
                _T("DeviceType"),
                _T("CodeSetInit"),
                _T("Set0DesSeq"),
                _T("Set1DesSeq"),
                _T("Set2DesSeq"),
                _T("Set3DesSeq"),
                _T("SetLrMargin"),
                _T("SetTbMargin"),
                _T("BitImageRepeat"),
                _T("BitImageNewline"),
                _T("BitImageCarriageReturn"),
                _T("ColorNames"),
                _T("DefineBitImageRegion"),
                _T("EndBitImageRegion"),
                _T("SetColorBand"),
                _T("SetPageLength"),
                _T("DisplayPcChar"),
                _T("EnterPcCharsetMode"),
                _T("ExitPcCharsetMode"),
                _T("EnterScancodeMode"),
                _T("ExitScancodeMode"),
                _T("PcTermOptions"),
                _T("ScancodeEscape"),
                _T("AltScancodeEsc"),
                _T("EnterHorizontalHlMode"),
                _T("EnterLeftHlMode"),
                _T("EnterLowHlMode"),
                _T("EnterRightHlMode"),
                _T("EnterTopHlMode"),
                _T("EnterVerticalHlMode"),
                _T("SetAAttributes"),
                _T("SetPglenInch"),
                _T("Last"),
            };
            return res;
        }
    };
    
    
    enum class ParseError
    {
        None = 0,
        Format3 = 1,
        Overflow = 2,
    };
    
    struct ParseError_Impl : public cli::enumeration<ParseError>
    {
        ParseError_Impl(const ParseError& val) : cli::enumeration<ParseError>(val) { }
        operator ParseError() { return value; }
        
        virtual const std::vector<ParseError>& GetValues() const override
        {
            static std::vector<ParseError> res =
            {
                ParseError::None,
                ParseError::Format3,
                ParseError::Overflow,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Format3"),
                _T("Overflow"),
            };
            return res;
        }
    };
    
    
    enum class FormatElementType
    {
        Days = 0,
        Hours = 1,
        Minutes = 2,
        Seconds = 3,
        Ticks = 4,
        TicksUppercase = 5,
        Literal = 6,
        EscapedChar = 7,
        Error = 8,
        End = 9,
    };
    
    struct FormatElementType_Impl : public cli::enumeration<FormatElementType>
    {
        FormatElementType_Impl(const FormatElementType& val) : cli::enumeration<FormatElementType>(val) { }
        operator FormatElementType() { return value; }
        
        virtual const std::vector<FormatElementType>& GetValues() const override
        {
            static std::vector<FormatElementType> res =
            {
                FormatElementType::Days,
                FormatElementType::Hours,
                FormatElementType::Minutes,
                FormatElementType::Seconds,
                FormatElementType::Ticks,
                FormatElementType::TicksUppercase,
                FormatElementType::Literal,
                FormatElementType::EscapedChar,
                FormatElementType::Error,
                FormatElementType::End,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Days"),
                _T("Hours"),
                _T("Minutes"),
                _T("Seconds"),
                _T("Ticks"),
                _T("TicksUppercase"),
                _T("Literal"),
                _T("EscapedChar"),
                _T("Error"),
                _T("End"),
            };
            return res;
        }
    };
    
    
    enum class TimeZoneData
    {
        DaylightSavingStartIdx = 0,
        DaylightSavingEndIdx = 1,
        UtcOffsetIdx = 2,
        AdditionalDaylightOffsetIdx = 3,
    };
    
    struct TimeZoneData_Impl : public cli::enumeration<TimeZoneData>
    {
        TimeZoneData_Impl(const TimeZoneData& val) : cli::enumeration<TimeZoneData>(val) { }
        operator TimeZoneData() { return value; }
        
        virtual const std::vector<TimeZoneData>& GetValues() const override
        {
            static std::vector<TimeZoneData> res =
            {
                TimeZoneData::DaylightSavingStartIdx,
                TimeZoneData::DaylightSavingEndIdx,
                TimeZoneData::UtcOffsetIdx,
                TimeZoneData::AdditionalDaylightOffsetIdx,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DaylightSavingStartIdx"),
                _T("DaylightSavingEndIdx"),
                _T("UtcOffsetIdx"),
                _T("AdditionalDaylightOffsetIdx"),
            };
            return res;
        }
    };
    
    
    enum class TimeZoneNames
    {
        StandardNameIdx = 0,
        DaylightNameIdx = 1,
    };
    
    struct TimeZoneNames_Impl : public cli::enumeration<TimeZoneNames>
    {
        TimeZoneNames_Impl(const TimeZoneNames& val) : cli::enumeration<TimeZoneNames>(val) { }
        operator TimeZoneNames() { return value; }
        
        virtual const std::vector<TimeZoneNames>& GetValues() const override
        {
            static std::vector<TimeZoneNames> res =
            {
                TimeZoneNames::StandardNameIdx,
                TimeZoneNames::DaylightNameIdx,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("StandardNameIdx"),
                _T("DaylightNameIdx"),
            };
            return res;
        }
    };
    
    
    enum class TypeCode
    {
        Empty = 0,
        Object2 = 1,
        DBNull2 = 2,
        Boolean2 = 3,
        Char2 = 4,
        SByte2 = 5,
        Byte2 = 6,
        Int162 = 7,
        UInt162 = 8,
        Int322 = 9,
        UInt322 = 10,
        Int642 = 11,
        UInt642 = 12,
        Single2 = 13,
        Double2 = 14,
        Decimal2 = 15,
        DateTime2 = 16,
        String2 = 18,
    };
    
    struct TypeCode_Impl : public cli::enumeration<TypeCode>
    {
        TypeCode_Impl(const TypeCode& val) : cli::enumeration<TypeCode>(val) { }
        operator TypeCode() { return value; }
        
        virtual const std::vector<TypeCode>& GetValues() const override
        {
            static std::vector<TypeCode> res =
            {
                TypeCode::Empty,
                TypeCode::Object2,
                TypeCode::DBNull2,
                TypeCode::Boolean2,
                TypeCode::Char2,
                TypeCode::SByte2,
                TypeCode::Byte2,
                TypeCode::Int162,
                TypeCode::UInt162,
                TypeCode::Int322,
                TypeCode::UInt322,
                TypeCode::Int642,
                TypeCode::UInt642,
                TypeCode::Single2,
                TypeCode::Double2,
                TypeCode::Decimal2,
                TypeCode::DateTime2,
                TypeCode::String2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Empty"),
                _T("Object2"),
                _T("DBNull2"),
                _T("Boolean2"),
                _T("Char2"),
                _T("SByte2"),
                _T("Byte2"),
                _T("Int162"),
                _T("UInt162"),
                _T("Int322"),
                _T("UInt322"),
                _T("Int642"),
                _T("UInt642"),
                _T("Single2"),
                _T("Double2"),
                _T("Decimal2"),
                _T("DateTime2"),
                _T("String2"),
            };
            return res;
        }
    };
    
    
    enum class UnityType
    {
        DBNull2 = 2,
        Type2 = 4,
        Module2 = 5,
        Assembly2 = 6,
    };
    
    struct UnityType_Impl : public cli::enumeration<UnityType>
    {
        UnityType_Impl(const UnityType& val) : cli::enumeration<UnityType>(val) { }
        operator UnityType() { return value; }
        
        virtual const std::vector<UnityType>& GetValues() const override
        {
            static std::vector<UnityType> res =
            {
                UnityType::DBNull2,
                UnityType::Type2,
                UnityType::Module2,
                UnityType::Assembly2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DBNull2"),
                _T("Type2"),
                _T("Module2"),
                _T("Assembly2"),
            };
            return res;
        }
    };
    
    
    enum class Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    };
    
    struct Handles_Impl : public cli::enumeration<Handles>
    {
        Handles_Impl(const Handles& val) : cli::enumeration<Handles>(val) { }
        operator Handles() { return value; }
        
        virtual const std::vector<Handles>& GetValues() const override
        {
            static std::vector<Handles> res =
            {
                Handles::STD_INPUT,
                Handles::STD_OUTPUT,
                Handles::STD_ERROR,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("STD_INPUT"),
                _T("STD_OUTPUT"),
                _T("STD_ERROR"),
            };
            return res;
        }
    };
    
}
namespace System { namespace Collections {
    
    enum class EnumeratorMode
    {
        KEY_MODE = 0,
        VALUE_MODE = 1,
        ENTRY_MODE = 2,
    };
    
    struct EnumeratorMode_Impl : public cli::enumeration<EnumeratorMode>
    {
        EnumeratorMode_Impl(const EnumeratorMode& val) : cli::enumeration<EnumeratorMode>(val) { }
        operator EnumeratorMode() { return value; }
        
        virtual const std::vector<EnumeratorMode>& GetValues() const override
        {
            static std::vector<EnumeratorMode> res =
            {
                EnumeratorMode::KEY_MODE,
                EnumeratorMode::VALUE_MODE,
                EnumeratorMode::ENTRY_MODE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("KEY_MODE"),
                _T("VALUE_MODE"),
                _T("ENTRY_MODE"),
            };
            return res;
        }
    };
    
    
    enum class EnumeratorMode2
    {
        KEY_MODE = 0,
        VALUE_MODE = 1,
        ENTRY_MODE = 2,
    };
    
    struct EnumeratorMode2_Impl : public cli::enumeration<EnumeratorMode2>
    {
        EnumeratorMode2_Impl(const EnumeratorMode2& val) : cli::enumeration<EnumeratorMode2>(val) { }
        operator EnumeratorMode2() { return value; }
        
        virtual const std::vector<EnumeratorMode2>& GetValues() const override
        {
            static std::vector<EnumeratorMode2> res =
            {
                EnumeratorMode2::KEY_MODE,
                EnumeratorMode2::VALUE_MODE,
                EnumeratorMode2::ENTRY_MODE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("KEY_MODE"),
                _T("VALUE_MODE"),
                _T("ENTRY_MODE"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Configuration { namespace Assemblies {
    
    enum class AssemblyHashAlgorithm
    {
        None = 0,
        MD52 = 32771,
        SHA12 = 32772,
    };
    
    struct AssemblyHashAlgorithm_Impl : public cli::enumeration<AssemblyHashAlgorithm>
    {
        AssemblyHashAlgorithm_Impl(const AssemblyHashAlgorithm& val) : cli::enumeration<AssemblyHashAlgorithm>(val) { }
        operator AssemblyHashAlgorithm() { return value; }
        
        virtual const std::vector<AssemblyHashAlgorithm>& GetValues() const override
        {
            static std::vector<AssemblyHashAlgorithm> res =
            {
                AssemblyHashAlgorithm::None,
                AssemblyHashAlgorithm::MD52,
                AssemblyHashAlgorithm::SHA12,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("MD52"),
                _T("SHA12"),
            };
            return res;
        }
    };
    
    
    enum class AssemblyVersionCompatibility
    {
        SameMachine = 1,
        SameProcess = 2,
        SameDomain = 3,
    };
    
    struct AssemblyVersionCompatibility_Impl : public cli::enumeration<AssemblyVersionCompatibility>
    {
        AssemblyVersionCompatibility_Impl(const AssemblyVersionCompatibility& val) : cli::enumeration<AssemblyVersionCompatibility>(val) { }
        operator AssemblyVersionCompatibility() { return value; }
        
        virtual const std::vector<AssemblyVersionCompatibility>& GetValues() const override
        {
            static std::vector<AssemblyVersionCompatibility> res =
            {
                AssemblyVersionCompatibility::SameMachine,
                AssemblyVersionCompatibility::SameProcess,
                AssemblyVersionCompatibility::SameDomain,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SameMachine"),
                _T("SameProcess"),
                _T("SameDomain"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Diagnostics {
    
    enum class DebuggingModes
    {
        None = 0,
        Default2 = 1,
        IgnoreSymbolStoreSequencePoints = 2,
        EnableEditAndContinue = 4,
        DisableOptimizations = 256,
    };
    
    struct DebuggingModes_Impl : public cli::enumeration<DebuggingModes>
    {
        DebuggingModes_Impl(const DebuggingModes& val) : cli::enumeration<DebuggingModes>(val) { }
        operator DebuggingModes() { return value; }
        
        virtual const std::vector<DebuggingModes>& GetValues() const override
        {
            static std::vector<DebuggingModes> res =
            {
                DebuggingModes::None,
                DebuggingModes::Default2,
                DebuggingModes::IgnoreSymbolStoreSequencePoints,
                DebuggingModes::EnableEditAndContinue,
                DebuggingModes::DisableOptimizations,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Default2"),
                _T("IgnoreSymbolStoreSequencePoints"),
                _T("EnableEditAndContinue"),
                _T("DisableOptimizations"),
            };
            return res;
        }
    };
    
    
    enum class DebuggerBrowsableState
    {
        Never = 0,
        Collapsed = 2,
        RootHidden = 3,
    };
    
    struct DebuggerBrowsableState_Impl : public cli::enumeration<DebuggerBrowsableState>
    {
        DebuggerBrowsableState_Impl(const DebuggerBrowsableState& val) : cli::enumeration<DebuggerBrowsableState>(val) { }
        operator DebuggerBrowsableState() { return value; }
        
        virtual const std::vector<DebuggerBrowsableState>& GetValues() const override
        {
            static std::vector<DebuggerBrowsableState> res =
            {
                DebuggerBrowsableState::Never,
                DebuggerBrowsableState::Collapsed,
                DebuggerBrowsableState::RootHidden,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Never"),
                _T("Collapsed"),
                _T("RootHidden"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Diagnostics { namespace Contracts {
    
    enum class ContractFailureKind
    {
        Precondition = 0,
        Postcondition = 1,
        PostconditionOnException = 2,
        Invariant = 3,
        Assert = 4,
        Assume = 5,
    };
    
    struct ContractFailureKind_Impl : public cli::enumeration<ContractFailureKind>
    {
        ContractFailureKind_Impl(const ContractFailureKind& val) : cli::enumeration<ContractFailureKind>(val) { }
        operator ContractFailureKind() { return value; }
        
        virtual const std::vector<ContractFailureKind>& GetValues() const override
        {
            static std::vector<ContractFailureKind> res =
            {
                ContractFailureKind::Precondition,
                ContractFailureKind::Postcondition,
                ContractFailureKind::PostconditionOnException,
                ContractFailureKind::Invariant,
                ContractFailureKind::Assert,
                ContractFailureKind::Assume,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Precondition"),
                _T("Postcondition"),
                _T("PostconditionOnException"),
                _T("Invariant"),
                _T("Assert"),
                _T("Assume"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Diagnostics { namespace SymbolStore {
    
    enum class SymAddressKind
    {
        ILOffset = 1,
        NativeRVA = 2,
        NativeRegister = 3,
        NativeRegisterRelative = 4,
        NativeOffset = 5,
        NativeRegisterRegister = 6,
        NativeRegisterStack = 7,
        NativeStackRegister = 8,
        BitField = 9,
        NativeSectionOffset = 10,
    };
    
    struct SymAddressKind_Impl : public cli::enumeration<SymAddressKind>
    {
        SymAddressKind_Impl(const SymAddressKind& val) : cli::enumeration<SymAddressKind>(val) { }
        operator SymAddressKind() { return value; }
        
        virtual const std::vector<SymAddressKind>& GetValues() const override
        {
            static std::vector<SymAddressKind> res =
            {
                SymAddressKind::ILOffset,
                SymAddressKind::NativeRVA,
                SymAddressKind::NativeRegister,
                SymAddressKind::NativeRegisterRelative,
                SymAddressKind::NativeOffset,
                SymAddressKind::NativeRegisterRegister,
                SymAddressKind::NativeRegisterStack,
                SymAddressKind::NativeStackRegister,
                SymAddressKind::BitField,
                SymAddressKind::NativeSectionOffset,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ILOffset"),
                _T("NativeRVA"),
                _T("NativeRegister"),
                _T("NativeRegisterRelative"),
                _T("NativeOffset"),
                _T("NativeRegisterRegister"),
                _T("NativeRegisterStack"),
                _T("NativeStackRegister"),
                _T("BitField"),
                _T("NativeSectionOffset"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Globalization {
    
    enum class CalendarAlgorithmType
    {
        Unknown = 0,
        SolarCalendar = 1,
        LunarCalendar = 2,
        LunisolarCalendar = 3,
    };
    
    struct CalendarAlgorithmType_Impl : public cli::enumeration<CalendarAlgorithmType>
    {
        CalendarAlgorithmType_Impl(const CalendarAlgorithmType& val) : cli::enumeration<CalendarAlgorithmType>(val) { }
        operator CalendarAlgorithmType() { return value; }
        
        virtual const std::vector<CalendarAlgorithmType>& GetValues() const override
        {
            static std::vector<CalendarAlgorithmType> res =
            {
                CalendarAlgorithmType::Unknown,
                CalendarAlgorithmType::SolarCalendar,
                CalendarAlgorithmType::LunarCalendar,
                CalendarAlgorithmType::LunisolarCalendar,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unknown"),
                _T("SolarCalendar"),
                _T("LunarCalendar"),
                _T("LunisolarCalendar"),
            };
            return res;
        }
    };
    
    
    enum class CalendarWeekRule
    {
        FirstDay = 0,
        FirstFullWeek = 1,
        FirstFourDayWeek = 2,
    };
    
    struct CalendarWeekRule_Impl : public cli::enumeration<CalendarWeekRule>
    {
        CalendarWeekRule_Impl(const CalendarWeekRule& val) : cli::enumeration<CalendarWeekRule>(val) { }
        operator CalendarWeekRule() { return value; }
        
        virtual const std::vector<CalendarWeekRule>& GetValues() const override
        {
            static std::vector<CalendarWeekRule> res =
            {
                CalendarWeekRule::FirstDay,
                CalendarWeekRule::FirstFullWeek,
                CalendarWeekRule::FirstFourDayWeek,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FirstDay"),
                _T("FirstFullWeek"),
                _T("FirstFourDayWeek"),
            };
            return res;
        }
    };
    
    
    enum class Month
    {
        january = 1,
        february = 2,
        march = 3,
        april = 4,
        may = 5,
        june = 6,
        july = 7,
        august = 8,
        september = 9,
        october = 10,
        november = 11,
        december = 12,
    };
    
    struct Month_Impl : public cli::enumeration<Month>
    {
        Month_Impl(const Month& val) : cli::enumeration<Month>(val) { }
        operator Month() { return value; }
        
        virtual const std::vector<Month>& GetValues() const override
        {
            static std::vector<Month> res =
            {
                Month::january,
                Month::february,
                Month::march,
                Month::april,
                Month::may,
                Month::june,
                Month::july,
                Month::august,
                Month::september,
                Month::october,
                Month::november,
                Month::december,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("january"),
                _T("february"),
                _T("march"),
                _T("april"),
                _T("may"),
                _T("june"),
                _T("july"),
                _T("august"),
                _T("september"),
                _T("october"),
                _T("november"),
                _T("december"),
            };
            return res;
        }
    };
    
    
    enum class Month2
    {
        january = 1,
        february = 2,
        march = 3,
        april = 4,
        may = 5,
        june = 6,
        july = 7,
        august = 8,
        september = 9,
        october = 10,
        november = 11,
        december = 12,
    };
    
    struct Month2_Impl : public cli::enumeration<Month2>
    {
        Month2_Impl(const Month2& val) : cli::enumeration<Month2>(val) { }
        operator Month2() { return value; }
        
        virtual const std::vector<Month2>& GetValues() const override
        {
            static std::vector<Month2> res =
            {
                Month2::january,
                Month2::february,
                Month2::march,
                Month2::april,
                Month2::may,
                Month2::june,
                Month2::july,
                Month2::august,
                Month2::september,
                Month2::october,
                Month2::november,
                Month2::december,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("january"),
                _T("february"),
                _T("march"),
                _T("april"),
                _T("may"),
                _T("june"),
                _T("july"),
                _T("august"),
                _T("september"),
                _T("october"),
                _T("november"),
                _T("december"),
            };
            return res;
        }
    };
    
    
    enum class Month3
    {
        nisan = 1,
        iyyar = 2,
        sivan = 3,
        tammuz = 4,
        av = 5,
        elul = 6,
        tishri = 7,
        heshvan = 8,
        kislev = 9,
        teveth = 10,
        shevat = 11,
        adar = 12,
        adar_I = 12,
        adar_II = 13,
    };
    
    struct Month3_Impl : public cli::enumeration<Month3>
    {
        Month3_Impl(const Month3& val) : cli::enumeration<Month3>(val) { }
        operator Month3() { return value; }
        
        virtual const std::vector<Month3>& GetValues() const override
        {
            static std::vector<Month3> res =
            {
                Month3::nisan,
                Month3::iyyar,
                Month3::sivan,
                Month3::tammuz,
                Month3::av,
                Month3::elul,
                Month3::tishri,
                Month3::heshvan,
                Month3::kislev,
                Month3::teveth,
                Month3::shevat,
                Month3::adar,
                Month3::adar_I,
                Month3::adar_II,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("nisan"),
                _T("iyyar"),
                _T("sivan"),
                _T("tammuz"),
                _T("av"),
                _T("elul"),
                _T("tishri"),
                _T("heshvan"),
                _T("kislev"),
                _T("teveth"),
                _T("shevat"),
                _T("adar"),
                _T("adar_I"),
                _T("adar_II"),
            };
            return res;
        }
    };
    
    
    enum class Month4
    {
        muharram = 1,
        safar = 2,
        rabi_I = 3,
        rabi_II = 4,
        jumada_I = 5,
        jumada_II = 6,
        rajab = 7,
        shaban = 8,
        ramadan = 9,
        shawwal = 10,
        dhu_al_quada = 11,
        dhu_al_hijja = 12,
    };
    
    struct Month4_Impl : public cli::enumeration<Month4>
    {
        Month4_Impl(const Month4& val) : cli::enumeration<Month4>(val) { }
        operator Month4() { return value; }
        
        virtual const std::vector<Month4>& GetValues() const override
        {
            static std::vector<Month4> res =
            {
                Month4::muharram,
                Month4::safar,
                Month4::rabi_I,
                Month4::rabi_II,
                Month4::jumada_I,
                Month4::jumada_II,
                Month4::rajab,
                Month4::shaban,
                Month4::ramadan,
                Month4::shawwal,
                Month4::dhu_al_quada,
                Month4::dhu_al_hijja,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("muharram"),
                _T("safar"),
                _T("rabi_I"),
                _T("rabi_II"),
                _T("jumada_I"),
                _T("jumada_II"),
                _T("rajab"),
                _T("shaban"),
                _T("ramadan"),
                _T("shawwal"),
                _T("dhu_al_quada"),
                _T("dhu_al_hijja"),
            };
            return res;
        }
    };
    
    
    enum class CompareOptions
    {
        None = 0,
        IgnoreCase = 1,
        IgnoreNonSpace = 2,
        IgnoreSymbols = 4,
        IgnoreKanaType = 8,
        IgnoreWidth = 16,
        StringSort = 536870912,
        Ordinal = 1073741824,
        OrdinalIgnoreCase = 268435456,
    };
    
    struct CompareOptions_Impl : public cli::enumeration<CompareOptions>
    {
        CompareOptions_Impl(const CompareOptions& val) : cli::enumeration<CompareOptions>(val) { }
        operator CompareOptions() { return value; }
        
        virtual const std::vector<CompareOptions>& GetValues() const override
        {
            static std::vector<CompareOptions> res =
            {
                CompareOptions::None,
                CompareOptions::IgnoreCase,
                CompareOptions::IgnoreNonSpace,
                CompareOptions::IgnoreSymbols,
                CompareOptions::IgnoreKanaType,
                CompareOptions::IgnoreWidth,
                CompareOptions::StringSort,
                CompareOptions::Ordinal,
                CompareOptions::OrdinalIgnoreCase,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("IgnoreCase"),
                _T("IgnoreNonSpace"),
                _T("IgnoreSymbols"),
                _T("IgnoreKanaType"),
                _T("IgnoreWidth"),
                _T("StringSort"),
                _T("Ordinal"),
                _T("OrdinalIgnoreCase"),
            };
            return res;
        }
    };
    
    
    enum class CultureTypes
    {
        NeutralCultures = 1,
        SpecificCultures = 2,
        InstalledWin32Cultures = 4,
        AllCultures = 7,
        UserCustomCulture = 8,
        ReplacementCultures = 16,
        WindowsOnlyCultures = 32,
        FrameworkCultures = 64,
    };
    
    struct CultureTypes_Impl : public cli::enumeration<CultureTypes>
    {
        CultureTypes_Impl(const CultureTypes& val) : cli::enumeration<CultureTypes>(val) { }
        operator CultureTypes() { return value; }
        
        virtual const std::vector<CultureTypes>& GetValues() const override
        {
            static std::vector<CultureTypes> res =
            {
                CultureTypes::NeutralCultures,
                CultureTypes::SpecificCultures,
                CultureTypes::InstalledWin32Cultures,
                CultureTypes::AllCultures,
                CultureTypes::UserCustomCulture,
                CultureTypes::ReplacementCultures,
                CultureTypes::WindowsOnlyCultures,
                CultureTypes::FrameworkCultures,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NeutralCultures"),
                _T("SpecificCultures"),
                _T("InstalledWin32Cultures"),
                _T("AllCultures"),
                _T("UserCustomCulture"),
                _T("ReplacementCultures"),
                _T("WindowsOnlyCultures"),
                _T("FrameworkCultures"),
            };
            return res;
        }
    };
    
    
    enum class DateTimeFormatFlags
    {
        Unused = 0,
        But = 1,
        Serialized = 2,
        By = 3,
        Microsoft = 4,
    };
    
    struct DateTimeFormatFlags_Impl : public cli::enumeration<DateTimeFormatFlags>
    {
        DateTimeFormatFlags_Impl(const DateTimeFormatFlags& val) : cli::enumeration<DateTimeFormatFlags>(val) { }
        operator DateTimeFormatFlags() { return value; }
        
        virtual const std::vector<DateTimeFormatFlags>& GetValues() const override
        {
            static std::vector<DateTimeFormatFlags> res =
            {
                DateTimeFormatFlags::Unused,
                DateTimeFormatFlags::But,
                DateTimeFormatFlags::Serialized,
                DateTimeFormatFlags::By,
                DateTimeFormatFlags::Microsoft,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unused"),
                _T("But"),
                _T("Serialized"),
                _T("By"),
                _T("Microsoft"),
            };
            return res;
        }
    };
    
    
    enum class DateTimeStyles
    {
        None = 0,
        AllowLeadingWhite = 1,
        AllowTrailingWhite = 2,
        AllowInnerWhite = 4,
        AllowWhiteSpaces = 7,
        NoCurrentDateDefault = 8,
        AdjustToUniversal = 16,
        AssumeLocal = 32,
        AssumeUniversal = 64,
        RoundtripKind = 128,
    };
    
    struct DateTimeStyles_Impl : public cli::enumeration<DateTimeStyles>
    {
        DateTimeStyles_Impl(const DateTimeStyles& val) : cli::enumeration<DateTimeStyles>(val) { }
        operator DateTimeStyles() { return value; }
        
        virtual const std::vector<DateTimeStyles>& GetValues() const override
        {
            static std::vector<DateTimeStyles> res =
            {
                DateTimeStyles::None,
                DateTimeStyles::AllowLeadingWhite,
                DateTimeStyles::AllowTrailingWhite,
                DateTimeStyles::AllowInnerWhite,
                DateTimeStyles::AllowWhiteSpaces,
                DateTimeStyles::NoCurrentDateDefault,
                DateTimeStyles::AdjustToUniversal,
                DateTimeStyles::AssumeLocal,
                DateTimeStyles::AssumeUniversal,
                DateTimeStyles::RoundtripKind,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("AllowLeadingWhite"),
                _T("AllowTrailingWhite"),
                _T("AllowInnerWhite"),
                _T("AllowWhiteSpaces"),
                _T("NoCurrentDateDefault"),
                _T("AdjustToUniversal"),
                _T("AssumeLocal"),
                _T("AssumeUniversal"),
                _T("RoundtripKind"),
            };
            return res;
        }
    };
    
    
    enum class DigitShapes
    {
        Context3 = 0,
        None = 1,
        NativeNational = 2,
    };
    
    struct DigitShapes_Impl : public cli::enumeration<DigitShapes>
    {
        DigitShapes_Impl(const DigitShapes& val) : cli::enumeration<DigitShapes>(val) { }
        operator DigitShapes() { return value; }
        
        virtual const std::vector<DigitShapes>& GetValues() const override
        {
            static std::vector<DigitShapes> res =
            {
                DigitShapes::Context3,
                DigitShapes::None,
                DigitShapes::NativeNational,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Context3"),
                _T("None"),
                _T("NativeNational"),
            };
            return res;
        }
    };
    
    
    enum class GregorianCalendarTypes
    {
        Localized = 1,
        USEnglish = 2,
        MiddleEastFrench = 9,
        Arabic = 10,
        TransliteratedEnglish = 11,
        TransliteratedFrench = 12,
    };
    
    struct GregorianCalendarTypes_Impl : public cli::enumeration<GregorianCalendarTypes>
    {
        GregorianCalendarTypes_Impl(const GregorianCalendarTypes& val) : cli::enumeration<GregorianCalendarTypes>(val) { }
        operator GregorianCalendarTypes() { return value; }
        
        virtual const std::vector<GregorianCalendarTypes>& GetValues() const override
        {
            static std::vector<GregorianCalendarTypes> res =
            {
                GregorianCalendarTypes::Localized,
                GregorianCalendarTypes::USEnglish,
                GregorianCalendarTypes::MiddleEastFrench,
                GregorianCalendarTypes::Arabic,
                GregorianCalendarTypes::TransliteratedEnglish,
                GregorianCalendarTypes::TransliteratedFrench,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Localized"),
                _T("USEnglish"),
                _T("MiddleEastFrench"),
                _T("Arabic"),
                _T("TransliteratedEnglish"),
                _T("TransliteratedFrench"),
            };
            return res;
        }
    };
    
    
    enum class NumberStyles
    {
        None = 0,
        AllowLeadingWhite = 1,
        AllowTrailingWhite = 2,
        AllowLeadingSign = 4,
        AllowTrailingSign = 8,
        AllowParentheses = 16,
        AllowDecimalPoint = 32,
        AllowThousands = 64,
        AllowExponent = 128,
        AllowCurrencySymbol = 256,
        AllowHexSpecifier = 512,
        Integer = 7,
        HexNumber = 515,
        Number = 111,
        Float = 167,
        Currency = 383,
        Any = 511,
    };
    
    struct NumberStyles_Impl : public cli::enumeration<NumberStyles>
    {
        NumberStyles_Impl(const NumberStyles& val) : cli::enumeration<NumberStyles>(val) { }
        operator NumberStyles() { return value; }
        
        virtual const std::vector<NumberStyles>& GetValues() const override
        {
            static std::vector<NumberStyles> res =
            {
                NumberStyles::None,
                NumberStyles::AllowLeadingWhite,
                NumberStyles::AllowTrailingWhite,
                NumberStyles::AllowLeadingSign,
                NumberStyles::AllowTrailingSign,
                NumberStyles::AllowParentheses,
                NumberStyles::AllowDecimalPoint,
                NumberStyles::AllowThousands,
                NumberStyles::AllowExponent,
                NumberStyles::AllowCurrencySymbol,
                NumberStyles::AllowHexSpecifier,
                NumberStyles::Integer,
                NumberStyles::HexNumber,
                NumberStyles::Number,
                NumberStyles::Float,
                NumberStyles::Currency,
                NumberStyles::Any,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("AllowLeadingWhite"),
                _T("AllowTrailingWhite"),
                _T("AllowLeadingSign"),
                _T("AllowTrailingSign"),
                _T("AllowParentheses"),
                _T("AllowDecimalPoint"),
                _T("AllowThousands"),
                _T("AllowExponent"),
                _T("AllowCurrencySymbol"),
                _T("AllowHexSpecifier"),
                _T("Integer"),
                _T("HexNumber"),
                _T("Number"),
                _T("Float"),
                _T("Currency"),
                _T("Any"),
            };
            return res;
        }
    };
    
    
    enum class TimeSpanStyles
    {
        None = 0,
        AssumeNegative = 1,
    };
    
    struct TimeSpanStyles_Impl : public cli::enumeration<TimeSpanStyles>
    {
        TimeSpanStyles_Impl(const TimeSpanStyles& val) : cli::enumeration<TimeSpanStyles>(val) { }
        operator TimeSpanStyles() { return value; }
        
        virtual const std::vector<TimeSpanStyles>& GetValues() const override
        {
            static std::vector<TimeSpanStyles> res =
            {
                TimeSpanStyles::None,
                TimeSpanStyles::AssumeNegative,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("AssumeNegative"),
            };
            return res;
        }
    };
    
    
    enum class UnicodeCategory
    {
        UppercaseLetter = 0,
        LowercaseLetter = 1,
        TitlecaseLetter = 2,
        ModifierLetter = 3,
        OtherLetter = 4,
        NonSpacingMark = 5,
        SpacingCombiningMark = 6,
        EnclosingMark = 7,
        DecimalDigitNumber = 8,
        LetterNumber = 9,
        OtherNumber = 10,
        SpaceSeparator = 11,
        LineSeparator = 12,
        ParagraphSeparator = 13,
        Control = 14,
        Format3 = 15,
        Surrogate = 16,
        PrivateUse = 17,
        ConnectorPunctuation = 18,
        DashPunctuation = 19,
        OpenPunctuation = 20,
        ClosePunctuation = 21,
        InitialQuotePunctuation = 22,
        FinalQuotePunctuation = 23,
        OtherPunctuation = 24,
        MathSymbol = 25,
        CurrencySymbol = 26,
        ModifierSymbol = 27,
        OtherSymbol = 28,
        OtherNotAssigned = 29,
    };
    
    struct UnicodeCategory_Impl : public cli::enumeration<UnicodeCategory>
    {
        UnicodeCategory_Impl(const UnicodeCategory& val) : cli::enumeration<UnicodeCategory>(val) { }
        operator UnicodeCategory() { return value; }
        
        virtual const std::vector<UnicodeCategory>& GetValues() const override
        {
            static std::vector<UnicodeCategory> res =
            {
                UnicodeCategory::UppercaseLetter,
                UnicodeCategory::LowercaseLetter,
                UnicodeCategory::TitlecaseLetter,
                UnicodeCategory::ModifierLetter,
                UnicodeCategory::OtherLetter,
                UnicodeCategory::NonSpacingMark,
                UnicodeCategory::SpacingCombiningMark,
                UnicodeCategory::EnclosingMark,
                UnicodeCategory::DecimalDigitNumber,
                UnicodeCategory::LetterNumber,
                UnicodeCategory::OtherNumber,
                UnicodeCategory::SpaceSeparator,
                UnicodeCategory::LineSeparator,
                UnicodeCategory::ParagraphSeparator,
                UnicodeCategory::Control,
                UnicodeCategory::Format3,
                UnicodeCategory::Surrogate,
                UnicodeCategory::PrivateUse,
                UnicodeCategory::ConnectorPunctuation,
                UnicodeCategory::DashPunctuation,
                UnicodeCategory::OpenPunctuation,
                UnicodeCategory::ClosePunctuation,
                UnicodeCategory::InitialQuotePunctuation,
                UnicodeCategory::FinalQuotePunctuation,
                UnicodeCategory::OtherPunctuation,
                UnicodeCategory::MathSymbol,
                UnicodeCategory::CurrencySymbol,
                UnicodeCategory::ModifierSymbol,
                UnicodeCategory::OtherSymbol,
                UnicodeCategory::OtherNotAssigned,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("UppercaseLetter"),
                _T("LowercaseLetter"),
                _T("TitlecaseLetter"),
                _T("ModifierLetter"),
                _T("OtherLetter"),
                _T("NonSpacingMark"),
                _T("SpacingCombiningMark"),
                _T("EnclosingMark"),
                _T("DecimalDigitNumber"),
                _T("LetterNumber"),
                _T("OtherNumber"),
                _T("SpaceSeparator"),
                _T("LineSeparator"),
                _T("ParagraphSeparator"),
                _T("Control"),
                _T("Format3"),
                _T("Surrogate"),
                _T("PrivateUse"),
                _T("ConnectorPunctuation"),
                _T("DashPunctuation"),
                _T("OpenPunctuation"),
                _T("ClosePunctuation"),
                _T("InitialQuotePunctuation"),
                _T("FinalQuotePunctuation"),
                _T("OtherPunctuation"),
                _T("MathSymbol"),
                _T("CurrencySymbol"),
                _T("ModifierSymbol"),
                _T("OtherSymbol"),
                _T("OtherNotAssigned"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace IO {
    
    enum class DriveType
    {
        CDRom = 5,
        Fixed = 3,
        Network = 4,
        NoRootDirectory = 1,
        Ram = 6,
        Removable = 2,
        Unknown = 0,
    };
    
    struct DriveType_Impl : public cli::enumeration<DriveType>
    {
        DriveType_Impl(const DriveType& val) : cli::enumeration<DriveType>(val) { }
        operator DriveType() { return value; }
        
        virtual const std::vector<DriveType>& GetValues() const override
        {
            static std::vector<DriveType> res =
            {
                DriveType::CDRom,
                DriveType::Fixed,
                DriveType::Network,
                DriveType::NoRootDirectory,
                DriveType::Ram,
                DriveType::Removable,
                DriveType::Unknown,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CDRom"),
                _T("Fixed"),
                _T("Network"),
                _T("NoRootDirectory"),
                _T("Ram"),
                _T("Removable"),
                _T("Unknown"),
            };
            return res;
        }
    };
    
    
    enum class FileAccess
    {
        Read = 1,
        Write = 2,
        ReadWrite = 3,
    };
    
    struct FileAccess_Impl : public cli::enumeration<FileAccess>
    {
        FileAccess_Impl(const FileAccess& val) : cli::enumeration<FileAccess>(val) { }
        operator FileAccess() { return value; }
        
        virtual const std::vector<FileAccess>& GetValues() const override
        {
            static std::vector<FileAccess> res =
            {
                FileAccess::Read,
                FileAccess::Write,
                FileAccess::ReadWrite,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Read"),
                _T("Write"),
                _T("ReadWrite"),
            };
            return res;
        }
    };
    
    
    enum class FileAttributes
    {
        Archive = 32,
        Compressed = 2048,
        Device = 64,
        Directory2 = 16,
        Encrypted = 16384,
        Hidden = 2,
        Normal = 128,
        NotContentIndexed = 8192,
        Offline = 4096,
        ReadOnly = 1,
        ReparsePoint = 1024,
        SparseFile = 512,
        System = 4,
        Temporary = 256,
    };
    
    struct FileAttributes_Impl : public cli::enumeration<FileAttributes>
    {
        FileAttributes_Impl(const FileAttributes& val) : cli::enumeration<FileAttributes>(val) { }
        operator FileAttributes() { return value; }
        
        virtual const std::vector<FileAttributes>& GetValues() const override
        {
            static std::vector<FileAttributes> res =
            {
                FileAttributes::Archive,
                FileAttributes::Compressed,
                FileAttributes::Device,
                FileAttributes::Directory2,
                FileAttributes::Encrypted,
                FileAttributes::Hidden,
                FileAttributes::Normal,
                FileAttributes::NotContentIndexed,
                FileAttributes::Offline,
                FileAttributes::ReadOnly,
                FileAttributes::ReparsePoint,
                FileAttributes::SparseFile,
                FileAttributes::System,
                FileAttributes::Temporary,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Archive"),
                _T("Compressed"),
                _T("Device"),
                _T("Directory2"),
                _T("Encrypted"),
                _T("Hidden"),
                _T("Normal"),
                _T("NotContentIndexed"),
                _T("Offline"),
                _T("ReadOnly"),
                _T("ReparsePoint"),
                _T("SparseFile"),
                _T("System"),
                _T("Temporary"),
            };
            return res;
        }
    };
    
    
    enum class FileMode
    {
        CreateNew = 1,
        Create = 2,
        Open = 3,
        OpenOrCreate = 4,
        Truncate = 5,
        Append = 6,
    };
    
    struct FileMode_Impl : public cli::enumeration<FileMode>
    {
        FileMode_Impl(const FileMode& val) : cli::enumeration<FileMode>(val) { }
        operator FileMode() { return value; }
        
        virtual const std::vector<FileMode>& GetValues() const override
        {
            static std::vector<FileMode> res =
            {
                FileMode::CreateNew,
                FileMode::Create,
                FileMode::Open,
                FileMode::OpenOrCreate,
                FileMode::Truncate,
                FileMode::Append,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CreateNew"),
                _T("Create"),
                _T("Open"),
                _T("OpenOrCreate"),
                _T("Truncate"),
                _T("Append"),
            };
            return res;
        }
    };
    
    
    enum class FileOptions
    {
        None = 0,
        Encrypted = 16384,
        DeleteOnClose = 67108864,
        SequentialScan = 134217728,
        RandomAccess = 268435456,
        Asynchronous = 1073741824,
        WriteThrough = -2147483648,
    };
    
    struct FileOptions_Impl : public cli::enumeration<FileOptions>
    {
        FileOptions_Impl(const FileOptions& val) : cli::enumeration<FileOptions>(val) { }
        operator FileOptions() { return value; }
        
        virtual const std::vector<FileOptions>& GetValues() const override
        {
            static std::vector<FileOptions> res =
            {
                FileOptions::None,
                FileOptions::Encrypted,
                FileOptions::DeleteOnClose,
                FileOptions::SequentialScan,
                FileOptions::RandomAccess,
                FileOptions::Asynchronous,
                FileOptions::WriteThrough,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Encrypted"),
                _T("DeleteOnClose"),
                _T("SequentialScan"),
                _T("RandomAccess"),
                _T("Asynchronous"),
                _T("WriteThrough"),
            };
            return res;
        }
    };
    
    
    enum class FileShare
    {
        None = 0,
        Read = 1,
        Write = 2,
        ReadWrite = 3,
        Delete = 4,
        Inheritable = 16,
    };
    
    struct FileShare_Impl : public cli::enumeration<FileShare>
    {
        FileShare_Impl(const FileShare& val) : cli::enumeration<FileShare>(val) { }
        operator FileShare() { return value; }
        
        virtual const std::vector<FileShare>& GetValues() const override
        {
            static std::vector<FileShare> res =
            {
                FileShare::None,
                FileShare::Read,
                FileShare::Write,
                FileShare::ReadWrite,
                FileShare::Delete,
                FileShare::Inheritable,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Read"),
                _T("Write"),
                _T("ReadWrite"),
                _T("Delete"),
                _T("Inheritable"),
            };
            return res;
        }
    };
    
    
    enum class MonoFileType
    {
        Unknown = 0,
        Disk = 1,
        Char2 = 2,
        Pipe = 3,
        Remote = 32768,
    };
    
    struct MonoFileType_Impl : public cli::enumeration<MonoFileType>
    {
        MonoFileType_Impl(const MonoFileType& val) : cli::enumeration<MonoFileType>(val) { }
        operator MonoFileType() { return value; }
        
        virtual const std::vector<MonoFileType>& GetValues() const override
        {
            static std::vector<MonoFileType> res =
            {
                MonoFileType::Unknown,
                MonoFileType::Disk,
                MonoFileType::Char2,
                MonoFileType::Pipe,
                MonoFileType::Remote,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unknown"),
                _T("Disk"),
                _T("Char2"),
                _T("Pipe"),
                _T("Remote"),
            };
            return res;
        }
    };
    
    
    enum class MonoIOError
    {
        ERROR_SUCCESS = 0,
        ERROR_FILE_NOT_FOUND = 2,
        ERROR_PATH_NOT_FOUND = 3,
        ERROR_TOO_MANY_OPEN_FILES = 4,
        ERROR_ACCESS_DENIED = 5,
        ERROR_INVALID_HANDLE = 6,
        ERROR_INVALID_DRIVE = 15,
        ERROR_NOT_SAME_DEVICE = 17,
        ERROR_NO_MORE_FILES = 18,
        ERROR_WRITE_FAULT = 29,
        ERROR_READ_FAULT = 30,
        ERROR_GEN_FAILURE = 31,
        ERROR_SHARING_VIOLATION = 32,
        ERROR_LOCK_VIOLATION = 33,
        ERROR_HANDLE_DISK_FULL = 39,
        ERROR_FILE_EXISTS = 80,
        ERROR_CANNOT_MAKE = 82,
        ERROR_INVALID_PARAMETER = 87,
        ERROR_BROKEN_PIPE = 109,
        ERROR_INVALID_NAME = 123,
        ERROR_DIR_NOT_EMPTY = 145,
        ERROR_ALREADY_EXISTS = 183,
        ERROR_FILENAME_EXCED_RANGE = 206,
        ERROR_ENCRYPTION_FAILED = 6000,
    };
    
    struct MonoIOError_Impl : public cli::enumeration<MonoIOError>
    {
        MonoIOError_Impl(const MonoIOError& val) : cli::enumeration<MonoIOError>(val) { }
        operator MonoIOError() { return value; }
        
        virtual const std::vector<MonoIOError>& GetValues() const override
        {
            static std::vector<MonoIOError> res =
            {
                MonoIOError::ERROR_SUCCESS,
                MonoIOError::ERROR_FILE_NOT_FOUND,
                MonoIOError::ERROR_PATH_NOT_FOUND,
                MonoIOError::ERROR_TOO_MANY_OPEN_FILES,
                MonoIOError::ERROR_ACCESS_DENIED,
                MonoIOError::ERROR_INVALID_HANDLE,
                MonoIOError::ERROR_INVALID_DRIVE,
                MonoIOError::ERROR_NOT_SAME_DEVICE,
                MonoIOError::ERROR_NO_MORE_FILES,
                MonoIOError::ERROR_WRITE_FAULT,
                MonoIOError::ERROR_READ_FAULT,
                MonoIOError::ERROR_GEN_FAILURE,
                MonoIOError::ERROR_SHARING_VIOLATION,
                MonoIOError::ERROR_LOCK_VIOLATION,
                MonoIOError::ERROR_HANDLE_DISK_FULL,
                MonoIOError::ERROR_FILE_EXISTS,
                MonoIOError::ERROR_CANNOT_MAKE,
                MonoIOError::ERROR_INVALID_PARAMETER,
                MonoIOError::ERROR_BROKEN_PIPE,
                MonoIOError::ERROR_INVALID_NAME,
                MonoIOError::ERROR_DIR_NOT_EMPTY,
                MonoIOError::ERROR_ALREADY_EXISTS,
                MonoIOError::ERROR_FILENAME_EXCED_RANGE,
                MonoIOError::ERROR_ENCRYPTION_FAILED,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ERROR_SUCCESS"),
                _T("ERROR_FILE_NOT_FOUND"),
                _T("ERROR_PATH_NOT_FOUND"),
                _T("ERROR_TOO_MANY_OPEN_FILES"),
                _T("ERROR_ACCESS_DENIED"),
                _T("ERROR_INVALID_HANDLE"),
                _T("ERROR_INVALID_DRIVE"),
                _T("ERROR_NOT_SAME_DEVICE"),
                _T("ERROR_NO_MORE_FILES"),
                _T("ERROR_WRITE_FAULT"),
                _T("ERROR_READ_FAULT"),
                _T("ERROR_GEN_FAILURE"),
                _T("ERROR_SHARING_VIOLATION"),
                _T("ERROR_LOCK_VIOLATION"),
                _T("ERROR_HANDLE_DISK_FULL"),
                _T("ERROR_FILE_EXISTS"),
                _T("ERROR_CANNOT_MAKE"),
                _T("ERROR_INVALID_PARAMETER"),
                _T("ERROR_BROKEN_PIPE"),
                _T("ERROR_INVALID_NAME"),
                _T("ERROR_DIR_NOT_EMPTY"),
                _T("ERROR_ALREADY_EXISTS"),
                _T("ERROR_FILENAME_EXCED_RANGE"),
                _T("ERROR_ENCRYPTION_FAILED"),
            };
            return res;
        }
    };
    
    
    enum class SearchOption
    {
        TopDirectoryOnly = 0,
        AllDirectories = 1,
    };
    
    struct SearchOption_Impl : public cli::enumeration<SearchOption>
    {
        SearchOption_Impl(const SearchOption& val) : cli::enumeration<SearchOption>(val) { }
        operator SearchOption() { return value; }
        
        virtual const std::vector<SearchOption>& GetValues() const override
        {
            static std::vector<SearchOption> res =
            {
                SearchOption::TopDirectoryOnly,
                SearchOption::AllDirectories,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TopDirectoryOnly"),
                _T("AllDirectories"),
            };
            return res;
        }
    };
    
    
    enum class SeekOrigin
    {
        Begin = 0,
        Current = 1,
        End = 2,
    };
    
    struct SeekOrigin_Impl : public cli::enumeration<SeekOrigin>
    {
        SeekOrigin_Impl(const SeekOrigin& val) : cli::enumeration<SeekOrigin>(val) { }
        operator SeekOrigin() { return value; }
        
        virtual const std::vector<SeekOrigin>& GetValues() const override
        {
            static std::vector<SeekOrigin> res =
            {
                SeekOrigin::Begin,
                SeekOrigin::Current,
                SeekOrigin::End,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Begin"),
                _T("Current"),
                _T("End"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace IO { namespace IsolatedStorage {
    
    enum class IsolatedStorageScope
    {
        None = 0,
        User = 1,
        Domain = 2,
        Assembly2 = 4,
        Roaming = 8,
        Machine = 16,
        Application = 32,
    };
    
    struct IsolatedStorageScope_Impl : public cli::enumeration<IsolatedStorageScope>
    {
        IsolatedStorageScope_Impl(const IsolatedStorageScope& val) : cli::enumeration<IsolatedStorageScope>(val) { }
        operator IsolatedStorageScope() { return value; }
        
        virtual const std::vector<IsolatedStorageScope>& GetValues() const override
        {
            static std::vector<IsolatedStorageScope> res =
            {
                IsolatedStorageScope::None,
                IsolatedStorageScope::User,
                IsolatedStorageScope::Domain,
                IsolatedStorageScope::Assembly2,
                IsolatedStorageScope::Roaming,
                IsolatedStorageScope::Machine,
                IsolatedStorageScope::Application,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("User"),
                _T("Domain"),
                _T("Assembly2"),
                _T("Roaming"),
                _T("Machine"),
                _T("Application"),
            };
            return res;
        }
    };
    
    
    enum class IsolatedStorageSecurityOptions
    {
        IncreaseQuotaForApplication = 4,
    };
    
    struct IsolatedStorageSecurityOptions_Impl : public cli::enumeration<IsolatedStorageSecurityOptions>
    {
        IsolatedStorageSecurityOptions_Impl(const IsolatedStorageSecurityOptions& val) : cli::enumeration<IsolatedStorageSecurityOptions>(val) { }
        operator IsolatedStorageSecurityOptions() { return value; }
        
        virtual const std::vector<IsolatedStorageSecurityOptions>& GetValues() const override
        {
            static std::vector<IsolatedStorageSecurityOptions> res =
            {
                IsolatedStorageSecurityOptions::IncreaseQuotaForApplication,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IncreaseQuotaForApplication"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Reflection {
    
    enum class AssemblyNameFlags
    {
        None = 0,
        PublicKey = 1,
        Retargetable = 256,
        EnableJITcompileOptimizer = 16384,
        EnableJITcompileTracking = 32768,
    };
    
    struct AssemblyNameFlags_Impl : public cli::enumeration<AssemblyNameFlags>
    {
        AssemblyNameFlags_Impl(const AssemblyNameFlags& val) : cli::enumeration<AssemblyNameFlags>(val) { }
        operator AssemblyNameFlags() { return value; }
        
        virtual const std::vector<AssemblyNameFlags>& GetValues() const override
        {
            static std::vector<AssemblyNameFlags> res =
            {
                AssemblyNameFlags::None,
                AssemblyNameFlags::PublicKey,
                AssemblyNameFlags::Retargetable,
                AssemblyNameFlags::EnableJITcompileOptimizer,
                AssemblyNameFlags::EnableJITcompileTracking,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("PublicKey"),
                _T("Retargetable"),
                _T("EnableJITcompileOptimizer"),
                _T("EnableJITcompileTracking"),
            };
            return res;
        }
    };
    
    
    enum class BindingFlags
    {
        Default2 = 0,
        IgnoreCase = 1,
        DeclaredOnly = 2,
        Instance = 4,
        Static = 8,
        Public = 16,
        NonPublic = 32,
        FlattenHierarchy = 64,
        InvokeMethod = 256,
        CreateInstance = 512,
        GetField = 1024,
        SetField = 2048,
        GetProperty = 4096,
        SetProperty = 8192,
        PutDispProperty = 16384,
        PutRefDispProperty = 32768,
        ExactBinding = 65536,
        SuppressChangeType = 131072,
        OptionalParamBinding = 262144,
        IgnoreReturn = 16777216,
    };
    
    struct BindingFlags_Impl : public cli::enumeration<BindingFlags>
    {
        BindingFlags_Impl(const BindingFlags& val) : cli::enumeration<BindingFlags>(val) { }
        operator BindingFlags() { return value; }
        
        virtual const std::vector<BindingFlags>& GetValues() const override
        {
            static std::vector<BindingFlags> res =
            {
                BindingFlags::Default2,
                BindingFlags::IgnoreCase,
                BindingFlags::DeclaredOnly,
                BindingFlags::Instance,
                BindingFlags::Static,
                BindingFlags::Public,
                BindingFlags::NonPublic,
                BindingFlags::FlattenHierarchy,
                BindingFlags::InvokeMethod,
                BindingFlags::CreateInstance,
                BindingFlags::GetField,
                BindingFlags::SetField,
                BindingFlags::GetProperty,
                BindingFlags::SetProperty,
                BindingFlags::PutDispProperty,
                BindingFlags::PutRefDispProperty,
                BindingFlags::ExactBinding,
                BindingFlags::SuppressChangeType,
                BindingFlags::OptionalParamBinding,
                BindingFlags::IgnoreReturn,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Default2"),
                _T("IgnoreCase"),
                _T("DeclaredOnly"),
                _T("Instance"),
                _T("Static"),
                _T("Public"),
                _T("NonPublic"),
                _T("FlattenHierarchy"),
                _T("InvokeMethod"),
                _T("CreateInstance"),
                _T("GetField"),
                _T("SetField"),
                _T("GetProperty"),
                _T("SetProperty"),
                _T("PutDispProperty"),
                _T("PutRefDispProperty"),
                _T("ExactBinding"),
                _T("SuppressChangeType"),
                _T("OptionalParamBinding"),
                _T("IgnoreReturn"),
            };
            return res;
        }
    };
    
    
    enum class CallingConventions
    {
        Standard = 1,
        VarArgs = 2,
        Any = 3,
        HasThis = 32,
        ExplicitThis = 64,
    };
    
    struct CallingConventions_Impl : public cli::enumeration<CallingConventions>
    {
        CallingConventions_Impl(const CallingConventions& val) : cli::enumeration<CallingConventions>(val) { }
        operator CallingConventions() { return value; }
        
        virtual const std::vector<CallingConventions>& GetValues() const override
        {
            static std::vector<CallingConventions> res =
            {
                CallingConventions::Standard,
                CallingConventions::VarArgs,
                CallingConventions::Any,
                CallingConventions::HasThis,
                CallingConventions::ExplicitThis,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Standard"),
                _T("VarArgs"),
                _T("Any"),
                _T("HasThis"),
                _T("ExplicitThis"),
            };
            return res;
        }
    };
    
    
    enum class EventAttributes
    {
        None = 0,
        SpecialName = 512,
        ReservedMask = 1024,
        RTSpecialName = 1024,
    };
    
    struct EventAttributes_Impl : public cli::enumeration<EventAttributes>
    {
        EventAttributes_Impl(const EventAttributes& val) : cli::enumeration<EventAttributes>(val) { }
        operator EventAttributes() { return value; }
        
        virtual const std::vector<EventAttributes>& GetValues() const override
        {
            static std::vector<EventAttributes> res =
            {
                EventAttributes::None,
                EventAttributes::SpecialName,
                EventAttributes::ReservedMask,
                EventAttributes::RTSpecialName,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("SpecialName"),
                _T("ReservedMask"),
                _T("RTSpecialName"),
            };
            return res;
        }
    };
    
    
    enum class ExceptionHandlingClauseOptions
    {
        Clause = 0,
        Filter = 1,
        Finally = 2,
        Fault = 4,
    };
    
    struct ExceptionHandlingClauseOptions_Impl : public cli::enumeration<ExceptionHandlingClauseOptions>
    {
        ExceptionHandlingClauseOptions_Impl(const ExceptionHandlingClauseOptions& val) : cli::enumeration<ExceptionHandlingClauseOptions>(val) { }
        operator ExceptionHandlingClauseOptions() { return value; }
        
        virtual const std::vector<ExceptionHandlingClauseOptions>& GetValues() const override
        {
            static std::vector<ExceptionHandlingClauseOptions> res =
            {
                ExceptionHandlingClauseOptions::Clause,
                ExceptionHandlingClauseOptions::Filter,
                ExceptionHandlingClauseOptions::Finally,
                ExceptionHandlingClauseOptions::Fault,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Clause"),
                _T("Filter"),
                _T("Finally"),
                _T("Fault"),
            };
            return res;
        }
    };
    
    
    enum class FieldAttributes
    {
        FieldAccessMask = 7,
        PrivateScope = 0,
        Private = 1,
        FamANDAssem = 2,
        Assembly2 = 3,
        Family = 4,
        FamORAssem = 5,
        Public = 6,
        Static = 16,
        InitOnly = 32,
        Literal = 64,
        NotSerialized = 128,
        HasFieldRVA = 256,
        SpecialName = 512,
        RTSpecialName = 1024,
        HasFieldMarshal = 4096,
        PinvokeImpl = 8192,
        HasDefault = 32768,
        ReservedMask = 38144,
    };
    
    struct FieldAttributes_Impl : public cli::enumeration<FieldAttributes>
    {
        FieldAttributes_Impl(const FieldAttributes& val) : cli::enumeration<FieldAttributes>(val) { }
        operator FieldAttributes() { return value; }
        
        virtual const std::vector<FieldAttributes>& GetValues() const override
        {
            static std::vector<FieldAttributes> res =
            {
                FieldAttributes::FieldAccessMask,
                FieldAttributes::PrivateScope,
                FieldAttributes::Private,
                FieldAttributes::FamANDAssem,
                FieldAttributes::Assembly2,
                FieldAttributes::Family,
                FieldAttributes::FamORAssem,
                FieldAttributes::Public,
                FieldAttributes::Static,
                FieldAttributes::InitOnly,
                FieldAttributes::Literal,
                FieldAttributes::NotSerialized,
                FieldAttributes::HasFieldRVA,
                FieldAttributes::SpecialName,
                FieldAttributes::RTSpecialName,
                FieldAttributes::HasFieldMarshal,
                FieldAttributes::PinvokeImpl,
                FieldAttributes::HasDefault,
                FieldAttributes::ReservedMask,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FieldAccessMask"),
                _T("PrivateScope"),
                _T("Private"),
                _T("FamANDAssem"),
                _T("Assembly2"),
                _T("Family"),
                _T("FamORAssem"),
                _T("Public"),
                _T("Static"),
                _T("InitOnly"),
                _T("Literal"),
                _T("NotSerialized"),
                _T("HasFieldRVA"),
                _T("SpecialName"),
                _T("RTSpecialName"),
                _T("HasFieldMarshal"),
                _T("PinvokeImpl"),
                _T("HasDefault"),
                _T("ReservedMask"),
            };
            return res;
        }
    };
    
    
    enum class GenericParameterAttributes
    {
        Covariant = 1,
        Contravariant = 2,
        VarianceMask = 3,
        None = 0,
        ReferenceTypeConstraint = 4,
        NotNullableValueTypeConstraint = 8,
        DefaultConstructorConstraint = 16,
        SpecialConstraintMask = 28,
    };
    
    struct GenericParameterAttributes_Impl : public cli::enumeration<GenericParameterAttributes>
    {
        GenericParameterAttributes_Impl(const GenericParameterAttributes& val) : cli::enumeration<GenericParameterAttributes>(val) { }
        operator GenericParameterAttributes() { return value; }
        
        virtual const std::vector<GenericParameterAttributes>& GetValues() const override
        {
            static std::vector<GenericParameterAttributes> res =
            {
                GenericParameterAttributes::Covariant,
                GenericParameterAttributes::Contravariant,
                GenericParameterAttributes::VarianceMask,
                GenericParameterAttributes::None,
                GenericParameterAttributes::ReferenceTypeConstraint,
                GenericParameterAttributes::NotNullableValueTypeConstraint,
                GenericParameterAttributes::DefaultConstructorConstraint,
                GenericParameterAttributes::SpecialConstraintMask,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Covariant"),
                _T("Contravariant"),
                _T("VarianceMask"),
                _T("None"),
                _T("ReferenceTypeConstraint"),
                _T("NotNullableValueTypeConstraint"),
                _T("DefaultConstructorConstraint"),
                _T("SpecialConstraintMask"),
            };
            return res;
        }
    };
    
    
    enum class ImageFileMachine
    {
        I386 = 332,
        IA64 = 512,
        AMD64 = 34404,
    };
    
    struct ImageFileMachine_Impl : public cli::enumeration<ImageFileMachine>
    {
        ImageFileMachine_Impl(const ImageFileMachine& val) : cli::enumeration<ImageFileMachine>(val) { }
        operator ImageFileMachine() { return value; }
        
        virtual const std::vector<ImageFileMachine>& GetValues() const override
        {
            static std::vector<ImageFileMachine> res =
            {
                ImageFileMachine::I386,
                ImageFileMachine::IA64,
                ImageFileMachine::AMD64,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("I386"),
                _T("IA64"),
                _T("AMD64"),
            };
            return res;
        }
    };
    
    
    enum class MemberTypes
    {
        Constructor = 1,
        Event = 2,
        Field = 4,
        Method = 8,
        Property = 16,
        TypeInfo3 = 32,
        Custom = 64,
        NestedType = 128,
        All = 191,
    };
    
    struct MemberTypes_Impl : public cli::enumeration<MemberTypes>
    {
        MemberTypes_Impl(const MemberTypes& val) : cli::enumeration<MemberTypes>(val) { }
        operator MemberTypes() { return value; }
        
        virtual const std::vector<MemberTypes>& GetValues() const override
        {
            static std::vector<MemberTypes> res =
            {
                MemberTypes::Constructor,
                MemberTypes::Event,
                MemberTypes::Field,
                MemberTypes::Method,
                MemberTypes::Property,
                MemberTypes::TypeInfo3,
                MemberTypes::Custom,
                MemberTypes::NestedType,
                MemberTypes::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Constructor"),
                _T("Event"),
                _T("Field"),
                _T("Method"),
                _T("Property"),
                _T("TypeInfo3"),
                _T("Custom"),
                _T("NestedType"),
                _T("All"),
            };
            return res;
        }
    };
    
    
    enum class MethodAttributes
    {
        MemberAccessMask = 7,
        PrivateScope = 0,
        Private = 1,
        FamANDAssem = 2,
        Assembly2 = 3,
        Family = 4,
        FamORAssem = 5,
        Public = 6,
        Static = 16,
        Final = 32,
        Virtual = 64,
        HideBySig = 128,
        VtableLayoutMask = 256,
        CheckAccessOnOverride = 512,
        ReuseSlot = 0,
        NewSlot = 256,
        Abstract = 1024,
        SpecialName = 2048,
        PinvokeImpl = 8192,
        UnmanagedExport = 8,
        RTSpecialName = 4096,
        ReservedMask = 53248,
        HasSecurity = 16384,
        RequireSecObject = 32768,
    };
    
    struct MethodAttributes_Impl : public cli::enumeration<MethodAttributes>
    {
        MethodAttributes_Impl(const MethodAttributes& val) : cli::enumeration<MethodAttributes>(val) { }
        operator MethodAttributes() { return value; }
        
        virtual const std::vector<MethodAttributes>& GetValues() const override
        {
            static std::vector<MethodAttributes> res =
            {
                MethodAttributes::MemberAccessMask,
                MethodAttributes::PrivateScope,
                MethodAttributes::Private,
                MethodAttributes::FamANDAssem,
                MethodAttributes::Assembly2,
                MethodAttributes::Family,
                MethodAttributes::FamORAssem,
                MethodAttributes::Public,
                MethodAttributes::Static,
                MethodAttributes::Final,
                MethodAttributes::Virtual,
                MethodAttributes::HideBySig,
                MethodAttributes::VtableLayoutMask,
                MethodAttributes::CheckAccessOnOverride,
                MethodAttributes::ReuseSlot,
                MethodAttributes::NewSlot,
                MethodAttributes::Abstract,
                MethodAttributes::SpecialName,
                MethodAttributes::PinvokeImpl,
                MethodAttributes::UnmanagedExport,
                MethodAttributes::RTSpecialName,
                MethodAttributes::ReservedMask,
                MethodAttributes::HasSecurity,
                MethodAttributes::RequireSecObject,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MemberAccessMask"),
                _T("PrivateScope"),
                _T("Private"),
                _T("FamANDAssem"),
                _T("Assembly2"),
                _T("Family"),
                _T("FamORAssem"),
                _T("Public"),
                _T("Static"),
                _T("Final"),
                _T("Virtual"),
                _T("HideBySig"),
                _T("VtableLayoutMask"),
                _T("CheckAccessOnOverride"),
                _T("ReuseSlot"),
                _T("NewSlot"),
                _T("Abstract"),
                _T("SpecialName"),
                _T("PinvokeImpl"),
                _T("UnmanagedExport"),
                _T("RTSpecialName"),
                _T("ReservedMask"),
                _T("HasSecurity"),
                _T("RequireSecObject"),
            };
            return res;
        }
    };
    
    
    enum class MethodImplAttributes
    {
        CodeTypeMask = 3,
        IL = 0,
        Native = 1,
        OPTIL = 2,
        Runtime2 = 3,
        ManagedMask = 4,
        Unmanaged = 4,
        Managed = 0,
        ForwardRef = 16,
        PreserveSig = 128,
        InternalCall = 4096,
        Synchronized = 32,
        NoInlining = 8,
        NoOptimization = 64,
        MaxMethodImplVal = 65535,
    };
    
    struct MethodImplAttributes_Impl : public cli::enumeration<MethodImplAttributes>
    {
        MethodImplAttributes_Impl(const MethodImplAttributes& val) : cli::enumeration<MethodImplAttributes>(val) { }
        operator MethodImplAttributes() { return value; }
        
        virtual const std::vector<MethodImplAttributes>& GetValues() const override
        {
            static std::vector<MethodImplAttributes> res =
            {
                MethodImplAttributes::CodeTypeMask,
                MethodImplAttributes::IL,
                MethodImplAttributes::Native,
                MethodImplAttributes::OPTIL,
                MethodImplAttributes::Runtime2,
                MethodImplAttributes::ManagedMask,
                MethodImplAttributes::Unmanaged,
                MethodImplAttributes::Managed,
                MethodImplAttributes::ForwardRef,
                MethodImplAttributes::PreserveSig,
                MethodImplAttributes::InternalCall,
                MethodImplAttributes::Synchronized,
                MethodImplAttributes::NoInlining,
                MethodImplAttributes::NoOptimization,
                MethodImplAttributes::MaxMethodImplVal,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CodeTypeMask"),
                _T("IL"),
                _T("Native"),
                _T("OPTIL"),
                _T("Runtime2"),
                _T("ManagedMask"),
                _T("Unmanaged"),
                _T("Managed"),
                _T("ForwardRef"),
                _T("PreserveSig"),
                _T("InternalCall"),
                _T("Synchronized"),
                _T("NoInlining"),
                _T("NoOptimization"),
                _T("MaxMethodImplVal"),
            };
            return res;
        }
    };
    
    
    enum class ResolveTokenError
    {
        OutOfRange = 0,
        BadTable = 1,
        Other = 2,
    };
    
    struct ResolveTokenError_Impl : public cli::enumeration<ResolveTokenError>
    {
        ResolveTokenError_Impl(const ResolveTokenError& val) : cli::enumeration<ResolveTokenError>(val) { }
        operator ResolveTokenError() { return value; }
        
        virtual const std::vector<ResolveTokenError>& GetValues() const override
        {
            static std::vector<ResolveTokenError> res =
            {
                ResolveTokenError::OutOfRange,
                ResolveTokenError::BadTable,
                ResolveTokenError::Other,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("OutOfRange"),
                _T("BadTable"),
                _T("Other"),
            };
            return res;
        }
    };
    
    
    enum class PInfo
    {
        Attributes = 1,
        GetMethod = 2,
        SetMethod = 4,
        ReflectedType = 8,
        DeclaringType = 16,
        Name2 = 32,
    };
    
    struct PInfo_Impl : public cli::enumeration<PInfo>
    {
        PInfo_Impl(const PInfo& val) : cli::enumeration<PInfo>(val) { }
        operator PInfo() { return value; }
        
        virtual const std::vector<PInfo>& GetValues() const override
        {
            static std::vector<PInfo> res =
            {
                PInfo::Attributes,
                PInfo::GetMethod,
                PInfo::SetMethod,
                PInfo::ReflectedType,
                PInfo::DeclaringType,
                PInfo::Name2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Attributes"),
                _T("GetMethod"),
                _T("SetMethod"),
                _T("ReflectedType"),
                _T("DeclaringType"),
                _T("Name2"),
            };
            return res;
        }
    };
    
    
    enum class ParameterAttributes
    {
        None = 0,
        In = 1,
        Out = 2,
        Lcid = 4,
        Retval = 8,
        Optional = 16,
        ReservedMask = 61440,
        HasDefault = 4096,
        HasFieldMarshal = 8192,
        Reserved3 = 16384,
        Reserved4 = 32768,
    };
    
    struct ParameterAttributes_Impl : public cli::enumeration<ParameterAttributes>
    {
        ParameterAttributes_Impl(const ParameterAttributes& val) : cli::enumeration<ParameterAttributes>(val) { }
        operator ParameterAttributes() { return value; }
        
        virtual const std::vector<ParameterAttributes>& GetValues() const override
        {
            static std::vector<ParameterAttributes> res =
            {
                ParameterAttributes::None,
                ParameterAttributes::In,
                ParameterAttributes::Out,
                ParameterAttributes::Lcid,
                ParameterAttributes::Retval,
                ParameterAttributes::Optional,
                ParameterAttributes::ReservedMask,
                ParameterAttributes::HasDefault,
                ParameterAttributes::HasFieldMarshal,
                ParameterAttributes::Reserved3,
                ParameterAttributes::Reserved4,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("In"),
                _T("Out"),
                _T("Lcid"),
                _T("Retval"),
                _T("Optional"),
                _T("ReservedMask"),
                _T("HasDefault"),
                _T("HasFieldMarshal"),
                _T("Reserved3"),
                _T("Reserved4"),
            };
            return res;
        }
    };
    
    
    enum class PortableExecutableKinds
    {
        NotAPortableExecutableImage = 0,
        ILOnly = 1,
        Required32Bit = 2,
        PE32Plus = 4,
        Unmanaged32Bit = 8,
    };
    
    struct PortableExecutableKinds_Impl : public cli::enumeration<PortableExecutableKinds>
    {
        PortableExecutableKinds_Impl(const PortableExecutableKinds& val) : cli::enumeration<PortableExecutableKinds>(val) { }
        operator PortableExecutableKinds() { return value; }
        
        virtual const std::vector<PortableExecutableKinds>& GetValues() const override
        {
            static std::vector<PortableExecutableKinds> res =
            {
                PortableExecutableKinds::NotAPortableExecutableImage,
                PortableExecutableKinds::ILOnly,
                PortableExecutableKinds::Required32Bit,
                PortableExecutableKinds::PE32Plus,
                PortableExecutableKinds::Unmanaged32Bit,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NotAPortableExecutableImage"),
                _T("ILOnly"),
                _T("Required32Bit"),
                _T("PE32Plus"),
                _T("Unmanaged32Bit"),
            };
            return res;
        }
    };
    
    
    enum class ProcessorArchitecture
    {
        None = 0,
        MSIL = 1,
        X86 = 2,
        IA64 = 3,
        Amd64 = 4,
    };
    
    struct ProcessorArchitecture_Impl : public cli::enumeration<ProcessorArchitecture>
    {
        ProcessorArchitecture_Impl(const ProcessorArchitecture& val) : cli::enumeration<ProcessorArchitecture>(val) { }
        operator ProcessorArchitecture() { return value; }
        
        virtual const std::vector<ProcessorArchitecture>& GetValues() const override
        {
            static std::vector<ProcessorArchitecture> res =
            {
                ProcessorArchitecture::None,
                ProcessorArchitecture::MSIL,
                ProcessorArchitecture::X86,
                ProcessorArchitecture::IA64,
                ProcessorArchitecture::Amd64,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("MSIL"),
                _T("X86"),
                _T("IA64"),
                _T("Amd64"),
            };
            return res;
        }
    };
    
    
    enum class PropertyAttributes
    {
        None = 0,
        SpecialName = 512,
        ReservedMask = 62464,
        RTSpecialName = 1024,
        HasDefault = 4096,
        Reserved2 = 8192,
        Reserved3 = 16384,
        Reserved4 = 32768,
    };
    
    struct PropertyAttributes_Impl : public cli::enumeration<PropertyAttributes>
    {
        PropertyAttributes_Impl(const PropertyAttributes& val) : cli::enumeration<PropertyAttributes>(val) { }
        operator PropertyAttributes() { return value; }
        
        virtual const std::vector<PropertyAttributes>& GetValues() const override
        {
            static std::vector<PropertyAttributes> res =
            {
                PropertyAttributes::None,
                PropertyAttributes::SpecialName,
                PropertyAttributes::ReservedMask,
                PropertyAttributes::RTSpecialName,
                PropertyAttributes::HasDefault,
                PropertyAttributes::Reserved2,
                PropertyAttributes::Reserved3,
                PropertyAttributes::Reserved4,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("SpecialName"),
                _T("ReservedMask"),
                _T("RTSpecialName"),
                _T("HasDefault"),
                _T("Reserved2"),
                _T("Reserved3"),
                _T("Reserved4"),
            };
            return res;
        }
    };
    
    
    enum class ResourceAttributes
    {
        Public = 1,
        Private = 2,
    };
    
    struct ResourceAttributes_Impl : public cli::enumeration<ResourceAttributes>
    {
        ResourceAttributes_Impl(const ResourceAttributes& val) : cli::enumeration<ResourceAttributes>(val) { }
        operator ResourceAttributes() { return value; }
        
        virtual const std::vector<ResourceAttributes>& GetValues() const override
        {
            static std::vector<ResourceAttributes> res =
            {
                ResourceAttributes::Public,
                ResourceAttributes::Private,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Public"),
                _T("Private"),
            };
            return res;
        }
    };
    
    
    enum class ResourceLocation
    {
        Embedded = 1,
        ContainedInAnotherAssembly = 2,
        ContainedInManifestFile = 4,
    };
    
    struct ResourceLocation_Impl : public cli::enumeration<ResourceLocation>
    {
        ResourceLocation_Impl(const ResourceLocation& val) : cli::enumeration<ResourceLocation>(val) { }
        operator ResourceLocation() { return value; }
        
        virtual const std::vector<ResourceLocation>& GetValues() const override
        {
            static std::vector<ResourceLocation> res =
            {
                ResourceLocation::Embedded,
                ResourceLocation::ContainedInAnotherAssembly,
                ResourceLocation::ContainedInManifestFile,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Embedded"),
                _T("ContainedInAnotherAssembly"),
                _T("ContainedInManifestFile"),
            };
            return res;
        }
    };
    
    
    enum class TypeAttributes
    {
        VisibilityMask = 7,
        NotPublic = 0,
        Public = 1,
        NestedPublic = 2,
        NestedPrivate = 3,
        NestedFamily = 4,
        NestedAssembly = 5,
        NestedFamANDAssem = 6,
        NestedFamORAssem = 7,
        LayoutMask = 24,
        AutoLayout = 0,
        SequentialLayout = 8,
        ExplicitLayout = 16,
        ClassSemanticsMask = 32,
        Class = 0,
        Interface = 32,
        Abstract = 128,
        Sealed = 256,
        SpecialName = 1024,
        Import = 4096,
        Serializable = 8192,
        StringFormatMask = 196608,
        AnsiClass = 0,
        UnicodeClass = 65536,
        AutoClass = 131072,
        BeforeFieldInit = 1048576,
        ReservedMask = 264192,
        RTSpecialName = 2048,
        HasSecurity = 262144,
        CustomFormatClass = 196608,
        CustomFormatMask = 12582912,
    };
    
    struct TypeAttributes_Impl : public cli::enumeration<TypeAttributes>
    {
        TypeAttributes_Impl(const TypeAttributes& val) : cli::enumeration<TypeAttributes>(val) { }
        operator TypeAttributes() { return value; }
        
        virtual const std::vector<TypeAttributes>& GetValues() const override
        {
            static std::vector<TypeAttributes> res =
            {
                TypeAttributes::VisibilityMask,
                TypeAttributes::NotPublic,
                TypeAttributes::Public,
                TypeAttributes::NestedPublic,
                TypeAttributes::NestedPrivate,
                TypeAttributes::NestedFamily,
                TypeAttributes::NestedAssembly,
                TypeAttributes::NestedFamANDAssem,
                TypeAttributes::NestedFamORAssem,
                TypeAttributes::LayoutMask,
                TypeAttributes::AutoLayout,
                TypeAttributes::SequentialLayout,
                TypeAttributes::ExplicitLayout,
                TypeAttributes::ClassSemanticsMask,
                TypeAttributes::Class,
                TypeAttributes::Interface,
                TypeAttributes::Abstract,
                TypeAttributes::Sealed,
                TypeAttributes::SpecialName,
                TypeAttributes::Import,
                TypeAttributes::Serializable,
                TypeAttributes::StringFormatMask,
                TypeAttributes::AnsiClass,
                TypeAttributes::UnicodeClass,
                TypeAttributes::AutoClass,
                TypeAttributes::BeforeFieldInit,
                TypeAttributes::ReservedMask,
                TypeAttributes::RTSpecialName,
                TypeAttributes::HasSecurity,
                TypeAttributes::CustomFormatClass,
                TypeAttributes::CustomFormatMask,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("VisibilityMask"),
                _T("NotPublic"),
                _T("Public"),
                _T("NestedPublic"),
                _T("NestedPrivate"),
                _T("NestedFamily"),
                _T("NestedAssembly"),
                _T("NestedFamANDAssem"),
                _T("NestedFamORAssem"),
                _T("LayoutMask"),
                _T("AutoLayout"),
                _T("SequentialLayout"),
                _T("ExplicitLayout"),
                _T("ClassSemanticsMask"),
                _T("Class"),
                _T("Interface"),
                _T("Abstract"),
                _T("Sealed"),
                _T("SpecialName"),
                _T("Import"),
                _T("Serializable"),
                _T("StringFormatMask"),
                _T("AnsiClass"),
                _T("UnicodeClass"),
                _T("AutoClass"),
                _T("BeforeFieldInit"),
                _T("ReservedMask"),
                _T("RTSpecialName"),
                _T("HasSecurity"),
                _T("CustomFormatClass"),
                _T("CustomFormatMask"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    enum class NativeResourceType
    {
        None = 0,
        Unmanaged = 1,
        Assembly2 = 2,
        Explicit = 3,
    };
    
    struct NativeResourceType_Impl : public cli::enumeration<NativeResourceType>
    {
        NativeResourceType_Impl(const NativeResourceType& val) : cli::enumeration<NativeResourceType>(val) { }
        operator NativeResourceType() { return value; }
        
        virtual const std::vector<NativeResourceType>& GetValues() const override
        {
            static std::vector<NativeResourceType> res =
            {
                NativeResourceType::None,
                NativeResourceType::Unmanaged,
                NativeResourceType::Assembly2,
                NativeResourceType::Explicit,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Unmanaged"),
                _T("Assembly2"),
                _T("Explicit"),
            };
            return res;
        }
    };
    
    
    enum class AssemblyBuilderAccess
    {
        Run = 1,
        Save = 2,
        RunAndSave = 3,
        ReflectionOnly = 6,
        RunAndCollect = 9,
    };
    
    struct AssemblyBuilderAccess_Impl : public cli::enumeration<AssemblyBuilderAccess>
    {
        AssemblyBuilderAccess_Impl(const AssemblyBuilderAccess& val) : cli::enumeration<AssemblyBuilderAccess>(val) { }
        operator AssemblyBuilderAccess() { return value; }
        
        virtual const std::vector<AssemblyBuilderAccess>& GetValues() const override
        {
            static std::vector<AssemblyBuilderAccess> res =
            {
                AssemblyBuilderAccess::Run,
                AssemblyBuilderAccess::Save,
                AssemblyBuilderAccess::RunAndSave,
                AssemblyBuilderAccess::ReflectionOnly,
                AssemblyBuilderAccess::RunAndCollect,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Run"),
                _T("Save"),
                _T("RunAndSave"),
                _T("ReflectionOnly"),
                _T("RunAndCollect"),
            };
            return res;
        }
    };
    
    
    enum class TypeKind
    {
        SZARRAY = 29,
        ARRAY = 20,
    };
    
    struct TypeKind_Impl : public cli::enumeration<TypeKind>
    {
        TypeKind_Impl(const TypeKind& val) : cli::enumeration<TypeKind>(val) { }
        operator TypeKind() { return value; }
        
        virtual const std::vector<TypeKind>& GetValues() const override
        {
            static std::vector<TypeKind> res =
            {
                TypeKind::SZARRAY,
                TypeKind::ARRAY,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SZARRAY"),
                _T("ARRAY"),
            };
            return res;
        }
    };
    
    
    enum class FlowControl
    {
        Branch = 0,
        Break = 1,
        Call = 2,
        Cond_Branch = 3,
        Meta = 4,
        Next = 5,
        Phi = 6,
        Return = 7,
        Throw = 8,
    };
    
    struct FlowControl_Impl : public cli::enumeration<FlowControl>
    {
        FlowControl_Impl(const FlowControl& val) : cli::enumeration<FlowControl>(val) { }
        operator FlowControl() { return value; }
        
        virtual const std::vector<FlowControl>& GetValues() const override
        {
            static std::vector<FlowControl> res =
            {
                FlowControl::Branch,
                FlowControl::Break,
                FlowControl::Call,
                FlowControl::Cond_Branch,
                FlowControl::Meta,
                FlowControl::Next,
                FlowControl::Phi,
                FlowControl::Return,
                FlowControl::Throw,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Branch"),
                _T("Break"),
                _T("Call"),
                _T("Cond_Branch"),
                _T("Meta"),
                _T("Next"),
                _T("Phi"),
                _T("Return"),
                _T("Throw"),
            };
            return res;
        }
    };
    
    
    enum class OpCodeType
    {
        Annotation = 0,
        Macro = 1,
        Nternal = 2,
        Objmodel = 3,
        Prefix = 4,
        Primitive = 5,
    };
    
    struct OpCodeType_Impl : public cli::enumeration<OpCodeType>
    {
        OpCodeType_Impl(const OpCodeType& val) : cli::enumeration<OpCodeType>(val) { }
        operator OpCodeType() { return value; }
        
        virtual const std::vector<OpCodeType>& GetValues() const override
        {
            static std::vector<OpCodeType> res =
            {
                OpCodeType::Annotation,
                OpCodeType::Macro,
                OpCodeType::Nternal,
                OpCodeType::Objmodel,
                OpCodeType::Prefix,
                OpCodeType::Primitive,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Annotation"),
                _T("Macro"),
                _T("Nternal"),
                _T("Objmodel"),
                _T("Prefix"),
                _T("Primitive"),
            };
            return res;
        }
    };
    
    
    enum class OperandType
    {
        InlineBrTarget = 0,
        InlineField = 1,
        InlineI = 2,
        InlineI8 = 3,
        InlineMethod = 4,
        InlineNone = 5,
        InlinePhi = 6,
        InlineR = 7,
        InlineSig = 9,
        InlineString = 10,
        InlineSwitch = 11,
        InlineTok = 12,
        InlineType = 13,
        InlineVar = 14,
        ShortInlineBrTarget = 15,
        ShortInlineI = 16,
        ShortInlineR = 17,
        ShortInlineVar = 18,
    };
    
    struct OperandType_Impl : public cli::enumeration<OperandType>
    {
        OperandType_Impl(const OperandType& val) : cli::enumeration<OperandType>(val) { }
        operator OperandType() { return value; }
        
        virtual const std::vector<OperandType>& GetValues() const override
        {
            static std::vector<OperandType> res =
            {
                OperandType::InlineBrTarget,
                OperandType::InlineField,
                OperandType::InlineI,
                OperandType::InlineI8,
                OperandType::InlineMethod,
                OperandType::InlineNone,
                OperandType::InlinePhi,
                OperandType::InlineR,
                OperandType::InlineSig,
                OperandType::InlineString,
                OperandType::InlineSwitch,
                OperandType::InlineTok,
                OperandType::InlineType,
                OperandType::InlineVar,
                OperandType::ShortInlineBrTarget,
                OperandType::ShortInlineI,
                OperandType::ShortInlineR,
                OperandType::ShortInlineVar,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("InlineBrTarget"),
                _T("InlineField"),
                _T("InlineI"),
                _T("InlineI8"),
                _T("InlineMethod"),
                _T("InlineNone"),
                _T("InlinePhi"),
                _T("InlineR"),
                _T("InlineSig"),
                _T("InlineString"),
                _T("InlineSwitch"),
                _T("InlineTok"),
                _T("InlineType"),
                _T("InlineVar"),
                _T("ShortInlineBrTarget"),
                _T("ShortInlineI"),
                _T("ShortInlineR"),
                _T("ShortInlineVar"),
            };
            return res;
        }
    };
    
    
    enum class PackingSize
    {
        Unspecified = 0,
        Size1 = 1,
        Size2 = 2,
        Size4 = 4,
        Size8 = 8,
        Size16 = 16,
        Size32 = 32,
        Size64 = 64,
        Size128 = 128,
    };
    
    struct PackingSize_Impl : public cli::enumeration<PackingSize>
    {
        PackingSize_Impl(const PackingSize& val) : cli::enumeration<PackingSize>(val) { }
        operator PackingSize() { return value; }
        
        virtual const std::vector<PackingSize>& GetValues() const override
        {
            static std::vector<PackingSize> res =
            {
                PackingSize::Unspecified,
                PackingSize::Size1,
                PackingSize::Size2,
                PackingSize::Size4,
                PackingSize::Size8,
                PackingSize::Size16,
                PackingSize::Size32,
                PackingSize::Size64,
                PackingSize::Size128,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unspecified"),
                _T("Size1"),
                _T("Size2"),
                _T("Size4"),
                _T("Size8"),
                _T("Size16"),
                _T("Size32"),
                _T("Size64"),
                _T("Size128"),
            };
            return res;
        }
    };
    
    
    enum class PEFileKinds
    {
        Dll = 1,
        ConsoleApplication = 2,
        WindowApplication = 3,
    };
    
    struct PEFileKinds_Impl : public cli::enumeration<PEFileKinds>
    {
        PEFileKinds_Impl(const PEFileKinds& val) : cli::enumeration<PEFileKinds>(val) { }
        operator PEFileKinds() { return value; }
        
        virtual const std::vector<PEFileKinds>& GetValues() const override
        {
            static std::vector<PEFileKinds> res =
            {
                PEFileKinds::Dll,
                PEFileKinds::ConsoleApplication,
                PEFileKinds::WindowApplication,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Dll"),
                _T("ConsoleApplication"),
                _T("WindowApplication"),
            };
            return res;
        }
    };
    
    
    enum class SignatureHelperType
    {
        HELPER_FIELD = 0,
        HELPER_LOCAL = 1,
        HELPER_METHOD = 2,
        HELPER_PROPERTY = 3,
    };
    
    struct SignatureHelperType_Impl : public cli::enumeration<SignatureHelperType>
    {
        SignatureHelperType_Impl(const SignatureHelperType& val) : cli::enumeration<SignatureHelperType>(val) { }
        operator SignatureHelperType() { return value; }
        
        virtual const std::vector<SignatureHelperType>& GetValues() const override
        {
            static std::vector<SignatureHelperType> res =
            {
                SignatureHelperType::HELPER_FIELD,
                SignatureHelperType::HELPER_LOCAL,
                SignatureHelperType::HELPER_METHOD,
                SignatureHelperType::HELPER_PROPERTY,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("HELPER_FIELD"),
                _T("HELPER_LOCAL"),
                _T("HELPER_METHOD"),
                _T("HELPER_PROPERTY"),
            };
            return res;
        }
    };
    
    
    enum class StackBehaviour
    {
        Pop0 = 0,
        Pop1 = 1,
        Pop1_pop1 = 2,
        Popi = 3,
        Popi_pop1 = 4,
        Popi_popi = 5,
        Popi_popi8 = 6,
        Popi_popi_popi = 7,
        Popi_popr4 = 8,
        Popi_popr8 = 9,
        Popref = 10,
        Popref_pop1 = 11,
        Popref_popi = 12,
        Popref_popi_popi = 13,
        Popref_popi_popi8 = 14,
        Popref_popi_popr4 = 15,
        Popref_popi_popr8 = 16,
        Popref_popi_popref = 17,
        Push0 = 18,
        Push1 = 19,
        Push1_push1 = 20,
        Pushi = 21,
        Pushi8 = 22,
        Pushr4 = 23,
        Pushr8 = 24,
        Pushref = 25,
        Varpop = 26,
        Varpush = 27,
        Popref_popi_pop1 = 28,
    };
    
    struct StackBehaviour_Impl : public cli::enumeration<StackBehaviour>
    {
        StackBehaviour_Impl(const StackBehaviour& val) : cli::enumeration<StackBehaviour>(val) { }
        operator StackBehaviour() { return value; }
        
        virtual const std::vector<StackBehaviour>& GetValues() const override
        {
            static std::vector<StackBehaviour> res =
            {
                StackBehaviour::Pop0,
                StackBehaviour::Pop1,
                StackBehaviour::Pop1_pop1,
                StackBehaviour::Popi,
                StackBehaviour::Popi_pop1,
                StackBehaviour::Popi_popi,
                StackBehaviour::Popi_popi8,
                StackBehaviour::Popi_popi_popi,
                StackBehaviour::Popi_popr4,
                StackBehaviour::Popi_popr8,
                StackBehaviour::Popref,
                StackBehaviour::Popref_pop1,
                StackBehaviour::Popref_popi,
                StackBehaviour::Popref_popi_popi,
                StackBehaviour::Popref_popi_popi8,
                StackBehaviour::Popref_popi_popr4,
                StackBehaviour::Popref_popi_popr8,
                StackBehaviour::Popref_popi_popref,
                StackBehaviour::Push0,
                StackBehaviour::Push1,
                StackBehaviour::Push1_push1,
                StackBehaviour::Pushi,
                StackBehaviour::Pushi8,
                StackBehaviour::Pushr4,
                StackBehaviour::Pushr8,
                StackBehaviour::Pushref,
                StackBehaviour::Varpop,
                StackBehaviour::Varpush,
                StackBehaviour::Popref_popi_pop1,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Pop0"),
                _T("Pop1"),
                _T("Pop1_pop1"),
                _T("Popi"),
                _T("Popi_pop1"),
                _T("Popi_popi"),
                _T("Popi_popi8"),
                _T("Popi_popi_popi"),
                _T("Popi_popr4"),
                _T("Popi_popr8"),
                _T("Popref"),
                _T("Popref_pop1"),
                _T("Popref_popi"),
                _T("Popref_popi_popi"),
                _T("Popref_popi_popi8"),
                _T("Popref_popi_popr4"),
                _T("Popref_popi_popr8"),
                _T("Popref_popi_popref"),
                _T("Push0"),
                _T("Push1"),
                _T("Push1_push1"),
                _T("Pushi"),
                _T("Pushi8"),
                _T("Pushr4"),
                _T("Pushr8"),
                _T("Pushref"),
                _T("Varpop"),
                _T("Varpush"),
                _T("Popref_popi_pop1"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Resources {
    
    enum class PredefinedResourceType
    {
        Null = 0,
        String2 = 1,
        Bool = 2,
        Char2 = 3,
        Byte2 = 4,
        SByte2 = 5,
        Int162 = 6,
        UInt162 = 7,
        Int322 = 8,
        UInt322 = 9,
        Int642 = 10,
        UInt642 = 11,
        Single2 = 12,
        Double2 = 13,
        Decimal2 = 14,
        DateTime2 = 15,
        TimeSpan2 = 16,
        ByteArray = 32,
        Stream2 = 33,
        FistCustom = 64,
    };
    
    struct PredefinedResourceType_Impl : public cli::enumeration<PredefinedResourceType>
    {
        PredefinedResourceType_Impl(const PredefinedResourceType& val) : cli::enumeration<PredefinedResourceType>(val) { }
        operator PredefinedResourceType() { return value; }
        
        virtual const std::vector<PredefinedResourceType>& GetValues() const override
        {
            static std::vector<PredefinedResourceType> res =
            {
                PredefinedResourceType::Null,
                PredefinedResourceType::String2,
                PredefinedResourceType::Bool,
                PredefinedResourceType::Char2,
                PredefinedResourceType::Byte2,
                PredefinedResourceType::SByte2,
                PredefinedResourceType::Int162,
                PredefinedResourceType::UInt162,
                PredefinedResourceType::Int322,
                PredefinedResourceType::UInt322,
                PredefinedResourceType::Int642,
                PredefinedResourceType::UInt642,
                PredefinedResourceType::Single2,
                PredefinedResourceType::Double2,
                PredefinedResourceType::Decimal2,
                PredefinedResourceType::DateTime2,
                PredefinedResourceType::TimeSpan2,
                PredefinedResourceType::ByteArray,
                PredefinedResourceType::Stream2,
                PredefinedResourceType::FistCustom,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Null"),
                _T("String2"),
                _T("Bool"),
                _T("Char2"),
                _T("Byte2"),
                _T("SByte2"),
                _T("Int162"),
                _T("UInt162"),
                _T("Int322"),
                _T("UInt322"),
                _T("Int642"),
                _T("UInt642"),
                _T("Single2"),
                _T("Double2"),
                _T("Decimal2"),
                _T("DateTime2"),
                _T("TimeSpan2"),
                _T("ByteArray"),
                _T("Stream2"),
                _T("FistCustom"),
            };
            return res;
        }
    };
    
    
    enum class UltimateResourceFallbackLocation
    {
        MainAssembly = 0,
        Satellite = 1,
    };
    
    struct UltimateResourceFallbackLocation_Impl : public cli::enumeration<UltimateResourceFallbackLocation>
    {
        UltimateResourceFallbackLocation_Impl(const UltimateResourceFallbackLocation& val) : cli::enumeration<UltimateResourceFallbackLocation>(val) { }
        operator UltimateResourceFallbackLocation() { return value; }
        
        virtual const std::vector<UltimateResourceFallbackLocation>& GetValues() const override
        {
            static std::vector<UltimateResourceFallbackLocation> res =
            {
                UltimateResourceFallbackLocation::MainAssembly,
                UltimateResourceFallbackLocation::Satellite,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MainAssembly"),
                _T("Satellite"),
            };
            return res;
        }
    };
    
    
    enum class Win32ResourceType
    {
        RT_CURSOR = 1,
        RT_FONT = 8,
        RT_BITMAP = 2,
        RT_ICON = 3,
        RT_MENU = 4,
        RT_DIALOG = 5,
        RT_STRING = 6,
        RT_FONTDIR = 7,
        RT_ACCELERATOR = 9,
        RT_RCDATA = 10,
        RT_MESSAGETABLE = 11,
        RT_GROUP_CURSOR = 12,
        RT_GROUP_ICON = 14,
        RT_VERSION = 16,
        RT_DLGINCLUDE = 17,
        RT_PLUGPLAY = 19,
        RT_VXD = 20,
        RT_ANICURSOR = 21,
        RT_ANIICON = 22,
        RT_HTML = 23,
    };
    
    struct Win32ResourceType_Impl : public cli::enumeration<Win32ResourceType>
    {
        Win32ResourceType_Impl(const Win32ResourceType& val) : cli::enumeration<Win32ResourceType>(val) { }
        operator Win32ResourceType() { return value; }
        
        virtual const std::vector<Win32ResourceType>& GetValues() const override
        {
            static std::vector<Win32ResourceType> res =
            {
                Win32ResourceType::RT_CURSOR,
                Win32ResourceType::RT_FONT,
                Win32ResourceType::RT_BITMAP,
                Win32ResourceType::RT_ICON,
                Win32ResourceType::RT_MENU,
                Win32ResourceType::RT_DIALOG,
                Win32ResourceType::RT_STRING,
                Win32ResourceType::RT_FONTDIR,
                Win32ResourceType::RT_ACCELERATOR,
                Win32ResourceType::RT_RCDATA,
                Win32ResourceType::RT_MESSAGETABLE,
                Win32ResourceType::RT_GROUP_CURSOR,
                Win32ResourceType::RT_GROUP_ICON,
                Win32ResourceType::RT_VERSION,
                Win32ResourceType::RT_DLGINCLUDE,
                Win32ResourceType::RT_PLUGPLAY,
                Win32ResourceType::RT_VXD,
                Win32ResourceType::RT_ANICURSOR,
                Win32ResourceType::RT_ANIICON,
                Win32ResourceType::RT_HTML,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("RT_CURSOR"),
                _T("RT_FONT"),
                _T("RT_BITMAP"),
                _T("RT_ICON"),
                _T("RT_MENU"),
                _T("RT_DIALOG"),
                _T("RT_STRING"),
                _T("RT_FONTDIR"),
                _T("RT_ACCELERATOR"),
                _T("RT_RCDATA"),
                _T("RT_MESSAGETABLE"),
                _T("RT_GROUP_CURSOR"),
                _T("RT_GROUP_ICON"),
                _T("RT_VERSION"),
                _T("RT_DLGINCLUDE"),
                _T("RT_PLUGPLAY"),
                _T("RT_VXD"),
                _T("RT_ANICURSOR"),
                _T("RT_ANIICON"),
                _T("RT_HTML"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Runtime {
    
    enum class GCLatencyMode
    {
        Batch = 0,
        Interactive = 1,
        LowLatency = 2,
    };
    
    struct GCLatencyMode_Impl : public cli::enumeration<GCLatencyMode>
    {
        GCLatencyMode_Impl(const GCLatencyMode& val) : cli::enumeration<GCLatencyMode>(val) { }
        operator GCLatencyMode() { return value; }
        
        virtual const std::vector<GCLatencyMode>& GetValues() const override
        {
            static std::vector<GCLatencyMode> res =
            {
                GCLatencyMode::Batch,
                GCLatencyMode::Interactive,
                GCLatencyMode::LowLatency,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Batch"),
                _T("Interactive"),
                _T("LowLatency"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    enum class CompilationRelaxations
    {
        NoStringInterning = 8,
    };
    
    struct CompilationRelaxations_Impl : public cli::enumeration<CompilationRelaxations>
    {
        CompilationRelaxations_Impl(const CompilationRelaxations& val) : cli::enumeration<CompilationRelaxations>(val) { }
        operator CompilationRelaxations() { return value; }
        
        virtual const std::vector<CompilationRelaxations>& GetValues() const override
        {
            static std::vector<CompilationRelaxations> res =
            {
                CompilationRelaxations::NoStringInterning,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoStringInterning"),
            };
            return res;
        }
    };
    
    
    enum class LoadHint
    {
        Default2 = 0,
        Always = 1,
        Sometimes = 2,
    };
    
    struct LoadHint_Impl : public cli::enumeration<LoadHint>
    {
        LoadHint_Impl(const LoadHint& val) : cli::enumeration<LoadHint>(val) { }
        operator LoadHint() { return value; }
        
        virtual const std::vector<LoadHint>& GetValues() const override
        {
            static std::vector<LoadHint> res =
            {
                LoadHint::Default2,
                LoadHint::Always,
                LoadHint::Sometimes,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Default2"),
                _T("Always"),
                _T("Sometimes"),
            };
            return res;
        }
    };
    
    
    enum class MethodCodeType
    {
        IL = 0,
        Native = 1,
        OPTIL = 2,
        Runtime2 = 3,
    };
    
    struct MethodCodeType_Impl : public cli::enumeration<MethodCodeType>
    {
        MethodCodeType_Impl(const MethodCodeType& val) : cli::enumeration<MethodCodeType>(val) { }
        operator MethodCodeType() { return value; }
        
        virtual const std::vector<MethodCodeType>& GetValues() const override
        {
            static std::vector<MethodCodeType> res =
            {
                MethodCodeType::IL,
                MethodCodeType::Native,
                MethodCodeType::OPTIL,
                MethodCodeType::Runtime2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IL"),
                _T("Native"),
                _T("OPTIL"),
                _T("Runtime2"),
            };
            return res;
        }
    };
    
    
    enum class MethodImplOptions
    {
        Unmanaged = 4,
        ForwardRef = 16,
        InternalCall = 4096,
        Synchronized = 32,
        NoInlining = 8,
        PreserveSig = 128,
        NoOptimization = 64,
    };
    
    struct MethodImplOptions_Impl : public cli::enumeration<MethodImplOptions>
    {
        MethodImplOptions_Impl(const MethodImplOptions& val) : cli::enumeration<MethodImplOptions>(val) { }
        operator MethodImplOptions() { return value; }
        
        virtual const std::vector<MethodImplOptions>& GetValues() const override
        {
            static std::vector<MethodImplOptions> res =
            {
                MethodImplOptions::Unmanaged,
                MethodImplOptions::ForwardRef,
                MethodImplOptions::InternalCall,
                MethodImplOptions::Synchronized,
                MethodImplOptions::NoInlining,
                MethodImplOptions::PreserveSig,
                MethodImplOptions::NoOptimization,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unmanaged"),
                _T("ForwardRef"),
                _T("InternalCall"),
                _T("Synchronized"),
                _T("NoInlining"),
                _T("PreserveSig"),
                _T("NoOptimization"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    enum class Cer
    {
        None = 0,
        MayFail = 1,
        Success = 2,
    };
    
    struct Cer_Impl : public cli::enumeration<Cer>
    {
        Cer_Impl(const Cer& val) : cli::enumeration<Cer>(val) { }
        operator Cer() { return value; }
        
        virtual const std::vector<Cer>& GetValues() const override
        {
            static std::vector<Cer> res =
            {
                Cer::None,
                Cer::MayFail,
                Cer::Success,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("MayFail"),
                _T("Success"),
            };
            return res;
        }
    };
    
    
    enum class Consistency
    {
        MayCorruptAppDomain = 1,
        MayCorruptInstance = 2,
        MayCorruptProcess = 0,
        WillNotCorruptState = 3,
    };
    
    struct Consistency_Impl : public cli::enumeration<Consistency>
    {
        Consistency_Impl(const Consistency& val) : cli::enumeration<Consistency>(val) { }
        operator Consistency() { return value; }
        
        virtual const std::vector<Consistency>& GetValues() const override
        {
            static std::vector<Consistency> res =
            {
                Consistency::MayCorruptAppDomain,
                Consistency::MayCorruptInstance,
                Consistency::MayCorruptProcess,
                Consistency::WillNotCorruptState,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MayCorruptAppDomain"),
                _T("MayCorruptInstance"),
                _T("MayCorruptProcess"),
                _T("WillNotCorruptState"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    enum class AssemblyRegistrationFlags
    {
        None = 0,
        SetCodeBase = 1,
    };
    
    struct AssemblyRegistrationFlags_Impl : public cli::enumeration<AssemblyRegistrationFlags>
    {
        AssemblyRegistrationFlags_Impl(const AssemblyRegistrationFlags& val) : cli::enumeration<AssemblyRegistrationFlags>(val) { }
        operator AssemblyRegistrationFlags() { return value; }
        
        virtual const std::vector<AssemblyRegistrationFlags>& GetValues() const override
        {
            static std::vector<AssemblyRegistrationFlags> res =
            {
                AssemblyRegistrationFlags::None,
                AssemblyRegistrationFlags::SetCodeBase,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("SetCodeBase"),
            };
            return res;
        }
    };
    
    
    enum class CALLCONV
    {
        CC_CDECL = 1,
        CC_PASCAL = 2,
        CC_MSCPASCAL = 2,
        CC_MACPASCAL = 3,
        CC_STDCALL = 4,
        CC_RESERVED = 5,
        CC_SYSCALL = 6,
        CC_MPWCDECL = 7,
        CC_MPWPASCAL = 8,
        CC_MAX = 9,
    };
    
    struct CALLCONV_Impl : public cli::enumeration<CALLCONV>
    {
        CALLCONV_Impl(const CALLCONV& val) : cli::enumeration<CALLCONV>(val) { }
        operator CALLCONV() { return value; }
        
        virtual const std::vector<CALLCONV>& GetValues() const override
        {
            static std::vector<CALLCONV> res =
            {
                CALLCONV::CC_CDECL,
                CALLCONV::CC_PASCAL,
                CALLCONV::CC_MSCPASCAL,
                CALLCONV::CC_MACPASCAL,
                CALLCONV::CC_STDCALL,
                CALLCONV::CC_RESERVED,
                CALLCONV::CC_SYSCALL,
                CALLCONV::CC_MPWCDECL,
                CALLCONV::CC_MPWPASCAL,
                CALLCONV::CC_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CC_CDECL"),
                _T("CC_PASCAL"),
                _T("CC_MSCPASCAL"),
                _T("CC_MACPASCAL"),
                _T("CC_STDCALL"),
                _T("CC_RESERVED"),
                _T("CC_SYSCALL"),
                _T("CC_MPWCDECL"),
                _T("CC_MPWPASCAL"),
                _T("CC_MAX"),
            };
            return res;
        }
    };
    
    
    enum class CallingConvention
    {
        Winapi = 1,
        Cdecl = 2,
        StdCall = 3,
        ThisCall = 4,
        FastCall = 5,
    };
    
    struct CallingConvention_Impl : public cli::enumeration<CallingConvention>
    {
        CallingConvention_Impl(const CallingConvention& val) : cli::enumeration<CallingConvention>(val) { }
        operator CallingConvention() { return value; }
        
        virtual const std::vector<CallingConvention>& GetValues() const override
        {
            static std::vector<CallingConvention> res =
            {
                CallingConvention::Winapi,
                CallingConvention::Cdecl,
                CallingConvention::StdCall,
                CallingConvention::ThisCall,
                CallingConvention::FastCall,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Winapi"),
                _T("Cdecl"),
                _T("StdCall"),
                _T("ThisCall"),
                _T("FastCall"),
            };
            return res;
        }
    };
    
    
    enum class CharSet
    {
        None = 1,
        Ansi = 2,
        Unicode = 3,
        Auto = 4,
    };
    
    struct CharSet_Impl : public cli::enumeration<CharSet>
    {
        CharSet_Impl(const CharSet& val) : cli::enumeration<CharSet>(val) { }
        operator CharSet() { return value; }
        
        virtual const std::vector<CharSet>& GetValues() const override
        {
            static std::vector<CharSet> res =
            {
                CharSet::None,
                CharSet::Ansi,
                CharSet::Unicode,
                CharSet::Auto,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Ansi"),
                _T("Unicode"),
                _T("Auto"),
            };
            return res;
        }
    };
    
    
    enum class ClassInterfaceType
    {
        None = 0,
        AutoDispatch = 1,
        AutoDual = 2,
    };
    
    struct ClassInterfaceType_Impl : public cli::enumeration<ClassInterfaceType>
    {
        ClassInterfaceType_Impl(const ClassInterfaceType& val) : cli::enumeration<ClassInterfaceType>(val) { }
        operator ClassInterfaceType() { return value; }
        
        virtual const std::vector<ClassInterfaceType>& GetValues() const override
        {
            static std::vector<ClassInterfaceType> res =
            {
                ClassInterfaceType::None,
                ClassInterfaceType::AutoDispatch,
                ClassInterfaceType::AutoDual,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("AutoDispatch"),
                _T("AutoDual"),
            };
            return res;
        }
    };
    
    
    enum class ComInterfaceType
    {
        InterfaceIsDual = 0,
        InterfaceIsIUnknown = 1,
        InterfaceIsIDispatch = 2,
    };
    
    struct ComInterfaceType_Impl : public cli::enumeration<ComInterfaceType>
    {
        ComInterfaceType_Impl(const ComInterfaceType& val) : cli::enumeration<ComInterfaceType>(val) { }
        operator ComInterfaceType() { return value; }
        
        virtual const std::vector<ComInterfaceType>& GetValues() const override
        {
            static std::vector<ComInterfaceType> res =
            {
                ComInterfaceType::InterfaceIsDual,
                ComInterfaceType::InterfaceIsIUnknown,
                ComInterfaceType::InterfaceIsIDispatch,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("InterfaceIsDual"),
                _T("InterfaceIsIUnknown"),
                _T("InterfaceIsIDispatch"),
            };
            return res;
        }
    };
    
    
    enum class ComMemberType
    {
        Method = 0,
        PropGet = 1,
        PropSet = 2,
    };
    
    struct ComMemberType_Impl : public cli::enumeration<ComMemberType>
    {
        ComMemberType_Impl(const ComMemberType& val) : cli::enumeration<ComMemberType>(val) { }
        operator ComMemberType() { return value; }
        
        virtual const std::vector<ComMemberType>& GetValues() const override
        {
            static std::vector<ComMemberType> res =
            {
                ComMemberType::Method,
                ComMemberType::PropGet,
                ComMemberType::PropSet,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Method"),
                _T("PropGet"),
                _T("PropSet"),
            };
            return res;
        }
    };
    
    
    enum class DESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = 1,
        DESCKIND_VARDESC = 2,
        DESCKIND_TYPECOMP = 3,
        DESCKIND_IMPLICITAPPOBJ = 4,
        DESCKIND_MAX = 5,
    };
    
    struct DESCKIND_Impl : public cli::enumeration<DESCKIND>
    {
        DESCKIND_Impl(const DESCKIND& val) : cli::enumeration<DESCKIND>(val) { }
        operator DESCKIND() { return value; }
        
        virtual const std::vector<DESCKIND>& GetValues() const override
        {
            static std::vector<DESCKIND> res =
            {
                DESCKIND::DESCKIND_NONE,
                DESCKIND::DESCKIND_FUNCDESC,
                DESCKIND::DESCKIND_VARDESC,
                DESCKIND::DESCKIND_TYPECOMP,
                DESCKIND::DESCKIND_IMPLICITAPPOBJ,
                DESCKIND::DESCKIND_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DESCKIND_NONE"),
                _T("DESCKIND_FUNCDESC"),
                _T("DESCKIND_VARDESC"),
                _T("DESCKIND_TYPECOMP"),
                _T("DESCKIND_IMPLICITAPPOBJ"),
                _T("DESCKIND_MAX"),
            };
            return res;
        }
    };
    
    
    enum class ExporterEventKind
    {
        NOTIF_TYPECONVERTED = 0,
        NOTIF_CONVERTWARNING = 1,
        ERROR_REFTOINVALIDASSEMBLY = 2,
    };
    
    struct ExporterEventKind_Impl : public cli::enumeration<ExporterEventKind>
    {
        ExporterEventKind_Impl(const ExporterEventKind& val) : cli::enumeration<ExporterEventKind>(val) { }
        operator ExporterEventKind() { return value; }
        
        virtual const std::vector<ExporterEventKind>& GetValues() const override
        {
            static std::vector<ExporterEventKind> res =
            {
                ExporterEventKind::NOTIF_TYPECONVERTED,
                ExporterEventKind::NOTIF_CONVERTWARNING,
                ExporterEventKind::ERROR_REFTOINVALIDASSEMBLY,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NOTIF_TYPECONVERTED"),
                _T("NOTIF_CONVERTWARNING"),
                _T("ERROR_REFTOINVALIDASSEMBLY"),
            };
            return res;
        }
    };
    
    
    enum class FUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 1,
        FUNCFLAG_FSOURCE = 2,
        FUNCFLAG_FBINDABLE = 4,
        FUNCFLAG_FREQUESTEDIT = 8,
        FUNCFLAG_FDISPLAYBIND = 16,
        FUNCFLAG_FDEFAULTBIND = 32,
        FUNCFLAG_FHIDDEN = 64,
        FUNCFLAG_FUSESGETLASTERROR = 128,
        FUNCFLAG_FDEFAULTCOLLELEM = 256,
        FUNCFLAG_FUIDEFAULT = 512,
        FUNCFLAG_FNONBROWSABLE = 1024,
        FUNCFLAG_FREPLACEABLE = 2048,
        FUNCFLAG_FIMMEDIATEBIND = 4096,
    };
    
    struct FUNCFLAGS_Impl : public cli::enumeration<FUNCFLAGS>
    {
        FUNCFLAGS_Impl(const FUNCFLAGS& val) : cli::enumeration<FUNCFLAGS>(val) { }
        operator FUNCFLAGS() { return value; }
        
        virtual const std::vector<FUNCFLAGS>& GetValues() const override
        {
            static std::vector<FUNCFLAGS> res =
            {
                FUNCFLAGS::FUNCFLAG_FRESTRICTED,
                FUNCFLAGS::FUNCFLAG_FSOURCE,
                FUNCFLAGS::FUNCFLAG_FBINDABLE,
                FUNCFLAGS::FUNCFLAG_FREQUESTEDIT,
                FUNCFLAGS::FUNCFLAG_FDISPLAYBIND,
                FUNCFLAGS::FUNCFLAG_FDEFAULTBIND,
                FUNCFLAGS::FUNCFLAG_FHIDDEN,
                FUNCFLAGS::FUNCFLAG_FUSESGETLASTERROR,
                FUNCFLAGS::FUNCFLAG_FDEFAULTCOLLELEM,
                FUNCFLAGS::FUNCFLAG_FUIDEFAULT,
                FUNCFLAGS::FUNCFLAG_FNONBROWSABLE,
                FUNCFLAGS::FUNCFLAG_FREPLACEABLE,
                FUNCFLAGS::FUNCFLAG_FIMMEDIATEBIND,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FUNCFLAG_FRESTRICTED"),
                _T("FUNCFLAG_FSOURCE"),
                _T("FUNCFLAG_FBINDABLE"),
                _T("FUNCFLAG_FREQUESTEDIT"),
                _T("FUNCFLAG_FDISPLAYBIND"),
                _T("FUNCFLAG_FDEFAULTBIND"),
                _T("FUNCFLAG_FHIDDEN"),
                _T("FUNCFLAG_FUSESGETLASTERROR"),
                _T("FUNCFLAG_FDEFAULTCOLLELEM"),
                _T("FUNCFLAG_FUIDEFAULT"),
                _T("FUNCFLAG_FNONBROWSABLE"),
                _T("FUNCFLAG_FREPLACEABLE"),
                _T("FUNCFLAG_FIMMEDIATEBIND"),
            };
            return res;
        }
    };
    
    
    enum class FUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = 1,
        FUNC_NONVIRTUAL = 2,
        FUNC_STATIC = 3,
        FUNC_DISPATCH = 4,
    };
    
    struct FUNCKIND_Impl : public cli::enumeration<FUNCKIND>
    {
        FUNCKIND_Impl(const FUNCKIND& val) : cli::enumeration<FUNCKIND>(val) { }
        operator FUNCKIND() { return value; }
        
        virtual const std::vector<FUNCKIND>& GetValues() const override
        {
            static std::vector<FUNCKIND> res =
            {
                FUNCKIND::FUNC_VIRTUAL,
                FUNCKIND::FUNC_PUREVIRTUAL,
                FUNCKIND::FUNC_NONVIRTUAL,
                FUNCKIND::FUNC_STATIC,
                FUNCKIND::FUNC_DISPATCH,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FUNC_VIRTUAL"),
                _T("FUNC_PUREVIRTUAL"),
                _T("FUNC_NONVIRTUAL"),
                _T("FUNC_STATIC"),
                _T("FUNC_DISPATCH"),
            };
            return res;
        }
    };
    
    
    enum class GCHandleType
    {
        Weak = 0,
        WeakTrackResurrection = 1,
        Normal = 2,
        Pinned = 3,
    };
    
    struct GCHandleType_Impl : public cli::enumeration<GCHandleType>
    {
        GCHandleType_Impl(const GCHandleType& val) : cli::enumeration<GCHandleType>(val) { }
        operator GCHandleType() { return value; }
        
        virtual const std::vector<GCHandleType>& GetValues() const override
        {
            static std::vector<GCHandleType> res =
            {
                GCHandleType::Weak,
                GCHandleType::WeakTrackResurrection,
                GCHandleType::Normal,
                GCHandleType::Pinned,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Weak"),
                _T("WeakTrackResurrection"),
                _T("Normal"),
                _T("Pinned"),
            };
            return res;
        }
    };
    
    
    enum class IDispatchImplType
    {
        SystemDefinedImpl = 0,
        InternalImpl = 1,
        CompatibleImpl = 2,
    };
    
    struct IDispatchImplType_Impl : public cli::enumeration<IDispatchImplType>
    {
        IDispatchImplType_Impl(const IDispatchImplType& val) : cli::enumeration<IDispatchImplType>(val) { }
        operator IDispatchImplType() { return value; }
        
        virtual const std::vector<IDispatchImplType>& GetValues() const override
        {
            static std::vector<IDispatchImplType> res =
            {
                IDispatchImplType::SystemDefinedImpl,
                IDispatchImplType::InternalImpl,
                IDispatchImplType::CompatibleImpl,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SystemDefinedImpl"),
                _T("InternalImpl"),
                _T("CompatibleImpl"),
            };
            return res;
        }
    };
    
    
    enum class IDLFLAG
    {
        IDLFLAG_NONE = 0,
        IDLFLAG_FIN = 1,
        IDLFLAG_FOUT = 2,
        IDLFLAG_FLCID = 4,
        IDLFLAG_FRETVAL = 8,
    };
    
    struct IDLFLAG_Impl : public cli::enumeration<IDLFLAG>
    {
        IDLFLAG_Impl(const IDLFLAG& val) : cli::enumeration<IDLFLAG>(val) { }
        operator IDLFLAG() { return value; }
        
        virtual const std::vector<IDLFLAG>& GetValues() const override
        {
            static std::vector<IDLFLAG> res =
            {
                IDLFLAG::IDLFLAG_NONE,
                IDLFLAG::IDLFLAG_FIN,
                IDLFLAG::IDLFLAG_FOUT,
                IDLFLAG::IDLFLAG_FLCID,
                IDLFLAG::IDLFLAG_FRETVAL,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IDLFLAG_NONE"),
                _T("IDLFLAG_FIN"),
                _T("IDLFLAG_FOUT"),
                _T("IDLFLAG_FLCID"),
                _T("IDLFLAG_FRETVAL"),
            };
            return res;
        }
    };
    
    
    enum class IMPLTYPEFLAGS
    {
        IMPLTYPEFLAG_FDEFAULT = 1,
        IMPLTYPEFLAG_FSOURCE = 2,
        IMPLTYPEFLAG_FRESTRICTED = 4,
        IMPLTYPEFLAG_FDEFAULTVTABLE = 8,
    };
    
    struct IMPLTYPEFLAGS_Impl : public cli::enumeration<IMPLTYPEFLAGS>
    {
        IMPLTYPEFLAGS_Impl(const IMPLTYPEFLAGS& val) : cli::enumeration<IMPLTYPEFLAGS>(val) { }
        operator IMPLTYPEFLAGS() { return value; }
        
        virtual const std::vector<IMPLTYPEFLAGS>& GetValues() const override
        {
            static std::vector<IMPLTYPEFLAGS> res =
            {
                IMPLTYPEFLAGS::IMPLTYPEFLAG_FDEFAULT,
                IMPLTYPEFLAGS::IMPLTYPEFLAG_FSOURCE,
                IMPLTYPEFLAGS::IMPLTYPEFLAG_FRESTRICTED,
                IMPLTYPEFLAGS::IMPLTYPEFLAG_FDEFAULTVTABLE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IMPLTYPEFLAG_FDEFAULT"),
                _T("IMPLTYPEFLAG_FSOURCE"),
                _T("IMPLTYPEFLAG_FRESTRICTED"),
                _T("IMPLTYPEFLAG_FDEFAULTVTABLE"),
            };
            return res;
        }
    };
    
    
    enum class ImporterEventKind
    {
        NOTIF_TYPECONVERTED = 0,
        NOTIF_CONVERTWARNING = 1,
        ERROR_REFTOINVALIDTYPELIB = 2,
    };
    
    struct ImporterEventKind_Impl : public cli::enumeration<ImporterEventKind>
    {
        ImporterEventKind_Impl(const ImporterEventKind& val) : cli::enumeration<ImporterEventKind>(val) { }
        operator ImporterEventKind() { return value; }
        
        virtual const std::vector<ImporterEventKind>& GetValues() const override
        {
            static std::vector<ImporterEventKind> res =
            {
                ImporterEventKind::NOTIF_TYPECONVERTED,
                ImporterEventKind::NOTIF_CONVERTWARNING,
                ImporterEventKind::ERROR_REFTOINVALIDTYPELIB,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NOTIF_TYPECONVERTED"),
                _T("NOTIF_CONVERTWARNING"),
                _T("ERROR_REFTOINVALIDTYPELIB"),
            };
            return res;
        }
    };
    
    
    enum class INVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8,
    };
    
    struct INVOKEKIND_Impl : public cli::enumeration<INVOKEKIND>
    {
        INVOKEKIND_Impl(const INVOKEKIND& val) : cli::enumeration<INVOKEKIND>(val) { }
        operator INVOKEKIND() { return value; }
        
        virtual const std::vector<INVOKEKIND>& GetValues() const override
        {
            static std::vector<INVOKEKIND> res =
            {
                INVOKEKIND::INVOKE_FUNC,
                INVOKEKIND::INVOKE_PROPERTYGET,
                INVOKEKIND::INVOKE_PROPERTYPUT,
                INVOKEKIND::INVOKE_PROPERTYPUTREF,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("INVOKE_FUNC"),
                _T("INVOKE_PROPERTYGET"),
                _T("INVOKE_PROPERTYPUT"),
                _T("INVOKE_PROPERTYPUTREF"),
            };
            return res;
        }
    };
    
    
    enum class LayoutKind
    {
        Sequential = 0,
        Explicit = 2,
        Auto = 3,
    };
    
    struct LayoutKind_Impl : public cli::enumeration<LayoutKind>
    {
        LayoutKind_Impl(const LayoutKind& val) : cli::enumeration<LayoutKind>(val) { }
        operator LayoutKind() { return value; }
        
        virtual const std::vector<LayoutKind>& GetValues() const override
        {
            static std::vector<LayoutKind> res =
            {
                LayoutKind::Sequential,
                LayoutKind::Explicit,
                LayoutKind::Auto,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Sequential"),
                _T("Explicit"),
                _T("Auto"),
            };
            return res;
        }
    };
    
    
    enum class LIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 1,
        LIBFLAG_FCONTROL = 2,
        LIBFLAG_FHIDDEN = 4,
        LIBFLAG_FHASDISKIMAGE = 8,
    };
    
    struct LIBFLAGS_Impl : public cli::enumeration<LIBFLAGS>
    {
        LIBFLAGS_Impl(const LIBFLAGS& val) : cli::enumeration<LIBFLAGS>(val) { }
        operator LIBFLAGS() { return value; }
        
        virtual const std::vector<LIBFLAGS>& GetValues() const override
        {
            static std::vector<LIBFLAGS> res =
            {
                LIBFLAGS::LIBFLAG_FRESTRICTED,
                LIBFLAGS::LIBFLAG_FCONTROL,
                LIBFLAGS::LIBFLAG_FHIDDEN,
                LIBFLAGS::LIBFLAG_FHASDISKIMAGE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("LIBFLAG_FRESTRICTED"),
                _T("LIBFLAG_FCONTROL"),
                _T("LIBFLAG_FHIDDEN"),
                _T("LIBFLAG_FHASDISKIMAGE"),
            };
            return res;
        }
    };
    
    
    enum class PARAMFLAG
    {
        PARAMFLAG_NONE = 0,
        PARAMFLAG_FIN = 1,
        PARAMFLAG_FOUT = 2,
        PARAMFLAG_FLCID = 4,
        PARAMFLAG_FRETVAL = 8,
        PARAMFLAG_FOPT = 16,
        PARAMFLAG_FHASDEFAULT = 32,
        PARAMFLAG_FHASCUSTDATA = 64,
    };
    
    struct PARAMFLAG_Impl : public cli::enumeration<PARAMFLAG>
    {
        PARAMFLAG_Impl(const PARAMFLAG& val) : cli::enumeration<PARAMFLAG>(val) { }
        operator PARAMFLAG() { return value; }
        
        virtual const std::vector<PARAMFLAG>& GetValues() const override
        {
            static std::vector<PARAMFLAG> res =
            {
                PARAMFLAG::PARAMFLAG_NONE,
                PARAMFLAG::PARAMFLAG_FIN,
                PARAMFLAG::PARAMFLAG_FOUT,
                PARAMFLAG::PARAMFLAG_FLCID,
                PARAMFLAG::PARAMFLAG_FRETVAL,
                PARAMFLAG::PARAMFLAG_FOPT,
                PARAMFLAG::PARAMFLAG_FHASDEFAULT,
                PARAMFLAG::PARAMFLAG_FHASCUSTDATA,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PARAMFLAG_NONE"),
                _T("PARAMFLAG_FIN"),
                _T("PARAMFLAG_FOUT"),
                _T("PARAMFLAG_FLCID"),
                _T("PARAMFLAG_FRETVAL"),
                _T("PARAMFLAG_FOPT"),
                _T("PARAMFLAG_FHASDEFAULT"),
                _T("PARAMFLAG_FHASCUSTDATA"),
            };
            return res;
        }
    };
    
    
    enum class RegistrationClassContext
    {
        DisableActivateAsActivator = 32768,
        EnableActivateAsActivator = 65536,
        EnableCodeDownload = 8192,
        FromDefaultContext = 131072,
        InProcessHandler = 2,
        InProcessHandler16 = 32,
        InProcessServer = 1,
        InProcessServer16 = 8,
        LocalServer = 4,
        NoCodeDownload = 1024,
        NoCustomMarshal = 4096,
        NoFailureLog = 16384,
        RemoteServer = 16,
        Reserved1 = 64,
        Reserved2 = 128,
        Reserved3 = 256,
        Reserved4 = 512,
        Reserved5 = 2048,
    };
    
    struct RegistrationClassContext_Impl : public cli::enumeration<RegistrationClassContext>
    {
        RegistrationClassContext_Impl(const RegistrationClassContext& val) : cli::enumeration<RegistrationClassContext>(val) { }
        operator RegistrationClassContext() { return value; }
        
        virtual const std::vector<RegistrationClassContext>& GetValues() const override
        {
            static std::vector<RegistrationClassContext> res =
            {
                RegistrationClassContext::DisableActivateAsActivator,
                RegistrationClassContext::EnableActivateAsActivator,
                RegistrationClassContext::EnableCodeDownload,
                RegistrationClassContext::FromDefaultContext,
                RegistrationClassContext::InProcessHandler,
                RegistrationClassContext::InProcessHandler16,
                RegistrationClassContext::InProcessServer,
                RegistrationClassContext::InProcessServer16,
                RegistrationClassContext::LocalServer,
                RegistrationClassContext::NoCodeDownload,
                RegistrationClassContext::NoCustomMarshal,
                RegistrationClassContext::NoFailureLog,
                RegistrationClassContext::RemoteServer,
                RegistrationClassContext::Reserved1,
                RegistrationClassContext::Reserved2,
                RegistrationClassContext::Reserved3,
                RegistrationClassContext::Reserved4,
                RegistrationClassContext::Reserved5,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DisableActivateAsActivator"),
                _T("EnableActivateAsActivator"),
                _T("EnableCodeDownload"),
                _T("FromDefaultContext"),
                _T("InProcessHandler"),
                _T("InProcessHandler16"),
                _T("InProcessServer"),
                _T("InProcessServer16"),
                _T("LocalServer"),
                _T("NoCodeDownload"),
                _T("NoCustomMarshal"),
                _T("NoFailureLog"),
                _T("RemoteServer"),
                _T("Reserved1"),
                _T("Reserved2"),
                _T("Reserved3"),
                _T("Reserved4"),
                _T("Reserved5"),
            };
            return res;
        }
    };
    
    
    enum class RegistrationConnectionType
    {
        MultipleUse = 1,
        MultiSeparate = 2,
        SingleUse = 0,
        Suspended = 4,
        Surrogate = 8,
    };
    
    struct RegistrationConnectionType_Impl : public cli::enumeration<RegistrationConnectionType>
    {
        RegistrationConnectionType_Impl(const RegistrationConnectionType& val) : cli::enumeration<RegistrationConnectionType>(val) { }
        operator RegistrationConnectionType() { return value; }
        
        virtual const std::vector<RegistrationConnectionType>& GetValues() const override
        {
            static std::vector<RegistrationConnectionType> res =
            {
                RegistrationConnectionType::MultipleUse,
                RegistrationConnectionType::MultiSeparate,
                RegistrationConnectionType::SingleUse,
                RegistrationConnectionType::Suspended,
                RegistrationConnectionType::Surrogate,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MultipleUse"),
                _T("MultiSeparate"),
                _T("SingleUse"),
                _T("Suspended"),
                _T("Surrogate"),
            };
            return res;
        }
    };
    
    
    enum class SYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = 1,
        SYS_MAC = 2,
    };
    
    struct SYSKIND_Impl : public cli::enumeration<SYSKIND>
    {
        SYSKIND_Impl(const SYSKIND& val) : cli::enumeration<SYSKIND>(val) { }
        operator SYSKIND() { return value; }
        
        virtual const std::vector<SYSKIND>& GetValues() const override
        {
            static std::vector<SYSKIND> res =
            {
                SYSKIND::SYS_WIN16,
                SYSKIND::SYS_WIN32,
                SYSKIND::SYS_MAC,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SYS_WIN16"),
                _T("SYS_WIN32"),
                _T("SYS_MAC"),
            };
            return res;
        }
    };
    
    
    enum class TYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 1,
        TYPEFLAG_FCANCREATE = 2,
        TYPEFLAG_FLICENSED = 4,
        TYPEFLAG_FPREDECLID = 8,
        TYPEFLAG_FHIDDEN = 16,
        TYPEFLAG_FCONTROL = 32,
        TYPEFLAG_FDUAL = 64,
        TYPEFLAG_FNONEXTENSIBLE = 128,
        TYPEFLAG_FOLEAUTOMATION = 256,
        TYPEFLAG_FRESTRICTED = 512,
        TYPEFLAG_FAGGREGATABLE = 1024,
        TYPEFLAG_FREPLACEABLE = 2048,
        TYPEFLAG_FDISPATCHABLE = 4096,
        TYPEFLAG_FREVERSEBIND = 8192,
        TYPEFLAG_FPROXY = 16384,
    };
    
    struct TYPEFLAGS_Impl : public cli::enumeration<TYPEFLAGS>
    {
        TYPEFLAGS_Impl(const TYPEFLAGS& val) : cli::enumeration<TYPEFLAGS>(val) { }
        operator TYPEFLAGS() { return value; }
        
        virtual const std::vector<TYPEFLAGS>& GetValues() const override
        {
            static std::vector<TYPEFLAGS> res =
            {
                TYPEFLAGS::TYPEFLAG_FAPPOBJECT,
                TYPEFLAGS::TYPEFLAG_FCANCREATE,
                TYPEFLAGS::TYPEFLAG_FLICENSED,
                TYPEFLAGS::TYPEFLAG_FPREDECLID,
                TYPEFLAGS::TYPEFLAG_FHIDDEN,
                TYPEFLAGS::TYPEFLAG_FCONTROL,
                TYPEFLAGS::TYPEFLAG_FDUAL,
                TYPEFLAGS::TYPEFLAG_FNONEXTENSIBLE,
                TYPEFLAGS::TYPEFLAG_FOLEAUTOMATION,
                TYPEFLAGS::TYPEFLAG_FRESTRICTED,
                TYPEFLAGS::TYPEFLAG_FAGGREGATABLE,
                TYPEFLAGS::TYPEFLAG_FREPLACEABLE,
                TYPEFLAGS::TYPEFLAG_FDISPATCHABLE,
                TYPEFLAGS::TYPEFLAG_FREVERSEBIND,
                TYPEFLAGS::TYPEFLAG_FPROXY,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TYPEFLAG_FAPPOBJECT"),
                _T("TYPEFLAG_FCANCREATE"),
                _T("TYPEFLAG_FLICENSED"),
                _T("TYPEFLAG_FPREDECLID"),
                _T("TYPEFLAG_FHIDDEN"),
                _T("TYPEFLAG_FCONTROL"),
                _T("TYPEFLAG_FDUAL"),
                _T("TYPEFLAG_FNONEXTENSIBLE"),
                _T("TYPEFLAG_FOLEAUTOMATION"),
                _T("TYPEFLAG_FRESTRICTED"),
                _T("TYPEFLAG_FAGGREGATABLE"),
                _T("TYPEFLAG_FREPLACEABLE"),
                _T("TYPEFLAG_FDISPATCHABLE"),
                _T("TYPEFLAG_FREVERSEBIND"),
                _T("TYPEFLAG_FPROXY"),
            };
            return res;
        }
    };
    
    
    enum class TYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = 1,
        TKIND_MODULE = 2,
        TKIND_INTERFACE = 3,
        TKIND_DISPATCH = 4,
        TKIND_COCLASS = 5,
        TKIND_ALIAS = 6,
        TKIND_UNION = 7,
        TKIND_MAX = 8,
    };
    
    struct TYPEKIND_Impl : public cli::enumeration<TYPEKIND>
    {
        TYPEKIND_Impl(const TYPEKIND& val) : cli::enumeration<TYPEKIND>(val) { }
        operator TYPEKIND() { return value; }
        
        virtual const std::vector<TYPEKIND>& GetValues() const override
        {
            static std::vector<TYPEKIND> res =
            {
                TYPEKIND::TKIND_ENUM,
                TYPEKIND::TKIND_RECORD,
                TYPEKIND::TKIND_MODULE,
                TYPEKIND::TKIND_INTERFACE,
                TYPEKIND::TKIND_DISPATCH,
                TYPEKIND::TKIND_COCLASS,
                TYPEKIND::TKIND_ALIAS,
                TYPEKIND::TKIND_UNION,
                TYPEKIND::TKIND_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TKIND_ENUM"),
                _T("TKIND_RECORD"),
                _T("TKIND_MODULE"),
                _T("TKIND_INTERFACE"),
                _T("TKIND_DISPATCH"),
                _T("TKIND_COCLASS"),
                _T("TKIND_ALIAS"),
                _T("TKIND_UNION"),
                _T("TKIND_MAX"),
            };
            return res;
        }
    };
    
    
    enum class TypeLibExporterFlags
    {
        OnlyReferenceRegistered = 1,
        None = 0,
        CallerResolvedReferences = 2,
        OldNames = 4,
        ExportAs32Bit = 16,
        ExportAs64Bit = 32,
    };
    
    struct TypeLibExporterFlags_Impl : public cli::enumeration<TypeLibExporterFlags>
    {
        TypeLibExporterFlags_Impl(const TypeLibExporterFlags& val) : cli::enumeration<TypeLibExporterFlags>(val) { }
        operator TypeLibExporterFlags() { return value; }
        
        virtual const std::vector<TypeLibExporterFlags>& GetValues() const override
        {
            static std::vector<TypeLibExporterFlags> res =
            {
                TypeLibExporterFlags::OnlyReferenceRegistered,
                TypeLibExporterFlags::None,
                TypeLibExporterFlags::CallerResolvedReferences,
                TypeLibExporterFlags::OldNames,
                TypeLibExporterFlags::ExportAs32Bit,
                TypeLibExporterFlags::ExportAs64Bit,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("OnlyReferenceRegistered"),
                _T("None"),
                _T("CallerResolvedReferences"),
                _T("OldNames"),
                _T("ExportAs32Bit"),
                _T("ExportAs64Bit"),
            };
            return res;
        }
    };
    
    
    enum class TypeLibFuncFlags
    {
        FRestricted = 1,
        FSource = 2,
        FBindable = 4,
        FRequestEdit = 8,
        FDisplayBind = 16,
        FDefaultBind = 32,
        FHidden = 64,
        FUsesGetLastError = 128,
        FDefaultCollelem = 256,
        FUiDefault = 512,
        FNonBrowsable = 1024,
        FReplaceable = 2048,
        FImmediateBind = 4096,
    };
    
    struct TypeLibFuncFlags_Impl : public cli::enumeration<TypeLibFuncFlags>
    {
        TypeLibFuncFlags_Impl(const TypeLibFuncFlags& val) : cli::enumeration<TypeLibFuncFlags>(val) { }
        operator TypeLibFuncFlags() { return value; }
        
        virtual const std::vector<TypeLibFuncFlags>& GetValues() const override
        {
            static std::vector<TypeLibFuncFlags> res =
            {
                TypeLibFuncFlags::FRestricted,
                TypeLibFuncFlags::FSource,
                TypeLibFuncFlags::FBindable,
                TypeLibFuncFlags::FRequestEdit,
                TypeLibFuncFlags::FDisplayBind,
                TypeLibFuncFlags::FDefaultBind,
                TypeLibFuncFlags::FHidden,
                TypeLibFuncFlags::FUsesGetLastError,
                TypeLibFuncFlags::FDefaultCollelem,
                TypeLibFuncFlags::FUiDefault,
                TypeLibFuncFlags::FNonBrowsable,
                TypeLibFuncFlags::FReplaceable,
                TypeLibFuncFlags::FImmediateBind,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FRestricted"),
                _T("FSource"),
                _T("FBindable"),
                _T("FRequestEdit"),
                _T("FDisplayBind"),
                _T("FDefaultBind"),
                _T("FHidden"),
                _T("FUsesGetLastError"),
                _T("FDefaultCollelem"),
                _T("FUiDefault"),
                _T("FNonBrowsable"),
                _T("FReplaceable"),
                _T("FImmediateBind"),
            };
            return res;
        }
    };
    
    
    enum class TypeLibImporterFlags
    {
        PrimaryInteropAssembly = 1,
        UnsafeInterfaces = 2,
        SafeArrayAsSystemArray = 4,
        TransformDispRetVals = 8,
        None = 0,
        PreventClassMembers = 16,
        ImportAsAgnostic = 2048,
        ImportAsItanium = 1024,
        ImportAsX64 = 512,
        ImportAsX86 = 256,
        ReflectionOnlyLoading = 4096,
        SerializableValueClasses = 32,
        NoDefineVersionResource = 8192,
    };
    
    struct TypeLibImporterFlags_Impl : public cli::enumeration<TypeLibImporterFlags>
    {
        TypeLibImporterFlags_Impl(const TypeLibImporterFlags& val) : cli::enumeration<TypeLibImporterFlags>(val) { }
        operator TypeLibImporterFlags() { return value; }
        
        virtual const std::vector<TypeLibImporterFlags>& GetValues() const override
        {
            static std::vector<TypeLibImporterFlags> res =
            {
                TypeLibImporterFlags::PrimaryInteropAssembly,
                TypeLibImporterFlags::UnsafeInterfaces,
                TypeLibImporterFlags::SafeArrayAsSystemArray,
                TypeLibImporterFlags::TransformDispRetVals,
                TypeLibImporterFlags::None,
                TypeLibImporterFlags::PreventClassMembers,
                TypeLibImporterFlags::ImportAsAgnostic,
                TypeLibImporterFlags::ImportAsItanium,
                TypeLibImporterFlags::ImportAsX64,
                TypeLibImporterFlags::ImportAsX86,
                TypeLibImporterFlags::ReflectionOnlyLoading,
                TypeLibImporterFlags::SerializableValueClasses,
                TypeLibImporterFlags::NoDefineVersionResource,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PrimaryInteropAssembly"),
                _T("UnsafeInterfaces"),
                _T("SafeArrayAsSystemArray"),
                _T("TransformDispRetVals"),
                _T("None"),
                _T("PreventClassMembers"),
                _T("ImportAsAgnostic"),
                _T("ImportAsItanium"),
                _T("ImportAsX64"),
                _T("ImportAsX86"),
                _T("ReflectionOnlyLoading"),
                _T("SerializableValueClasses"),
                _T("NoDefineVersionResource"),
            };
            return res;
        }
    };
    
    
    enum class TypeLibTypeFlags
    {
        FAppObject = 1,
        FCanCreate = 2,
        FLicensed = 4,
        FPreDeclId = 8,
        FHidden = 16,
        FControl = 32,
        FDual = 64,
        FNonExtensible = 128,
        FOleAutomation = 256,
        FRestricted = 512,
        FAggregatable = 1024,
        FReplaceable = 2048,
        FDispatchable = 4096,
        FReverseBind = 8192,
    };
    
    struct TypeLibTypeFlags_Impl : public cli::enumeration<TypeLibTypeFlags>
    {
        TypeLibTypeFlags_Impl(const TypeLibTypeFlags& val) : cli::enumeration<TypeLibTypeFlags>(val) { }
        operator TypeLibTypeFlags() { return value; }
        
        virtual const std::vector<TypeLibTypeFlags>& GetValues() const override
        {
            static std::vector<TypeLibTypeFlags> res =
            {
                TypeLibTypeFlags::FAppObject,
                TypeLibTypeFlags::FCanCreate,
                TypeLibTypeFlags::FLicensed,
                TypeLibTypeFlags::FPreDeclId,
                TypeLibTypeFlags::FHidden,
                TypeLibTypeFlags::FControl,
                TypeLibTypeFlags::FDual,
                TypeLibTypeFlags::FNonExtensible,
                TypeLibTypeFlags::FOleAutomation,
                TypeLibTypeFlags::FRestricted,
                TypeLibTypeFlags::FAggregatable,
                TypeLibTypeFlags::FReplaceable,
                TypeLibTypeFlags::FDispatchable,
                TypeLibTypeFlags::FReverseBind,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FAppObject"),
                _T("FCanCreate"),
                _T("FLicensed"),
                _T("FPreDeclId"),
                _T("FHidden"),
                _T("FControl"),
                _T("FDual"),
                _T("FNonExtensible"),
                _T("FOleAutomation"),
                _T("FRestricted"),
                _T("FAggregatable"),
                _T("FReplaceable"),
                _T("FDispatchable"),
                _T("FReverseBind"),
            };
            return res;
        }
    };
    
    
    enum class TypeLibVarFlags
    {
        FReadOnly = 1,
        FSource = 2,
        FBindable = 4,
        FRequestEdit = 8,
        FDisplayBind = 16,
        FDefaultBind = 32,
        FHidden = 64,
        FRestricted = 128,
        FDefaultCollelem = 256,
        FUiDefault = 512,
        FNonBrowsable = 1024,
        FReplaceable = 2048,
        FImmediateBind = 4096,
    };
    
    struct TypeLibVarFlags_Impl : public cli::enumeration<TypeLibVarFlags>
    {
        TypeLibVarFlags_Impl(const TypeLibVarFlags& val) : cli::enumeration<TypeLibVarFlags>(val) { }
        operator TypeLibVarFlags() { return value; }
        
        virtual const std::vector<TypeLibVarFlags>& GetValues() const override
        {
            static std::vector<TypeLibVarFlags> res =
            {
                TypeLibVarFlags::FReadOnly,
                TypeLibVarFlags::FSource,
                TypeLibVarFlags::FBindable,
                TypeLibVarFlags::FRequestEdit,
                TypeLibVarFlags::FDisplayBind,
                TypeLibVarFlags::FDefaultBind,
                TypeLibVarFlags::FHidden,
                TypeLibVarFlags::FRestricted,
                TypeLibVarFlags::FDefaultCollelem,
                TypeLibVarFlags::FUiDefault,
                TypeLibVarFlags::FNonBrowsable,
                TypeLibVarFlags::FReplaceable,
                TypeLibVarFlags::FImmediateBind,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FReadOnly"),
                _T("FSource"),
                _T("FBindable"),
                _T("FRequestEdit"),
                _T("FDisplayBind"),
                _T("FDefaultBind"),
                _T("FHidden"),
                _T("FRestricted"),
                _T("FDefaultCollelem"),
                _T("FUiDefault"),
                _T("FNonBrowsable"),
                _T("FReplaceable"),
                _T("FImmediateBind"),
            };
            return res;
        }
    };
    
    
    enum class UnmanagedType
    {
        Bool = 2,
        I1 = 3,
        U1 = 4,
        I2 = 5,
        U2 = 6,
        I4 = 7,
        U4 = 8,
        I8 = 9,
        U8 = 10,
        R4 = 11,
        R8 = 12,
        Currency = 15,
        BStr = 19,
        LPStr = 20,
        LPWStr = 21,
        LPTStr = 22,
        ByValTStr = 23,
        IUnknown2 = 25,
        IDispatch2 = 26,
        Struct = 27,
        Interface = 28,
        SafeArray = 29,
        ByValArray = 30,
        SysInt = 31,
        SysUInt = 32,
        VBByRefStr = 34,
        AnsiBStr = 35,
        TBStr = 36,
        VariantBool = 37,
        FunctionPtr = 38,
        AsAny = 40,
        LPArray = 42,
        LPStruct = 43,
        CustomMarshaler = 44,
        Error = 45,
    };
    
    struct UnmanagedType_Impl : public cli::enumeration<UnmanagedType>
    {
        UnmanagedType_Impl(const UnmanagedType& val) : cli::enumeration<UnmanagedType>(val) { }
        operator UnmanagedType() { return value; }
        
        virtual const std::vector<UnmanagedType>& GetValues() const override
        {
            static std::vector<UnmanagedType> res =
            {
                UnmanagedType::Bool,
                UnmanagedType::I1,
                UnmanagedType::U1,
                UnmanagedType::I2,
                UnmanagedType::U2,
                UnmanagedType::I4,
                UnmanagedType::U4,
                UnmanagedType::I8,
                UnmanagedType::U8,
                UnmanagedType::R4,
                UnmanagedType::R8,
                UnmanagedType::Currency,
                UnmanagedType::BStr,
                UnmanagedType::LPStr,
                UnmanagedType::LPWStr,
                UnmanagedType::LPTStr,
                UnmanagedType::ByValTStr,
                UnmanagedType::IUnknown2,
                UnmanagedType::IDispatch2,
                UnmanagedType::Struct,
                UnmanagedType::Interface,
                UnmanagedType::SafeArray,
                UnmanagedType::ByValArray,
                UnmanagedType::SysInt,
                UnmanagedType::SysUInt,
                UnmanagedType::VBByRefStr,
                UnmanagedType::AnsiBStr,
                UnmanagedType::TBStr,
                UnmanagedType::VariantBool,
                UnmanagedType::FunctionPtr,
                UnmanagedType::AsAny,
                UnmanagedType::LPArray,
                UnmanagedType::LPStruct,
                UnmanagedType::CustomMarshaler,
                UnmanagedType::Error,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Bool"),
                _T("I1"),
                _T("U1"),
                _T("I2"),
                _T("U2"),
                _T("I4"),
                _T("U4"),
                _T("I8"),
                _T("U8"),
                _T("R4"),
                _T("R8"),
                _T("Currency"),
                _T("BStr"),
                _T("LPStr"),
                _T("LPWStr"),
                _T("LPTStr"),
                _T("ByValTStr"),
                _T("IUnknown2"),
                _T("IDispatch2"),
                _T("Struct"),
                _T("Interface"),
                _T("SafeArray"),
                _T("ByValArray"),
                _T("SysInt"),
                _T("SysUInt"),
                _T("VBByRefStr"),
                _T("AnsiBStr"),
                _T("TBStr"),
                _T("VariantBool"),
                _T("FunctionPtr"),
                _T("AsAny"),
                _T("LPArray"),
                _T("LPStruct"),
                _T("CustomMarshaler"),
                _T("Error"),
            };
            return res;
        }
    };
    
    
    enum class VarEnum
    {
        VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_VECTOR = 4096,
        VT_ARRAY = 8192,
        VT_BYREF = 16384,
    };
    
    struct VarEnum_Impl : public cli::enumeration<VarEnum>
    {
        VarEnum_Impl(const VarEnum& val) : cli::enumeration<VarEnum>(val) { }
        operator VarEnum() { return value; }
        
        virtual const std::vector<VarEnum>& GetValues() const override
        {
            static std::vector<VarEnum> res =
            {
                VarEnum::VT_EMPTY,
                VarEnum::VT_NULL,
                VarEnum::VT_I2,
                VarEnum::VT_I4,
                VarEnum::VT_R4,
                VarEnum::VT_R8,
                VarEnum::VT_CY,
                VarEnum::VT_DATE,
                VarEnum::VT_BSTR,
                VarEnum::VT_DISPATCH,
                VarEnum::VT_ERROR,
                VarEnum::VT_BOOL,
                VarEnum::VT_VARIANT,
                VarEnum::VT_UNKNOWN,
                VarEnum::VT_DECIMAL,
                VarEnum::VT_I1,
                VarEnum::VT_UI1,
                VarEnum::VT_UI2,
                VarEnum::VT_UI4,
                VarEnum::VT_I8,
                VarEnum::VT_UI8,
                VarEnum::VT_INT,
                VarEnum::VT_UINT,
                VarEnum::VT_VOID,
                VarEnum::VT_HRESULT,
                VarEnum::VT_PTR,
                VarEnum::VT_SAFEARRAY,
                VarEnum::VT_CARRAY,
                VarEnum::VT_USERDEFINED,
                VarEnum::VT_LPSTR,
                VarEnum::VT_LPWSTR,
                VarEnum::VT_RECORD,
                VarEnum::VT_FILETIME,
                VarEnum::VT_BLOB,
                VarEnum::VT_STREAM,
                VarEnum::VT_STORAGE,
                VarEnum::VT_STREAMED_OBJECT,
                VarEnum::VT_STORED_OBJECT,
                VarEnum::VT_BLOB_OBJECT,
                VarEnum::VT_CF,
                VarEnum::VT_CLSID,
                VarEnum::VT_VECTOR,
                VarEnum::VT_ARRAY,
                VarEnum::VT_BYREF,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("VT_EMPTY"),
                _T("VT_NULL"),
                _T("VT_I2"),
                _T("VT_I4"),
                _T("VT_R4"),
                _T("VT_R8"),
                _T("VT_CY"),
                _T("VT_DATE"),
                _T("VT_BSTR"),
                _T("VT_DISPATCH"),
                _T("VT_ERROR"),
                _T("VT_BOOL"),
                _T("VT_VARIANT"),
                _T("VT_UNKNOWN"),
                _T("VT_DECIMAL"),
                _T("VT_I1"),
                _T("VT_UI1"),
                _T("VT_UI2"),
                _T("VT_UI4"),
                _T("VT_I8"),
                _T("VT_UI8"),
                _T("VT_INT"),
                _T("VT_UINT"),
                _T("VT_VOID"),
                _T("VT_HRESULT"),
                _T("VT_PTR"),
                _T("VT_SAFEARRAY"),
                _T("VT_CARRAY"),
                _T("VT_USERDEFINED"),
                _T("VT_LPSTR"),
                _T("VT_LPWSTR"),
                _T("VT_RECORD"),
                _T("VT_FILETIME"),
                _T("VT_BLOB"),
                _T("VT_STREAM"),
                _T("VT_STORAGE"),
                _T("VT_STREAMED_OBJECT"),
                _T("VT_STORED_OBJECT"),
                _T("VT_BLOB_OBJECT"),
                _T("VT_CF"),
                _T("VT_CLSID"),
                _T("VT_VECTOR"),
                _T("VT_ARRAY"),
                _T("VT_BYREF"),
            };
            return res;
        }
    };
    
    
    enum class VARFLAGS
    {
        VARFLAG_FREADONLY = 1,
        VARFLAG_FSOURCE = 2,
        VARFLAG_FBINDABLE = 4,
        VARFLAG_FREQUESTEDIT = 8,
        VARFLAG_FDISPLAYBIND = 16,
        VARFLAG_FDEFAULTBIND = 32,
        VARFLAG_FHIDDEN = 64,
        VARFLAG_FRESTRICTED = 128,
        VARFLAG_FDEFAULTCOLLELEM = 256,
        VARFLAG_FUIDEFAULT = 512,
        VARFLAG_FNONBROWSABLE = 1024,
        VARFLAG_FREPLACEABLE = 2048,
        VARFLAG_FIMMEDIATEBIND = 4096,
    };
    
    struct VARFLAGS_Impl : public cli::enumeration<VARFLAGS>
    {
        VARFLAGS_Impl(const VARFLAGS& val) : cli::enumeration<VARFLAGS>(val) { }
        operator VARFLAGS() { return value; }
        
        virtual const std::vector<VARFLAGS>& GetValues() const override
        {
            static std::vector<VARFLAGS> res =
            {
                VARFLAGS::VARFLAG_FREADONLY,
                VARFLAGS::VARFLAG_FSOURCE,
                VARFLAGS::VARFLAG_FBINDABLE,
                VARFLAGS::VARFLAG_FREQUESTEDIT,
                VARFLAGS::VARFLAG_FDISPLAYBIND,
                VARFLAGS::VARFLAG_FDEFAULTBIND,
                VARFLAGS::VARFLAG_FHIDDEN,
                VARFLAGS::VARFLAG_FRESTRICTED,
                VARFLAGS::VARFLAG_FDEFAULTCOLLELEM,
                VARFLAGS::VARFLAG_FUIDEFAULT,
                VARFLAGS::VARFLAG_FNONBROWSABLE,
                VARFLAGS::VARFLAG_FREPLACEABLE,
                VARFLAGS::VARFLAG_FIMMEDIATEBIND,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("VARFLAG_FREADONLY"),
                _T("VARFLAG_FSOURCE"),
                _T("VARFLAG_FBINDABLE"),
                _T("VARFLAG_FREQUESTEDIT"),
                _T("VARFLAG_FDISPLAYBIND"),
                _T("VARFLAG_FDEFAULTBIND"),
                _T("VARFLAG_FHIDDEN"),
                _T("VARFLAG_FRESTRICTED"),
                _T("VARFLAG_FDEFAULTCOLLELEM"),
                _T("VARFLAG_FUIDEFAULT"),
                _T("VARFLAG_FNONBROWSABLE"),
                _T("VARFLAG_FREPLACEABLE"),
                _T("VARFLAG_FIMMEDIATEBIND"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    enum class CALLCONV2
    {
        CC_CDECL = 1,
        CC_PASCAL = 2,
        CC_MSCPASCAL = 2,
        CC_MACPASCAL = 3,
        CC_STDCALL = 4,
        CC_RESERVED = 5,
        CC_SYSCALL = 6,
        CC_MPWCDECL = 7,
        CC_MPWPASCAL = 8,
        CC_MAX = 9,
    };
    
    struct CALLCONV2_Impl : public cli::enumeration<CALLCONV2>
    {
        CALLCONV2_Impl(const CALLCONV2& val) : cli::enumeration<CALLCONV2>(val) { }
        operator CALLCONV2() { return value; }
        
        virtual const std::vector<CALLCONV2>& GetValues() const override
        {
            static std::vector<CALLCONV2> res =
            {
                CALLCONV2::CC_CDECL,
                CALLCONV2::CC_PASCAL,
                CALLCONV2::CC_MSCPASCAL,
                CALLCONV2::CC_MACPASCAL,
                CALLCONV2::CC_STDCALL,
                CALLCONV2::CC_RESERVED,
                CALLCONV2::CC_SYSCALL,
                CALLCONV2::CC_MPWCDECL,
                CALLCONV2::CC_MPWPASCAL,
                CALLCONV2::CC_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CC_CDECL"),
                _T("CC_PASCAL"),
                _T("CC_MSCPASCAL"),
                _T("CC_MACPASCAL"),
                _T("CC_STDCALL"),
                _T("CC_RESERVED"),
                _T("CC_SYSCALL"),
                _T("CC_MPWCDECL"),
                _T("CC_MPWPASCAL"),
                _T("CC_MAX"),
            };
            return res;
        }
    };
    
    
    enum class DESCKIND2
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = 1,
        DESCKIND_VARDESC = 2,
        DESCKIND_TYPECOMP = 3,
        DESCKIND_IMPLICITAPPOBJ = 4,
        DESCKIND_MAX = 5,
    };
    
    struct DESCKIND2_Impl : public cli::enumeration<DESCKIND2>
    {
        DESCKIND2_Impl(const DESCKIND2& val) : cli::enumeration<DESCKIND2>(val) { }
        operator DESCKIND2() { return value; }
        
        virtual const std::vector<DESCKIND2>& GetValues() const override
        {
            static std::vector<DESCKIND2> res =
            {
                DESCKIND2::DESCKIND_NONE,
                DESCKIND2::DESCKIND_FUNCDESC,
                DESCKIND2::DESCKIND_VARDESC,
                DESCKIND2::DESCKIND_TYPECOMP,
                DESCKIND2::DESCKIND_IMPLICITAPPOBJ,
                DESCKIND2::DESCKIND_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DESCKIND_NONE"),
                _T("DESCKIND_FUNCDESC"),
                _T("DESCKIND_VARDESC"),
                _T("DESCKIND_TYPECOMP"),
                _T("DESCKIND_IMPLICITAPPOBJ"),
                _T("DESCKIND_MAX"),
            };
            return res;
        }
    };
    
    
    enum class FUNCFLAGS2
    {
        FUNCFLAG_FRESTRICTED = 1,
        FUNCFLAG_FSOURCE = 2,
        FUNCFLAG_FBINDABLE = 4,
        FUNCFLAG_FREQUESTEDIT = 8,
        FUNCFLAG_FDISPLAYBIND = 16,
        FUNCFLAG_FDEFAULTBIND = 32,
        FUNCFLAG_FHIDDEN = 64,
        FUNCFLAG_FUSESGETLASTERROR = 128,
        FUNCFLAG_FDEFAULTCOLLELEM = 256,
        FUNCFLAG_FUIDEFAULT = 512,
        FUNCFLAG_FNONBROWSABLE = 1024,
        FUNCFLAG_FREPLACEABLE = 2048,
        FUNCFLAG_FIMMEDIATEBIND = 4096,
    };
    
    struct FUNCFLAGS2_Impl : public cli::enumeration<FUNCFLAGS2>
    {
        FUNCFLAGS2_Impl(const FUNCFLAGS2& val) : cli::enumeration<FUNCFLAGS2>(val) { }
        operator FUNCFLAGS2() { return value; }
        
        virtual const std::vector<FUNCFLAGS2>& GetValues() const override
        {
            static std::vector<FUNCFLAGS2> res =
            {
                FUNCFLAGS2::FUNCFLAG_FRESTRICTED,
                FUNCFLAGS2::FUNCFLAG_FSOURCE,
                FUNCFLAGS2::FUNCFLAG_FBINDABLE,
                FUNCFLAGS2::FUNCFLAG_FREQUESTEDIT,
                FUNCFLAGS2::FUNCFLAG_FDISPLAYBIND,
                FUNCFLAGS2::FUNCFLAG_FDEFAULTBIND,
                FUNCFLAGS2::FUNCFLAG_FHIDDEN,
                FUNCFLAGS2::FUNCFLAG_FUSESGETLASTERROR,
                FUNCFLAGS2::FUNCFLAG_FDEFAULTCOLLELEM,
                FUNCFLAGS2::FUNCFLAG_FUIDEFAULT,
                FUNCFLAGS2::FUNCFLAG_FNONBROWSABLE,
                FUNCFLAGS2::FUNCFLAG_FREPLACEABLE,
                FUNCFLAGS2::FUNCFLAG_FIMMEDIATEBIND,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FUNCFLAG_FRESTRICTED"),
                _T("FUNCFLAG_FSOURCE"),
                _T("FUNCFLAG_FBINDABLE"),
                _T("FUNCFLAG_FREQUESTEDIT"),
                _T("FUNCFLAG_FDISPLAYBIND"),
                _T("FUNCFLAG_FDEFAULTBIND"),
                _T("FUNCFLAG_FHIDDEN"),
                _T("FUNCFLAG_FUSESGETLASTERROR"),
                _T("FUNCFLAG_FDEFAULTCOLLELEM"),
                _T("FUNCFLAG_FUIDEFAULT"),
                _T("FUNCFLAG_FNONBROWSABLE"),
                _T("FUNCFLAG_FREPLACEABLE"),
                _T("FUNCFLAG_FIMMEDIATEBIND"),
            };
            return res;
        }
    };
    
    
    enum class FUNCKIND2
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = 1,
        FUNC_NONVIRTUAL = 2,
        FUNC_STATIC = 3,
        FUNC_DISPATCH = 4,
    };
    
    struct FUNCKIND2_Impl : public cli::enumeration<FUNCKIND2>
    {
        FUNCKIND2_Impl(const FUNCKIND2& val) : cli::enumeration<FUNCKIND2>(val) { }
        operator FUNCKIND2() { return value; }
        
        virtual const std::vector<FUNCKIND2>& GetValues() const override
        {
            static std::vector<FUNCKIND2> res =
            {
                FUNCKIND2::FUNC_VIRTUAL,
                FUNCKIND2::FUNC_PUREVIRTUAL,
                FUNCKIND2::FUNC_NONVIRTUAL,
                FUNCKIND2::FUNC_STATIC,
                FUNCKIND2::FUNC_DISPATCH,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FUNC_VIRTUAL"),
                _T("FUNC_PUREVIRTUAL"),
                _T("FUNC_NONVIRTUAL"),
                _T("FUNC_STATIC"),
                _T("FUNC_DISPATCH"),
            };
            return res;
        }
    };
    
    
    enum class IDLFLAG2
    {
        IDLFLAG_NONE = 0,
        IDLFLAG_FIN = 1,
        IDLFLAG_FOUT = 2,
        IDLFLAG_FLCID = 4,
        IDLFLAG_FRETVAL = 8,
    };
    
    struct IDLFLAG2_Impl : public cli::enumeration<IDLFLAG2>
    {
        IDLFLAG2_Impl(const IDLFLAG2& val) : cli::enumeration<IDLFLAG2>(val) { }
        operator IDLFLAG2() { return value; }
        
        virtual const std::vector<IDLFLAG2>& GetValues() const override
        {
            static std::vector<IDLFLAG2> res =
            {
                IDLFLAG2::IDLFLAG_NONE,
                IDLFLAG2::IDLFLAG_FIN,
                IDLFLAG2::IDLFLAG_FOUT,
                IDLFLAG2::IDLFLAG_FLCID,
                IDLFLAG2::IDLFLAG_FRETVAL,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IDLFLAG_NONE"),
                _T("IDLFLAG_FIN"),
                _T("IDLFLAG_FOUT"),
                _T("IDLFLAG_FLCID"),
                _T("IDLFLAG_FRETVAL"),
            };
            return res;
        }
    };
    
    
    enum class IMPLTYPEFLAGS2
    {
        IMPLTYPEFLAG_FDEFAULT = 1,
        IMPLTYPEFLAG_FSOURCE = 2,
        IMPLTYPEFLAG_FRESTRICTED = 4,
        IMPLTYPEFLAG_FDEFAULTVTABLE = 8,
    };
    
    struct IMPLTYPEFLAGS2_Impl : public cli::enumeration<IMPLTYPEFLAGS2>
    {
        IMPLTYPEFLAGS2_Impl(const IMPLTYPEFLAGS2& val) : cli::enumeration<IMPLTYPEFLAGS2>(val) { }
        operator IMPLTYPEFLAGS2() { return value; }
        
        virtual const std::vector<IMPLTYPEFLAGS2>& GetValues() const override
        {
            static std::vector<IMPLTYPEFLAGS2> res =
            {
                IMPLTYPEFLAGS2::IMPLTYPEFLAG_FDEFAULT,
                IMPLTYPEFLAGS2::IMPLTYPEFLAG_FSOURCE,
                IMPLTYPEFLAGS2::IMPLTYPEFLAG_FRESTRICTED,
                IMPLTYPEFLAGS2::IMPLTYPEFLAG_FDEFAULTVTABLE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IMPLTYPEFLAG_FDEFAULT"),
                _T("IMPLTYPEFLAG_FSOURCE"),
                _T("IMPLTYPEFLAG_FRESTRICTED"),
                _T("IMPLTYPEFLAG_FDEFAULTVTABLE"),
            };
            return res;
        }
    };
    
    
    enum class INVOKEKIND2
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8,
    };
    
    struct INVOKEKIND2_Impl : public cli::enumeration<INVOKEKIND2>
    {
        INVOKEKIND2_Impl(const INVOKEKIND2& val) : cli::enumeration<INVOKEKIND2>(val) { }
        operator INVOKEKIND2() { return value; }
        
        virtual const std::vector<INVOKEKIND2>& GetValues() const override
        {
            static std::vector<INVOKEKIND2> res =
            {
                INVOKEKIND2::INVOKE_FUNC,
                INVOKEKIND2::INVOKE_PROPERTYGET,
                INVOKEKIND2::INVOKE_PROPERTYPUT,
                INVOKEKIND2::INVOKE_PROPERTYPUTREF,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("INVOKE_FUNC"),
                _T("INVOKE_PROPERTYGET"),
                _T("INVOKE_PROPERTYPUT"),
                _T("INVOKE_PROPERTYPUTREF"),
            };
            return res;
        }
    };
    
    
    enum class LIBFLAGS2
    {
        LIBFLAG_FRESTRICTED = 1,
        LIBFLAG_FCONTROL = 2,
        LIBFLAG_FHIDDEN = 4,
        LIBFLAG_FHASDISKIMAGE = 8,
    };
    
    struct LIBFLAGS2_Impl : public cli::enumeration<LIBFLAGS2>
    {
        LIBFLAGS2_Impl(const LIBFLAGS2& val) : cli::enumeration<LIBFLAGS2>(val) { }
        operator LIBFLAGS2() { return value; }
        
        virtual const std::vector<LIBFLAGS2>& GetValues() const override
        {
            static std::vector<LIBFLAGS2> res =
            {
                LIBFLAGS2::LIBFLAG_FRESTRICTED,
                LIBFLAGS2::LIBFLAG_FCONTROL,
                LIBFLAGS2::LIBFLAG_FHIDDEN,
                LIBFLAGS2::LIBFLAG_FHASDISKIMAGE,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("LIBFLAG_FRESTRICTED"),
                _T("LIBFLAG_FCONTROL"),
                _T("LIBFLAG_FHIDDEN"),
                _T("LIBFLAG_FHASDISKIMAGE"),
            };
            return res;
        }
    };
    
    
    enum class PARAMFLAG2
    {
        PARAMFLAG_NONE = 0,
        PARAMFLAG_FIN = 1,
        PARAMFLAG_FOUT = 2,
        PARAMFLAG_FLCID = 4,
        PARAMFLAG_FRETVAL = 8,
        PARAMFLAG_FOPT = 16,
        PARAMFLAG_FHASDEFAULT = 32,
        PARAMFLAG_FHASCUSTDATA = 64,
    };
    
    struct PARAMFLAG2_Impl : public cli::enumeration<PARAMFLAG2>
    {
        PARAMFLAG2_Impl(const PARAMFLAG2& val) : cli::enumeration<PARAMFLAG2>(val) { }
        operator PARAMFLAG2() { return value; }
        
        virtual const std::vector<PARAMFLAG2>& GetValues() const override
        {
            static std::vector<PARAMFLAG2> res =
            {
                PARAMFLAG2::PARAMFLAG_NONE,
                PARAMFLAG2::PARAMFLAG_FIN,
                PARAMFLAG2::PARAMFLAG_FOUT,
                PARAMFLAG2::PARAMFLAG_FLCID,
                PARAMFLAG2::PARAMFLAG_FRETVAL,
                PARAMFLAG2::PARAMFLAG_FOPT,
                PARAMFLAG2::PARAMFLAG_FHASDEFAULT,
                PARAMFLAG2::PARAMFLAG_FHASCUSTDATA,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PARAMFLAG_NONE"),
                _T("PARAMFLAG_FIN"),
                _T("PARAMFLAG_FOUT"),
                _T("PARAMFLAG_FLCID"),
                _T("PARAMFLAG_FRETVAL"),
                _T("PARAMFLAG_FOPT"),
                _T("PARAMFLAG_FHASDEFAULT"),
                _T("PARAMFLAG_FHASCUSTDATA"),
            };
            return res;
        }
    };
    
    
    enum class SYSKIND2
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = 1,
        SYS_MAC = 2,
        SYS_WIN64 = 3,
    };
    
    struct SYSKIND2_Impl : public cli::enumeration<SYSKIND2>
    {
        SYSKIND2_Impl(const SYSKIND2& val) : cli::enumeration<SYSKIND2>(val) { }
        operator SYSKIND2() { return value; }
        
        virtual const std::vector<SYSKIND2>& GetValues() const override
        {
            static std::vector<SYSKIND2> res =
            {
                SYSKIND2::SYS_WIN16,
                SYSKIND2::SYS_WIN32,
                SYSKIND2::SYS_MAC,
                SYSKIND2::SYS_WIN64,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SYS_WIN16"),
                _T("SYS_WIN32"),
                _T("SYS_MAC"),
                _T("SYS_WIN64"),
            };
            return res;
        }
    };
    
    
    enum class TYPEFLAGS2
    {
        TYPEFLAG_FAPPOBJECT = 1,
        TYPEFLAG_FCANCREATE = 2,
        TYPEFLAG_FLICENSED = 4,
        TYPEFLAG_FPREDECLID = 8,
        TYPEFLAG_FHIDDEN = 16,
        TYPEFLAG_FCONTROL = 32,
        TYPEFLAG_FDUAL = 64,
        TYPEFLAG_FNONEXTENSIBLE = 128,
        TYPEFLAG_FOLEAUTOMATION = 256,
        TYPEFLAG_FRESTRICTED = 512,
        TYPEFLAG_FAGGREGATABLE = 1024,
        TYPEFLAG_FREPLACEABLE = 2048,
        TYPEFLAG_FDISPATCHABLE = 4096,
        TYPEFLAG_FREVERSEBIND = 8192,
        TYPEFLAG_FPROXY = 16384,
    };
    
    struct TYPEFLAGS2_Impl : public cli::enumeration<TYPEFLAGS2>
    {
        TYPEFLAGS2_Impl(const TYPEFLAGS2& val) : cli::enumeration<TYPEFLAGS2>(val) { }
        operator TYPEFLAGS2() { return value; }
        
        virtual const std::vector<TYPEFLAGS2>& GetValues() const override
        {
            static std::vector<TYPEFLAGS2> res =
            {
                TYPEFLAGS2::TYPEFLAG_FAPPOBJECT,
                TYPEFLAGS2::TYPEFLAG_FCANCREATE,
                TYPEFLAGS2::TYPEFLAG_FLICENSED,
                TYPEFLAGS2::TYPEFLAG_FPREDECLID,
                TYPEFLAGS2::TYPEFLAG_FHIDDEN,
                TYPEFLAGS2::TYPEFLAG_FCONTROL,
                TYPEFLAGS2::TYPEFLAG_FDUAL,
                TYPEFLAGS2::TYPEFLAG_FNONEXTENSIBLE,
                TYPEFLAGS2::TYPEFLAG_FOLEAUTOMATION,
                TYPEFLAGS2::TYPEFLAG_FRESTRICTED,
                TYPEFLAGS2::TYPEFLAG_FAGGREGATABLE,
                TYPEFLAGS2::TYPEFLAG_FREPLACEABLE,
                TYPEFLAGS2::TYPEFLAG_FDISPATCHABLE,
                TYPEFLAGS2::TYPEFLAG_FREVERSEBIND,
                TYPEFLAGS2::TYPEFLAG_FPROXY,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TYPEFLAG_FAPPOBJECT"),
                _T("TYPEFLAG_FCANCREATE"),
                _T("TYPEFLAG_FLICENSED"),
                _T("TYPEFLAG_FPREDECLID"),
                _T("TYPEFLAG_FHIDDEN"),
                _T("TYPEFLAG_FCONTROL"),
                _T("TYPEFLAG_FDUAL"),
                _T("TYPEFLAG_FNONEXTENSIBLE"),
                _T("TYPEFLAG_FOLEAUTOMATION"),
                _T("TYPEFLAG_FRESTRICTED"),
                _T("TYPEFLAG_FAGGREGATABLE"),
                _T("TYPEFLAG_FREPLACEABLE"),
                _T("TYPEFLAG_FDISPATCHABLE"),
                _T("TYPEFLAG_FREVERSEBIND"),
                _T("TYPEFLAG_FPROXY"),
            };
            return res;
        }
    };
    
    
    enum class TYPEKIND2
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = 1,
        TKIND_MODULE = 2,
        TKIND_INTERFACE = 3,
        TKIND_DISPATCH = 4,
        TKIND_COCLASS = 5,
        TKIND_ALIAS = 6,
        TKIND_UNION = 7,
        TKIND_MAX = 8,
    };
    
    struct TYPEKIND2_Impl : public cli::enumeration<TYPEKIND2>
    {
        TYPEKIND2_Impl(const TYPEKIND2& val) : cli::enumeration<TYPEKIND2>(val) { }
        operator TYPEKIND2() { return value; }
        
        virtual const std::vector<TYPEKIND2>& GetValues() const override
        {
            static std::vector<TYPEKIND2> res =
            {
                TYPEKIND2::TKIND_ENUM,
                TYPEKIND2::TKIND_RECORD,
                TYPEKIND2::TKIND_MODULE,
                TYPEKIND2::TKIND_INTERFACE,
                TYPEKIND2::TKIND_DISPATCH,
                TYPEKIND2::TKIND_COCLASS,
                TYPEKIND2::TKIND_ALIAS,
                TYPEKIND2::TKIND_UNION,
                TYPEKIND2::TKIND_MAX,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TKIND_ENUM"),
                _T("TKIND_RECORD"),
                _T("TKIND_MODULE"),
                _T("TKIND_INTERFACE"),
                _T("TKIND_DISPATCH"),
                _T("TKIND_COCLASS"),
                _T("TKIND_ALIAS"),
                _T("TKIND_UNION"),
                _T("TKIND_MAX"),
            };
            return res;
        }
    };
    
    
    enum class VARFLAGS2
    {
        VARFLAG_FREADONLY = 1,
        VARFLAG_FSOURCE = 2,
        VARFLAG_FBINDABLE = 4,
        VARFLAG_FREQUESTEDIT = 8,
        VARFLAG_FDISPLAYBIND = 16,
        VARFLAG_FDEFAULTBIND = 32,
        VARFLAG_FHIDDEN = 64,
        VARFLAG_FRESTRICTED = 128,
        VARFLAG_FDEFAULTCOLLELEM = 256,
        VARFLAG_FUIDEFAULT = 512,
        VARFLAG_FNONBROWSABLE = 1024,
        VARFLAG_FREPLACEABLE = 2048,
        VARFLAG_FIMMEDIATEBIND = 4096,
    };
    
    struct VARFLAGS2_Impl : public cli::enumeration<VARFLAGS2>
    {
        VARFLAGS2_Impl(const VARFLAGS2& val) : cli::enumeration<VARFLAGS2>(val) { }
        operator VARFLAGS2() { return value; }
        
        virtual const std::vector<VARFLAGS2>& GetValues() const override
        {
            static std::vector<VARFLAGS2> res =
            {
                VARFLAGS2::VARFLAG_FREADONLY,
                VARFLAGS2::VARFLAG_FSOURCE,
                VARFLAGS2::VARFLAG_FBINDABLE,
                VARFLAGS2::VARFLAG_FREQUESTEDIT,
                VARFLAGS2::VARFLAG_FDISPLAYBIND,
                VARFLAGS2::VARFLAG_FDEFAULTBIND,
                VARFLAGS2::VARFLAG_FHIDDEN,
                VARFLAGS2::VARFLAG_FRESTRICTED,
                VARFLAGS2::VARFLAG_FDEFAULTCOLLELEM,
                VARFLAGS2::VARFLAG_FUIDEFAULT,
                VARFLAGS2::VARFLAG_FNONBROWSABLE,
                VARFLAGS2::VARFLAG_FREPLACEABLE,
                VARFLAGS2::VARFLAG_FIMMEDIATEBIND,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("VARFLAG_FREADONLY"),
                _T("VARFLAG_FSOURCE"),
                _T("VARFLAG_FBINDABLE"),
                _T("VARFLAG_FREQUESTEDIT"),
                _T("VARFLAG_FDISPLAYBIND"),
                _T("VARFLAG_FDEFAULTBIND"),
                _T("VARFLAG_FHIDDEN"),
                _T("VARFLAG_FRESTRICTED"),
                _T("VARFLAG_FDEFAULTCOLLELEM"),
                _T("VARFLAG_FUIDEFAULT"),
                _T("VARFLAG_FNONBROWSABLE"),
                _T("VARFLAG_FREPLACEABLE"),
                _T("VARFLAG_FIMMEDIATEBIND"),
            };
            return res;
        }
    };
    
    
    enum class VARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = 1,
        VAR_CONST = 2,
        VAR_DISPATCH = 3,
    };
    
    struct VARKIND_Impl : public cli::enumeration<VARKIND>
    {
        VARKIND_Impl(const VARKIND& val) : cli::enumeration<VARKIND>(val) { }
        operator VARKIND() { return value; }
        
        virtual const std::vector<VARKIND>& GetValues() const override
        {
            static std::vector<VARKIND> res =
            {
                VARKIND::VAR_PERINSTANCE,
                VARKIND::VAR_STATIC,
                VARKIND::VAR_CONST,
                VARKIND::VAR_DISPATCH,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("VAR_PERINSTANCE"),
                _T("VAR_STATIC"),
                _T("VAR_CONST"),
                _T("VAR_DISPATCH"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Reliability {
    
    enum class CER
    {
        MayFail = 1,
        None = 0,
        Success = 2,
    };
    
    struct CER_Impl : public cli::enumeration<CER>
    {
        CER_Impl(const CER& val) : cli::enumeration<CER>(val) { }
        operator CER() { return value; }
        
        virtual const std::vector<CER>& GetValues() const override
        {
            static std::vector<CER> res =
            {
                CER::MayFail,
                CER::None,
                CER::Success,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MayFail"),
                _T("None"),
                _T("Success"),
            };
            return res;
        }
    };
    
    
    enum class Consistency2
    {
        MayCorruptAppDomain = 1,
        MayCorruptInstance = 2,
        MayCorruptProcess = 0,
        WillNotCorruptState = 3,
    };
    
    struct Consistency2_Impl : public cli::enumeration<Consistency2>
    {
        Consistency2_Impl(const Consistency2& val) : cli::enumeration<Consistency2>(val) { }
        operator Consistency2() { return value; }
        
        virtual const std::vector<Consistency2>& GetValues() const override
        {
            static std::vector<Consistency2> res =
            {
                Consistency2::MayCorruptAppDomain,
                Consistency2::MayCorruptInstance,
                Consistency2::MayCorruptProcess,
                Consistency2::WillNotCorruptState,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MayCorruptAppDomain"),
                _T("MayCorruptInstance"),
                _T("MayCorruptProcess"),
                _T("WillNotCorruptState"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    enum class CustomErrorsModes
    {
        On = 0,
        Off = 1,
        RemoteOnly = 2,
    };
    
    struct CustomErrorsModes_Impl : public cli::enumeration<CustomErrorsModes>
    {
        CustomErrorsModes_Impl(const CustomErrorsModes& val) : cli::enumeration<CustomErrorsModes>(val) { }
        operator CustomErrorsModes() { return value; }
        
        virtual const std::vector<CustomErrorsModes>& GetValues() const override
        {
            static std::vector<CustomErrorsModes> res =
            {
                CustomErrorsModes::On,
                CustomErrorsModes::Off,
                CustomErrorsModes::RemoteOnly,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("On"),
                _T("Off"),
                _T("RemoteOnly"),
            };
            return res;
        }
    };
    
    
    enum class WellKnownObjectMode
    {
        Singleton = 1,
        SingleCall = 2,
    };
    
    struct WellKnownObjectMode_Impl : public cli::enumeration<WellKnownObjectMode>
    {
        WellKnownObjectMode_Impl(const WellKnownObjectMode& val) : cli::enumeration<WellKnownObjectMode>(val) { }
        operator WellKnownObjectMode() { return value; }
        
        virtual const std::vector<WellKnownObjectMode>& GetValues() const override
        {
            static std::vector<WellKnownObjectMode> res =
            {
                WellKnownObjectMode::Singleton,
                WellKnownObjectMode::SingleCall,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Singleton"),
                _T("SingleCall"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    enum class ActivatorLevel
    {
        Construction = 4,
        Context3 = 8,
        AppDomain2 = 12,
        Process = 16,
        Machine = 20,
    };
    
    struct ActivatorLevel_Impl : public cli::enumeration<ActivatorLevel>
    {
        ActivatorLevel_Impl(const ActivatorLevel& val) : cli::enumeration<ActivatorLevel>(val) { }
        operator ActivatorLevel() { return value; }
        
        virtual const std::vector<ActivatorLevel>& GetValues() const override
        {
            static std::vector<ActivatorLevel> res =
            {
                ActivatorLevel::Construction,
                ActivatorLevel::Context3,
                ActivatorLevel::AppDomain2,
                ActivatorLevel::Process,
                ActivatorLevel::Machine,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Construction"),
                _T("Context3"),
                _T("AppDomain2"),
                _T("Process"),
                _T("Machine"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    enum class ServerProcessing
    {
        Complete = 0,
        OneWay = 1,
        Async = 2,
    };
    
    struct ServerProcessing_Impl : public cli::enumeration<ServerProcessing>
    {
        ServerProcessing_Impl(const ServerProcessing& val) : cli::enumeration<ServerProcessing>(val) { }
        operator ServerProcessing() { return value; }
        
        virtual const std::vector<ServerProcessing>& GetValues() const override
        {
            static std::vector<ServerProcessing> res =
            {
                ServerProcessing::Complete,
                ServerProcessing::OneWay,
                ServerProcessing::Async,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Complete"),
                _T("OneWay"),
                _T("Async"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    enum class LeaseState
    {
        Null = 0,
        Initial2 = 1,
        Active = 2,
        Renewing = 3,
        Expired = 4,
    };
    
    struct LeaseState_Impl : public cli::enumeration<LeaseState>
    {
        LeaseState_Impl(const LeaseState& val) : cli::enumeration<LeaseState>(val) { }
        operator LeaseState() { return value; }
        
        virtual const std::vector<LeaseState>& GetValues() const override
        {
            static std::vector<LeaseState> res =
            {
                LeaseState::Null,
                LeaseState::Initial2,
                LeaseState::Active,
                LeaseState::Renewing,
                LeaseState::Expired,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Null"),
                _T("Initial2"),
                _T("Active"),
                _T("Renewing"),
                _T("Expired"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    enum class ArgInfoType
    {
        In = 0,
        Out = 1,
    };
    
    struct ArgInfoType_Impl : public cli::enumeration<ArgInfoType>
    {
        ArgInfoType_Impl(const ArgInfoType& val) : cli::enumeration<ArgInfoType>(val) { }
        operator ArgInfoType() { return value; }
        
        virtual const std::vector<ArgInfoType>& GetValues() const override
        {
            static std::vector<ArgInfoType> res =
            {
                ArgInfoType::In,
                ArgInfoType::Out,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("In"),
                _T("Out"),
            };
            return res;
        }
    };
    
    
    enum class CallType
    {
        Sync = 0,
        BeginInvoke = 1,
        EndInvoke = 2,
        OneWay = 3,
    };
    
    struct CallType_Impl : public cli::enumeration<CallType>
    {
        CallType_Impl(const CallType& val) : cli::enumeration<CallType>(val) { }
        operator CallType() { return value; }
        
        virtual const std::vector<CallType>& GetValues() const override
        {
            static std::vector<CallType> res =
            {
                CallType::Sync,
                CallType::BeginInvoke,
                CallType::EndInvoke,
                CallType::OneWay,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Sync"),
                _T("BeginInvoke"),
                _T("EndInvoke"),
                _T("OneWay"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    enum class SoapOption
    {
        None = 0,
        AlwaysIncludeTypes = 1,
        XsdString = 2,
        EmbedAll = 4,
        Option1 = 8,
        Option2 = 16,
    };
    
    struct SoapOption_Impl : public cli::enumeration<SoapOption>
    {
        SoapOption_Impl(const SoapOption& val) : cli::enumeration<SoapOption>(val) { }
        operator SoapOption() { return value; }
        
        virtual const std::vector<SoapOption>& GetValues() const override
        {
            static std::vector<SoapOption> res =
            {
                SoapOption::None,
                SoapOption::AlwaysIncludeTypes,
                SoapOption::XsdString,
                SoapOption::EmbedAll,
                SoapOption::Option1,
                SoapOption::Option2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("AlwaysIncludeTypes"),
                _T("XsdString"),
                _T("EmbedAll"),
                _T("Option1"),
                _T("Option2"),
            };
            return res;
        }
    };
    
    
    enum class XmlFieldOrderOption
    {
        All = 0,
        Sequence = 1,
        Choice = 2,
    };
    
    struct XmlFieldOrderOption_Impl : public cli::enumeration<XmlFieldOrderOption>
    {
        XmlFieldOrderOption_Impl(const XmlFieldOrderOption& val) : cli::enumeration<XmlFieldOrderOption>(val) { }
        operator XmlFieldOrderOption() { return value; }
        
        virtual const std::vector<XmlFieldOrderOption>& GetValues() const override
        {
            static std::vector<XmlFieldOrderOption> res =
            {
                XmlFieldOrderOption::All,
                XmlFieldOrderOption::Sequence,
                XmlFieldOrderOption::Choice,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("All"),
                _T("Sequence"),
                _T("Choice"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    enum class ObjectRecordStatus
    {
        Unregistered = 0,
        ReferenceUnsolved = 1,
        ReferenceSolvingDelayed = 2,
        ReferenceSolved = 3,
    };
    
    struct ObjectRecordStatus_Impl : public cli::enumeration<ObjectRecordStatus>
    {
        ObjectRecordStatus_Impl(const ObjectRecordStatus& val) : cli::enumeration<ObjectRecordStatus>(val) { }
        operator ObjectRecordStatus() { return value; }
        
        virtual const std::vector<ObjectRecordStatus>& GetValues() const override
        {
            static std::vector<ObjectRecordStatus> res =
            {
                ObjectRecordStatus::Unregistered,
                ObjectRecordStatus::ReferenceUnsolved,
                ObjectRecordStatus::ReferenceSolvingDelayed,
                ObjectRecordStatus::ReferenceSolved,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unregistered"),
                _T("ReferenceUnsolved"),
                _T("ReferenceSolvingDelayed"),
                _T("ReferenceSolved"),
            };
            return res;
        }
    };
    
    
    enum class StreamingContextStates
    {
        CrossProcess = 1,
        CrossMachine = 2,
        File2 = 4,
        Persistence = 8,
        Remoting = 16,
        Other = 32,
        Clone = 64,
        CrossAppDomain = 128,
        All = 255,
    };
    
    struct StreamingContextStates_Impl : public cli::enumeration<StreamingContextStates>
    {
        StreamingContextStates_Impl(const StreamingContextStates& val) : cli::enumeration<StreamingContextStates>(val) { }
        operator StreamingContextStates() { return value; }
        
        virtual const std::vector<StreamingContextStates>& GetValues() const override
        {
            static std::vector<StreamingContextStates> res =
            {
                StreamingContextStates::CrossProcess,
                StreamingContextStates::CrossMachine,
                StreamingContextStates::File2,
                StreamingContextStates::Persistence,
                StreamingContextStates::Remoting,
                StreamingContextStates::Other,
                StreamingContextStates::Clone,
                StreamingContextStates::CrossAppDomain,
                StreamingContextStates::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CrossProcess"),
                _T("CrossMachine"),
                _T("File2"),
                _T("Persistence"),
                _T("Remoting"),
                _T("Other"),
                _T("Clone"),
                _T("CrossAppDomain"),
                _T("All"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    enum class FormatterAssemblyStyle
    {
        Simple = 0,
        Full = 1,
    };
    
    struct FormatterAssemblyStyle_Impl : public cli::enumeration<FormatterAssemblyStyle>
    {
        FormatterAssemblyStyle_Impl(const FormatterAssemblyStyle& val) : cli::enumeration<FormatterAssemblyStyle>(val) { }
        operator FormatterAssemblyStyle() { return value; }
        
        virtual const std::vector<FormatterAssemblyStyle>& GetValues() const override
        {
            static std::vector<FormatterAssemblyStyle> res =
            {
                FormatterAssemblyStyle::Simple,
                FormatterAssemblyStyle::Full,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Simple"),
                _T("Full"),
            };
            return res;
        }
    };
    
    
    enum class FormatterTypeStyle
    {
        TypesWhenNeeded = 0,
        TypesAlways = 1,
        XsdString = 2,
    };
    
    struct FormatterTypeStyle_Impl : public cli::enumeration<FormatterTypeStyle>
    {
        FormatterTypeStyle_Impl(const FormatterTypeStyle& val) : cli::enumeration<FormatterTypeStyle>(val) { }
        operator FormatterTypeStyle() { return value; }
        
        virtual const std::vector<FormatterTypeStyle>& GetValues() const override
        {
            static std::vector<FormatterTypeStyle> res =
            {
                FormatterTypeStyle::TypesWhenNeeded,
                FormatterTypeStyle::TypesAlways,
                FormatterTypeStyle::XsdString,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("TypesWhenNeeded"),
                _T("TypesAlways"),
                _T("XsdString"),
            };
            return res;
        }
    };
    
    
    enum class TypeFilterLevel
    {
        Low = 2,
        Full = 3,
    };
    
    struct TypeFilterLevel_Impl : public cli::enumeration<TypeFilterLevel>
    {
        TypeFilterLevel_Impl(const TypeFilterLevel& val) : cli::enumeration<TypeFilterLevel>(val) { }
        operator TypeFilterLevel() { return value; }
        
        virtual const std::vector<TypeFilterLevel>& GetValues() const override
        {
            static std::vector<TypeFilterLevel> res =
            {
                TypeFilterLevel::Low,
                TypeFilterLevel::Full,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Low"),
                _T("Full"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    enum class BinaryElement
    {
        Header2 = 0,
        RefTypeObject = 1,
        UntypedRuntimeObject = 2,
        UntypedExternalObject = 3,
        RuntimeObject = 4,
        ExternalObject = 5,
        String2 = 6,
        GenericArray = 7,
        BoxedPrimitiveTypeValue = 8,
        ObjectReference = 9,
        NullValue = 10,
        End = 11,
        Assembly2 = 12,
        ArrayFiller8b = 13,
        ArrayFiller32b = 14,
        ArrayOfPrimitiveType = 15,
        ArrayOfObject = 16,
        ArrayOfString = 17,
        Method = 18,
        _Unknown4 = 19,
        _Unknown5 = 20,
        MethodCall2 = 21,
        MethodResponse2 = 22,
    };
    
    struct BinaryElement_Impl : public cli::enumeration<BinaryElement>
    {
        BinaryElement_Impl(const BinaryElement& val) : cli::enumeration<BinaryElement>(val) { }
        operator BinaryElement() { return value; }
        
        virtual const std::vector<BinaryElement>& GetValues() const override
        {
            static std::vector<BinaryElement> res =
            {
                BinaryElement::Header2,
                BinaryElement::RefTypeObject,
                BinaryElement::UntypedRuntimeObject,
                BinaryElement::UntypedExternalObject,
                BinaryElement::RuntimeObject,
                BinaryElement::ExternalObject,
                BinaryElement::String2,
                BinaryElement::GenericArray,
                BinaryElement::BoxedPrimitiveTypeValue,
                BinaryElement::ObjectReference,
                BinaryElement::NullValue,
                BinaryElement::End,
                BinaryElement::Assembly2,
                BinaryElement::ArrayFiller8b,
                BinaryElement::ArrayFiller32b,
                BinaryElement::ArrayOfPrimitiveType,
                BinaryElement::ArrayOfObject,
                BinaryElement::ArrayOfString,
                BinaryElement::Method,
                BinaryElement::_Unknown4,
                BinaryElement::_Unknown5,
                BinaryElement::MethodCall2,
                BinaryElement::MethodResponse2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Header2"),
                _T("RefTypeObject"),
                _T("UntypedRuntimeObject"),
                _T("UntypedExternalObject"),
                _T("RuntimeObject"),
                _T("ExternalObject"),
                _T("String2"),
                _T("GenericArray"),
                _T("BoxedPrimitiveTypeValue"),
                _T("ObjectReference"),
                _T("NullValue"),
                _T("End"),
                _T("Assembly2"),
                _T("ArrayFiller8b"),
                _T("ArrayFiller32b"),
                _T("ArrayOfPrimitiveType"),
                _T("ArrayOfObject"),
                _T("ArrayOfString"),
                _T("Method"),
                _T("_Unknown4"),
                _T("_Unknown5"),
                _T("MethodCall2"),
                _T("MethodResponse2"),
            };
            return res;
        }
    };
    
    
    enum class TypeTag
    {
        PrimitiveType = 0,
        String2 = 1,
        ObjectType = 2,
        RuntimeType = 3,
        GenericType = 4,
        ArrayOfObject = 5,
        ArrayOfString = 6,
        ArrayOfPrimitiveType = 7,
    };
    
    struct TypeTag_Impl : public cli::enumeration<TypeTag>
    {
        TypeTag_Impl(const TypeTag& val) : cli::enumeration<TypeTag>(val) { }
        operator TypeTag() { return value; }
        
        virtual const std::vector<TypeTag>& GetValues() const override
        {
            static std::vector<TypeTag> res =
            {
                TypeTag::PrimitiveType,
                TypeTag::String2,
                TypeTag::ObjectType,
                TypeTag::RuntimeType,
                TypeTag::GenericType,
                TypeTag::ArrayOfObject,
                TypeTag::ArrayOfString,
                TypeTag::ArrayOfPrimitiveType,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PrimitiveType"),
                _T("String2"),
                _T("ObjectType"),
                _T("RuntimeType"),
                _T("GenericType"),
                _T("ArrayOfObject"),
                _T("ArrayOfString"),
                _T("ArrayOfPrimitiveType"),
            };
            return res;
        }
    };
    
    
    enum class ArrayStructure
    {
        SingleDimensional = 0,
        Jagged = 1,
        MultiDimensional = 2,
    };
    
    struct ArrayStructure_Impl : public cli::enumeration<ArrayStructure>
    {
        ArrayStructure_Impl(const ArrayStructure& val) : cli::enumeration<ArrayStructure>(val) { }
        operator ArrayStructure() { return value; }
        
        virtual const std::vector<ArrayStructure>& GetValues() const override
        {
            static std::vector<ArrayStructure> res =
            {
                ArrayStructure::SingleDimensional,
                ArrayStructure::Jagged,
                ArrayStructure::MultiDimensional,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("SingleDimensional"),
                _T("Jagged"),
                _T("MultiDimensional"),
            };
            return res;
        }
    };
    
    
    enum class MethodFlags
    {
        NoArguments = 1,
        PrimitiveArguments = 2,
        ArgumentsInSimpleArray = 4,
        ArgumentsInMultiArray = 8,
        ExcludeLogicalCallContext = 16,
        IncludesLogicalCallContext = 64,
        IncludesSignature = 128,
        FormatMask = 15,
        GenericArguments = 32768,
        NeedsInfoArrayMask = 32972,
    };
    
    struct MethodFlags_Impl : public cli::enumeration<MethodFlags>
    {
        MethodFlags_Impl(const MethodFlags& val) : cli::enumeration<MethodFlags>(val) { }
        operator MethodFlags() { return value; }
        
        virtual const std::vector<MethodFlags>& GetValues() const override
        {
            static std::vector<MethodFlags> res =
            {
                MethodFlags::NoArguments,
                MethodFlags::PrimitiveArguments,
                MethodFlags::ArgumentsInSimpleArray,
                MethodFlags::ArgumentsInMultiArray,
                MethodFlags::ExcludeLogicalCallContext,
                MethodFlags::IncludesLogicalCallContext,
                MethodFlags::IncludesSignature,
                MethodFlags::FormatMask,
                MethodFlags::GenericArguments,
                MethodFlags::NeedsInfoArrayMask,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoArguments"),
                _T("PrimitiveArguments"),
                _T("ArgumentsInSimpleArray"),
                _T("ArgumentsInMultiArray"),
                _T("ExcludeLogicalCallContext"),
                _T("IncludesLogicalCallContext"),
                _T("IncludesSignature"),
                _T("FormatMask"),
                _T("GenericArguments"),
                _T("NeedsInfoArrayMask"),
            };
            return res;
        }
    };
    
    
    enum class ReturnTypeTag
    {
        Null = 2,
        PrimitiveType = 8,
        ObjectType = 16,
        Exception2 = 32,
    };
    
    struct ReturnTypeTag_Impl : public cli::enumeration<ReturnTypeTag>
    {
        ReturnTypeTag_Impl(const ReturnTypeTag& val) : cli::enumeration<ReturnTypeTag>(val) { }
        operator ReturnTypeTag() { return value; }
        
        virtual const std::vector<ReturnTypeTag>& GetValues() const override
        {
            static std::vector<ReturnTypeTag> res =
            {
                ReturnTypeTag::Null,
                ReturnTypeTag::PrimitiveType,
                ReturnTypeTag::ObjectType,
                ReturnTypeTag::Exception2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Null"),
                _T("PrimitiveType"),
                _T("ObjectType"),
                _T("Exception2"),
            };
            return res;
        }
    };
    
    
    enum class BinaryTypeCode
    {
        Boolean2 = 1,
        Byte2 = 2,
        Char2 = 3,
        Decimal2 = 5,
        Double2 = 6,
        Int162 = 7,
        Int322 = 8,
        Int642 = 9,
        SByte2 = 10,
        Single2 = 11,
        TimeSpan2 = 12,
        DateTime2 = 13,
        UInt162 = 14,
        UInt322 = 15,
        UInt642 = 16,
        Null = 17,
        String2 = 18,
    };
    
    struct BinaryTypeCode_Impl : public cli::enumeration<BinaryTypeCode>
    {
        BinaryTypeCode_Impl(const BinaryTypeCode& val) : cli::enumeration<BinaryTypeCode>(val) { }
        operator BinaryTypeCode() { return value; }
        
        virtual const std::vector<BinaryTypeCode>& GetValues() const override
        {
            static std::vector<BinaryTypeCode> res =
            {
                BinaryTypeCode::Boolean2,
                BinaryTypeCode::Byte2,
                BinaryTypeCode::Char2,
                BinaryTypeCode::Decimal2,
                BinaryTypeCode::Double2,
                BinaryTypeCode::Int162,
                BinaryTypeCode::Int322,
                BinaryTypeCode::Int642,
                BinaryTypeCode::SByte2,
                BinaryTypeCode::Single2,
                BinaryTypeCode::TimeSpan2,
                BinaryTypeCode::DateTime2,
                BinaryTypeCode::UInt162,
                BinaryTypeCode::UInt322,
                BinaryTypeCode::UInt642,
                BinaryTypeCode::Null,
                BinaryTypeCode::String2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Boolean2"),
                _T("Byte2"),
                _T("Char2"),
                _T("Decimal2"),
                _T("Double2"),
                _T("Int162"),
                _T("Int322"),
                _T("Int642"),
                _T("SByte2"),
                _T("Single2"),
                _T("TimeSpan2"),
                _T("DateTime2"),
                _T("UInt162"),
                _T("UInt322"),
                _T("UInt642"),
                _T("Null"),
                _T("String2"),
            };
            return res;
        }
    };
    
}}}}}
namespace System { namespace Runtime { namespace Versioning {
    
    enum class ComponentGuaranteesOptions
    {
        None = 0,
        Exchange = 1,
        Stable = 2,
        SideBySide = 4,
    };
    
    struct ComponentGuaranteesOptions_Impl : public cli::enumeration<ComponentGuaranteesOptions>
    {
        ComponentGuaranteesOptions_Impl(const ComponentGuaranteesOptions& val) : cli::enumeration<ComponentGuaranteesOptions>(val) { }
        operator ComponentGuaranteesOptions() { return value; }
        
        virtual const std::vector<ComponentGuaranteesOptions>& GetValues() const override
        {
            static std::vector<ComponentGuaranteesOptions> res =
            {
                ComponentGuaranteesOptions::None,
                ComponentGuaranteesOptions::Exchange,
                ComponentGuaranteesOptions::Stable,
                ComponentGuaranteesOptions::SideBySide,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Exchange"),
                _T("Stable"),
                _T("SideBySide"),
            };
            return res;
        }
    };
    
    
    enum class ResourceScope
    {
        None = 0,
        Machine = 1,
        Process = 2,
        AppDomain2 = 4,
        Library = 8,
        Private = 16,
        Assembly2 = 32,
    };
    
    struct ResourceScope_Impl : public cli::enumeration<ResourceScope>
    {
        ResourceScope_Impl(const ResourceScope& val) : cli::enumeration<ResourceScope>(val) { }
        operator ResourceScope() { return value; }
        
        virtual const std::vector<ResourceScope>& GetValues() const override
        {
            static std::vector<ResourceScope> res =
            {
                ResourceScope::None,
                ResourceScope::Machine,
                ResourceScope::Process,
                ResourceScope::AppDomain2,
                ResourceScope::Library,
                ResourceScope::Private,
                ResourceScope::Assembly2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Machine"),
                _T("Process"),
                _T("AppDomain2"),
                _T("Library"),
                _T("Private"),
                _T("Assembly2"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Security {
    
    enum class HostSecurityManagerOptions
    {
        None = 0,
        HostAppDomainEvidence = 1,
        HostPolicyLevel = 2,
        HostAssemblyEvidence = 4,
        HostDetermineApplicationTrust = 8,
        HostResolvePolicy = 16,
        AllFlags = 31,
    };
    
    struct HostSecurityManagerOptions_Impl : public cli::enumeration<HostSecurityManagerOptions>
    {
        HostSecurityManagerOptions_Impl(const HostSecurityManagerOptions& val) : cli::enumeration<HostSecurityManagerOptions>(val) { }
        operator HostSecurityManagerOptions() { return value; }
        
        virtual const std::vector<HostSecurityManagerOptions>& GetValues() const override
        {
            static std::vector<HostSecurityManagerOptions> res =
            {
                HostSecurityManagerOptions::None,
                HostSecurityManagerOptions::HostAppDomainEvidence,
                HostSecurityManagerOptions::HostPolicyLevel,
                HostSecurityManagerOptions::HostAssemblyEvidence,
                HostSecurityManagerOptions::HostDetermineApplicationTrust,
                HostSecurityManagerOptions::HostResolvePolicy,
                HostSecurityManagerOptions::AllFlags,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("HostAppDomainEvidence"),
                _T("HostPolicyLevel"),
                _T("HostAssemblyEvidence"),
                _T("HostDetermineApplicationTrust"),
                _T("HostResolvePolicy"),
                _T("AllFlags"),
            };
            return res;
        }
    };
    
    
    enum class PolicyLevelType
    {
        User = 0,
        Machine = 1,
        Enterprise = 2,
        AppDomain2 = 3,
    };
    
    struct PolicyLevelType_Impl : public cli::enumeration<PolicyLevelType>
    {
        PolicyLevelType_Impl(const PolicyLevelType& val) : cli::enumeration<PolicyLevelType>(val) { }
        operator PolicyLevelType() { return value; }
        
        virtual const std::vector<PolicyLevelType>& GetValues() const override
        {
            static std::vector<PolicyLevelType> res =
            {
                PolicyLevelType::User,
                PolicyLevelType::Machine,
                PolicyLevelType::Enterprise,
                PolicyLevelType::AppDomain2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("User"),
                _T("Machine"),
                _T("Enterprise"),
                _T("AppDomain2"),
            };
            return res;
        }
    };
    
    
    enum class SecurityContextSource
    {
        CurrentAppDomain = 0,
        CurrentAssembly = 1,
    };
    
    struct SecurityContextSource_Impl : public cli::enumeration<SecurityContextSource>
    {
        SecurityContextSource_Impl(const SecurityContextSource& val) : cli::enumeration<SecurityContextSource>(val) { }
        operator SecurityContextSource() { return value; }
        
        virtual const std::vector<SecurityContextSource>& GetValues() const override
        {
            static std::vector<SecurityContextSource> res =
            {
                SecurityContextSource::CurrentAppDomain,
                SecurityContextSource::CurrentAssembly,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CurrentAppDomain"),
                _T("CurrentAssembly"),
            };
            return res;
        }
    };
    
    
    enum class SecurityCriticalScope
    {
        Explicit = 0,
        Everything = 1,
    };
    
    struct SecurityCriticalScope_Impl : public cli::enumeration<SecurityCriticalScope>
    {
        SecurityCriticalScope_Impl(const SecurityCriticalScope& val) : cli::enumeration<SecurityCriticalScope>(val) { }
        operator SecurityCriticalScope() { return value; }
        
        virtual const std::vector<SecurityCriticalScope>& GetValues() const override
        {
            static std::vector<SecurityCriticalScope> res =
            {
                SecurityCriticalScope::Explicit,
                SecurityCriticalScope::Everything,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Explicit"),
                _T("Everything"),
            };
            return res;
        }
    };
    
    
    enum class SecurityRuleSet
    {
        None = 0,
        Level1 = 1,
        Level2 = 2,
    };
    
    struct SecurityRuleSet_Impl : public cli::enumeration<SecurityRuleSet>
    {
        SecurityRuleSet_Impl(const SecurityRuleSet& val) : cli::enumeration<SecurityRuleSet>(val) { }
        operator SecurityRuleSet() { return value; }
        
        virtual const std::vector<SecurityRuleSet>& GetValues() const override
        {
            static std::vector<SecurityRuleSet> res =
            {
                SecurityRuleSet::None,
                SecurityRuleSet::Level1,
                SecurityRuleSet::Level2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Level1"),
                _T("Level2"),
            };
            return res;
        }
    };
    
    
    enum class SecurityZone
    {
        MyComputer = 0,
        Intranet = 1,
        Trusted = 2,
        Internet = 3,
        Untrusted = 4,
        NoZone = -1,
    };
    
    struct SecurityZone_Impl : public cli::enumeration<SecurityZone>
    {
        SecurityZone_Impl(const SecurityZone& val) : cli::enumeration<SecurityZone>(val) { }
        operator SecurityZone() { return value; }
        
        virtual const std::vector<SecurityZone>& GetValues() const override
        {
            static std::vector<SecurityZone> res =
            {
                SecurityZone::MyComputer,
                SecurityZone::Intranet,
                SecurityZone::Trusted,
                SecurityZone::Internet,
                SecurityZone::Untrusted,
                SecurityZone::NoZone,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MyComputer"),
                _T("Intranet"),
                _T("Trusted"),
                _T("Internet"),
                _T("Untrusted"),
                _T("NoZone"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    enum class AccessControlActions
    {
        None = 0,
        View = 1,
        Change = 2,
    };
    
    struct AccessControlActions_Impl : public cli::enumeration<AccessControlActions>
    {
        AccessControlActions_Impl(const AccessControlActions& val) : cli::enumeration<AccessControlActions>(val) { }
        operator AccessControlActions() { return value; }
        
        virtual const std::vector<AccessControlActions>& GetValues() const override
        {
            static std::vector<AccessControlActions> res =
            {
                AccessControlActions::None,
                AccessControlActions::View,
                AccessControlActions::Change,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("View"),
                _T("Change"),
            };
            return res;
        }
    };
    
    
    enum class AccessControlModification
    {
        Add = 0,
        Set = 1,
        Reset = 2,
        Remove = 3,
        RemoveAll = 4,
        RemoveSpecific = 5,
    };
    
    struct AccessControlModification_Impl : public cli::enumeration<AccessControlModification>
    {
        AccessControlModification_Impl(const AccessControlModification& val) : cli::enumeration<AccessControlModification>(val) { }
        operator AccessControlModification() { return value; }
        
        virtual const std::vector<AccessControlModification>& GetValues() const override
        {
            static std::vector<AccessControlModification> res =
            {
                AccessControlModification::Add,
                AccessControlModification::Set,
                AccessControlModification::Reset,
                AccessControlModification::Remove,
                AccessControlModification::RemoveAll,
                AccessControlModification::RemoveSpecific,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Add"),
                _T("Set"),
                _T("Reset"),
                _T("Remove"),
                _T("RemoveAll"),
                _T("RemoveSpecific"),
            };
            return res;
        }
    };
    
    
    enum class AccessControlSections
    {
        None = 0,
        Audit = 1,
        Access = 2,
        Owner = 4,
        Group = 8,
        All = 15,
    };
    
    struct AccessControlSections_Impl : public cli::enumeration<AccessControlSections>
    {
        AccessControlSections_Impl(const AccessControlSections& val) : cli::enumeration<AccessControlSections>(val) { }
        operator AccessControlSections() { return value; }
        
        virtual const std::vector<AccessControlSections>& GetValues() const override
        {
            static std::vector<AccessControlSections> res =
            {
                AccessControlSections::None,
                AccessControlSections::Audit,
                AccessControlSections::Access,
                AccessControlSections::Owner,
                AccessControlSections::Group,
                AccessControlSections::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Audit"),
                _T("Access"),
                _T("Owner"),
                _T("Group"),
                _T("All"),
            };
            return res;
        }
    };
    
    
    enum class AccessControlType
    {
        Allow = 0,
        Deny = 1,
    };
    
    struct AccessControlType_Impl : public cli::enumeration<AccessControlType>
    {
        AccessControlType_Impl(const AccessControlType& val) : cli::enumeration<AccessControlType>(val) { }
        operator AccessControlType() { return value; }
        
        virtual const std::vector<AccessControlType>& GetValues() const override
        {
            static std::vector<AccessControlType> res =
            {
                AccessControlType::Allow,
                AccessControlType::Deny,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Allow"),
                _T("Deny"),
            };
            return res;
        }
    };
    
    
    enum class AceFlags
    {
        None = 0,
        ObjectInherit = 1,
        ContainerInherit = 2,
        NoPropagateInherit = 4,
        InheritOnly = 8,
        InheritanceFlags2 = 15,
        Inherited = 16,
        SuccessfulAccess = 64,
        FailedAccess = 128,
        AuditFlags2 = 192,
    };
    
    struct AceFlags_Impl : public cli::enumeration<AceFlags>
    {
        AceFlags_Impl(const AceFlags& val) : cli::enumeration<AceFlags>(val) { }
        operator AceFlags() { return value; }
        
        virtual const std::vector<AceFlags>& GetValues() const override
        {
            static std::vector<AceFlags> res =
            {
                AceFlags::None,
                AceFlags::ObjectInherit,
                AceFlags::ContainerInherit,
                AceFlags::NoPropagateInherit,
                AceFlags::InheritOnly,
                AceFlags::InheritanceFlags2,
                AceFlags::Inherited,
                AceFlags::SuccessfulAccess,
                AceFlags::FailedAccess,
                AceFlags::AuditFlags2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("ObjectInherit"),
                _T("ContainerInherit"),
                _T("NoPropagateInherit"),
                _T("InheritOnly"),
                _T("InheritanceFlags2"),
                _T("Inherited"),
                _T("SuccessfulAccess"),
                _T("FailedAccess"),
                _T("AuditFlags2"),
            };
            return res;
        }
    };
    
    
    enum class AceQualifier
    {
        AccessAllowed = 0,
        AccessDenied = 1,
        SystemAudit = 2,
        SystemAlarm = 3,
    };
    
    struct AceQualifier_Impl : public cli::enumeration<AceQualifier>
    {
        AceQualifier_Impl(const AceQualifier& val) : cli::enumeration<AceQualifier>(val) { }
        operator AceQualifier() { return value; }
        
        virtual const std::vector<AceQualifier>& GetValues() const override
        {
            static std::vector<AceQualifier> res =
            {
                AceQualifier::AccessAllowed,
                AceQualifier::AccessDenied,
                AceQualifier::SystemAudit,
                AceQualifier::SystemAlarm,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("AccessAllowed"),
                _T("AccessDenied"),
                _T("SystemAudit"),
                _T("SystemAlarm"),
            };
            return res;
        }
    };
    
    
    enum class AceType
    {
        AccessAllowed = 0,
        AccessDenied = 1,
        SystemAudit = 2,
        SystemAlarm = 3,
        AccessAllowedCompound = 4,
        AccessAllowedObject = 5,
        AccessDeniedObject = 6,
        SystemAuditObject = 7,
        SystemAlarmObject = 8,
        AccessAllowedCallback = 9,
        AccessDeniedCallback = 10,
        AccessAllowedCallbackObject = 11,
        AccessDeniedCallbackObject = 12,
        SystemAuditCallback = 13,
        SystemAlarmCallback = 14,
        SystemAuditCallbackObject = 15,
        SystemAlarmCallbackObject = 16,
        MaxDefinedAceType = 16,
    };
    
    struct AceType_Impl : public cli::enumeration<AceType>
    {
        AceType_Impl(const AceType& val) : cli::enumeration<AceType>(val) { }
        operator AceType() { return value; }
        
        virtual const std::vector<AceType>& GetValues() const override
        {
            static std::vector<AceType> res =
            {
                AceType::AccessAllowed,
                AceType::AccessDenied,
                AceType::SystemAudit,
                AceType::SystemAlarm,
                AceType::AccessAllowedCompound,
                AceType::AccessAllowedObject,
                AceType::AccessDeniedObject,
                AceType::SystemAuditObject,
                AceType::SystemAlarmObject,
                AceType::AccessAllowedCallback,
                AceType::AccessDeniedCallback,
                AceType::AccessAllowedCallbackObject,
                AceType::AccessDeniedCallbackObject,
                AceType::SystemAuditCallback,
                AceType::SystemAlarmCallback,
                AceType::SystemAuditCallbackObject,
                AceType::SystemAlarmCallbackObject,
                AceType::MaxDefinedAceType,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("AccessAllowed"),
                _T("AccessDenied"),
                _T("SystemAudit"),
                _T("SystemAlarm"),
                _T("AccessAllowedCompound"),
                _T("AccessAllowedObject"),
                _T("AccessDeniedObject"),
                _T("SystemAuditObject"),
                _T("SystemAlarmObject"),
                _T("AccessAllowedCallback"),
                _T("AccessDeniedCallback"),
                _T("AccessAllowedCallbackObject"),
                _T("AccessDeniedCallbackObject"),
                _T("SystemAuditCallback"),
                _T("SystemAlarmCallback"),
                _T("SystemAuditCallbackObject"),
                _T("SystemAlarmCallbackObject"),
                _T("MaxDefinedAceType"),
            };
            return res;
        }
    };
    
    
    enum class AuditFlags
    {
        None = 0,
        Success = 1,
        Failure = 2,
    };
    
    struct AuditFlags_Impl : public cli::enumeration<AuditFlags>
    {
        AuditFlags_Impl(const AuditFlags& val) : cli::enumeration<AuditFlags>(val) { }
        operator AuditFlags() { return value; }
        
        virtual const std::vector<AuditFlags>& GetValues() const override
        {
            static std::vector<AuditFlags> res =
            {
                AuditFlags::None,
                AuditFlags::Success,
                AuditFlags::Failure,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Success"),
                _T("Failure"),
            };
            return res;
        }
    };
    
    
    enum class CompoundAceType
    {
        Impersonation = 1,
    };
    
    struct CompoundAceType_Impl : public cli::enumeration<CompoundAceType>
    {
        CompoundAceType_Impl(const CompoundAceType& val) : cli::enumeration<CompoundAceType>(val) { }
        operator CompoundAceType() { return value; }
        
        virtual const std::vector<CompoundAceType>& GetValues() const override
        {
            static std::vector<CompoundAceType> res =
            {
                CompoundAceType::Impersonation,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Impersonation"),
            };
            return res;
        }
    };
    
    
    enum class ControlFlags
    {
        None = 0,
        OwnerDefaulted = 1,
        GroupDefaulted = 2,
        DiscretionaryAclPresent = 4,
        DiscretionaryAclDefaulted = 8,
        SystemAclPresent = 16,
        SystemAclDefaulted = 32,
        DiscretionaryAclUntrusted = 64,
        ServerSecurity = 128,
        DiscretionaryAclAutoInheritRequired = 256,
        SystemAclAutoInheritRequired = 512,
        DiscretionaryAclAutoInherited = 1024,
        SystemAclAutoInherited = 2048,
        DiscretionaryAclProtected = 4096,
        SystemAclProtected = 8192,
        RMControlValid = 16384,
        SelfRelative = 32768,
    };
    
    struct ControlFlags_Impl : public cli::enumeration<ControlFlags>
    {
        ControlFlags_Impl(const ControlFlags& val) : cli::enumeration<ControlFlags>(val) { }
        operator ControlFlags() { return value; }
        
        virtual const std::vector<ControlFlags>& GetValues() const override
        {
            static std::vector<ControlFlags> res =
            {
                ControlFlags::None,
                ControlFlags::OwnerDefaulted,
                ControlFlags::GroupDefaulted,
                ControlFlags::DiscretionaryAclPresent,
                ControlFlags::DiscretionaryAclDefaulted,
                ControlFlags::SystemAclPresent,
                ControlFlags::SystemAclDefaulted,
                ControlFlags::DiscretionaryAclUntrusted,
                ControlFlags::ServerSecurity,
                ControlFlags::DiscretionaryAclAutoInheritRequired,
                ControlFlags::SystemAclAutoInheritRequired,
                ControlFlags::DiscretionaryAclAutoInherited,
                ControlFlags::SystemAclAutoInherited,
                ControlFlags::DiscretionaryAclProtected,
                ControlFlags::SystemAclProtected,
                ControlFlags::RMControlValid,
                ControlFlags::SelfRelative,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("OwnerDefaulted"),
                _T("GroupDefaulted"),
                _T("DiscretionaryAclPresent"),
                _T("DiscretionaryAclDefaulted"),
                _T("SystemAclPresent"),
                _T("SystemAclDefaulted"),
                _T("DiscretionaryAclUntrusted"),
                _T("ServerSecurity"),
                _T("DiscretionaryAclAutoInheritRequired"),
                _T("SystemAclAutoInheritRequired"),
                _T("DiscretionaryAclAutoInherited"),
                _T("SystemAclAutoInherited"),
                _T("DiscretionaryAclProtected"),
                _T("SystemAclProtected"),
                _T("RMControlValid"),
                _T("SelfRelative"),
            };
            return res;
        }
    };
    
    
    enum class CryptoKeyRights
    {
        ReadData = 1,
        WriteData = 2,
        ReadExtendedAttributes = 8,
        WriteExtendedAttributes = 16,
        ReadAttributes = 128,
        WriteAttributes = 256,
        Delete = 65536,
        ReadPermissions = 131072,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        Synchronize = 1048576,
        FullControl = 2032027,
        GenericAll = 268435456,
        GenericExecute = 536870912,
        GenericWrite = 1073741824,
        GenericRead = -2147483648,
    };
    
    struct CryptoKeyRights_Impl : public cli::enumeration<CryptoKeyRights>
    {
        CryptoKeyRights_Impl(const CryptoKeyRights& val) : cli::enumeration<CryptoKeyRights>(val) { }
        operator CryptoKeyRights() { return value; }
        
        virtual const std::vector<CryptoKeyRights>& GetValues() const override
        {
            static std::vector<CryptoKeyRights> res =
            {
                CryptoKeyRights::ReadData,
                CryptoKeyRights::WriteData,
                CryptoKeyRights::ReadExtendedAttributes,
                CryptoKeyRights::WriteExtendedAttributes,
                CryptoKeyRights::ReadAttributes,
                CryptoKeyRights::WriteAttributes,
                CryptoKeyRights::Delete,
                CryptoKeyRights::ReadPermissions,
                CryptoKeyRights::ChangePermissions,
                CryptoKeyRights::TakeOwnership,
                CryptoKeyRights::Synchronize,
                CryptoKeyRights::FullControl,
                CryptoKeyRights::GenericAll,
                CryptoKeyRights::GenericExecute,
                CryptoKeyRights::GenericWrite,
                CryptoKeyRights::GenericRead,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ReadData"),
                _T("WriteData"),
                _T("ReadExtendedAttributes"),
                _T("WriteExtendedAttributes"),
                _T("ReadAttributes"),
                _T("WriteAttributes"),
                _T("Delete"),
                _T("ReadPermissions"),
                _T("ChangePermissions"),
                _T("TakeOwnership"),
                _T("Synchronize"),
                _T("FullControl"),
                _T("GenericAll"),
                _T("GenericExecute"),
                _T("GenericWrite"),
                _T("GenericRead"),
            };
            return res;
        }
    };
    
    
    enum class EventWaitHandleRights
    {
        Modify = 2,
        Delete = 65536,
        ReadPermissions = 131072,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        Synchronize = 1048576,
        FullControl = 2031619,
    };
    
    struct EventWaitHandleRights_Impl : public cli::enumeration<EventWaitHandleRights>
    {
        EventWaitHandleRights_Impl(const EventWaitHandleRights& val) : cli::enumeration<EventWaitHandleRights>(val) { }
        operator EventWaitHandleRights() { return value; }
        
        virtual const std::vector<EventWaitHandleRights>& GetValues() const override
        {
            static std::vector<EventWaitHandleRights> res =
            {
                EventWaitHandleRights::Modify,
                EventWaitHandleRights::Delete,
                EventWaitHandleRights::ReadPermissions,
                EventWaitHandleRights::ChangePermissions,
                EventWaitHandleRights::TakeOwnership,
                EventWaitHandleRights::Synchronize,
                EventWaitHandleRights::FullControl,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Modify"),
                _T("Delete"),
                _T("ReadPermissions"),
                _T("ChangePermissions"),
                _T("TakeOwnership"),
                _T("Synchronize"),
                _T("FullControl"),
            };
            return res;
        }
    };
    
    
    enum class FileSystemRights
    {
        ListDirectory = 1,
        ReadData = 1,
        CreateFiles = 2,
        WriteData = 2,
        AppendData = 4,
        CreateDirectories = 4,
        ReadExtendedAttributes = 8,
        WriteExtendedAttributes = 16,
        ExecuteFile = 32,
        Traverse = 32,
        DeleteSubdirectoriesAndFiles = 64,
        ReadAttributes = 128,
        WriteAttributes = 256,
        Write = 278,
        Delete = 65536,
        ReadPermissions = 131072,
        Read = 131209,
        ReadAndExecute = 131241,
        Modify = 197055,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        Synchronize = 1048576,
        FullControl = 2032127,
    };
    
    struct FileSystemRights_Impl : public cli::enumeration<FileSystemRights>
    {
        FileSystemRights_Impl(const FileSystemRights& val) : cli::enumeration<FileSystemRights>(val) { }
        operator FileSystemRights() { return value; }
        
        virtual const std::vector<FileSystemRights>& GetValues() const override
        {
            static std::vector<FileSystemRights> res =
            {
                FileSystemRights::ListDirectory,
                FileSystemRights::ReadData,
                FileSystemRights::CreateFiles,
                FileSystemRights::WriteData,
                FileSystemRights::AppendData,
                FileSystemRights::CreateDirectories,
                FileSystemRights::ReadExtendedAttributes,
                FileSystemRights::WriteExtendedAttributes,
                FileSystemRights::ExecuteFile,
                FileSystemRights::Traverse,
                FileSystemRights::DeleteSubdirectoriesAndFiles,
                FileSystemRights::ReadAttributes,
                FileSystemRights::WriteAttributes,
                FileSystemRights::Write,
                FileSystemRights::Delete,
                FileSystemRights::ReadPermissions,
                FileSystemRights::Read,
                FileSystemRights::ReadAndExecute,
                FileSystemRights::Modify,
                FileSystemRights::ChangePermissions,
                FileSystemRights::TakeOwnership,
                FileSystemRights::Synchronize,
                FileSystemRights::FullControl,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("ListDirectory"),
                _T("ReadData"),
                _T("CreateFiles"),
                _T("WriteData"),
                _T("AppendData"),
                _T("CreateDirectories"),
                _T("ReadExtendedAttributes"),
                _T("WriteExtendedAttributes"),
                _T("ExecuteFile"),
                _T("Traverse"),
                _T("DeleteSubdirectoriesAndFiles"),
                _T("ReadAttributes"),
                _T("WriteAttributes"),
                _T("Write"),
                _T("Delete"),
                _T("ReadPermissions"),
                _T("Read"),
                _T("ReadAndExecute"),
                _T("Modify"),
                _T("ChangePermissions"),
                _T("TakeOwnership"),
                _T("Synchronize"),
                _T("FullControl"),
            };
            return res;
        }
    };
    
    
    enum class InheritanceFlags
    {
        None = 0,
        ContainerInherit = 1,
        ObjectInherit = 2,
    };
    
    struct InheritanceFlags_Impl : public cli::enumeration<InheritanceFlags>
    {
        InheritanceFlags_Impl(const InheritanceFlags& val) : cli::enumeration<InheritanceFlags>(val) { }
        operator InheritanceFlags() { return value; }
        
        virtual const std::vector<InheritanceFlags>& GetValues() const override
        {
            static std::vector<InheritanceFlags> res =
            {
                InheritanceFlags::None,
                InheritanceFlags::ContainerInherit,
                InheritanceFlags::ObjectInherit,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("ContainerInherit"),
                _T("ObjectInherit"),
            };
            return res;
        }
    };
    
    
    enum class MutexRights
    {
        Modify = 1,
        Delete = 65536,
        ReadPermissions = 131072,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        Synchronize = 1048576,
        FullControl = 2031617,
    };
    
    struct MutexRights_Impl : public cli::enumeration<MutexRights>
    {
        MutexRights_Impl(const MutexRights& val) : cli::enumeration<MutexRights>(val) { }
        operator MutexRights() { return value; }
        
        virtual const std::vector<MutexRights>& GetValues() const override
        {
            static std::vector<MutexRights> res =
            {
                MutexRights::Modify,
                MutexRights::Delete,
                MutexRights::ReadPermissions,
                MutexRights::ChangePermissions,
                MutexRights::TakeOwnership,
                MutexRights::Synchronize,
                MutexRights::FullControl,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Modify"),
                _T("Delete"),
                _T("ReadPermissions"),
                _T("ChangePermissions"),
                _T("TakeOwnership"),
                _T("Synchronize"),
                _T("FullControl"),
            };
            return res;
        }
    };
    
    
    enum class ObjectAceFlags
    {
        None = 0,
        ObjectAceTypePresent = 1,
        InheritedObjectAceTypePresent = 2,
    };
    
    struct ObjectAceFlags_Impl : public cli::enumeration<ObjectAceFlags>
    {
        ObjectAceFlags_Impl(const ObjectAceFlags& val) : cli::enumeration<ObjectAceFlags>(val) { }
        operator ObjectAceFlags() { return value; }
        
        virtual const std::vector<ObjectAceFlags>& GetValues() const override
        {
            static std::vector<ObjectAceFlags> res =
            {
                ObjectAceFlags::None,
                ObjectAceFlags::ObjectAceTypePresent,
                ObjectAceFlags::InheritedObjectAceTypePresent,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("ObjectAceTypePresent"),
                _T("InheritedObjectAceTypePresent"),
            };
            return res;
        }
    };
    
    
    enum class PropagationFlags
    {
        None = 0,
        NoPropagateInherit = 1,
        InheritOnly = 2,
    };
    
    struct PropagationFlags_Impl : public cli::enumeration<PropagationFlags>
    {
        PropagationFlags_Impl(const PropagationFlags& val) : cli::enumeration<PropagationFlags>(val) { }
        operator PropagationFlags() { return value; }
        
        virtual const std::vector<PropagationFlags>& GetValues() const override
        {
            static std::vector<PropagationFlags> res =
            {
                PropagationFlags::None,
                PropagationFlags::NoPropagateInherit,
                PropagationFlags::InheritOnly,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("NoPropagateInherit"),
                _T("InheritOnly"),
            };
            return res;
        }
    };
    
    
    enum class RegistryRights
    {
        QueryValues = 1,
        SetValue = 2,
        CreateSubKey = 4,
        EnumerateSubKeys = 8,
        Notify = 16,
        CreateLink = 32,
        Delete = 65536,
        ReadPermissions = 131072,
        WriteKey = 131078,
        ReadKey = 131097,
        ExecuteKey = 131097,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        FullControl = 983103,
    };
    
    struct RegistryRights_Impl : public cli::enumeration<RegistryRights>
    {
        RegistryRights_Impl(const RegistryRights& val) : cli::enumeration<RegistryRights>(val) { }
        operator RegistryRights() { return value; }
        
        virtual const std::vector<RegistryRights>& GetValues() const override
        {
            static std::vector<RegistryRights> res =
            {
                RegistryRights::QueryValues,
                RegistryRights::SetValue,
                RegistryRights::CreateSubKey,
                RegistryRights::EnumerateSubKeys,
                RegistryRights::Notify,
                RegistryRights::CreateLink,
                RegistryRights::Delete,
                RegistryRights::ReadPermissions,
                RegistryRights::WriteKey,
                RegistryRights::ReadKey,
                RegistryRights::ExecuteKey,
                RegistryRights::ChangePermissions,
                RegistryRights::TakeOwnership,
                RegistryRights::FullControl,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("QueryValues"),
                _T("SetValue"),
                _T("CreateSubKey"),
                _T("EnumerateSubKeys"),
                _T("Notify"),
                _T("CreateLink"),
                _T("Delete"),
                _T("ReadPermissions"),
                _T("WriteKey"),
                _T("ReadKey"),
                _T("ExecuteKey"),
                _T("ChangePermissions"),
                _T("TakeOwnership"),
                _T("FullControl"),
            };
            return res;
        }
    };
    
    
    enum class ResourceType
    {
        Unknown = 0,
        FileObject = 1,
        Service = 2,
        Printer = 3,
        RegistryKey2 = 4,
        LMShare = 5,
        KernelObject = 6,
        WindowObject = 7,
        DSObject = 8,
        DSObjectAll = 9,
        ProviderDefined = 10,
        WmiGuidObject = 11,
        RegistryWow6432Key = 12,
    };
    
    struct ResourceType_Impl : public cli::enumeration<ResourceType>
    {
        ResourceType_Impl(const ResourceType& val) : cli::enumeration<ResourceType>(val) { }
        operator ResourceType() { return value; }
        
        virtual const std::vector<ResourceType>& GetValues() const override
        {
            static std::vector<ResourceType> res =
            {
                ResourceType::Unknown,
                ResourceType::FileObject,
                ResourceType::Service,
                ResourceType::Printer,
                ResourceType::RegistryKey2,
                ResourceType::LMShare,
                ResourceType::KernelObject,
                ResourceType::WindowObject,
                ResourceType::DSObject,
                ResourceType::DSObjectAll,
                ResourceType::ProviderDefined,
                ResourceType::WmiGuidObject,
                ResourceType::RegistryWow6432Key,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unknown"),
                _T("FileObject"),
                _T("Service"),
                _T("Printer"),
                _T("RegistryKey2"),
                _T("LMShare"),
                _T("KernelObject"),
                _T("WindowObject"),
                _T("DSObject"),
                _T("DSObjectAll"),
                _T("ProviderDefined"),
                _T("WmiGuidObject"),
                _T("RegistryWow6432Key"),
            };
            return res;
        }
    };
    
    
    enum class SecurityInfos
    {
        Owner = 1,
        Group = 2,
        DiscretionaryAcl2 = 4,
        SystemAcl2 = 8,
    };
    
    struct SecurityInfos_Impl : public cli::enumeration<SecurityInfos>
    {
        SecurityInfos_Impl(const SecurityInfos& val) : cli::enumeration<SecurityInfos>(val) { }
        operator SecurityInfos() { return value; }
        
        virtual const std::vector<SecurityInfos>& GetValues() const override
        {
            static std::vector<SecurityInfos> res =
            {
                SecurityInfos::Owner,
                SecurityInfos::Group,
                SecurityInfos::DiscretionaryAcl2,
                SecurityInfos::SystemAcl2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Owner"),
                _T("Group"),
                _T("DiscretionaryAcl2"),
                _T("SystemAcl2"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    enum class CipherMode
    {
        CBC = 1,
        ECB = 2,
        OFB = 3,
        CFB = 4,
        CTS = 5,
    };
    
    struct CipherMode_Impl : public cli::enumeration<CipherMode>
    {
        CipherMode_Impl(const CipherMode& val) : cli::enumeration<CipherMode>(val) { }
        operator CipherMode() { return value; }
        
        virtual const std::vector<CipherMode>& GetValues() const override
        {
            static std::vector<CipherMode> res =
            {
                CipherMode::CBC,
                CipherMode::ECB,
                CipherMode::OFB,
                CipherMode::CFB,
                CipherMode::CTS,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("CBC"),
                _T("ECB"),
                _T("OFB"),
                _T("CFB"),
                _T("CTS"),
            };
            return res;
        }
    };
    
    
    enum class CryptoStreamMode
    {
        Read = 0,
        Write = 1,
    };
    
    struct CryptoStreamMode_Impl : public cli::enumeration<CryptoStreamMode>
    {
        CryptoStreamMode_Impl(const CryptoStreamMode& val) : cli::enumeration<CryptoStreamMode>(val) { }
        operator CryptoStreamMode() { return value; }
        
        virtual const std::vector<CryptoStreamMode>& GetValues() const override
        {
            static std::vector<CryptoStreamMode> res =
            {
                CryptoStreamMode::Read,
                CryptoStreamMode::Write,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Read"),
                _T("Write"),
            };
            return res;
        }
    };
    
    
    enum class CspProviderFlags
    {
        UseMachineKeyStore = 1,
        UseDefaultKeyContainer = 2,
        UseExistingKey = 8,
        NoFlags = 0,
        NoPrompt = 64,
        UseArchivableKey = 16,
        UseNonExportableKey = 4,
        UseUserProtectedKey = 32,
        CreateEphemeralKey = 128,
    };
    
    struct CspProviderFlags_Impl : public cli::enumeration<CspProviderFlags>
    {
        CspProviderFlags_Impl(const CspProviderFlags& val) : cli::enumeration<CspProviderFlags>(val) { }
        operator CspProviderFlags() { return value; }
        
        virtual const std::vector<CspProviderFlags>& GetValues() const override
        {
            static std::vector<CspProviderFlags> res =
            {
                CspProviderFlags::UseMachineKeyStore,
                CspProviderFlags::UseDefaultKeyContainer,
                CspProviderFlags::UseExistingKey,
                CspProviderFlags::NoFlags,
                CspProviderFlags::NoPrompt,
                CspProviderFlags::UseArchivableKey,
                CspProviderFlags::UseNonExportableKey,
                CspProviderFlags::UseUserProtectedKey,
                CspProviderFlags::CreateEphemeralKey,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("UseMachineKeyStore"),
                _T("UseDefaultKeyContainer"),
                _T("UseExistingKey"),
                _T("NoFlags"),
                _T("NoPrompt"),
                _T("UseArchivableKey"),
                _T("UseNonExportableKey"),
                _T("UseUserProtectedKey"),
                _T("CreateEphemeralKey"),
            };
            return res;
        }
    };
    
    
    enum class FromBase64TransformMode
    {
        IgnoreWhiteSpaces = 0,
        DoNotIgnoreWhiteSpaces = 1,
    };
    
    struct FromBase64TransformMode_Impl : public cli::enumeration<FromBase64TransformMode>
    {
        FromBase64TransformMode_Impl(const FromBase64TransformMode& val) : cli::enumeration<FromBase64TransformMode>(val) { }
        operator FromBase64TransformMode() { return value; }
        
        virtual const std::vector<FromBase64TransformMode>& GetValues() const override
        {
            static std::vector<FromBase64TransformMode> res =
            {
                FromBase64TransformMode::IgnoreWhiteSpaces,
                FromBase64TransformMode::DoNotIgnoreWhiteSpaces,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("IgnoreWhiteSpaces"),
                _T("DoNotIgnoreWhiteSpaces"),
            };
            return res;
        }
    };
    
    
    enum class KeyNumber
    {
        Exchange = 1,
        Signature = 2,
    };
    
    struct KeyNumber_Impl : public cli::enumeration<KeyNumber>
    {
        KeyNumber_Impl(const KeyNumber& val) : cli::enumeration<KeyNumber>(val) { }
        operator KeyNumber() { return value; }
        
        virtual const std::vector<KeyNumber>& GetValues() const override
        {
            static std::vector<KeyNumber> res =
            {
                KeyNumber::Exchange,
                KeyNumber::Signature,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Exchange"),
                _T("Signature"),
            };
            return res;
        }
    };
    
    
    enum class PaddingMode
    {
        None = 1,
        PKCS72 = 2,
        Zeros = 3,
        ANSIX923 = 4,
        ISO10126 = 5,
    };
    
    struct PaddingMode_Impl : public cli::enumeration<PaddingMode>
    {
        PaddingMode_Impl(const PaddingMode& val) : cli::enumeration<PaddingMode>(val) { }
        operator PaddingMode() { return value; }
        
        virtual const std::vector<PaddingMode>& GetValues() const override
        {
            static std::vector<PaddingMode> res =
            {
                PaddingMode::None,
                PaddingMode::PKCS72,
                PaddingMode::Zeros,
                PaddingMode::ANSIX923,
                PaddingMode::ISO10126,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("PKCS72"),
                _T("Zeros"),
                _T("ANSIX923"),
                _T("ISO10126"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Security { namespace Cryptography { namespace X509Certificates {
    
    enum class X509ContentType
    {
        Unknown = 0,
        Cert = 1,
        SerializedCert = 2,
        Pfx = 3,
        SerializedStore = 4,
        Pkcs7 = 5,
        Authenticode = 6,
        Pkcs12 = 3,
    };
    
    struct X509ContentType_Impl : public cli::enumeration<X509ContentType>
    {
        X509ContentType_Impl(const X509ContentType& val) : cli::enumeration<X509ContentType>(val) { }
        operator X509ContentType() { return value; }
        
        virtual const std::vector<X509ContentType>& GetValues() const override
        {
            static std::vector<X509ContentType> res =
            {
                X509ContentType::Unknown,
                X509ContentType::Cert,
                X509ContentType::SerializedCert,
                X509ContentType::Pfx,
                X509ContentType::SerializedStore,
                X509ContentType::Pkcs7,
                X509ContentType::Authenticode,
                X509ContentType::Pkcs12,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unknown"),
                _T("Cert"),
                _T("SerializedCert"),
                _T("Pfx"),
                _T("SerializedStore"),
                _T("Pkcs7"),
                _T("Authenticode"),
                _T("Pkcs12"),
            };
            return res;
        }
    };
    
    
    enum class X509KeyStorageFlags
    {
        DefaultKeySet = 0,
        UserKeySet = 1,
        MachineKeySet = 2,
        Exportable = 4,
        UserProtected = 8,
        PersistKeySet = 16,
    };
    
    struct X509KeyStorageFlags_Impl : public cli::enumeration<X509KeyStorageFlags>
    {
        X509KeyStorageFlags_Impl(const X509KeyStorageFlags& val) : cli::enumeration<X509KeyStorageFlags>(val) { }
        operator X509KeyStorageFlags() { return value; }
        
        virtual const std::vector<X509KeyStorageFlags>& GetValues() const override
        {
            static std::vector<X509KeyStorageFlags> res =
            {
                X509KeyStorageFlags::DefaultKeySet,
                X509KeyStorageFlags::UserKeySet,
                X509KeyStorageFlags::MachineKeySet,
                X509KeyStorageFlags::Exportable,
                X509KeyStorageFlags::UserProtected,
                X509KeyStorageFlags::PersistKeySet,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("DefaultKeySet"),
                _T("UserKeySet"),
                _T("MachineKeySet"),
                _T("Exportable"),
                _T("UserProtected"),
                _T("PersistKeySet"),
            };
            return res;
        }
    };
    
}}}}
namespace System { namespace Security { namespace Permissions {
    
    enum class EnvironmentPermissionAccess
    {
        NoAccess = 0,
        Read = 1,
        Write = 2,
        AllAccess = 3,
    };
    
    struct EnvironmentPermissionAccess_Impl : public cli::enumeration<EnvironmentPermissionAccess>
    {
        EnvironmentPermissionAccess_Impl(const EnvironmentPermissionAccess& val) : cli::enumeration<EnvironmentPermissionAccess>(val) { }
        operator EnvironmentPermissionAccess() { return value; }
        
        virtual const std::vector<EnvironmentPermissionAccess>& GetValues() const override
        {
            static std::vector<EnvironmentPermissionAccess> res =
            {
                EnvironmentPermissionAccess::NoAccess,
                EnvironmentPermissionAccess::Read,
                EnvironmentPermissionAccess::Write,
                EnvironmentPermissionAccess::AllAccess,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoAccess"),
                _T("Read"),
                _T("Write"),
                _T("AllAccess"),
            };
            return res;
        }
    };
    
    
    enum class FileDialogPermissionAccess
    {
        None = 0,
        Open = 1,
        Save = 2,
        OpenSave = 3,
    };
    
    struct FileDialogPermissionAccess_Impl : public cli::enumeration<FileDialogPermissionAccess>
    {
        FileDialogPermissionAccess_Impl(const FileDialogPermissionAccess& val) : cli::enumeration<FileDialogPermissionAccess>(val) { }
        operator FileDialogPermissionAccess() { return value; }
        
        virtual const std::vector<FileDialogPermissionAccess>& GetValues() const override
        {
            static std::vector<FileDialogPermissionAccess> res =
            {
                FileDialogPermissionAccess::None,
                FileDialogPermissionAccess::Open,
                FileDialogPermissionAccess::Save,
                FileDialogPermissionAccess::OpenSave,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Open"),
                _T("Save"),
                _T("OpenSave"),
            };
            return res;
        }
    };
    
    
    enum class FileIOPermissionAccess
    {
        NoAccess = 0,
        Read = 1,
        Write = 2,
        Append = 4,
        PathDiscovery = 8,
        AllAccess = 15,
    };
    
    struct FileIOPermissionAccess_Impl : public cli::enumeration<FileIOPermissionAccess>
    {
        FileIOPermissionAccess_Impl(const FileIOPermissionAccess& val) : cli::enumeration<FileIOPermissionAccess>(val) { }
        operator FileIOPermissionAccess() { return value; }
        
        virtual const std::vector<FileIOPermissionAccess>& GetValues() const override
        {
            static std::vector<FileIOPermissionAccess> res =
            {
                FileIOPermissionAccess::NoAccess,
                FileIOPermissionAccess::Read,
                FileIOPermissionAccess::Write,
                FileIOPermissionAccess::Append,
                FileIOPermissionAccess::PathDiscovery,
                FileIOPermissionAccess::AllAccess,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoAccess"),
                _T("Read"),
                _T("Write"),
                _T("Append"),
                _T("PathDiscovery"),
                _T("AllAccess"),
            };
            return res;
        }
    };
    
    
    enum class HostProtectionResource
    {
        None = 0,
        Synchronization = 1,
        SharedState = 2,
        ExternalProcessMgmt = 4,
        SelfAffectingProcessMgmt = 8,
        ExternalThreading = 16,
        SelfAffectingThreading = 32,
        SecurityInfrastructure = 64,
        UI = 128,
        MayLeakOnAbort = 256,
        All = 511,
    };
    
    struct HostProtectionResource_Impl : public cli::enumeration<HostProtectionResource>
    {
        HostProtectionResource_Impl(const HostProtectionResource& val) : cli::enumeration<HostProtectionResource>(val) { }
        operator HostProtectionResource() { return value; }
        
        virtual const std::vector<HostProtectionResource>& GetValues() const override
        {
            static std::vector<HostProtectionResource> res =
            {
                HostProtectionResource::None,
                HostProtectionResource::Synchronization,
                HostProtectionResource::SharedState,
                HostProtectionResource::ExternalProcessMgmt,
                HostProtectionResource::SelfAffectingProcessMgmt,
                HostProtectionResource::ExternalThreading,
                HostProtectionResource::SelfAffectingThreading,
                HostProtectionResource::SecurityInfrastructure,
                HostProtectionResource::UI,
                HostProtectionResource::MayLeakOnAbort,
                HostProtectionResource::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Synchronization"),
                _T("SharedState"),
                _T("ExternalProcessMgmt"),
                _T("SelfAffectingProcessMgmt"),
                _T("ExternalThreading"),
                _T("SelfAffectingThreading"),
                _T("SecurityInfrastructure"),
                _T("UI"),
                _T("MayLeakOnAbort"),
                _T("All"),
            };
            return res;
        }
    };
    
    
    enum class BuiltInToken
    {
        Environment2 = 0,
        FileDialog = 1,
        FileIO = 2,
        IsolatedStorageFile2 = 3,
        Reflection = 4,
        Registry2 = 5,
        Security = 6,
        UI = 7,
        Principal = 8,
        HostProtection = 9,
        PublisherIdentity = 10,
        SiteIdentity = 11,
        StrongNameIdentity = 12,
        UrlIdentity = 13,
        ZoneIdentity = 14,
        GacIdentity = 15,
        KeyContainer = 16,
    };
    
    struct BuiltInToken_Impl : public cli::enumeration<BuiltInToken>
    {
        BuiltInToken_Impl(const BuiltInToken& val) : cli::enumeration<BuiltInToken>(val) { }
        operator BuiltInToken() { return value; }
        
        virtual const std::vector<BuiltInToken>& GetValues() const override
        {
            static std::vector<BuiltInToken> res =
            {
                BuiltInToken::Environment2,
                BuiltInToken::FileDialog,
                BuiltInToken::FileIO,
                BuiltInToken::IsolatedStorageFile2,
                BuiltInToken::Reflection,
                BuiltInToken::Registry2,
                BuiltInToken::Security,
                BuiltInToken::UI,
                BuiltInToken::Principal,
                BuiltInToken::HostProtection,
                BuiltInToken::PublisherIdentity,
                BuiltInToken::SiteIdentity,
                BuiltInToken::StrongNameIdentity,
                BuiltInToken::UrlIdentity,
                BuiltInToken::ZoneIdentity,
                BuiltInToken::GacIdentity,
                BuiltInToken::KeyContainer,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Environment2"),
                _T("FileDialog"),
                _T("FileIO"),
                _T("IsolatedStorageFile2"),
                _T("Reflection"),
                _T("Registry2"),
                _T("Security"),
                _T("UI"),
                _T("Principal"),
                _T("HostProtection"),
                _T("PublisherIdentity"),
                _T("SiteIdentity"),
                _T("StrongNameIdentity"),
                _T("UrlIdentity"),
                _T("ZoneIdentity"),
                _T("GacIdentity"),
                _T("KeyContainer"),
            };
            return res;
        }
    };
    
    
    enum class IsolatedStorageContainment
    {
        None = 0,
        DomainIsolationByUser = 16,
        AssemblyIsolationByUser = 32,
        DomainIsolationByRoamingUser = 80,
        AssemblyIsolationByRoamingUser = 96,
        AdministerIsolatedStorageByUser = 112,
        UnrestrictedIsolatedStorage = 240,
        ApplicationIsolationByUser = 21,
        DomainIsolationByMachine = 48,
        AssemblyIsolationByMachine = 64,
        ApplicationIsolationByMachine = 69,
        ApplicationIsolationByRoamingUser = 101,
    };
    
    struct IsolatedStorageContainment_Impl : public cli::enumeration<IsolatedStorageContainment>
    {
        IsolatedStorageContainment_Impl(const IsolatedStorageContainment& val) : cli::enumeration<IsolatedStorageContainment>(val) { }
        operator IsolatedStorageContainment() { return value; }
        
        virtual const std::vector<IsolatedStorageContainment>& GetValues() const override
        {
            static std::vector<IsolatedStorageContainment> res =
            {
                IsolatedStorageContainment::None,
                IsolatedStorageContainment::DomainIsolationByUser,
                IsolatedStorageContainment::AssemblyIsolationByUser,
                IsolatedStorageContainment::DomainIsolationByRoamingUser,
                IsolatedStorageContainment::AssemblyIsolationByRoamingUser,
                IsolatedStorageContainment::AdministerIsolatedStorageByUser,
                IsolatedStorageContainment::UnrestrictedIsolatedStorage,
                IsolatedStorageContainment::ApplicationIsolationByUser,
                IsolatedStorageContainment::DomainIsolationByMachine,
                IsolatedStorageContainment::AssemblyIsolationByMachine,
                IsolatedStorageContainment::ApplicationIsolationByMachine,
                IsolatedStorageContainment::ApplicationIsolationByRoamingUser,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("DomainIsolationByUser"),
                _T("AssemblyIsolationByUser"),
                _T("DomainIsolationByRoamingUser"),
                _T("AssemblyIsolationByRoamingUser"),
                _T("AdministerIsolatedStorageByUser"),
                _T("UnrestrictedIsolatedStorage"),
                _T("ApplicationIsolationByUser"),
                _T("DomainIsolationByMachine"),
                _T("AssemblyIsolationByMachine"),
                _T("ApplicationIsolationByMachine"),
                _T("ApplicationIsolationByRoamingUser"),
            };
            return res;
        }
    };
    
    
    enum class KeyContainerPermissionFlags
    {
        NoFlags = 0,
        Create = 1,
        Open = 2,
        Delete = 4,
        Import = 16,
        Export = 32,
        Sign2 = 256,
        Decrypt = 512,
        ViewAcl = 4096,
        ChangeAcl = 8192,
        AllFlags = 13111,
    };
    
    struct KeyContainerPermissionFlags_Impl : public cli::enumeration<KeyContainerPermissionFlags>
    {
        KeyContainerPermissionFlags_Impl(const KeyContainerPermissionFlags& val) : cli::enumeration<KeyContainerPermissionFlags>(val) { }
        operator KeyContainerPermissionFlags() { return value; }
        
        virtual const std::vector<KeyContainerPermissionFlags>& GetValues() const override
        {
            static std::vector<KeyContainerPermissionFlags> res =
            {
                KeyContainerPermissionFlags::NoFlags,
                KeyContainerPermissionFlags::Create,
                KeyContainerPermissionFlags::Open,
                KeyContainerPermissionFlags::Delete,
                KeyContainerPermissionFlags::Import,
                KeyContainerPermissionFlags::Export,
                KeyContainerPermissionFlags::Sign2,
                KeyContainerPermissionFlags::Decrypt,
                KeyContainerPermissionFlags::ViewAcl,
                KeyContainerPermissionFlags::ChangeAcl,
                KeyContainerPermissionFlags::AllFlags,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoFlags"),
                _T("Create"),
                _T("Open"),
                _T("Delete"),
                _T("Import"),
                _T("Export"),
                _T("Sign2"),
                _T("Decrypt"),
                _T("ViewAcl"),
                _T("ChangeAcl"),
                _T("AllFlags"),
            };
            return res;
        }
    };
    
    
    enum class PermissionState
    {
        Unrestricted = 1,
        None = 0,
    };
    
    struct PermissionState_Impl : public cli::enumeration<PermissionState>
    {
        PermissionState_Impl(const PermissionState& val) : cli::enumeration<PermissionState>(val) { }
        operator PermissionState() { return value; }
        
        virtual const std::vector<PermissionState>& GetValues() const override
        {
            static std::vector<PermissionState> res =
            {
                PermissionState::Unrestricted,
                PermissionState::None,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Unrestricted"),
                _T("None"),
            };
            return res;
        }
    };
    
    
    enum class ReflectionPermissionFlag
    {
        NoFlags = 0,
        TypeInformation = 1,
        MemberAccess = 2,
        ReflectionEmit = 4,
        AllFlags = 7,
        RestrictedMemberAccess = 8,
    };
    
    struct ReflectionPermissionFlag_Impl : public cli::enumeration<ReflectionPermissionFlag>
    {
        ReflectionPermissionFlag_Impl(const ReflectionPermissionFlag& val) : cli::enumeration<ReflectionPermissionFlag>(val) { }
        operator ReflectionPermissionFlag() { return value; }
        
        virtual const std::vector<ReflectionPermissionFlag>& GetValues() const override
        {
            static std::vector<ReflectionPermissionFlag> res =
            {
                ReflectionPermissionFlag::NoFlags,
                ReflectionPermissionFlag::TypeInformation,
                ReflectionPermissionFlag::MemberAccess,
                ReflectionPermissionFlag::ReflectionEmit,
                ReflectionPermissionFlag::AllFlags,
                ReflectionPermissionFlag::RestrictedMemberAccess,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoFlags"),
                _T("TypeInformation"),
                _T("MemberAccess"),
                _T("ReflectionEmit"),
                _T("AllFlags"),
                _T("RestrictedMemberAccess"),
            };
            return res;
        }
    };
    
    
    enum class RegistryPermissionAccess
    {
        NoAccess = 0,
        Read = 1,
        Write = 2,
        Create = 4,
        AllAccess = 7,
    };
    
    struct RegistryPermissionAccess_Impl : public cli::enumeration<RegistryPermissionAccess>
    {
        RegistryPermissionAccess_Impl(const RegistryPermissionAccess& val) : cli::enumeration<RegistryPermissionAccess>(val) { }
        operator RegistryPermissionAccess() { return value; }
        
        virtual const std::vector<RegistryPermissionAccess>& GetValues() const override
        {
            static std::vector<RegistryPermissionAccess> res =
            {
                RegistryPermissionAccess::NoAccess,
                RegistryPermissionAccess::Read,
                RegistryPermissionAccess::Write,
                RegistryPermissionAccess::Create,
                RegistryPermissionAccess::AllAccess,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoAccess"),
                _T("Read"),
                _T("Write"),
                _T("Create"),
                _T("AllAccess"),
            };
            return res;
        }
    };
    
    
    enum class SecurityAction
    {
        Demand = 2,
        Assert = 3,
        Deny = 4,
        PermitOnly = 5,
        LinkDemand = 6,
        InheritanceDemand = 7,
        RequestMinimum = 8,
        RequestOptional = 9,
        RequestRefuse = 10,
    };
    
    struct SecurityAction_Impl : public cli::enumeration<SecurityAction>
    {
        SecurityAction_Impl(const SecurityAction& val) : cli::enumeration<SecurityAction>(val) { }
        operator SecurityAction() { return value; }
        
        virtual const std::vector<SecurityAction>& GetValues() const override
        {
            static std::vector<SecurityAction> res =
            {
                SecurityAction::Demand,
                SecurityAction::Assert,
                SecurityAction::Deny,
                SecurityAction::PermitOnly,
                SecurityAction::LinkDemand,
                SecurityAction::InheritanceDemand,
                SecurityAction::RequestMinimum,
                SecurityAction::RequestOptional,
                SecurityAction::RequestRefuse,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Demand"),
                _T("Assert"),
                _T("Deny"),
                _T("PermitOnly"),
                _T("LinkDemand"),
                _T("InheritanceDemand"),
                _T("RequestMinimum"),
                _T("RequestOptional"),
                _T("RequestRefuse"),
            };
            return res;
        }
    };
    
    
    enum class SecurityPermissionFlag
    {
        NoFlags = 0,
        Assertion = 1,
        UnmanagedCode = 2,
        SkipVerification = 4,
        Execution = 8,
        ControlThread = 16,
        ControlEvidence = 32,
        ControlPolicy = 64,
        SerializationFormatter = 128,
        ControlDomainPolicy = 256,
        ControlPrincipal = 512,
        ControlAppDomain = 1024,
        RemotingConfiguration2 = 2048,
        Infrastructure = 4096,
        BindingRedirects = 8192,
        AllFlags = 16383,
    };
    
    struct SecurityPermissionFlag_Impl : public cli::enumeration<SecurityPermissionFlag>
    {
        SecurityPermissionFlag_Impl(const SecurityPermissionFlag& val) : cli::enumeration<SecurityPermissionFlag>(val) { }
        operator SecurityPermissionFlag() { return value; }
        
        virtual const std::vector<SecurityPermissionFlag>& GetValues() const override
        {
            static std::vector<SecurityPermissionFlag> res =
            {
                SecurityPermissionFlag::NoFlags,
                SecurityPermissionFlag::Assertion,
                SecurityPermissionFlag::UnmanagedCode,
                SecurityPermissionFlag::SkipVerification,
                SecurityPermissionFlag::Execution,
                SecurityPermissionFlag::ControlThread,
                SecurityPermissionFlag::ControlEvidence,
                SecurityPermissionFlag::ControlPolicy,
                SecurityPermissionFlag::SerializationFormatter,
                SecurityPermissionFlag::ControlDomainPolicy,
                SecurityPermissionFlag::ControlPrincipal,
                SecurityPermissionFlag::ControlAppDomain,
                SecurityPermissionFlag::RemotingConfiguration2,
                SecurityPermissionFlag::Infrastructure,
                SecurityPermissionFlag::BindingRedirects,
                SecurityPermissionFlag::AllFlags,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoFlags"),
                _T("Assertion"),
                _T("UnmanagedCode"),
                _T("SkipVerification"),
                _T("Execution"),
                _T("ControlThread"),
                _T("ControlEvidence"),
                _T("ControlPolicy"),
                _T("SerializationFormatter"),
                _T("ControlDomainPolicy"),
                _T("ControlPrincipal"),
                _T("ControlAppDomain"),
                _T("RemotingConfiguration2"),
                _T("Infrastructure"),
                _T("BindingRedirects"),
                _T("AllFlags"),
            };
            return res;
        }
    };
    
    
    enum class UIPermissionClipboard
    {
        NoClipboard = 0,
        OwnClipboard = 1,
        AllClipboard = 2,
    };
    
    struct UIPermissionClipboard_Impl : public cli::enumeration<UIPermissionClipboard>
    {
        UIPermissionClipboard_Impl(const UIPermissionClipboard& val) : cli::enumeration<UIPermissionClipboard>(val) { }
        operator UIPermissionClipboard() { return value; }
        
        virtual const std::vector<UIPermissionClipboard>& GetValues() const override
        {
            static std::vector<UIPermissionClipboard> res =
            {
                UIPermissionClipboard::NoClipboard,
                UIPermissionClipboard::OwnClipboard,
                UIPermissionClipboard::AllClipboard,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoClipboard"),
                _T("OwnClipboard"),
                _T("AllClipboard"),
            };
            return res;
        }
    };
    
    
    enum class UIPermissionWindow
    {
        NoWindows = 0,
        SafeSubWindows = 1,
        SafeTopLevelWindows = 2,
        AllWindows = 3,
    };
    
    struct UIPermissionWindow_Impl : public cli::enumeration<UIPermissionWindow>
    {
        UIPermissionWindow_Impl(const UIPermissionWindow& val) : cli::enumeration<UIPermissionWindow>(val) { }
        operator UIPermissionWindow() { return value; }
        
        virtual const std::vector<UIPermissionWindow>& GetValues() const override
        {
            static std::vector<UIPermissionWindow> res =
            {
                UIPermissionWindow::NoWindows,
                UIPermissionWindow::SafeSubWindows,
                UIPermissionWindow::SafeTopLevelWindows,
                UIPermissionWindow::AllWindows,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NoWindows"),
                _T("SafeSubWindows"),
                _T("SafeTopLevelWindows"),
                _T("AllWindows"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Security { namespace Policy {
    
    enum class ApplicationInstallScope
    {
        PerUser = 1,
        AllUsers = 2,
    };
    
    struct ApplicationInstallScope_Impl : public cli::enumeration<ApplicationInstallScope>
    {
        ApplicationInstallScope_Impl(const ApplicationInstallScope& val) : cli::enumeration<ApplicationInstallScope>(val) { }
        operator ApplicationInstallScope() { return value; }
        
        virtual const std::vector<ApplicationInstallScope>& GetValues() const override
        {
            static std::vector<ApplicationInstallScope> res =
            {
                ApplicationInstallScope::PerUser,
                ApplicationInstallScope::AllUsers,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("PerUser"),
                _T("AllUsers"),
            };
            return res;
        }
    };
    
    
    enum class ApplicationVersionMatch
    {
        MatchExactVersion = 0,
        MatchAllVersions = 1,
    };
    
    struct ApplicationVersionMatch_Impl : public cli::enumeration<ApplicationVersionMatch>
    {
        ApplicationVersionMatch_Impl(const ApplicationVersionMatch& val) : cli::enumeration<ApplicationVersionMatch>(val) { }
        operator ApplicationVersionMatch() { return value; }
        
        virtual const std::vector<ApplicationVersionMatch>& GetValues() const override
        {
            static std::vector<ApplicationVersionMatch> res =
            {
                ApplicationVersionMatch::MatchExactVersion,
                ApplicationVersionMatch::MatchAllVersions,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("MatchExactVersion"),
                _T("MatchAllVersions"),
            };
            return res;
        }
    };
    
    
    enum class CodeGroupGrantScope
    {
        Assembly2 = 0,
        Application = 1,
    };
    
    struct CodeGroupGrantScope_Impl : public cli::enumeration<CodeGroupGrantScope>
    {
        CodeGroupGrantScope_Impl(const CodeGroupGrantScope& val) : cli::enumeration<CodeGroupGrantScope>(val) { }
        operator CodeGroupGrantScope() { return value; }
        
        virtual const std::vector<CodeGroupGrantScope>& GetValues() const override
        {
            static std::vector<CodeGroupGrantScope> res =
            {
                CodeGroupGrantScope::Assembly2,
                CodeGroupGrantScope::Application,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Assembly2"),
                _T("Application"),
            };
            return res;
        }
    };
    
    
    enum class Key
    {
        Ecma = 0,
        MsFinal = 1,
    };
    
    struct Key_Impl : public cli::enumeration<Key>
    {
        Key_Impl(const Key& val) : cli::enumeration<Key>(val) { }
        operator Key() { return value; }
        
        virtual const std::vector<Key>& GetValues() const override
        {
            static std::vector<Key> res =
            {
                Key::Ecma,
                Key::MsFinal,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Ecma"),
                _T("MsFinal"),
            };
            return res;
        }
    };
    
    
    enum class PolicyStatementAttribute
    {
        Nothing = 0,
        Exclusive = 1,
        LevelFinal = 2,
        All = 3,
    };
    
    struct PolicyStatementAttribute_Impl : public cli::enumeration<PolicyStatementAttribute>
    {
        PolicyStatementAttribute_Impl(const PolicyStatementAttribute& val) : cli::enumeration<PolicyStatementAttribute>(val) { }
        operator PolicyStatementAttribute() { return value; }
        
        virtual const std::vector<PolicyStatementAttribute>& GetValues() const override
        {
            static std::vector<PolicyStatementAttribute> res =
            {
                PolicyStatementAttribute::Nothing,
                PolicyStatementAttribute::Exclusive,
                PolicyStatementAttribute::LevelFinal,
                PolicyStatementAttribute::All,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Nothing"),
                _T("Exclusive"),
                _T("LevelFinal"),
                _T("All"),
            };
            return res;
        }
    };
    
    
    enum class PromptingLevel
    {
        Disabled = 0,
        Prompt = 1,
        PromptOnlyForAuthenticode = 2,
    };
    
    struct PromptingLevel_Impl : public cli::enumeration<PromptingLevel>
    {
        PromptingLevel_Impl(const PromptingLevel& val) : cli::enumeration<PromptingLevel>(val) { }
        operator PromptingLevel() { return value; }
        
        virtual const std::vector<PromptingLevel>& GetValues() const override
        {
            static std::vector<PromptingLevel> res =
            {
                PromptingLevel::Disabled,
                PromptingLevel::Prompt,
                PromptingLevel::PromptOnlyForAuthenticode,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Disabled"),
                _T("Prompt"),
                _T("PromptOnlyForAuthenticode"),
            };
            return res;
        }
    };
    
    
    enum class TrustManagerUIContext
    {
        Install = 0,
        Upgrade = 1,
        Run = 2,
    };
    
    struct TrustManagerUIContext_Impl : public cli::enumeration<TrustManagerUIContext>
    {
        TrustManagerUIContext_Impl(const TrustManagerUIContext& val) : cli::enumeration<TrustManagerUIContext>(val) { }
        operator TrustManagerUIContext() { return value; }
        
        virtual const std::vector<TrustManagerUIContext>& GetValues() const override
        {
            static std::vector<TrustManagerUIContext> res =
            {
                TrustManagerUIContext::Install,
                TrustManagerUIContext::Upgrade,
                TrustManagerUIContext::Run,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Install"),
                _T("Upgrade"),
                _T("Run"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Security { namespace Principal {
    
    enum class PrincipalPolicy
    {
        UnauthenticatedPrincipal = 0,
        NoPrincipal = 1,
        WindowsPrincipal2 = 2,
    };
    
    struct PrincipalPolicy_Impl : public cli::enumeration<PrincipalPolicy>
    {
        PrincipalPolicy_Impl(const PrincipalPolicy& val) : cli::enumeration<PrincipalPolicy>(val) { }
        operator PrincipalPolicy() { return value; }
        
        virtual const std::vector<PrincipalPolicy>& GetValues() const override
        {
            static std::vector<PrincipalPolicy> res =
            {
                PrincipalPolicy::UnauthenticatedPrincipal,
                PrincipalPolicy::NoPrincipal,
                PrincipalPolicy::WindowsPrincipal2,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("UnauthenticatedPrincipal"),
                _T("NoPrincipal"),
                _T("WindowsPrincipal2"),
            };
            return res;
        }
    };
    
    
    enum class TokenAccessLevels
    {
        AssignPrimary = 1,
        Duplicate = 2,
        Impersonate = 4,
        Query = 8,
        QuerySource = 16,
        AdjustPrivileges = 32,
        AdjustGroups = 64,
        AdjustDefault = 128,
        AdjustSessionId = 256,
        Read = 131080,
        Write = 131296,
        AllAccess = 983551,
        MaximumAllowed = 33554432,
    };
    
    struct TokenAccessLevels_Impl : public cli::enumeration<TokenAccessLevels>
    {
        TokenAccessLevels_Impl(const TokenAccessLevels& val) : cli::enumeration<TokenAccessLevels>(val) { }
        operator TokenAccessLevels() { return value; }
        
        virtual const std::vector<TokenAccessLevels>& GetValues() const override
        {
            static std::vector<TokenAccessLevels> res =
            {
                TokenAccessLevels::AssignPrimary,
                TokenAccessLevels::Duplicate,
                TokenAccessLevels::Impersonate,
                TokenAccessLevels::Query,
                TokenAccessLevels::QuerySource,
                TokenAccessLevels::AdjustPrivileges,
                TokenAccessLevels::AdjustGroups,
                TokenAccessLevels::AdjustDefault,
                TokenAccessLevels::AdjustSessionId,
                TokenAccessLevels::Read,
                TokenAccessLevels::Write,
                TokenAccessLevels::AllAccess,
                TokenAccessLevels::MaximumAllowed,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("AssignPrimary"),
                _T("Duplicate"),
                _T("Impersonate"),
                _T("Query"),
                _T("QuerySource"),
                _T("AdjustPrivileges"),
                _T("AdjustGroups"),
                _T("AdjustDefault"),
                _T("AdjustSessionId"),
                _T("Read"),
                _T("Write"),
                _T("AllAccess"),
                _T("MaximumAllowed"),
            };
            return res;
        }
    };
    
    
    enum class TokenImpersonationLevel
    {
        Anonymous = 1,
        Delegation = 4,
        Identification = 2,
        Impersonation = 3,
        None = 0,
    };
    
    struct TokenImpersonationLevel_Impl : public cli::enumeration<TokenImpersonationLevel>
    {
        TokenImpersonationLevel_Impl(const TokenImpersonationLevel& val) : cli::enumeration<TokenImpersonationLevel>(val) { }
        operator TokenImpersonationLevel() { return value; }
        
        virtual const std::vector<TokenImpersonationLevel>& GetValues() const override
        {
            static std::vector<TokenImpersonationLevel> res =
            {
                TokenImpersonationLevel::Anonymous,
                TokenImpersonationLevel::Delegation,
                TokenImpersonationLevel::Identification,
                TokenImpersonationLevel::Impersonation,
                TokenImpersonationLevel::None,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Anonymous"),
                _T("Delegation"),
                _T("Identification"),
                _T("Impersonation"),
                _T("None"),
            };
            return res;
        }
    };
    
    
    enum class WellKnownSidType
    {
        NullSid = 0,
        WorldSid = 1,
        LocalSid = 2,
        CreatorOwnerSid = 3,
        CreatorGroupSid = 4,
        CreatorOwnerServerSid = 5,
        CreatorGroupServerSid = 6,
        NTAuthoritySid = 7,
        DialupSid = 8,
        NetworkSid = 9,
        BatchSid = 10,
        InteractiveSid = 11,
        ServiceSid = 12,
        AnonymousSid = 13,
        ProxySid = 14,
        EnterpriseControllersSid = 15,
        SelfSid = 16,
        AuthenticatedUserSid = 17,
        RestrictedCodeSid = 18,
        TerminalServerSid = 19,
        RemoteLogonIdSid = 20,
        LogonIdsSid = 21,
        LocalSystemSid = 22,
        LocalServiceSid = 23,
        NetworkServiceSid = 24,
        BuiltinDomainSid = 25,
        BuiltinAdministratorsSid = 26,
        BuiltinUsersSid = 27,
        BuiltinGuestsSid = 28,
        BuiltinPowerUsersSid = 29,
        BuiltinAccountOperatorsSid = 30,
        BuiltinSystemOperatorsSid = 31,
        BuiltinPrintOperatorsSid = 32,
        BuiltinBackupOperatorsSid = 33,
        BuiltinReplicatorSid = 34,
        BuiltinPreWindows2000CompatibleAccessSid = 35,
        BuiltinRemoteDesktopUsersSid = 36,
        BuiltinNetworkConfigurationOperatorsSid = 37,
        AccountAdministratorSid = 38,
        AccountGuestSid = 39,
        AccountKrbtgtSid = 40,
        AccountDomainAdminsSid = 41,
        AccountDomainUsersSid = 42,
        AccountDomainGuestsSid = 43,
        AccountComputersSid = 44,
        AccountControllersSid = 45,
        AccountCertAdminsSid = 46,
        AccountSchemaAdminsSid = 47,
        AccountEnterpriseAdminsSid = 48,
        AccountPolicyAdminsSid = 49,
        AccountRasAndIasServersSid = 50,
        NtlmAuthenticationSid = 51,
        DigestAuthenticationSid = 52,
        SChannelAuthenticationSid = 53,
        ThisOrganizationSid = 54,
        OtherOrganizationSid = 55,
        BuiltinIncomingForestTrustBuildersSid = 56,
        BuiltinPerformanceMonitoringUsersSid = 57,
        BuiltinPerformanceLoggingUsersSid = 58,
        BuiltinAuthorizationAccessSid = 59,
        WinBuiltinTerminalServerLicenseServersSid = 60,
        MaxDefined = 60,
    };
    
    struct WellKnownSidType_Impl : public cli::enumeration<WellKnownSidType>
    {
        WellKnownSidType_Impl(const WellKnownSidType& val) : cli::enumeration<WellKnownSidType>(val) { }
        operator WellKnownSidType() { return value; }
        
        virtual const std::vector<WellKnownSidType>& GetValues() const override
        {
            static std::vector<WellKnownSidType> res =
            {
                WellKnownSidType::NullSid,
                WellKnownSidType::WorldSid,
                WellKnownSidType::LocalSid,
                WellKnownSidType::CreatorOwnerSid,
                WellKnownSidType::CreatorGroupSid,
                WellKnownSidType::CreatorOwnerServerSid,
                WellKnownSidType::CreatorGroupServerSid,
                WellKnownSidType::NTAuthoritySid,
                WellKnownSidType::DialupSid,
                WellKnownSidType::NetworkSid,
                WellKnownSidType::BatchSid,
                WellKnownSidType::InteractiveSid,
                WellKnownSidType::ServiceSid,
                WellKnownSidType::AnonymousSid,
                WellKnownSidType::ProxySid,
                WellKnownSidType::EnterpriseControllersSid,
                WellKnownSidType::SelfSid,
                WellKnownSidType::AuthenticatedUserSid,
                WellKnownSidType::RestrictedCodeSid,
                WellKnownSidType::TerminalServerSid,
                WellKnownSidType::RemoteLogonIdSid,
                WellKnownSidType::LogonIdsSid,
                WellKnownSidType::LocalSystemSid,
                WellKnownSidType::LocalServiceSid,
                WellKnownSidType::NetworkServiceSid,
                WellKnownSidType::BuiltinDomainSid,
                WellKnownSidType::BuiltinAdministratorsSid,
                WellKnownSidType::BuiltinUsersSid,
                WellKnownSidType::BuiltinGuestsSid,
                WellKnownSidType::BuiltinPowerUsersSid,
                WellKnownSidType::BuiltinAccountOperatorsSid,
                WellKnownSidType::BuiltinSystemOperatorsSid,
                WellKnownSidType::BuiltinPrintOperatorsSid,
                WellKnownSidType::BuiltinBackupOperatorsSid,
                WellKnownSidType::BuiltinReplicatorSid,
                WellKnownSidType::BuiltinPreWindows2000CompatibleAccessSid,
                WellKnownSidType::BuiltinRemoteDesktopUsersSid,
                WellKnownSidType::BuiltinNetworkConfigurationOperatorsSid,
                WellKnownSidType::AccountAdministratorSid,
                WellKnownSidType::AccountGuestSid,
                WellKnownSidType::AccountKrbtgtSid,
                WellKnownSidType::AccountDomainAdminsSid,
                WellKnownSidType::AccountDomainUsersSid,
                WellKnownSidType::AccountDomainGuestsSid,
                WellKnownSidType::AccountComputersSid,
                WellKnownSidType::AccountControllersSid,
                WellKnownSidType::AccountCertAdminsSid,
                WellKnownSidType::AccountSchemaAdminsSid,
                WellKnownSidType::AccountEnterpriseAdminsSid,
                WellKnownSidType::AccountPolicyAdminsSid,
                WellKnownSidType::AccountRasAndIasServersSid,
                WellKnownSidType::NtlmAuthenticationSid,
                WellKnownSidType::DigestAuthenticationSid,
                WellKnownSidType::SChannelAuthenticationSid,
                WellKnownSidType::ThisOrganizationSid,
                WellKnownSidType::OtherOrganizationSid,
                WellKnownSidType::BuiltinIncomingForestTrustBuildersSid,
                WellKnownSidType::BuiltinPerformanceMonitoringUsersSid,
                WellKnownSidType::BuiltinPerformanceLoggingUsersSid,
                WellKnownSidType::BuiltinAuthorizationAccessSid,
                WellKnownSidType::WinBuiltinTerminalServerLicenseServersSid,
                WellKnownSidType::MaxDefined,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("NullSid"),
                _T("WorldSid"),
                _T("LocalSid"),
                _T("CreatorOwnerSid"),
                _T("CreatorGroupSid"),
                _T("CreatorOwnerServerSid"),
                _T("CreatorGroupServerSid"),
                _T("NTAuthoritySid"),
                _T("DialupSid"),
                _T("NetworkSid"),
                _T("BatchSid"),
                _T("InteractiveSid"),
                _T("ServiceSid"),
                _T("AnonymousSid"),
                _T("ProxySid"),
                _T("EnterpriseControllersSid"),
                _T("SelfSid"),
                _T("AuthenticatedUserSid"),
                _T("RestrictedCodeSid"),
                _T("TerminalServerSid"),
                _T("RemoteLogonIdSid"),
                _T("LogonIdsSid"),
                _T("LocalSystemSid"),
                _T("LocalServiceSid"),
                _T("NetworkServiceSid"),
                _T("BuiltinDomainSid"),
                _T("BuiltinAdministratorsSid"),
                _T("BuiltinUsersSid"),
                _T("BuiltinGuestsSid"),
                _T("BuiltinPowerUsersSid"),
                _T("BuiltinAccountOperatorsSid"),
                _T("BuiltinSystemOperatorsSid"),
                _T("BuiltinPrintOperatorsSid"),
                _T("BuiltinBackupOperatorsSid"),
                _T("BuiltinReplicatorSid"),
                _T("BuiltinPreWindows2000CompatibleAccessSid"),
                _T("BuiltinRemoteDesktopUsersSid"),
                _T("BuiltinNetworkConfigurationOperatorsSid"),
                _T("AccountAdministratorSid"),
                _T("AccountGuestSid"),
                _T("AccountKrbtgtSid"),
                _T("AccountDomainAdminsSid"),
                _T("AccountDomainUsersSid"),
                _T("AccountDomainGuestsSid"),
                _T("AccountComputersSid"),
                _T("AccountControllersSid"),
                _T("AccountCertAdminsSid"),
                _T("AccountSchemaAdminsSid"),
                _T("AccountEnterpriseAdminsSid"),
                _T("AccountPolicyAdminsSid"),
                _T("AccountRasAndIasServersSid"),
                _T("NtlmAuthenticationSid"),
                _T("DigestAuthenticationSid"),
                _T("SChannelAuthenticationSid"),
                _T("ThisOrganizationSid"),
                _T("OtherOrganizationSid"),
                _T("BuiltinIncomingForestTrustBuildersSid"),
                _T("BuiltinPerformanceMonitoringUsersSid"),
                _T("BuiltinPerformanceLoggingUsersSid"),
                _T("BuiltinAuthorizationAccessSid"),
                _T("WinBuiltinTerminalServerLicenseServersSid"),
                _T("MaxDefined"),
            };
            return res;
        }
    };
    
    
    enum class WindowsAccountType
    {
        Normal = 0,
        Guest = 1,
        System = 2,
        Anonymous = 3,
    };
    
    struct WindowsAccountType_Impl : public cli::enumeration<WindowsAccountType>
    {
        WindowsAccountType_Impl(const WindowsAccountType& val) : cli::enumeration<WindowsAccountType>(val) { }
        operator WindowsAccountType() { return value; }
        
        virtual const std::vector<WindowsAccountType>& GetValues() const override
        {
            static std::vector<WindowsAccountType> res =
            {
                WindowsAccountType::Normal,
                WindowsAccountType::Guest,
                WindowsAccountType::System,
                WindowsAccountType::Anonymous,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Normal"),
                _T("Guest"),
                _T("System"),
                _T("Anonymous"),
            };
            return res;
        }
    };
    
    
    enum class WindowsBuiltInRole
    {
        Administrator = 544,
        User = 545,
        Guest = 546,
        PowerUser = 547,
        AccountOperator = 548,
        SystemOperator = 549,
        PrintOperator = 550,
        BackupOperator = 551,
        Replicator = 552,
    };
    
    struct WindowsBuiltInRole_Impl : public cli::enumeration<WindowsBuiltInRole>
    {
        WindowsBuiltInRole_Impl(const WindowsBuiltInRole& val) : cli::enumeration<WindowsBuiltInRole>(val) { }
        operator WindowsBuiltInRole() { return value; }
        
        virtual const std::vector<WindowsBuiltInRole>& GetValues() const override
        {
            static std::vector<WindowsBuiltInRole> res =
            {
                WindowsBuiltInRole::Administrator,
                WindowsBuiltInRole::User,
                WindowsBuiltInRole::Guest,
                WindowsBuiltInRole::PowerUser,
                WindowsBuiltInRole::AccountOperator,
                WindowsBuiltInRole::SystemOperator,
                WindowsBuiltInRole::PrintOperator,
                WindowsBuiltInRole::BackupOperator,
                WindowsBuiltInRole::Replicator,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Administrator"),
                _T("User"),
                _T("Guest"),
                _T("PowerUser"),
                _T("AccountOperator"),
                _T("SystemOperator"),
                _T("PrintOperator"),
                _T("BackupOperator"),
                _T("Replicator"),
            };
            return res;
        }
    };
    
}}}
namespace System { namespace Text {
    
    enum class NormalizationForm
    {
        FormC = 1,
        FormD = 2,
        FormKC = 5,
        FormKD = 6,
    };
    
    struct NormalizationForm_Impl : public cli::enumeration<NormalizationForm>
    {
        NormalizationForm_Impl(const NormalizationForm& val) : cli::enumeration<NormalizationForm>(val) { }
        operator NormalizationForm() { return value; }
        
        virtual const std::vector<NormalizationForm>& GetValues() const override
        {
            static std::vector<NormalizationForm> res =
            {
                NormalizationForm::FormC,
                NormalizationForm::FormD,
                NormalizationForm::FormKC,
                NormalizationForm::FormKD,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("FormC"),
                _T("FormD"),
                _T("FormKC"),
                _T("FormKD"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Threading {
    
    enum class ApartmentState
    {
        STA = 0,
        MTA = 1,
        Unknown = 2,
    };
    
    struct ApartmentState_Impl : public cli::enumeration<ApartmentState>
    {
        ApartmentState_Impl(const ApartmentState& val) : cli::enumeration<ApartmentState>(val) { }
        operator ApartmentState() { return value; }
        
        virtual const std::vector<ApartmentState>& GetValues() const override
        {
            static std::vector<ApartmentState> res =
            {
                ApartmentState::STA,
                ApartmentState::MTA,
                ApartmentState::Unknown,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("STA"),
                _T("MTA"),
                _T("Unknown"),
            };
            return res;
        }
    };
    
    
    enum class AsyncFlowControlType
    {
        None = 0,
        Execution = 1,
        Security = 2,
    };
    
    struct AsyncFlowControlType_Impl : public cli::enumeration<AsyncFlowControlType>
    {
        AsyncFlowControlType_Impl(const AsyncFlowControlType& val) : cli::enumeration<AsyncFlowControlType>(val) { }
        operator AsyncFlowControlType() { return value; }
        
        virtual const std::vector<AsyncFlowControlType>& GetValues() const override
        {
            static std::vector<AsyncFlowControlType> res =
            {
                AsyncFlowControlType::None,
                AsyncFlowControlType::Execution,
                AsyncFlowControlType::Security,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("Execution"),
                _T("Security"),
            };
            return res;
        }
    };
    
    
    enum class EventResetMode
    {
        AutoReset = 0,
        ManualReset = 1,
    };
    
    struct EventResetMode_Impl : public cli::enumeration<EventResetMode>
    {
        EventResetMode_Impl(const EventResetMode& val) : cli::enumeration<EventResetMode>(val) { }
        operator EventResetMode() { return value; }
        
        virtual const std::vector<EventResetMode>& GetValues() const override
        {
            static std::vector<EventResetMode> res =
            {
                EventResetMode::AutoReset,
                EventResetMode::ManualReset,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("AutoReset"),
                _T("ManualReset"),
            };
            return res;
        }
    };
    
    
    enum class LazyThreadSafetyMode
    {
        None = 0,
        PublicationOnly = 1,
        ExecutionAndPublication = 2,
    };
    
    struct LazyThreadSafetyMode_Impl : public cli::enumeration<LazyThreadSafetyMode>
    {
        LazyThreadSafetyMode_Impl(const LazyThreadSafetyMode& val) : cli::enumeration<LazyThreadSafetyMode>(val) { }
        operator LazyThreadSafetyMode() { return value; }
        
        virtual const std::vector<LazyThreadSafetyMode>& GetValues() const override
        {
            static std::vector<LazyThreadSafetyMode> res =
            {
                LazyThreadSafetyMode::None,
                LazyThreadSafetyMode::PublicationOnly,
                LazyThreadSafetyMode::ExecutionAndPublication,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("PublicationOnly"),
                _T("ExecutionAndPublication"),
            };
            return res;
        }
    };
    
    
    enum class ThreadPriority
    {
        Lowest = 0,
        BelowNormal = 1,
        Normal = 2,
        AboveNormal = 3,
        Highest = 4,
    };
    
    struct ThreadPriority_Impl : public cli::enumeration<ThreadPriority>
    {
        ThreadPriority_Impl(const ThreadPriority& val) : cli::enumeration<ThreadPriority>(val) { }
        operator ThreadPriority() { return value; }
        
        virtual const std::vector<ThreadPriority>& GetValues() const override
        {
            static std::vector<ThreadPriority> res =
            {
                ThreadPriority::Lowest,
                ThreadPriority::BelowNormal,
                ThreadPriority::Normal,
                ThreadPriority::AboveNormal,
                ThreadPriority::Highest,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Lowest"),
                _T("BelowNormal"),
                _T("Normal"),
                _T("AboveNormal"),
                _T("Highest"),
            };
            return res;
        }
    };
    
    
    enum class ThreadState
    {
        Running = 0,
        StopRequested = 1,
        SuspendRequested = 2,
        Background = 4,
        Unstarted = 8,
        Stopped = 16,
        WaitSleepJoin = 32,
        Suspended = 64,
        AbortRequested = 128,
        Aborted = 256,
    };
    
    struct ThreadState_Impl : public cli::enumeration<ThreadState>
    {
        ThreadState_Impl(const ThreadState& val) : cli::enumeration<ThreadState>(val) { }
        operator ThreadState() { return value; }
        
        virtual const std::vector<ThreadState>& GetValues() const override
        {
            static std::vector<ThreadState> res =
            {
                ThreadState::Running,
                ThreadState::StopRequested,
                ThreadState::SuspendRequested,
                ThreadState::Background,
                ThreadState::Unstarted,
                ThreadState::Stopped,
                ThreadState::WaitSleepJoin,
                ThreadState::Suspended,
                ThreadState::AbortRequested,
                ThreadState::Aborted,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Running"),
                _T("StopRequested"),
                _T("SuspendRequested"),
                _T("Background"),
                _T("Unstarted"),
                _T("Stopped"),
                _T("WaitSleepJoin"),
                _T("Suspended"),
                _T("AbortRequested"),
                _T("Aborted"),
            };
            return res;
        }
    };
    
}}
namespace System { namespace Threading { namespace Tasks {
    
    enum class PopResult
    {
        Succeed = 0,
        Empty = 1,
        Abort = 2,
    };
    
    struct PopResult_Impl : public cli::enumeration<PopResult>
    {
        PopResult_Impl(const PopResult& val) : cli::enumeration<PopResult>(val) { }
        operator PopResult() { return value; }
        
        virtual const std::vector<PopResult>& GetValues() const override
        {
            static std::vector<PopResult> res =
            {
                PopResult::Succeed,
                PopResult::Empty,
                PopResult::Abort,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Succeed"),
                _T("Empty"),
                _T("Abort"),
            };
            return res;
        }
    };
    
    
    enum class TaskContinuationOptions
    {
        None = 0,
        PreferFairness = 1,
        LongRunning = 2,
        AttachedToParent = 4,
        NotOnRanToCompletion = 65536,
        NotOnFaulted = 131072,
        NotOnCanceled = 262144,
        OnlyOnRanToCompletion = 393216,
        OnlyOnFaulted = 327680,
        OnlyOnCanceled = 196608,
        ExecuteSynchronously = 524288,
    };
    
    struct TaskContinuationOptions_Impl : public cli::enumeration<TaskContinuationOptions>
    {
        TaskContinuationOptions_Impl(const TaskContinuationOptions& val) : cli::enumeration<TaskContinuationOptions>(val) { }
        operator TaskContinuationOptions() { return value; }
        
        virtual const std::vector<TaskContinuationOptions>& GetValues() const override
        {
            static std::vector<TaskContinuationOptions> res =
            {
                TaskContinuationOptions::None,
                TaskContinuationOptions::PreferFairness,
                TaskContinuationOptions::LongRunning,
                TaskContinuationOptions::AttachedToParent,
                TaskContinuationOptions::NotOnRanToCompletion,
                TaskContinuationOptions::NotOnFaulted,
                TaskContinuationOptions::NotOnCanceled,
                TaskContinuationOptions::OnlyOnRanToCompletion,
                TaskContinuationOptions::OnlyOnFaulted,
                TaskContinuationOptions::OnlyOnCanceled,
                TaskContinuationOptions::ExecuteSynchronously,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("PreferFairness"),
                _T("LongRunning"),
                _T("AttachedToParent"),
                _T("NotOnRanToCompletion"),
                _T("NotOnFaulted"),
                _T("NotOnCanceled"),
                _T("OnlyOnRanToCompletion"),
                _T("OnlyOnFaulted"),
                _T("OnlyOnCanceled"),
                _T("ExecuteSynchronously"),
            };
            return res;
        }
    };
    
    
    enum class TaskCreationOptions
    {
        None = 0,
        PreferFairness = 1,
        LongRunning = 2,
        AttachedToParent = 4,
    };
    
    struct TaskCreationOptions_Impl : public cli::enumeration<TaskCreationOptions>
    {
        TaskCreationOptions_Impl(const TaskCreationOptions& val) : cli::enumeration<TaskCreationOptions>(val) { }
        operator TaskCreationOptions() { return value; }
        
        virtual const std::vector<TaskCreationOptions>& GetValues() const override
        {
            static std::vector<TaskCreationOptions> res =
            {
                TaskCreationOptions::None,
                TaskCreationOptions::PreferFairness,
                TaskCreationOptions::LongRunning,
                TaskCreationOptions::AttachedToParent,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("None"),
                _T("PreferFairness"),
                _T("LongRunning"),
                _T("AttachedToParent"),
            };
            return res;
        }
    };
    
    
    enum class TaskStatus
    {
        Created = 0,
        WaitingForActivation = 1,
        WaitingToRun = 2,
        Running = 3,
        WaitingForChildrenToComplete = 4,
        RanToCompletion = 5,
        Canceled = 6,
        Faulted = 7,
    };
    
    struct TaskStatus_Impl : public cli::enumeration<TaskStatus>
    {
        TaskStatus_Impl(const TaskStatus& val) : cli::enumeration<TaskStatus>(val) { }
        operator TaskStatus() { return value; }
        
        virtual const std::vector<TaskStatus>& GetValues() const override
        {
            static std::vector<TaskStatus> res =
            {
                TaskStatus::Created,
                TaskStatus::WaitingForActivation,
                TaskStatus::WaitingToRun,
                TaskStatus::Running,
                TaskStatus::WaitingForChildrenToComplete,
                TaskStatus::RanToCompletion,
                TaskStatus::Canceled,
                TaskStatus::Faulted,
            };
            return res;
        }
        
        virtual const std::vector<::System::String*>& GetStrings() const override
        {
            static std::vector<::System::String*> res =
            {
                _T("Created"),
                _T("WaitingForActivation"),
                _T("WaitingToRun"),
                _T("Running"),
                _T("WaitingForChildrenToComplete"),
                _T("RanToCompletion"),
                _T("Canceled"),
                _T("Faulted"),
            };
            return res;
        }
    };
    
}}}
namespace cli {
    template<> struct enum_to_impl<Microsoft::Win32::RegistryHive> { typedef Microsoft::Win32::RegistryHive_Impl type; };
    template<> struct enum_to_impl<Microsoft::Win32::RegistryKeyPermissionCheck> { typedef Microsoft::Win32::RegistryKeyPermissionCheck_Impl type; };
    template<> struct enum_to_impl<Microsoft::Win32::RegistryOptions> { typedef Microsoft::Win32::RegistryOptions_Impl type; };
    template<> struct enum_to_impl<Microsoft::Win32::RegistryValueKind> { typedef Microsoft::Win32::RegistryValueKind_Impl type; };
    template<> struct enum_to_impl<Microsoft::Win32::RegistryValueOptions> { typedef Microsoft::Win32::RegistryValueOptions_Impl type; };
    template<> struct enum_to_impl<Microsoft::Win32::RegistryView> { typedef Microsoft::Win32::RegistryView_Impl type; };
    template<> struct enum_to_impl<Mono::Globalization::Unicode::NormalizationCheck> { typedef Mono::Globalization::Unicode::NormalizationCheck_Impl type; };
    template<> struct enum_to_impl<Mono::Globalization::Unicode::ExtenderType> { typedef Mono::Globalization::Unicode::ExtenderType_Impl type; };
    template<> struct enum_to_impl<Mono::Globalization::Unicode::GUnicodeType> { typedef Mono::Globalization::Unicode::GUnicodeType_Impl type; };
    template<> struct enum_to_impl<Mono::Globalization::Unicode::UcdBidiClass> { typedef Mono::Globalization::Unicode::UcdBidiClass_Impl type; };
    template<> struct enum_to_impl<Mono::Globalization::Unicode::UcdDecompositionType> { typedef Mono::Globalization::Unicode::UcdDecompositionType_Impl type; };
    template<> struct enum_to_impl<Mono::Math::Sign> { typedef Mono::Math::Sign_Impl type; };
    template<> struct enum_to_impl<Mono::Math::Prime::ConfidenceFactor> { typedef Mono::Math::Prime::ConfidenceFactor_Impl type; };
    template<> struct enum_to_impl<Mono::Security::StrongNameOptions> { typedef Mono::Security::StrongNameOptions_Impl type; };
    template<> struct enum_to_impl<Mono::Security::UriPartial> { typedef Mono::Security::UriPartial_Impl type; };
    template<> struct enum_to_impl<Mono::Security::Authenticode::Authority> { typedef Mono::Security::Authenticode::Authority_Impl type; };
    template<> struct enum_to_impl<Mono::Security::Cryptography::KeyInfo> { typedef Mono::Security::Cryptography::KeyInfo_Impl type; };
    template<> struct enum_to_impl<Mono::Security::X509::Purpose> { typedef Mono::Security::X509::Purpose_Impl type; };
    template<> struct enum_to_impl<Mono::Security::X509::X509ChainStatusFlags> { typedef Mono::Security::X509::X509ChainStatusFlags_Impl type; };
    template<> struct enum_to_impl<Mono::Security::X509::Extensions::KeyUsages> { typedef Mono::Security::X509::Extensions::KeyUsages_Impl type; };
    template<> struct enum_to_impl<System::ContextForm> { typedef System::ContextForm_Impl type; };
    template<> struct enum_to_impl<System::AttributeTargets> { typedef System::AttributeTargets_Impl type; };
    template<> struct enum_to_impl<System::Base64FormattingOptions> { typedef System::Base64FormattingOptions_Impl type; };
    template<> struct enum_to_impl<System::ConsoleColor> { typedef System::ConsoleColor_Impl type; };
    template<> struct enum_to_impl<System::ConsoleKey> { typedef System::ConsoleKey_Impl type; };
    template<> struct enum_to_impl<System::ConsoleModifiers> { typedef System::ConsoleModifiers_Impl type; };
    template<> struct enum_to_impl<System::ConsoleSpecialKey> { typedef System::ConsoleSpecialKey_Impl type; };
    template<> struct enum_to_impl<System::Which> { typedef System::Which_Impl type; };
    template<> struct enum_to_impl<System::DateTimeKind> { typedef System::DateTimeKind_Impl type; };
    template<> struct enum_to_impl<System::DayOfWeek> { typedef System::DayOfWeek_Impl type; };
    template<> struct enum_to_impl<System::AppDomainManagerInitializationOptions> { typedef System::AppDomainManagerInitializationOptions_Impl type; };
    template<> struct enum_to_impl<System::SpecialFolder> { typedef System::SpecialFolder_Impl type; };
    template<> struct enum_to_impl<System::SpecialFolderOption> { typedef System::SpecialFolderOption_Impl type; };
    template<> struct enum_to_impl<System::EnvironmentVariableTarget> { typedef System::EnvironmentVariableTarget_Impl type; };
    template<> struct enum_to_impl<System::GCCollectionMode> { typedef System::GCCollectionMode_Impl type; };
    template<> struct enum_to_impl<System::GCNotificationStatus> { typedef System::GCNotificationStatus_Impl type; };
    template<> struct enum_to_impl<System::Format> { typedef System::Format_Impl type; };
    template<> struct enum_to_impl<System::LoaderOptimization> { typedef System::LoaderOptimization_Impl type; };
    template<> struct enum_to_impl<System::MidpointRounding> { typedef System::MidpointRounding_Impl type; };
    template<> struct enum_to_impl<System::PlatformID> { typedef System::PlatformID_Impl type; };
    template<> struct enum_to_impl<System::StringComparison> { typedef System::StringComparison_Impl type; };
    template<> struct enum_to_impl<System::StringSplitOptions> { typedef System::StringSplitOptions_Impl type; };
    template<> struct enum_to_impl<System::TermInfoBooleans> { typedef System::TermInfoBooleans_Impl type; };
    template<> struct enum_to_impl<System::TermInfoNumbers> { typedef System::TermInfoNumbers_Impl type; };
    template<> struct enum_to_impl<System::TermInfoStrings> { typedef System::TermInfoStrings_Impl type; };
    template<> struct enum_to_impl<System::ParseError> { typedef System::ParseError_Impl type; };
    template<> struct enum_to_impl<System::FormatElementType> { typedef System::FormatElementType_Impl type; };
    template<> struct enum_to_impl<System::TimeZoneData> { typedef System::TimeZoneData_Impl type; };
    template<> struct enum_to_impl<System::TimeZoneNames> { typedef System::TimeZoneNames_Impl type; };
    template<> struct enum_to_impl<System::TypeCode> { typedef System::TypeCode_Impl type; };
    template<> struct enum_to_impl<System::UnityType> { typedef System::UnityType_Impl type; };
    template<> struct enum_to_impl<System::Handles> { typedef System::Handles_Impl type; };
    template<> struct enum_to_impl<System::Collections::EnumeratorMode> { typedef System::Collections::EnumeratorMode_Impl type; };
    template<> struct enum_to_impl<System::Collections::EnumeratorMode2> { typedef System::Collections::EnumeratorMode2_Impl type; };
    template<> struct enum_to_impl<System::Configuration::Assemblies::AssemblyHashAlgorithm> { typedef System::Configuration::Assemblies::AssemblyHashAlgorithm_Impl type; };
    template<> struct enum_to_impl<System::Configuration::Assemblies::AssemblyVersionCompatibility> { typedef System::Configuration::Assemblies::AssemblyVersionCompatibility_Impl type; };
    template<> struct enum_to_impl<System::Diagnostics::DebuggingModes> { typedef System::Diagnostics::DebuggingModes_Impl type; };
    template<> struct enum_to_impl<System::Diagnostics::DebuggerBrowsableState> { typedef System::Diagnostics::DebuggerBrowsableState_Impl type; };
    template<> struct enum_to_impl<System::Diagnostics::Contracts::ContractFailureKind> { typedef System::Diagnostics::Contracts::ContractFailureKind_Impl type; };
    template<> struct enum_to_impl<System::Diagnostics::SymbolStore::SymAddressKind> { typedef System::Diagnostics::SymbolStore::SymAddressKind_Impl type; };
    template<> struct enum_to_impl<System::Globalization::CalendarAlgorithmType> { typedef System::Globalization::CalendarAlgorithmType_Impl type; };
    template<> struct enum_to_impl<System::Globalization::CalendarWeekRule> { typedef System::Globalization::CalendarWeekRule_Impl type; };
    template<> struct enum_to_impl<System::Globalization::Month> { typedef System::Globalization::Month_Impl type; };
    template<> struct enum_to_impl<System::Globalization::Month2> { typedef System::Globalization::Month2_Impl type; };
    template<> struct enum_to_impl<System::Globalization::Month3> { typedef System::Globalization::Month3_Impl type; };
    template<> struct enum_to_impl<System::Globalization::Month4> { typedef System::Globalization::Month4_Impl type; };
    template<> struct enum_to_impl<System::Globalization::CompareOptions> { typedef System::Globalization::CompareOptions_Impl type; };
    template<> struct enum_to_impl<System::Globalization::CultureTypes> { typedef System::Globalization::CultureTypes_Impl type; };
    template<> struct enum_to_impl<System::Globalization::DateTimeFormatFlags> { typedef System::Globalization::DateTimeFormatFlags_Impl type; };
    template<> struct enum_to_impl<System::Globalization::DateTimeStyles> { typedef System::Globalization::DateTimeStyles_Impl type; };
    template<> struct enum_to_impl<System::Globalization::DigitShapes> { typedef System::Globalization::DigitShapes_Impl type; };
    template<> struct enum_to_impl<System::Globalization::GregorianCalendarTypes> { typedef System::Globalization::GregorianCalendarTypes_Impl type; };
    template<> struct enum_to_impl<System::Globalization::NumberStyles> { typedef System::Globalization::NumberStyles_Impl type; };
    template<> struct enum_to_impl<System::Globalization::TimeSpanStyles> { typedef System::Globalization::TimeSpanStyles_Impl type; };
    template<> struct enum_to_impl<System::Globalization::UnicodeCategory> { typedef System::Globalization::UnicodeCategory_Impl type; };
    template<> struct enum_to_impl<System::IO::DriveType> { typedef System::IO::DriveType_Impl type; };
    template<> struct enum_to_impl<System::IO::FileAccess> { typedef System::IO::FileAccess_Impl type; };
    template<> struct enum_to_impl<System::IO::FileAttributes> { typedef System::IO::FileAttributes_Impl type; };
    template<> struct enum_to_impl<System::IO::FileMode> { typedef System::IO::FileMode_Impl type; };
    template<> struct enum_to_impl<System::IO::FileOptions> { typedef System::IO::FileOptions_Impl type; };
    template<> struct enum_to_impl<System::IO::FileShare> { typedef System::IO::FileShare_Impl type; };
    template<> struct enum_to_impl<System::IO::MonoFileType> { typedef System::IO::MonoFileType_Impl type; };
    template<> struct enum_to_impl<System::IO::MonoIOError> { typedef System::IO::MonoIOError_Impl type; };
    template<> struct enum_to_impl<System::IO::SearchOption> { typedef System::IO::SearchOption_Impl type; };
    template<> struct enum_to_impl<System::IO::SeekOrigin> { typedef System::IO::SeekOrigin_Impl type; };
    template<> struct enum_to_impl<System::IO::IsolatedStorage::IsolatedStorageScope> { typedef System::IO::IsolatedStorage::IsolatedStorageScope_Impl type; };
    template<> struct enum_to_impl<System::IO::IsolatedStorage::IsolatedStorageSecurityOptions> { typedef System::IO::IsolatedStorage::IsolatedStorageSecurityOptions_Impl type; };
    template<> struct enum_to_impl<System::Reflection::AssemblyNameFlags> { typedef System::Reflection::AssemblyNameFlags_Impl type; };
    template<> struct enum_to_impl<System::Reflection::BindingFlags> { typedef System::Reflection::BindingFlags_Impl type; };
    template<> struct enum_to_impl<System::Reflection::CallingConventions> { typedef System::Reflection::CallingConventions_Impl type; };
    template<> struct enum_to_impl<System::Reflection::EventAttributes> { typedef System::Reflection::EventAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ExceptionHandlingClauseOptions> { typedef System::Reflection::ExceptionHandlingClauseOptions_Impl type; };
    template<> struct enum_to_impl<System::Reflection::FieldAttributes> { typedef System::Reflection::FieldAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::GenericParameterAttributes> { typedef System::Reflection::GenericParameterAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ImageFileMachine> { typedef System::Reflection::ImageFileMachine_Impl type; };
    template<> struct enum_to_impl<System::Reflection::MemberTypes> { typedef System::Reflection::MemberTypes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::MethodAttributes> { typedef System::Reflection::MethodAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::MethodImplAttributes> { typedef System::Reflection::MethodImplAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ResolveTokenError> { typedef System::Reflection::ResolveTokenError_Impl type; };
    template<> struct enum_to_impl<System::Reflection::PInfo> { typedef System::Reflection::PInfo_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ParameterAttributes> { typedef System::Reflection::ParameterAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::PortableExecutableKinds> { typedef System::Reflection::PortableExecutableKinds_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ProcessorArchitecture> { typedef System::Reflection::ProcessorArchitecture_Impl type; };
    template<> struct enum_to_impl<System::Reflection::PropertyAttributes> { typedef System::Reflection::PropertyAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ResourceAttributes> { typedef System::Reflection::ResourceAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::ResourceLocation> { typedef System::Reflection::ResourceLocation_Impl type; };
    template<> struct enum_to_impl<System::Reflection::TypeAttributes> { typedef System::Reflection::TypeAttributes_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::NativeResourceType> { typedef System::Reflection::Emit::NativeResourceType_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::AssemblyBuilderAccess> { typedef System::Reflection::Emit::AssemblyBuilderAccess_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::TypeKind> { typedef System::Reflection::Emit::TypeKind_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::FlowControl> { typedef System::Reflection::Emit::FlowControl_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::OpCodeType> { typedef System::Reflection::Emit::OpCodeType_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::OperandType> { typedef System::Reflection::Emit::OperandType_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::PackingSize> { typedef System::Reflection::Emit::PackingSize_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::PEFileKinds> { typedef System::Reflection::Emit::PEFileKinds_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::SignatureHelperType> { typedef System::Reflection::Emit::SignatureHelperType_Impl type; };
    template<> struct enum_to_impl<System::Reflection::Emit::StackBehaviour> { typedef System::Reflection::Emit::StackBehaviour_Impl type; };
    template<> struct enum_to_impl<System::Resources::PredefinedResourceType> { typedef System::Resources::PredefinedResourceType_Impl type; };
    template<> struct enum_to_impl<System::Resources::UltimateResourceFallbackLocation> { typedef System::Resources::UltimateResourceFallbackLocation_Impl type; };
    template<> struct enum_to_impl<System::Resources::Win32ResourceType> { typedef System::Resources::Win32ResourceType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::GCLatencyMode> { typedef System::Runtime::GCLatencyMode_Impl type; };
    template<> struct enum_to_impl<System::Runtime::CompilerServices::CompilationRelaxations> { typedef System::Runtime::CompilerServices::CompilationRelaxations_Impl type; };
    template<> struct enum_to_impl<System::Runtime::CompilerServices::LoadHint> { typedef System::Runtime::CompilerServices::LoadHint_Impl type; };
    template<> struct enum_to_impl<System::Runtime::CompilerServices::MethodCodeType> { typedef System::Runtime::CompilerServices::MethodCodeType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::CompilerServices::MethodImplOptions> { typedef System::Runtime::CompilerServices::MethodImplOptions_Impl type; };
    template<> struct enum_to_impl<System::Runtime::ConstrainedExecution::Cer> { typedef System::Runtime::ConstrainedExecution::Cer_Impl type; };
    template<> struct enum_to_impl<System::Runtime::ConstrainedExecution::Consistency> { typedef System::Runtime::ConstrainedExecution::Consistency_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::AssemblyRegistrationFlags> { typedef System::Runtime::InteropServices::AssemblyRegistrationFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::CALLCONV> { typedef System::Runtime::InteropServices::CALLCONV_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::CallingConvention> { typedef System::Runtime::InteropServices::CallingConvention_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::CharSet> { typedef System::Runtime::InteropServices::CharSet_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ClassInterfaceType> { typedef System::Runtime::InteropServices::ClassInterfaceType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComInterfaceType> { typedef System::Runtime::InteropServices::ComInterfaceType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComMemberType> { typedef System::Runtime::InteropServices::ComMemberType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::DESCKIND> { typedef System::Runtime::InteropServices::DESCKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ExporterEventKind> { typedef System::Runtime::InteropServices::ExporterEventKind_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::FUNCFLAGS> { typedef System::Runtime::InteropServices::FUNCFLAGS_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::FUNCKIND> { typedef System::Runtime::InteropServices::FUNCKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::GCHandleType> { typedef System::Runtime::InteropServices::GCHandleType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::IDispatchImplType> { typedef System::Runtime::InteropServices::IDispatchImplType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::IDLFLAG> { typedef System::Runtime::InteropServices::IDLFLAG_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::IMPLTYPEFLAGS> { typedef System::Runtime::InteropServices::IMPLTYPEFLAGS_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ImporterEventKind> { typedef System::Runtime::InteropServices::ImporterEventKind_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::INVOKEKIND> { typedef System::Runtime::InteropServices::INVOKEKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::LayoutKind> { typedef System::Runtime::InteropServices::LayoutKind_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::LIBFLAGS> { typedef System::Runtime::InteropServices::LIBFLAGS_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::PARAMFLAG> { typedef System::Runtime::InteropServices::PARAMFLAG_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::RegistrationClassContext> { typedef System::Runtime::InteropServices::RegistrationClassContext_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::RegistrationConnectionType> { typedef System::Runtime::InteropServices::RegistrationConnectionType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::SYSKIND> { typedef System::Runtime::InteropServices::SYSKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TYPEFLAGS> { typedef System::Runtime::InteropServices::TYPEFLAGS_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TYPEKIND> { typedef System::Runtime::InteropServices::TYPEKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TypeLibExporterFlags> { typedef System::Runtime::InteropServices::TypeLibExporterFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TypeLibFuncFlags> { typedef System::Runtime::InteropServices::TypeLibFuncFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TypeLibImporterFlags> { typedef System::Runtime::InteropServices::TypeLibImporterFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TypeLibTypeFlags> { typedef System::Runtime::InteropServices::TypeLibTypeFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::TypeLibVarFlags> { typedef System::Runtime::InteropServices::TypeLibVarFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::UnmanagedType> { typedef System::Runtime::InteropServices::UnmanagedType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::VarEnum> { typedef System::Runtime::InteropServices::VarEnum_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::VARFLAGS> { typedef System::Runtime::InteropServices::VARFLAGS_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::CALLCONV2> { typedef System::Runtime::InteropServices::ComTypes::CALLCONV2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::DESCKIND2> { typedef System::Runtime::InteropServices::ComTypes::DESCKIND2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::FUNCFLAGS2> { typedef System::Runtime::InteropServices::ComTypes::FUNCFLAGS2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::FUNCKIND2> { typedef System::Runtime::InteropServices::ComTypes::FUNCKIND2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::IDLFLAG2> { typedef System::Runtime::InteropServices::ComTypes::IDLFLAG2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::IMPLTYPEFLAGS2> { typedef System::Runtime::InteropServices::ComTypes::IMPLTYPEFLAGS2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::INVOKEKIND2> { typedef System::Runtime::InteropServices::ComTypes::INVOKEKIND2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::LIBFLAGS2> { typedef System::Runtime::InteropServices::ComTypes::LIBFLAGS2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::PARAMFLAG2> { typedef System::Runtime::InteropServices::ComTypes::PARAMFLAG2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::SYSKIND2> { typedef System::Runtime::InteropServices::ComTypes::SYSKIND2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::TYPEFLAGS2> { typedef System::Runtime::InteropServices::ComTypes::TYPEFLAGS2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::TYPEKIND2> { typedef System::Runtime::InteropServices::ComTypes::TYPEKIND2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::VARFLAGS2> { typedef System::Runtime::InteropServices::ComTypes::VARFLAGS2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::InteropServices::ComTypes::VARKIND> { typedef System::Runtime::InteropServices::ComTypes::VARKIND_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Reliability::CER> { typedef System::Runtime::Reliability::CER_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Reliability::Consistency2> { typedef System::Runtime::Reliability::Consistency2_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::CustomErrorsModes> { typedef System::Runtime::Remoting::CustomErrorsModes_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::WellKnownObjectMode> { typedef System::Runtime::Remoting::WellKnownObjectMode_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Activation::ActivatorLevel> { typedef System::Runtime::Remoting::Activation::ActivatorLevel_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Channels::ServerProcessing> { typedef System::Runtime::Remoting::Channels::ServerProcessing_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Lifetime::LeaseState> { typedef System::Runtime::Remoting::Lifetime::LeaseState_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Messaging::ArgInfoType> { typedef System::Runtime::Remoting::Messaging::ArgInfoType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Messaging::CallType> { typedef System::Runtime::Remoting::Messaging::CallType_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Metadata::SoapOption> { typedef System::Runtime::Remoting::Metadata::SoapOption_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Remoting::Metadata::XmlFieldOrderOption> { typedef System::Runtime::Remoting::Metadata::XmlFieldOrderOption_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::ObjectRecordStatus> { typedef System::Runtime::Serialization::ObjectRecordStatus_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::StreamingContextStates> { typedef System::Runtime::Serialization::StreamingContextStates_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::FormatterAssemblyStyle> { typedef System::Runtime::Serialization::Formatters::FormatterAssemblyStyle_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::FormatterTypeStyle> { typedef System::Runtime::Serialization::Formatters::FormatterTypeStyle_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::TypeFilterLevel> { typedef System::Runtime::Serialization::Formatters::TypeFilterLevel_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::BinaryElement> { typedef System::Runtime::Serialization::Formatters::Binary::BinaryElement_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::TypeTag> { typedef System::Runtime::Serialization::Formatters::Binary::TypeTag_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::ArrayStructure> { typedef System::Runtime::Serialization::Formatters::Binary::ArrayStructure_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::MethodFlags> { typedef System::Runtime::Serialization::Formatters::Binary::MethodFlags_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::ReturnTypeTag> { typedef System::Runtime::Serialization::Formatters::Binary::ReturnTypeTag_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Serialization::Formatters::Binary::BinaryTypeCode> { typedef System::Runtime::Serialization::Formatters::Binary::BinaryTypeCode_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Versioning::ComponentGuaranteesOptions> { typedef System::Runtime::Versioning::ComponentGuaranteesOptions_Impl type; };
    template<> struct enum_to_impl<System::Runtime::Versioning::ResourceScope> { typedef System::Runtime::Versioning::ResourceScope_Impl type; };
    template<> struct enum_to_impl<System::Security::HostSecurityManagerOptions> { typedef System::Security::HostSecurityManagerOptions_Impl type; };
    template<> struct enum_to_impl<System::Security::PolicyLevelType> { typedef System::Security::PolicyLevelType_Impl type; };
    template<> struct enum_to_impl<System::Security::SecurityContextSource> { typedef System::Security::SecurityContextSource_Impl type; };
    template<> struct enum_to_impl<System::Security::SecurityCriticalScope> { typedef System::Security::SecurityCriticalScope_Impl type; };
    template<> struct enum_to_impl<System::Security::SecurityRuleSet> { typedef System::Security::SecurityRuleSet_Impl type; };
    template<> struct enum_to_impl<System::Security::SecurityZone> { typedef System::Security::SecurityZone_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AccessControlActions> { typedef System::Security::AccessControl::AccessControlActions_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AccessControlModification> { typedef System::Security::AccessControl::AccessControlModification_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AccessControlSections> { typedef System::Security::AccessControl::AccessControlSections_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AccessControlType> { typedef System::Security::AccessControl::AccessControlType_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AceFlags> { typedef System::Security::AccessControl::AceFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AceQualifier> { typedef System::Security::AccessControl::AceQualifier_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AceType> { typedef System::Security::AccessControl::AceType_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::AuditFlags> { typedef System::Security::AccessControl::AuditFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::CompoundAceType> { typedef System::Security::AccessControl::CompoundAceType_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::ControlFlags> { typedef System::Security::AccessControl::ControlFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::CryptoKeyRights> { typedef System::Security::AccessControl::CryptoKeyRights_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::EventWaitHandleRights> { typedef System::Security::AccessControl::EventWaitHandleRights_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::FileSystemRights> { typedef System::Security::AccessControl::FileSystemRights_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::InheritanceFlags> { typedef System::Security::AccessControl::InheritanceFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::MutexRights> { typedef System::Security::AccessControl::MutexRights_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::ObjectAceFlags> { typedef System::Security::AccessControl::ObjectAceFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::PropagationFlags> { typedef System::Security::AccessControl::PropagationFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::RegistryRights> { typedef System::Security::AccessControl::RegistryRights_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::ResourceType> { typedef System::Security::AccessControl::ResourceType_Impl type; };
    template<> struct enum_to_impl<System::Security::AccessControl::SecurityInfos> { typedef System::Security::AccessControl::SecurityInfos_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::CipherMode> { typedef System::Security::Cryptography::CipherMode_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::CryptoStreamMode> { typedef System::Security::Cryptography::CryptoStreamMode_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::CspProviderFlags> { typedef System::Security::Cryptography::CspProviderFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::FromBase64TransformMode> { typedef System::Security::Cryptography::FromBase64TransformMode_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::KeyNumber> { typedef System::Security::Cryptography::KeyNumber_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::PaddingMode> { typedef System::Security::Cryptography::PaddingMode_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::X509Certificates::X509ContentType> { typedef System::Security::Cryptography::X509Certificates::X509ContentType_Impl type; };
    template<> struct enum_to_impl<System::Security::Cryptography::X509Certificates::X509KeyStorageFlags> { typedef System::Security::Cryptography::X509Certificates::X509KeyStorageFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::EnvironmentPermissionAccess> { typedef System::Security::Permissions::EnvironmentPermissionAccess_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::FileDialogPermissionAccess> { typedef System::Security::Permissions::FileDialogPermissionAccess_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::FileIOPermissionAccess> { typedef System::Security::Permissions::FileIOPermissionAccess_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::HostProtectionResource> { typedef System::Security::Permissions::HostProtectionResource_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::BuiltInToken> { typedef System::Security::Permissions::BuiltInToken_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::IsolatedStorageContainment> { typedef System::Security::Permissions::IsolatedStorageContainment_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::KeyContainerPermissionFlags> { typedef System::Security::Permissions::KeyContainerPermissionFlags_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::PermissionState> { typedef System::Security::Permissions::PermissionState_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::ReflectionPermissionFlag> { typedef System::Security::Permissions::ReflectionPermissionFlag_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::RegistryPermissionAccess> { typedef System::Security::Permissions::RegistryPermissionAccess_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::SecurityAction> { typedef System::Security::Permissions::SecurityAction_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::SecurityPermissionFlag> { typedef System::Security::Permissions::SecurityPermissionFlag_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::UIPermissionClipboard> { typedef System::Security::Permissions::UIPermissionClipboard_Impl type; };
    template<> struct enum_to_impl<System::Security::Permissions::UIPermissionWindow> { typedef System::Security::Permissions::UIPermissionWindow_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::ApplicationInstallScope> { typedef System::Security::Policy::ApplicationInstallScope_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::ApplicationVersionMatch> { typedef System::Security::Policy::ApplicationVersionMatch_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::CodeGroupGrantScope> { typedef System::Security::Policy::CodeGroupGrantScope_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::Key> { typedef System::Security::Policy::Key_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::PolicyStatementAttribute> { typedef System::Security::Policy::PolicyStatementAttribute_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::PromptingLevel> { typedef System::Security::Policy::PromptingLevel_Impl type; };
    template<> struct enum_to_impl<System::Security::Policy::TrustManagerUIContext> { typedef System::Security::Policy::TrustManagerUIContext_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::PrincipalPolicy> { typedef System::Security::Principal::PrincipalPolicy_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::TokenAccessLevels> { typedef System::Security::Principal::TokenAccessLevels_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::TokenImpersonationLevel> { typedef System::Security::Principal::TokenImpersonationLevel_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::WellKnownSidType> { typedef System::Security::Principal::WellKnownSidType_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::WindowsAccountType> { typedef System::Security::Principal::WindowsAccountType_Impl type; };
    template<> struct enum_to_impl<System::Security::Principal::WindowsBuiltInRole> { typedef System::Security::Principal::WindowsBuiltInRole_Impl type; };
    template<> struct enum_to_impl<System::Text::NormalizationForm> { typedef System::Text::NormalizationForm_Impl type; };
    template<> struct enum_to_impl<System::Threading::ApartmentState> { typedef System::Threading::ApartmentState_Impl type; };
    template<> struct enum_to_impl<System::Threading::AsyncFlowControlType> { typedef System::Threading::AsyncFlowControlType_Impl type; };
    template<> struct enum_to_impl<System::Threading::EventResetMode> { typedef System::Threading::EventResetMode_Impl type; };
    template<> struct enum_to_impl<System::Threading::LazyThreadSafetyMode> { typedef System::Threading::LazyThreadSafetyMode_Impl type; };
    template<> struct enum_to_impl<System::Threading::ThreadPriority> { typedef System::Threading::ThreadPriority_Impl type; };
    template<> struct enum_to_impl<System::Threading::ThreadState> { typedef System::Threading::ThreadState_Impl type; };
    template<> struct enum_to_impl<System::Threading::Tasks::PopResult> { typedef System::Threading::Tasks::PopResult_Impl type; };
    template<> struct enum_to_impl<System::Threading::Tasks::TaskContinuationOptions> { typedef System::Threading::Tasks::TaskContinuationOptions_Impl type; };
    template<> struct enum_to_impl<System::Threading::Tasks::TaskCreationOptions> { typedef System::Threading::Tasks::TaskCreationOptions_Impl type; };
    template<> struct enum_to_impl<System::Threading::Tasks::TaskStatus> { typedef System::Threading::Tasks::TaskStatus_Impl type; };
}
namespace Mono { namespace Math { namespace Prime {
    typedef cli::delegate<bool (Mono::Math::BigInteger* bi, ConfidenceFactor confidence)> PrimalityTest;
}}}
namespace Mono { namespace Security { namespace Cryptography {
    typedef cli::delegate<void (System::Object* sender, System::EventArgs* e)> KeyGeneratedEventHandler;
    typedef cli::delegate<void (System::Object* sender, System::EventArgs* e)> KeyGeneratedEventHandler2;
}}}
namespace System {
    typedef cli::delegate<void ()> Action;
    template<class T> using Action2 = cli::delegate<void (T obj)>;
    template<class T1, class T2> using Action4 = cli::delegate<void (T1 arg1, T2 arg2)>;
    template<class T1, class T2, class T3> using Action3 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3)>;
    template<class T1, class T2, class T3, class T4> using Action5 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3, T4 arg4)>;
    template<class T1, class T2, class T3, class T4, class T5> using Action6 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6> using Action7 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7> using Action8 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> using Action9 = cli::delegate<void (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)>;
    typedef cli::delegate<void (cli::array<String*>* args)> AppDomainInitializer;
    typedef cli::delegate<void (int32_t i, int32_t j)> Swapper;
    typedef cli::delegate<void (Object* sender, AssemblyLoadEventArgs* args)> AssemblyLoadEventHandler;
    typedef cli::delegate<void (IAsyncResult* ar)> AsyncCallback;
    template<class T> using Comparison = cli::delegate<int32_t (T x, T y)>;
    typedef cli::delegate<bool (int32_t keyCode)> WindowsCancelHandler;
    typedef cli::delegate<void ()> InternalCancelHandler;
    typedef cli::delegate<void (Object* sender, ConsoleCancelEventArgs* e)> ConsoleCancelEventHandler;
    template<class TInput, class TOutput> using Converter = cli::delegate<TOutput (TInput input)>;
    typedef cli::delegate<void ()> CrossAppDomainDelegate;
    template<class TEventArgs> using EventHandler2 = cli::delegate<void (Object* sender, TEventArgs e)>;
    typedef cli::delegate<void (Object* sender, EventArgs* e)> EventHandler;
    template<class TResult> using Func = cli::delegate<TResult ()>;
    template<class T, class TResult> using Func2 = cli::delegate<TResult (T arg)>;
    template<class T1, class T2, class TResult> using Func4 = cli::delegate<TResult (T1 arg1, T2 arg2)>;
    template<class T1, class T2, class T3, class TResult> using Func3 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3)>;
    template<class T1, class T2, class T3, class T4, class TResult> using Func5 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3, T4 arg4)>;
    template<class T1, class T2, class T3, class T4, class T5, class TResult> using Func6 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class TResult> using Func7 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class TResult> using Func8 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)>;
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class TResult> using Func9 = cli::delegate<TResult (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)>;
    template<class T> using Predicate = cli::delegate<bool (T obj)>;
    typedef cli::delegate<Reflection::Assembly* (Object* sender, ResolveEventArgs* args)> ResolveEventHandler;
    typedef cli::delegate<void (Object* sender, UnhandledExceptionEventArgs* e)> UnhandledExceptionEventHandler;
}
namespace System { namespace Collections { namespace Generic {
    template<class TKey, class TValue, class TRet> using Transform = cli::delegate<TRet (TKey key, TValue value)>;
}}}
namespace System { namespace IO {
    typedef cli::delegate<int32_t (cli::array<unsigned char>* buffer, int32_t offset, int32_t count)> ReadDelegate;
    typedef cli::delegate<void (cli::array<unsigned char>* buffer, int32_t offset, int32_t count)> WriteDelegate;
}}
namespace System { namespace Reflection {
    typedef cli::delegate<void (System::Object* _this, System::Delegate* dele)> AddEventAdapter;
    template<class T, class D> using AddEvent = cli::delegate<void (T _this, D dele)>;
    template<class D> using StaticAddEvent = cli::delegate<void (D dele)>;
    typedef cli::delegate<bool (MemberInfo* m, System::Object* filterCriteria)> MemberFilter;
    typedef cli::delegate<Module* (System::Object* sender, System::ResolveEventArgs* e)> ModuleResolveEventHandler;
    typedef cli::delegate<System::Object* (System::Object* _this)> GetterAdapter2;
    template<class T, class R> using Getter2 = cli::delegate<R (T _this)>;
    typedef cli::delegate<System::Object* (System::Object* _this)> GetterAdapter;
    template<class T, class R> using Getter = cli::delegate<R (T _this)>;
    template<class R> using StaticGetter = cli::delegate<R ()>;
    typedef cli::delegate<bool (System::Type* m, System::Object* filterCriteria)> TypeFilter;
}}
namespace System { namespace Runtime { namespace CompilerServices {
    template<class TKey, class TValue> using CreateValueCallback = cli::delegate<TValue (TKey key)>;
    typedef cli::delegate<void (System::Object* userData)> TryCode;
    typedef cli::delegate<void (System::Object* userData, bool exceptionThrown)> CleanupCode;
}}}
namespace System { namespace Runtime { namespace InteropServices {
    typedef cli::delegate<void* (void* aggregator)> ObjectCreationDelegate;
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    typedef cli::delegate<void ()> CrossContextDelegate;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    typedef cli::delegate<System::TimeSpan (ILease* lease)> RenewalDelegate;
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    typedef cli::delegate<System::Object* (cli::array<Header*>* headers)> HeaderHandler;
    typedef cli::delegate<bool (System::String* key, System::Object* value)> MessageSurrogateFilter;
}}}}
namespace System { namespace Runtime { namespace Serialization {
    typedef cli::delegate<void (StreamingContext context)> CallbackHandler;
}}}
namespace System { namespace Security { namespace AccessControl {
    typedef cli::delegate<System::Exception* (int32_t errorCode, System::String* name, System::Runtime::InteropServices::SafeHandle* handle, System::Object* context)> ExceptionFromErrorCode;
}}}
namespace System { namespace Threading {
    typedef cli::delegate<void (System::Object* state)> ContextCallback;
    typedef cli::delegate<void (uint32_t errorCode, uint32_t numBytes, NativeOverlapped* pOVERLAP)> IOCompletionCallback;
    typedef cli::delegate<void (System::Object* obj)> ParameterizedThreadStart;
    typedef cli::delegate<void (System::Object* state)> SendOrPostCallback;
    typedef cli::delegate<void ()> ThreadStart;
    typedef cli::delegate<void (System::Object* state)> TimerCallback;
    typedef cli::delegate<void (System::Object* state)> WaitCallback;
    typedef cli::delegate<void (System::Object* state, bool timedOut)> WaitOrTimerCallback;
}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API IMessage : public virtual System::Object{
        
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() = 0;
        
    };
    
}}}}
namespace System { namespace Collections {
    
    struct MANAGED_API IEnumerable : public virtual System::Object{
        
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() = 0;
        
    };
    
}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API IChannelSinkBase : public virtual System::Object{
        
        virtual System::Collections::IDictionary* get_Properties_381d7d7a86286003() = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API IMethodMessage : public virtual System::Object, public virtual IMessage{
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) = 0;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) = 0;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() = 0;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() = 0;
        virtual bool get_HasVarArgs_554adf133c756bdc() = 0;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() = 0;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() = 0;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() = 0;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() = 0;
        virtual System::String* get_TypeName_2c092df7327c2af5() = 0;
        virtual System::String* get_Uri_a772cc17d83f8740() = 0;
        
    };
    
}}}}
namespace System {
    
    struct MANAGED_API ICloneable : public virtual Object{
        
        virtual Object* Clone_d5efb96d327809c8() = 0;
        
    };
    
    
    struct MANAGED_API IDisposable : public virtual Object{
        
        virtual void Dispose_95cb2516542c2f97() = 0;
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API ICollection : public virtual System::Object, public virtual IEnumerable{
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) = 0;
        virtual int32_t get_Count_8f254f3dd8e2403() = 0;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() = 0;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() = 0;
        
    };
    
    
    struct MANAGED_API IEnumerator : public virtual System::Object{
        
        virtual bool MoveNext_4e78e145935f5417() = 0;
        virtual void Reset_bcd82381eed41868() = 0;
        virtual System::Object* get_Current_8eca9b3da02b123a() = 0;
        
    };
    
}}
namespace System { namespace Reflection {
    
    struct MANAGED_API IReflect : public virtual System::Object{
        
        virtual FieldInfo* GetField_a38d5b9730c691a2(System::String* name, BindingFlags bindingAttr) = 0;
        virtual cli::array<FieldInfo*>* GetFields_102264d5de9b86f1(BindingFlags bindingAttr) = 0;
        virtual cli::array<MemberInfo*>* GetMember_751a2f44650ce57a(System::String* name, BindingFlags bindingAttr) = 0;
        virtual cli::array<MemberInfo*>* GetMembers_2f15454515090881(BindingFlags bindingAttr) = 0;
        virtual MethodInfo* GetMethod_4cb6db7e284e0ff0(System::String* name, BindingFlags bindingAttr) = 0;
        virtual MethodInfo* GetMethod_2a24f5133b340750(System::String* name, BindingFlags bindingAttr, Binder* binder, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) = 0;
        virtual cli::array<MethodInfo*>* GetMethods_f9b63250be2babdf(BindingFlags bindingAttr) = 0;
        virtual cli::array<PropertyInfo*>* GetProperties_fdc96296e396cb0a(BindingFlags bindingAttr) = 0;
        virtual PropertyInfo* GetProperty_31c8ed7c4a9fe18(System::String* name, BindingFlags bindingAttr) = 0;
        virtual PropertyInfo* GetProperty_30e763aad46f8c31(System::String* name, BindingFlags bindingAttr, Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) = 0;
        virtual System::Object* InvokeMember_9f3df0d7b60ab9f0(System::String* name, BindingFlags invokeAttr, Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) = 0;
        virtual System::Type* get_UnderlyingSystemType_489064e38cffeff() = 0;
        
    };
    
}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API ITypeInfo : public virtual System::Object{
        
        virtual void GetTypeAttr_36b475a323c8dfe2(void* ppTypeAttr) = 0;
        virtual void GetTypeComp_68b2eb250fe08dbe(ITypeComp* ppTComp) = 0;
        virtual void GetFuncDesc_8075d8794cd323fb(int32_t index, void* ppFuncDesc) = 0;
        virtual void GetVarDesc_fa30e4ede31b24ec(int32_t index, void* ppVarDesc) = 0;
        virtual void GetNames_502313ff06f30ca1(int32_t memid, cli::array<System::String*>* rgBstrNames, int32_t cMaxNames, int32_t pcNames) = 0;
        virtual void GetRefTypeOfImplType_1cbd744c3fed6358(int32_t index, int32_t href) = 0;
        virtual void GetImplTypeFlags_d09e4416c3bf8dcd(int32_t index, IMPLTYPEFLAGS2 pImplTypeFlags) = 0;
        virtual void GetIDsOfNames_91733eafe4463061(cli::array<System::String*>* rgszNames, int32_t cNames, cli::array<int32_t>* pMemId) = 0;
        virtual void Invoke_28265098124cdf06(System::Object* pvInstance, int32_t memid, int16_t wFlags, DISPPARAMS2 pDispParams, void* pVarResult, void* pExcepInfo, int32_t puArgErr) = 0;
        virtual void GetDocumentation_90c67b5410a06c62(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) = 0;
        virtual void GetDllEntry_bc7720d30628bd87(int32_t memid, INVOKEKIND2 invKind, void* pBstrDllName, void* pBstrName, void* pwOrdinal) = 0;
        virtual void GetRefTypeInfo_f8880e15d909f48c(int32_t hRef, ITypeInfo* ppTI) = 0;
        virtual void AddressOfMember_3c86bbb2c43d63f3(int32_t memid, INVOKEKIND2 invKind, void* ppv) = 0;
        virtual void CreateInstance_30a13baf87fd0b1d(System::Object* pUnkOuter, System::Guid riid, System::Object* ppvObj) = 0;
        virtual void GetMops_a97544287fde851e(int32_t memid, System::String* pBstrMops) = 0;
        virtual void GetContainingTypeLib_25f9ca526a2cb629(ITypeLib* ppTLB, int32_t pIndex) = 0;
        virtual void ReleaseTypeAttr_c5bba1582d447b12(void* pTypeAttr) = 0;
        virtual void ReleaseFuncDesc_1f7d04126c4d623(void* pFuncDesc) = 0;
        virtual void ReleaseVarDesc_35d6f424cb4b4df1(void* pVarDesc) = 0;
        
    };
    
    
    struct MANAGED_API ITypeLib : public virtual System::Object{
        
        virtual int32_t GetTypeInfoCount_7c17bd650d5af530() = 0;
        virtual void GetTypeInfo_2444e8e13980a4a2(int32_t index, ITypeInfo* ppTI) = 0;
        virtual void GetTypeInfoType_d6a2d422e63bf316(int32_t index, TYPEKIND2 pTKind) = 0;
        virtual void GetTypeInfoOfGuid_940f84ecb515302b(System::Guid guid, ITypeInfo* ppTInfo) = 0;
        virtual void GetLibAttr_9bb6f45fe7a404e5(void* ppTLibAttr) = 0;
        virtual void GetTypeComp_fe535b249aec74a(ITypeComp* ppTComp) = 0;
        virtual void GetDocumentation_f458d8ba5f338fa6(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) = 0;
        virtual bool IsName_1447e43f11f84574(System::String* szNameBuf, int32_t lHashVal) = 0;
        virtual void FindName_72513a9c816a0f25(System::String* szNameBuf, int32_t lHashVal, cli::array<ITypeInfo*>* ppTInfo, cli::array<int32_t>* rgMemId, int16_t pcFound) = 0;
        virtual void ReleaseTLibAttr_bde572973a75ec34(void* pTLibAttr) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API IChannel : public virtual System::Object{
        
        virtual System::String* Parse_f03b6e6bc4217a25(System::String* url, System::String* objectURI) = 0;
        virtual System::String* get_ChannelName_92306725eef18163() = 0;
        virtual int32_t get_ChannelPriority_b96d903fee110f5d() = 0;
        
    };
    
    
    struct MANAGED_API IClientResponseChannelSinkStack : public virtual System::Object{
        
        virtual void AsyncProcessResponse_d672fc10cee61823(ITransportHeaders* headers, System::IO::Stream* stream) = 0;
        virtual void DispatchException_7c329149bbfd27eb(System::Exception* e) = 0;
        virtual void DispatchReplyMessage_3379ae4985e4327c(System::Runtime::Remoting::Messaging::IMessage* msg) = 0;
        
    };
    
    
    struct MANAGED_API IClientChannelSink : public virtual System::Object, public virtual IChannelSinkBase{
        
        virtual void AsyncProcessRequest_470b5280b91bcf42(IClientChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) = 0;
        virtual void AsyncProcessResponse_31d86946805caa0d(IClientResponseChannelSinkStack* sinkStack, System::Object* state, ITransportHeaders* headers, System::IO::Stream* stream) = 0;
        virtual System::IO::Stream* GetRequestStream_5eb2b2b21d1a1a96(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) = 0;
        virtual void ProcessMessage_31a731d81f4fb98b(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* requestHeaders, System::IO::Stream* requestStream, ITransportHeaders* responseHeaders, System::IO::Stream* responseStream) = 0;
        virtual IClientChannelSink* get_NextChannelSink_3b6322d3e7c21bfc() = 0;
        
    };
    
    
    struct MANAGED_API IClientChannelSinkProvider : public virtual System::Object{
        
        virtual IClientChannelSink* CreateSink_ba9aaf17565bba73(IChannelSender* channel, System::String* url, System::Object* remoteChannelData) = 0;
        virtual IClientChannelSinkProvider* get_Next_4a6c9c659a1e2e5() = 0;
        virtual IClientChannelSinkProvider* set_Next_678373dad0fd69cd(IClientChannelSinkProvider* value) = 0;
        
    };
    
    
    struct MANAGED_API IServerResponseChannelSinkStack : public virtual System::Object{
        
        virtual void AsyncProcessResponse_49e84a50b456f300(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) = 0;
        virtual System::IO::Stream* GetResponseStream_e19a69cdcfbe6e70(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) = 0;
        
    };
    
    
    struct MANAGED_API IServerChannelSinkProvider : public virtual System::Object{
        
        virtual IServerChannelSink* CreateSink_393aa9e6f3a19f60(IChannelReceiver* channel) = 0;
        virtual void GetChannelData_ddcc0792026c6379(IChannelDataStore* channelData) = 0;
        virtual IServerChannelSinkProvider* get_Next_c6272a298f936a9f() = 0;
        virtual IServerChannelSinkProvider* set_Next_3f72cebde871a137(IServerChannelSinkProvider* value) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API IMethodCallMessage : public virtual System::Object, public virtual IMethodMessage, public virtual IMessage{
        
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t argNum) = 0;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t index) = 0;
        virtual int32_t get_InArgCount_cb2e74281a598234() = 0;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() = 0;
        
    };
    
    
    struct MANAGED_API IMethodReturnMessage : public virtual System::Object, public virtual IMethodMessage, public virtual IMessage{
        
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t argNum) = 0;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t index) = 0;
        virtual System::Exception* get_Exception_f355b7f547514947() = 0;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() = 0;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() = 0;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() = 0;
        
    };
    
    
    struct MANAGED_API IMessageSink : public virtual System::Object{
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) = 0;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) = 0;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    struct MANAGED_API IFormatter : public virtual System::Object{
        
        virtual System::Object* Deserialize_19aeb6df512c35cb(System::IO::Stream* serializationStream) = 0;
        virtual void Serialize_617c75444546bb4e(System::IO::Stream* serializationStream, System::Object* graph) = 0;
        virtual SerializationBinder* get_Binder_215d8b515173b805() = 0;
        virtual SerializationBinder* set_Binder_175460eb6e1d50d5(SerializationBinder* value) = 0;
        virtual StreamingContext get_Context_dcb6fe59b19e8322() = 0;
        virtual StreamingContext set_Context_c7b1865dbad539b2(StreamingContext value) = 0;
        virtual ISurrogateSelector* get_SurrogateSelector_7fa2a47b11b30ba1() = 0;
        virtual ISurrogateSelector* set_SurrogateSelector_671af517157aed76(ISurrogateSelector* value) = 0;
        
    };
    
}}}
namespace System { namespace Security {
    
    struct MANAGED_API ISecurityEncodable : public virtual System::Object{
        
        virtual void FromXml_1053a148f0375461(SecurityElement* e) = 0;
        virtual SecurityElement* ToXml_4868e697107d327() = 0;
        
    };
    
    
    struct MANAGED_API ISecurityPolicyEncodable : public virtual System::Object{
        
        virtual void FromXml_d33f37a1ca3b24b6(SecurityElement* e, Policy::PolicyLevel* level) = 0;
        virtual SecurityElement* ToXml_7ef261149cc39102(Policy::PolicyLevel* level) = 0;
        
    };
    
}}
namespace Microsoft { namespace Win32 {
    
    struct MANAGED_API IRegistryApi : public virtual System::Object{
        
        virtual RegistryKey* CreateSubKey_e3b01f557508b68f(RegistryKey* rkey, System::String* keyname) = 0;
        virtual RegistryKey* OpenRemoteBaseKey_f80fed951d8f34a6(RegistryHive hKey, System::String* machineName) = 0;
        virtual RegistryKey* OpenSubKey_4d6bff263dc4c438(RegistryKey* rkey, System::String* keyname, bool writtable) = 0;
        virtual void Flush_53d355753283f224(RegistryKey* rkey) = 0;
        virtual void Close_7ab99d30db36a1fc(RegistryKey* rkey) = 0;
        virtual System::Object* GetValue_e35c4dfdaf0e1cb4(RegistryKey* rkey, System::String* name, System::Object* default_value, RegistryValueOptions options) = 0;
        virtual RegistryValueKind GetValueKind_c91458ed4ea1e91a(RegistryKey* rkey, System::String* name) = 0;
        virtual void SetValue_9e6c50dfb2e1c48(RegistryKey* rkey, System::String* name, System::Object* value) = 0;
        virtual int32_t SubKeyCount_2748a641640ffdf6(RegistryKey* rkey) = 0;
        virtual int32_t ValueCount_2062387fe7292f8d(RegistryKey* rkey) = 0;
        virtual void DeleteValue_8d736af9c68b135(RegistryKey* rkey, System::String* value, bool throw_if_missing) = 0;
        virtual void DeleteKey_84e4c2cae50b1273(RegistryKey* rkey, System::String* keyName, bool throw_if_missing) = 0;
        virtual cli::array<System::String*>* GetSubKeyNames_34dc199201a58ad7(RegistryKey* rkey) = 0;
        virtual cli::array<System::String*>* GetValueNames_1b2f3e2c26006c8d(RegistryKey* rkey) = 0;
        virtual System::String* ToString_8a8e8752aa6cc828(RegistryKey* rkey) = 0;
        virtual void SetValue_5d8b5cf92e3e050f(RegistryKey* rkey, System::String* name, System::Object* value, RegistryValueKind valueKind) = 0;
        virtual RegistryKey* CreateSubKey_d59517498a7eff5a(RegistryKey* rkey, System::String* keyname, RegistryOptions options) = 0;
        virtual RegistryKey* FromHandle_46a059a7a448791a(SafeHandles::SafeRegistryHandle* handle) = 0;
        virtual void* GetHandle_1af66fc049eafa1e(RegistryKey* key) = 0;
        
    };
    
}}
namespace Mono { namespace Interop {
    
    struct MANAGED_API IDispatch : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IUnknown : public virtual System::Object{
        
        
    };
    
}}
namespace Mono { namespace Security { namespace X509 {
    
    struct MANAGED_API ITrustAnchors : public virtual System::Object{
        
        virtual X509CertificateCollection* get_Anchors_d1264350bad2a64a() = 0;
        
    };
    
}}}
namespace Mono { namespace Xml {
    
    struct MANAGED_API IContentHandler : public virtual System::Object{
        
        virtual void OnStartParsing_60c119bf90baa608(SmallXmlParser* parser) = 0;
        virtual void OnEndParsing_ddf0252ce1c74235(SmallXmlParser* parser) = 0;
        virtual void OnStartElement_431a5ecd1484562f(System::String* name, IAttrList* attrs) = 0;
        virtual void OnEndElement_47dd703957202fcd(System::String* name) = 0;
        virtual void OnProcessingInstruction_eeedb82cbfe7ab40(System::String* name, System::String* text) = 0;
        virtual void OnChars_23545ef97e4c205b(System::String* text) = 0;
        virtual void OnIgnorableWhitespace_39f85fe38215782c(System::String* text) = 0;
        
    };
    
    
    struct MANAGED_API IAttrList : public virtual System::Object{
        
        virtual System::String* GetName_71efa89033fbba85(int32_t i) = 0;
        virtual System::String* GetValue_e96b4d39015c72a4(int32_t i) = 0;
        virtual System::String* GetValue_da157d9f297d63a4(System::String* name) = 0;
        virtual int32_t get_Length_4ee791fdf528d8a() = 0;
        virtual bool get_IsEmpty_ffd3b9fc5868c6c7() = 0;
        virtual cli::array<System::String*>* get_Names_9f5e761023ba0c63() = 0;
        virtual cli::array<System::String*>* get_Values_56e80d7ef1a6a837() = 0;
        
    };
    
}}
namespace System {
    
    struct MANAGED_API IAppDomainSetup : public virtual Object{
        
        virtual String* get_ApplicationBase_9721289a5eae8836() = 0;
        virtual String* set_ApplicationBase_4873b8c25c63c048(String* value) = 0;
        virtual String* get_ApplicationName_e8fa5c72c612228c() = 0;
        virtual String* set_ApplicationName_ccc13d0847864819(String* value) = 0;
        virtual String* get_CachePath_c696e8dcfbd4017c() = 0;
        virtual String* set_CachePath_35f2a12bef0a32d0(String* value) = 0;
        virtual String* get_ConfigurationFile_9376e208dae3aba0() = 0;
        virtual String* set_ConfigurationFile_398471c00bb93ab1(String* value) = 0;
        virtual String* get_DynamicBase_755a2f189fc3f2ad() = 0;
        virtual String* set_DynamicBase_dc22b98e02191087(String* value) = 0;
        virtual String* get_LicenseFile_f73f0a4c53b13a1b() = 0;
        virtual String* set_LicenseFile_3d344cd71e3a0bbd(String* value) = 0;
        virtual String* get_PrivateBinPath_bef59c6818e17f4c() = 0;
        virtual String* set_PrivateBinPath_ebc4d24d2b23cc82(String* value) = 0;
        virtual String* get_PrivateBinPathProbe_8d247bd69349815a() = 0;
        virtual String* set_PrivateBinPathProbe_d6b5308e90c21862(String* value) = 0;
        virtual String* get_ShadowCopyDirectories_27b053b1a11ee820() = 0;
        virtual String* set_ShadowCopyDirectories_d44cecd50c99c9e3(String* value) = 0;
        virtual String* get_ShadowCopyFiles_c865b8136fa4fff5() = 0;
        virtual String* set_ShadowCopyFiles_e981770a6ada516e(String* value) = 0;
        
    };
    
    
    struct MANAGED_API IApplicationDescription : public virtual Object, public virtual ICloneable{
        
        virtual String* get_ApplicationCodeBase_cd65ff6db481c290() = 0;
        virtual String* get_ApplicationManifest_db0a521c2f82e27e() = 0;
        virtual String* get_ApplicationManifestPath_81bdaa414879b8b4() = 0;
        virtual String* get_DeploymentCodeBase_d37ba34e479cded9() = 0;
        virtual String* get_DeploymentManifest_4a4d2c1b99e19c53() = 0;
        virtual String* get_DeploymentManifestPath_f353d9345ff37bb5() = 0;
        
    };
    
    
    struct MANAGED_API IAsyncResult : public virtual Object{
        
        virtual Object* get_AsyncState_edfadcd905632437() = 0;
        virtual Threading::WaitHandle* get_AsyncWaitHandle_7620505c49d113f3() = 0;
        virtual bool get_CompletedSynchronously_2176ca6518f7b5dc() = 0;
        virtual bool get_IsCompleted_908b07d70649b7ff() = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IComparable2 : public virtual Object{
        
        virtual int32_t CompareTo_8a8b7d6c83beb422(T other) = 0;
        
    };
    
    
    struct MANAGED_API IConsoleDriver : public virtual Object{
        
        virtual void Init_c5426ee2900a294b() = 0;
        virtual void Beep_1da4596cc175b056(int32_t frequency, int32_t duration) = 0;
        virtual void Clear_f1b4f6af283cc2c9() = 0;
        virtual void MoveBufferArea_5b90e28706eb2f21(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) = 0;
        virtual ConsoleKeyInfo ReadKey_6a3b7aab317c85ed(bool intercept) = 0;
        virtual void ResetColor_8f6250a6a6d78789() = 0;
        virtual void SetBufferSize_343d697c2e12d0db(int32_t width, int32_t height) = 0;
        virtual void SetCursorPosition_1b5796b8c190ffa5(int32_t left, int32_t top) = 0;
        virtual void SetWindowPosition_cd2b9c3f7be414da(int32_t left, int32_t top) = 0;
        virtual void SetWindowSize_4cfb33f333b34cf(int32_t width, int32_t height) = 0;
        virtual String* ReadLine_d9726d4d34f7f3c0() = 0;
        virtual ConsoleColor get_BackgroundColor_c9fafb327ddb8be6() = 0;
        virtual ConsoleColor set_BackgroundColor_344fac019c9386b1(ConsoleColor value) = 0;
        virtual int32_t get_BufferHeight_37934843c5ad875e() = 0;
        virtual int32_t set_BufferHeight_5d535a7eaee8afa7(int32_t value) = 0;
        virtual int32_t get_BufferWidth_4e39d049ce05cb10() = 0;
        virtual int32_t set_BufferWidth_ba768a1fb5af86f3(int32_t value) = 0;
        virtual bool get_CapsLock_5c626ee325707d5c() = 0;
        virtual int32_t get_CursorLeft_a1045160a5e0c167() = 0;
        virtual int32_t set_CursorLeft_58812b936675567d(int32_t value) = 0;
        virtual int32_t get_CursorSize_c23bb8efe316d434() = 0;
        virtual int32_t set_CursorSize_f0834eb8266a5be6(int32_t value) = 0;
        virtual int32_t get_CursorTop_529e091e36331015() = 0;
        virtual int32_t set_CursorTop_785544d75b1c0bee(int32_t value) = 0;
        virtual bool get_CursorVisible_56c3cc5601135b6f() = 0;
        virtual bool set_CursorVisible_cf1ec653cdd99e69(bool value) = 0;
        virtual ConsoleColor get_ForegroundColor_7612ec7b8c8aaaa5() = 0;
        virtual ConsoleColor set_ForegroundColor_940cb65e8fef1858(ConsoleColor value) = 0;
        virtual bool get_KeyAvailable_484cd75e08a09869() = 0;
        virtual bool get_Initialized_317ffc50d17896d3() = 0;
        virtual int32_t get_LargestWindowHeight_e89fef87df5ea56d() = 0;
        virtual int32_t get_LargestWindowWidth_6d2cf275eb651738() = 0;
        virtual bool get_NumberLock_9e29453ae6b2f675() = 0;
        virtual String* get_Title_297f109429139f1f() = 0;
        virtual String* set_Title_5ffd8093a2ce14e8(String* value) = 0;
        virtual bool get_TreatControlCAsInput_724ae746e19a1372() = 0;
        virtual bool set_TreatControlCAsInput_22e3ed8b8ed195e4(bool value) = 0;
        virtual int32_t get_WindowHeight_d105cfc0640e021b() = 0;
        virtual int32_t set_WindowHeight_762a4dd6c7316c83(int32_t value) = 0;
        virtual int32_t get_WindowLeft_2e939ca75d6696f7() = 0;
        virtual int32_t set_WindowLeft_6b1bb1c980db7ca6(int32_t value) = 0;
        virtual int32_t get_WindowTop_869e53cfc4194ff6() = 0;
        virtual int32_t set_WindowTop_6ed3579f04406446(int32_t value) = 0;
        virtual int32_t get_WindowWidth_aaf18af655c54aa3() = 0;
        virtual int32_t set_WindowWidth_34776e6c3b72e222(int32_t value) = 0;
        
    };
    
    
    struct MANAGED_API ICustomFormatter : public virtual Object{
        
        virtual String* Format_5424462033f07fdf(String* format, Object* arg, IFormatProvider* formatProvider) = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IEquatable : public virtual Object{
        
        virtual bool Equals_ea48fd0c13a733fe(T other) = 0;
        
    };
    
    
    struct MANAGED_API IFormatProvider : public virtual Object{
        
        virtual Object* GetFormat_b67414a65453cc7e(Type* formatType) = 0;
        
    };
    
    
    struct MANAGED_API IHostContext : public virtual Object{
        
        virtual bool get_AssumeTrust_6f941484cd0060e() = 0;
        virtual bool get_ExclusiveGrant_3d16b7e63b14990f() = 0;
        virtual bool get_IsFirstTimeInstall_1023dd54091e9879() = 0;
        virtual bool get_NoPrompt_5dc8f91ea15ee618() = 0;
        virtual bool get_Persist_77a068c2f98f2574() = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IObservable : public virtual Object{
        
        virtual IDisposable* Subscribe_6035882da6947838(IObserver<T>* observer) = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IObserver : public virtual Object{
        
        virtual void OnCompleted_63d33bf3cf8ec96b() = 0;
        virtual void OnError_fbe223e1176c9b55(Exception* error) = 0;
        virtual void OnNext_26e5156cf8685856(T value) = 0;
        
    };
    
    
    struct MANAGED_API IServiceProvider : public virtual Object{
        
        virtual Object* GetService_f96e1df4ece6c4ed(Type* serviceType) = 0;
        
    };
    
    
    struct MANAGED_API _AppDomain : public virtual Object{
        
        virtual void AppendPrivatePath_b3ee2eec783a3754(String* path) = 0;
        virtual void ClearPrivatePath_bee8a0fbf4df9e1e() = 0;
        virtual void ClearShadowCopyPath_b0050824cd24a2b9() = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_b0289026ebfffff7(String* assemblyName, String* typeName) = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_953176cf11400657(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes) = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_593e3b24df052556(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes) = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_a887219b218de75d(String* assemblyFile, String* typeName) = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_655dfdad722dba22(String* assemblyFile, String* typeName, cli::array<Object*>* activationAttributes) = 0;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_3090b41533c8c88c(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_c3dc46d012ab6aeb(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_627f226f06baa8b6(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_21f25a254658c094(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_604e078899c011f0(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_290276c209d2331(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_decd91a805fc8e1b(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_7102ce3e754e1ad3(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_3c294097a9c19c30(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) = 0;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_3143681a2942300a(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions, bool isSynchronized) = 0;
        virtual void DoCallBack_66db270a4ceffdfe(CrossAppDomainDelegate* theDelegate) = 0;
        virtual bool Equals_5e8e0f86a79f1d51(Object* other) = 0;
        virtual int32_t ExecuteAssembly_aebf0fe3b56c1c6f(String* assemblyFile) = 0;
        virtual int32_t ExecuteAssembly_7527301e547e9998(String* assemblyFile, Security::Policy::Evidence* assemblySecurity) = 0;
        virtual int32_t ExecuteAssembly_d0e79bc117cbb23c(String* assemblyFile, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args) = 0;
        virtual cli::array<Reflection::Assembly*>* GetAssemblies_2f2f24782e9bbaa1() = 0;
        virtual Object* GetData_8d88d80779f39e8d(String* name) = 0;
        virtual int32_t GetHashCode_fd0ed3bf64cfe8f9() = 0;
        virtual Object* GetLifetimeService_2b12bb4495bc713c() = 0;
        virtual Type* GetType_8770470dc313272b() = 0;
        virtual Object* InitializeLifetimeService_a5c5aadd1b06210b() = 0;
        virtual Reflection::Assembly* Load_ca851dd254b4f361(Reflection::AssemblyName* assemblyRef) = 0;
        virtual Reflection::Assembly* Load_f3c3a9f63e02d7c7(cli::array<unsigned char>* rawAssembly) = 0;
        virtual Reflection::Assembly* Load_d908dcc0864db1d3(String* assemblyString) = 0;
        virtual Reflection::Assembly* Load_3da712896f486abc(Reflection::AssemblyName* assemblyRef, Security::Policy::Evidence* assemblySecurity) = 0;
        virtual Reflection::Assembly* Load_dc2369822d808ae3(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore) = 0;
        virtual Reflection::Assembly* Load_fdea81560c002669(String* assemblyString, Security::Policy::Evidence* assemblySecurity) = 0;
        virtual Reflection::Assembly* Load_102c0f4f7d676d04(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, Security::Policy::Evidence* securityEvidence) = 0;
        virtual void SetAppDomainPolicy_e0a2fcde2ca025e6(Security::Policy::PolicyLevel* domainPolicy) = 0;
        virtual void SetCachePath_b899d77d9e3e4a1e(String* s) = 0;
        virtual void SetData_fae3a991137e9570(String* name, Object* data) = 0;
        virtual void SetPrincipalPolicy_d991a50e71ad558f(Security::Principal::PrincipalPolicy policy) = 0;
        virtual void SetShadowCopyPath_33d17aa37e2073bf(String* s) = 0;
        virtual void SetThreadPrincipal_61af26702d580521(Security::Principal::IPrincipal* principal) = 0;
        virtual String* ToString_e621708666fbb83e() = 0;
        virtual void GetIDsOfNames_4870ff5d64d8c1f1(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_7e5828400406fc0a(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_9db5fe51658e3d38(uint32_t pcTInfo) = 0;
        virtual void Invoke_9fac458325d11ed4(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual String* get_BaseDirectory_950eba357d2ea91d() = 0;
        virtual String* get_DynamicDirectory_b9f183d81035af32() = 0;
        virtual Security::Policy::Evidence* get_Evidence_b29329a23899d3a1() = 0;
        virtual String* get_FriendlyName_a7ea6ef61f96e4f0() = 0;
        virtual String* get_RelativeSearchPath_6d86d21708d754c9() = 0;
        virtual bool get_ShadowCopyFiles_c64e19b67830a0d6() = 0;
        virtual void add_AssemblyLoad_d41608c4efde307d(AssemblyLoadEventHandler* value) = 0;
        virtual void remove_AssemblyLoad_78edf16ad91a8170(AssemblyLoadEventHandler* value) = 0;
        virtual void add_AssemblyResolve_1bc6b8609d68da1(ResolveEventHandler* value) = 0;
        virtual void remove_AssemblyResolve_b723f81b23087974(ResolveEventHandler* value) = 0;
        virtual void add_DomainUnload_d3cf45e1009e4e8a(EventHandler* value) = 0;
        virtual void remove_DomainUnload_d67c5135e3e23c1(EventHandler* value) = 0;
        virtual void add_ProcessExit_1b1e458c957cc32f(EventHandler* value) = 0;
        virtual void remove_ProcessExit_5709ece2c4ad927a(EventHandler* value) = 0;
        virtual void add_ResourceResolve_25585e4d513c6288(ResolveEventHandler* value) = 0;
        virtual void remove_ResourceResolve_4859b7f44cf2916(ResolveEventHandler* value) = 0;
        virtual void add_TypeResolve_b86030308f849881(ResolveEventHandler* value) = 0;
        virtual void remove_TypeResolve_14e72b551178582b(ResolveEventHandler* value) = 0;
        virtual void add_UnhandledException_eccab8e37f0236c3(UnhandledExceptionEventHandler* value) = 0;
        virtual void remove_UnhandledException_8a9eff9b9b50b9b8(UnhandledExceptionEventHandler* value) = 0;
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API IComparer : public virtual System::Object{
        
        virtual int32_t Compare_451fd276747b629d(System::Object* x, System::Object* y) = 0;
        
    };
    
    
    struct MANAGED_API IDictionary : public virtual System::Object, public virtual ICollection, public virtual IEnumerable{
        
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) = 0;
        virtual void Clear_23091c63869f817f() = 0;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) = 0;
        virtual IDictionaryEnumerator* GetEnumerator_40657fcb15842551() /*new*/ = 0;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) = 0;
        virtual bool get_IsFixedSize_9b77ca904d42a211() = 0;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() = 0;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) = 0;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) = 0;
        virtual ICollection* get_Keys_d809cadac60b140a() = 0;
        virtual ICollection* get_Values_ef6ae5cda2bdcf40() = 0;
        
    };
    
    
    struct MANAGED_API IDictionaryEnumerator : public virtual System::Object, public virtual IEnumerator{
        
        virtual DictionaryEntry get_Entry_7d036eca1ef8d5f4() = 0;
        virtual System::Object* get_Key_ed7954531cb20258() = 0;
        virtual System::Object* get_Value_889e0f410f0d67ef() = 0;
        
    };
    
    
    struct MANAGED_API IEqualityComparer : public virtual System::Object{
        
        virtual bool Equals_ad190887ea91ded(System::Object* x, System::Object* y) = 0;
        virtual int32_t GetHashCode_f8793dfb2b096a5a(System::Object* obj) = 0;
        
    };
    
    
    struct MANAGED_API IHashCodeProvider : public virtual System::Object{
        
        virtual int32_t GetHashCode_5d8a358493971efd(System::Object* obj) = 0;
        
    };
    
    
    struct MANAGED_API IList : public virtual System::Object, public virtual ICollection, public virtual IEnumerable{
        
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) = 0;
        virtual void Clear_e0ee496065507a2f() = 0;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) = 0;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) = 0;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) = 0;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) = 0;
        virtual void RemoveAt_dce190584913328b(int32_t index) = 0;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() = 0;
        virtual bool get_IsReadOnly_53b6e02d46187790() = 0;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) = 0;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) = 0;
        
    };
    
    
    struct MANAGED_API IStructuralComparable : public virtual System::Object{
        
        virtual int32_t CompareTo_6a6cfba1da2bec3b(System::Object* other, IComparer* comparer) = 0;
        
    };
    
    
    struct MANAGED_API IStructuralEquatable : public virtual System::Object{
        
        virtual bool Equals_2f89738462b0fb33(System::Object* other, IEqualityComparer* comparer) = 0;
        virtual int32_t GetHashCode_94e84ad7bccbc132(IEqualityComparer* comparer) = 0;
        
    };
    
}}
namespace System { namespace Collections { namespace Concurrent {
    
    template<class T> struct MANAGED_API IProducerConsumerCollection : public virtual System::Object, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        
        virtual bool TryAdd_c8c99cf8ee0a136a(T item) = 0;
        virtual bool TryTake_847d302d2cfeb97(T item) = 0;
        virtual cli::array<T>* ToArray_8ccf9eabf7c0f83c() = 0;
        virtual void CopyTo_c08b50ac29c8b1c8(cli::array<T>* array, int32_t index) = 0;
        
    };
    
}}}
namespace System { namespace Collections { namespace Generic {
    
    template<class T> struct MANAGED_API ICollection2 : public virtual System::Object, public virtual IEnumerable2<T>, public virtual System::Collections::IEnumerable{
        
        virtual void Add_a6fc54bc2aa3c029(T item) = 0;
        virtual void Clear_16ef3c35b14f77a2() = 0;
        virtual bool Contains_ca946a648e63e62e(T item) = 0;
        virtual void CopyTo_e6884c04285bc976(cli::array<T>* array, int32_t arrayIndex) = 0;
        virtual bool Remove_67948971902d0cce(T item) = 0;
        virtual int32_t get_Count_a9c25d5c244affb9() = 0;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IComparer2 : public virtual System::Object{
        
        virtual int32_t Compare_5902559f67a8cefa(T x, T y) = 0;
        
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API IDictionary2 : public virtual System::Object, public virtual ICollection2<KeyValuePair<TKey, TValue>>, public virtual IEnumerable2<KeyValuePair<TKey, TValue>>, public virtual System::Collections::IEnumerable{
        
        virtual void Add_98fd6232ab01b789(TKey key, TValue value) = 0;
        virtual bool ContainsKey_6b27cc7fbf3d0673(TKey key) = 0;
        virtual bool Remove_6b6ef63eca7c3783(TKey key) = 0;
        virtual bool TryGetValue_ce9f0a16d22fc3a7(TKey key, TValue value) = 0;
        virtual TValue get_Item_6184d8d494c06347(TKey key) = 0;
        virtual TValue set_Item_9efe7d5d7f862add(TKey key, TValue value) = 0;
        virtual ICollection2<TKey>* get_Keys_2b6b38d6f5ec99fa() = 0;
        virtual ICollection2<TValue>* get_Values_9c050b7765e02952() = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IEnumerable2 : public virtual System::Object, public virtual System::Collections::IEnumerable{
        
        virtual IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() /*new*/ = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IEnumerator2 : public virtual System::Object, public virtual System::IDisposable, public virtual System::Collections::IEnumerator{
        
        virtual T get_Current_9be2a11682d08be8() /*new*/ = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IEqualityComparer2 : public virtual System::Object{
        
        virtual bool Equals_f783e5e22b72a1c0(T x, T y) = 0;
        virtual int32_t GetHashCode_74f46a6b01295dbe(T obj) = 0;
        
    };
    
    
    template<class T> struct MANAGED_API IList2 : public virtual System::Object, public virtual ICollection2<T>, public virtual IEnumerable2<T>, public virtual System::Collections::IEnumerable{
        
        virtual int32_t IndexOf_9e82d7c34bb82d25(T item) = 0;
        virtual void Insert_d9ae15974e481e9e(int32_t index, T item) = 0;
        virtual void RemoveAt_92d07238fa433d4a(int32_t index) = 0;
        virtual T get_Item_e6c1a54cb8f591e7(int32_t index) = 0;
        virtual T set_Item_13ad50de181a1c01(int32_t index, T value) = 0;
        
    };
    
}}}
namespace System { namespace Diagnostics { namespace SymbolStore {
    
    struct MANAGED_API ISymbolBinder : public virtual System::Object{
        
        virtual ISymbolReader* GetReader_3d6a79dc730d4ef3(int32_t importer, System::String* filename, System::String* searchPath) = 0;
        
    };
    
    
    struct MANAGED_API ISymbolBinder1 : public virtual System::Object{
        
        virtual ISymbolReader* GetReader_70f69291981c344b(void* importer, System::String* filename, System::String* searchPath) = 0;
        
    };
    
    
    struct MANAGED_API ISymbolDocument : public virtual System::Object{
        
        virtual int32_t FindClosestLine_c50d22bf95b24dfb(int32_t line) = 0;
        virtual cli::array<unsigned char>* GetCheckSum_129a6515fab490fc() = 0;
        virtual cli::array<unsigned char>* GetSourceRange_eb5da3899462d9b2(int32_t startLine, int32_t startColumn, int32_t endLine, int32_t endColumn) = 0;
        virtual System::Guid get_CheckSumAlgorithmId_33252955840cee32() = 0;
        virtual System::Guid get_DocumentType_ef13a5d7647cf431() = 0;
        virtual bool get_HasEmbeddedSource_7ab6160e184f353b() = 0;
        virtual System::Guid get_Language_b7931e79a5ab6093() = 0;
        virtual System::Guid get_LanguageVendor_71deeaf388ac0cf3() = 0;
        virtual int32_t get_SourceLength_a00d4c38ed8befa4() = 0;
        virtual System::String* get_URL_8c64940fd5a17c09() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolDocumentWriter : public virtual System::Object{
        
        virtual void SetCheckSum_caea421dfdd33991(System::Guid algorithmId, cli::array<unsigned char>* checkSum) = 0;
        virtual void SetSource_78b36e2e2b66e98e(cli::array<unsigned char>* source) = 0;
        
    };
    
    
    struct MANAGED_API ISymbolMethod : public virtual System::Object{
        
        virtual ISymbolNamespace* GetNamespace_378334bf4440f1fd() = 0;
        virtual int32_t GetOffset_144521ceaeaea7c4(ISymbolDocument* document, int32_t line, int32_t column) = 0;
        virtual cli::array<ISymbolVariable*>* GetParameters_e84d49a4eb217914() = 0;
        virtual cli::array<int32_t>* GetRanges_6a1a0224d74ce779(ISymbolDocument* document, int32_t line, int32_t column) = 0;
        virtual ISymbolScope* GetScope_91d712e3c6ac1584(int32_t offset) = 0;
        virtual void GetSequencePoints_c0ff2f399367622a(cli::array<int32_t>* offsets, cli::array<ISymbolDocument*>* documents, cli::array<int32_t>* lines, cli::array<int32_t>* columns, cli::array<int32_t>* endLines, cli::array<int32_t>* endColumns) = 0;
        virtual bool GetSourceStartEnd_3ac7beb3eefc66f2(cli::array<ISymbolDocument*>* docs, cli::array<int32_t>* lines, cli::array<int32_t>* columns) = 0;
        virtual ISymbolScope* get_RootScope_823d7af17b0aee16() = 0;
        virtual int32_t get_SequencePointCount_c7954029affe2f05() = 0;
        virtual SymbolToken get_Token_ff76ad948208282a() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolNamespace : public virtual System::Object{
        
        virtual cli::array<ISymbolNamespace*>* GetNamespaces_9873d18ae608b39b() = 0;
        virtual cli::array<ISymbolVariable*>* GetVariables_96f251b6522034de() = 0;
        virtual System::String* get_Name_46a53db5857aa8bb() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolReader : public virtual System::Object{
        
        virtual ISymbolDocument* GetDocument_cbfdb40c09c24e78(System::String* url, System::Guid language, System::Guid languageVendor, System::Guid documentType) = 0;
        virtual cli::array<ISymbolDocument*>* GetDocuments_706087c23724e44d() = 0;
        virtual cli::array<ISymbolVariable*>* GetGlobalVariables_f6f34a2daf595c89() = 0;
        virtual ISymbolMethod* GetMethod_a78217df54fcc10c(SymbolToken method) = 0;
        virtual ISymbolMethod* GetMethod_7f242487807b980c(SymbolToken method, int32_t version) = 0;
        virtual ISymbolMethod* GetMethodFromDocumentPosition_3823754d3c300b14(ISymbolDocument* document, int32_t line, int32_t column) = 0;
        virtual cli::array<ISymbolNamespace*>* GetNamespaces_69b4848e50fd0800() = 0;
        virtual cli::array<unsigned char>* GetSymAttribute_1b63d2238f6e7942(SymbolToken parent, System::String* name) = 0;
        virtual cli::array<ISymbolVariable*>* GetVariables_5bc9db0dfe304072(SymbolToken parent) = 0;
        virtual SymbolToken get_UserEntryPoint_1ff7bd878343bb1() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolScope : public virtual System::Object{
        
        virtual cli::array<ISymbolScope*>* GetChildren_c66e117050330178() = 0;
        virtual cli::array<ISymbolVariable*>* GetLocals_9f850fe24bb36b0d() = 0;
        virtual cli::array<ISymbolNamespace*>* GetNamespaces_46a6536baef8146f() = 0;
        virtual int32_t get_EndOffset_b8351310963d0cab() = 0;
        virtual ISymbolMethod* get_Method_ab376b5718d0824b() = 0;
        virtual ISymbolScope* get_Parent_3a4d78d9438d1e48() = 0;
        virtual int32_t get_StartOffset_3d33a0d43c73026() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolVariable : public virtual System::Object{
        
        virtual cli::array<unsigned char>* GetSignature_a1773daad1f66f33() = 0;
        virtual int32_t get_AddressField1_e7befa36d145683f() = 0;
        virtual int32_t get_AddressField2_852bc7f5b8a875e5() = 0;
        virtual int32_t get_AddressField3_db74cc7a5b1416da() = 0;
        virtual SymAddressKind get_AddressKind_82ea3933661d93c8() = 0;
        virtual System::Object* get_Attributes_89bb4e334e1a9de() = 0;
        virtual int32_t get_EndOffset_91c59df536feb2a() = 0;
        virtual System::String* get_Name_8d3c96a79ca58401() = 0;
        virtual int32_t get_StartOffset_336e1a977f1b142e() = 0;
        
    };
    
    
    struct MANAGED_API ISymbolWriter : public virtual System::Object{
        
        virtual void Close_2ab0800c0e742859() = 0;
        virtual void CloseMethod_448561d76f46fdbe() = 0;
        virtual void CloseNamespace_5aa5845b278a0d2a() = 0;
        virtual void CloseScope_f3fded08883821b3(int32_t endOffset) = 0;
        virtual ISymbolDocumentWriter* DefineDocument_54f3b43bb597bdbb(System::String* url, System::Guid language, System::Guid languageVendor, System::Guid documentType) = 0;
        virtual void DefineField_e201ff2cd39a8d33(SymbolToken parent, System::String* name, System::Reflection::FieldAttributes attributes, cli::array<unsigned char>* signature, SymAddressKind addrKind, int32_t addr1, int32_t addr2, int32_t addr3) = 0;
        virtual void DefineGlobalVariable_e7d40624a1a22138(System::String* name, System::Reflection::FieldAttributes attributes, cli::array<unsigned char>* signature, SymAddressKind addrKind, int32_t addr1, int32_t addr2, int32_t addr3) = 0;
        virtual void DefineLocalVariable_2fcd733890c75378(System::String* name, System::Reflection::FieldAttributes attributes, cli::array<unsigned char>* signature, SymAddressKind addrKind, int32_t addr1, int32_t addr2, int32_t addr3, int32_t startOffset, int32_t endOffset) = 0;
        virtual void DefineParameter_a03b9ed9fa87d401(System::String* name, System::Reflection::ParameterAttributes attributes, int32_t sequence, SymAddressKind addrKind, int32_t addr1, int32_t addr2, int32_t addr3) = 0;
        virtual void DefineSequencePoints_6064e3140dd8e77(ISymbolDocumentWriter* document, cli::array<int32_t>* offsets, cli::array<int32_t>* lines, cli::array<int32_t>* columns, cli::array<int32_t>* endLines, cli::array<int32_t>* endColumns) = 0;
        virtual void Initialize_544bf5fae52712b1(void* emitter, System::String* filename, bool fFullBuild) = 0;
        virtual void OpenMethod_8100d0fe13e57fbc(SymbolToken method) = 0;
        virtual void OpenNamespace_6bf6b9bb45e33142(System::String* name) = 0;
        virtual int32_t OpenScope_9a16cccabeeb1996(int32_t startOffset) = 0;
        virtual void SetMethodSourceRange_f249c4fa645bb56a(ISymbolDocumentWriter* startDoc, int32_t startLine, int32_t startColumn, ISymbolDocumentWriter* endDoc, int32_t endLine, int32_t endColumn) = 0;
        virtual void SetScopeRange_a6b0dc41b70f0101(int32_t scopeID, int32_t startOffset, int32_t endOffset) = 0;
        virtual void SetSymAttribute_be44b9c427da3a77(SymbolToken parent, System::String* name, cli::array<unsigned char>* data) = 0;
        virtual void SetUnderlyingWriter_7cc7d63f7a436ca1(void* underlyingWriter) = 0;
        virtual void SetUserEntryPoint_8ae30b0b5bd43be(SymbolToken entryMethod) = 0;
        virtual void UsingNamespace_f391d375491f06cb(System::String* fullName) = 0;
        
    };
    
}}}
namespace System { namespace IO { namespace IsolatedStorage {
    
    struct MANAGED_API INormalizeForIsolatedStorage : public virtual System::Object{
        
        virtual System::Object* Normalize_fb8c7126ae24368c() = 0;
        
    };
    
}}}
namespace System { namespace Reflection {
    
    struct MANAGED_API ICustomAttributeProvider : public virtual System::Object{
        
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) = 0;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) = 0;
        
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API TokenGenerator : public virtual System::Object{
        
        virtual int32_t GetToken_25c90de716173dc6(System::String* str) = 0;
        virtual int32_t GetToken_10bcc90da5b44782(System::Reflection::MemberInfo* member, bool create_open_instance) = 0;
        virtual int32_t GetToken_9da014b90fcfd506(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) = 0;
        virtual int32_t GetToken_dc01c561a484101(SignatureHelper* helper) = 0;
        
    };
    
}}}
namespace System { namespace Resources {
    
    struct MANAGED_API IResourceReader : public virtual System::Object, public virtual System::Collections::IEnumerable, public virtual System::IDisposable{
        
        virtual void Close_9051b9e2cc8ad458() = 0;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_5461f24f4ddc9df4() /*new*/ = 0;
        
    };
    
    
    struct MANAGED_API IResourceWriter : public virtual System::Object, public virtual System::IDisposable{
        
        virtual void AddResource_9538446dc281eb76(System::String* name, cli::array<unsigned char>* value) = 0;
        virtual void AddResource_4d7d112bfae77d9f(System::String* name, System::Object* value) = 0;
        virtual void AddResource_84237ae847b43967(System::String* name, System::String* value) = 0;
        virtual void Close_b9951e614539ebeb() = 0;
        virtual void Generate_fe5750179d21610b() = 0;
        
    };
    
}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API ICustomAdapter : public virtual System::Object{
        
        virtual System::Object* GetUnderlyingObject_e8e716cd4b0a671() = 0;
        
    };
    
    
    struct MANAGED_API ICustomFactory : public virtual System::Object{
        
        virtual System::MarshalByRefObject* CreateInstance_3b230f9b12c3ffe1(System::Type* serverType) = 0;
        
    };
    
    
    struct MANAGED_API ICustomMarshaler : public virtual System::Object{
        
        virtual void CleanUpManagedData_a38b54990ee3a107(System::Object* ManagedObj) = 0;
        virtual void CleanUpNativeData_7d9c0fd680b1e4f3(void* pNativeData) = 0;
        virtual int32_t GetNativeDataSize_3664afc270bc9731() = 0;
        virtual void* MarshalManagedToNative_4f28ecfc78be183b(System::Object* ManagedObj) = 0;
        virtual System::Object* MarshalNativeToManaged_e19e7a0f24143471(void* pNativeData) = 0;
        
    };
    
    
    struct MANAGED_API IRegistrationServices : public virtual System::Object{
        
        virtual System::Guid GetManagedCategoryGuid_8927f525ca26383a() = 0;
        virtual System::String* GetProgIdForType_13a54d045ed226a9(System::Type* type) = 0;
        virtual cli::array<System::Type*>* GetRegistrableTypesInAssembly_9e06182253e9c8f4(System::Reflection::Assembly* assembly) = 0;
        virtual bool RegisterAssembly_e4a461988cb7fb93(System::Reflection::Assembly* assembly, AssemblyRegistrationFlags flags) = 0;
        virtual void RegisterTypeForComClients_3563ef6caa412442(System::Type* type, System::Guid g) = 0;
        virtual bool TypeRepresentsComType_def149588555fd9c(System::Type* type) = 0;
        virtual bool TypeRequiresRegistration_f80e9ffb5f2fed68(System::Type* type) = 0;
        virtual bool UnregisterAssembly_1073a3de66ae5fb6(System::Reflection::Assembly* assembly) = 0;
        
    };
    
    
    struct MANAGED_API ITypeLibConverter : public virtual System::Object{
        
        virtual System::Object* ConvertAssemblyToTypeLib_390df3378aae48c(System::Reflection::Assembly* assembly, System::String* typeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink* notifySink) = 0;
        virtual System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly_5e8aed5d722abc3e(System::Object* typeLib, System::String* asmFileName, int32_t flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, bool unsafeInterfaces) = 0;
        virtual System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly_30894f5fe1326176(System::Object* typeLib, System::String* asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, System::String* asmNamespace, System::Version* asmVersion) = 0;
        virtual bool GetPrimaryInteropAssembly_2c8039286792eafc(System::Guid g, int32_t major, int32_t minor, int32_t lcid, System::String* asmName, System::String* asmCodeBase) = 0;
        
    };
    
    
    struct MANAGED_API ITypeLibExporterNameProvider : public virtual System::Object{
        
        virtual cli::array<System::String*>* GetNames_626628529642a57c() = 0;
        
    };
    
    
    struct MANAGED_API ITypeLibExporterNotifySink : public virtual System::Object{
        
        virtual void ReportEvent_81de006272f464f0(ExporterEventKind eventKind, int32_t eventCode, System::String* eventMsg) = 0;
        virtual System::Object* ResolveRef_82de3b9e64e5a7a8(System::Reflection::Assembly* assembly) = 0;
        
    };
    
    
    struct MANAGED_API ITypeLibImporterNotifySink : public virtual System::Object{
        
        virtual void ReportEvent_7d685b4ad4e92001(ImporterEventKind eventKind, int32_t eventCode, System::String* eventMsg) = 0;
        virtual System::Reflection::Assembly* ResolveRef_8633a343113e49e1(System::Object* typeLib) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIBindCtx : public virtual System::Object{
        
        virtual void RegisterObjectBound_bde08e07acebb060(System::Object* punk) = 0;
        virtual void RevokeObjectBound_ff5433094626fc2f(System::Object* punk) = 0;
        virtual void ReleaseBoundObjects_d6cbcb2a1e82c227() = 0;
        virtual void SetBindOptions_6801e08bd7ae28a9(BIND_OPTS pbindopts) = 0;
        virtual void GetBindOptions_1ed646d02a3325ea(BIND_OPTS pbindopts) = 0;
        virtual void GetRunningObjectTable_63a3166c3cd6d52c(UCOMIRunningObjectTable* pprot) = 0;
        virtual void RegisterObjectParam_4512bf5d9575b001(System::String* pszKey, System::Object* punk) = 0;
        virtual void GetObjectParam_7d87d8f0aad974e2(System::String* pszKey, System::Object* ppunk) = 0;
        virtual void EnumObjectParam_b14634690d09907(UCOMIEnumString* ppenum) = 0;
        virtual void RevokeObjectParam_a174b352c3d78b88(System::String* pszKey) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIConnectionPoint : public virtual System::Object{
        
        virtual void GetConnectionInterface_10ae49c12c18d783(System::Guid pIID) = 0;
        virtual void GetConnectionPointContainer_6fa567f015c679fd(UCOMIConnectionPointContainer* ppCPC) = 0;
        virtual void Advise_597e2d059a781ca7(System::Object* pUnkSink, int32_t pdwCookie) = 0;
        virtual void Unadvise_46763dc9ded6829(int32_t dwCookie) = 0;
        virtual void EnumConnections_3851328c275e6a06(UCOMIEnumConnections* ppEnum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIConnectionPointContainer : public virtual System::Object{
        
        virtual void EnumConnectionPoints_97f57ecc2db6456c(UCOMIEnumConnectionPoints* ppEnum) = 0;
        virtual void FindConnectionPoint_2c858534d401e03(System::Guid riid, UCOMIConnectionPoint* ppCP) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIEnumConnectionPoints : public virtual System::Object{
        
        virtual int32_t Next_e275804b3ef9663d(int32_t celt, cli::array<UCOMIConnectionPoint*>* rgelt, int32_t pceltFetched) = 0;
        virtual int32_t Skip_218c8ef1860fa302(int32_t celt) = 0;
        virtual int32_t Reset_57150d824ca77713() = 0;
        virtual void Clone_a2f4212c69bc6a55(UCOMIEnumConnectionPoints* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIEnumConnections : public virtual System::Object{
        
        virtual int32_t Next_e4ea95ec7882409d(int32_t celt, cli::array<CONNECTDATA>* rgelt, int32_t pceltFetched) = 0;
        virtual int32_t Skip_5e315dfe7da51fd7(int32_t celt) = 0;
        virtual void Reset_254203ee48b66ab1() = 0;
        virtual void Clone_f705854487f2be1(UCOMIEnumConnections* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIEnumMoniker : public virtual System::Object{
        
        virtual int32_t Next_b64643c78d801f25(int32_t celt, cli::array<UCOMIMoniker*>* rgelt, int32_t pceltFetched) = 0;
        virtual int32_t Skip_1732693303caf386(int32_t celt) = 0;
        virtual int32_t Reset_1777d310de6e9207() = 0;
        virtual void Clone_6727da91f25ff6ce(UCOMIEnumMoniker* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIEnumString : public virtual System::Object{
        
        virtual int32_t Next_226f71645cffd0a(int32_t celt, cli::array<System::String*>* rgelt, int32_t pceltFetched) = 0;
        virtual int32_t Skip_f3464e7a7793a303(int32_t celt) = 0;
        virtual int32_t Reset_c152ab47b9095c68() = 0;
        virtual void Clone_3edcf2c3501487b4(UCOMIEnumString* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIEnumVARIANT : public virtual System::Object{
        
        virtual int32_t Next_43a644c315e68aa4(int32_t celt, int32_t rgvar, int32_t pceltFetched) = 0;
        virtual int32_t Skip_ec07739446e4ea97(int32_t celt) = 0;
        virtual int32_t Reset_5c45a73a71e04610() = 0;
        virtual void Clone_4209377c505a02ec(int32_t ppenum) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIMoniker : public virtual System::Object{
        
        virtual void GetClassID_fd3c7770b4fdb1ba(System::Guid pClassID) = 0;
        virtual int32_t IsDirty_2580d0426d9b8027() = 0;
        virtual void Load_50981673923c6fed(UCOMIStream* pStm) = 0;
        virtual void Save_65b4fcc5fc3ea23a(UCOMIStream* pStm, bool fClearDirty) = 0;
        virtual void GetSizeMax_5089ac043445d613(int64_t pcbSize) = 0;
        virtual void BindToObject_f78ddf03447a909(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, System::Guid riidResult, System::Object* ppvResult) = 0;
        virtual void BindToStorage_2f3d0b8188f3e39d(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, System::Guid riid, System::Object* ppvObj) = 0;
        virtual void Reduce_e1a42376b0eb838e(UCOMIBindCtx* pbc, int32_t dwReduceHowFar, UCOMIMoniker* ppmkToLeft, UCOMIMoniker* ppmkReduced) = 0;
        virtual void ComposeWith_8e121ffbbf8ccf55(UCOMIMoniker* pmkRight, bool fOnlyIfNotGeneric, UCOMIMoniker* ppmkComposite) = 0;
        virtual void Enum_bbd24ffe5c94f462(bool fForward, UCOMIEnumMoniker* ppenumMoniker) = 0;
        virtual void IsEqual_5e2e4079794be70c(UCOMIMoniker* pmkOtherMoniker) = 0;
        virtual void Hash_f12a40d567c4c5d8(int32_t pdwHash) = 0;
        virtual void IsRunning_23e65429d1692780(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, UCOMIMoniker* pmkNewlyRunning) = 0;
        virtual void GetTimeOfLastChange_b2091aba15a6676b(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, FILETIME pFileTime) = 0;
        virtual void Inverse_1c1759324ecb24a6(UCOMIMoniker* ppmk) = 0;
        virtual void CommonPrefixWith_f52605f01d2f42d1(UCOMIMoniker* pmkOther, UCOMIMoniker* ppmkPrefix) = 0;
        virtual void RelativePathTo_c0c2c0044ed7a86f(UCOMIMoniker* pmkOther, UCOMIMoniker* ppmkRelPath) = 0;
        virtual void GetDisplayName_bae3d84c08bd4693(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, System::String* ppszDisplayName) = 0;
        virtual void ParseDisplayName_b8f34b5dbbe7bc67(UCOMIBindCtx* pbc, UCOMIMoniker* pmkToLeft, System::String* pszDisplayName, int32_t pchEaten, UCOMIMoniker* ppmkOut) = 0;
        virtual void IsSystemMoniker_9fc056d185926195(int32_t pdwMksys) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIPersistFile : public virtual System::Object{
        
        virtual void GetClassID_b0990b7c73234b4d(System::Guid pClassID) = 0;
        virtual int32_t IsDirty_f2bc1e33937099d0() = 0;
        virtual void Load_3c1be9f3c5bc0d46(System::String* pszFileName, int32_t dwMode) = 0;
        virtual void Save_e0aa9020291b4460(System::String* pszFileName, bool fRemember) = 0;
        virtual void SaveCompleted_18d91d6d1b40991d(System::String* pszFileName) = 0;
        virtual void GetCurFile_3ba3d8a233cd3770(System::String* ppszFileName) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIRunningObjectTable : public virtual System::Object{
        
        virtual void Register_262fee9a1bf35df7(int32_t grfFlags, System::Object* punkObject, UCOMIMoniker* pmkObjectName, int32_t pdwRegister) = 0;
        virtual void Revoke_7eb1c2d568cadda9(int32_t dwRegister) = 0;
        virtual void IsRunning_25d46a44e30da683(UCOMIMoniker* pmkObjectName) = 0;
        virtual void GetObject_35a729da6b09441e(UCOMIMoniker* pmkObjectName, System::Object* ppunkObject) = 0;
        virtual void NoteChangeTime_d97713f81949d2c9(int32_t dwRegister, FILETIME pfiletime) = 0;
        virtual void GetTimeOfLastChange_2be59d8781809a60(UCOMIMoniker* pmkObjectName, FILETIME pfiletime) = 0;
        virtual void EnumRunning_af222f15f56b319e(UCOMIEnumMoniker* ppenumMoniker) = 0;
        
    };
    
    
    struct MANAGED_API UCOMIStream : public virtual System::Object{
        
        virtual void Read_bae181d25a3e46d3(cli::array<unsigned char>* pv, int32_t cb, void* pcbRead) = 0;
        virtual void Write_97ab44dcbbc6d053(cli::array<unsigned char>* pv, int32_t cb, void* pcbWritten) = 0;
        virtual void Seek_673dde08599c24c0(int64_t dlibMove, int32_t dwOrigin, void* plibNewPosition) = 0;
        virtual void SetSize_205725c1f748bf52(int64_t libNewSize) = 0;
        virtual void CopyTo_d40473b7b66201ce(UCOMIStream* pstm, int64_t cb, void* pcbRead, void* pcbWritten) = 0;
        virtual void Commit_480608adbbce9c1d(int32_t grfCommitFlags) = 0;
        virtual void Revert_f380fa7073dd807f() = 0;
        virtual void LockRegion_a7ee4dd810df7ca2(int64_t libOffset, int64_t cb, int32_t dwLockType) = 0;
        virtual void UnlockRegion_5e05ed061378f6f4(int64_t libOffset, int64_t cb, int32_t dwLockType) = 0;
        virtual void Stat_e3146f222b89407e(STATSTG pstatstg, int32_t grfStatFlag) = 0;
        virtual void Clone_ef8ded233592b8b3(UCOMIStream* ppstm) = 0;
        
    };
    
    
    struct MANAGED_API UCOMITypeComp : public virtual System::Object{
        
        virtual void Bind_8b6a4677d6738a25(System::String* szName, int32_t lHashVal, int16_t wFlags, UCOMITypeInfo* ppTInfo, DESCKIND pDescKind, BINDPTR pBindPtr) = 0;
        virtual void BindType_abe27d89afdbf50b(System::String* szName, int32_t lHashVal, UCOMITypeInfo* ppTInfo, UCOMITypeComp* ppTComp) = 0;
        
    };
    
    
    struct MANAGED_API UCOMITypeInfo : public virtual System::Object{
        
        virtual void GetTypeAttr_514acab4bbd245ab(void* ppTypeAttr) = 0;
        virtual void GetTypeComp_e1a3dbf7cd32e76a(UCOMITypeComp* ppTComp) = 0;
        virtual void GetFuncDesc_a5d0a0c1264d88a1(int32_t index, void* ppFuncDesc) = 0;
        virtual void GetVarDesc_63c4939ed8b07ae7(int32_t index, void* ppVarDesc) = 0;
        virtual void GetNames_47c1f68eb2c060f6(int32_t memid, cli::array<System::String*>* rgBstrNames, int32_t cMaxNames, int32_t pcNames) = 0;
        virtual void GetRefTypeOfImplType_c8e79070627de010(int32_t index, int32_t href) = 0;
        virtual void GetImplTypeFlags_491c272eef9a4a4a(int32_t index, int32_t pImplTypeFlags) = 0;
        virtual void GetIDsOfNames_acc672acc7b4320b(cli::array<System::String*>* rgszNames, int32_t cNames, cli::array<int32_t>* pMemId) = 0;
        virtual void Invoke_d52df2de8aa2422e(System::Object* pvInstance, int32_t memid, int16_t wFlags, DISPPARAMS pDispParams, System::Object* pVarResult, EXCEPINFO pExcepInfo, int32_t puArgErr) = 0;
        virtual void GetDocumentation_8d0b1dbf33e349c2(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) = 0;
        virtual void GetDllEntry_3b01c3cba602c5d(int32_t memid, INVOKEKIND invKind, System::String* pBstrDllName, System::String* pBstrName, int16_t pwOrdinal) = 0;
        virtual void GetRefTypeInfo_6925ed5fbc5cd765(int32_t hRef, UCOMITypeInfo* ppTI) = 0;
        virtual void AddressOfMember_720a455372d08606(int32_t memid, INVOKEKIND invKind, void* ppv) = 0;
        virtual void CreateInstance_fab5b4570801d273(System::Object* pUnkOuter, System::Guid riid, System::Object* ppvObj) = 0;
        virtual void GetMops_29c3657afb8b1123(int32_t memid, System::String* pBstrMops) = 0;
        virtual void GetContainingTypeLib_1f6e23bc091a956d(UCOMITypeLib* ppTLB, int32_t pIndex) = 0;
        virtual void ReleaseTypeAttr_d50a37b29fb6e22e(void* pTypeAttr) = 0;
        virtual void ReleaseFuncDesc_6bed94cea44ed6b4(void* pFuncDesc) = 0;
        virtual void ReleaseVarDesc_386d9942b62622a4(void* pVarDesc) = 0;
        
    };
    
    
    struct MANAGED_API UCOMITypeLib : public virtual System::Object{
        
        virtual int32_t GetTypeInfoCount_4052a54580bf2229() = 0;
        virtual void GetTypeInfo_766b982fff2becb5(int32_t index, UCOMITypeInfo* ppTI) = 0;
        virtual void GetTypeInfoType_f4c2daa0d62e4bcc(int32_t index, TYPEKIND pTKind) = 0;
        virtual void GetTypeInfoOfGuid_44b9e27aecbc14ba(System::Guid guid, UCOMITypeInfo* ppTInfo) = 0;
        virtual void GetLibAttr_95dc2843778a130c(void* ppTLibAttr) = 0;
        virtual void GetTypeComp_5693a28e87554fe0(UCOMITypeComp* ppTComp) = 0;
        virtual void GetDocumentation_ace2c1e9fe5b404a(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) = 0;
        virtual bool IsName_e6213b3fcc6bea3b(System::String* szNameBuf, int32_t lHashVal) = 0;
        virtual void FindName_2b434f738970845f(System::String* szNameBuf, int32_t lHashVal, cli::array<UCOMITypeInfo*>* ppTInfo, cli::array<int32_t>* rgMemId, int16_t pcFound) = 0;
        virtual void ReleaseTLibAttr_1a32ef2a9e3b9b9(void* pTLibAttr) = 0;
        
    };
    
    
    struct MANAGED_API _Activator : public virtual System::Object{
        
        virtual void GetIDsOfNames_48d015a76eb21be9(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_bd361ada0936d12d(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_d5a4067d5ef51f60(uint32_t pcTInfo) = 0;
        virtual void Invoke_d0a599bfce5b27ab(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _Assembly : public virtual System::Object{
        
        virtual System::String* ToString_3f4baa3ff40b0198() = 0;
        virtual bool Equals_56ec287b8d40063b(System::Object* other) = 0;
        virtual int32_t GetHashCode_20a08aead0d6820a() = 0;
        virtual System::Type* GetType_c52017a01d9d8f63() = 0;
        virtual System::Reflection::AssemblyName* GetName_62e3f693cd2ffb23() = 0;
        virtual System::Reflection::AssemblyName* GetName_7ef5b4b80c448759(bool copiedName) = 0;
        virtual System::Type* GetType_7162ad856792a116(System::String* name) = 0;
        virtual System::Type* GetType_d55779600806b0d2(System::String* name, bool throwOnError) = 0;
        virtual cli::array<System::Type*>* GetExportedTypes_ee0adeac46d6ab34() = 0;
        virtual cli::array<System::Type*>* GetTypes_ab49a096d38726a7() = 0;
        virtual System::IO::Stream* GetManifestResourceStream_20b4219e40c67fdc(System::Type* type, System::String* name) = 0;
        virtual System::IO::Stream* GetManifestResourceStream_c4c4dd7ea9b411f6(System::String* name) = 0;
        virtual System::IO::FileStream* GetFile_6615c487c2ac205(System::String* name) = 0;
        virtual cli::array<System::IO::FileStream*>* GetFiles_6c517f2273715467() = 0;
        virtual cli::array<System::IO::FileStream*>* GetFiles_83c5197d3be9ba99(bool getResourceModules) = 0;
        virtual cli::array<System::String*>* GetManifestResourceNames_a76da541e39a6687() = 0;
        virtual System::Reflection::ManifestResourceInfo* GetManifestResourceInfo_bcc15dc0035eec0a(System::String* resourceName) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_5ff69fa11191e1b5(System::Type* attributeType, bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_24af6ad180c3735(bool inherit) = 0;
        virtual bool IsDefined_8c9afbc5cd24386a(System::Type* attributeType, bool inherit) = 0;
        virtual void GetObjectData_ae6d7ff8b3644797(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) = 0;
        virtual System::Type* GetType_4f7329f347090d49(System::String* name, bool throwOnError, bool ignoreCase) = 0;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_ba2feb006a3fcaa4(System::Globalization::CultureInfo* culture) = 0;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_f069f89f4969cda7(System::Globalization::CultureInfo* culture, System::Version* version) = 0;
        virtual System::Reflection::Module* LoadModule_f73be9448f7656b4(System::String* moduleName, cli::array<unsigned char>* rawModule) = 0;
        virtual System::Reflection::Module* LoadModule_6024c0019defdb86(System::String* moduleName, cli::array<unsigned char>* rawModule, cli::array<unsigned char>* rawSymbolStore) = 0;
        virtual System::Object* CreateInstance_2b8fb34696040934(System::String* typeName) = 0;
        virtual System::Object* CreateInstance_9c79205ac6f0875a(System::String* typeName, bool ignoreCase) = 0;
        virtual System::Object* CreateInstance_86d37a2e814be153(System::String* typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* args, System::Globalization::CultureInfo* culture, cli::array<System::Object*>* activationAttributes) = 0;
        virtual cli::array<System::Reflection::Module*>* GetLoadedModules_7e45bd270ba0508e() = 0;
        virtual cli::array<System::Reflection::Module*>* GetLoadedModules_f8ba3198d02efd9f(bool getResourceModules) = 0;
        virtual cli::array<System::Reflection::Module*>* GetModules_6cc1dd291a7a622() = 0;
        virtual cli::array<System::Reflection::Module*>* GetModules_70286f2f0a1cfacc(bool getResourceModules) = 0;
        virtual System::Reflection::Module* GetModule_a7906997a13617a7(System::String* name) = 0;
        virtual cli::array<System::Reflection::AssemblyName*>* GetReferencedAssemblies_1e24baa3c5838f22() = 0;
        virtual System::String* get_CodeBase_dc45d01428f64731() = 0;
        virtual System::String* get_EscapedCodeBase_14607f27139752e7() = 0;
        virtual System::String* get_FullName_f0e20ee2bbdaa1a9() = 0;
        virtual System::Reflection::MethodInfo* get_EntryPoint_2f6c2f38d51e8a4a() = 0;
        virtual System::String* get_Location_b64a656d361bdd61() = 0;
        virtual System::Security::Policy::Evidence* get_Evidence_d7f857b710104664() = 0;
        virtual bool get_GlobalAssemblyCache_dace09e2d2af9909() = 0;
        virtual void add_ModuleResolve_d5a251350234170b(System::Reflection::ModuleResolveEventHandler* value) = 0;
        virtual void remove_ModuleResolve_e6556aa4bfb257ed(System::Reflection::ModuleResolveEventHandler* value) = 0;
        
    };
    
    
    struct MANAGED_API _AssemblyBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_716ecff340e1bcb1(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_8f3e600b1a4df338(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_b1477651be42f933(uint32_t pcTInfo) = 0;
        virtual void Invoke_6b5294c027a9dacb(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _AssemblyName : public virtual System::Object{
        
        virtual void GetIDsOfNames_95a76c89ebfee4d(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_9ad68d87655154c4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_d37b4bcf885883cd(uint32_t pcTInfo) = 0;
        virtual void Invoke_fc10cebd8e601a2b(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _Attribute : public virtual System::Object{
        
        virtual void GetIDsOfNames_9cccc850c227cee4(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_21411d803e85bbb9(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_b9a92feca41bb40d(uint32_t pcTInfo) = 0;
        virtual void Invoke_3474b6c87defe10(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _ConstructorBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_a94971402772136c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_daa5d56ccfb3f499(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_2bceeff5d59a252e(uint32_t pcTInfo) = 0;
        virtual void Invoke_9c9bca8549c0c755(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _ConstructorInfo : public virtual System::Object{
        
        virtual bool Equals_67213e4a572bc930(System::Object* other) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_909f5c802320f2c6(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_ddf21a2a0e530872(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_528f3df200ed9cf9() = 0;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_f9d0009b54342b06() = 0;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_315d4cfcd47e1490() = 0;
        virtual void GetIDsOfNames_c6568bbd8217c026(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_6480748fd8ab715e(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_687ea54167dc994f(uint32_t pcTInfo) = 0;
        virtual void Invoke_e82f3d71479774ad(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* GetType_2f67a2a342d63d5f() = 0;
        virtual System::Object* Invoke_5_e3382599d6c7cceb(cli::array<System::Object*>* parameters) = 0;
        virtual System::Object* Invoke_3_e668ab16fb388f95(System::Object* obj, cli::array<System::Object*>* parameters) = 0;
        virtual System::Object* Invoke_4_5502ea7285269681(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        virtual System::Object* Invoke_2_14438888c13b8089(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        virtual bool IsDefined_d9b1dc794b1ab365(System::Type* attributeType, bool inherit) = 0;
        virtual System::String* ToString_a95e215a60192892() = 0;
        virtual System::Reflection::MethodAttributes get_Attributes_add5cbc0ca209cb4() = 0;
        virtual System::Reflection::CallingConventions get_CallingConvention_a50132e872765544() = 0;
        virtual System::Type* get_DeclaringType_8b35019cb974f3b1() = 0;
        virtual bool get_IsAbstract_9d2bdd8154847129() = 0;
        virtual bool get_IsAssembly_395fd16440c057f5() = 0;
        virtual bool get_IsConstructor_1807a2d9ec103a6d() = 0;
        virtual bool get_IsFamily_7e3a06dd49ba1d52() = 0;
        virtual bool get_IsFamilyAndAssembly_89cd687b074d26c4() = 0;
        virtual bool get_IsFamilyOrAssembly_90f959a01432cea6() = 0;
        virtual bool get_IsFinal_8c6c57491692dd9a() = 0;
        virtual bool get_IsHideBySig_be7fcdcfe8827c6e() = 0;
        virtual bool get_IsPrivate_8eacdf2fa9e4b9c5() = 0;
        virtual bool get_IsPublic_32e3a6d67086bb9d() = 0;
        virtual bool get_IsSpecialName_e3c4ca4e8c7625() = 0;
        virtual bool get_IsStatic_129345b6fd10cac8() = 0;
        virtual bool get_IsVirtual_dd87e32e57ef90b8() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_70d1fdc4531f4ea4() = 0;
        virtual System::RuntimeMethodHandle get_MethodHandle_b017ef7fbcec2e84() = 0;
        virtual System::String* get_Name_22e38b3f8832b162() = 0;
        virtual System::Type* get_ReflectedType_126e247c32a10788() = 0;
        
    };
    
    
    struct MANAGED_API _CustomAttributeBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_c21c44540ffdbb5f(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_2c3ebc106b1684a4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_4a41fb8f79c152d6(uint32_t pcTInfo) = 0;
        virtual void Invoke_25a09bf1f54f831c(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _EnumBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_c589a61053617268(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_4569c5bef9234cda(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_6ad7237d71a849b0(uint32_t pcTInfo) = 0;
        virtual void Invoke_bb691d3276b024bf(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _EventBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_3050f219d9ee6281(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_c88e6f1eebfb78c2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_f810c10738bdafb7(uint32_t pcTInfo) = 0;
        virtual void Invoke_8b71d77ae75751d1(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _EventInfo : public virtual System::Object{
        
        virtual void AddEventHandler_43d8c94497c03223(System::Object* target, System::Delegate* handler) = 0;
        virtual bool Equals_74589a42728bf90e(System::Object* other) = 0;
        virtual System::Reflection::MethodInfo* GetAddMethod_b8ad5c9a0997b299() = 0;
        virtual System::Reflection::MethodInfo* GetAddMethod_603de97606b6f9ba(bool nonPublic) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_fa63d0ff32ae5fc8(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_d3fde144b6b8ae22(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_b17eaacfd022126a() = 0;
        virtual void GetIDsOfNames_23802a60f491840e(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_f3ce2c87f102b967(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_fa070d4fce2714f5(uint32_t pcTInfo) = 0;
        virtual void Invoke_8ea6ee7f8b34ed83(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Reflection::MethodInfo* GetRaiseMethod_b646ee39c81574e3() = 0;
        virtual System::Reflection::MethodInfo* GetRaiseMethod_6b206823316c0c3(bool nonPublic) = 0;
        virtual System::Reflection::MethodInfo* GetRemoveMethod_5c784be17c5066d3() = 0;
        virtual System::Reflection::MethodInfo* GetRemoveMethod_da0b684fb4d4c4a0(bool nonPublic) = 0;
        virtual System::Type* GetType_5dcc5daa0b76d62() = 0;
        virtual bool IsDefined_7f2e7c95c1a2697(System::Type* attributeType, bool inherit) = 0;
        virtual void RemoveEventHandler_20b46eba63f124c5(System::Object* target, System::Delegate* handler) = 0;
        virtual System::String* ToString_7bb73a9f3918b46f() = 0;
        virtual System::Reflection::EventAttributes get_Attributes_91126e6e9bda9278() = 0;
        virtual System::Type* get_DeclaringType_b190790d6bb5c6f8() = 0;
        virtual System::Type* get_EventHandlerType_394adbc6331a2c50() = 0;
        virtual bool get_IsMulticast_f3825bb24df5079f() = 0;
        virtual bool get_IsSpecialName_7600c5d3a63b1be9() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_7f92432e8d28a37() = 0;
        virtual System::String* get_Name_34bcf56a8cc37ed8() = 0;
        virtual System::Type* get_ReflectedType_324d464fdf876c3() = 0;
        
    };
    
    
    struct MANAGED_API _Exception : public virtual System::Object{
        
        virtual bool Equals_8745d1c324afa9f2(System::Object* obj) = 0;
        virtual System::Exception* GetBaseException_253c3eebfe2fed4a() = 0;
        virtual int32_t GetHashCode_3274e1baccc4f8d1() = 0;
        virtual void GetObjectData_cacfaf455dbef0a5(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) = 0;
        virtual System::Type* GetType_74b1e7e5e0897ded() = 0;
        virtual System::String* ToString_118e365de8f6791a() = 0;
        virtual System::String* get_HelpLink_c746e07ff3b23b1d() = 0;
        virtual System::String* set_HelpLink_c6d532780c9a4ffa(System::String* value) = 0;
        virtual System::Exception* get_InnerException_fee5e87d6404fbbb() = 0;
        virtual System::String* get_Message_236e49c6b265ab9b() = 0;
        virtual System::String* get_Source_1ad0ababbacddeca() = 0;
        virtual System::String* set_Source_593b7183e562d37d(System::String* value) = 0;
        virtual System::String* get_StackTrace_eedb0499938735b7() = 0;
        virtual System::Reflection::MethodBase* get_TargetSite_d5a44210796e0db() = 0;
        
    };
    
    
    struct MANAGED_API _FieldBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_4cc89c7b2b2c1221(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_9a7463b590b674bf(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_a35a410b1df51e31(uint32_t pcTInfo) = 0;
        virtual void Invoke_b525b37e6ef7a0c4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _FieldInfo : public virtual System::Object{
        
        virtual bool Equals_9460c999c7a56206(System::Object* other) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_575e5069ebfca34f(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_5acdc1cb26d1261f(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_5a649ad5c5c43cca() = 0;
        virtual System::Type* GetType_3c93304fd89a812b() = 0;
        virtual void GetIDsOfNames_bc4e4af5039b7c20(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_8134a221284f4ba5(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_81bba0bef18b5824(uint32_t pcTInfo) = 0;
        virtual void Invoke_ef3e075c01706822(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Object* GetValue_95ea295e93d9c205(System::Object* obj) = 0;
        virtual System::Object* GetValueDirect_667c004c43af2df7(System::TypedReference obj) = 0;
        virtual bool IsDefined_d05f61558bec5ed2(System::Type* attributeType, bool inherit) = 0;
        virtual void SetValue_bff43279853da815(System::Object* obj, System::Object* value) = 0;
        virtual void SetValue_14cd561b90357660(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) = 0;
        virtual void SetValueDirect_a9c4f4eec2bc7475(System::TypedReference obj, System::Object* value) = 0;
        virtual System::String* ToString_f22c3c4f8be6702d() = 0;
        virtual System::Reflection::FieldAttributes get_Attributes_adffe146267d1214() = 0;
        virtual System::Type* get_DeclaringType_c4f8b59fa02e7a62() = 0;
        virtual System::RuntimeFieldHandle get_FieldHandle_1992b90454f55bf5() = 0;
        virtual System::Type* get_FieldType_95a03f2dcf5511a9() = 0;
        virtual bool get_IsAssembly_7b632c06d77bf7f9() = 0;
        virtual bool get_IsFamily_7a1a19e876496230() = 0;
        virtual bool get_IsFamilyAndAssembly_863e9b0f875c7704() = 0;
        virtual bool get_IsFamilyOrAssembly_19cc6861b480a8ed() = 0;
        virtual bool get_IsInitOnly_92c94432c489bd06() = 0;
        virtual bool get_IsLiteral_28466bffcbcd522() = 0;
        virtual bool get_IsNotSerialized_24ecbaffa59651c8() = 0;
        virtual bool get_IsPinvokeImpl_db85c58b7a196918() = 0;
        virtual bool get_IsPrivate_eafc38c3d2a23aaa() = 0;
        virtual bool get_IsPublic_de3389d9f6383193() = 0;
        virtual bool get_IsSpecialName_eaaed4f25dea5d2f() = 0;
        virtual bool get_IsStatic_a14ccf83b632c9b4() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_dc52cdbb2693a23a() = 0;
        virtual System::String* get_Name_1e5ba9be5de44c4a() = 0;
        virtual System::Type* get_ReflectedType_127893312bd5a2c0() = 0;
        
    };
    
    
    struct MANAGED_API _ILGenerator : public virtual System::Object{
        
        virtual void GetIDsOfNames_2ab91765d99b9239(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_6d549fcfb1b28dbc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_2a10ec9331579a6b(uint32_t pcTInfo) = 0;
        virtual void Invoke_94872a016b6b5770(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _LocalBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_d2e6179bbbf6f7d1(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_735b3565b064b15(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_9a28c2b9adf9b672(uint32_t pcTInfo) = 0;
        virtual void Invoke_a07e8a441e6d5bd0(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _MemberInfo : public virtual System::Object{
        
        virtual bool Equals_e3e2ad51cac823cf(System::Object* other) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_1e9c83be1d923116(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_3f972bb24bf44f4e(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_aec47076d35c126c() = 0;
        virtual System::Type* GetType_291272aa21703927() = 0;
        virtual bool IsDefined_9a29baf351241ea8(System::Type* attributeType, bool inherit) = 0;
        virtual System::String* ToString_bbdca41cc47e5d27() = 0;
        virtual void GetIDsOfNames_728279314ddde699(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_c9dc23100dd864c7(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_74162cfe932123cb(uint32_t pcTInfo) = 0;
        virtual void Invoke_dc29eb2afa4cd141(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* get_DeclaringType_45ac98b183897971() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_fb536638b8ed56c7() = 0;
        virtual System::String* get_Name_70a7d5287f19ebf8() = 0;
        virtual System::Type* get_ReflectedType_b357cb7ff6b67a77() = 0;
        
    };
    
    
    struct MANAGED_API _MethodBase : public virtual System::Object{
        
        virtual bool Equals_40cb186ce0df4494(System::Object* other) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_9acb43cc08958c3c(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_bcf9f5a3895b278a(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_500c457e110796c() = 0;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_814f2d9055c5e3f0() = 0;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_ab7269a35b115074() = 0;
        virtual void GetIDsOfNames_2a1bcdee1bef14ae(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_e95f8864a8b4dee1(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_b94bcd4bce9387aa(uint32_t pcTInfo) = 0;
        virtual void Invoke_f90d995426760012(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* GetType_75d3f421672cd6ae() = 0;
        virtual System::Object* Invoke_53b572f36e795bf7(System::Object* obj, cli::array<System::Object*>* parameters) = 0;
        virtual System::Object* Invoke_26dd0cb2b98af8a7(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        virtual bool IsDefined_546d947518082fbd(System::Type* attributeType, bool inherit) = 0;
        virtual System::String* ToString_21503bff1b89098b() = 0;
        virtual System::Reflection::MethodAttributes get_Attributes_834ca72eefacb0bd() = 0;
        virtual System::Reflection::CallingConventions get_CallingConvention_1674d1fe4ad1e34e() = 0;
        virtual System::Type* get_DeclaringType_b92021fbacc99856() = 0;
        virtual bool get_IsAbstract_de0ff4f1d2087910() = 0;
        virtual bool get_IsAssembly_f7d9c32268907cdc() = 0;
        virtual bool get_IsConstructor_6eb1b3801f865555() = 0;
        virtual bool get_IsFamily_fcf1926f66141f44() = 0;
        virtual bool get_IsFamilyAndAssembly_34671eb788f57d0b() = 0;
        virtual bool get_IsFamilyOrAssembly_915fd33863bef97e() = 0;
        virtual bool get_IsFinal_26ad179ceb0609b5() = 0;
        virtual bool get_IsHideBySig_c27a18b0abb31987() = 0;
        virtual bool get_IsPrivate_177db4f7934a595a() = 0;
        virtual bool get_IsPublic_1c6a14b9c1ddb3f5() = 0;
        virtual bool get_IsSpecialName_e092294531426238() = 0;
        virtual bool get_IsStatic_280bee21a683e29c() = 0;
        virtual bool get_IsVirtual_7120132dcf43b827() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_871696f84e650fc6() = 0;
        virtual System::RuntimeMethodHandle get_MethodHandle_67a441d308d5bdc9() = 0;
        virtual System::String* get_Name_2ca1b8185aa6eb66() = 0;
        virtual System::Type* get_ReflectedType_80c44a42bf1581d3() = 0;
        
    };
    
    
    struct MANAGED_API _MethodBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_c81e466ceb37a395(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_29cbebb5e5c35fed(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_f9f8d039bab656aa(uint32_t pcTInfo) = 0;
        virtual void Invoke_2c80ebce31979f5d(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _MethodInfo : public virtual System::Object{
        
        virtual bool Equals_2e806c000b792995(System::Object* other) = 0;
        virtual System::Reflection::MethodInfo* GetBaseDefinition_af2e03a6fca2b5f5() = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_c810ec1500ff935b(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_74e25ee727105f87(System::Type* attributeType, bool inherit) = 0;
        virtual int32_t GetHashCode_2ee4600b266274f0() = 0;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_808f7fd1c940f559() = 0;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_8eb86cd704bfbf54() = 0;
        virtual void GetIDsOfNames_fb630358bd563602(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_715dd0bbf360bfdc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_672b699f844b0f79(uint32_t pcTInfo) = 0;
        virtual void Invoke_61193eeaa05ba815(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* GetType_74742789cd106f3b() = 0;
        virtual System::Object* Invoke_a63db6373340494c(System::Object* obj, cli::array<System::Object*>* parameters) = 0;
        virtual System::Object* Invoke_80c9283e0c4ab089(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        virtual bool IsDefined_d50f51251cd2eb14(System::Type* attributeType, bool inherit) = 0;
        virtual System::String* ToString_344d714047f59070() = 0;
        virtual System::Reflection::MethodAttributes get_Attributes_2f77059d8bc07693() = 0;
        virtual System::Reflection::CallingConventions get_CallingConvention_1d365159f80ff2b() = 0;
        virtual System::Type* get_DeclaringType_7629c4fffe34fb94() = 0;
        virtual bool get_IsAbstract_e474de6aca69fbd1() = 0;
        virtual bool get_IsAssembly_f6f652b6dc8ceb3e() = 0;
        virtual bool get_IsConstructor_41436fb10360f9a7() = 0;
        virtual bool get_IsFamily_2ffd1b4f99fa1412() = 0;
        virtual bool get_IsFamilyAndAssembly_7a5b9089ab64f38b() = 0;
        virtual bool get_IsFamilyOrAssembly_b20b6def57f63d17() = 0;
        virtual bool get_IsFinal_3d88f163015f613d() = 0;
        virtual bool get_IsHideBySig_da9279be9a634726() = 0;
        virtual bool get_IsPrivate_8b2fd624f51dbfcc() = 0;
        virtual bool get_IsPublic_7e6e93fbf4211998() = 0;
        virtual bool get_IsSpecialName_12d4e8400a966832() = 0;
        virtual bool get_IsStatic_c628a54558fdd884() = 0;
        virtual bool get_IsVirtual_4155281c459f2c6b() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_21580ff491280cb() = 0;
        virtual System::RuntimeMethodHandle get_MethodHandle_bdcb739875527a32() = 0;
        virtual System::String* get_Name_ff50b1dd5dfb28f9() = 0;
        virtual System::Type* get_ReflectedType_93898c8dc71eef39() = 0;
        virtual System::Type* get_ReturnType_4452cb3548281551() = 0;
        virtual System::Reflection::ICustomAttributeProvider* get_ReturnTypeCustomAttributes_3d661eb3a8c541b9() = 0;
        
    };
    
    
    struct MANAGED_API _MethodRental : public virtual System::Object{
        
        virtual void GetIDsOfNames_f32788164aaaacff(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_d336c5839cab41d4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_5f816dc6d67e1185(uint32_t pcTInfo) = 0;
        virtual void Invoke_16bf00b9457164c(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _Module : public virtual System::Object{
        
        virtual void GetIDsOfNames_21b152fbff43d289(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_260aa4f867fd6fd5(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_c80374543020238f(uint32_t pcTInfo) = 0;
        virtual void Invoke_686f3a72f7a8e22(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _ModuleBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_b5eeb00633ee180d(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_6b82fa62633497dc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_919dffef8bc20d32(uint32_t pcTInfo) = 0;
        virtual void Invoke_4a627a0727f5913(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _ParameterBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_8d906f6d37441d7c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_dc79acc00c7841a(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_ca9ef6243f77d10e(uint32_t pcTInfo) = 0;
        virtual void Invoke_ee3a08d633f41d32(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _ParameterInfo : public virtual System::Object{
        
        virtual void GetIDsOfNames_4283527bc2e9c90c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_810b7e55fcaab9e9(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_cf26089fea501d0(uint32_t pcTInfo) = 0;
        virtual void Invoke_4b0fe4a4b992b2d2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _PropertyBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_faa2940ec0c854b6(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_7f36c44ea722d64(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_64e3fad5407a69b0(uint32_t pcTInfo) = 0;
        virtual void Invoke_eb1f540198acef11(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _PropertyInfo : public virtual System::Object{
        
        virtual bool Equals_35205ed1d0d24667(System::Object* other) = 0;
        virtual cli::array<System::Reflection::MethodInfo*>* GetAccessors_da9e2ca6e4dd3482() = 0;
        virtual cli::array<System::Reflection::MethodInfo*>* GetAccessors_59a0bfdaedb007c(bool nonPublic) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_eefb51d8f72617fa(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_855d2e1478057365(System::Type* attributeType, bool inherit) = 0;
        virtual System::Reflection::MethodInfo* GetGetMethod_22dbc42ee812754c() = 0;
        virtual System::Reflection::MethodInfo* GetGetMethod_6968d1fbf893caf2(bool nonPublic) = 0;
        virtual int32_t GetHashCode_f63a3941a1dc75bc() = 0;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetIndexParameters_14483f59bc20265() = 0;
        virtual System::Reflection::MethodInfo* GetSetMethod_ab92dfa716a7aa22() = 0;
        virtual System::Reflection::MethodInfo* GetSetMethod_bc66033ddce9efa0(bool nonPublic) = 0;
        virtual void GetIDsOfNames_543d0db39ba3c944(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_a3cbba6cae9ec8b4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_87d5dfef26ae0dd2(uint32_t pcTInfo) = 0;
        virtual void Invoke_2658e83a6cb776b7(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* GetType_adcc73cb09269a4b() = 0;
        virtual System::Object* GetValue_2c0ea8f469169d57(System::Object* obj, cli::array<System::Object*>* index) = 0;
        virtual System::Object* GetValue_5c4287abeb0e7d6e(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) = 0;
        virtual bool IsDefined_e028345db151e511(System::Type* attributeType, bool inherit) = 0;
        virtual void SetValue_42dc5b3a16b3868c(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) = 0;
        virtual void SetValue_6668f5b0d61ae93b(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) = 0;
        virtual System::String* ToString_23ebaa63b8f17cf6() = 0;
        virtual System::Reflection::PropertyAttributes get_Attributes_1bea9714c54419aa() = 0;
        virtual bool get_CanRead_ef8e9b1025a3b21a() = 0;
        virtual bool get_CanWrite_375056fcc54af0b8() = 0;
        virtual System::Type* get_DeclaringType_c6040d00ca0e5f1a() = 0;
        virtual bool get_IsSpecialName_136ed05fe7cb7256() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_f062e4acbf7ce28d() = 0;
        virtual System::String* get_Name_2ec41f95ff7a8b17() = 0;
        virtual System::Type* get_PropertyType_31b54c84f8684bd3() = 0;
        virtual System::Type* get_ReflectedType_c368bf8f01d9ffdc() = 0;
        
    };
    
    
    struct MANAGED_API _SignatureHelper : public virtual System::Object{
        
        virtual void GetIDsOfNames_63d5038940a76397(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_65f52795e9f5dec4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_3492155c34a71e8a(uint32_t pcTInfo) = 0;
        virtual void Invoke_2f7d24d0932ca178(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _Thread : public virtual System::Object{
        
        virtual void GetIDsOfNames_bfbc2a83417e35a7(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_a6b1b13433ae4421(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_6bfe4438aac4352c(uint32_t pcTInfo) = 0;
        virtual void Invoke_961292518f6793ed(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
    
    struct MANAGED_API _Type : public virtual System::Object{
        
        virtual bool Equals_b601c5aff370bd09(System::Object* other) = 0;
        virtual bool Equals_fbde14dc9bfbbb61(System::Type* o) = 0;
        virtual cli::array<System::Type*>* FindInterfaces_cc61f456dced52b8(System::Reflection::TypeFilter* filter, System::Object* filterCriteria) = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* FindMembers_4910effe19de98a7(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter* filter, System::Object* filterCriteria) = 0;
        virtual int32_t GetArrayRank_bde6428644f11785() = 0;
        virtual System::Reflection::ConstructorInfo* GetConstructor_7676b5cd22df9bc5(cli::array<System::Type*>* types) = 0;
        virtual System::Reflection::ConstructorInfo* GetConstructor_615af0546552ac12(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual System::Reflection::ConstructorInfo* GetConstructor_ac50bab303a728a7(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_20b9769ece0e442b() = 0;
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_f24cc6cf9c6f79c6(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_15e7120d7361e983(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_32081d39648cff5f(System::Type* attributeType, bool inherit) = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetDefaultMembers_727bd9381d293316() = 0;
        virtual System::Type* GetElementType_7c511ae38a3cf1dd() = 0;
        virtual System::Reflection::EventInfo* GetEvent_76dff11bf999273b(System::String* name) = 0;
        virtual System::Reflection::EventInfo* GetEvent_f4929934b063c380(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_1787f024dc60b66d() = 0;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_3631c7eff1e31bf4(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Reflection::FieldInfo* GetField_730851a2c91db280(System::String* name) = 0;
        virtual System::Reflection::FieldInfo* GetField_32b52cad7c24495e(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_824511730a8c3391() = 0;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_3b6671910689216f(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual int32_t GetHashCode_4319178217300f32() = 0;
        virtual void GetIDsOfNames_1da4b71924d852c0(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_b4a9bd9efa232f89(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_6b9f06a4fb498bd3(uint32_t pcTInfo) = 0;
        virtual void Invoke_67109d5273366daf(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        virtual System::Type* GetInterface_ac6ba302ad01659f(System::String* name) = 0;
        virtual System::Type* GetInterface_7be137fec4604233(System::String* name, bool ignoreCase) = 0;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_1dcbd2012c18f488(System::Type* interfaceType) = 0;
        virtual cli::array<System::Type*>* GetInterfaces_f4761baf7daf0c63() = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_e42ea39164747c31(System::String* name) = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_aba72a46394724d6(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_26f247b06fc8dab4(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_ceb13fc59a9ba706() = 0;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_e9c5edc4e36bff42(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_ef3f1bc04f29b7c7(System::String* name) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_20d1acffc16ce2dd(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_5f5fb2fe366cd5a1(System::String* name, cli::array<System::Type*>* types) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_10845bf939e924bf(System::String* name, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_4d293e0e4590fe7d(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual System::Reflection::MethodInfo* GetMethod_5f9f14eaeb118d7b(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_58a478b465f48979() = 0;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_96cc2e24fcfb6e62(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Type* GetNestedType_f4393ee24e74e70b(System::String* name) = 0;
        virtual System::Type* GetNestedType_e1baae72ba6bf4ba(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Type*>* GetNestedTypes_d3461c94611a386d() = 0;
        virtual cli::array<System::Type*>* GetNestedTypes_28d6d3c45672aa03(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_524e20c86b55e01b() = 0;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_258aba425d2e86c3(System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_d627a5a0d51dd70b(System::String* name) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_b31c91fe8fcd19f(System::String* name, System::Reflection::BindingFlags bindingAttr) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_62acdac6dfff671d(System::String* name, System::Type* returnType) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_3a45ef4884be27fe(System::String* name, cli::array<System::Type*>* types) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_5051f9f79bcf85eb(System::String* name, System::Type* returnType, cli::array<System::Type*>* types) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_f0ce52c3a74ba259(System::String* name, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual System::Reflection::PropertyInfo* GetProperty_af47392d20071603(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) = 0;
        virtual System::Type* GetType_23d99c756b44b0a3() = 0;
        virtual System::Object* InvokeMember_d2a724320e8ef589(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args) = 0;
        virtual System::Object* InvokeMember_c3a4caa7e37f34b1(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, System::Globalization::CultureInfo* culture) = 0;
        virtual System::Object* InvokeMember_8ebb9e0e6d78ba5a(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) = 0;
        virtual bool IsAssignableFrom_9a1536c9f0047a78(System::Type* c) = 0;
        virtual bool IsDefined_16c540b5a4e1ff66(System::Type* attributeType, bool inherit) = 0;
        virtual bool IsInstanceOfType_8a17c36f331ce12e(System::Object* o) = 0;
        virtual bool IsSubclassOf_875608a6f6bc1b50(System::Type* c) = 0;
        virtual System::String* ToString_7ae6b85e974ee75a() = 0;
        virtual System::Reflection::Assembly* get_Assembly_de424b6590183868() = 0;
        virtual System::String* get_AssemblyQualifiedName_63c3dd8ef06f5e45() = 0;
        virtual System::Reflection::TypeAttributes get_Attributes_bed7bd9dd753da57() = 0;
        virtual System::Type* get_BaseType_b398eaad0c8c79e2() = 0;
        virtual System::Type* get_DeclaringType_57e85ec7caa4a7e9() = 0;
        virtual System::String* get_FullName_773444c2f90eecd() = 0;
        virtual System::Guid get_GUID_4d00162e8efb54a7() = 0;
        virtual bool get_HasElementType_754bebcc1b786422() = 0;
        virtual bool get_IsAbstract_5dcfab57b6ff095() = 0;
        virtual bool get_IsAnsiClass_d7f01d12eb51d710() = 0;
        virtual bool get_IsArray_9a85c8065d1ab324() = 0;
        virtual bool get_IsAutoClass_14b7883b9d76be37() = 0;
        virtual bool get_IsAutoLayout_cd96e8a6fef98d97() = 0;
        virtual bool get_IsByRef_2f4ef2ab1e7d3788() = 0;
        virtual bool get_IsClass_bc4f9c45e087f317() = 0;
        virtual bool get_IsCOMObject_22277b5ad648345f() = 0;
        virtual bool get_IsContextful_1a446b1f672d7424() = 0;
        virtual bool get_IsEnum_59290f0923c47901() = 0;
        virtual bool get_IsExplicitLayout_a0f1b1afb779c5f() = 0;
        virtual bool get_IsImport_79d05e25159073af() = 0;
        virtual bool get_IsInterface_d9be9b69e04cf7d2() = 0;
        virtual bool get_IsLayoutSequential_6068218a76af8d15() = 0;
        virtual bool get_IsMarshalByRef_ebd9c7fa09db17d2() = 0;
        virtual bool get_IsNestedAssembly_38350089c99e6eb4() = 0;
        virtual bool get_IsNestedFamANDAssem_fbb3d63f801f0e26() = 0;
        virtual bool get_IsNestedFamily_94e83bc2facfce0a() = 0;
        virtual bool get_IsNestedFamORAssem_ee3008d87f75f225() = 0;
        virtual bool get_IsNestedPrivate_8ecb6c70205b5ba8() = 0;
        virtual bool get_IsNestedPublic_1fc26cd17482207b() = 0;
        virtual bool get_IsNotPublic_311ea9f86ac6330a() = 0;
        virtual bool get_IsPointer_5a4f6004b270a9d() = 0;
        virtual bool get_IsPrimitive_842be52a04be213c() = 0;
        virtual bool get_IsPublic_dd1336b6f1c99e24() = 0;
        virtual bool get_IsSealed_4ffa7a05948334aa() = 0;
        virtual bool get_IsSerializable_ee155a21678a6b08() = 0;
        virtual bool get_IsSpecialName_9f0da6e67f068528() = 0;
        virtual bool get_IsUnicodeClass_d35ccc782a67e4f4() = 0;
        virtual bool get_IsValueType_ab705a389c7af1d8() = 0;
        virtual System::Reflection::MemberTypes get_MemberType_49298b8bb0d10a74() = 0;
        virtual System::Reflection::Module* get_Module_e878d08348938612() = 0;
        virtual System::String* get_Name_e4f201ea08eb3ef2() = 0;
        virtual System::String* get_Namespace_4a78ab8fbbf66619() = 0;
        virtual System::Type* get_ReflectedType_338a78c0f78949() = 0;
        virtual System::RuntimeTypeHandle get_TypeHandle_a660506a2c0cc3d5() = 0;
        virtual System::Reflection::ConstructorInfo* get_TypeInitializer_1a4653d737922696() = 0;
        virtual System::Type* get_UnderlyingSystemType_c5f7e8bc4888131f() = 0;
        
    };
    
    
    struct MANAGED_API _TypeBuilder : public virtual System::Object{
        
        virtual void GetIDsOfNames_def76ee942c4824f(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) = 0;
        virtual void GetTypeInfo_a55b188a8c4e4ae1(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) = 0;
        virtual void GetTypeInfoCount_bfdd8b57afa1b5e3(uint32_t pcTInfo) = 0;
        virtual void Invoke_6ea95a7f5e37a6db(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) = 0;
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API IBindCtx : public virtual System::Object{
        
        virtual void RegisterObjectBound_c97092f94bc7b246(System::Object* punk) = 0;
        virtual void RevokeObjectBound_c35c8879f7bf814(System::Object* punk) = 0;
        virtual void ReleaseBoundObjects_b01ad1b0eb996847() = 0;
        virtual void SetBindOptions_4c5bb92fec5cb48c(BIND_OPTS2 pbindopts) = 0;
        virtual void GetBindOptions_3719ecdfc787c7b7(BIND_OPTS2 pbindopts) = 0;
        virtual void GetRunningObjectTable_818ceef8f29b9535(IRunningObjectTable* pprot) = 0;
        virtual void RegisterObjectParam_820e4accb721b522(System::String* pszKey, System::Object* punk) = 0;
        virtual void GetObjectParam_96a81f9c97e4dd29(System::String* pszKey, System::Object* ppunk) = 0;
        virtual void EnumObjectParam_924da5f19bed7a86(IEnumString* ppenum) = 0;
        virtual int32_t RevokeObjectParam_61395aa87d501872(System::String* pszKey) = 0;
        
    };
    
    
    struct MANAGED_API IConnectionPoint : public virtual System::Object{
        
        virtual void GetConnectionInterface_3d35f94fa6e13bc6(System::Guid pIID) = 0;
        virtual void GetConnectionPointContainer_d7b73b212fda6bc(IConnectionPointContainer* ppCPC) = 0;
        virtual void Advise_efa6e3957c004e75(System::Object* pUnkSink, int32_t pdwCookie) = 0;
        virtual void Unadvise_3953732d180c50a4(int32_t dwCookie) = 0;
        virtual void EnumConnections_309c48231ef7fddd(IEnumConnections* ppEnum) = 0;
        
    };
    
    
    struct MANAGED_API IConnectionPointContainer : public virtual System::Object{
        
        virtual void EnumConnectionPoints_37eeb92f04d62d(IEnumConnectionPoints* ppEnum) = 0;
        virtual void FindConnectionPoint_1b12d2e5ebaca8ec(System::Guid riid, IConnectionPoint* ppCP) = 0;
        
    };
    
    
    struct MANAGED_API IEnumConnectionPoints : public virtual System::Object{
        
        virtual int32_t Next_9b710a8d24d738a4(int32_t celt, cli::array<IConnectionPoint*>* rgelt, void* pceltFetched) = 0;
        virtual int32_t Skip_45a89a6303eb39da(int32_t celt) = 0;
        virtual void Reset_15aa04c661503768() = 0;
        virtual void Clone_5b3b03e8e9f3bdaf(IEnumConnectionPoints* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API IEnumConnections : public virtual System::Object{
        
        virtual int32_t Next_1e75a16c1984ea74(int32_t celt, cli::array<CONNECTDATA2>* rgelt, void* pceltFetched) = 0;
        virtual int32_t Skip_2631387226cfa3eb(int32_t celt) = 0;
        virtual void Reset_851585a23e74bf0f() = 0;
        virtual void Clone_41da51648251ba9f(IEnumConnections* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API IEnumMoniker : public virtual System::Object{
        
        virtual int32_t Next_ac14a8401e425343(int32_t celt, cli::array<IMoniker*>* rgelt, void* pceltFetched) = 0;
        virtual int32_t Skip_a8dd78c7a44f3ebc(int32_t celt) = 0;
        virtual void Reset_1f00e10f4569d6b() = 0;
        virtual void Clone_14a39143516b6a0b(IEnumMoniker* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API IEnumString : public virtual System::Object{
        
        virtual int32_t Next_3676c0874f703738(int32_t celt, cli::array<System::String*>* rgelt, void* pceltFetched) = 0;
        virtual int32_t Skip_88e1c862b29afe2c(int32_t celt) = 0;
        virtual void Reset_f2840c74b89f8065() = 0;
        virtual void Clone_d0f027e72a6cd08c(IEnumString* ppenum) = 0;
        
    };
    
    
    struct MANAGED_API IEnumVARIANT : public virtual System::Object{
        
        virtual int32_t Next_9a588d7d22135c00(int32_t celt, cli::array<System::Object*>* rgVar, void* pceltFetched) = 0;
        virtual int32_t Skip_13162439a81c5c7b(int32_t celt) = 0;
        virtual int32_t Reset_1d98982c4b4d7264() = 0;
        virtual IEnumVARIANT* Clone_225437523eb83ed2() = 0;
        
    };
    
    
    struct MANAGED_API IMoniker : public virtual System::Object{
        
        virtual void GetClassID_7ae7ed98f51d4650(System::Guid pClassID) = 0;
        virtual int32_t IsDirty_183e586514086453() = 0;
        virtual void Load_ea8ffd2f28bb8516(IStream* pStm) = 0;
        virtual void Save_69f55331e48e274b(IStream* pStm, bool fClearDirty) = 0;
        virtual void GetSizeMax_d3a714057057e8d(int64_t pcbSize) = 0;
        virtual void BindToObject_681d36d50743d465(IBindCtx* pbc, IMoniker* pmkToLeft, System::Guid riidResult, System::Object* ppvResult) = 0;
        virtual void BindToStorage_b1cae6116955cd06(IBindCtx* pbc, IMoniker* pmkToLeft, System::Guid riid, System::Object* ppvObj) = 0;
        virtual void Reduce_fafecc3215983cff(IBindCtx* pbc, int32_t dwReduceHowFar, IMoniker* ppmkToLeft, IMoniker* ppmkReduced) = 0;
        virtual void ComposeWith_c1c46443d9109eb1(IMoniker* pmkRight, bool fOnlyIfNotGeneric, IMoniker* ppmkComposite) = 0;
        virtual void Enum_8ad41fb0d7c9f6e5(bool fForward, IEnumMoniker* ppenumMoniker) = 0;
        virtual int32_t IsEqual_d7abd2133625d0ee(IMoniker* pmkOtherMoniker) = 0;
        virtual void Hash_e3bb7771379da3ec(int32_t pdwHash) = 0;
        virtual int32_t IsRunning_532de3d11d6e1182(IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning) = 0;
        virtual void GetTimeOfLastChange_86487b8692357723(IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME2 pFileTime) = 0;
        virtual void Inverse_41a5122962a8d2ea(IMoniker* ppmk) = 0;
        virtual void CommonPrefixWith_5a4019162d58cdcd(IMoniker* pmkOther, IMoniker* ppmkPrefix) = 0;
        virtual void RelativePathTo_b4eb8b6cfe4d3308(IMoniker* pmkOther, IMoniker* ppmkRelPath) = 0;
        virtual void GetDisplayName_ec26029fd7e80fee(IBindCtx* pbc, IMoniker* pmkToLeft, System::String* ppszDisplayName) = 0;
        virtual void ParseDisplayName_4ea0a400875bcbe4(IBindCtx* pbc, IMoniker* pmkToLeft, System::String* pszDisplayName, int32_t pchEaten, IMoniker* ppmkOut) = 0;
        virtual int32_t IsSystemMoniker_ff7aca46c2fcde(int32_t pdwMksys) = 0;
        
    };
    
    
    struct MANAGED_API IPersistFile : public virtual System::Object{
        
        virtual void GetClassID_eb107d83645835f5(System::Guid pClassID) = 0;
        virtual int32_t IsDirty_272ae1bd711ef3c9() = 0;
        virtual void Load_9d493d139e2a3967(System::String* pszFileName, int32_t dwMode) = 0;
        virtual void Save_eaddc4e7eef55aad(System::String* pszFileName, bool fRemember) = 0;
        virtual void SaveCompleted_aa1f702c23f19526(System::String* pszFileName) = 0;
        virtual void GetCurFile_c9e95e63039bffdd(System::String* ppszFileName) = 0;
        
    };
    
    
    struct MANAGED_API IRunningObjectTable : public virtual System::Object{
        
        virtual int32_t Register_c93327fe16f23e04(int32_t grfFlags, System::Object* punkObject, IMoniker* pmkObjectName) = 0;
        virtual void Revoke_5b74bda0870c754e(int32_t dwRegister) = 0;
        virtual int32_t IsRunning_3cdbe191ea149beb(IMoniker* pmkObjectName) = 0;
        virtual int32_t GetObject_81c6f4526c80f473(IMoniker* pmkObjectName, System::Object* ppunkObject) = 0;
        virtual void NoteChangeTime_78ada171bc683dbb(int32_t dwRegister, FILETIME2 pfiletime) = 0;
        virtual int32_t GetTimeOfLastChange_2b11c2b40cf41d17(IMoniker* pmkObjectName, FILETIME2 pfiletime) = 0;
        virtual void EnumRunning_55b7cdab6c4754c5(IEnumMoniker* ppenumMoniker) = 0;
        
    };
    
    
    struct MANAGED_API IStream : public virtual System::Object{
        
        virtual void Read_f0ee3e707f9b25c2(cli::array<unsigned char>* pv, int32_t cb, void* pcbRead) = 0;
        virtual void Write_27349750e142d50e(cli::array<unsigned char>* pv, int32_t cb, void* pcbWritten) = 0;
        virtual void Seek_94d79b6e43afcb54(int64_t dlibMove, int32_t dwOrigin, void* plibNewPosition) = 0;
        virtual void SetSize_1740d13dbd0d1791(int64_t libNewSize) = 0;
        virtual void CopyTo_1060a85483f30ba1(IStream* pstm, int64_t cb, void* pcbRead, void* pcbWritten) = 0;
        virtual void Commit_db83fc143e16bf97(int32_t grfCommitFlags) = 0;
        virtual void Revert_118328ae107f7058() = 0;
        virtual void LockRegion_78661bb79cc1c5c3(int64_t libOffset, int64_t cb, int32_t dwLockType) = 0;
        virtual void UnlockRegion_bcb8cfd98fba3c(int64_t libOffset, int64_t cb, int32_t dwLockType) = 0;
        virtual void Stat_f160f4068f96f580(STATSTG2 pstatstg, int32_t grfStatFlag) = 0;
        virtual void Clone_211ed4786978ff14(IStream* ppstm) = 0;
        
    };
    
    
    struct MANAGED_API ITypeComp : public virtual System::Object{
        
        virtual void Bind_9e3b766b223c5945(System::String* szName, int32_t lHashVal, int16_t wFlags, ITypeInfo* ppTInfo, DESCKIND2 pDescKind, BINDPTR2 pBindPtr) = 0;
        virtual void BindType_4a1a2e646aaa66e1(System::String* szName, int32_t lHashVal, ITypeInfo* ppTInfo, ITypeComp* ppTComp) = 0;
        
    };
    
    
    struct MANAGED_API ITypeInfo2 : public virtual System::Object, public virtual ITypeInfo{
        
        virtual void AddressOfMember_5eeab0423e41d681(int32_t memid, INVOKEKIND2 invKind, void* ppv) /*new*/ = 0;
        virtual void CreateInstance_8c33737e93b8b6e1(System::Object* pUnkOuter, System::Guid riid, System::Object* ppvObj) /*new*/ = 0;
        virtual void GetContainingTypeLib_dc7637d551a1e7ed(ITypeLib* ppTLB, int32_t pIndex) /*new*/ = 0;
        virtual void GetDllEntry_7d70d54012aeb0a1(int32_t memid, INVOKEKIND2 invKind, void* pBstrDllName, void* pBstrName, void* pwOrdinal) /*new*/ = 0;
        virtual void GetDocumentation_1eafd3be7d819e93(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) /*new*/ = 0;
        virtual void GetIDsOfNames_726f663766b2d0cf(cli::array<System::String*>* rgszNames, int32_t cNames, cli::array<int32_t>* pMemId) /*new*/ = 0;
        virtual void GetImplTypeFlags_d4b0e3d0c334a682(int32_t index, IMPLTYPEFLAGS2 pImplTypeFlags) /*new*/ = 0;
        virtual void GetTypeKind_831a395b844f4554(TYPEKIND2 pTypeKind) = 0;
        virtual void GetTypeFlags_ab5c51d602deff25(int32_t pTypeFlags) = 0;
        virtual void GetFuncDesc_8f9fcf3af1be68ef(int32_t index, void* ppFuncDesc) /*new*/ = 0;
        virtual void GetMops_a8b1075204128c2b(int32_t memid, System::String* pBstrMops) /*new*/ = 0;
        virtual void GetNames_4767b1355c27efa9(int32_t memid, cli::array<System::String*>* rgBstrNames, int32_t cMaxNames, int32_t pcNames) /*new*/ = 0;
        virtual void GetRefTypeInfo_937f6860d99858b(int32_t hRef, ITypeInfo* ppTI) /*new*/ = 0;
        virtual void GetRefTypeOfImplType_c6c28324e5ac347d(int32_t index, int32_t href) /*new*/ = 0;
        virtual void GetTypeAttr_75855742941e81ff(void* ppTypeAttr) /*new*/ = 0;
        virtual void GetTypeComp_949c53074f8fdd50(ITypeComp* ppTComp) /*new*/ = 0;
        virtual void GetVarDesc_556c5b3faae2e53f(int32_t index, void* ppVarDesc) /*new*/ = 0;
        virtual void GetFuncIndexOfMemId_bea75a1159f6d258(int32_t memid, INVOKEKIND2 invKind, int32_t pFuncIndex) = 0;
        virtual void GetVarIndexOfMemId_47cdab30dd8f4c6b(int32_t memid, int32_t pVarIndex) = 0;
        virtual void GetCustData_a2f4ee18895ef9cf(System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetFuncCustData_7ce893411b0a8007(int32_t index, System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetParamCustData_7abc91a631a41297(int32_t indexFunc, int32_t indexParam, System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetVarCustData_d9628dfe6621b3(int32_t index, System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetImplTypeCustData_2404ffa7327b4f31(int32_t index, System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetDocumentation2_54cd1775db1d2b45(int32_t memid, System::String* pbstrHelpString, int32_t pdwHelpStringContext, System::String* pbstrHelpStringDll) = 0;
        virtual void GetAllCustData_1fb603e523c0a187(void* pCustData) = 0;
        virtual void GetAllFuncCustData_a2e31aa9e87c616b(int32_t index, void* pCustData) = 0;
        virtual void GetAllParamCustData_534a5f630c0686aa(int32_t indexFunc, int32_t indexParam, void* pCustData) = 0;
        virtual void GetAllVarCustData_b0c258a97120a5a7(int32_t index, void* pCustData) = 0;
        virtual void GetAllImplTypeCustData_bc0552a56f1bc9c4(int32_t index, void* pCustData) = 0;
        virtual void Invoke_58da6d391ff0c866(System::Object* pvInstance, int32_t memid, int16_t wFlags, DISPPARAMS2 pDispParams, void* pVarResult, void* pExcepInfo, int32_t puArgErr) /*new*/ = 0;
        virtual void ReleaseTypeAttr_7af24a362260153e(void* pTypeAttr) /*new*/ = 0;
        virtual void ReleaseFuncDesc_571a7ae2a763bba(void* pFuncDesc) /*new*/ = 0;
        virtual void ReleaseVarDesc_a65947eca3ca237(void* pVarDesc) /*new*/ = 0;
        
    };
    
    
    struct MANAGED_API ITypeLib2 : public virtual System::Object, public virtual ITypeLib{
        
        virtual void FindName_a37725b4f7cf7f2d(System::String* szNameBuf, int32_t lHashVal, cli::array<ITypeInfo*>* ppTInfo, cli::array<int32_t>* rgMemId, int16_t pcFound) /*new*/ = 0;
        virtual void GetCustData_604d5559f3cd4d0b(System::Guid guid, System::Object* pVarVal) = 0;
        virtual void GetDocumentation_71325ea80e7d8563(int32_t index, System::String* strName, System::String* strDocString, int32_t dwHelpContext, System::String* strHelpFile) /*new*/ = 0;
        virtual void GetLibAttr_21acfdefd56caac0(void* ppTLibAttr) /*new*/ = 0;
        virtual void GetLibStatistics_9d3876c686e76286(void* pcUniqueNames, int32_t pcchUniqueNames) = 0;
        virtual void GetDocumentation2_b58a34f47d77d108(int32_t index, System::String* pbstrHelpString, int32_t pdwHelpStringContext, System::String* pbstrHelpStringDll) = 0;
        virtual void GetAllCustData_45424d71d1ff0453(void* pCustData) = 0;
        virtual void GetTypeComp_3b82e32fe4b8c46a(ITypeComp* ppTComp) /*new*/ = 0;
        virtual void GetTypeInfo_f13c9df5259671da(int32_t index, ITypeInfo* ppTI) /*new*/ = 0;
        virtual void GetTypeInfoOfGuid_cc389158e10422b(System::Guid guid, ITypeInfo* ppTInfo) /*new*/ = 0;
        virtual void GetTypeInfoType_f613e6a7afcbaec5(int32_t index, TYPEKIND2 pTKind) /*new*/ = 0;
        virtual bool IsName_a4ae7c0c02fb3c35(System::String* szNameBuf, int32_t lHashVal) /*new*/ = 0;
        virtual void ReleaseTLibAttr_ad75824e222496f5(void* pTLibAttr) /*new*/ = 0;
        virtual int32_t GetTypeInfoCount_4f2e8c66fbdab421() /*new*/ = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace InteropServices { namespace Expando {
    
    struct MANAGED_API IExpando : public virtual System::Object, public virtual System::Reflection::IReflect{
        
        virtual System::Reflection::FieldInfo* AddField_8e76df8e63519df7(System::String* name) = 0;
        virtual System::Reflection::MethodInfo* AddMethod_337069c3f1eed3fc(System::String* name, System::Delegate* method) = 0;
        virtual System::Reflection::PropertyInfo* AddProperty_e61f9dcc837f536d(System::String* name) = 0;
        virtual void RemoveMember_a5e82d0b1230f6d0(System::Reflection::MemberInfo* m) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting {
    
    struct MANAGED_API IChannelInfo : public virtual System::Object{
        
        virtual cli::array<System::Object*>* get_ChannelData_a0d7a480581057f3() = 0;
        virtual cli::array<System::Object*>* set_ChannelData_bfc7444492100e65(cli::array<System::Object*>* value) = 0;
        
    };
    
    
    struct MANAGED_API IEnvoyInfo : public virtual System::Object{
        
        virtual Messaging::IMessageSink* get_EnvoySinks_1c0ed1452ceaf245() = 0;
        virtual Messaging::IMessageSink* set_EnvoySinks_8e6de85a9061c891(Messaging::IMessageSink* value) = 0;
        
    };
    
    
    struct MANAGED_API IObjectHandle : public virtual System::Object{
        
        virtual System::Object* Unwrap_c10aed64a454bc6f() = 0;
        
    };
    
    
    struct MANAGED_API IRemotingTypeInfo : public virtual System::Object{
        
        virtual bool CanCastTo_7f8304fa142c3271(System::Type* fromType, System::Object* o) = 0;
        virtual System::String* get_TypeName_e368785a4c79e626() = 0;
        virtual System::String* set_TypeName_d3657f810af9c065(System::String* value) = 0;
        
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    struct MANAGED_API IActivator : public virtual System::Object{
        
        virtual IConstructionReturnMessage* Activate_49ae602ff2f2ec37(IConstructionCallMessage* msg) = 0;
        virtual ActivatorLevel get_Level_ca7e6f0a04053a94() = 0;
        virtual IActivator* get_NextActivator_d6b0fab3e3c1398b() = 0;
        virtual IActivator* set_NextActivator_d4b9338a5d7c4775(IActivator* value) = 0;
        
    };
    
    
    struct MANAGED_API IConstructionCallMessage : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessage, public virtual System::Runtime::Remoting::Messaging::IMethodCallMessage, public virtual System::Runtime::Remoting::Messaging::IMethodMessage{
        
        virtual System::Type* get_ActivationType_84a662e1d53c6b9a() = 0;
        virtual System::String* get_ActivationTypeName_1af5753a691619eb() = 0;
        virtual IActivator* get_Activator_e0d47498ed580034() = 0;
        virtual IActivator* set_Activator_f69a6bba41c9ebf3(IActivator* value) = 0;
        virtual cli::array<System::Object*>* get_CallSiteActivationAttributes_87621fd6aed1643f() = 0;
        virtual System::Collections::IList* get_ContextProperties_6d65d78ae4ed4d3() = 0;
        
    };
    
    
    struct MANAGED_API IConstructionReturnMessage : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMethodReturnMessage, public virtual System::Runtime::Remoting::Messaging::IMethodMessage, public virtual System::Runtime::Remoting::Messaging::IMessage{
        
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API IChannelDataStore : public virtual System::Object{
        
        virtual cli::array<System::String*>* get_ChannelUris_ea291fabcbfe8aaa() = 0;
        virtual System::Object* get_Item_e760c8b72e46bb27(System::Object* key) = 0;
        virtual System::Object* set_Item_1ecebca6bd3e41cb(System::Object* key, System::Object* value) = 0;
        
    };
    
    
    struct MANAGED_API IChannelReceiver : public virtual System::Object, public virtual IChannel{
        
        virtual cli::array<System::String*>* GetUrlsForUri_3e77808f3d9020c7(System::String* objectURI) = 0;
        virtual void StartListening_a568e860f5c12098(System::Object* data) = 0;
        virtual void StopListening_77f3993d6f40946f(System::Object* data) = 0;
        virtual System::Object* get_ChannelData_bd2f3a6812b5fc88() = 0;
        
    };
    
    
    struct MANAGED_API IChannelReceiverHook : public virtual System::Object{
        
        virtual void AddHookChannelUri_17accdca6d4a4949(System::String* channelUri) = 0;
        virtual System::String* get_ChannelScheme_d0a2ea0fbbe58f36() = 0;
        virtual IServerChannelSink* get_ChannelSinkChain_9a70efc8e6615164() = 0;
        virtual bool get_WantsToListen_19a3015db36520f6() = 0;
        
    };
    
    
    struct MANAGED_API IChannelSender : public virtual System::Object, public virtual IChannel{
        
        virtual System::Runtime::Remoting::Messaging::IMessageSink* CreateMessageSink_66e723ef8344d1c9(System::String* url, System::Object* remoteChannelData, System::String* objectURI) = 0;
        
    };
    
    
    struct MANAGED_API IClientChannelSinkStack : public virtual System::Object, public virtual IClientResponseChannelSinkStack{
        
        virtual System::Object* Pop_4550bb7de7b65554(IClientChannelSink* sink) = 0;
        virtual void Push_47f6a51bfc8d8965(IClientChannelSink* sink, System::Object* state) = 0;
        
    };
    
    
    struct MANAGED_API IClientFormatterSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink, public virtual IClientChannelSink, public virtual IChannelSinkBase{
        
        
    };
    
    
    struct MANAGED_API IClientFormatterSinkProvider : public virtual System::Object, public virtual IClientChannelSinkProvider{
        
        
    };
    
    
    struct MANAGED_API ISecurableChannel : public virtual System::Object{
        
        virtual bool get_IsSecured_df648c5171a976a0() = 0;
        virtual bool set_IsSecured_2a8cd0b59c55bca9(bool value) = 0;
        
    };
    
    
    struct MANAGED_API IServerChannelSink : public virtual System::Object, public virtual IChannelSinkBase{
        
        virtual void AsyncProcessResponse_de8d5b38a27d9262(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) = 0;
        virtual System::IO::Stream* GetResponseStream_226ecebab7f1ae4a(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) = 0;
        virtual ServerProcessing ProcessMessage_f903a2d50825660b(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* requestMsg, ITransportHeaders* requestHeaders, System::IO::Stream* requestStream, System::Runtime::Remoting::Messaging::IMessage* responseMsg, ITransportHeaders* responseHeaders, System::IO::Stream* responseStream) = 0;
        virtual IServerChannelSink* get_NextChannelSink_6e269c53e50789c7() = 0;
        
    };
    
    
    struct MANAGED_API IServerChannelSinkStack : public virtual System::Object, public virtual IServerResponseChannelSinkStack{
        
        virtual System::Object* Pop_86e374140ce04b4a(IServerChannelSink* sink) = 0;
        virtual void Push_4e4c6597fd9aae15(IServerChannelSink* sink, System::Object* state) = 0;
        virtual void ServerCallback_997eeaf298842004(System::IAsyncResult* ar) = 0;
        virtual void Store_1327911ba6e60262(IServerChannelSink* sink, System::Object* state) = 0;
        virtual void StoreAndDispatch_ecff62ebd0a78b8c(IServerChannelSink* sink, System::Object* state) = 0;
        
    };
    
    
    struct MANAGED_API IServerFormatterSinkProvider : public virtual System::Object, public virtual IServerChannelSinkProvider{
        
        
    };
    
    
    struct MANAGED_API ITransportHeaders : public virtual System::Object{
        
        virtual System::Collections::IEnumerator* GetEnumerator_3a76a2c7ca35933f() = 0;
        virtual System::Object* get_Item_720a0b389493f59a(System::Object* key) = 0;
        virtual System::Object* set_Item_6a9ed7422eb40f13(System::Object* key, System::Object* value) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    struct MANAGED_API IContextAttribute : public virtual System::Object{
        
        virtual void GetPropertiesForNewContext_98ae344cb00933c3(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) = 0;
        virtual bool IsContextOK_c0cd4400710cc315(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) = 0;
        
    };
    
    
    struct MANAGED_API IContextProperty : public virtual System::Object{
        
        virtual void Freeze_15e6c602de21dea(Context2* newContext) = 0;
        virtual bool IsNewContextOK_d441173b4713767c(Context2* newCtx) = 0;
        virtual System::String* get_Name_c8dae2189d434839() = 0;
        
    };
    
    
    struct MANAGED_API IContextPropertyActivator : public virtual System::Object{
        
        virtual void CollectFromClientContext_8832c3e608c4d3f(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) = 0;
        virtual void CollectFromServerContext_a929ee3c4b5f9d81(System::Runtime::Remoting::Activation::IConstructionReturnMessage* msg) = 0;
        virtual bool DeliverClientContextToServerContext_6a909929432c53a9(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) = 0;
        virtual bool DeliverServerContextToClientContext_8fd327679eae9475(System::Runtime::Remoting::Activation::IConstructionReturnMessage* msg) = 0;
        virtual bool IsOKToActivate_d3fec0edb19d588a(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) = 0;
        
    };
    
    
    struct MANAGED_API IContributeClientContextSink : public virtual System::Object{
        
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetClientContextSink_4901bfa17250fabc(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) = 0;
        
    };
    
    
    struct MANAGED_API IContributeDynamicSink : public virtual System::Object{
        
        virtual IDynamicMessageSink* GetDynamicSink_4549e225faa8ce79() = 0;
        
    };
    
    
    struct MANAGED_API IContributeEnvoySink : public virtual System::Object{
        
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetEnvoySink_d8fde746a81422b(System::MarshalByRefObject* obj, System::Runtime::Remoting::Messaging::IMessageSink* nextSink) = 0;
        
    };
    
    
    struct MANAGED_API IContributeObjectSink : public virtual System::Object{
        
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetObjectSink_5461588dbe46c924(System::MarshalByRefObject* obj, System::Runtime::Remoting::Messaging::IMessageSink* nextSink) = 0;
        
    };
    
    
    struct MANAGED_API IContributeServerContextSink : public virtual System::Object{
        
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetServerContextSink_1f6bff576bbda(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) = 0;
        
    };
    
    
    struct MANAGED_API IDynamicMessageSink : public virtual System::Object{
        
        virtual void ProcessMessageFinish_919ca107c1f3b86c(System::Runtime::Remoting::Messaging::IMessage* replyMsg, bool bCliSide, bool bAsync) = 0;
        virtual void ProcessMessageStart_2d880a1a27e0fa83(System::Runtime::Remoting::Messaging::IMessage* reqMsg, bool bCliSide, bool bAsync) = 0;
        
    };
    
    
    struct MANAGED_API IDynamicProperty : public virtual System::Object{
        
        virtual System::String* get_Name_9f460fecde1e61a4() = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    struct MANAGED_API ILease : public virtual System::Object{
        
        virtual void Register_29cd33cb094da73(ISponsor* obj) = 0;
        virtual void Register_a287b3a68d0f3c8a(ISponsor* obj, System::TimeSpan renewalTime) = 0;
        virtual System::TimeSpan Renew_ac41c9e01b454d0a(System::TimeSpan renewalTime) = 0;
        virtual void Unregister_8ceee2c7f59bf148(ISponsor* obj) = 0;
        virtual System::TimeSpan get_CurrentLeaseTime_495da45221ea9c91() = 0;
        virtual LeaseState get_CurrentState_c1fd61e427ff7162() = 0;
        virtual System::TimeSpan get_InitialLeaseTime_aa84660515c07bca() = 0;
        virtual System::TimeSpan set_InitialLeaseTime_ba2e7f8774a51a3f(System::TimeSpan value) = 0;
        virtual System::TimeSpan get_RenewOnCallTime_d513f7649eedc4() = 0;
        virtual System::TimeSpan set_RenewOnCallTime_ed741ebcdf794d2f(System::TimeSpan value) = 0;
        virtual System::TimeSpan get_SponsorshipTimeout_21865f97c16cd67d() = 0;
        virtual System::TimeSpan set_SponsorshipTimeout_43c4b2fd11e77e17(System::TimeSpan value) = 0;
        
    };
    
    
    struct MANAGED_API ISponsor : public virtual System::Object{
        
        virtual System::TimeSpan Renewal_eed03694f8483857(ILease* lease) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API ILogicalThreadAffinative : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IInternalMessage : public virtual System::Object{
        
        virtual System::Runtime::Remoting::Identity* get_TargetIdentity_462ebd8041156d75() = 0;
        virtual System::Runtime::Remoting::Identity* set_TargetIdentity_8fbc4984471e7e77(System::Runtime::Remoting::Identity* value) = 0;
        virtual System::String* get_Uri_39a650ec2a69ead0() = 0;
        virtual System::String* set_Uri_96dc10f55685ba70(System::String* value) = 0;
        
    };
    
    
    struct MANAGED_API IMessageCtrl : public virtual System::Object{
        
        virtual void Cancel_774c9297a7c57c44(int32_t msToCancel) = 0;
        
    };
    
    
    struct MANAGED_API IRemotingFormatter : public virtual System::Object, public virtual System::Runtime::Serialization::IFormatter{
        
        virtual System::Object* Deserialize_25413fb95ff81880(System::IO::Stream* serializationStream, HeaderHandler* handler) = 0;
        virtual void Serialize_b2dd80326413fce6(System::IO::Stream* serializationStream, System::Object* graph, cli::array<Header*>* headers) = 0;
        
    };
    
    
    struct MANAGED_API ISerializationRootObject : public virtual System::Object{
        
        virtual void RootSetObjectData_9389585d3660e24c(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    struct MANAGED_API ISoapXsd : public virtual System::Object{
        
        virtual System::String* GetXsdType_206f3057f651893() = 0;
        
    };
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Services {
    
    struct MANAGED_API ITrackingHandler : public virtual System::Object{
        
        virtual void DisconnectedObject_9c34d68e930f35b(System::Object* obj) = 0;
        virtual void MarshaledObject_a0c032baefb993b(System::Object* obj, System::Runtime::Remoting::ObjRef* or_) = 0;
        virtual void UnmarshaledObject_7ac49a37dedb3923(System::Object* obj, System::Runtime::Remoting::ObjRef* or_) = 0;
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    struct MANAGED_API IDeserializationCallback : public virtual System::Object{
        
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) = 0;
        
    };
    
    
    struct MANAGED_API IFormatterConverter : public virtual System::Object{
        
        virtual System::Object* Convert_f36db21f5899e115(System::Object* value, System::Type* type) = 0;
        virtual System::Object* Convert_fd69ce9fde44c7c9(System::Object* value, System::TypeCode typeCode) = 0;
        virtual bool ToBoolean_f78384850964024e(System::Object* value) = 0;
        virtual unsigned char ToByte_b08e1092296aced(System::Object* value) = 0;
        virtual char16_t ToChar_a90c87eb392f5c6b(System::Object* value) = 0;
        virtual System::DateTime ToDateTime_db18bc4d36988ffe(System::Object* value) = 0;
        virtual System::Decimal ToDecimal_91c52c2b2c34226d(System::Object* value) = 0;
        virtual double ToDouble_c26b3a04c5b5c6c3(System::Object* value) = 0;
        virtual int16_t ToInt16_4c5e98cc2a24107a(System::Object* value) = 0;
        virtual int32_t ToInt32_70f32a0ca9af7aec(System::Object* value) = 0;
        virtual int64_t ToInt64_f60f3bd2c6d66487(System::Object* value) = 0;
        virtual signed char ToSByte_f5271c6436d3339a(System::Object* value) = 0;
        virtual float ToSingle_85c5ebe23a43ef7b(System::Object* value) = 0;
        virtual System::String* ToString_60d64e3cd2e84237(System::Object* value) = 0;
        virtual uint16_t ToUInt16_66a4df810f9b2648(System::Object* value) = 0;
        virtual uint32_t ToUInt32_c19d156d0b0e4179(System::Object* value) = 0;
        virtual uint64_t ToUInt64_30dc7f167b1e482a(System::Object* value) = 0;
        
    };
    
    
    struct MANAGED_API IObjectReference : public virtual System::Object{
        
        virtual System::Object* GetRealObject_692566897a6926e4(StreamingContext context) = 0;
        
    };
    
    
    struct MANAGED_API ISafeSerializationData : public virtual System::Object{
        
        virtual void CompleteDeserialization_80e78ac6f0e8ce1e(System::Object* deserialized) = 0;
        
    };
    
    
    struct MANAGED_API ISerializable : public virtual System::Object{
        
        virtual void GetObjectData_11b895a112e04409(SerializationInfo* info, StreamingContext context) = 0;
        
    };
    
    
    struct MANAGED_API ISerializationSurrogate : public virtual System::Object{
        
        virtual void GetObjectData_fb9d539912329654(System::Object* obj, SerializationInfo* info, StreamingContext context) = 0;
        virtual System::Object* SetObjectData_3af7d8e77dbcc1d2(System::Object* obj, SerializationInfo* info, StreamingContext context, ISurrogateSelector* selector) = 0;
        
    };
    
    
    struct MANAGED_API ISurrogateSelector : public virtual System::Object{
        
        virtual void ChainSelector_b4bf6e9847cd4bb0(ISurrogateSelector* selector) = 0;
        virtual ISurrogateSelector* GetNextSelector_f0732f882be06ccb() = 0;
        virtual ISerializationSurrogate* GetSurrogate_9d3ffd4061f81ca8(System::Type* type, StreamingContext context, ISurrogateSelector* selector) = 0;
        
    };
    
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    struct MANAGED_API IFieldInfo : public virtual System::Object{
        
        virtual cli::array<System::String*>* get_FieldNames_ddc2523958573f3a() = 0;
        virtual cli::array<System::String*>* set_FieldNames_5309ceaf7a5f7c08(cli::array<System::String*>* value) = 0;
        virtual cli::array<System::Type*>* get_FieldTypes_6b1fc123d15bbe2e() = 0;
        virtual cli::array<System::Type*>* set_FieldTypes_d46070eb00af79a4(cli::array<System::Type*>* value) = 0;
        
    };
    
    
    struct MANAGED_API ISoapMessage : public virtual System::Object{
        
        virtual cli::array<System::Runtime::Remoting::Messaging::Header*>* get_Headers_96b7bb51a0261db9() = 0;
        virtual cli::array<System::Runtime::Remoting::Messaging::Header*>* set_Headers_96978db47415955e(cli::array<System::Runtime::Remoting::Messaging::Header*>* value) = 0;
        virtual System::String* get_MethodName_28298dbe5631c29a() = 0;
        virtual System::String* set_MethodName_17a43f56cb082426(System::String* value) = 0;
        virtual cli::array<System::String*>* get_ParamNames_5982ddec287d0ab5() = 0;
        virtual cli::array<System::String*>* set_ParamNames_ba43c410fccdd7e0(cli::array<System::String*>* value) = 0;
        virtual cli::array<System::Type*>* get_ParamTypes_dfa28901a900c9e6() = 0;
        virtual cli::array<System::Type*>* set_ParamTypes_e393ddee8f239cb8(cli::array<System::Type*>* value) = 0;
        virtual cli::array<System::Object*>* get_ParamValues_a628ac3701d143a3() = 0;
        virtual cli::array<System::Object*>* set_ParamValues_393afb0f84c346e9(cli::array<System::Object*>* value) = 0;
        virtual System::String* get_XmlNameSpace_3b8ec03f5216958() = 0;
        virtual System::String* set_XmlNameSpace_6e306b61b433828(System::String* value) = 0;
        
    };
    
}}}}
namespace System { namespace Security {
    
    struct MANAGED_API IEvidenceFactory : public virtual System::Object{
        
        virtual Policy::Evidence* get_Evidence_f1eadb7cf64a7592() = 0;
        
    };
    
    
    struct MANAGED_API IPermission : public virtual System::Object, public virtual ISecurityEncodable{
        
        virtual IPermission* Copy_e6fdf74d8dfaca72() = 0;
        virtual void Demand_6a8bc305f8dfa903() = 0;
        virtual IPermission* Intersect_593562530728a967(IPermission* target) = 0;
        virtual bool IsSubsetOf_1923c54e11db177f(IPermission* target) = 0;
        virtual IPermission* Union_ecfa27115d58cb44(IPermission* target) = 0;
        
    };
    
    
    struct MANAGED_API IStackWalk : public virtual System::Object{
        
        virtual void Assert_e1a4f90c372da24c() = 0;
        virtual void Demand_55e1408892730c3e() = 0;
        virtual void Deny_db68b9e52373af22() = 0;
        virtual void PermitOnly_a57179fb262ef034() = 0;
        
    };
    
}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API ICryptoTransform : public virtual System::Object, public virtual System::IDisposable{
        
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) = 0;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) = 0;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() = 0;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() = 0;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() = 0;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() = 0;
        
    };
    
    
    struct MANAGED_API ICspAsymmetricAlgorithm : public virtual System::Object{
        
        virtual cli::array<unsigned char>* ExportCspBlob_9a31ab9dad32d592(bool includePrivateParameters) = 0;
        virtual void ImportCspBlob_4dc0b4a93c0b22fd(cli::array<unsigned char>* rawData) = 0;
        virtual CspKeyContainerInfo* get_CspKeyContainerInfo_e0b6cc9127ecfec0() = 0;
        
    };
    
}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API IBuiltInPermission : public virtual System::Object{
        
        virtual int32_t GetTokenIndex_3e653e1a6127921() = 0;
        
    };
    
    
    struct MANAGED_API IUnrestrictedPermission : public virtual System::Object{
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() = 0;
        
    };
    
}}}
namespace System { namespace Security { namespace Policy {
    
    struct MANAGED_API IApplicationTrustManager : public virtual System::Object, public virtual System::Security::ISecurityEncodable{
        
        virtual ApplicationTrust* DetermineApplicationTrust_29a1102f04ee3483(System::ActivationContext* activationContext, TrustManagerContext* context) = 0;
        
    };
    
    
    struct MANAGED_API IBuiltInEvidence : public virtual System::Object{
        
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) = 0;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) = 0;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) = 0;
        
    };
    
    
    struct MANAGED_API IConstantMembershipCondition : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IIdentityPermissionFactory : public virtual System::Object{
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) = 0;
        
    };
    
    
    struct MANAGED_API IMembershipCondition : public virtual System::Object, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) = 0;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() = 0;
        virtual bool Equals_4b738171fe6c9984(System::Object* obj) = 0;
        virtual System::String* ToString_427da0d8da742df9() = 0;
        
    };
    
    
    struct MANAGED_API ITrustLicenseIssuerCollection : public virtual System::Object, public virtual System::Collections::IEnumerable{
        
        virtual void Add_28aa0dfa60952765(TrustLicenseIssuer* issuer) = 0;
        virtual bool Contains_40bd7e153cc232ea(TrustLicenseIssuer* issuer) = 0;
        virtual void Remove_f4e126a001663022(TrustLicenseIssuer* issuer) = 0;
        
    };
    
    
    struct MANAGED_API ITrustManager : public virtual System::Object, public virtual System::Security::ISecurityEncodable{
        
        virtual ApplicationTrust* DetermineApplicationTrust_cc4261559ae7e4e8(System::IApplicationDescription* appDescription, System::IHostContext* hostContext) = 0;
        
    };
    
    
    struct MANAGED_API ITrustManagerConfig : public virtual System::Object{
        
        virtual TrustManagerZoneConfig* get_InternetZone_530666f5b24226ae() = 0;
        virtual TrustManagerZoneConfig* set_InternetZone_7b10114922c5bbea(TrustManagerZoneConfig* value) = 0;
        virtual TrustManagerZoneConfig* get_IntranetZone_ac854ef01831037a() = 0;
        virtual TrustManagerZoneConfig* set_IntranetZone_3640ed33e6765041(TrustManagerZoneConfig* value) = 0;
        virtual TrustManagerZoneConfig* get_MyComputer_dceb0794baed52f6() = 0;
        virtual TrustManagerZoneConfig* set_MyComputer_ff371d067549af88(TrustManagerZoneConfig* value) = 0;
        virtual TrustManagerZoneConfig* get_TrustedSites_25ea5f9253158b60() = 0;
        virtual TrustManagerZoneConfig* set_TrustedSites_30f06776409d1800(TrustManagerZoneConfig* value) = 0;
        virtual TrustManagerZoneConfig* get_UntrustedSites_742c5ba805211148() = 0;
        virtual TrustManagerZoneConfig* set_UntrustedSites_e1a9846b435adb13(TrustManagerZoneConfig* value) = 0;
        
    };
    
}}}
namespace System { namespace Security { namespace Principal {
    
    struct MANAGED_API IIdentity : public virtual System::Object{
        
        virtual System::String* get_AuthenticationType_fde3461ee63fdcbc() = 0;
        virtual bool get_IsAuthenticated_3494858dba7d3668() = 0;
        virtual System::String* get_Name_b724867acffa5fcd() = 0;
        
    };
    
    
    struct MANAGED_API IPrincipal : public virtual System::Object{
        
        virtual bool IsInRole_3999c98ebfe5d242(System::String* role) = 0;
        virtual IIdentity* get_Identity_8451efd6a7a604b6() = 0;
        
    };
    
}}}
namespace System { namespace Threading { namespace Tasks {
    
    template<class T> struct MANAGED_API IConcurrentDeque : public virtual System::Object{
        
        virtual void PushBottom_67d204615af76330(T obj) = 0;
        virtual PopResult PopBottom_550cfc022701ac6c(T obj) = 0;
        virtual PopResult PopTop_6ebc020e341f5b55(T obj) = 0;
        virtual System::Collections::Generic::IEnumerable2<T>* GetEnumerable_8d3bea811daa044d() = 0;
        
    };
    
    
    struct MANAGED_API IScheduler : public virtual System::Object, public virtual System::IDisposable{
        
        virtual void AddWork_3722dc628bb221dc(Task* t) = 0;
        virtual void ParticipateUntil_b6a559c5459e6495(Task* task) = 0;
        virtual bool ParticipateUntil_c8146841a89602ee(Task* task, System::Threading::ManualResetEventSlim* predicateEvt, int32_t millisecondsTimeout) = 0;
        virtual void PulseAll_60206b9ee83ed026() = 0;
        
    };
    
    
    struct MANAGED_API IContinuation : public virtual System::Object{
        
        virtual void Execute_e0ae61e6f450d11e() = 0;
        
    };
    
}}}
namespace System {
    
    struct MANAGED_API Int32 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<int32_t>, public virtual IEquatable<int32_t>{
        static constexpr int32_t MaxValue = 2147483647;
        static constexpr int32_t MinValue = -2147483648;
        int32_t m_value;
        
        Int32(int32_t const& value) : m_value (value) { }
        operator int32_t() { return m_value; }
        typedef int32_t TBuiltinType;
        Int32* operator ->() { return this; }
        Int32() = default;
        Int32(const Int32* src) : m_value (src->m_value) { }
        operator Int32*() { return ::cli::box<Int32*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(int32_t value);
        bool Equals2(int32_t obj);
        static bool ProcessTrailingWhitespace(bool tryParse, String* s, int32_t position, Exception* exc);
        static bool Parse(String* s, bool tryParse, int32_t result, Exception* exc);
        static int32_t Parse2(String* s, IFormatProvider* provider);
        static int32_t Parse3(String* s, Globalization::NumberStyles style);
        static bool CheckStyle(Globalization::NumberStyles style, bool tryParse, Exception* exc);
        static bool JumpOverWhite(int32_t pos, String* s, bool reportError, bool tryParse, Exception* exc);
        static void FindSign(int32_t pos, String* s, Globalization::NumberFormatInfo* nfi, bool foundSign, bool negative);
        static void FindCurrency(int32_t pos, String* s, Globalization::NumberFormatInfo* nfi, bool foundCurrency);
        static bool FindExponent(int32_t pos, String* s, int32_t exponent, bool tryParse, Exception* exc);
        static bool FindOther(int32_t pos, String* s, String* other);
        static bool ValidDigit(char16_t e, bool allowHex);
        static Exception* GetFormatException();
        static bool Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* fp, bool tryParse, int32_t result, Exception* exc);
        static int32_t Parse5(String* s);
        static int32_t Parse6(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool TryParse(String* s, int32_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, int32_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(int32_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(int32_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Boolean : public virtual ValueType, public virtual IComparable, public virtual IConvertible, public virtual IComparable2<bool>, public virtual IEquatable<bool>{
        static String* FalseString;
        static String* TrueString;
        bool m_value;
        
        Boolean(bool const& value) : m_value (value) { }
        operator bool() { return m_value; }
        typedef bool TBuiltinType;
        Boolean* operator ->() { return this; }
        Boolean() = default;
        Boolean(const Boolean* src) : m_value (src->m_value) { }
        operator Boolean*() { return ::cli::box<Boolean*>(this); }
        
        static void static_constructor();
        int32_t CompareTo(Object* obj);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t CompareTo2(bool value);
        bool Equals2(bool obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool Parse(String* value);
        static bool TryParse(String* value, bool result);
        virtual String* ToString_1636a0751cb9ac11() override;
        TypeCode GetTypeCode();
        Object* ToType(Type* targetType, IFormatProvider* provider);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        String* ToString3(IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(bool value) override;
        virtual bool Equals_ea48fd0c13a733fe(bool obj) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API UInt16 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<uint16_t>, public virtual IEquatable<uint16_t>{
        static constexpr uint16_t MaxValue = 65535;
        static constexpr uint16_t MinValue = 0;
        uint16_t m_value;
        
        UInt16(uint16_t const& value) : m_value (value) { }
        operator uint16_t() { return m_value; }
        typedef uint16_t TBuiltinType;
        UInt16* operator ->() { return this; }
        UInt16() = default;
        UInt16(const UInt16* src) : m_value (src->m_value) { }
        operator UInt16*() { return ::cli::box<UInt16*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(uint16_t value);
        bool Equals2(uint16_t obj);
        static uint16_t Parse(String* s, IFormatProvider* provider);
        static uint16_t Parse2(String* s, Globalization::NumberStyles style);
        static uint16_t Parse3(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static uint16_t Parse4(String* s);
        static bool TryParse(String* s, uint16_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, uint16_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(uint16_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(uint16_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Byte : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<unsigned char>, public virtual IEquatable<unsigned char>{
        static constexpr unsigned char MinValue = 0;
        static constexpr unsigned char MaxValue = 255;
        unsigned char m_value;
        
        Byte(unsigned char const& value) : m_value (value) { }
        operator unsigned char() { return m_value; }
        typedef unsigned char TBuiltinType;
        Byte* operator ->() { return this; }
        Byte() = default;
        Byte(const Byte* src) : m_value (src->m_value) { }
        operator Byte*() { return ::cli::box<Byte*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(unsigned char value);
        bool Equals2(unsigned char obj);
        static unsigned char Parse(String* s, IFormatProvider* provider);
        static unsigned char Parse2(String* s, Globalization::NumberStyles style);
        static unsigned char Parse3(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static unsigned char Parse4(String* s);
        static bool TryParse(String* s, unsigned char result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, unsigned char result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(String* format);
        String* ToString4(IFormatProvider* provider);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        Object* ToType(Type* targetType, IFormatProvider* provider);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(unsigned char value) override;
        virtual bool Equals_ea48fd0c13a733fe(unsigned char obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API IntPtr : public virtual ValueType, public virtual Runtime::Serialization::ISerializable{
        void* m_value;
        static void** Zero;
        
        IntPtr(void* const& value) : m_value (value) { }
        operator void*() { return m_value; }
        typedef void* TBuiltinType;
        ::System::IntPtr* operator ->() { return this; }
        IntPtr() = default;
        IntPtr(const ::System::IntPtr* src) : m_value (src->m_value) { }
        operator ::System::IntPtr*() { return ::cli::box<::System::IntPtr*>(this); }
        
        void constructor(int32_t value);
        void constructor(int64_t value);
        void constructor(void* value);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t ToInt32();
        int64_t ToInt64();
        void* ToPointer();
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(String* format);
        static void* Add(void* pointer, int32_t offset);
        static void* Subtract(void* pointer, int32_t offset);
        static bool op_Equality(void* value1, void* value2);
        static bool op_Inequality(void* value1, void* value2);
        static void* op_Explicit(int32_t value);
        static void* op_Explicit2(int64_t value);
        static void* op_Explicit3(void* value);
        static int32_t op_Explicit4(void* value);
        static int64_t op_Explicit5(void* value);
        static void* op_Explicit6(void* value);
        static void* op_Addition(void* pointer, int32_t offset);
        static void* op_Subtraction(void* pointer, int32_t offset);
        static int32_t get_Size();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API Char : public virtual ValueType, public virtual IComparable, public virtual IConvertible, public virtual IComparable2<char16_t>, public virtual IEquatable<char16_t>{
        static constexpr char16_t MaxValue = u'\xffff';
        static constexpr char16_t MinValue = u'\x0';
        static constexpr int32_t CategoryDataVersion = 4;
        char16_t m_value;
        static unsigned char* category_data;
        static uint16_t* category_astral_index;
        static unsigned char* numeric_data;
        static double* numeric_data_values;
        static uint16_t* to_lower_data_low;
        static uint16_t* to_lower_data_high;
        static uint16_t* to_upper_data_low;
        static uint16_t* to_upper_data_high;
        static unsigned char category_check_pair;
        
        Char(char16_t const& value) : m_value (value) { }
        operator char16_t() { return m_value; }
        typedef char16_t TBuiltinType;
        Char* operator ->() { return this; }
        Char() = default;
        Char(const Char* src) : m_value (src->m_value) { }
        operator Char*() { return ::cli::box<Char*>(this); }
        
        static void static_constructor();
        static void GetDataTablePointers(int32_t category_data_version, unsigned char* category_data, uint16_t* category_astral_index, unsigned char* numeric_data, double* numeric_data_values, uint16_t* to_lower_data_low, uint16_t* to_lower_data_high, uint16_t* to_upper_data_low, uint16_t* to_upper_data_high);
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t CompareTo2(char16_t value);
        static String* ConvertFromUtf32(int32_t utf32);
        static int32_t ConvertToUtf32(char16_t highSurrogate, char16_t lowSurrogate);
        static int32_t ConvertToUtf322(String* s, int32_t index);
        bool Equals2(char16_t obj);
        static bool IsSurrogatePair(char16_t highSurrogate, char16_t lowSurrogate);
        static bool IsSurrogatePair2(String* s, int32_t index);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static double GetNumericValue(char16_t c);
        static double GetNumericValue2(String* s, int32_t index);
        static Globalization::UnicodeCategory GetUnicodeCategory(char16_t c);
        static Globalization::UnicodeCategory GetUnicodeCategory2(String* s, int32_t index);
        static bool IsControl(char16_t c);
        static bool IsControl2(String* s, int32_t index);
        static bool IsDigit(char16_t c);
        static bool IsDigit2(String* s, int32_t index);
        static bool IsHighSurrogate(char16_t c);
        static bool IsHighSurrogate2(String* s, int32_t index);
        static bool IsLetter(char16_t c);
        static bool IsLetter2(String* s, int32_t index);
        static bool IsLetterOrDigit(char16_t c);
        static bool IsLetterOrDigit2(String* s, int32_t index);
        static bool IsLower(char16_t c);
        static bool IsLower2(String* s, int32_t index);
        static bool IsLowSurrogate(char16_t c);
        static bool IsLowSurrogate2(String* s, int32_t index);
        static bool IsNumber(char16_t c);
        static bool IsNumber2(String* s, int32_t index);
        static bool IsPunctuation(char16_t c);
        static bool IsPunctuation2(String* s, int32_t index);
        static bool IsSeparator(char16_t c);
        static bool IsSeparator2(String* s, int32_t index);
        static bool IsSurrogate(char16_t c);
        static bool IsSurrogate2(String* s, int32_t index);
        static bool IsSymbol(char16_t c);
        static bool IsSymbol2(String* s, int32_t index);
        static bool IsUpper(char16_t c);
        static bool IsUpper2(String* s, int32_t index);
        static bool IsWhiteSpace(char16_t c);
        static bool IsWhiteSpace2(String* s, int32_t index);
        static void CheckParameter(String* s, int32_t index);
        static bool TryParse(String* s, char16_t result);
        static char16_t Parse(String* s);
        static char16_t ToLower(char16_t c);
        static char16_t ToLowerInvariant(char16_t c);
        static char16_t ToLower2(char16_t c, Globalization::CultureInfo* culture);
        static char16_t ToUpper(char16_t c);
        static char16_t ToUpperInvariant(char16_t c);
        static char16_t ToUpper2(char16_t c, Globalization::CultureInfo* culture);
        virtual String* ToString_1636a0751cb9ac11() override;
        static String* ToString3(char16_t c);
        String* ToString4(IFormatProvider* provider);
        TypeCode GetTypeCode();
        Object* ToType(Type* targetType, IFormatProvider* provider);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(char16_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(char16_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API ConsoleKeyInfo : public virtual ValueType{
        static ConsoleKeyInfo* Empty;
        ConsoleKey key;
        char16_t keychar;
        ConsoleModifiers modifiers;
        
        ConsoleKeyInfo* operator ->() { return this; }
        ConsoleKeyInfo() = default;
        ConsoleKeyInfo(const ConsoleKeyInfo* src);
        operator ConsoleKeyInfo*() { return ::cli::box<ConsoleKeyInfo*>(this); }
        
        void constructor(char16_t keyChar, ConsoleKey key, bool shift, bool alt, bool control);
        void constructor(ConsoleKeyInfo other);
        static void static_constructor();
        void SetKey(ConsoleKey key);
        void SetKeyChar(char16_t keyChar);
        void SetModifiers(bool shift, bool alt, bool control);
        virtual bool Equals_ed975d2f4a7d193e(Object* value) override;
        bool Equals2(ConsoleKeyInfo obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(ConsoleKeyInfo a, ConsoleKeyInfo b);
        static bool op_Inequality(ConsoleKeyInfo a, ConsoleKeyInfo b);
        ConsoleKey get_Key();
        char16_t get_KeyChar();
        ConsoleModifiers get_Modifiers();
        
    };
    
    
    struct MANAGED_API Int64 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<int64_t>, public virtual IEquatable<int64_t>{
        static constexpr int64_t MaxValue = 9223372036854775807L;
        static constexpr int64_t MinValue = (-9223372036854775807L - 1);
        int64_t m_value;
        
        Int64(int64_t const& value) : m_value (value) { }
        operator int64_t() { return m_value; }
        typedef int64_t TBuiltinType;
        Int64* operator ->() { return this; }
        Int64() = default;
        Int64(const Int64* src) : m_value (src->m_value) { }
        operator Int64*() { return ::cli::box<Int64*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(int64_t value);
        bool Equals2(int64_t obj);
        static bool Parse(String* s, bool tryParse, int64_t result, Exception* exc);
        static int64_t Parse2(String* s, IFormatProvider* provider);
        static int64_t Parse3(String* s, Globalization::NumberStyles style);
        static bool Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* fp, bool tryParse, int64_t result, Exception* exc);
        static int64_t Parse5(String* s);
        static int64_t Parse6(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool TryParse(String* s, int64_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, int64_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(int64_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(int64_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Double : public virtual ValueType, public virtual IComparable, public virtual IFormattable, public virtual IConvertible, public virtual IComparable2<double>, public virtual IEquatable<double>{
        static constexpr double Epsilon = std::numeric_limits<double>::epsilon();
        static constexpr double MaxValue = std::numeric_limits<double>::max();
        static constexpr double MinValue = std::numeric_limits<double>::min();
        static constexpr double NaN = std::numeric_limits<double>::quiet_NaN();
        static constexpr double NegativeInfinity = -std::numeric_limits<double>::infinity();
        static constexpr double PositiveInfinity = std::numeric_limits<double>::infinity();
        static constexpr int32_t State_AllowSign = 1;
        static constexpr int32_t State_Digits = 2;
        static constexpr int32_t State_Decimal = 3;
        static constexpr int32_t State_ExponentSign = 4;
        static constexpr int32_t State_Exponent = 5;
        static constexpr int32_t State_ConsumeWhiteSpace = 6;
        static constexpr int32_t State_Exit = 7;
        double m_value;
        
        Double(double const& value) : m_value (value) { }
        operator double() { return m_value; }
        typedef double TBuiltinType;
        Double* operator ->() { return this; }
        Double() = default;
        Double(const Double* src) : m_value (src->m_value) { }
        operator Double*() { return ::cli::box<Double*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t CompareTo2(double value);
        bool Equals2(double obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool IsInfinity(double d);
        static bool IsNaN(double d);
        static bool IsNegativeInfinity(double d);
        static bool IsPositiveInfinity(double d);
        static double Parse(String* s);
        static double Parse2(String* s, IFormatProvider* provider);
        static double Parse3(String* s, Globalization::NumberStyles style);
        static double Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool Parse5(String* s, Globalization::NumberStyles style, IFormatProvider* provider, bool tryParse, double result, Exception* exc);
        static bool TryParseStringConstant(String* format, String* s, int32_t start, int32_t end);
        static bool ParseImpl(unsigned char* byte_ptr, double value);
        static bool TryParse(String* s, Globalization::NumberStyles style, IFormatProvider* provider, double result);
        static bool TryParse2(String* s, double result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        Object* ToType(Type* targetType, IFormatProvider* provider);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        static bool op_Equality(double left, double right);
        static bool op_Inequality(double left, double right);
        static bool op_GreaterThan(double left, double right);
        static bool op_GreaterThanOrEqual(double left, double right);
        static bool op_LessThan(double left, double right);
        static bool op_LessThanOrEqual(double left, double right);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(double value) override;
        virtual bool Equals_ea48fd0c13a733fe(double obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API DateTime : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual Runtime::Serialization::ISerializable, public virtual IComparable2<DateTime>, public virtual IEquatable<DateTime>{
        static constexpr int64_t TicksMask = 4611686018427387903L;
        static constexpr int64_t KindMask = -4611686018427387904L;
        static constexpr int32_t KindShift = 62;
        static constexpr int32_t dp400 = 146097;
        static constexpr int32_t dp100 = 36524;
        static constexpr int32_t dp4 = 1461;
        static constexpr int64_t w32file_epoch = 504911232000000000L;
        static constexpr int64_t MAX_VALUE_TICKS = 3155378975999999999L;
        static constexpr int64_t UnixEpoch = 621355968000000000L;
        static constexpr int64_t ticks18991230 = 599264352000000000L;
        static constexpr double OAMinValue = std::numeric_limits<double>::epsilon();
        static constexpr double OAMaxValue = 2958466.;
        static /*constexpr*/ String* formatExceptionMessage() { return _T("String was not recognized as a valid DateTime."); }
        int64_t encoded;
        static DateTime* MaxValue;
        static DateTime* MinValue;
        static cli::array<String*>* ParseTimeFormats;
        static cli::array<String*>* ParseYearDayMonthFormats;
        static cli::array<String*>* ParseYearMonthDayFormats;
        static cli::array<String*>* ParseDayMonthYearFormats;
        static cli::array<String*>* ParseMonthDayYearFormats;
        static cli::array<String*>* ParseGenericYearMonthDayFormats;
        static cli::array<String*>* MonthDayShortFormats;
        static cli::array<String*>* DayMonthShortFormats;
        static cli::array<int32_t>* daysmonth;
        static cli::array<int32_t>* daysmonthleap;
        static Object* to_local_time_span_object;
        static int64_t last_now;
        
        DateTime* operator ->() { return this; }
        DateTime() = default;
        DateTime(const DateTime* src);
        operator DateTime*() { return ::cli::box<DateTime*>(this); }
        
        void constructor(int64_t ticks);
        void constructor(int32_t year, int32_t month, int32_t day);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond);
        void constructor(int32_t year, int32_t month, int32_t day, Globalization::Calendar* calendar);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, Globalization::Calendar* calendar);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, Globalization::Calendar* calendar);
        void constructor(int64_t ticks, DateTimeKind kind);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, DateTimeKind kind);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, DateTimeKind kind);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, Globalization::Calendar* calendar, DateTimeKind kind);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        static int32_t AbsoluteDays(int32_t year, int32_t month, int32_t day);
        int32_t FromTicks(Which what);
        static void InvalidTickValue(int64_t ticks);
        static int64_t GetTimeMonotonic();
        static int64_t GetNow();
        DateTime Add(TimeSpan value);
        DateTime AddDays(double value);
        DateTime AddTicks(int64_t value);
        DateTime AddHours(double value);
        DateTime AddMilliseconds(double value);
        DateTime AddRoundedMilliseconds(double ms);
        DateTime AddMinutes(double value);
        DateTime AddMonths(int32_t months);
        DateTime AddSeconds(double value);
        DateTime AddYears(int32_t value);
        static int32_t Compare(DateTime t1, DateTime t2);
        int32_t CompareTo(Object* value);
        bool IsDaylightSavingTime();
        int32_t CompareTo2(DateTime value);
        bool Equals(DateTime value);
        int64_t ToBinary();
        static DateTime FromBinary(int64_t dateData);
        static DateTime SpecifyKind(DateTime value, DateTimeKind kind);
        static int32_t DaysInMonth(int32_t year, int32_t month);
        virtual bool Equals_ed975d2f4a7d193e(Object* value) override;
        static bool Equals4(DateTime t1, DateTime t2);
        static DateTime FromFileTime(int64_t fileTime);
        static DateTime FromFileTimeUtc(int64_t fileTime);
        static DateTime FromOADate(double d);
        cli::array<String*>* GetDateTimeFormats();
        cli::array<String*>* GetDateTimeFormats2(char16_t format);
        cli::array<String*>* GetDateTimeFormats3(IFormatProvider* provider);
        cli::array<String*>* GetDateTimeFormats4(char16_t format, IFormatProvider* provider);
        cli::array<String*>* GetDateTimeFormats5(bool adjustutc, cli::array<String*>* patterns, Globalization::DateTimeFormatInfo* dfi);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        TypeCode GetTypeCode();
        static bool IsLeapYear(int32_t year);
        static DateTime Parse(String* s);
        static DateTime Parse2(String* s, IFormatProvider* provider);
        static DateTime Parse3(String* s, IFormatProvider* provider, Globalization::DateTimeStyles styles);
        static bool CoreParse(String* s, IFormatProvider* provider, Globalization::DateTimeStyles styles, DateTime result, DateTimeOffset dto, bool setExceptionOnError, Exception* exception);
        static DateTime ParseExact(String* s, String* format, IFormatProvider* provider);
        static cli::array<String*>* YearMonthDayFormats(Globalization::DateTimeFormatInfo* dfi);
        static int32_t _ParseNumber(String* s, int32_t valuePos, int32_t min_digits, int32_t digits, bool leadingzero, bool sloppy_parsing, int32_t num_parsed);
        static int32_t _ParseEnum(String* s, int32_t sPos, cli::array<String*>* values, cli::array<String*>* invValues, bool exact, int32_t num_parsed);
        static bool _ParseString(String* s, int32_t sPos, int32_t maxlength, String* value, int32_t num_parsed);
        static bool _ParseAmPm(String* s, int32_t valuePos, int32_t num, Globalization::DateTimeFormatInfo* dfi, bool exact, int32_t num_parsed, int32_t ampm);
        static bool _ParseTimeSeparator(String* s, int32_t sPos, Globalization::DateTimeFormatInfo* dfi, bool exact, int32_t num_parsed);
        static bool _ParseDateSeparator(String* s, int32_t sPos, Globalization::DateTimeFormatInfo* dfi, bool exact, int32_t num_parsed);
        static bool IsLetter(String* s, int32_t pos);
        static bool _DoParse(String* s, String* firstPart, String* secondPart, bool exact, DateTime result, DateTimeOffset dto, Globalization::DateTimeFormatInfo* dfi, Globalization::DateTimeStyles style, bool firstPartIsDate, bool incompleteFormat, bool longYear);
        static DateTime ParseExact2(String* s, String* format, IFormatProvider* provider, Globalization::DateTimeStyles style);
        static DateTime ParseExact3(String* s, cli::array<String*>* formats, IFormatProvider* provider, Globalization::DateTimeStyles style);
        static void CheckStyle(Globalization::DateTimeStyles style);
        static bool TryParse(String* s, DateTime result);
        static bool TryParse2(String* s, IFormatProvider* provider, Globalization::DateTimeStyles styles, DateTime result);
        static bool TryParseExact(String* s, String* format, IFormatProvider* provider, Globalization::DateTimeStyles style, DateTime result);
        static bool TryParseExact2(String* s, cli::array<String*>* formats, IFormatProvider* provider, Globalization::DateTimeStyles style, DateTime result);
        static bool ParseExact4(String* s, cli::array<String*>* formats, Globalization::DateTimeFormatInfo* dfi, Globalization::DateTimeStyles style, DateTime ret, bool exact, bool longYear, bool setExceptionOnError, Exception* exception);
        TimeSpan Subtract(DateTime value);
        DateTime Subtract2(TimeSpan value);
        int64_t ToFileTime();
        int64_t ToFileTimeUtc();
        String* ToLongDateString();
        String* ToLongTimeString();
        double ToOADate();
        String* ToShortDateString();
        String* ToShortTimeString();
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        DateTime ToLocalTime();
        DateTime ToUniversalTime();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static DateTime op_Addition(DateTime d, TimeSpan t);
        static bool op_Equality(DateTime d1, DateTime d2);
        static bool op_GreaterThan(DateTime t1, DateTime t2);
        static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2);
        static bool op_Inequality(DateTime d1, DateTime d2);
        static bool op_LessThan(DateTime t1, DateTime t2);
        static bool op_LessThanOrEqual(DateTime t1, DateTime t2);
        static TimeSpan op_Subtraction(DateTime d1, DateTime d2);
        static DateTime op_Subtraction2(DateTime d, TimeSpan t);
        DateTime get_Date();
        int32_t get_Month();
        int32_t get_Day();
        DayOfWeek get_DayOfWeek();
        int32_t get_DayOfYear();
        TimeSpan get_TimeOfDay();
        int32_t get_Hour();
        int32_t get_Minute();
        int32_t get_Second();
        int32_t get_Millisecond();
        static DateTime get_Now();
        int64_t get_Ticks();
        static DateTime get_Today();
        static DateTime get_UtcNow();
        int32_t get_Year();
        DateTimeKind get_Kind();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(DateTime value) override;
        virtual bool Equals_ea48fd0c13a733fe(DateTime value) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API TimeSpan : public virtual ValueType, public virtual IComparable, public virtual IComparable2<TimeSpan>, public virtual IEquatable<TimeSpan>, public virtual IFormattable{
        static constexpr int64_t TicksPerDay = 864000000000L;
        static constexpr int64_t TicksPerHour = 36000000000L;
        static constexpr int64_t TicksPerMillisecond = 10000L;
        static constexpr int64_t TicksPerMinute = 600000000L;
        static constexpr int64_t TicksPerSecond = 10000000L;
        static TimeSpan* MaxValue;
        static TimeSpan* MinValue;
        static TimeSpan* Zero;
        int64_t _ticks;
        
        TimeSpan* operator ->() { return this; }
        TimeSpan() = default;
        TimeSpan(const TimeSpan* src);
        operator TimeSpan*() { return ::cli::box<TimeSpan*>(this); }
        
        void constructor(int64_t ticks);
        void constructor(int32_t hours, int32_t minutes, int32_t seconds);
        void constructor(int32_t days, int32_t hours, int32_t minutes, int32_t seconds);
        void constructor(int32_t days, int32_t hours, int32_t minutes, int32_t seconds, int32_t milliseconds);
        static void static_constructor();
        static bool CalculateTicks(int32_t days, int32_t hours, int32_t minutes, int32_t seconds, int32_t milliseconds, bool throwExc, int64_t result);
        TimeSpan Add(TimeSpan ts);
        static int32_t Compare(TimeSpan t1, TimeSpan t2);
        int32_t CompareTo(Object* value);
        int32_t CompareTo2(TimeSpan value);
        bool Equals(TimeSpan obj);
        TimeSpan Duration();
        virtual bool Equals_ed975d2f4a7d193e(Object* value) override;
        static bool Equals4(TimeSpan t1, TimeSpan t2);
        static TimeSpan FromDays(double value);
        static TimeSpan FromHours(double value);
        static TimeSpan FromMinutes(double value);
        static TimeSpan FromSeconds(double value);
        static TimeSpan FromMilliseconds(double value);
        static TimeSpan From(double value, int64_t tickMultiplicator);
        static TimeSpan FromTicks(int64_t value);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        TimeSpan Negate();
        static TimeSpan Parse(String* s);
        static bool TryParse(String* s, TimeSpan result);
        static TimeSpan Parse2(String* input, IFormatProvider* formatProvider);
        static bool TryParse2(String* input, IFormatProvider* formatProvider, TimeSpan result);
        static TimeSpan ParseExact(String* input, String* format, IFormatProvider* formatProvider);
        static TimeSpan ParseExact2(String* input, String* format, IFormatProvider* formatProvider, Globalization::TimeSpanStyles styles);
        static TimeSpan ParseExact3(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider);
        static TimeSpan ParseExact4(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider, Globalization::TimeSpanStyles styles);
        static bool TryParseExact(String* input, String* format, IFormatProvider* formatProvider, TimeSpan result);
        static bool TryParseExact2(String* input, String* format, IFormatProvider* formatProvider, Globalization::TimeSpanStyles styles, TimeSpan result);
        static bool TryParseExact3(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider, TimeSpan result);
        static bool TryParseExact4(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider, Globalization::TimeSpanStyles styles, TimeSpan result);
        TimeSpan Subtract(TimeSpan ts);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(String* format);
        String* ToString4(String* format, IFormatProvider* formatProvider);
        String* ToStringCustom(String* format);
        static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2);
        static bool op_Equality(TimeSpan t1, TimeSpan t2);
        static bool op_GreaterThan(TimeSpan t1, TimeSpan t2);
        static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2);
        static bool op_Inequality(TimeSpan t1, TimeSpan t2);
        static bool op_LessThan(TimeSpan t1, TimeSpan t2);
        static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2);
        static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2);
        static TimeSpan op_UnaryNegation(TimeSpan t);
        static TimeSpan op_UnaryPlus(TimeSpan t);
        int32_t get_Days();
        int32_t get_Hours();
        int32_t get_Milliseconds();
        int32_t get_Minutes();
        int32_t get_Seconds();
        int64_t get_Ticks();
        double get_TotalDays();
        double get_TotalHours();
        double get_TotalMilliseconds();
        double get_TotalMinutes();
        double get_TotalSeconds();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(TimeSpan value) override;
        virtual bool Equals_ea48fd0c13a733fe(TimeSpan obj) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* formatProvider) override;
    };
    
    
    struct MANAGED_API UInt32 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<uint32_t>, public virtual IEquatable<uint32_t>{
        static constexpr uint32_t MaxValue = 4294967295U;
        static constexpr uint32_t MinValue = 0U;
        uint32_t m_value;
        
        UInt32(uint32_t const& value) : m_value (value) { }
        operator uint32_t() { return m_value; }
        typedef uint32_t TBuiltinType;
        UInt32* operator ->() { return this; }
        UInt32() = default;
        UInt32(const UInt32* src) : m_value (src->m_value) { }
        operator UInt32*() { return ::cli::box<UInt32*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(uint32_t value);
        bool Equals2(uint32_t obj);
        static bool Parse(String* s, bool tryParse, uint32_t result, Exception* exc);
        static bool Parse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, bool tryParse, uint32_t result, Exception* exc);
        static uint32_t Parse3(String* s);
        static uint32_t Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static uint32_t Parse5(String* s, IFormatProvider* provider);
        static uint32_t Parse6(String* s, Globalization::NumberStyles style);
        static bool TryParse(String* s, uint32_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, uint32_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(uint32_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(uint32_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Int16 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<int16_t>, public virtual IEquatable<int16_t>{
        static constexpr int16_t MaxValue = 32767;
        static constexpr int16_t MinValue = -32768;
        int16_t m_value;
        
        Int16(int16_t const& value) : m_value (value) { }
        operator int16_t() { return m_value; }
        typedef int16_t TBuiltinType;
        Int16* operator ->() { return this; }
        Int16() = default;
        Int16(const Int16* src) : m_value (src->m_value) { }
        operator Int16*() { return ::cli::box<Int16*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(int16_t value);
        bool Equals2(int16_t obj);
        static bool Parse(String* s, bool tryParse, int16_t result, Exception* exc);
        static int16_t Parse2(String* s, IFormatProvider* provider);
        static int16_t Parse3(String* s, Globalization::NumberStyles style);
        static int16_t Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static int16_t Parse5(String* s);
        static bool TryParse(String* s, int16_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, int16_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(int16_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(int16_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Guid : public virtual ValueType, public virtual IFormattable, public virtual IComparable, public virtual IComparable2<Guid>, public virtual IEquatable<Guid>{
        int32_t _a;
        int16_t _b;
        int16_t _c;
        unsigned char _d;
        unsigned char _e;
        unsigned char _f;
        unsigned char _g;
        unsigned char _h;
        unsigned char _i;
        unsigned char _j;
        unsigned char _k;
        static Guid* Empty;
        static Object* _rngAccess;
        static Security::Cryptography::RandomNumberGenerator* _rng;
        static Security::Cryptography::RandomNumberGenerator* _fastRng;
        
        Guid* operator ->() { return this; }
        Guid() = default;
        Guid(const Guid* src);
        operator Guid*() { return ::cli::box<Guid*>(this); }
        
        void constructor(cli::array<unsigned char>* b);
        void constructor(String* g);
        void constructor(int32_t a, int16_t b, int16_t c, cli::array<unsigned char>* d);
        void constructor(int32_t a, int16_t b, int16_t c, unsigned char d, unsigned char e, unsigned char f, unsigned char g, unsigned char h, unsigned char i, unsigned char j, unsigned char k);
        void constructor(uint32_t a, uint16_t b, uint16_t c, unsigned char d, unsigned char e, unsigned char f, unsigned char g, unsigned char h, unsigned char i, unsigned char j, unsigned char k);
        static void static_constructor();
        static void CheckNull(Object* o);
        static void CheckLength(cli::array<unsigned char>* o, int32_t l);
        static void CheckArray(cli::array<unsigned char>* o, int32_t l);
        static Exception* CreateFormatException(String* s);
        static int32_t Compare(int32_t x, int32_t y);
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* o) override;
        int32_t CompareTo2(Guid value);
        bool Equals2(Guid g);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static char16_t ToHex(int32_t b);
        static Guid NewGuid();
        static cli::array<unsigned char>* FastNewGuidArray();
        cli::array<unsigned char>* ToByteArray();
        static void AppendInt(Text::StringBuilder* builder, int32_t value);
        static void AppendShort(Text::StringBuilder* builder, int16_t value);
        static void AppendByte(Text::StringBuilder* builder, unsigned char value);
        String* BaseToString(bool h, bool p, bool b);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(String* format);
        String* ToString4(String* format, IFormatProvider* provider);
        static Guid Parse(String* input);
        static Guid ParseExact(String* input, String* format);
        static bool TryParse(String* input, Guid result);
        static bool TryParseExact(String* input, String* format, Guid result);
        static Format ParseFormat(String* format);
        static bool op_Equality(Guid a, Guid b);
        static bool op_Inequality(Guid a, Guid b);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(Guid value) override;
        virtual bool Equals_ea48fd0c13a733fe(Guid g) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API ModuleHandle : public virtual ValueType{
        void* value;
        static ModuleHandle* EmptyHandle;
        
        ModuleHandle* operator ->() { return this; }
        ModuleHandle() = default;
        ModuleHandle(const ModuleHandle* src);
        operator ModuleHandle*() { return ::cli::box<ModuleHandle*>(this); }
        
        void constructor(void* v);
        static void static_constructor();
        void GetPEKind(Reflection::PortableExecutableKinds peKind, Reflection::ImageFileMachine machine);
        RuntimeFieldHandle ResolveFieldHandle(int32_t fieldToken);
        RuntimeMethodHandle ResolveMethodHandle(int32_t methodToken);
        RuntimeTypeHandle ResolveTypeHandle(int32_t typeToken);
        cli::array<void*>* ptrs_from_handles(cli::array<RuntimeTypeHandle>* handles);
        RuntimeTypeHandle ResolveTypeHandle2(int32_t typeToken, cli::array<RuntimeTypeHandle>* typeInstantiationContext, cli::array<RuntimeTypeHandle>* methodInstantiationContext);
        RuntimeMethodHandle ResolveMethodHandle2(int32_t methodToken, cli::array<RuntimeTypeHandle>* typeInstantiationContext, cli::array<RuntimeTypeHandle>* methodInstantiationContext);
        RuntimeFieldHandle ResolveFieldHandle2(int32_t fieldToken, cli::array<RuntimeTypeHandle>* typeInstantiationContext, cli::array<RuntimeTypeHandle>* methodInstantiationContext);
        RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken(int32_t fieldToken);
        RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken(int32_t methodToken);
        RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken(int32_t typeToken);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals2(ModuleHandle handle);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(ModuleHandle left, ModuleHandle right);
        static bool op_Inequality(ModuleHandle left, ModuleHandle right);
        void* get_Value();
        int32_t get_MDStreamVersion();
        
    };
    
    
    struct MANAGED_API SByte : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<signed char>, public virtual IEquatable<signed char>{
        static constexpr signed char MinValue = -128;
        static constexpr signed char MaxValue = 127;
        signed char m_value;
        
        SByte(signed char const& value) : m_value (value) { }
        operator signed char() { return m_value; }
        typedef signed char TBuiltinType;
        SByte* operator ->() { return this; }
        SByte() = default;
        SByte(const SByte* src) : m_value (src->m_value) { }
        operator SByte*() { return ::cli::box<SByte*>(this); }
        
        int32_t CompareTo(Object* obj);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(signed char value);
        bool Equals2(signed char obj);
        static bool Parse(String* s, bool tryParse, signed char result, Exception* exc);
        static signed char Parse2(String* s, IFormatProvider* provider);
        static signed char Parse3(String* s, Globalization::NumberStyles style);
        static signed char Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static signed char Parse5(String* s);
        static bool TryParse(String* s, signed char result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, signed char result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(signed char value) override;
        virtual bool Equals_ea48fd0c13a733fe(signed char obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API Single : public virtual ValueType, public virtual IComparable, public virtual IFormattable, public virtual IConvertible, public virtual IComparable2<float>, public virtual IEquatable<float>{
        static constexpr float Epsilon = std::numeric_limits<float>::epsilon();
        static constexpr float MaxValue = std::numeric_limits<float>::max();
        static constexpr float MinValue = std::numeric_limits<float>::min();
        static constexpr float NaN = std::numeric_limits<float>::quiet_NaN();
        static constexpr float PositiveInfinity = std::numeric_limits<float>::infinity();
        static constexpr float NegativeInfinity = -std::numeric_limits<float>::infinity();
        static constexpr double MaxValueEpsilon = 3.61471124579618E+29;
        float m_value;
        
        Single(float const& value) : m_value (value) { }
        operator float() { return m_value; }
        typedef float TBuiltinType;
        Single* operator ->() { return this; }
        Single() = default;
        Single(const Single* src) : m_value (src->m_value) { }
        operator Single*() { return ::cli::box<Single*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t CompareTo2(float value);
        bool Equals2(float obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool IsInfinity(float f);
        static bool IsNaN(float f);
        static bool IsNegativeInfinity(float f);
        static bool IsPositiveInfinity(float f);
        static float Parse(String* s);
        static float Parse2(String* s, IFormatProvider* provider);
        static float Parse3(String* s, Globalization::NumberStyles style);
        static float Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool TryParse(String* s, Globalization::NumberStyles style, IFormatProvider* provider, float result);
        static bool TryParse2(String* s, float result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        static bool op_Equality(float left, float right);
        static bool op_Inequality(float left, float right);
        static bool op_GreaterThan(float left, float right);
        static bool op_GreaterThanOrEqual(float left, float right);
        static bool op_LessThan(float left, float right);
        static bool op_LessThanOrEqual(float left, float right);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(float value) override;
        virtual bool Equals_ea48fd0c13a733fe(float obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API UInt64 : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<uint64_t>, public virtual IEquatable<uint64_t>{
        static constexpr uint64_t MaxValue = 18446744073709551615UL;
        static constexpr uint64_t MinValue = 0UL;
        uint64_t m_value;
        
        UInt64(uint64_t const& value) : m_value (value) { }
        operator uint64_t() { return m_value; }
        typedef uint64_t TBuiltinType;
        UInt64* operator ->() { return this; }
        UInt64() = default;
        UInt64(const UInt64* src) : m_value (src->m_value) { }
        operator UInt64*() { return ::cli::box<UInt64*>(this); }
        
        int32_t CompareTo(Object* value);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t CompareTo2(uint64_t value);
        bool Equals2(uint64_t obj);
        static uint64_t Parse(String* s);
        static bool Parse2(String* s, bool tryParse, uint64_t result, Exception* exc);
        static uint64_t Parse3(String* s, IFormatProvider* provider);
        static uint64_t Parse4(String* s, Globalization::NumberStyles style);
        static bool Parse5(String* s, Globalization::NumberStyles style, IFormatProvider* provider, bool tryParse, uint64_t result, Exception* exc);
        static uint64_t Parse6(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool TryParse(String* s, uint64_t result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, uint64_t result);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* provider);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(uint64_t value) override;
        virtual bool Equals_ea48fd0c13a733fe(uint64_t obj) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API UIntPtr : public virtual ValueType, public virtual Runtime::Serialization::ISerializable{
        static void** Zero;
        void* m_value;
        
        UIntPtr(void* const& value) : m_value (value) { }
        operator void*() { return m_value; }
        typedef void* TBuiltinType;
        UIntPtr* operator ->() { return this; }
        UIntPtr() = default;
        UIntPtr(const UIntPtr* src) : m_value (src->m_value) { }
        operator UIntPtr*() { return ::cli::box<UIntPtr*>(this); }
        
        void constructor(uint64_t value);
        void constructor(uint32_t value);
        void constructor(void* value);
        static void static_constructor();
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        uint32_t ToUInt32();
        uint64_t ToUInt64();
        void* ToPointer();
        virtual String* ToString_1636a0751cb9ac11() override;
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static void* Add(void* pointer, int32_t offset);
        static void* Subtract(void* pointer, int32_t offset);
        static bool op_Equality(void* value1, void* value2);
        static bool op_Inequality(void* value1, void* value2);
        static uint64_t op_Explicit(void* value);
        static uint32_t op_Explicit2(void* value);
        static void* op_Explicit3(uint64_t value);
        static void* op_Explicit4(void* value);
        static void* op_Explicit5(void* value);
        static void* op_Explicit6(uint32_t value);
        static void* op_Addition(void* pointer, int32_t offset);
        static void* op_Subtraction(void* pointer, int32_t offset);
        static int32_t get_Size();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API DateTimeOffset : public virtual ValueType, public virtual IComparable, public virtual IFormattable, public virtual Runtime::Serialization::ISerializable, public virtual Runtime::Serialization::IDeserializationCallback, public virtual IComparable2<DateTimeOffset>, public virtual IEquatable<DateTimeOffset>{
        static DateTimeOffset* MaxValue;
        static DateTimeOffset* MinValue;
        DateTime dt;
        TimeSpan utc_offset;
        
        DateTimeOffset* operator ->() { return this; }
        DateTimeOffset() = default;
        DateTimeOffset(const DateTimeOffset* src);
        operator DateTimeOffset*() { return ::cli::box<DateTimeOffset*>(this); }
        
        void constructor(DateTime dateTime);
        void constructor(DateTime dateTime, TimeSpan offset);
        void constructor(int64_t ticks, TimeSpan offset);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, TimeSpan offset);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, TimeSpan offset);
        void constructor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, Globalization::Calendar* calendar, TimeSpan offset);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        DateTimeOffset Add(TimeSpan timeSpan);
        DateTimeOffset AddDays(double days);
        DateTimeOffset AddHours(double hours);
        DateTimeOffset AddMilliseconds(double milliseconds);
        DateTimeOffset AddMinutes(double minutes);
        DateTimeOffset AddMonths(int32_t months);
        DateTimeOffset AddSeconds(double seconds);
        DateTimeOffset AddTicks(int64_t ticks);
        DateTimeOffset AddYears(int32_t years);
        static int32_t Compare(DateTimeOffset first, DateTimeOffset second);
        int32_t CompareTo(DateTimeOffset other);
        int32_t CompareTo2(Object* obj);
        bool Equals(DateTimeOffset other);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        static bool Equals4(DateTimeOffset first, DateTimeOffset second);
        bool EqualsExact(DateTimeOffset other);
        static DateTimeOffset FromFileTime(int64_t fileTime);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void OnDeserialization(Object* sender);
        static DateTimeOffset Parse(String* input);
        static DateTimeOffset Parse2(String* input, IFormatProvider* formatProvider);
        static DateTimeOffset Parse3(String* input, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles);
        static DateTimeOffset ParseExact(String* input, String* format, IFormatProvider* formatProvider);
        static DateTimeOffset ParseExact2(String* input, String* format, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles);
        static DateTimeOffset ParseExact3(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles);
        static bool ParseExact4(String* input, cli::array<String*>* formats, Globalization::DateTimeFormatInfo* dfi, Globalization::DateTimeStyles styles, DateTimeOffset ret);
        static bool DoParse(String* input, String* format, bool exact, DateTimeOffset result, Globalization::DateTimeFormatInfo* dfi, Globalization::DateTimeStyles styles);
        static int32_t ParseNumber(String* input, int32_t pos, int32_t digits, bool leading_zero, bool allow_leading_white, int32_t result);
        static int32_t ParseNumber2(String* input, int32_t pos, int32_t digits, bool leading_zero, bool allow_leading_white, int32_t result, int32_t digit_parsed);
        static int32_t ParseEnum(String* input, int32_t pos, cli::array<String*>* enums, bool allow_leading_white, int32_t result);
        static int32_t ParseChar(String* input, int32_t pos, char16_t c, bool allow_leading_white, int32_t result);
        TimeSpan Subtract(DateTimeOffset value);
        DateTimeOffset Subtract2(TimeSpan value);
        int64_t ToFileTime();
        DateTimeOffset ToLocalTime();
        DateTimeOffset ToOffset(TimeSpan offset);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* formatProvider);
        String* ToString4(String* format);
        String* ToString5(String* format, IFormatProvider* formatProvider);
        DateTimeOffset ToUniversalTime();
        static bool TryParse(String* input, DateTimeOffset result);
        static bool TryParse2(String* input, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles, DateTimeOffset result);
        static bool TryParseExact(String* input, String* format, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles, DateTimeOffset result);
        static bool TryParseExact2(String* input, cli::array<String*>* formats, IFormatProvider* formatProvider, Globalization::DateTimeStyles styles, DateTimeOffset result);
        static DateTimeOffset op_Addition(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);
        static bool op_Equality(DateTimeOffset left, DateTimeOffset right);
        static bool op_GreaterThan(DateTimeOffset left, DateTimeOffset right);
        static bool op_GreaterThanOrEqual(DateTimeOffset left, DateTimeOffset right);
        static DateTimeOffset op_Implicit(DateTime dateTime);
        static bool op_Inequality(DateTimeOffset left, DateTimeOffset right);
        static bool op_LessThan(DateTimeOffset left, DateTimeOffset right);
        static bool op_LessThanOrEqual(DateTimeOffset left, DateTimeOffset right);
        static TimeSpan op_Subtraction(DateTimeOffset left, DateTimeOffset right);
        static DateTimeOffset op_Subtraction2(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);
        DateTime get_Date();
        DateTime get_DateTime();
        int32_t get_Day();
        DayOfWeek get_DayOfWeek();
        int32_t get_DayOfYear();
        int32_t get_Hour();
        DateTime get_LocalDateTime();
        int32_t get_Millisecond();
        int32_t get_Minute();
        int32_t get_Month();
        static DateTimeOffset get_Now();
        TimeSpan get_Offset();
        int32_t get_Second();
        int64_t get_Ticks();
        TimeSpan get_TimeOfDay();
        DateTime get_UtcDateTime();
        static DateTimeOffset get_UtcNow();
        int64_t get_UtcTicks();
        int32_t get_Year();
        
        virtual int32_t CompareTo_8a8b7d6c83beb422(DateTimeOffset other) override;
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual bool Equals_ea48fd0c13a733fe(DateTimeOffset other) override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual void OnDeserialization_e9ecfecba8df9754(Object* sender) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* formatProvider) override;
    };
    
    
    struct MANAGED_API Decimal : public virtual ValueType, public virtual IFormattable, public virtual IConvertible, public virtual IComparable, public virtual IComparable2<Decimal>, public virtual IEquatable<Decimal>, public virtual Runtime::Serialization::IDeserializationCallback{
        static /*constexpr*/ Decimal MinValue() { return cli::decimal<int>("-79228162514264337593543950335"); }
        static /*constexpr*/ Decimal MaxValue() { return cli::decimal<int>("79228162514264337593543950335"); }
        static /*constexpr*/ Decimal MinusOne() { return cli::decimal<int>("-1"); }
        static /*constexpr*/ Decimal One() { return cli::decimal<int>("1"); }
        static /*constexpr*/ Decimal Zero() { return cli::decimal<int>("0"); }
        static constexpr uint32_t MAX_SCALE = 28U;
        static constexpr uint32_t SIGN_FLAG = 2147483648U;
        static constexpr int32_t SCALE_SHIFT = 16;
        static constexpr uint32_t RESERVED_SS32_BITS = 2130771967U;
        static Decimal* MaxValueDiv10;
        uint32_t flags;
        uint32_t hi;
        uint32_t lo;
        uint32_t mid;
        
        Decimal* operator ->() { return this; }
        Decimal() = default;
        Decimal(const Decimal* src);
        operator Decimal*() { return ::cli::box<Decimal*>(this); }
        
        void constructor(int32_t lo, int32_t mid, int32_t hi, bool isNegative, unsigned char scale);
        void constructor(int32_t value);
        void constructor(uint32_t value);
        void constructor(int64_t value);
        void constructor(uint64_t value);
        void constructor(float value);
        void constructor(double value);
        void constructor(cli::array<int32_t>* bits);
        static void static_constructor();
        static Decimal FromOACurrency(int64_t cy);
        static cli::array<int32_t>* GetBits(Decimal d);
        static Decimal Negate(Decimal d);
        static Decimal Add(Decimal d1, Decimal d2);
        static Decimal Subtract(Decimal d1, Decimal d2);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static uint64_t u64(Decimal value);
        static int64_t s64(Decimal value);
        static bool Equals(Decimal d1, Decimal d2);
        virtual bool Equals_ed975d2f4a7d193e(Object* value) override;
        bool IsZero();
        bool IsNegative();
        static Decimal Floor(Decimal d);
        static Decimal Truncate(Decimal d);
        static Decimal Round(Decimal d, int32_t decimals);
        static Decimal Round2(Decimal d, int32_t decimals, MidpointRounding mode);
        static Decimal Round3(Decimal d);
        static Decimal Round4(Decimal d, MidpointRounding mode);
        static Decimal Multiply(Decimal d1, Decimal d2);
        static Decimal Divide(Decimal d1, Decimal d2);
        static Decimal Remainder(Decimal d1, Decimal d2);
        static int32_t Compare(Decimal d1, Decimal d2);
        int32_t CompareTo(Object* value);
        int32_t CompareTo2(Decimal value);
        bool Equals4(Decimal value);
        static Decimal Ceiling(Decimal d);
        static Decimal Parse(String* s);
        static Decimal Parse2(String* s, Globalization::NumberStyles style);
        static Decimal Parse3(String* s, IFormatProvider* provider);
        static void ThrowAtPos(int32_t pos);
        static void ThrowInvalidExp();
        static String* stripStyles(String* s, Globalization::NumberStyles style, Globalization::NumberFormatInfo* nfi, int32_t decPos, bool isNegative, bool expFlag, int32_t exp, bool throwex);
        static Decimal Parse4(String* s, Globalization::NumberStyles style, IFormatProvider* provider);
        static bool TryParse(String* s, Decimal result);
        static bool TryParse2(String* s, Globalization::NumberStyles style, IFormatProvider* provider, Decimal result);
        static bool PerformParse(String* s, Globalization::NumberStyles style, IFormatProvider* provider, Decimal res, bool throwex);
        TypeCode GetTypeCode();
        static unsigned char ToByte(Decimal value);
        static double ToDouble(Decimal d);
        static int16_t ToInt16(Decimal value);
        static int32_t ToInt32(Decimal d);
        static int64_t ToInt64(Decimal d);
        static int64_t ToOACurrency(Decimal value);
        static signed char ToSByte(Decimal value);
        static float ToSingle(Decimal d);
        static uint16_t ToUInt16(Decimal value);
        static uint32_t ToUInt32(Decimal d);
        static uint64_t ToUInt64(Decimal d);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte2(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble2(IFormatProvider* provider);
        int16_t ToInt162(IFormatProvider* provider);
        int32_t ToInt322(IFormatProvider* provider);
        int64_t ToInt642(IFormatProvider* provider);
        signed char ToSByte2(IFormatProvider* provider);
        float ToSingle2(IFormatProvider* provider);
        uint16_t ToUInt162(IFormatProvider* provider);
        uint32_t ToUInt322(IFormatProvider* provider);
        uint64_t ToUInt642(IFormatProvider* provider);
        String* ToString(String* format, IFormatProvider* provider);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString4(String* format);
        String* ToString5(IFormatProvider* provider);
        void OnDeserialization(Object* sender);
        static int32_t decimal2UInt64(Decimal val, uint64_t result);
        static int32_t decimal2Int64(Decimal val, int64_t result);
        static int32_t double2decimal(Decimal erg, double val, int32_t digits);
        static int32_t decimalIncr(Decimal d1, Decimal d2);
        static int32_t decimal2string(Decimal val, int32_t digits, int32_t decimals, cli::array<char16_t>* bufDigits, int32_t bufSize, int32_t decPos, int32_t sign);
        static int32_t string2decimal(Decimal val, String* sDigits, uint32_t decPos, int32_t sign);
        static int32_t decimalSetExponent(Decimal val, int32_t exp);
        static double decimal2double(Decimal val);
        static void decimalFloorAndTrunc(Decimal val, int32_t floorFlag);
        static int32_t decimalMult(Decimal pd1, Decimal pd2);
        static int32_t decimalDiv(Decimal pc, Decimal pa, Decimal pb);
        static int32_t decimalIntDiv(Decimal pc, Decimal pa, Decimal pb);
        static int32_t decimalCompare(Decimal d1, Decimal d2);
        static Decimal op_Addition(Decimal d1, Decimal d2);
        static Decimal op_Decrement(Decimal d);
        static Decimal op_Increment(Decimal d);
        static Decimal op_Subtraction(Decimal d1, Decimal d2);
        static Decimal op_UnaryNegation(Decimal d);
        static Decimal op_UnaryPlus(Decimal d);
        static Decimal op_Multiply(Decimal d1, Decimal d2);
        static Decimal op_Division(Decimal d1, Decimal d2);
        static Decimal op_Modulus(Decimal d1, Decimal d2);
        static unsigned char op_Explicit(Decimal value);
        static signed char op_Explicit2(Decimal value);
        static char16_t op_Explicit3(Decimal value);
        static int16_t op_Explicit4(Decimal value);
        static uint16_t op_Explicit5(Decimal value);
        static int32_t op_Explicit6(Decimal value);
        static uint32_t op_Explicit7(Decimal value);
        static int64_t op_Explicit8(Decimal value);
        static uint64_t op_Explicit9(Decimal value);
        static Decimal op_Implicit(unsigned char value);
        static Decimal op_Implicit2(signed char value);
        static Decimal op_Implicit3(int16_t value);
        static Decimal op_Implicit4(uint16_t value);
        static Decimal op_Implicit5(char16_t value);
        static Decimal op_Implicit6(int32_t value);
        static Decimal op_Implicit7(uint32_t value);
        static Decimal op_Implicit8(int64_t value);
        static Decimal op_Implicit9(uint64_t value);
        static Decimal op_Explicit10(float value);
        static Decimal op_Explicit11(double value);
        static float op_Explicit12(Decimal value);
        static double op_Explicit13(Decimal value);
        static bool op_Inequality(Decimal d1, Decimal d2);
        static bool op_Equality(Decimal d1, Decimal d2);
        static bool op_GreaterThan(Decimal d1, Decimal d2);
        static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2);
        static bool op_LessThan(Decimal d1, Decimal d2);
        static bool op_LessThanOrEqual(Decimal d1, Decimal d2);
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(Decimal value) override;
        virtual bool Equals_ea48fd0c13a733fe(Decimal value) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
        virtual String* ToString_91ad8e2580555a25(String* format, IFormatProvider* provider) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual void OnDeserialization_e9ecfecba8df9754(Object* sender) override;
    };
    
}
namespace System { namespace Configuration { namespace Assemblies {
    
    struct MANAGED_API AssemblyHash : public virtual System::ValueType, public virtual System::ICloneable{
        AssemblyHashAlgorithm _algorithm;
        cli::array<unsigned char>* _value;
        static AssemblyHash* Empty;
        
        AssemblyHash* operator ->() { return this; }
        AssemblyHash() = default;
        AssemblyHash(const AssemblyHash* src);
        operator AssemblyHash*() { return ::cli::box<AssemblyHash*>(this); }
        
        void constructor(AssemblyHashAlgorithm algorithm, cli::array<unsigned char>* value);
        void constructor(cli::array<unsigned char>* value);
        static void static_constructor();
        System::Object* Clone();
        cli::array<unsigned char>* GetValue();
        void SetValue(cli::array<unsigned char>* value);
        AssemblyHashAlgorithm get_Algorithm();
        AssemblyHashAlgorithm set_Algorithm(AssemblyHashAlgorithm value);
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API EventToken : public virtual System::ValueType{
        int32_t tokValue;
        static EventToken* Empty;
        
        EventToken* operator ->() { return this; }
        EventToken() = default;
        EventToken(const EventToken* src);
        operator EventToken*() { return ::cli::box<EventToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(EventToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(EventToken a, EventToken b);
        static bool op_Inequality(EventToken a, EventToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API FieldToken : public virtual System::ValueType{
        int32_t tokValue;
        static FieldToken* Empty;
        
        FieldToken* operator ->() { return this; }
        FieldToken() = default;
        FieldToken(const FieldToken* src);
        operator FieldToken*() { return ::cli::box<FieldToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(FieldToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(FieldToken a, FieldToken b);
        static bool op_Inequality(FieldToken a, FieldToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API MethodToken : public virtual System::ValueType{
        int32_t tokValue;
        static MethodToken* Empty;
        
        MethodToken* operator ->() { return this; }
        MethodToken() = default;
        MethodToken(const MethodToken* src);
        operator MethodToken*() { return ::cli::box<MethodToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(MethodToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(MethodToken a, MethodToken b);
        static bool op_Inequality(MethodToken a, MethodToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API ParameterToken : public virtual System::ValueType{
        int32_t tokValue;
        static ParameterToken* Empty;
        
        ParameterToken* operator ->() { return this; }
        ParameterToken() = default;
        ParameterToken(const ParameterToken* src);
        operator ParameterToken*() { return ::cli::box<ParameterToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(ParameterToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(ParameterToken a, ParameterToken b);
        static bool op_Inequality(ParameterToken a, ParameterToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API PropertyToken : public virtual System::ValueType{
        int32_t tokValue;
        static PropertyToken* Empty;
        
        PropertyToken* operator ->() { return this; }
        PropertyToken() = default;
        PropertyToken(const PropertyToken* src);
        operator PropertyToken*() { return ::cli::box<PropertyToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(PropertyToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(PropertyToken a, PropertyToken b);
        static bool op_Inequality(PropertyToken a, PropertyToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API SignatureToken : public virtual System::ValueType{
        int32_t tokValue;
        static SignatureToken* Empty;
        
        SignatureToken* operator ->() { return this; }
        SignatureToken() = default;
        SignatureToken(const SignatureToken* src);
        operator SignatureToken*() { return ::cli::box<SignatureToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(SignatureToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(SignatureToken a, SignatureToken b);
        static bool op_Inequality(SignatureToken a, SignatureToken b);
        int32_t get_Token();
        
    };
    
    
    struct MANAGED_API TypeToken : public virtual System::ValueType{
        int32_t tokValue;
        static TypeToken* Empty;
        
        TypeToken* operator ->() { return this; }
        TypeToken() = default;
        TypeToken(const TypeToken* src);
        operator TypeToken*() { return ::cli::box<TypeToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(TypeToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(TypeToken a, TypeToken b);
        static bool op_Inequality(TypeToken a, TypeToken b);
        int32_t get_Token();
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API IDLDESC : public virtual System::ValueType{
        int32_t dwReserved;
        IDLFLAG wIDLFlags;
        
        IDLDESC* operator ->() { return this; }
        IDLDESC() = default;
        IDLDESC(const IDLDESC* src);
        operator IDLDESC*() { return ::cli::box<IDLDESC*>(this); }
        
        
    };
    
    
    struct MANAGED_API PARAMDESC : public virtual System::ValueType{
        void* lpVarValue;
        PARAMFLAG wParamFlags;
        
        PARAMDESC* operator ->() { return this; }
        PARAMDESC() = default;
        PARAMDESC(const PARAMDESC* src);
        operator PARAMDESC*() { return ::cli::box<PARAMDESC*>(this); }
        
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API IDLDESC2 : public virtual System::ValueType{
        void* dwReserved;
        IDLFLAG2 wIDLFlags;
        
        IDLDESC2* operator ->() { return this; }
        IDLDESC2() = default;
        IDLDESC2(const IDLDESC2* src);
        operator IDLDESC2*() { return ::cli::box<IDLDESC2*>(this); }
        
        
    };
    
    
    struct MANAGED_API PARAMDESC2 : public virtual System::ValueType{
        void* lpVarValue;
        PARAMFLAG2 wParamFlags;
        
        PARAMDESC2* operator ->() { return this; }
        PARAMDESC2() = default;
        PARAMDESC2(const PARAMDESC2* src);
        operator PARAMDESC2*() { return ::cli::box<PARAMDESC2*>(this); }
        
        
    };
    
}}}}
namespace System { namespace Collections { namespace Generic {
    
    template<class TKey, class TValue> struct MANAGED_API KeyValuePair : public virtual System::ValueType{
        TKey key;
        TValue value;
        
        KeyValuePair<TKey, TValue>* operator ->() { return this; }
        KeyValuePair() = default;
        KeyValuePair(const KeyValuePair<TKey, TValue>* src);
        operator KeyValuePair<TKey, TValue>*() { return ::cli::box<KeyValuePair<TKey, TValue>*>(this); }
        
        void constructor(TKey key, TValue value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        TKey get_Key();
        TKey set_Key(TKey value);
        TValue get_Value();
        TValue set_Value(TValue value);
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API TYPEDESC : public virtual System::ValueType{
        void* lpValue;
        int16_t vt;
        
        TYPEDESC* operator ->() { return this; }
        TYPEDESC() = default;
        TYPEDESC(const TYPEDESC* src);
        operator TYPEDESC*() { return ::cli::box<TYPEDESC*>(this); }
        
        
    };
    
    
    struct MANAGED_API DESCUNION : public virtual System::ValueType{
        IDLDESC idldesc;
        PARAMDESC paramdesc;
        
        DESCUNION* operator ->() { return this; }
        DESCUNION() = default;
        DESCUNION(const DESCUNION* src);
        operator DESCUNION*() { return ::cli::box<DESCUNION*>(this); }
        
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API TYPEDESC2 : public virtual System::ValueType{
        void* lpValue;
        int16_t vt;
        
        TYPEDESC2* operator ->() { return this; }
        TYPEDESC2() = default;
        TYPEDESC2(const TYPEDESC2* src);
        operator TYPEDESC2*() { return ::cli::box<TYPEDESC2*>(this); }
        
        
    };
    
    
    struct MANAGED_API DESCUNION3 : public virtual System::ValueType{
        IDLDESC2 idldesc;
        PARAMDESC2 paramdesc;
        
        DESCUNION3* operator ->() { return this; }
        DESCUNION3() = default;
        DESCUNION3(const DESCUNION3* src);
        operator DESCUNION3*() { return ::cli::box<DESCUNION3*>(this); }
        
        
    };
    
}}}}
namespace System {
    
    struct MANAGED_API RuntimeTypeHandle : public virtual ValueType, public virtual Runtime::Serialization::ISerializable{
        void* value;
        
        RuntimeTypeHandle* operator ->() { return this; }
        RuntimeTypeHandle() = default;
        RuntimeTypeHandle(const RuntimeTypeHandle* src);
        operator RuntimeTypeHandle*() { return ::cli::box<RuntimeTypeHandle*>(this); }
        
        void constructor(void* val);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals2(RuntimeTypeHandle handle);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        ModuleHandle GetModuleHandle();
        static bool op_Equality(RuntimeTypeHandle left, Object* right);
        static bool op_Inequality(RuntimeTypeHandle left, Object* right);
        static bool op_Equality2(Object* left, RuntimeTypeHandle right);
        static bool op_Inequality2(Object* left, RuntimeTypeHandle right);
        void* get_Value();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API BRECORD : public virtual ValueType{
        void* pvRecord;
        void* pRecInfo;
        
        BRECORD* operator ->() { return this; }
        BRECORD() = default;
        BRECORD(const BRECORD* src);
        operator BRECORD*() { return ::cli::box<BRECORD*>(this); }
        
        
    };
    
    
    struct MANAGED_API Coord : public virtual ValueType{
        int16_t X;
        int16_t Y;
        
        Coord* operator ->() { return this; }
        Coord() = default;
        Coord(const Coord* src);
        operator Coord*() { return ::cli::box<Coord*>(this); }
        
        void constructor(int32_t x, int32_t y);
        
    };
    
    
    struct MANAGED_API SmallRect : public virtual ValueType{
        int16_t Left;
        int16_t Top;
        int16_t Right;
        int16_t Bottom;
        
        SmallRect* operator ->() { return this; }
        SmallRect() = default;
        SmallRect(const SmallRect* src);
        operator SmallRect*() { return ::cli::box<SmallRect*>(this); }
        
        void constructor(int32_t left, int32_t top, int32_t right, int32_t bottom);
        
    };
    
    
    template<class T> struct MANAGED_API Nullable2 : public virtual ValueType{
        T value;
        bool has_value;
        
        bool operator !=(const std::nullptr_t& b) { return has_value; }
        bool operator ==(const std::nullptr_t& b) { return !has_value; }
        Nullable2(const std::nullptr_t& np) : value(), has_value(false) { }
        Nullable2(const T& src) : value(src), has_value(true) { }
        operator T() { return get_Value(); }
        Nullable2<T>* operator ->() { return this; }
        Nullable2() : value(), has_value(false) { }
        Nullable2(const Nullable2<T>* src) : value(src->value), has_value(src->has_value) { }
        operator Nullable2<T>*() { return ::cli::box<Nullable2<T>*>(this); }
        
        void constructor(T value);
        virtual bool Equals_ed975d2f4a7d193e(Object* other) override;
        bool Equals2(Nullable2<T> other);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        T GetValueOrDefault();
        T GetValueOrDefault2(T defaultValue);
        virtual String* ToString_1636a0751cb9ac11() override;
        static Object* Box(Nullable2<T> o);
        static Nullable2<T> Unbox(Object* o);
        static Nullable2<T> op_Implicit(T value);
        static T op_Explicit(Nullable2<T> value);
        bool get_HasValue();
        T get_Value();
        
    };
    
}
namespace System { namespace Collections { namespace Generic {
    
    template<class TKey, class TValue> struct MANAGED_API Enumerator4 : public virtual System::ValueType, public virtual IEnumerator2<KeyValuePair<TKey, TValue>>, public virtual System::IDisposable, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        Dictionary<TKey, TValue>* dictionary;
        int32_t next;
        int32_t stamp;
        KeyValuePair<TKey, TValue> current;
        
        Enumerator4<TKey, TValue>* operator ->() { return this; }
        Enumerator4() = default;
        Enumerator4(const Enumerator4<TKey, TValue>* src);
        operator Enumerator4<TKey, TValue>*() { return ::cli::box<Enumerator4<TKey, TValue>*>(this); }
        
        void constructor(Dictionary<TKey, TValue>* dictionary);
        bool MoveNext();
        void Reset();
        void Reset2();
        void VerifyState();
        void VerifyCurrent();
        void Dispose();
        KeyValuePair<TKey, TValue> get_Current();
        TKey get_CurrentKey();
        TValue get_CurrentValue();
        System::Object* get_Current2();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual void Dispose_95cb2516542c2f97() override;
        virtual KeyValuePair<TKey, TValue> get_Current_9be2a11682d08be8() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
    };
    
}}}
namespace System { namespace Reflection {
    
    struct MANAGED_API CustomAttributeTypedArgument : public virtual System::ValueType{
        System::Type* argumentType;
        System::Object* value;
        
        CustomAttributeTypedArgument* operator ->() { return this; }
        CustomAttributeTypedArgument() = default;
        CustomAttributeTypedArgument(const CustomAttributeTypedArgument* src);
        operator CustomAttributeTypedArgument*() { return ::cli::box<CustomAttributeTypedArgument*>(this); }
        
        void constructor(System::Type* argumentType, System::Object* value);
        void constructor(System::Object* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right);
        static bool op_Inequality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right);
        System::Type* get_ArgumentType();
        System::Object* get_Value();
        
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API Label : public virtual System::ValueType{
        int32_t label;
        
        Label* operator ->() { return this; }
        Label() = default;
        Label(const Label* src);
        operator Label*() { return ::cli::box<Label*>(this); }
        
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(Label obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(Label a, Label b);
        static bool op_Inequality(Label a, Label b);
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API ELEMDESC : public virtual System::ValueType{
        TYPEDESC tdesc;
        DESCUNION desc;
        
        ELEMDESC* operator ->() { return this; }
        ELEMDESC() = default;
        ELEMDESC(const ELEMDESC* src);
        operator ELEMDESC*() { return ::cli::box<ELEMDESC*>(this); }
        
        
    };
    
    
    struct MANAGED_API FILETIME : public virtual System::ValueType{
        int32_t dwLowDateTime;
        int32_t dwHighDateTime;
        
        FILETIME* operator ->() { return this; }
        FILETIME() = default;
        FILETIME(const FILETIME* src);
        operator FILETIME*() { return ::cli::box<FILETIME*>(this); }
        
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API ELEMDESC2 : public virtual System::ValueType{
        TYPEDESC2 tdesc;
        DESCUNION3 desc;
        
        ELEMDESC2* operator ->() { return this; }
        ELEMDESC2() = default;
        ELEMDESC2(const ELEMDESC2* src);
        operator ELEMDESC2*() { return ::cli::box<ELEMDESC2*>(this); }
        
        
    };
    
    
    struct MANAGED_API FILETIME2 : public virtual System::ValueType{
        int32_t dwLowDateTime;
        int32_t dwHighDateTime;
        
        FILETIME2* operator ->() { return this; }
        FILETIME2() = default;
        FILETIME2(const FILETIME2* src);
        operator FILETIME2*() { return ::cli::box<FILETIME2*>(this); }
        
        
    };
    
    
    struct MANAGED_API DESCUNION4 : public virtual System::ValueType{
        void* lpvarValue;
        int32_t oInst;
        
        DESCUNION4* operator ->() { return this; }
        DESCUNION4() = default;
        DESCUNION4(const DESCUNION4* src);
        operator DESCUNION4*() { return ::cli::box<DESCUNION4*>(this); }
        
        
    };
    
}}}}
namespace System { namespace Security {
    
    struct MANAGED_API RuntimeDeclSecurityEntry : public virtual System::ValueType{
        void* blob;
        int32_t size;
        int32_t index;
        
        RuntimeDeclSecurityEntry* operator ->() { return this; }
        RuntimeDeclSecurityEntry() = default;
        RuntimeDeclSecurityEntry(const RuntimeDeclSecurityEntry* src);
        operator RuntimeDeclSecurityEntry*() { return ::cli::box<RuntimeDeclSecurityEntry*>(this); }
        
        
    };
    
}}
namespace System { namespace Threading {
    
    struct MANAGED_API TicketType : public virtual System::ValueType{
        int64_t TotalValue;
        int32_t Value;
        int32_t Users;
        
        TicketType* operator ->() { return this; }
        TicketType() = default;
        TicketType(const TicketType* src);
        operator TicketType*() { return ::cli::box<TicketType*>(this); }
        
        
    };
    
    
    struct MANAGED_API Watch : public virtual System::ValueType{
        int64_t startTicks;
        
        Watch* operator ->() { return this; }
        Watch() = default;
        Watch(const Watch* src);
        operator Watch*() { return ::cli::box<Watch*>(this); }
        
        static Watch StartNew();
        void Start();
        void Stop();
        static int64_t TicksNow();
        int64_t get_ElapsedMilliseconds();
        
    };
    
}}
namespace Mono { namespace Globalization { namespace Unicode {
    
    struct MANAGED_API TableRange : public virtual System::ValueType{
        int32_t Start;
        int32_t End;
        int32_t Count;
        int32_t IndexStart;
        int32_t IndexEnd;
        
        TableRange* operator ->() { return this; }
        TableRange() = default;
        TableRange(const TableRange* src);
        operator TableRange*() { return ::cli::box<TableRange*>(this); }
        
        void constructor(int32_t start, int32_t end, int32_t indexStart);
        
    };
    
    
    struct MANAGED_API SortKeyValue : public virtual System::ValueType{
        bool Alt;
        uint16_t Primary;
        unsigned char Secondary;
        unsigned char Thirtiary;
        int32_t Quarternary;
        
        SortKeyValue* operator ->() { return this; }
        SortKeyValue() = default;
        SortKeyValue(const SortKeyValue* src);
        operator SortKeyValue*() { return ::cli::box<SortKeyValue*>(this); }
        
        void constructor(bool alt, uint16_t v1, unsigned char v2, unsigned char v3, int32_t v4);
        
    };
    
    
    struct MANAGED_API Context : public virtual System::ValueType{
        System::Globalization::CompareOptions Option;
        unsigned char* NeverMatchFlags;
        unsigned char* AlwaysMatchFlags;
        unsigned char* Buffer1;
        unsigned char* Buffer2;
        int32_t PrevCode;
        unsigned char* PrevSortKey;
        bool QuickCheckPossible;
        
        Context* operator ->() { return this; }
        Context() = default;
        Context(const Context* src);
        operator Context*() { return ::cli::box<Context*>(this); }
        
        void constructor(System::Globalization::CompareOptions opt, unsigned char* alwaysMatchFlags, unsigned char* neverMatchFlags, unsigned char* buffer1, unsigned char* buffer2, unsigned char* prev1, bool quickCheckPossible);
        void ClearPrevInfo();
        
    };
    
    
    struct MANAGED_API PreviousInfo : public virtual System::ValueType{
        int32_t Code;
        unsigned char* SortKey2;
        
        PreviousInfo* operator ->() { return this; }
        PreviousInfo() = default;
        PreviousInfo(const PreviousInfo* src);
        operator PreviousInfo*() { return ::cli::box<PreviousInfo*>(this); }
        
        void constructor(bool dummy);
        
    };
    
    
    struct MANAGED_API Escape : public virtual System::ValueType{
        System::String* Source;
        int32_t Index;
        int32_t Start;
        int32_t End;
        int32_t Optional;
        
        Escape* operator ->() { return this; }
        Escape() = default;
        Escape(const Escape* src);
        operator Escape*() { return ::cli::box<Escape*>(this); }
        
        
    };
    
}}}
namespace Mono { namespace Security {
    
    struct MANAGED_API UriScheme : public virtual System::ValueType{
        System::String* scheme;
        System::String* delimiter;
        int32_t defaultPort;
        
        UriScheme* operator ->() { return this; }
        UriScheme() = default;
        UriScheme(const UriScheme* src);
        operator UriScheme*() { return ::cli::box<UriScheme*>(this); }
        
        void constructor(System::String* s, System::String* d, int32_t p);
        
    };
    
}}
namespace System {
    
    struct MANAGED_API ArgIterator : public virtual ValueType{
        void* sig;
        void* args;
        int32_t next_arg;
        int32_t num_args;
        
        ArgIterator* operator ->() { return this; }
        ArgIterator() = default;
        ArgIterator(const ArgIterator* src);
        operator ArgIterator*() { return ::cli::box<ArgIterator*>(this); }
        
        void constructor(RuntimeArgumentHandle arglist);
        void constructor(RuntimeArgumentHandle arglist, void* ptr);
        void Setup(void* argsp, void* start);
        void End();
        virtual bool Equals_ed975d2f4a7d193e(Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        TypedReference GetNextArg();
        TypedReference IntGetNextArg();
        TypedReference GetNextArg2(RuntimeTypeHandle rth);
        TypedReference IntGetNextArg2(void* rth);
        RuntimeTypeHandle GetNextArgType();
        void* IntGetNextArgType();
        int32_t GetRemainingCount();
        
    };
    
    
    template<class T> struct MANAGED_API InternalEnumerator : public virtual ValueType, public virtual Collections::Generic::IEnumerator2<T>, public virtual IDisposable, public virtual Collections::IEnumerator{
        static constexpr int32_t NOT_STARTED = -2;
        static constexpr int32_t FINISHED = -1;
        Array* array;
        int32_t idx;
        
        InternalEnumerator<T>* operator ->() { return this; }
        InternalEnumerator() = default;
        InternalEnumerator(const InternalEnumerator<T>* src);
        operator InternalEnumerator<T>*() { return ::cli::box<InternalEnumerator<T>*>(this); }
        
        void constructor(Array* array);
        void Dispose();
        bool MoveNext();
        void Reset();
        T get_Current();
        Object* get_Current2();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual T get_Current_9be2a11682d08be8() override;
        virtual Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    template<class T> struct MANAGED_API ArraySegment : public virtual ValueType{
        cli::array<T>* array;
        int32_t offset;
        int32_t count;
        
        ArraySegment<T>* operator ->() { return this; }
        ArraySegment() = default;
        ArraySegment(const ArraySegment<T>* src);
        operator ArraySegment<T>*() { return ::cli::box<ArraySegment<T>*>(this); }
        
        void constructor(cli::array<T>* array, int32_t offset, int32_t count);
        void constructor(cli::array<T>* array);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals2(ArraySegment<T> obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(ArraySegment<T> a, ArraySegment<T> b);
        static bool op_Inequality(ArraySegment<T> a, ArraySegment<T> b);
        cli::array<T>* get_Array();
        int32_t get_Offset();
        int32_t get_Count();
        
    };
    
    
    struct MANAGED_API MonoEnumInfo : public virtual ValueType{
        Type* utype;
        Array* values;
        cli::array<String*>* names;
        Collections::Hashtable* name_hash;
        static Collections::Hashtable* cache;
        static Collections::Hashtable* global_cache;
        static Object* global_cache_monitor;
        static SByteComparer* sbyte_comparer;
        static ShortComparer* short_comparer;
        static IntComparer* int_comparer;
        static LongComparer* long_comparer;
        
        MonoEnumInfo* operator ->() { return this; }
        MonoEnumInfo() = default;
        MonoEnumInfo(const MonoEnumInfo* src);
        operator MonoEnumInfo*() { return ::cli::box<MonoEnumInfo*>(this); }
        
        static void static_constructor();
        void constructor(MonoEnumInfo other);
        static void get_enum_info(Type* enumType, MonoEnumInfo info);
        static void GetInfo(Type* enumType, MonoEnumInfo info);
        static Collections::Hashtable* get_Cache();
        
    };
    
    
    struct MANAGED_API RuntimeArgumentHandle : public virtual ValueType{
        void* args;
        
        RuntimeArgumentHandle* operator ->() { return this; }
        RuntimeArgumentHandle() = default;
        RuntimeArgumentHandle(const RuntimeArgumentHandle* src);
        operator RuntimeArgumentHandle*() { return ::cli::box<RuntimeArgumentHandle*>(this); }
        
        
    };
    
    
    struct MANAGED_API RuntimeFieldHandle : public virtual ValueType, public virtual Runtime::Serialization::ISerializable{
        void* value;
        
        RuntimeFieldHandle* operator ->() { return this; }
        RuntimeFieldHandle() = default;
        RuntimeFieldHandle(const RuntimeFieldHandle* src);
        operator RuntimeFieldHandle*() { return ::cli::box<RuntimeFieldHandle*>(this); }
        
        void constructor(void* v);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals2(RuntimeFieldHandle handle);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(RuntimeFieldHandle left, RuntimeFieldHandle right);
        static bool op_Inequality(RuntimeFieldHandle left, RuntimeFieldHandle right);
        void* get_Value();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API RuntimeMethodHandle : public virtual ValueType, public virtual Runtime::Serialization::ISerializable{
        void* value;
        
        RuntimeMethodHandle* operator ->() { return this; }
        RuntimeMethodHandle() = default;
        RuntimeMethodHandle(const RuntimeMethodHandle* src);
        operator RuntimeMethodHandle*() { return ::cli::box<RuntimeMethodHandle*>(this); }
        
        void constructor(void* v);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static void* GetFunctionPointer(void* m);
        void* GetFunctionPointer2();
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals2(RuntimeMethodHandle handle);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(RuntimeMethodHandle left, RuntimeMethodHandle right);
        static bool op_Inequality(RuntimeMethodHandle left, RuntimeMethodHandle right);
        void* get_Value();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API FormatElement : public virtual ValueType{
        FormatElementType Type2;
        char16_t CharValue;
        String* StringValue;
        int32_t IntValue;
        
        FormatElement* operator ->() { return this; }
        FormatElement() = default;
        FormatElement(const FormatElement* src);
        operator FormatElement*() { return ::cli::box<FormatElement*>(this); }
        
        void constructor(FormatElementType type);
        
    };
    
    
    struct MANAGED_API TypedReference : public virtual ValueType{
        RuntimeTypeHandle type;
        void* value;
        void* klass;
        
        TypedReference* operator ->() { return this; }
        TypedReference() = default;
        TypedReference(const TypedReference* src);
        operator TypedReference*() { return ::cli::box<TypedReference*>(this); }
        
        virtual bool Equals_ed975d2f4a7d193e(Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static Type* GetTargetType(TypedReference value);
        static TypedReference MakeTypedReference(Object* target, cli::array<Reflection::FieldInfo*>* flds);
        static void SetTypedReference(TypedReference target, Object* value);
        static RuntimeTypeHandle TargetTypeToken(TypedReference value);
        static Object* ToObject(TypedReference value);
        
    };
    
    
    struct MANAGED_API Variant : public virtual ValueType{
        int16_t vt;
        uint16_t wReserved1;
        uint16_t wReserved2;
        uint16_t wReserved3;
        int64_t llVal;
        int32_t lVal;
        unsigned char bVal;
        int16_t iVal;
        float fltVal;
        double dblVal;
        int16_t boolVal;
        void* bstrVal;
        signed char cVal;
        uint16_t uiVal;
        uint32_t ulVal;
        uint64_t ullVal;
        int32_t intVal;
        uint32_t uintVal;
        void* pdispVal;
        BRECORD bRecord;
        
        Variant* operator ->() { return this; }
        Variant() = default;
        Variant(const Variant* src);
        operator Variant*() { return ::cli::box<Variant*>(this); }
        
        void SetValue(Object* obj);
        Object* GetValue();
        void Clear();
        
    };
    
    
    struct MANAGED_API Void : public virtual ValueType{
        
        Void* operator ->() { return this; }
        Void() = default;
        Void(const Void* src);
        operator Void*() { return ::cli::box<Void*>(this); }
        
        
    };
    
    
    struct MANAGED_API ConsoleCursorInfo : public virtual ValueType{
        int32_t Size;
        bool Visible;
        
        ConsoleCursorInfo* operator ->() { return this; }
        ConsoleCursorInfo() = default;
        ConsoleCursorInfo(const ConsoleCursorInfo* src);
        operator ConsoleCursorInfo*() { return ::cli::box<ConsoleCursorInfo*>(this); }
        
        
    };
    
    
    struct MANAGED_API InputRecord : public virtual ValueType{
        int16_t EventType;
        bool KeyDown;
        int16_t RepeatCount;
        int16_t VirtualKeyCode;
        int16_t VirtualScanCode;
        char16_t Character;
        int32_t ControlKeyState;
        int32_t pad1;
        bool pad2;
        
        InputRecord* operator ->() { return this; }
        InputRecord() = default;
        InputRecord(const InputRecord* src);
        operator InputRecord*() { return ::cli::box<InputRecord*>(this); }
        
        
    };
    
    
    struct MANAGED_API CharInfo : public virtual ValueType{
        char16_t Character;
        int16_t Attributes;
        
        CharInfo* operator ->() { return this; }
        CharInfo() = default;
        CharInfo(const CharInfo* src);
        operator CharInfo*() { return ::cli::box<CharInfo*>(this); }
        
        
    };
    
    
    struct MANAGED_API ConsoleScreenBufferInfo : public virtual ValueType{
        Coord Size;
        Coord CursorPosition;
        int16_t Attribute2;
        SmallRect Window;
        Coord MaxWindowSize;
        
        ConsoleScreenBufferInfo* operator ->() { return this; }
        ConsoleScreenBufferInfo() = default;
        ConsoleScreenBufferInfo(const ConsoleScreenBufferInfo* src);
        operator ConsoleScreenBufferInfo*() { return ::cli::box<ConsoleScreenBufferInfo*>(this); }
        
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API DictionaryEntry : public virtual System::ValueType{
        System::Object* _key;
        System::Object* _value;
        
        DictionaryEntry* operator ->() { return this; }
        DictionaryEntry() = default;
        DictionaryEntry(const DictionaryEntry* src);
        operator DictionaryEntry*() { return ::cli::box<DictionaryEntry*>(this); }
        
        void constructor(System::Object* key, System::Object* value);
        System::Object* get_Key();
        System::Object* set_Key(System::Object* value);
        System::Object* get_Value();
        System::Object* set_Value(System::Object* value);
        
    };
    
    
    struct MANAGED_API Slot : public virtual System::ValueType{
        System::Object* key;
        System::Object* value;
        
        Slot* operator ->() { return this; }
        Slot() = default;
        Slot(const Slot* src);
        operator Slot*() { return ::cli::box<Slot*>(this); }
        
        
    };
    
    
    struct MANAGED_API Slot2 : public virtual System::ValueType{
        System::Object* key;
        System::Object* value;
        
        Slot2* operator ->() { return this; }
        Slot2() = default;
        Slot2(const Slot2* src);
        operator Slot2*() { return ::cli::box<Slot2*>(this); }
        
        
    };
    
}}
namespace System { namespace Collections { namespace Concurrent {
    
    template<class TKey, class T> struct MANAGED_API SimpleRwLock : public virtual System::ValueType{
        static constexpr int32_t RwWait = 1;
        static constexpr int32_t RwWrite = 2;
        static constexpr int32_t RwRead = 4;
        int32_t rwlock;
        
        SimpleRwLock<TKey, T>* operator ->() { return this; }
        SimpleRwLock() = default;
        SimpleRwLock(const SimpleRwLock<TKey, T>* src);
        operator SimpleRwLock<TKey, T>*() { return ::cli::box<SimpleRwLock<TKey, T>*>(this); }
        
        void EnterReadLock();
        void ExitReadLock();
        void EnterWriteLock();
        void ExitWriteLock();
        
    };
    
}}}
namespace System { namespace Collections { namespace Generic {
    
    struct MANAGED_API Link : public virtual System::ValueType{
        int32_t HashCode;
        int32_t Next;
        
        Link* operator ->() { return this; }
        Link() = default;
        Link(const Link* src);
        operator Link*() { return ::cli::box<Link*>(this); }
        
        
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API Enumerator5 : public virtual System::ValueType, public virtual IEnumerator2<TKey>, public virtual System::IDisposable, public virtual System::Collections::IEnumerator{
        Enumerator4<TKey, TValue> host_enumerator;
        
        Enumerator5<TKey, TValue>* operator ->() { return this; }
        Enumerator5() = default;
        Enumerator5(const Enumerator5<TKey, TValue>* src);
        operator Enumerator5<TKey, TValue>*() { return ::cli::box<Enumerator5<TKey, TValue>*>(this); }
        
        void constructor(Dictionary<TKey, TValue>* host);
        void Dispose();
        bool MoveNext();
        void Reset();
        TKey get_Current();
        System::Object* get_Current2();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual TKey get_Current_9be2a11682d08be8() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API Enumerator6 : public virtual System::ValueType, public virtual IEnumerator2<TValue>, public virtual System::IDisposable, public virtual System::Collections::IEnumerator{
        Enumerator4<TKey, TValue> host_enumerator;
        
        Enumerator6<TKey, TValue>* operator ->() { return this; }
        Enumerator6() = default;
        Enumerator6(const Enumerator6<TKey, TValue>* src);
        operator Enumerator6<TKey, TValue>*() { return ::cli::box<Enumerator6<TKey, TValue>*>(this); }
        
        void constructor(Dictionary<TKey, TValue>* host);
        void Dispose();
        bool MoveNext();
        void Reset();
        TValue get_Current();
        System::Object* get_Current2();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual TValue get_Current_9be2a11682d08be8() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    template<class T> struct MANAGED_API Enumerator7 : public virtual System::ValueType, public virtual IEnumerator2<T>, public virtual System::IDisposable, public virtual System::Collections::IEnumerator{
        List<T>* l;
        int32_t next;
        int32_t ver;
        T current;
        
        Enumerator7<T>* operator ->() { return this; }
        Enumerator7() = default;
        Enumerator7(const Enumerator7<T>* src);
        operator Enumerator7<T>*() { return ::cli::box<Enumerator7<T>*>(this); }
        
        void constructor(List<T>* l);
        void Dispose();
        void VerifyState();
        bool MoveNext();
        void Reset();
        T get_Current();
        System::Object* get_Current2();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual T get_Current_9be2a11682d08be8() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
}}}
namespace System { namespace Diagnostics { namespace SymbolStore {
    
    struct MANAGED_API SymbolToken : public virtual System::ValueType{
        int32_t _val;
        
        SymbolToken* operator ->() { return this; }
        SymbolToken() = default;
        SymbolToken(const SymbolToken* src);
        operator SymbolToken*() { return ::cli::box<SymbolToken*>(this); }
        
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(SymbolToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetToken();
        static bool op_Equality(SymbolToken a, SymbolToken b);
        static bool op_Inequality(SymbolToken a, SymbolToken b);
        
    };
    
}}}
namespace System { namespace Globalization {
    
    struct MANAGED_API Era : public virtual System::ValueType{
        int32_t _nr;
        int32_t _start;
        int32_t _gregorianYearStart;
        int32_t _end;
        int32_t _maxYear;
        
        Era* operator ->() { return this; }
        Era() = default;
        Era(const Era* src);
        operator Era*() { return ::cli::box<Era*>(this); }
        
        void constructor(int32_t nr, int32_t start, int32_t end);
        int32_t GregorianYear(int32_t year);
        bool Covers(int32_t date);
        int32_t EraYear(int32_t era, int32_t date);
        int32_t get_Nr();
        
    };
    
    
    struct MANAGED_API Era2 : public virtual System::ValueType{
        int32_t _nr;
        int32_t _start;
        int32_t _gregorianYearStart;
        int32_t _end;
        int32_t _maxYear;
        
        Era2* operator ->() { return this; }
        Era2() = default;
        Era2(const Era2* src);
        operator Era2*() { return ::cli::box<Era2*>(this); }
        
        void constructor(int32_t nr, int32_t start, int32_t end);
        int32_t GregorianYear(int32_t year);
        bool Covers(int32_t date);
        int32_t EraYear(int32_t era, int32_t date);
        int32_t get_Nr();
        
    };
    
    
    struct MANAGED_API Data : public virtual System::ValueType{
        int32_t ansi;
        int32_t ebcdic;
        int32_t mac;
        int32_t oem;
        unsigned char list_sep;
        
        Data* operator ->() { return this; }
        Data() = default;
        Data(const Data* src);
        operator Data*() { return ::cli::box<Data*>(this); }
        
        
    };
    
}}
namespace System { namespace IO {
    
    struct MANAGED_API MonoIOStat : public virtual System::ValueType{
        FileAttributes Attributes;
        int64_t Length;
        int64_t CreationTime;
        int64_t LastAccessTime;
        int64_t LastWriteTime;
        
        MonoIOStat* operator ->() { return this; }
        MonoIOStat() = default;
        MonoIOStat(const MonoIOStat* src);
        operator MonoIOStat*() { return ::cli::box<MonoIOStat*>(this); }
        
        
    };
    
}}
namespace System { namespace IO { namespace IsolatedStorage {
    
    struct MANAGED_API Identities : public virtual System::ValueType{
        System::Object* Application;
        System::Object* Assembly2;
        System::Object* Domain;
        
        Identities* operator ->() { return this; }
        Identities() = default;
        Identities(const Identities* src);
        operator Identities*() { return ::cli::box<Identities*>(this); }
        
        void constructor(System::Object* application, System::Object* assembly, System::Object* domain);
        
    };
    
}}}
namespace System { namespace Reflection {
    
    struct MANAGED_API CustomAttributeNamedArgument : public virtual System::ValueType{
        CustomAttributeTypedArgument typedArgument;
        MemberInfo* memberInfo;
        
        CustomAttributeNamedArgument* operator ->() { return this; }
        CustomAttributeNamedArgument() = default;
        CustomAttributeNamedArgument(const CustomAttributeNamedArgument* src);
        operator CustomAttributeNamedArgument*() { return ::cli::box<CustomAttributeNamedArgument*>(this); }
        
        void constructor(MemberInfo* memberInfo, System::Object* value);
        void constructor(MemberInfo* memberInfo, CustomAttributeTypedArgument typedArgument);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right);
        static bool op_Inequality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right);
        MemberInfo* get_MemberInfo();
        CustomAttributeTypedArgument get_TypedValue();
        
    };
    
    
    struct MANAGED_API InterfaceMapping : public virtual System::ValueType{
        cli::array<MethodInfo*>* InterfaceMethods;
        System::Type* InterfaceType;
        cli::array<MethodInfo*>* TargetMethods;
        System::Type* TargetType;
        
        InterfaceMapping* operator ->() { return this; }
        InterfaceMapping() = default;
        InterfaceMapping(const InterfaceMapping* src);
        operator InterfaceMapping*() { return ::cli::box<InterfaceMapping*>(this); }
        
        
    };
    
    
    struct MANAGED_API MonoEventInfo : public virtual System::ValueType{
        System::Type* declaring_type;
        System::Type* reflected_type;
        System::String* name;
        MethodInfo* add_method;
        MethodInfo* remove_method;
        MethodInfo* raise_method;
        EventAttributes attrs;
        cli::array<MethodInfo*>* other_methods;
        
        MonoEventInfo* operator ->() { return this; }
        MonoEventInfo() = default;
        MonoEventInfo(const MonoEventInfo* src);
        operator MonoEventInfo*() { return ::cli::box<MonoEventInfo*>(this); }
        
        static void get_event_info(MonoEvent* ev, MonoEventInfo info);
        static MonoEventInfo GetEventInfo(MonoEvent* ev);
        
    };
    
    
    struct MANAGED_API MonoMethodInfo : public virtual System::ValueType{
        System::Type* parent;
        System::Type* ret;
        MethodAttributes attrs;
        MethodImplAttributes iattrs;
        CallingConventions callconv;
        
        MonoMethodInfo* operator ->() { return this; }
        MonoMethodInfo() = default;
        MonoMethodInfo(const MonoMethodInfo* src);
        operator MonoMethodInfo*() { return ::cli::box<MonoMethodInfo*>(this); }
        
        static void get_method_info(void* handle, MonoMethodInfo info);
        static int32_t get_method_attributes(void* handle);
        static MonoMethodInfo GetMethodInfo(void* handle);
        static System::Type* GetDeclaringType(void* handle);
        static System::Type* GetReturnType(void* handle);
        static MethodAttributes GetAttributes(void* handle);
        static CallingConventions GetCallingConvention(void* handle);
        static MethodImplAttributes GetMethodImplementationFlags(void* handle);
        static cli::array<ParameterInfo*>* get_parameter_info(void* handle, MemberInfo* member);
        static cli::array<ParameterInfo*>* GetParametersInfo(void* handle, MemberInfo* member);
        static Emit::UnmanagedMarshal* get_retval_marshal(void* handle);
        static ParameterInfo* GetReturnParameterInfo(MonoMethod* method);
        
    };
    
    
    struct MANAGED_API MonoPropertyInfo : public virtual System::ValueType{
        System::Type* parent;
        System::Type* declaring_type;
        System::String* name;
        MethodInfo* get_method;
        MethodInfo* set_method;
        PropertyAttributes attrs;
        
        MonoPropertyInfo* operator ->() { return this; }
        MonoPropertyInfo() = default;
        MonoPropertyInfo(const MonoPropertyInfo* src);
        operator MonoPropertyInfo*() { return ::cli::box<MonoPropertyInfo*>(this); }
        
        static void get_property_info(MonoProperty* prop, MonoPropertyInfo info, PInfo req_info);
        static cli::array<System::Type*>* GetTypeModifiers(MonoProperty* prop, bool optional);
        static System::Object* get_default_value(MonoProperty* prop);
        
    };
    
    
    struct MANAGED_API ParameterModifier : public virtual System::ValueType{
        cli::array<bool>* _byref;
        
        ParameterModifier* operator ->() { return this; }
        ParameterModifier() = default;
        ParameterModifier(const ParameterModifier* src);
        operator ParameterModifier*() { return ::cli::box<ParameterModifier*>(this); }
        
        void constructor(int32_t parameterCount);
        bool get_Item(int32_t index);
        bool set_Item(int32_t index, bool value);
        
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API RefEmitPermissionSet : public virtual System::ValueType{
        System::Security::Permissions::SecurityAction action;
        System::String* pset;
        
        RefEmitPermissionSet* operator ->() { return this; }
        RefEmitPermissionSet() = default;
        RefEmitPermissionSet(const RefEmitPermissionSet* src);
        operator RefEmitPermissionSet*() { return ::cli::box<RefEmitPermissionSet*>(this); }
        
        void constructor(System::Security::Permissions::SecurityAction action, System::String* pset);
        
    };
    
    
    struct MANAGED_API MonoResource : public virtual System::ValueType{
        cli::array<unsigned char>* data;
        System::String* name;
        System::String* filename;
        System::Reflection::ResourceAttributes attrs;
        int32_t offset;
        System::IO::Stream* stream;
        
        MonoResource* operator ->() { return this; }
        MonoResource() = default;
        MonoResource(const MonoResource* src);
        operator MonoResource*() { return ::cli::box<MonoResource*>(this); }
        
        
    };
    
    
    struct MANAGED_API MonoWin32Resource : public virtual System::ValueType{
        int32_t res_type;
        int32_t res_id;
        int32_t lang_id;
        cli::array<unsigned char>* data;
        
        MonoWin32Resource* operator ->() { return this; }
        MonoWin32Resource() = default;
        MonoWin32Resource(const MonoWin32Resource* src);
        operator MonoWin32Resource*() { return ::cli::box<MonoWin32Resource*>(this); }
        
        void constructor(int32_t res_type, int32_t res_id, int32_t lang_id, cli::array<unsigned char>* data);
        
    };
    
    
    struct MANAGED_API CustomAttributeInfo : public virtual System::ValueType{
        System::Reflection::ConstructorInfo* ctor;
        cli::array<System::Object*>* ctorArgs;
        cli::array<System::String*>* namedParamNames;
        cli::array<System::Object*>* namedParamValues;
        
        CustomAttributeInfo* operator ->() { return this; }
        CustomAttributeInfo() = default;
        CustomAttributeInfo(const CustomAttributeInfo* src);
        operator CustomAttributeInfo*() { return ::cli::box<CustomAttributeInfo*>(this); }
        
        
    };
    
    
    struct MANAGED_API ILExceptionBlock : public virtual System::ValueType{
        static constexpr int32_t CATCH = 0;
        static constexpr int32_t FILTER = 1;
        static constexpr int32_t FINALLY = 2;
        static constexpr int32_t FAULT = 4;
        static constexpr int32_t FILTER_START = -1;
        System::Type* extype;
        int32_t type;
        int32_t start;
        int32_t len;
        int32_t filter_offset;
        
        ILExceptionBlock* operator ->() { return this; }
        ILExceptionBlock() = default;
        ILExceptionBlock(const ILExceptionBlock* src);
        operator ILExceptionBlock*() { return ::cli::box<ILExceptionBlock*>(this); }
        
        void Debug();
        
    };
    
    
    struct MANAGED_API ILExceptionInfo : public virtual System::ValueType{
        cli::array<ILExceptionBlock>* handlers;
        int32_t start;
        int32_t len;
        Label end;
        
        ILExceptionInfo* operator ->() { return this; }
        ILExceptionInfo() = default;
        ILExceptionInfo(const ILExceptionInfo* src);
        operator ILExceptionInfo*() { return ::cli::box<ILExceptionInfo*>(this); }
        
        int32_t NumHandlers();
        void AddCatch(System::Type* extype, int32_t offset);
        void AddFinally(int32_t offset);
        void AddFault(int32_t offset);
        void AddFilter(int32_t offset);
        void End(int32_t offset);
        int32_t LastClauseType();
        void PatchFilterClause(int32_t start);
        void Debug(int32_t b);
        void add_block(int32_t offset);
        
    };
    
    
    struct MANAGED_API ILTokenInfo : public virtual System::ValueType{
        System::Reflection::MemberInfo* member;
        int32_t code_pos;
        
        ILTokenInfo* operator ->() { return this; }
        ILTokenInfo() = default;
        ILTokenInfo(const ILTokenInfo* src);
        operator ILTokenInfo*() { return ::cli::box<ILTokenInfo*>(this); }
        
        
    };
    
    
    struct MANAGED_API LabelFixup : public virtual System::ValueType{
        int32_t offset;
        int32_t pos;
        int32_t label_idx;
        
        LabelFixup* operator ->() { return this; }
        LabelFixup() = default;
        LabelFixup(const LabelFixup* src);
        operator LabelFixup*() { return ::cli::box<LabelFixup*>(this); }
        
        
    };
    
    
    struct MANAGED_API LabelData : public virtual System::ValueType{
        int32_t addr;
        int32_t maxStack;
        
        LabelData* operator ->() { return this; }
        LabelData() = default;
        LabelData(const LabelData* src);
        operator LabelData*() { return ::cli::box<LabelData*>(this); }
        
        void constructor(int32_t addr, int32_t maxStack);
        
    };
    
    
    struct MANAGED_API SequencePoint : public virtual System::ValueType{
        int32_t Offset;
        int32_t Line;
        int32_t Col;
        int32_t EndLine;
        int32_t EndCol;
        
        SequencePoint* operator ->() { return this; }
        SequencePoint() = default;
        SequencePoint(const SequencePoint* src);
        operator SequencePoint*() { return ::cli::box<SequencePoint*>(this); }
        
        
    };
    
    
    struct MANAGED_API OpCode : public virtual System::ValueType{
        unsigned char op1;
        unsigned char push;
        unsigned char op2;
        unsigned char pop;
        unsigned char size;
        unsigned char type;
        unsigned char args;
        unsigned char flow;
        
        OpCode* operator ->() { return this; }
        OpCode() = default;
        OpCode(const OpCode* src);
        operator OpCode*() { return ::cli::box<OpCode*>(this); }
        
        void constructor(int32_t p, int32_t q);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(OpCode obj);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static bool op_Equality(OpCode a, OpCode b);
        static bool op_Inequality(OpCode a, OpCode b);
        System::String* get_Name();
        int32_t get_Size();
        OpCodeType get_OpCodeType();
        OperandType get_OperandType();
        FlowControl get_FlowControl();
        StackBehaviour get_StackBehaviourPop();
        StackBehaviour get_StackBehaviourPush();
        int16_t get_Value();
        
    };
    
    
    struct MANAGED_API StringToken : public virtual System::ValueType{
        int32_t tokValue;
        
        StringToken* operator ->() { return this; }
        StringToken() = default;
        StringToken(const StringToken* src);
        operator StringToken*() { return ::cli::box<StringToken*>(this); }
        
        static void static_constructor();
        void constructor(int32_t val);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(StringToken obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(StringToken a, StringToken b);
        static bool op_Inequality(StringToken a, StringToken b);
        int32_t get_Token();
        
    };
    
}}}
namespace System { namespace Resources {
    
    struct MANAGED_API ResourceInfo : public virtual System::ValueType{
        int64_t ValuePosition;
        System::String* ResourceName;
        int32_t TypeIndex;
        
        ResourceInfo* operator ->() { return this; }
        ResourceInfo() = default;
        ResourceInfo(const ResourceInfo* src);
        operator ResourceInfo*() { return ::cli::box<ResourceInfo*>(this); }
        
        void constructor(System::String* resourceName, int64_t valuePosition, int32_t type_index);
        
    };
    
    
    struct MANAGED_API ResourceCacheItem : public virtual System::ValueType{
        System::String* ResourceName;
        System::Object* ResourceValue;
        
        ResourceCacheItem* operator ->() { return this; }
        ResourceCacheItem() = default;
        ResourceCacheItem(const ResourceCacheItem* src);
        operator ResourceCacheItem*() { return ::cli::box<ResourceCacheItem*>(this); }
        
        void constructor(System::String* name, System::Object* value);
        
    };
    
}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    struct MANAGED_API Ephemeron : public virtual System::ValueType{
        System::Object* key;
        System::Object* value;
        
        Ephemeron* operator ->() { return this; }
        Ephemeron() = default;
        Ephemeron(const Ephemeron* src);
        operator Ephemeron*() { return ::cli::box<Ephemeron*>(this); }
        
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API ArrayWithOffset : public virtual System::ValueType{
        System::Object* array;
        int32_t offset;
        
        ArrayWithOffset* operator ->() { return this; }
        ArrayWithOffset() = default;
        ArrayWithOffset(const ArrayWithOffset* src);
        operator ArrayWithOffset*() { return ::cli::box<ArrayWithOffset*>(this); }
        
        void constructor(System::Object* array, int32_t offset);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(ArrayWithOffset obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::Object* GetArray();
        int32_t GetOffset();
        static bool op_Equality(ArrayWithOffset a, ArrayWithOffset b);
        static bool op_Inequality(ArrayWithOffset a, ArrayWithOffset b);
        
    };
    
    
    struct MANAGED_API BINDPTR : public virtual System::ValueType{
        void* lpfuncdesc;
        void* lptcomp;
        void* lpvardesc;
        
        BINDPTR* operator ->() { return this; }
        BINDPTR() = default;
        BINDPTR(const BINDPTR* src);
        operator BINDPTR*() { return ::cli::box<BINDPTR*>(this); }
        
        
    };
    
    
    struct MANAGED_API BIND_OPTS : public virtual System::ValueType{
        int32_t cbStruct;
        int32_t grfFlags;
        int32_t grfMode;
        int32_t dwTickCountDeadline;
        
        BIND_OPTS* operator ->() { return this; }
        BIND_OPTS() = default;
        BIND_OPTS(const BIND_OPTS* src);
        operator BIND_OPTS*() { return ::cli::box<BIND_OPTS*>(this); }
        
        
    };
    
    
    struct MANAGED_API CONNECTDATA : public virtual System::ValueType{
        System::Object* pUnk;
        int32_t dwCookie;
        
        CONNECTDATA* operator ->() { return this; }
        CONNECTDATA() = default;
        CONNECTDATA(const CONNECTDATA* src);
        operator CONNECTDATA*() { return ::cli::box<CONNECTDATA*>(this); }
        
        
    };
    
    
    struct MANAGED_API DISPPARAMS : public virtual System::ValueType{
        void* rgvarg;
        void* rgdispidNamedArgs;
        int32_t cArgs;
        int32_t cNamedArgs;
        
        DISPPARAMS* operator ->() { return this; }
        DISPPARAMS() = default;
        DISPPARAMS(const DISPPARAMS* src);
        operator DISPPARAMS*() { return ::cli::box<DISPPARAMS*>(this); }
        
        
    };
    
    
    struct MANAGED_API EXCEPINFO : public virtual System::ValueType{
        int16_t wCode;
        int16_t wReserved;
        System::String* bstrSource;
        System::String* bstrDescription;
        System::String* bstrHelpFile;
        int32_t dwHelpContext;
        void* pvReserved;
        void* pfnDeferredFillIn;
        
        EXCEPINFO* operator ->() { return this; }
        EXCEPINFO() = default;
        EXCEPINFO(const EXCEPINFO* src);
        operator EXCEPINFO*() { return ::cli::box<EXCEPINFO*>(this); }
        
        
    };
    
    
    struct MANAGED_API FUNCDESC : public virtual System::ValueType{
        int32_t memid;
        void* lprgscode;
        void* lprgelemdescParam;
        FUNCKIND funckind;
        INVOKEKIND invkind;
        CALLCONV callconv;
        int16_t cParams;
        int16_t cParamsOpt;
        int16_t oVft;
        int16_t cScodes;
        ELEMDESC elemdescFunc;
        int16_t wFuncFlags;
        
        FUNCDESC* operator ->() { return this; }
        FUNCDESC() = default;
        FUNCDESC(const FUNCDESC* src);
        operator FUNCDESC*() { return ::cli::box<FUNCDESC*>(this); }
        
        
    };
    
    
    struct MANAGED_API GCHandle : public virtual System::ValueType{
        int32_t handle;
        
        GCHandle* operator ->() { return this; }
        GCHandle() = default;
        GCHandle(const GCHandle* src);
        operator GCHandle*() { return ::cli::box<GCHandle*>(this); }
        
        void constructor(void* h);
        void constructor(System::Object* obj);
        void constructor(System::Object* value, GCHandleType type);
        void* AddrOfPinnedObject();
        static GCHandle Alloc(System::Object* value);
        static GCHandle Alloc2(System::Object* value, GCHandleType type);
        void Free();
        static bool CheckCurrentDomain(int32_t handle);
        static System::Object* GetTarget(int32_t handle);
        static int32_t GetTargetHandle(System::Object* obj, int32_t handle, GCHandleType type);
        static void FreeHandle(int32_t handle);
        static void* GetAddrOfPinnedObject(int32_t handle);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static GCHandle FromIntPtr(void* value);
        static void* ToIntPtr(GCHandle value);
        static void* op_Explicit(GCHandle value);
        static GCHandle op_Explicit2(void* value);
        static bool op_Equality(GCHandle a, GCHandle b);
        static bool op_Inequality(GCHandle a, GCHandle b);
        bool get_IsAllocated();
        System::Object* get_Target();
        System::Object* set_Target(System::Object* value);
        
    };
    
    
    struct MANAGED_API HandleRef : public virtual System::ValueType{
        System::Object* wrapper;
        void* handle;
        
        HandleRef* operator ->() { return this; }
        HandleRef() = default;
        HandleRef(const HandleRef* src);
        operator HandleRef*() { return ::cli::box<HandleRef*>(this); }
        
        void constructor(System::Object* wrapper, void* handle);
        static void* ToIntPtr(HandleRef value);
        static void* op_Explicit(HandleRef value);
        void* get_Handle();
        System::Object* get_Wrapper();
        
    };
    
    
    struct MANAGED_API STATSTG : public virtual System::ValueType{
        System::String* pwcsName;
        int32_t type;
        int64_t cbSize;
        FILETIME mtime;
        FILETIME ctime;
        FILETIME atime;
        int32_t grfMode;
        int32_t grfLocksSupported;
        System::Guid clsid;
        int32_t grfStateBits;
        int32_t reserved;
        
        STATSTG* operator ->() { return this; }
        STATSTG() = default;
        STATSTG(const STATSTG* src);
        operator STATSTG*() { return ::cli::box<STATSTG*>(this); }
        
        
    };
    
    
    struct MANAGED_API TYPEATTR : public virtual System::ValueType{
        static constexpr int32_t MEMBER_ID_NIL = -1;
        System::Guid guid;
        int32_t lcid;
        int32_t dwReserved;
        int32_t memidConstructor;
        int32_t memidDestructor;
        void* lpstrSchema;
        int32_t cbSizeInstance;
        TYPEKIND typekind;
        int16_t cFuncs;
        int16_t cVars;
        int16_t cImplTypes;
        int16_t cbSizeVft;
        int16_t cbAlignment;
        TYPEFLAGS wTypeFlags;
        int16_t wMajorVerNum;
        int16_t wMinorVerNum;
        TYPEDESC tdescAlias;
        IDLDESC idldescType;
        
        TYPEATTR* operator ->() { return this; }
        TYPEATTR() = default;
        TYPEATTR(const TYPEATTR* src);
        operator TYPEATTR*() { return ::cli::box<TYPEATTR*>(this); }
        
        
    };
    
    
    struct MANAGED_API TYPELIBATTR : public virtual System::ValueType{
        System::Guid guid;
        int32_t lcid;
        SYSKIND syskind;
        int16_t wMajorVerNum;
        int16_t wMinorVerNum;
        LIBFLAGS wLibFlags;
        
        TYPELIBATTR* operator ->() { return this; }
        TYPELIBATTR() = default;
        TYPELIBATTR(const TYPELIBATTR* src);
        operator TYPELIBATTR*() { return ::cli::box<TYPELIBATTR*>(this); }
        
        
    };
    
    
    struct MANAGED_API DESCUNION2 : public virtual System::ValueType{
        void* lpvarValue;
        int32_t oInst;
        
        DESCUNION2* operator ->() { return this; }
        DESCUNION2() = default;
        DESCUNION2(const DESCUNION2* src);
        operator DESCUNION2*() { return ::cli::box<DESCUNION2*>(this); }
        
        
    };
    
    
    struct MANAGED_API VARDESC : public virtual System::ValueType{
        int32_t memid;
        System::String* lpstrSchema;
        ELEMDESC elemdescVar;
        int16_t wVarFlags;
        VarEnum varkind;
        
        VARDESC* operator ->() { return this; }
        VARDESC() = default;
        VARDESC(const VARDESC* src);
        operator VARDESC*() { return ::cli::box<VARDESC*>(this); }
        
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices { namespace ComTypes {
    
    struct MANAGED_API BINDPTR2 : public virtual System::ValueType{
        void* lpfuncdesc;
        void* lptcomp;
        void* lpvardesc;
        
        BINDPTR2* operator ->() { return this; }
        BINDPTR2() = default;
        BINDPTR2(const BINDPTR2* src);
        operator BINDPTR2*() { return ::cli::box<BINDPTR2*>(this); }
        
        
    };
    
    
    struct MANAGED_API BIND_OPTS2 : public virtual System::ValueType{
        int32_t cbStruct;
        int32_t grfFlags;
        int32_t grfMode;
        int32_t dwTickCountDeadline;
        
        BIND_OPTS2* operator ->() { return this; }
        BIND_OPTS2() = default;
        BIND_OPTS2(const BIND_OPTS2* src);
        operator BIND_OPTS2*() { return ::cli::box<BIND_OPTS2*>(this); }
        
        
    };
    
    
    struct MANAGED_API CONNECTDATA2 : public virtual System::ValueType{
        System::Object* pUnk;
        int32_t dwCookie;
        
        CONNECTDATA2* operator ->() { return this; }
        CONNECTDATA2() = default;
        CONNECTDATA2(const CONNECTDATA2* src);
        operator CONNECTDATA2*() { return ::cli::box<CONNECTDATA2*>(this); }
        
        
    };
    
    
    struct MANAGED_API DISPPARAMS2 : public virtual System::ValueType{
        void* rgvarg;
        void* rgdispidNamedArgs;
        int32_t cArgs;
        int32_t cNamedArgs;
        
        DISPPARAMS2* operator ->() { return this; }
        DISPPARAMS2() = default;
        DISPPARAMS2(const DISPPARAMS2* src);
        operator DISPPARAMS2*() { return ::cli::box<DISPPARAMS2*>(this); }
        
        
    };
    
    
    struct MANAGED_API EXCEPINFO2 : public virtual System::ValueType{
        int16_t wCode;
        int16_t wReserved;
        System::String* bstrSource;
        System::String* bstrDescription;
        System::String* bstrHelpFile;
        int32_t dwHelpContext;
        void* pvReserved;
        void* pfnDeferredFillIn;
        int32_t scode;
        
        EXCEPINFO2* operator ->() { return this; }
        EXCEPINFO2() = default;
        EXCEPINFO2(const EXCEPINFO2* src);
        operator EXCEPINFO2*() { return ::cli::box<EXCEPINFO2*>(this); }
        
        
    };
    
    
    struct MANAGED_API FUNCDESC2 : public virtual System::ValueType{
        int32_t memid;
        void* lprgscode;
        void* lprgelemdescParam;
        FUNCKIND2 funckind;
        INVOKEKIND2 invkind;
        CALLCONV2 callconv;
        int16_t cParams;
        int16_t cParamsOpt;
        int16_t oVft;
        int16_t cScodes;
        ELEMDESC2 elemdescFunc;
        int16_t wFuncFlags;
        
        FUNCDESC2* operator ->() { return this; }
        FUNCDESC2() = default;
        FUNCDESC2(const FUNCDESC2* src);
        operator FUNCDESC2*() { return ::cli::box<FUNCDESC2*>(this); }
        
        
    };
    
    
    struct MANAGED_API STATSTG2 : public virtual System::ValueType{
        System::String* pwcsName;
        int32_t type;
        int64_t cbSize;
        FILETIME2 mtime;
        FILETIME2 ctime;
        FILETIME2 atime;
        int32_t grfMode;
        int32_t grfLocksSupported;
        System::Guid clsid;
        int32_t grfStateBits;
        int32_t reserved;
        
        STATSTG2* operator ->() { return this; }
        STATSTG2() = default;
        STATSTG2(const STATSTG2* src);
        operator STATSTG2*() { return ::cli::box<STATSTG2*>(this); }
        
        
    };
    
    
    struct MANAGED_API TYPEATTR2 : public virtual System::ValueType{
        static constexpr int32_t MEMBER_ID_NIL = -1;
        System::Guid guid;
        int32_t lcid;
        int32_t dwReserved;
        int32_t memidConstructor;
        int32_t memidDestructor;
        void* lpstrSchema;
        int32_t cbSizeInstance;
        TYPEKIND2 typekind;
        int16_t cFuncs;
        int16_t cVars;
        int16_t cImplTypes;
        int16_t cbSizeVft;
        int16_t cbAlignment;
        TYPEFLAGS2 wTypeFlags;
        int16_t wMajorVerNum;
        int16_t wMinorVerNum;
        TYPEDESC2 tdescAlias;
        IDLDESC2 idldescType;
        
        TYPEATTR2* operator ->() { return this; }
        TYPEATTR2() = default;
        TYPEATTR2(const TYPEATTR2* src);
        operator TYPEATTR2*() { return ::cli::box<TYPEATTR2*>(this); }
        
        
    };
    
    
    struct MANAGED_API TYPELIBATTR2 : public virtual System::ValueType{
        System::Guid guid;
        int32_t lcid;
        SYSKIND2 syskind;
        int16_t wMajorVerNum;
        int16_t wMinorVerNum;
        LIBFLAGS2 wLibFlags;
        
        TYPELIBATTR2* operator ->() { return this; }
        TYPELIBATTR2() = default;
        TYPELIBATTR2(const TYPELIBATTR2* src);
        operator TYPELIBATTR2*() { return ::cli::box<TYPELIBATTR2*>(this); }
        
        
    };
    
    
    struct MANAGED_API VARDESC2 : public virtual System::ValueType{
        int32_t memid;
        System::String* lpstrSchema;
        DESCUNION4 desc;
        ELEMDESC2 elemdescVar;
        int16_t wVarFlags;
        VARKIND varkind;
        
        VARDESC2* operator ->() { return this; }
        VARDESC2() = default;
        VARDESC2(const VARDESC2* src);
        operator VARDESC2*() { return ::cli::box<VARDESC2*>(this); }
        
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API ProcessMessageRes : public virtual System::ValueType{
        cli::array<unsigned char>* arrResponse;
        System::Runtime::Remoting::Messaging::CADMethodReturnMessage* cadMrm;
        
        ProcessMessageRes* operator ->() { return this; }
        ProcessMessageRes() = default;
        ProcessMessageRes(const ProcessMessageRes* src);
        operator ProcessMessageRes*() { return ::cli::box<ProcessMessageRes*>(this); }
        
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    struct MANAGED_API SerializationEntry : public virtual System::ValueType{
        System::String* name;
        System::Type* objectType;
        System::Object* value;
        
        SerializationEntry* operator ->() { return this; }
        SerializationEntry() = default;
        SerializationEntry(const SerializationEntry* src);
        operator SerializationEntry*() { return ::cli::box<SerializationEntry*>(this); }
        
        void constructor(System::String* name, System::Type* type, System::Object* value);
        System::String* get_Name();
        System::Type* get_ObjectType();
        System::Object* get_Value();
        
    };
    
    
    struct MANAGED_API StreamingContext : public virtual System::ValueType{
        StreamingContextStates state;
        System::Object* additional;
        
        StreamingContext* operator ->() { return this; }
        StreamingContext() = default;
        StreamingContext(const StreamingContext* src);
        operator StreamingContext*() { return ::cli::box<StreamingContext*>(this); }
        
        void constructor(StreamingContextStates state);
        void constructor(StreamingContextStates state, System::Object* additional);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::Object* get_Context();
        StreamingContextStates get_State();
        
    };
    
}}}
namespace System { namespace Security {
    
    struct MANAGED_API SecurityFrame : public virtual System::ValueType{
        System::AppDomain* _domain;
        System::Reflection::MethodInfo* _method;
        PermissionSet* _assert;
        PermissionSet* _deny;
        PermissionSet* _permitonly;
        
        SecurityFrame* operator ->() { return this; }
        SecurityFrame() = default;
        SecurityFrame(const SecurityFrame* src);
        operator SecurityFrame*() { return ::cli::box<SecurityFrame*>(this); }
        
        void constructor(RuntimeSecurityFrame* frame);
        void constructor(int32_t skip);
        static RuntimeSecurityFrame* _GetSecurityFrame(int32_t skip);
        static System::Array* _GetSecurityStack(int32_t skip);
        void InitFromRuntimeFrame(RuntimeSecurityFrame* frame);
        bool Equals(SecurityFrame sf);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static System::Collections::ArrayList* GetStack(int32_t skipFrames);
        System::Reflection::Assembly* get_Assembly();
        System::AppDomain* get_Domain();
        System::Reflection::MethodInfo* get_Method();
        PermissionSet* get_Assert();
        PermissionSet* get_Deny();
        PermissionSet* get_PermitOnly();
        bool get_HasStackModifiers();
        
    };
    
    
    struct MANAGED_API RuntimeDeclSecurityActions : public virtual System::ValueType{
        RuntimeDeclSecurityEntry cas;
        RuntimeDeclSecurityEntry noncas;
        RuntimeDeclSecurityEntry choice;
        
        RuntimeDeclSecurityActions* operator ->() { return this; }
        RuntimeDeclSecurityActions() = default;
        RuntimeDeclSecurityActions(const RuntimeDeclSecurityActions* src);
        operator RuntimeDeclSecurityActions*() { return ::cli::box<RuntimeDeclSecurityActions*>(this); }
        
        
    };
    
}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API DSAParameters : public virtual System::ValueType{
        int32_t Counter;
        cli::array<unsigned char>* G;
        cli::array<unsigned char>* J;
        cli::array<unsigned char>* P;
        cli::array<unsigned char>* Q;
        cli::array<unsigned char>* Seed;
        cli::array<unsigned char>* X;
        cli::array<unsigned char>* Y;
        
        DSAParameters* operator ->() { return this; }
        DSAParameters() = default;
        DSAParameters(const DSAParameters* src);
        operator DSAParameters*() { return ::cli::box<DSAParameters*>(this); }
        
        
    };
    
    
    struct MANAGED_API RSAParameters : public virtual System::ValueType{
        cli::array<unsigned char>* P;
        cli::array<unsigned char>* Q;
        cli::array<unsigned char>* D;
        cli::array<unsigned char>* DP;
        cli::array<unsigned char>* DQ;
        cli::array<unsigned char>* InverseQ;
        cli::array<unsigned char>* Modulus;
        cli::array<unsigned char>* Exponent;
        
        RSAParameters* operator ->() { return this; }
        RSAParameters() = default;
        RSAParameters(const RSAParameters* src);
        operator RSAParameters*() { return ::cli::box<RSAParameters*>(this); }
        
        
    };
    
}}}
namespace System { namespace Security { namespace Cryptography { namespace X509Certificates {
    
    struct MANAGED_API CertificateContext : public virtual System::ValueType{
        uint32_t dwCertEncodingType;
        void* pbCertEncoded;
        uint32_t cbCertEncoded;
        void* pCertInfo;
        void* hCertStore;
        
        CertificateContext* operator ->() { return this; }
        CertificateContext() = default;
        CertificateContext(const CertificateContext* src);
        operator CertificateContext*() { return ::cli::box<CertificateContext*>(this); }
        
        
    };
    
}}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API SNIP : public virtual System::ValueType{
        StrongNamePublicKeyBlob* PublicKey;
        System::String* Name2;
        System::Version* AssemblyVersion;
        
        SNIP* operator ->() { return this; }
        SNIP() = default;
        SNIP(const SNIP* src);
        operator SNIP*() { return ::cli::box<SNIP*>(this); }
        
        void constructor(StrongNamePublicKeyBlob* pk, System::String* name, System::Version* version);
        static SNIP CreateDefault();
        bool IsNameSubsetOf(System::String* target);
        bool IsSubsetOf(SNIP target);
        
    };
    
}}}
namespace System { namespace Threading {
    
    struct MANAGED_API AsyncFlowControl : public virtual System::ValueType, public virtual System::IDisposable{
        Thread* _t;
        AsyncFlowControlType _type;
        
        AsyncFlowControl* operator ->() { return this; }
        AsyncFlowControl() = default;
        AsyncFlowControl(const AsyncFlowControl* src);
        operator AsyncFlowControl*() { return ::cli::box<AsyncFlowControl*>(this); }
        
        void constructor(Thread* t, AsyncFlowControlType type);
        void Undo();
        void Dispose();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        bool Equals2(AsyncFlowControl obj);
        static bool op_Equality(AsyncFlowControl a, AsyncFlowControl b);
        static bool op_Inequality(AsyncFlowControl a, AsyncFlowControl b);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API AtomicBooleanValue : public virtual System::ValueType{
        static constexpr int32_t UnSet = 0;
        static constexpr int32_t Set = 1;
        int32_t flag;
        
        AtomicBooleanValue* operator ->() { return this; }
        AtomicBooleanValue() = default;
        AtomicBooleanValue(const AtomicBooleanValue* src);
        operator AtomicBooleanValue*() { return ::cli::box<AtomicBooleanValue*>(this); }
        
        bool CompareAndExchange(bool expected, bool newVal);
        static AtomicBooleanValue FromValue(bool value);
        bool TrySet();
        bool TryRelaxedSet();
        bool Exchange(bool newVal);
        bool Equals(AtomicBooleanValue rhs);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* rhs) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Explicit(AtomicBooleanValue rhs);
        static AtomicBooleanValue op_Implicit(bool rhs);
        bool get_Value();
        bool set_Value(bool value);
        
    };
    
    
    struct MANAGED_API CancellationToken : public virtual System::ValueType{
        CancellationTokenSource* source;
        
        CancellationToken* operator ->() { return this; }
        CancellationToken() = default;
        CancellationToken(const CancellationToken* src);
        operator CancellationToken*() { return ::cli::box<CancellationToken*>(this); }
        
        void constructor(bool canceled);
        void constructor(CancellationTokenSource* source);
        CancellationTokenRegistration Register(System::Action* callback);
        CancellationTokenRegistration Register2(System::Action* callback, bool useSynchronizationContext);
        CancellationTokenRegistration Register3(System::Action2<System::Object*>* callback, System::Object* state);
        CancellationTokenRegistration Register4(System::Action2<System::Object*>* callback, System::Object* state, bool useSynchronizationContext);
        void ThrowIfCancellationRequested();
        bool Equals(CancellationToken other);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* other) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(CancellationToken left, CancellationToken right);
        static bool op_Inequality(CancellationToken left, CancellationToken right);
        static CancellationToken get_None();
        bool get_CanBeCanceled();
        bool get_IsCancellationRequested();
        WaitHandle* get_WaitHandle();
        CancellationTokenSource* get_Source();
        
    };
    
    
    struct MANAGED_API CancellationTokenRegistration : public virtual System::ValueType, public virtual System::IDisposable, public virtual System::IEquatable<CancellationTokenRegistration>{
        int32_t id;
        CancellationTokenSource* source;
        
        CancellationTokenRegistration* operator ->() { return this; }
        CancellationTokenRegistration() = default;
        CancellationTokenRegistration(const CancellationTokenRegistration* src);
        operator CancellationTokenRegistration*() { return ::cli::box<CancellationTokenRegistration*>(this); }
        
        void constructor(int32_t id, CancellationTokenSource* source);
        void Dispose();
        bool Equals(CancellationTokenRegistration other);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        static bool op_Equality(CancellationTokenRegistration left, CancellationTokenRegistration right);
        static bool op_Inequality(CancellationTokenRegistration left, CancellationTokenRegistration right);
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool Equals_ea48fd0c13a733fe(CancellationTokenRegistration other) override;
    };
    
    
    struct MANAGED_API CompressedStackSwitcher : public virtual System::ValueType, public virtual System::IDisposable{
        CompressedStack* _cs;
        Thread* _t;
        
        CompressedStackSwitcher* operator ->() { return this; }
        CompressedStackSwitcher() = default;
        CompressedStackSwitcher(const CompressedStackSwitcher* src);
        operator CompressedStackSwitcher*() { return ::cli::box<CompressedStackSwitcher*>(this); }
        
        void constructor(CompressedStack* cs, Thread* t);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void Undo();
        static bool op_Equality(CompressedStackSwitcher c1, CompressedStackSwitcher c2);
        static bool op_Inequality(CompressedStackSwitcher c1, CompressedStackSwitcher c2);
        void Dispose();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API ExecutionContextSwitcher : public virtual System::ValueType, public virtual System::IDisposable{
        
        ExecutionContextSwitcher* operator ->() { return this; }
        ExecutionContextSwitcher() = default;
        ExecutionContextSwitcher(const ExecutionContextSwitcher* src);
        operator ExecutionContextSwitcher*() { return ::cli::box<ExecutionContextSwitcher*>(this); }
        
        virtual bool Equals_ed975d2f4a7d193e(System::Object* ob) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void Undo();
        void Dispose();
        static bool op_Equality(ExecutionContextSwitcher c1, ExecutionContextSwitcher c2);
        static bool op_Inequality(ExecutionContextSwitcher c1, ExecutionContextSwitcher c2);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API HostExecutionContextSwitcher : public virtual System::ValueType, public virtual System::IDisposable{
        
        HostExecutionContextSwitcher* operator ->() { return this; }
        HostExecutionContextSwitcher() = default;
        HostExecutionContextSwitcher(const HostExecutionContextSwitcher* src);
        operator HostExecutionContextSwitcher*() { return ::cli::box<HostExecutionContextSwitcher*>(this); }
        
        void Undo();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void Dispose();
        HostExecutionContext* get_CurrentHostExecutionContext();
        HostExecutionContext* set_CurrentHostExecutionContext(HostExecutionContext* value);
        HostExecutionContext* get_PreviousHostExecutionContext();
        HostExecutionContext* set_PreviousHostExecutionContext(HostExecutionContext* value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API LockCookie : public virtual System::ValueType{
        int32_t ThreadId;
        int32_t ReaderLocks;
        int32_t WriterLocks;
        
        LockCookie* operator ->() { return this; }
        LockCookie() = default;
        LockCookie(const LockCookie* src);
        operator LockCookie*() { return ::cli::box<LockCookie*>(this); }
        
        void constructor(int32_t thread_id);
        void constructor(int32_t thread_id, int32_t reader_locks, int32_t writer_locks);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        bool Equals(LockCookie obj);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        static bool op_Equality(LockCookie a, LockCookie b);
        static bool op_Inequality(LockCookie a, LockCookie b);
        
    };
    
    
    struct MANAGED_API NativeOverlapped : public virtual System::ValueType{
        void* EventHandle;
        void* InternalHigh;
        void* InternalLow;
        int32_t OffsetHigh;
        int32_t OffsetLow;
        int32_t Handle1;
        int32_t Handle2;
        
        NativeOverlapped* operator ->() { return this; }
        NativeOverlapped() = default;
        NativeOverlapped(const NativeOverlapped* src);
        operator NativeOverlapped*() { return ::cli::box<NativeOverlapped*>(this); }
        
        
    };
    
    
    struct MANAGED_API SpinLock : public virtual System::ValueType{
        TicketType ticket;
        int32_t threadWhoTookLock;
        bool isThreadOwnerTrackingEnabled;
        static Watch sw;
        System::Collections::Concurrent::ConcurrentOrderedList<int32_t>* stallTickets;
        
        SpinLock* operator ->() { return this; }
        SpinLock() = default;
        SpinLock(const SpinLock* src);
        operator SpinLock*() { return ::cli::box<SpinLock*>(this); }
        
        void constructor(bool enableThreadOwnerTracking);
        static void static_constructor();
        void Enter(bool lockTaken);
        void TryEnter(bool lockTaken);
        void TryEnter2(System::TimeSpan timeout, bool lockTaken);
        void TryEnter3(int32_t millisecondsTimeout, bool lockTaken);
        void Exit();
        void Exit2(bool useMemoryBarrier);
        bool get_IsThreadOwnerTrackingEnabled();
        bool get_IsHeld();
        bool get_IsHeldByCurrentThread();
        
    };
    
    
    struct MANAGED_API SpinWait : public virtual System::ValueType{
        static constexpr int32_t step = 10;
        static constexpr int32_t maxTime = 200;
        static bool isSingleCpu;
        int32_t ntime;
        
        SpinWait* operator ->() { return this; }
        SpinWait() = default;
        SpinWait(const SpinWait* src);
        operator SpinWait*() { return ::cli::box<SpinWait*>(this); }
        
        static void static_constructor();
        void SpinOnce();
        static void SpinUntil(System::Func<bool>* condition);
        static bool SpinUntil2(System::Func<bool>* condition, System::TimeSpan timeout);
        static bool SpinUntil3(System::Func<bool>* condition, int32_t millisecondsTimeout);
        void Reset();
        bool get_NextSpinWillYield();
        int32_t get_Count();
        
    };
    
    
    struct MANAGED_API SynchronizationContextSwitcher : public virtual System::ValueType, public virtual System::IDisposable{
        
        SynchronizationContextSwitcher* operator ->() { return this; }
        SynchronizationContextSwitcher() = default;
        SynchronizationContextSwitcher(const SynchronizationContextSwitcher* src);
        operator SynchronizationContextSwitcher*() { return ::cli::box<SynchronizationContextSwitcher*>(this); }
        
        virtual bool Equals_ed975d2f4a7d193e(System::Object* ob) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void Undo();
        void Dispose();
        static bool op_Equality(SynchronizationContextSwitcher c1, SynchronizationContextSwitcher c2);
        static bool op_Inequality(SynchronizationContextSwitcher c1, SynchronizationContextSwitcher c2);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    template<class T> struct MANAGED_API TlsDatum : public virtual System::ValueType{
        signed char state;
        System::Exception* cachedException;
        T data;
        
        TlsDatum<T>* operator ->() { return this; }
        TlsDatum() = default;
        TlsDatum(const TlsDatum<T>* src);
        operator TlsDatum<T>*() { return ::cli::box<TlsDatum<T>*>(this); }
        
        
    };
    
}}
namespace System { namespace Threading { namespace Tasks {
    
    struct MANAGED_API StealValue64 : public virtual System::ValueType{
        int64_t Value;
        int32_t Actual;
        int32_t Stolen;
        
        StealValue64* operator ->() { return this; }
        StealValue64() = default;
        StealValue64(const StealValue64* src);
        operator StealValue64*() { return ::cli::box<StealValue64*>(this); }
        
        
    };
    
    
    struct MANAGED_API ParallelLoopResult : public virtual System::ValueType{
        System::Nullable2<int64_t> _LowestBreakIteration_k__BackingField;
        bool _IsCompleted_k__BackingField;
        
        ParallelLoopResult* operator ->() { return this; }
        ParallelLoopResult() = default;
        ParallelLoopResult(const ParallelLoopResult* src);
        operator ParallelLoopResult*() { return ::cli::box<ParallelLoopResult*>(this); }
        
        void constructor(System::Nullable2<int64_t> lowest, bool isCompleted);
        System::Nullable2<int64_t> get_LowestBreakIteration();
        System::Nullable2<int64_t> set_LowestBreakIteration(System::Nullable2<int64_t> value);
        bool get_IsCompleted();
        bool set_IsCompleted(bool value);
        
    };
    
    
    template<class TCompletion> struct MANAGED_API TaskCompletionQueue : public virtual System::ValueType{
        TCompletion single;
        System::Collections::Concurrent::ConcurrentOrderedList<TCompletion>* completed;
        
        TaskCompletionQueue<TCompletion>* operator ->() { return this; }
        TaskCompletionQueue() = default;
        TaskCompletionQueue(const TaskCompletionQueue<TCompletion>* src);
        operator TaskCompletionQueue<TCompletion>*() { return ::cli::box<TaskCompletionQueue<TCompletion>*>(this); }
        
        void Add(TCompletion continuation);
        bool Remove(TCompletion continuation);
        bool TryGetNextCompletion(TCompletion continuation);
        bool get_HasElements();
        
    };
    
}}}
namespace System {
}
namespace System {
    
    struct MANAGED_API Exception : public virtual Object, public virtual Runtime::Serialization::ISerializable, public virtual Runtime::InteropServices::_Exception{
        cli::array<void*>* trace_ips;
        Exception* inner_exception;
        String* message;
        String* help_link;
        String* class_name;
        String* stack_trace;
        String* _remoteStackTraceString;
        int32_t remote_stack_index;
        int32_t hresult;
        String* source;
        Collections::IDictionary* _data;
        cli::array<Diagnostics::StackTrace*>* captured_traces;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        void SetMessage(String* s);
        void SetStackTrace(String* s);
        void AddFrames(Text::StringBuilder* sb, String* newline, String* unknown, Diagnostics::StackTrace* st);
        virtual Exception* GetBaseException_3c80088934e2347b();
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual String* ToString_1636a0751cb9ac11() override;
        Exception* FixRemotingException();
        void GetFullNameForStackTrace(Text::StringBuilder* sb, Reflection::MethodBase* mi);
        void CaptureTrace();
        Type* GetType2() /*new*/;
        Exception* get_InnerException();
        virtual String* get_HelpLink_523fb8e8db786972();
        virtual String* set_HelpLink_dc2ca9999b121201(String* value);
        int32_t get_HResult();
        int32_t set_HResult(int32_t value);
        String* get_ClassName();
        virtual String* get_Message_d211df4045b57cbf();
        virtual String* get_Source_fe63b25bfdf963b9();
        virtual String* set_Source_4a11d6bd5ca37e45(String* value);
        virtual String* get_StackTrace_f3fc28619b4f921();
        Reflection::MethodBase* get_TargetSite();
        virtual Collections::IDictionary* get_Data_6dba6d3fc94b4ca2();
        void add_SerializeObjectState(EventHandler2<Runtime::Serialization::SafeSerializationEventArgs*>* value);
        void remove_SerializeObjectState(EventHandler2<Runtime::Serialization::SafeSerializationEventArgs*>* value);
        
        virtual Exception* GetBaseException_253c3eebfe2fed4a() override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual void GetObjectData_cacfaf455dbef0a5(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* ToString_118e365de8f6791a() override;
        virtual Type* GetType_74b1e7e5e0897ded() override;
        virtual Exception* get_InnerException_fee5e87d6404fbbb() override;
        virtual String* get_HelpLink_c746e07ff3b23b1d() override;
        virtual String* set_HelpLink_c6d532780c9a4ffa(String* value) override;
        virtual String* get_Message_236e49c6b265ab9b() override;
        virtual String* get_Source_1ad0ababbacddeca() override;
        virtual String* set_Source_593b7183e562d37d(String* value) override;
        virtual String* get_StackTrace_eedb0499938735b7() override;
        virtual Reflection::MethodBase* get_TargetSite_d5a44210796e0db() override;
        virtual bool Equals_8745d1c324afa9f2(Object* obj) override;
        virtual int32_t GetHashCode_3274e1baccc4f8d1() override;
    };
    
    
    struct MANAGED_API Attribute : public virtual Object, public virtual Runtime::InteropServices::_Attribute{
        
        void constructor();
        static void CheckParameters(Object* element, Type* attributeType);
        static Attribute* FindAttribute(cli::array<Object*>* attributes);
        static Attribute* GetCustomAttribute(Reflection::ParameterInfo* element, Type* attributeType);
        static Attribute* GetCustomAttribute2(Reflection::MemberInfo* element, Type* attributeType);
        static Attribute* GetCustomAttribute3(Reflection::Assembly* element, Type* attributeType);
        static Attribute* GetCustomAttribute4(Reflection::Module* element, Type* attributeType);
        static Attribute* GetCustomAttribute5(Reflection::Module* element, Type* attributeType, bool inherit);
        static Attribute* GetCustomAttribute6(Reflection::Assembly* element, Type* attributeType, bool inherit);
        static Attribute* GetCustomAttribute7(Reflection::ParameterInfo* element, Type* attributeType, bool inherit);
        static Attribute* GetCustomAttribute8(Reflection::MemberInfo* element, Type* attributeType, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes(Reflection::Assembly* element);
        static cli::array<Attribute*>* GetCustomAttributes2(Reflection::ParameterInfo* element);
        static cli::array<Attribute*>* GetCustomAttributes3(Reflection::MemberInfo* element);
        static cli::array<Attribute*>* GetCustomAttributes4(Reflection::Module* element);
        static cli::array<Attribute*>* GetCustomAttributes5(Reflection::Assembly* element, Type* attributeType);
        static cli::array<Attribute*>* GetCustomAttributes6(Reflection::Module* element, Type* attributeType);
        static cli::array<Attribute*>* GetCustomAttributes7(Reflection::ParameterInfo* element, Type* attributeType);
        static cli::array<Attribute*>* GetCustomAttributes8(Reflection::MemberInfo* element, Type* type);
        static cli::array<Attribute*>* GetCustomAttributes9(Reflection::Assembly* element, Type* attributeType, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes10(Reflection::ParameterInfo* element, Type* attributeType, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes11(Reflection::Module* element, Type* attributeType, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes12(Reflection::MemberInfo* element, Type* type, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes13(Reflection::Module* element, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes14(Reflection::Assembly* element, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes15(Reflection::MemberInfo* element, bool inherit);
        static cli::array<Attribute*>* GetCustomAttributes16(Reflection::ParameterInfo* element, bool inherit);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool IsDefaultAttribute_da53f5ba259bc222();
        static bool IsDefined(Reflection::Module* element, Type* attributeType);
        static bool IsDefined2(Reflection::ParameterInfo* element, Type* attributeType);
        static bool IsDefined3(Reflection::MemberInfo* element, Type* attributeType);
        static bool IsDefined4(Reflection::Assembly* element, Type* attributeType);
        static bool IsDefined5(Reflection::MemberInfo* element, Type* attributeType, bool inherit);
        static bool IsDefined6(Reflection::Assembly* element, Type* attributeType, bool inherit);
        static bool IsDefined7(Reflection::Module* element, Type* attributeType, bool inherit);
        static bool IsDefined8(Reflection::ParameterInfo* element, Type* attributeType, bool inherit);
        static bool IsDefinedOnParameter(Reflection::ParameterInfo* parameter, Type* attributeType);
        static bool TryGetParamCustomAttributes(Reflection::ParameterInfo* parameter, Type* attributeType, cli::array<Attribute*>* attributes);
        virtual bool Match_32d8f574c7dfa9e6(Object* obj);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        void GetIDsOfNames(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual Object* get_TypeId_c2c1feb36f0c7d0();
        
        virtual void GetIDsOfNames_9cccc850c227cee4(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_21411d803e85bbb9(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_b9a92feca41bb40d(uint32_t pcTInfo) override;
        virtual void Invoke_3474b6c87defe10(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
}
namespace System { namespace Reflection {
    
    struct MANAGED_API MemberInfo : public virtual System::Object, public virtual ICustomAttributeProvider, public virtual System::Runtime::InteropServices::_MemberInfo{
        
        void constructor();
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) = 0;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) = 0;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static bool op_Equality(MemberInfo* left, MemberInfo* right);
        static bool op_Inequality(MemberInfo* left, MemberInfo* right);
        virtual System::Type* get_DeclaringType_6121cd6a84393166() = 0;
        virtual MemberTypes get_MemberType_cd521d320810c98f() = 0;
        virtual System::String* get_Name_50fad5fa936c3ae2() = 0;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() = 0;
        virtual Module* get_Module_ea7d65dc88202263();
        virtual int32_t get_MetadataToken_85fbeea46e971f25();
        
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
        virtual bool IsDefined_9a29baf351241ea8(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_1e9c83be1d923116(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_3f972bb24bf44f4e(System::Type* attributeType, bool inherit) override;
        virtual bool Equals_e3e2ad51cac823cf(System::Object* obj) override;
        virtual int32_t GetHashCode_aec47076d35c126c() override;
        virtual void GetIDsOfNames_728279314ddde699(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_c9dc23100dd864c7(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_74162cfe932123cb(uint32_t pcTInfo) override;
        virtual void Invoke_dc29eb2afa4cd141(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Type* get_DeclaringType_45ac98b183897971() override;
        virtual MemberTypes get_MemberType_fb536638b8ed56c7() override;
        virtual System::String* get_Name_70a7d5287f19ebf8() override;
        virtual System::Type* get_ReflectedType_b357cb7ff6b67a77() override;
        virtual System::Type* GetType_291272aa21703927() override;
        virtual System::String* ToString_bbdca41cc47e5d27() override;
    };
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    struct MANAGED_API ObjectSecurity : public virtual System::Object{
        bool is_container;
        bool access_rules_modified;
        bool group_modified;
        bool is_ds;
        bool audit_rules_modified;
        bool owner_modified;
        
        void constructor();
        void constructor(bool isContainer, bool isDS);
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) = 0;
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) = 0;
        System::Security::Principal::IdentityReference* GetGroup(System::Type* targetType);
        System::Security::Principal::IdentityReference* GetOwner(System::Type* targetType);
        cli::array<unsigned char>* GetSecurityDescriptorBinaryForm();
        System::String* GetSecurityDescriptorSddlForm(AccessControlSections includeSections);
        static bool IsSddlConversionSupported();
        virtual bool ModifyAccessRule_1fba4a106e0b76b4(AccessControlModification modification, AccessRule* rule, bool modified);
        virtual bool ModifyAuditRule_d2c81e0c97784362(AccessControlModification modification, AuditRule* rule, bool modified);
        virtual void PurgeAccessRules_332a920868af627c(System::Security::Principal::IdentityReference* identity);
        virtual void PurgeAuditRules_8d00324958085747(System::Security::Principal::IdentityReference* identity);
        void SetAccessRuleProtection(bool isProtected, bool preserveInheritance);
        void SetAuditRuleProtection(bool isProtected, bool preserveInheritance);
        void SetGroup(System::Security::Principal::IdentityReference* identity);
        void SetOwner(System::Security::Principal::IdentityReference* identity);
        void SetSecurityDescriptorBinaryForm(cli::array<unsigned char>* binaryForm);
        void SetSecurityDescriptorBinaryForm2(cli::array<unsigned char>* binaryForm, AccessControlSections includeSections);
        void SetSecurityDescriptorSddlForm(System::String* sddlForm);
        void SetSecurityDescriptorSddlForm2(System::String* sddlForm, AccessControlSections includeSections);
        virtual bool ModifyAccess_f072698aed397d6b(AccessControlModification modification, AccessRule* rule, bool modified) = 0;
        virtual bool ModifyAudit_f86f011c1cc059a7(AccessControlModification modification, AuditRule* rule, bool modified) = 0;
        virtual void Persist_8df14ef0f469b740(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections);
        virtual void Persist_d34830fae35e2aad(System::String* name, AccessControlSections includeSections);
        virtual void Persist_69fe3700dea76a00(bool enableOwnershipPrivilege, System::String* name, AccessControlSections includeSections);
        void ReadLock();
        void ReadUnlock();
        void WriteLock();
        void WriteUnlock();
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() = 0;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() = 0;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() = 0;
        bool get_AreAccessRulesCanonical();
        bool get_AreAccessRulesProtected();
        bool get_AreAuditRulesCanonical();
        bool get_AreAuditRulesProtected();
        bool get_AccessRulesModified();
        bool set_AccessRulesModified(bool value);
        bool get_AuditRulesModified();
        bool set_AuditRulesModified(bool value);
        bool get_GroupModified();
        bool set_GroupModified(bool value);
        bool get_IsContainer();
        bool get_IsDS();
        bool get_OwnerModified();
        bool set_OwnerModified(bool value);
        
    };
    
}}}
namespace System {
    
    struct MANAGED_API MarshalByRefObject : public virtual Object{
        Runtime::Remoting::ServerIdentity* _identity;
        
        void constructor();
        Runtime::Remoting::Identity* GetObjectIdentity(MarshalByRefObject* obj, bool IsClient);
        virtual Runtime::Remoting::ObjRef* CreateObjRef_53237520275c27b1(Type* requestedType);
        Object* GetLifetimeService();
        virtual Object* InitializeLifetimeService_8f02e9c96ffbe30f();
        MarshalByRefObject* MemberwiseClone2(bool cloneIdentity);
        Runtime::Remoting::ServerIdentity* get_ObjectIdentity();
        Runtime::Remoting::ServerIdentity* set_ObjectIdentity(Runtime::Remoting::ServerIdentity* value);
        
    };
    
    
    struct MANAGED_API SystemException : public virtual Exception{
        static constexpr int32_t Result = -2146233087;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API ArrayList : public virtual System::Object, public virtual IList, public virtual System::ICloneable, public virtual ICollection, public virtual IEnumerable{
        static constexpr int32_t DefaultInitialCapacity = 4;
        cli::array<System::Object*>* _items;
        int32_t _size;
        int32_t _version;
        static cli::array<System::Object*>* EmptyArray;
        
        ArrayList();
        void constructor();
        void constructor(ICollection* c);
        void constructor(int32_t capacity);
        void constructor(int32_t initialCapacity, bool forceZeroSize);
        void constructor(cli::array<System::Object*>* array, int32_t index, int32_t count);
        static void static_constructor();
        void EnsureCapacity(int32_t count);
        void Shift(int32_t index, int32_t count);
        virtual int32_t Add_e6a92085999ce388(System::Object* value);
        virtual void Clear_cd6654e5a40f5056();
        virtual bool Contains_f1c198d01147f1ee(System::Object* item);
        virtual bool Contains_381049624765eb70(System::Object* value, int32_t startIndex, int32_t count);
        virtual int32_t IndexOf_7e9811d6771f771d(System::Object* value);
        virtual int32_t IndexOf_1c0527e45dc3728e(System::Object* value, int32_t startIndex);
        virtual int32_t IndexOf_adae3dc40eaa594e(System::Object* value, int32_t startIndex, int32_t count);
        virtual int32_t LastIndexOf_ecfd0185f74248a7(System::Object* value);
        virtual int32_t LastIndexOf_ed2c73a4e33a0826(System::Object* value, int32_t startIndex);
        virtual int32_t LastIndexOf_c6f99b5b290904b1(System::Object* value, int32_t startIndex, int32_t count);
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value);
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c);
        virtual void Remove_2225381aaf812c6d(System::Object* obj);
        virtual void RemoveAt_2abea768d3273318(int32_t index);
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count);
        virtual void Reverse_e7caef4018f63b41();
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count);
        virtual void CopyTo_c634d425a65b1fc3(System::Array* array);
        virtual void CopyTo_2bc540dad3c25b9e(System::Array* array, int32_t arrayIndex);
        virtual void CopyTo_4b0d97bda775c102(int32_t index, System::Array* array, int32_t arrayIndex, int32_t count);
        virtual IEnumerator* GetEnumerator_84e3ba8f2fdefd62();
        virtual IEnumerator* GetEnumerator_78a3fe75766282cd(int32_t index, int32_t count);
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c);
        virtual int32_t BinarySearch_77606568b997fd61(System::Object* value);
        virtual int32_t BinarySearch_f0deec366fa04a93(System::Object* value, IComparer* comparer);
        virtual int32_t BinarySearch_5160cee074873e3f(int32_t index, int32_t count, System::Object* value, IComparer* comparer);
        virtual ArrayList* GetRange_21d02af9397d43dc(int32_t index, int32_t count);
        virtual void SetRange_87e491be8261c464(int32_t index, ICollection* c);
        virtual void TrimToSize_d8592d0aafda93d();
        virtual void Sort_9fb0fdfea73c2096();
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer);
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer);
        virtual cli::array<System::Object*>* ToArray_360bcd462eb48114();
        virtual System::Array* ToArray_7b80f35a5dbfbc47(System::Type* type);
        virtual System::Object* Clone_5d610374e21ea7b0();
        static void CheckRange(int32_t index, int32_t count, int32_t listCount);
        static void ThrowNewArgumentOutOfRangeException(System::String* name, System::Object* actual, System::String* message);
        static ArrayList* Adapter(IList* list);
        static ArrayList* Synchronized(ArrayList* list);
        static IList* Synchronized2(IList* list);
        static ArrayList* ReadOnly(ArrayList* list);
        static IList* ReadOnly2(IList* list);
        static ArrayList* FixedSize(ArrayList* list);
        static IList* FixedSize2(IList* list);
        static ArrayList* Repeat(System::Object* value, int32_t count);
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index);
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value);
        virtual int32_t get_Count_2354963792616712();
        virtual int32_t get_Capacity_2220db8052d52582();
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value);
        virtual bool get_IsFixedSize_97a42a087785251();
        virtual bool get_IsReadOnly_671df7b1908db8ee();
        virtual bool get_IsSynchronized_ffa26be0a148c3c0();
        virtual System::Object* get_SyncRoot_edb1ba826807b569();
        
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(System::Object* item) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* obj) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
}}
namespace System { namespace Reflection {
    
    struct MANAGED_API MethodBase : public virtual MemberInfo, public virtual System::Runtime::InteropServices::_MethodBase{
        
        void constructor();
        static MethodBase* GetCurrentMethod();
        static MethodBase* GetMethodFromHandleNoGenericCheck(System::RuntimeMethodHandle handle);
        static MethodBase* GetMethodFromIntPtr(void* handle, void* declaringType);
        static MethodBase* GetMethodFromHandle(System::RuntimeMethodHandle handle);
        static MethodBase* GetMethodFromHandleInternalType(void* method_handle, void* type_handle);
        static MethodBase* GetMethodFromHandle2(System::RuntimeMethodHandle handle, System::RuntimeTypeHandle declaringType);
        virtual MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() = 0;
        virtual cli::array<ParameterInfo*>* GetParameters_9d17bcb549474c9() = 0;
        virtual int32_t GetParameterCount_ac86b3a4965d967a();
        virtual System::Type* GetParameterType_f80ea4ad68a899fb(int32_t pos);
        System::Object* Invoke2(System::Object* obj, cli::array<System::Object*>* parameters);
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        virtual int32_t get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc);
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958();
        static MethodBody* GetMethodBodyInternal(void* handle);
        static MethodBody* GetMethodBody(void* handle);
        virtual MethodBody* GetMethodBody_3bb8bd5a6a55236();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static bool op_Equality2(MethodBase* left, MethodBase* right);
        static bool op_Inequality2(MethodBase* left, MethodBase* right);
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() = 0;
        virtual MethodAttributes get_Attributes_b3976e6a55c088be() = 0;
        virtual CallingConventions get_CallingConvention_309cf574b58a053a();
        bool get_IsPublic();
        bool get_IsPrivate();
        bool get_IsFamily();
        bool get_IsAssembly();
        bool get_IsFamilyAndAssembly();
        bool get_IsFamilyOrAssembly();
        bool get_IsStatic();
        bool get_IsFinal();
        bool get_IsVirtual();
        bool get_IsHideBySig();
        bool get_IsAbstract();
        bool get_IsSpecialName();
        bool get_IsConstructor();
        virtual bool get_ContainsGenericParameters_113614fa92731376();
        virtual bool get_IsGenericMethodDefinition_cce889be2a806b0f();
        virtual bool get_IsGenericMethod_7e509e51546ea990();
        virtual bool get_IsSecurityCritical_f808650a62bc3cba();
        virtual bool get_IsSecuritySafeCritical_e2b44dfd7778435c();
        virtual bool get_IsSecurityTransparent_6be23aacb2e166e7();
        
        virtual MethodImplAttributes GetMethodImplementationFlags_814f2d9055c5e3f0() override;
        virtual cli::array<ParameterInfo*>* GetParameters_ab7269a35b115074() override;
        virtual System::Object* Invoke_53b572f36e795bf7(System::Object* obj, cli::array<System::Object*>* parameters) override;
        virtual System::Object* Invoke_26dd0cb2b98af8a7(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool Equals_40cb186ce0df4494(System::Object* obj) override;
        virtual int32_t GetHashCode_500c457e110796c() override;
        virtual void GetIDsOfNames_2a1bcdee1bef14ae(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_e95f8864a8b4dee1(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_b94bcd4bce9387aa(uint32_t pcTInfo) override;
        virtual void Invoke_f90d995426760012(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::RuntimeMethodHandle get_MethodHandle_67a441d308d5bdc9() override;
        virtual MethodAttributes get_Attributes_834ca72eefacb0bd() override;
        virtual CallingConventions get_CallingConvention_1674d1fe4ad1e34e() override;
        virtual bool get_IsPublic_1c6a14b9c1ddb3f5() override;
        virtual bool get_IsPrivate_177db4f7934a595a() override;
        virtual bool get_IsFamily_fcf1926f66141f44() override;
        virtual bool get_IsAssembly_f7d9c32268907cdc() override;
        virtual bool get_IsFamilyAndAssembly_34671eb788f57d0b() override;
        virtual bool get_IsFamilyOrAssembly_915fd33863bef97e() override;
        virtual bool get_IsStatic_280bee21a683e29c() override;
        virtual bool get_IsFinal_26ad179ceb0609b5() override;
        virtual bool get_IsVirtual_7120132dcf43b827() override;
        virtual bool get_IsHideBySig_c27a18b0abb31987() override;
        virtual bool get_IsAbstract_de0ff4f1d2087910() override;
        virtual bool get_IsSpecialName_e092294531426238() override;
        virtual bool get_IsConstructor_6eb1b3801f865555() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_9acb43cc08958c3c(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_bcf9f5a3895b278a(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetType_75d3f421672cd6ae() override;
        virtual bool IsDefined_546d947518082fbd(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_21503bff1b89098b() override;
        virtual System::Type* get_DeclaringType_b92021fbacc99856() override;
        virtual MemberTypes get_MemberType_871696f84e650fc6() override;
        virtual System::String* get_Name_2ca1b8185aa6eb66() override;
        virtual System::Type* get_ReflectedType_80c44a42bf1581d3() override;
    };
    
}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    struct MANAGED_API CriticalFinalizerObject : public virtual System::Object{
        
        void constructor();
        virtual void Finalize_194ea81baa80af66();
        
    };
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    struct MANAGED_API GenericAce : public virtual System::Object{
        AceFlags ace_flags;
        AceType ace_type;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapD;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapE;
        
        void constructor(AceType type, AceFlags flags);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        GenericAce* Copy();
        static GenericAce* CreateFromBinaryForm(cli::array<unsigned char>* binaryForm, int32_t offset);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) final;
        virtual void GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) = 0;
        virtual int32_t GetHashCode_6648aef0f235ee6c() final;
        virtual System::String* GetSddlForm_9a01bbfdef8a4d87() = 0;
        static GenericAce* CreateFromSddlForm(System::String* sddlForm, int32_t pos);
        static bool IsObjectType(AceType type);
        static System::String* GetSddlAceType(AceType type);
        static AceType ParseSddlAceType(System::String* type);
        static System::String* GetSddlAceFlags(AceFlags flags);
        static AceFlags ParseSddlAceFlags(System::String* flags);
        static int32_t ParseSddlAccessRights(System::String* accessMask);
        static int32_t ParseSddlAliasRights(System::String* accessMask);
        static uint16_t ReadUShort(cli::array<unsigned char>* buffer, int32_t offset);
        static int32_t ReadInt(cli::array<unsigned char>* buffer, int32_t offset);
        static void WriteInt(int32_t val, cli::array<unsigned char>* buffer, int32_t offset);
        static void WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset);
        static bool op_Equality(GenericAce* left, GenericAce* right);
        static bool op_Inequality(GenericAce* left, GenericAce* right);
        AceFlags get_AceFlags();
        AceFlags set_AceFlags(AceFlags value);
        AceType get_AceType();
        AuditFlags get_AuditFlags();
        virtual int32_t get_BinaryLength_9e9ea5e224e95c31() = 0;
        InheritanceFlags get_InheritanceFlags();
        bool get_IsInherited();
        PropagationFlags get_PropagationFlags();
        
    };
    
    
    struct MANAGED_API CommonObjectSecurity : public virtual ObjectSecurity{
        System::Collections::Generic::List<AccessRule*>* access_rules;
        System::Collections::Generic::List<AuditRule*>* audit_rules;
        
        void constructor(bool isContainer);
        AuthorizationRuleCollection* GetAccessRules(bool includeExplicit, bool includeInherited, System::Type* targetType);
        AuthorizationRuleCollection* GetAuditRules(bool includeExplicit, bool includeInherited, System::Type* targetType);
        void AddAccessRule(AccessRule* rule);
        bool RemoveAccessRule(AccessRule* rule);
        void RemoveAccessRuleAll(AccessRule* rule);
        void RemoveAccessRuleSpecific(AccessRule* rule);
        void ResetAccessRule(AccessRule* rule);
        void SetAccessRule(AccessRule* rule);
        virtual bool ModifyAccess_f072698aed397d6b(AccessControlModification modification, AccessRule* rule, bool modified) override;
        void AddAuditRule(AuditRule* rule);
        bool RemoveAuditRule(AuditRule* rule);
        void RemoveAuditRuleAll(AuditRule* rule);
        void RemoveAuditRuleSpecific(AuditRule* rule);
        void SetAuditRule(AuditRule* rule);
        virtual bool ModifyAudit_f86f011c1cc059a7(AccessControlModification modification, AuditRule* rule, bool modified) override;
        
    };
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API HashAlgorithm : public virtual System::Object, public virtual ICryptoTransform, public virtual System::IDisposable{
        cli::array<unsigned char>* HashValue;
        int32_t HashSizeValue;
        int32_t State;
        bool disposed;
        
        void constructor();
        void Clear();
        cli::array<unsigned char>* ComputeHash(cli::array<unsigned char>* buffer);
        cli::array<unsigned char>* ComputeHash2(cli::array<unsigned char>* buffer, int32_t offset, int32_t count);
        cli::array<unsigned char>* ComputeHash3(System::IO::Stream* inputStream);
        static HashAlgorithm* Create();
        static HashAlgorithm* Create2(System::String* hashName);
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* array, int32_t ibStart, int32_t cbSize) = 0;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() = 0;
        virtual void Initialize_4bdfe3e821ea432() = 0;
        virtual void Dispose_66239c1dbe6eca10(bool disposing);
        void Dispose2();
        int32_t TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        cli::array<unsigned char>* TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        virtual bool get_CanTransformMultipleBlocks_fb3bd2c8e857f691();
        virtual bool get_CanReuseTransform_19ba0450c5bf43f9();
        virtual cli::array<unsigned char>* get_Hash_cb65a3f211aa16df();
        virtual int32_t get_HashSize_9f628c7f48e4ff01();
        virtual int32_t get_InputBlockSize_76e25e14b1426491();
        virtual int32_t get_OutputBlockSize_ade2f52ae475c349();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API SecurityAttribute2 : public virtual System::Attribute{
        SecurityAction m_Action;
        bool m_Unrestricted;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() = 0;
        bool get_Unrestricted();
        bool set_Unrestricted(bool value);
        SecurityAction get_Action();
        SecurityAction set_Action(SecurityAction value);
        
    };
    
}}}
namespace Mono { namespace Math { namespace Prime { namespace Generator {
    
    struct MANAGED_API PrimeGeneratorBase : public virtual System::Object{
        
        void constructor();
        bool PostTrialDivisionTests(Mono::Math::BigInteger* bi);
        virtual Mono::Math::BigInteger* GenerateNewPrime_96549c2617c35d0a(int32_t bits) = 0;
        virtual Mono::Math::Prime::ConfidenceFactor get_Confidence_cc463f57ab65159();
        virtual Mono::Math::Prime::PrimalityTest* get_PrimalityTest_619b000b4f438aee();
        virtual int32_t get_TrialDivisionBounds_f004a39a5ebcd185();
        
    };
    
}}}}
namespace System {
    
    struct MANAGED_API MemberAccessException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233062;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API Type : public virtual Reflection::MemberInfo, public virtual Reflection::IReflect, public virtual Runtime::InteropServices::_Type{
        static constexpr Reflection::BindingFlags DefaultBindingFlags = (System::Reflection::BindingFlags)28L;
        RuntimeTypeHandle _impl;
        static char16_t Delimiter;
        static cli::array<Type*>* EmptyTypes;
        static Reflection::MemberFilter* FilterAttribute;
        static Reflection::MemberFilter* FilterName;
        static Reflection::MemberFilter* FilterNameIgnoreCase;
        static Object* Missing2;
        
        Type();
        void constructor();
        static void static_constructor();
        static bool FilterName_impl(Reflection::MemberInfo* m, Object* filterCriteria);
        static bool FilterNameIgnoreCase_impl(Reflection::MemberInfo* m, Object* filterCriteria);
        static bool FilterAttribute_impl(Reflection::MemberInfo* m, Object* filterCriteria);
        virtual bool Equals_ed975d2f4a7d193e(Object* o) override;
        virtual bool Equals_f28141a5881cf9e3(Type* o);
        virtual Type* GetEnumUnderlyingType_54ea3579073894ef();
        virtual cli::array<String*>* GetEnumNames_1cca76c1dc3e4732();
        static NotImplementedException* CreateNIE();
        virtual Array* GetEnumValues_bdf747371fce41cc();
        bool IsValidEnumType(Type* type);
        virtual String* GetEnumName_f9c4e9ff4bd1a988(Object* value);
        virtual bool IsEnumDefined_28980f0c7a4454f(Object* value);
        static Type* GetType(String* typeName, Func2<Reflection::AssemblyName*, Reflection::Assembly*>* assemblyResolver, Func3<Reflection::Assembly*, String*, bool, Type*>* typeResolver);
        static Type* GetType2(String* typeName, Func2<Reflection::AssemblyName*, Reflection::Assembly*>* assemblyResolver, Func3<Reflection::Assembly*, String*, bool, Type*>* typeResolver, bool throwOnError);
        static Type* GetType3(String* typeName, Func2<Reflection::AssemblyName*, Reflection::Assembly*>* assemblyResolver, Func3<Reflection::Assembly*, String*, bool, Type*>* typeResolver, bool throwOnError, bool ignoreCase);
        bool EqualsInternal(Type* type);
        static Type* internal_from_handle(void* handle);
        static Type* internal_from_name(String* name, bool throwOnError, bool ignoreCase);
        static Type* GetType4(String* typeName);
        static Type* GetType5(String* typeName, bool throwOnError);
        static Type* GetType6(String* typeName, bool throwOnError, bool ignoreCase);
        static cli::array<Type*>* GetTypeArray(cli::array<Object*>* args);
        static TypeCode GetTypeCodeInternal(Type* type);
        virtual TypeCode GetTypeCodeImpl_20721b259890e678();
        static TypeCode GetTypeCode(Type* type);
        static Type* GetTypeFromCLSID(Guid clsid);
        static Type* GetTypeFromCLSID2(Guid clsid, bool throwOnError);
        static Type* GetTypeFromCLSID3(Guid clsid, String* server);
        static Type* GetTypeFromCLSID4(Guid clsid, String* server, bool throwOnError);
        static Type* GetTypeFromHandle(RuntimeTypeHandle handle);
        static Type* GetTypeFromProgID(String* progID);
        static Type* GetTypeFromProgID2(String* progID, bool throwOnError);
        static Type* GetTypeFromProgID3(String* progID, String* server);
        static Type* GetTypeFromProgID4(String* progID, String* server, bool throwOnError);
        static RuntimeTypeHandle GetTypeHandle(Object* o);
        static bool type_is_subtype_of(Type* a, Type* b, bool check_interfaces);
        static bool type_is_assignable_from(Type* a, Type* b);
        Type* GetType7() /*new*/;
        virtual bool IsSubclassOf_5d7dbe0215a30fda(Type* c);
        virtual cli::array<Type*>* FindInterfaces_7c9fc57cf4c9255f(Reflection::TypeFilter* filter, Object* filterCriteria);
        Type* GetInterface(String* name);
        virtual Type* GetInterface_55c1d0ec3ece6104(String* name, bool ignoreCase) = 0;
        static void GetInterfaceMapData(Type* t, Type* iface, cli::array<Reflection::MethodInfo*>* targets, cli::array<Reflection::MethodInfo*>* methods);
        virtual Reflection::InterfaceMapping GetInterfaceMap_26193b1c1167fea4(Type* interfaceType);
        virtual cli::array<Type*>* GetInterfaces_52a89380e2c4a725() = 0;
        virtual bool IsAssignableFrom_e3aa32d778e63a90(Type* c);
        static bool IsInstanceOfType(Type* type, Object* o);
        virtual bool IsInstanceOfType_bd709d8c55b4333d(Object* o);
        virtual int32_t GetArrayRank_fccf91da5e4acf4f();
        virtual Type* GetElementType_ab5070dbbfe66f5f() = 0;
        Reflection::EventInfo* GetEvent(String* name);
        virtual Reflection::EventInfo* GetEvent_7f053fa54114e387(String* name, Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<Reflection::EventInfo*>* GetEvents_e6858c959b77de38();
        virtual cli::array<Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(Reflection::BindingFlags bindingAttr) = 0;
        Reflection::FieldInfo* GetField(String* name);
        virtual Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(String* name, Reflection::BindingFlags bindingAttr) = 0;
        cli::array<Reflection::FieldInfo*>* GetFields();
        virtual cli::array<Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(Reflection::BindingFlags bindingAttr) = 0;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        cli::array<Reflection::MemberInfo*>* GetMember(String* name);
        virtual cli::array<Reflection::MemberInfo*>* GetMember_1a3f3c5f72801016(String* name, Reflection::BindingFlags bindingAttr);
        virtual cli::array<Reflection::MemberInfo*>* GetMember_9c934e7384b805e1(String* name, Reflection::MemberTypes type, Reflection::BindingFlags bindingAttr);
        cli::array<Reflection::MemberInfo*>* GetMembers();
        virtual cli::array<Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(Reflection::BindingFlags bindingAttr) = 0;
        Reflection::MethodInfo* GetMethod(String* name);
        Reflection::MethodInfo* GetMethod2(String* name, Reflection::BindingFlags bindingAttr);
        Reflection::MethodInfo* GetMethod3(String* name, cli::array<Type*>* types);
        Reflection::MethodInfo* GetMethod4(String* name, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        Reflection::MethodInfo* GetMethod5(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        Reflection::MethodInfo* GetMethod6(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        virtual Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) = 0;
        Reflection::MethodInfo* GetMethodImplInternal(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        virtual Reflection::MethodInfo* GetMethod_c725b8f4a943d5c8(Reflection::MethodInfo* fromNoninstanciated);
        virtual Reflection::ConstructorInfo* GetConstructor_1dd1da77cc4fe364(Reflection::ConstructorInfo* fromNoninstanciated);
        virtual Reflection::FieldInfo* GetField_4da1f61e7e2a6f8c(Reflection::FieldInfo* fromNoninstanciated);
        cli::array<Reflection::MethodInfo*>* GetMethods();
        virtual cli::array<Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(Reflection::BindingFlags bindingAttr) = 0;
        Type* GetNestedType(String* name);
        virtual Type* GetNestedType_31962c16c0c85df9(String* name, Reflection::BindingFlags bindingAttr) = 0;
        cli::array<Type*>* GetNestedTypes();
        virtual cli::array<Type*>* GetNestedTypes_bb6ee40b0fa4052d(Reflection::BindingFlags bindingAttr) = 0;
        cli::array<Reflection::PropertyInfo*>* GetProperties();
        virtual cli::array<Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(Reflection::BindingFlags bindingAttr) = 0;
        Reflection::PropertyInfo* GetProperty(String* name);
        Reflection::PropertyInfo* GetProperty2(String* name, Reflection::BindingFlags bindingAttr);
        Reflection::PropertyInfo* GetProperty3(String* name, Type* returnType);
        Reflection::PropertyInfo* GetProperty4(String* name, cli::array<Type*>* types);
        Reflection::PropertyInfo* GetProperty5(String* name, Type* returnType, cli::array<Type*>* types);
        Reflection::PropertyInfo* GetProperty6(String* name, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        Reflection::PropertyInfo* GetProperty7(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        virtual Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) = 0;
        Reflection::PropertyInfo* GetPropertyImplInternal(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        virtual Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) = 0;
        virtual Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() = 0;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() = 0;
        virtual bool IsArrayImpl_cf15f782d0773ffd() = 0;
        virtual bool IsByRefImpl_a1c403acfb80fd15() = 0;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() = 0;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() = 0;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() = 0;
        static bool IsArrayImpl2(Type* type);
        virtual bool IsValueTypeImpl_fe1651255927f3c6();
        virtual bool IsContextfulImpl_dd45484bf0f79262();
        virtual bool IsMarshalByRefImpl_75471fe14264cd54();
        Reflection::ConstructorInfo* GetConstructor2(cli::array<Type*>* types);
        Reflection::ConstructorInfo* GetConstructor3(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        Reflection::ConstructorInfo* GetConstructor4(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        cli::array<Reflection::ConstructorInfo*>* GetConstructors();
        virtual cli::array<Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(Reflection::BindingFlags bindingAttr) = 0;
        virtual cli::array<Reflection::MemberInfo*>* GetDefaultMembers_d0a4a4222b9683ff();
        virtual cli::array<Reflection::MemberInfo*>* FindMembers_cae113425644ab26(Reflection::MemberTypes memberType, Reflection::BindingFlags bindingAttr, Reflection::MemberFilter* filter, Object* filterCriteria);
        Object* InvokeMember(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args);
        Object* InvokeMember2(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, Globalization::CultureInfo* culture);
        virtual Object* InvokeMember_70c4601d847070a2(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, cli::array<Reflection::ParameterModifier>* modifiers, Globalization::CultureInfo* culture, cli::array<String*>* namedParameters) = 0;
        virtual String* ToString_1636a0751cb9ac11() override;
        virtual Type* InternalResolve_ba2e81f73f0d7994();
        virtual cli::array<Type*>* GetGenericArguments_a7fb476275cfe9a3();
        Type* GetGenericTypeDefinition_impl();
        virtual Type* GetGenericTypeDefinition_15f8fc7813e8e8bf();
        static Type* MakeGenericType(Type* gt, cli::array<Type*>* types);
        static Reflection::Emit::AssemblyBuilder* PeelAssemblyBuilder(Type* type);
        virtual Type* MakeGenericType_da11ef776ac96678(cli::array<Type*>* typeArguments);
        int32_t GetGenericParameterPosition();
        Reflection::GenericParameterAttributes GetGenericParameterAttributes();
        cli::array<Type*>* GetGenericParameterConstraints_impl();
        virtual cli::array<Type*>* GetGenericParameterConstraints_d29c24f34391020e();
        Type* make_array_type(int32_t rank);
        virtual Type* MakeArrayType_9ec2b26036f00b30();
        virtual Type* MakeArrayType_b5bc09824bbbb104(int32_t rank);
        Type* make_byref_type();
        virtual Type* MakeByRefType_fc54947a1bb074be();
        static Type* MakePointerType(Type* type);
        virtual Type* MakePointerType_f23f3b9330ac63da();
        static Type* ReflectionOnlyGetType(String* typeName, bool throwIfNotFound, bool ignoreCase);
        void GetPacking(int32_t packing, int32_t size);
        Runtime::InteropServices::StructLayoutAttribute* GetStructLayoutAttribute();
        cli::array<Object*>* GetPseudoCustomAttributes();
        virtual bool IsEquivalentTo_493c500dff75ad86(Type* other);
        void GetIDsOfNames2(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke2(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static bool op_Equality2(Type* left, Type* right);
        static bool op_Inequality2(Type* left, Type* right);
        virtual Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() = 0;
        virtual String* get_AssemblyQualifiedName_cea373c2171bd483() = 0;
        Reflection::TypeAttributes get_Attributes();
        virtual Type* get_BaseType_6a0646ae880055f6() = 0;
        virtual Type* get_DeclaringType_6121cd6a84393166() override;
        static Reflection::Binder* get_DefaultBinder();
        virtual String* get_FullName_7e8fa72ba225e1a4() = 0;
        virtual Guid get_GUID_bdb6b630c3237a21() = 0;
        bool get_HasElementType();
        bool get_IsAbstract();
        bool get_IsAnsiClass();
        bool get_IsArray();
        bool get_IsAutoClass();
        bool get_IsAutoLayout();
        bool get_IsByRef();
        bool get_IsClass();
        bool get_IsCOMObject();
        bool get_IsContextful();
        virtual bool get_IsEnum_bc85ea7b0a749db();
        bool get_IsExplicitLayout();
        bool get_IsImport();
        bool get_IsInterface();
        bool get_IsLayoutSequential();
        bool get_IsMarshalByRef();
        bool get_IsNestedAssembly();
        bool get_IsNestedFamANDAssem();
        bool get_IsNestedFamily();
        bool get_IsNestedFamORAssem();
        bool get_IsNestedPrivate();
        bool get_IsNestedPublic();
        bool get_IsNotPublic();
        bool get_IsPointer();
        bool get_IsPrimitive();
        bool get_IsPublic();
        bool get_IsSealed();
        virtual bool get_IsSerializable_54e7f398ebfc9468();
        bool get_IsSpecialName();
        bool get_IsUnicodeClass();
        bool get_IsValueType();
        virtual Reflection::MemberTypes get_MemberType_cd521d320810c98f() override;
        virtual Reflection::Module* get_Module_ea7d65dc88202263() override = 0;
        virtual String* get_Namespace_cb4ed37007083e7f() = 0;
        virtual Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual RuntimeTypeHandle get_TypeHandle_a14995fa9102936b();
        Reflection::ConstructorInfo* get_TypeInitializer();
        virtual Type* get_UnderlyingSystemType_9ccb7bb8385521f6() = 0;
        virtual bool get_IsSecurityTransparent_6da55418ab72fb10();
        virtual bool get_IsSecurityCritical_50a9063c5d34fcdb();
        virtual bool get_IsSecuritySafeCritical_bcc034bfd05c04c9();
        bool get_IsSystemType();
        virtual bool get_ContainsGenericParameters_19598881dd690ad3();
        virtual bool get_IsGenericTypeDefinition_8008dd501dc43926();
        virtual bool get_IsGenericType_4db8ddd5b97f3c14();
        virtual bool get_IsGenericParameter_2a17c4bf67798b07();
        bool get_IsNested();
        bool get_IsVisible();
        virtual int32_t get_GenericParameterPosition_ae331bf96a7667b1();
        virtual Reflection::GenericParameterAttributes get_GenericParameterAttributes_b31b8b8f1d79d815();
        virtual Reflection::MethodBase* get_DeclaringMethod_6dc070d2040335e5();
        virtual Runtime::InteropServices::StructLayoutAttribute* get_StructLayoutAttribute_c8846f98114193d0();
        bool get_IsUserType();
        
        virtual bool Equals_b601c5aff370bd09(Object* o) override;
        virtual bool Equals_fbde14dc9bfbbb61(Type* o) override;
        virtual Type* GetType_23d99c756b44b0a3() override;
        virtual bool IsSubclassOf_875608a6f6bc1b50(Type* c) override;
        virtual cli::array<Type*>* FindInterfaces_cc61f456dced52b8(Reflection::TypeFilter* filter, Object* filterCriteria) override;
        virtual Type* GetInterface_ac6ba302ad01659f(String* name) override;
        virtual Type* GetInterface_7be137fec4604233(String* name, bool ignoreCase) override;
        virtual Reflection::InterfaceMapping GetInterfaceMap_1dcbd2012c18f488(Type* interfaceType) override;
        virtual cli::array<Type*>* GetInterfaces_f4761baf7daf0c63() override;
        virtual bool IsAssignableFrom_9a1536c9f0047a78(Type* c) override;
        virtual bool IsInstanceOfType_8a17c36f331ce12e(Object* o) override;
        virtual int32_t GetArrayRank_bde6428644f11785() override;
        virtual Type* GetElementType_7c511ae38a3cf1dd() override;
        virtual Reflection::EventInfo* GetEvent_76dff11bf999273b(String* name) override;
        virtual Reflection::EventInfo* GetEvent_f4929934b063c380(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::EventInfo*>* GetEvents_1787f024dc60b66d() override;
        virtual cli::array<Reflection::EventInfo*>* GetEvents_3631c7eff1e31bf4(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::FieldInfo* GetField_730851a2c91db280(String* name) override;
        virtual Reflection::FieldInfo* GetField_a38d5b9730c691a2(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::FieldInfo* GetField_32b52cad7c24495e(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::FieldInfo*>* GetFields_824511730a8c3391() override;
        virtual cli::array<Reflection::FieldInfo*>* GetFields_102264d5de9b86f1(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::FieldInfo*>* GetFields_3b6671910689216f(Reflection::BindingFlags bindingAttr) override;
        virtual int32_t GetHashCode_4319178217300f32() override;
        virtual cli::array<Reflection::MemberInfo*>* GetMember_e42ea39164747c31(String* name) override;
        virtual cli::array<Reflection::MemberInfo*>* GetMember_751a2f44650ce57a(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MemberInfo*>* GetMember_26f247b06fc8dab4(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MemberInfo*>* GetMember_aba72a46394724d6(String* name, Reflection::MemberTypes type, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MemberInfo*>* GetMembers_ceb13fc59a9ba706() override;
        virtual cli::array<Reflection::MemberInfo*>* GetMembers_2f15454515090881(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MemberInfo*>* GetMembers_e9c5edc4e36bff42(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::MethodInfo* GetMethod_ef3f1bc04f29b7c7(String* name) override;
        virtual Reflection::MethodInfo* GetMethod_4cb6db7e284e0ff0(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::MethodInfo* GetMethod_20d1acffc16ce2dd(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::MethodInfo* GetMethod_5f5fb2fe366cd5a1(String* name, cli::array<Type*>* types) override;
        virtual Reflection::MethodInfo* GetMethod_10845bf939e924bf(String* name, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::MethodInfo* GetMethod_2a24f5133b340750(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::MethodInfo* GetMethod_4d293e0e4590fe7d(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::MethodInfo* GetMethod_5f9f14eaeb118d7b(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<Reflection::MethodInfo*>* GetMethods_58a478b465f48979() override;
        virtual cli::array<Reflection::MethodInfo*>* GetMethods_f9b63250be2babdf(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MethodInfo*>* GetMethods_96cc2e24fcfb6e62(Reflection::BindingFlags bindingAttr) override;
        virtual Type* GetNestedType_f4393ee24e74e70b(String* name) override;
        virtual Type* GetNestedType_e1baae72ba6bf4ba(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Type*>* GetNestedTypes_d3461c94611a386d() override;
        virtual cli::array<Type*>* GetNestedTypes_28d6d3c45672aa03(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::PropertyInfo*>* GetProperties_524e20c86b55e01b() override;
        virtual cli::array<Reflection::PropertyInfo*>* GetProperties_fdc96296e396cb0a(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::PropertyInfo*>* GetProperties_258aba425d2e86c3(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::PropertyInfo* GetProperty_d627a5a0d51dd70b(String* name) override;
        virtual Reflection::PropertyInfo* GetProperty_31c8ed7c4a9fe18(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::PropertyInfo* GetProperty_b31c91fe8fcd19f(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::PropertyInfo* GetProperty_62acdac6dfff671d(String* name, Type* returnType) override;
        virtual Reflection::PropertyInfo* GetProperty_3a45ef4884be27fe(String* name, cli::array<Type*>* types) override;
        virtual Reflection::PropertyInfo* GetProperty_5051f9f79bcf85eb(String* name, Type* returnType, cli::array<Type*>* types) override;
        virtual Reflection::PropertyInfo* GetProperty_f0ce52c3a74ba259(String* name, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::PropertyInfo* GetProperty_30e763aad46f8c31(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::PropertyInfo* GetProperty_af47392d20071603(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::ConstructorInfo* GetConstructor_7676b5cd22df9bc5(cli::array<Type*>* types) override;
        virtual Reflection::ConstructorInfo* GetConstructor_615af0546552ac12(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual Reflection::ConstructorInfo* GetConstructor_ac50bab303a728a7(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<Reflection::ConstructorInfo*>* GetConstructors_20b9769ece0e442b() override;
        virtual cli::array<Reflection::ConstructorInfo*>* GetConstructors_f24cc6cf9c6f79c6(Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Reflection::MemberInfo*>* GetDefaultMembers_727bd9381d293316() override;
        virtual cli::array<Reflection::MemberInfo*>* FindMembers_4910effe19de98a7(Reflection::MemberTypes memberType, Reflection::BindingFlags bindingAttr, Reflection::MemberFilter* filter, Object* filterCriteria) override;
        virtual Object* InvokeMember_d2a724320e8ef589(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args) override;
        virtual Object* InvokeMember_c3a4caa7e37f34b1(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, Globalization::CultureInfo* culture) override;
        virtual Object* InvokeMember_9f3df0d7b60ab9f0(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, cli::array<Reflection::ParameterModifier>* modifiers, Globalization::CultureInfo* culture, cli::array<String*>* namedParameters) override;
        virtual Object* InvokeMember_8ebb9e0e6d78ba5a(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, cli::array<Reflection::ParameterModifier>* modifiers, Globalization::CultureInfo* culture, cli::array<String*>* namedParameters) override;
        virtual String* ToString_7ae6b85e974ee75a() override;
        virtual void GetIDsOfNames_1da4b71924d852c0(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_b4a9bd9efa232f89(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_6b9f06a4fb498bd3(uint32_t pcTInfo) override;
        virtual void Invoke_67109d5273366daf(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual Reflection::Assembly* get_Assembly_de424b6590183868() override;
        virtual String* get_AssemblyQualifiedName_63c3dd8ef06f5e45() override;
        virtual Reflection::TypeAttributes get_Attributes_bed7bd9dd753da57() override;
        virtual Type* get_BaseType_b398eaad0c8c79e2() override;
        virtual Type* get_DeclaringType_57e85ec7caa4a7e9() override;
        virtual String* get_FullName_773444c2f90eecd() override;
        virtual Guid get_GUID_4d00162e8efb54a7() override;
        virtual bool get_HasElementType_754bebcc1b786422() override;
        virtual bool get_IsAbstract_5dcfab57b6ff095() override;
        virtual bool get_IsAnsiClass_d7f01d12eb51d710() override;
        virtual bool get_IsArray_9a85c8065d1ab324() override;
        virtual bool get_IsAutoClass_14b7883b9d76be37() override;
        virtual bool get_IsAutoLayout_cd96e8a6fef98d97() override;
        virtual bool get_IsByRef_2f4ef2ab1e7d3788() override;
        virtual bool get_IsClass_bc4f9c45e087f317() override;
        virtual bool get_IsCOMObject_22277b5ad648345f() override;
        virtual bool get_IsContextful_1a446b1f672d7424() override;
        virtual bool get_IsEnum_59290f0923c47901() override;
        virtual bool get_IsExplicitLayout_a0f1b1afb779c5f() override;
        virtual bool get_IsImport_79d05e25159073af() override;
        virtual bool get_IsInterface_d9be9b69e04cf7d2() override;
        virtual bool get_IsLayoutSequential_6068218a76af8d15() override;
        virtual bool get_IsMarshalByRef_ebd9c7fa09db17d2() override;
        virtual bool get_IsNestedAssembly_38350089c99e6eb4() override;
        virtual bool get_IsNestedFamANDAssem_fbb3d63f801f0e26() override;
        virtual bool get_IsNestedFamily_94e83bc2facfce0a() override;
        virtual bool get_IsNestedFamORAssem_ee3008d87f75f225() override;
        virtual bool get_IsNestedPrivate_8ecb6c70205b5ba8() override;
        virtual bool get_IsNestedPublic_1fc26cd17482207b() override;
        virtual bool get_IsNotPublic_311ea9f86ac6330a() override;
        virtual bool get_IsPointer_5a4f6004b270a9d() override;
        virtual bool get_IsPrimitive_842be52a04be213c() override;
        virtual bool get_IsPublic_dd1336b6f1c99e24() override;
        virtual bool get_IsSealed_4ffa7a05948334aa() override;
        virtual bool get_IsSerializable_ee155a21678a6b08() override;
        virtual bool get_IsSpecialName_9f0da6e67f068528() override;
        virtual bool get_IsUnicodeClass_d35ccc782a67e4f4() override;
        virtual bool get_IsValueType_ab705a389c7af1d8() override;
        virtual Reflection::MemberTypes get_MemberType_49298b8bb0d10a74() override;
        virtual Reflection::Module* get_Module_e878d08348938612() override;
        virtual String* get_Namespace_4a78ab8fbbf66619() override;
        virtual Type* get_ReflectedType_338a78c0f78949() override;
        virtual RuntimeTypeHandle get_TypeHandle_a660506a2c0cc3d5() override;
        virtual Reflection::ConstructorInfo* get_TypeInitializer_1a4653d737922696() override;
        virtual Type* get_UnderlyingSystemType_489064e38cffeff() override;
        virtual Type* get_UnderlyingSystemType_c5f7e8bc4888131f() override;
        virtual cli::array<Object*>* GetCustomAttributes_15e7120d7361e983(bool inherit) override;
        virtual cli::array<Object*>* GetCustomAttributes_32081d39648cff5f(Type* attributeType, bool inherit) override;
        virtual bool IsDefined_16c540b5a4e1ff66(Type* attributeType, bool inherit) override;
        virtual String* get_Name_e4f201ea08eb3ef2() override;
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API ArrayListWrapper : public virtual ArrayList{
        ArrayList* m_InnerArrayList;
        
        void constructor(ArrayList* innerArrayList);
        virtual int32_t Add_e6a92085999ce388(System::Object* value) override;
        virtual void Clear_cd6654e5a40f5056() override;
        virtual bool Contains_f1c198d01147f1ee(System::Object* value) override;
        virtual int32_t IndexOf_7e9811d6771f771d(System::Object* value) override;
        virtual int32_t IndexOf_1c0527e45dc3728e(System::Object* value, int32_t startIndex) override;
        virtual int32_t IndexOf_adae3dc40eaa594e(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual int32_t LastIndexOf_ecfd0185f74248a7(System::Object* value) override;
        virtual int32_t LastIndexOf_ed2c73a4e33a0826(System::Object* value, int32_t startIndex) override;
        virtual int32_t LastIndexOf_c6f99b5b290904b1(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value) override;
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c) override;
        virtual void Remove_2225381aaf812c6d(System::Object* value) override;
        virtual void RemoveAt_2abea768d3273318(int32_t index) override;
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count) override;
        virtual void Reverse_e7caef4018f63b41() override;
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count) override;
        virtual void SetRange_87e491be8261c464(int32_t index, ICollection* c) override;
        virtual void CopyTo_c634d425a65b1fc3(System::Array* array) override;
        virtual void CopyTo_2bc540dad3c25b9e(System::Array* array, int32_t index) override;
        virtual void CopyTo_4b0d97bda775c102(int32_t index, System::Array* array, int32_t arrayIndex, int32_t count) override;
        virtual IEnumerator* GetEnumerator_84e3ba8f2fdefd62() override;
        virtual IEnumerator* GetEnumerator_78a3fe75766282cd(int32_t index, int32_t count) override;
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c) override;
        virtual int32_t BinarySearch_77606568b997fd61(System::Object* value) override;
        virtual int32_t BinarySearch_f0deec366fa04a93(System::Object* value, IComparer* comparer) override;
        virtual int32_t BinarySearch_5160cee074873e3f(int32_t index, int32_t count, System::Object* value, IComparer* comparer) override;
        virtual System::Object* Clone_5d610374e21ea7b0() override;
        virtual ArrayList* GetRange_21d02af9397d43dc(int32_t index, int32_t count) override;
        virtual void TrimToSize_d8592d0aafda93d() override;
        virtual void Sort_9fb0fdfea73c2096() override;
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer) override;
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer) override;
        virtual cli::array<System::Object*>* ToArray_360bcd462eb48114() override;
        virtual System::Array* ToArray_7b80f35a5dbfbc47(System::Type* elementType) override;
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index) override;
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_2354963792616712() override;
        virtual int32_t get_Capacity_2220db8052d52582() override;
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value) override;
        virtual bool get_IsFixedSize_97a42a087785251() override;
        virtual bool get_IsReadOnly_671df7b1908db8ee() override;
        virtual bool get_IsSynchronized_ffa26be0a148c3c0() override;
        virtual System::Object* get_SyncRoot_edb1ba826807b569() override;
        
    };
    
    
    struct MANAGED_API ListWrapper : public virtual System::Object, public virtual IList, public virtual ICollection, public virtual IEnumerable{
        IList* m_InnerList;
        
        void constructor(IList* innerList);
        virtual int32_t Add_bcf09ba25e62648f(System::Object* value);
        virtual void Clear_77f454011f626479();
        virtual bool Contains_f9107b57b0828239(System::Object* value);
        virtual int32_t IndexOf_e6724c0395a3dad0(System::Object* value);
        virtual void Insert_290942a010dce429(int32_t index, System::Object* value);
        virtual void Remove_f0670db65479e773(System::Object* value);
        virtual void RemoveAt_a5bebe22efe6f1a7(int32_t index);
        virtual void CopyTo_91752f56f47af7f3(System::Array* array, int32_t index);
        virtual IEnumerator* GetEnumerator_6e025ed1cc117836();
        virtual System::Object* get_Item_896a441a7363c710(int32_t index);
        virtual System::Object* set_Item_a9ec2ce7dfe8dea5(int32_t index, System::Object* value);
        virtual int32_t get_Count_614a2abb891f748b();
        virtual bool get_IsSynchronized_23e3b7993e71d737();
        virtual System::Object* get_SyncRoot_a3def0e51eeaf8d9();
        virtual bool get_IsFixedSize_3444cf8f8ef3efa4();
        virtual bool get_IsReadOnly_fe00057b4a1798ff();
        
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
    };
    
}}
namespace System { namespace Globalization {
    
    struct MANAGED_API Calendar : public virtual System::Object, public virtual System::ICloneable{
        static constexpr int32_t CurrentEra = 0;
        bool m_isReadOnly;
        int32_t twoDigitYearMax;
        int32_t M_MaxYearValue;
        cli::array<System::String*>* M_AbbrEraNames;
        cli::array<System::String*>* M_EraNames;
        int32_t m_currentEraValue;
        
        void constructor();
        System::String* M_ValidValues(System::Object* a, System::Object* b);
        void M_ArgumentInRange(System::String* param, int32_t arg, int32_t a, int32_t b);
        void M_CheckHMSM(int32_t hour, int32_t minute, int32_t second, int32_t milliseconds);
        virtual System::Object* Clone_15536a878f1b8fa9();
        virtual int32_t GetLeapMonth_702af567932b9b18(int32_t year);
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era);
        static Calendar* ReadOnly(Calendar* calendar);
        void CheckReadOnly();
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era);
        virtual System::DateTime AddDays_a5cc6f493e3eba66(System::DateTime time, int32_t days);
        virtual System::DateTime AddHours_7f68cf2ff908d7f0(System::DateTime time, int32_t hours);
        virtual System::DateTime AddMilliseconds_ffe5aa206bba766d(System::DateTime time, double milliseconds);
        virtual System::DateTime AddMinutes_983d6711183cba1(System::DateTime time, int32_t minutes);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) = 0;
        virtual System::DateTime AddSeconds_f797ca31880c3704(System::DateTime time, int32_t seconds);
        virtual System::DateTime AddWeeks_6f66c2c4109c30c4(System::DateTime time, int32_t weeks);
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) = 0;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) = 0;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) = 0;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) = 0;
        virtual int32_t GetDaysInMonth_432b8c940d2032fb(int32_t year, int32_t month);
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) = 0;
        virtual int32_t GetDaysInYear_ae45f36c8a3dcc91(int32_t year);
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) = 0;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) = 0;
        virtual int32_t GetHour_9084e1b608d42a3a(System::DateTime time);
        virtual double GetMilliseconds_6b6709567ed09a5(System::DateTime time);
        virtual int32_t GetMinute_42f1da20fb6e9d3f(System::DateTime time);
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) = 0;
        virtual int32_t GetMonthsInYear_ccc452060ce28ee9(int32_t year);
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) = 0;
        virtual int32_t GetSecond_8bfa984d0b9c4f(System::DateTime time);
        int32_t M_DiffDays(System::DateTime timeA, System::DateTime timeB);
        System::DateTime M_GetFirstDayOfSecondWeekOfYear(int32_t year, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek);
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek);
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) = 0;
        virtual bool IsLeapDay_2231fa71c75fa310(int32_t year, int32_t month, int32_t day);
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) = 0;
        virtual bool IsLeapMonth_8cd2a3d21440e57e(int32_t year, int32_t month);
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) = 0;
        virtual bool IsLeapYear_59be46b16a9b7a45(int32_t year);
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) = 0;
        virtual System::DateTime ToDateTime_1fb5be79b550c0bc(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond);
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) = 0;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year);
        virtual int32_t get_M_DaysInWeek_2053f6f90ba9f109();
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() = 0;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde();
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821();
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e();
        bool get_IsReadOnly();
        virtual int32_t get_M_MaxYear_b3d9776fced847fe();
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801();
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value);
        cli::array<System::String*>* get_AbbreviatedEraNames();
        cli::array<System::String*>* set_AbbreviatedEraNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_EraNames();
        cli::array<System::String*>* set_EraNames(cli::array<System::String*>* value);
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
}}
namespace System { namespace IO {
    
    struct MANAGED_API TextReader : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        static TextReader* Null;
        
        TextReader();
        void constructor();
        static void static_constructor();
        virtual void Close_7c5ccd5fb8dfeba3();
        void Dispose();
        virtual void Dispose_6de32a3267835eb1(bool disposing);
        virtual int32_t Peek_82f04bf3cd196dfd();
        virtual int32_t Read_1d437d5ac2290f2b();
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        virtual int32_t ReadBlock_f3ca37abea795c97(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        virtual System::String* ReadLine_51552a49261f929e();
        virtual System::String* ReadToEnd_f683943dd5002e1e();
        static TextReader* Synchronized(TextReader* reader);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API TextWriter : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        cli::array<char16_t>* CoreNewLine;
        System::IFormatProvider* internalFormatProvider;
        static TextWriter* Null;
        
        TextWriter();
        void constructor();
        void constructor(System::IFormatProvider* formatProvider);
        static void static_constructor();
        virtual void Close_745be624b802d9f6();
        virtual void Dispose_6868d8c2d2b3dfb7(bool disposing);
        void Dispose2();
        virtual void Flush_c8220c56815bfd56();
        static TextWriter* Synchronized(TextWriter* writer);
        static TextWriter* Synchronized2(TextWriter* writer, bool neverClose);
        virtual void Write_443a7a25c054668(bool value);
        virtual void Write_96ccae6b0b267024(char16_t value);
        virtual void Write_6d89396c0c5b77c4(cli::array<char16_t>* buffer);
        virtual void Write_222d042b1869986(System::Decimal value);
        virtual void Write_31466a0eb6072a4a(double value);
        virtual void Write_12c6f74b27421524(int32_t value);
        virtual void Write_bda7727b5cfc5345(int64_t value);
        virtual void Write_55565de44c1e3104(System::Object* value);
        virtual void Write_3945ee193bccdd42(float value);
        virtual void Write_dcf5e45abd9e11c4(System::String* value);
        virtual void Write_8d2ce38f16ef9fe3(uint32_t value);
        virtual void Write_bed5c65a22d487e6(uint64_t value);
        virtual void Write_f2bf6875dbaeba6a(System::String* format, System::Object* arg0);
        virtual void Write_e2bf1f4b5968ab9(System::String* format, cli::array<System::Object*>* arg);
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        virtual void Write_d1ec280d8f085d73(System::String* format, System::Object* arg0, System::Object* arg1);
        virtual void Write_4d2ac9c7b9e5e3b6(System::String* format, System::Object* arg0, System::Object* arg1, System::Object* arg2);
        virtual void WriteLine_f0ca76dc02634177();
        virtual void WriteLine_711f0f7d57a6b9ec(bool value);
        virtual void WriteLine_5db503756aad6b7e(char16_t value);
        virtual void WriteLine_4e1d057f0df9eb1f(cli::array<char16_t>* buffer);
        virtual void WriteLine_7215ae0192c985c9(System::Decimal value);
        virtual void WriteLine_e88c356ba9c2db75(double value);
        virtual void WriteLine_4f98173db23c2ff8(int32_t value);
        virtual void WriteLine_79f607f527127dc5(int64_t value);
        virtual void WriteLine_dfd9dff343620f4d(System::Object* value);
        virtual void WriteLine_1fcb4a3f9e16c04c(float value);
        virtual void WriteLine_27fb29d2c5b390c7(System::String* value);
        virtual void WriteLine_cf4ece46b08b7fc4(uint32_t value);
        virtual void WriteLine_ee19bfc9492f25dd(uint64_t value);
        virtual void WriteLine_5eb6d2f1667d4085(System::String* format, System::Object* arg0);
        virtual void WriteLine_b743f1a08f47f965(System::String* format, cli::array<System::Object*>* arg);
        virtual void WriteLine_9dea657622eb9bf4(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        virtual void WriteLine_b33fb6632b99859a(System::String* format, System::Object* arg0, System::Object* arg1);
        virtual void WriteLine_10ed8cd26a3939e1(System::String* format, System::Object* arg0, System::Object* arg1, System::Object* arg2);
        virtual System::Text::Encoding* get_Encoding_55955d94411af675() = 0;
        virtual System::IFormatProvider* get_FormatProvider_5878562ed72ff523();
        virtual System::String* get_NewLine_22799fa26f7999ac();
        virtual System::String* set_NewLine_7d29519e1b46fe0b(System::String* value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API Stream : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        static Stream* Null;
        System::Func3<cli::array<unsigned char>*, int32_t, int32_t, int32_t>* async_read;
        System::Action3<cli::array<unsigned char>*, int32_t, int32_t>* async_write;
        System::Threading::AutoResetEvent* async_event;
        
        Stream();
        void constructor();
        static void static_constructor();
        void Dispose();
        virtual void Dispose_b215be19126499b0(bool disposing);
        virtual void Close_59c62ed53ef2a481();
        static Stream* Synchronized(Stream* stream);
        virtual System::Threading::WaitHandle* CreateWaitHandle_becb19c241245f1e();
        virtual void Flush_132821400030c993() = 0;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) = 0;
        virtual int32_t ReadByte_61a294e42318f99();
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin origin) = 0;
        virtual void SetLength_18d421048f3d4df5(int64_t value) = 0;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) = 0;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value);
        virtual System::IAsyncResult* BeginRead_783f127b729b2f0a(cli::array<unsigned char>* buffer, int32_t offset, int32_t count, System::AsyncCallback* callback, System::Object* state);
        virtual System::IAsyncResult* BeginWrite_85b245acef3a8d4a(cli::array<unsigned char>* buffer, int32_t offset, int32_t count, System::AsyncCallback* callback, System::Object* state);
        virtual int32_t EndRead_fffd36c36fbcca5b(System::IAsyncResult* asyncResult);
        virtual void EndWrite_4a9b8c2a22f9c4e3(System::IAsyncResult* asyncResult);
        void CopyTo(Stream* destination);
        void CopyTo2(Stream* destination, int32_t bufferSize);
        virtual void ObjectInvariant_58e7c07b1f0b3353();
        virtual bool get_CanRead_50a10d564be8aaa2() = 0;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() = 0;
        virtual bool get_CanWrite_c8955eadfc77124c() = 0;
        virtual bool get_CanTimeout_b7da06c4b3fd4fd6();
        virtual int64_t get_Length_ddb8b0d061db5350() = 0;
        virtual int64_t get_Position_5e75d5c458401f13() = 0;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) = 0;
        virtual int32_t get_ReadTimeout_a54423ea8c960199();
        virtual int32_t set_ReadTimeout_eab8786697629725(int32_t value);
        virtual int32_t get_WriteTimeout_6db3b36efa1fd0f();
        virtual int32_t set_WriteTimeout_a9da1b34d1999ee9(int32_t value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
}}
namespace System { namespace Reflection {
    
    struct MANAGED_API MethodInfo : public virtual MethodBase, public virtual System::Runtime::InteropServices::_MethodInfo{
        
        void constructor();
        virtual MethodInfo* GetBaseDefinition_b00937f21f1a7556() = 0;
        virtual MethodInfo* GetBaseMethod_15ff4b8595f9b09();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual MethodInfo* GetGenericMethodDefinition_298ff0fcf1d6e37f();
        virtual MethodInfo* MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* typeArguments);
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(MethodInfo* left, MethodInfo* right);
        static bool op_Inequality(MethodInfo* left, MethodInfo* right);
        virtual MemberTypes get_MemberType_cd521d320810c98f() override;
        virtual System::Type* get_ReturnType_832339e848f448fe();
        virtual ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() = 0;
        virtual ParameterInfo* get_ReturnParameter_d8c8b72c8a40767c();
        
        virtual MethodInfo* GetBaseDefinition_af2e03a6fca2b5f5() override;
        virtual void GetIDsOfNames_fb630358bd563602(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_715dd0bbf360bfdc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_672b699f844b0f79(uint32_t pcTInfo) override;
        virtual void Invoke_61193eeaa05ba815(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual bool Equals_2e806c000b792995(System::Object* obj) override;
        virtual int32_t GetHashCode_2ee4600b266274f0() override;
        virtual MemberTypes get_MemberType_21580ff491280cb() override;
        virtual System::Type* get_ReturnType_4452cb3548281551() override;
        virtual ICustomAttributeProvider* get_ReturnTypeCustomAttributes_3d661eb3a8c541b9() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c810ec1500ff935b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_74e25ee727105f87(System::Type* attributeType, bool inherit) override;
        virtual MethodImplAttributes GetMethodImplementationFlags_808f7fd1c940f559() override;
        virtual cli::array<ParameterInfo*>* GetParameters_8eb86cd704bfbf54() override;
        virtual System::Type* GetType_74742789cd106f3b() override;
        virtual System::Object* Invoke_a63db6373340494c(System::Object* obj, cli::array<System::Object*>* parameters) override;
        virtual System::Object* Invoke_80c9283e0c4ab089(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_d50f51251cd2eb14(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_344d714047f59070() override;
        virtual MethodAttributes get_Attributes_2f77059d8bc07693() override;
        virtual CallingConventions get_CallingConvention_1d365159f80ff2b() override;
        virtual System::Type* get_DeclaringType_7629c4fffe34fb94() override;
        virtual bool get_IsAbstract_e474de6aca69fbd1() override;
        virtual bool get_IsAssembly_f6f652b6dc8ceb3e() override;
        virtual bool get_IsConstructor_41436fb10360f9a7() override;
        virtual bool get_IsFamily_2ffd1b4f99fa1412() override;
        virtual bool get_IsFamilyAndAssembly_7a5b9089ab64f38b() override;
        virtual bool get_IsFamilyOrAssembly_b20b6def57f63d17() override;
        virtual bool get_IsFinal_3d88f163015f613d() override;
        virtual bool get_IsHideBySig_da9279be9a634726() override;
        virtual bool get_IsPrivate_8b2fd624f51dbfcc() override;
        virtual bool get_IsPublic_7e6e93fbf4211998() override;
        virtual bool get_IsSpecialName_12d4e8400a966832() override;
        virtual bool get_IsStatic_c628a54558fdd884() override;
        virtual bool get_IsVirtual_4155281c459f2c6b() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_bdcb739875527a32() override;
        virtual System::String* get_Name_ff50b1dd5dfb28f9() override;
        virtual System::Type* get_ReflectedType_93898c8dc71eef39() override;
    };
    
    
    struct MANAGED_API ConstructorInfo : public virtual MethodBase, public virtual System::Runtime::InteropServices::_ConstructorInfo{
        static System::String* ConstructorName;
        static System::String* TypeConstructorName;
        
        ConstructorInfo();
        void constructor();
        static void static_constructor();
        System::Object* Invoke(cli::array<System::Object*>* parameters);
        virtual System::Object* Invoke_d9ede2dfc2f2dd62(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) = 0;
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke6(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        System::Object* Invoke_2(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture);
        System::Object* Invoke_3(System::Object* obj, cli::array<System::Object*>* parameters);
        System::Object* Invoke_4(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture);
        System::Object* Invoke_5(cli::array<System::Object*>* parameters);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Equality(ConstructorInfo* left, ConstructorInfo* right);
        static bool op_Inequality(ConstructorInfo* left, ConstructorInfo* right);
        virtual MemberTypes get_MemberType_cd521d320810c98f() override;
        
        virtual void GetIDsOfNames_c6568bbd8217c026(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_6480748fd8ab715e(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_687ea54167dc994f(uint32_t pcTInfo) override;
        virtual void Invoke_e82f3d71479774ad(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Object* Invoke_2_14438888c13b8089(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Object* Invoke_3_e668ab16fb388f95(System::Object* obj, cli::array<System::Object*>* parameters) override;
        virtual System::Object* Invoke_4_5502ea7285269681(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Object* Invoke_5_e3382599d6c7cceb(cli::array<System::Object*>* parameters) override;
        virtual bool Equals_67213e4a572bc930(System::Object* obj) override;
        virtual int32_t GetHashCode_528f3df200ed9cf9() override;
        virtual MemberTypes get_MemberType_70d1fdc4531f4ea4() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_909f5c802320f2c6(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_ddf21a2a0e530872(System::Type* attributeType, bool inherit) override;
        virtual MethodImplAttributes GetMethodImplementationFlags_f9d0009b54342b06() override;
        virtual cli::array<ParameterInfo*>* GetParameters_315d4cfcd47e1490() override;
        virtual System::Type* GetType_2f67a2a342d63d5f() override;
        virtual bool IsDefined_d9b1dc794b1ab365(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_a95e215a60192892() override;
        virtual MethodAttributes get_Attributes_add5cbc0ca209cb4() override;
        virtual CallingConventions get_CallingConvention_a50132e872765544() override;
        virtual System::Type* get_DeclaringType_8b35019cb974f3b1() override;
        virtual bool get_IsAbstract_9d2bdd8154847129() override;
        virtual bool get_IsAssembly_395fd16440c057f5() override;
        virtual bool get_IsConstructor_1807a2d9ec103a6d() override;
        virtual bool get_IsFamily_7e3a06dd49ba1d52() override;
        virtual bool get_IsFamilyAndAssembly_89cd687b074d26c4() override;
        virtual bool get_IsFamilyOrAssembly_90f959a01432cea6() override;
        virtual bool get_IsFinal_8c6c57491692dd9a() override;
        virtual bool get_IsHideBySig_be7fcdcfe8827c6e() override;
        virtual bool get_IsPrivate_8eacdf2fa9e4b9c5() override;
        virtual bool get_IsPublic_32e3a6d67086bb9d() override;
        virtual bool get_IsSpecialName_e3c4ca4e8c7625() override;
        virtual bool get_IsStatic_129345b6fd10cac8() override;
        virtual bool get_IsVirtual_dd87e32e57ef90b8() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_b017ef7fbcec2e84() override;
        virtual System::String* get_Name_22e38b3f8832b162() override;
        virtual System::Type* get_ReflectedType_126e247c32a10788() override;
    };
    
}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API SafeHandle : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject, public virtual System::IDisposable{
        void* handle;
        void* invalid_handle_value;
        int32_t refcount;
        bool owns_handle;
        
        void constructor(void* invalidHandleValue, bool ownsHandle);
        virtual void Finalize_d61e1393c0fc869c();
        void Close();
        void DangerousAddRef(bool success);
        void* DangerousGetHandle();
        void DangerousRelease();
        void Dispose();
        void SetHandleAsInvalid();
        virtual void Dispose_96278d8fa537dff(bool disposing);
        virtual bool ReleaseHandle_f52de76ab86d3480() = 0;
        void SetHandle(void* handle);
        bool get_IsClosed();
        virtual bool get_IsInvalid_64f170f124c20f6b() = 0;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    struct MANAGED_API Identity : public virtual System::Object{
        System::String* _objectUri;
        Messaging::IMessageSink* _channelSink;
        Messaging::IMessageSink* _envoySink;
        Contexts::DynamicPropertyCollection* _clientDynamicProperties;
        Contexts::DynamicPropertyCollection* _serverDynamicProperties;
        ObjRef* _objRef;
        bool _disposed;
        
        void constructor(System::String* objectUri);
        virtual ObjRef* CreateObjRef_366556653a47f288(System::Type* requestedType) = 0;
        void NotifyClientDynamicSinks(bool start, Messaging::IMessage* req_msg, bool client_site, bool async);
        void NotifyServerDynamicSinks(bool start, Messaging::IMessage* req_msg, bool client_site, bool async);
        bool get_IsFromThisAppDomain();
        Messaging::IMessageSink* get_ChannelSink();
        Messaging::IMessageSink* set_ChannelSink(Messaging::IMessageSink* value);
        Messaging::IMessageSink* get_EnvoySink();
        System::String* get_ObjectUri();
        System::String* set_ObjectUri(System::String* value);
        bool get_IsConnected();
        bool get_Disposed();
        bool set_Disposed(bool value);
        Contexts::DynamicPropertyCollection* get_ClientDynamicProperties();
        Contexts::DynamicPropertyCollection* get_ServerDynamicProperties();
        bool get_HasClientDynamicSinks();
        bool get_HasServerDynamicSinks();
        
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API MethodDictionary : public virtual System::Object, public virtual System::Collections::IDictionary, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        System::Collections::IDictionary* _internalProperties;
        IMethodMessage* _message;
        cli::array<System::String*>* _methodKeys;
        bool _ownProperties;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapA;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapB;
        
        void constructor(IMethodMessage* message);
        void constructor(cli::array<System::String*>* keys);
        virtual System::Collections::IDictionary* AllocInternalProperties_ac55c475ad3bbe92();
        System::Collections::IDictionary* GetInternalProperties();
        bool IsOverridenKey(System::String* key);
        virtual System::Object* GetMethodProperty_4070f877cd8723cd(System::String* key);
        virtual void SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value);
        void Add(System::Object* key, System::Object* value);
        void Clear();
        bool Contains(System::Object* key);
        void Remove(System::Object* key);
        void CopyTo(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator();
        System::Collections::IDictionaryEnumerator* GetEnumerator2();
        bool get_HasInternalProperties();
        System::Collections::IDictionary* get_InternalProperties();
        cli::array<System::String*>* get_MethodKeys();
        cli::array<System::String*>* set_MethodKeys(cli::array<System::String*>* value);
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        System::Object* get_Item(System::Object* key);
        System::Object* set_Item(System::Object* key, System::Object* value);
        System::Collections::ICollection* get_Keys();
        System::Collections::ICollection* get_Values();
        int32_t get_Count();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual System::Collections::ICollection* get_Keys_d809cadac60b140a() override;
        virtual System::Collections::ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    struct MANAGED_API TypeMetadata2 : public virtual System::Object{
        System::String* TypeAssemblyName;
        System::String* InstanceTypeName;
        
        void constructor();
        virtual void WriteAssemblies_7d8a46adaa61eb93(ObjectWriter* ow, System::IO::BinaryWriter* writer) = 0;
        virtual void WriteTypeData_db79b0ed1d8b4a01(ObjectWriter* ow, System::IO::BinaryWriter* writer, bool writeTypes) = 0;
        virtual void WriteObjectData_10db42bcb37f8b90(ObjectWriter* ow, System::IO::BinaryWriter* writer, System::Object* data) = 0;
        virtual bool IsCompatible_638da850e8ece74b(TypeMetadata2* other);
        void BindToName(System::String* assemblyName, System::String* typeName);
        virtual bool get_RequiresTypes_a63dc7473dcf7e12() = 0;
        
    };
    
}}}}}
namespace System { namespace Security {
    
    struct MANAGED_API CodeAccessPermission : public virtual System::Object, public virtual IPermission, public virtual ISecurityEncodable, public virtual IStackWalk{
        
        void constructor();
        void Assert();
        bool CheckAssert(CodeAccessPermission* asserted);
        bool CheckDemand(CodeAccessPermission* target);
        bool CheckDeny(CodeAccessPermission* denied);
        bool CheckPermitOnly(CodeAccessPermission* target);
        virtual IPermission* Copy_d1e925db301dc53f() = 0;
        void Demand();
        void Deny();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual void FromXml_ec3b425a66b43072(SecurityElement* elem) = 0;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual IPermission* Intersect_7dbf5aef702b16af(IPermission* target) = 0;
        virtual bool IsSubsetOf_76947f8575c4d81(IPermission* target) = 0;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual SecurityElement* ToXml_9ee4cd8af8e8f747() = 0;
        virtual IPermission* Union_b0ddcab6cb9c8441(IPermission* other);
        void PermitOnly();
        static void RevertAll();
        static void RevertAssert();
        static void RevertDeny();
        static void RevertPermitOnly();
        SecurityElement* Element2(int32_t version);
        static Permissions::PermissionState CheckPermissionState(Permissions::PermissionState state, bool allowUnrestricted);
        static int32_t CheckSecurityElement(SecurityElement* se, System::String* parameterName, int32_t minimumVersion, int32_t maximumVersion);
        static bool IsUnrestricted(SecurityElement* se);
        bool ProcessFrame(SecurityFrame frame);
        static void ThrowInvalidPermission(IPermission* target, System::Type* expected);
        static void ThrowExecutionEngineException(Permissions::SecurityAction stackmod);
        static void ThrowSecurityException(System::Object* demanded, System::String* message, SecurityFrame frame, Permissions::SecurityAction action, IPermission* failed);
        
        virtual void Assert_e1a4f90c372da24c() override;
        virtual IPermission* Copy_e6fdf74d8dfaca72() override;
        virtual void Demand_6a8bc305f8dfa903() override;
        virtual void Demand_55e1408892730c3e() override;
        virtual void Deny_db68b9e52373af22() override;
        virtual void FromXml_1053a148f0375461(SecurityElement* elem) override;
        virtual IPermission* Intersect_593562530728a967(IPermission* target) override;
        virtual bool IsSubsetOf_1923c54e11db177f(IPermission* target) override;
        virtual SecurityElement* ToXml_4868e697107d327() override;
        virtual IPermission* Union_ecfa27115d58cb44(IPermission* other) override;
        virtual void PermitOnly_a57179fb262ef034() override;
    };
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    struct MANAGED_API KnownAce : public virtual GenericAce{
        int32_t access_mask;
        System::Security::Principal::SecurityIdentifier* identifier;
        
        void constructor(AceType type, AceFlags flags);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        static System::String* GetSddlAccessRights(int32_t accessMask);
        static System::String* GetSddlAliasRights(int32_t accessMask);
        int32_t get_AccessMask();
        int32_t set_AccessMask(int32_t value);
        System::Security::Principal::SecurityIdentifier* get_SecurityIdentifier();
        System::Security::Principal::SecurityIdentifier* set_SecurityIdentifier(System::Security::Principal::SecurityIdentifier* value);
        
    };
    
    
    struct MANAGED_API AuthorizationRule : public virtual System::Object{
        System::Security::Principal::IdentityReference* identity;
        int32_t accessMask;
        bool isInherited;
        InheritanceFlags inheritanceFlags;
        PropagationFlags propagationFlags;
        
        void constructor();
        void constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        System::Security::Principal::IdentityReference* get_IdentityReference();
        InheritanceFlags get_InheritanceFlags();
        bool get_IsInherited();
        PropagationFlags get_PropagationFlags();
        int32_t get_AccessMask();
        
    };
    
    
    struct MANAGED_API NativeObjectSecurity : public virtual CommonObjectSecurity{
        
        void constructor();
        void constructor(bool isContainer, ResourceType resourceType);
        void constructor(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext);
        void constructor(bool isContainer, ResourceType resourceType, System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections);
        void constructor(bool isContainer, ResourceType resourceType, System::String* name, AccessControlSections includeSections);
        void constructor(bool isContainer, ResourceType resourceType, System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext);
        void constructor(bool isContainer, ResourceType resourceType, System::String* name, AccessControlSections includeSections, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext);
        virtual void Persist_8df14ef0f469b740(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections) final;
        virtual void Persist_d34830fae35e2aad(System::String* name, AccessControlSections includeSections) final;
        void Persist3(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections, System::Object* exceptionContext);
        void Persist4(System::String* name, AccessControlSections includeSections, System::Object* exceptionContext);
        
    };
    
    
    struct MANAGED_API GenericAcl : public virtual System::Object, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        static unsigned char AclRevision;
        static unsigned char AclRevisionDS;
        static int32_t MaxBinaryLength;
        
        GenericAcl();
        static void static_constructor();
        void constructor();
        void CopyTo(cli::array<GenericAce*>* array, int32_t index);
        void CopyTo2(System::Array* array, int32_t index);
        virtual void GetBinaryForm_f4afc682e7e10d18(cli::array<unsigned char>* binaryForm, int32_t offset) = 0;
        AceEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        virtual System::String* GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) = 0;
        virtual int32_t get_BinaryLength_4ea089e3a02d2299() = 0;
        virtual int32_t get_Count_5cd77c86ebcd1b2c() = 0;
        bool get_IsSynchronized();
        virtual GenericAce* get_Item_60d48735f5e5392f(int32_t index) = 0;
        virtual GenericAce* set_Item_bfb6c47e01525adb(int32_t index, GenericAce* value) = 0;
        virtual unsigned char get_Revision_d515f8407d8d1240() = 0;
        System::Object* get_SyncRoot();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API AsymmetricAlgorithm : public virtual System::Object, public virtual System::IDisposable{
        int32_t KeySizeValue;
        cli::array<KeySizes*>* LegalKeySizesValue;
        
        void constructor();
        void Dispose();
        void Clear();
        virtual void Dispose_2369c0ba816a26e4(bool disposing);
        virtual void FromXmlString_ec36cca6166e6990(System::String* xmlString) = 0;
        virtual System::String* ToXmlString_681b6b8ae145c576(bool includePrivateParameters) = 0;
        static AsymmetricAlgorithm* Create();
        static AsymmetricAlgorithm* Create2(System::String* algName);
        static cli::array<unsigned char>* GetNamedParam(System::String* xml, System::String* param);
        virtual System::String* get_KeyExchangeAlgorithm_e4956689b1767b62() = 0;
        virtual int32_t get_KeySize_6bd474632c551ac();
        virtual int32_t set_KeySize_16a33b99cbf5525b(int32_t value);
        virtual cli::array<KeySizes*>* get_LegalKeySizes_d0254e823f82d1d1();
        virtual System::String* get_SignatureAlgorithm_94f2ebe82aebde31() = 0;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SymmetricAlgorithm : public virtual System::Object, public virtual System::IDisposable{
        int32_t BlockSizeValue;
        cli::array<unsigned char>* IVValue;
        int32_t KeySizeValue;
        cli::array<unsigned char>* KeyValue;
        cli::array<KeySizes*>* LegalBlockSizesValue;
        cli::array<KeySizes*>* LegalKeySizesValue;
        int32_t FeedbackSizeValue;
        CipherMode ModeValue;
        PaddingMode PaddingValue;
        bool m_disposed;
        
        void constructor();
        virtual void Finalize_d235b32c6d7e8b6d();
        void Dispose();
        void Clear();
        virtual void Dispose_e50bc684cac77d05(bool disposing);
        virtual ICryptoTransform* CreateDecryptor_2ed655dc8e27df59();
        virtual ICryptoTransform* CreateDecryptor_80e9c787d56cc5d1(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) = 0;
        virtual ICryptoTransform* CreateEncryptor_f7057afd90cae836();
        virtual ICryptoTransform* CreateEncryptor_5ed1e69e3ba0a86a(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) = 0;
        virtual void GenerateIV_df3473e2513c2b00() = 0;
        virtual void GenerateKey_a6a62018358dfc76() = 0;
        bool ValidKeySize(int32_t bitLength);
        static SymmetricAlgorithm* Create();
        static SymmetricAlgorithm* Create2(System::String* algName);
        virtual int32_t get_BlockSize_7a5a96e8187bef27();
        virtual int32_t set_BlockSize_170b4e38aff87e6b(int32_t value);
        virtual int32_t get_FeedbackSize_fac329115f28c49a();
        virtual int32_t set_FeedbackSize_ab32be6ebcbf9640(int32_t value);
        virtual cli::array<unsigned char>* get_IV_983478ffab99927();
        virtual cli::array<unsigned char>* set_IV_5f86e84678ef1565(cli::array<unsigned char>* value);
        virtual cli::array<unsigned char>* get_Key_79a2c753d4f0f561();
        virtual cli::array<unsigned char>* set_Key_9b56e7a05d7e4c8f(cli::array<unsigned char>* value);
        virtual int32_t get_KeySize_ec919ce7243c4a9();
        virtual int32_t set_KeySize_f5b8ff3d506d2d5a(int32_t value);
        virtual cli::array<KeySizes*>* get_LegalBlockSizes_988a517b67f5a151();
        virtual cli::array<KeySizes*>* get_LegalKeySizes_27644398fdbe9d8();
        virtual CipherMode get_Mode_248883f5619349b8();
        virtual CipherMode set_Mode_b4ebd08a4556d807(CipherMode value);
        virtual PaddingMode get_Padding_4e1745ee57afb026();
        virtual PaddingMode set_Padding_2e9637021e7fe5c6(PaddingMode value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API KeyedHashAlgorithm : public virtual HashAlgorithm{
        cli::array<unsigned char>* KeyValue;
        
        void constructor();
        virtual void Finalize_56679ddda2765c0c();
        virtual void Dispose_66239c1dbe6eca10(bool disposing) override;
        void ZeroizeKey();
        static KeyedHashAlgorithm* Create3() /*new*/;
        static KeyedHashAlgorithm* Create4(System::String* algName) /*new*/;
        virtual cli::array<unsigned char>* get_Key_326b1bef7df09fc3();
        virtual cli::array<unsigned char>* set_Key_3e476ff3afc5eb94(cli::array<unsigned char>* value);
        
    };
    
}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API CodeAccessSecurityAttribute : public virtual SecurityAttribute2{
        
        void constructor(SecurityAction action);
        
    };
    
}}}
namespace System { namespace Threading {
    
    struct MANAGED_API WaitHandle : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        static constexpr int32_t WaitTimeout = 258;
        Microsoft::Win32::SafeHandles::SafeWaitHandle* safe_wait_handle;
        static void* InvalidHandle;
        bool disposed;
        
        WaitHandle();
        void constructor();
        static void static_constructor();
        static bool WaitAll_internal(cli::array<WaitHandle*>* handles, int32_t ms, bool exitContext);
        static void CheckArray(cli::array<WaitHandle*>* handles, bool waitAll);
        static bool WaitAll(cli::array<WaitHandle*>* waitHandles);
        static bool WaitAll2(cli::array<WaitHandle*>* waitHandles, int32_t millisecondsTimeout, bool exitContext);
        static bool WaitAll3(cli::array<WaitHandle*>* waitHandles, System::TimeSpan timeout, bool exitContext);
        static int32_t WaitAny_internal(cli::array<WaitHandle*>* handles, int32_t ms, bool exitContext);
        static int32_t WaitAny(cli::array<WaitHandle*>* waitHandles);
        static int32_t WaitAny2(cli::array<WaitHandle*>* waitHandles, int32_t millisecondsTimeout, bool exitContext);
        static int32_t WaitAny3(cli::array<WaitHandle*>* waitHandles, System::TimeSpan timeout);
        static int32_t WaitAny4(cli::array<WaitHandle*>* waitHandles, int32_t millisecondsTimeout);
        static int32_t WaitAny5(cli::array<WaitHandle*>* waitHandles, System::TimeSpan timeout, bool exitContext);
        virtual void Close_c2b8b3b2024d18b6();
        void Dispose();
        bool WaitOne_internal(void* handle, int32_t ms, bool exitContext);
        virtual void Dispose_76a5820d3865463e(bool explicitDisposing);
        static bool SignalAndWait(WaitHandle* toSignal, WaitHandle* toWaitOn);
        static bool SignalAndWait2(WaitHandle* toSignal, WaitHandle* toWaitOn, int32_t millisecondsTimeout, bool exitContext);
        static bool SignalAndWait3(WaitHandle* toSignal, WaitHandle* toWaitOn, System::TimeSpan timeout, bool exitContext);
        static bool SignalAndWait_Internal(void* toSignal, void* toWaitOn, int32_t ms, bool exitContext);
        virtual bool WaitOne_a04a6b7360612836();
        virtual bool WaitOne_dfdecf18d16bd99(int32_t millisecondsTimeout, bool exitContext);
        virtual bool WaitOne_f0c7091fd69d769f(int32_t millisecondsTimeout);
        virtual bool WaitOne_14400f9bef05768b(System::TimeSpan timeout);
        virtual bool WaitOne_ad60f64bec76902d(System::TimeSpan timeout, bool exitContext);
        void CheckDisposed();
        static bool WaitAll4(cli::array<WaitHandle*>* waitHandles, int32_t millisecondsTimeout);
        static bool WaitAll5(cli::array<WaitHandle*>* waitHandles, System::TimeSpan timeout);
        virtual void* get_Handle_95175e197a1d983a();
        virtual void* set_Handle_880f68f3ace4e24(void* value);
        Microsoft::Win32::SafeHandles::SafeWaitHandle* get_SafeWaitHandle();
        Microsoft::Win32::SafeHandles::SafeWaitHandle* set_SafeWaitHandle(Microsoft::Win32::SafeHandles::SafeWaitHandle* value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
}}
namespace Microsoft { namespace Win32 { namespace SafeHandles {
    
    struct MANAGED_API SafeHandleZeroOrMinusOneIsInvalid : public virtual System::Runtime::InteropServices::SafeHandle{
        
        void constructor(bool ownsHandle);
        virtual bool get_IsInvalid_64f170f124c20f6b() override;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
}}}
namespace Mono {
    
    struct MANAGED_API DataConverter : public virtual System::Object{
        static DataConverter* SwapConv;
        static DataConverter* CopyConv;
        static bool IsLittleEndian;
        
        DataConverter();
        void constructor();
        static void static_constructor();
        virtual double GetDouble_982f91d38d946b8(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual float GetFloat_2855d1e0112a51d8(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual int64_t GetInt64_cb5ad8c264a233be(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual int32_t GetInt32_5fe45303465b6967(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual int16_t GetInt16_758f7ab00ffee775(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual uint32_t GetUInt32_dddce65a8680a7dd(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual uint16_t GetUInt16_b622ed9a3e9dd013(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual uint64_t GetUInt64_dffd8018e877d5b3(cli::array<unsigned char>* data, int32_t index) = 0;
        virtual void PutBytes_826b3ecadff1e9db(cli::array<unsigned char>* dest, int32_t destIdx, double value) = 0;
        virtual void PutBytes_9c1149d2e7e5f565(cli::array<unsigned char>* dest, int32_t destIdx, float value) = 0;
        virtual void PutBytes_cbf2c466c0e65790(cli::array<unsigned char>* dest, int32_t destIdx, int32_t value) = 0;
        virtual void PutBytes_6c0f4987776467f3(cli::array<unsigned char>* dest, int32_t destIdx, int64_t value) = 0;
        virtual void PutBytes_24b92f8078ec7174(cli::array<unsigned char>* dest, int32_t destIdx, int16_t value) = 0;
        virtual void PutBytes_d2f5dd10e40042a8(cli::array<unsigned char>* dest, int32_t destIdx, uint16_t value) = 0;
        virtual void PutBytes_8baa85ac9d2698a3(cli::array<unsigned char>* dest, int32_t destIdx, uint32_t value) = 0;
        virtual void PutBytes_cad08b7dc9cde562(cli::array<unsigned char>* dest, int32_t destIdx, uint64_t value) = 0;
        cli::array<unsigned char>* GetBytes(double value);
        cli::array<unsigned char>* GetBytes2(float value);
        cli::array<unsigned char>* GetBytes3(int32_t value);
        cli::array<unsigned char>* GetBytes4(int64_t value);
        cli::array<unsigned char>* GetBytes5(int16_t value);
        cli::array<unsigned char>* GetBytes6(uint16_t value);
        cli::array<unsigned char>* GetBytes7(uint32_t value);
        cli::array<unsigned char>* GetBytes8(uint64_t value);
        static int32_t Align(int32_t current, int32_t align);
        static cli::array<unsigned char>* Pack(System::String* description, cli::array<System::Object*>* args);
        static cli::array<unsigned char>* PackEnumerable(System::String* description, System::Collections::IEnumerable* args);
        static bool PackOne(PackContext* b, System::Object* oarg);
        static bool Prepare(cli::array<unsigned char>* buffer, int32_t idx, int32_t size, bool align);
        static System::Collections::IList* Unpack(System::String* description, cli::array<unsigned char>* buffer, int32_t startIndex);
        void Check(cli::array<unsigned char>* dest, int32_t destIdx, int32_t size);
        static DataConverter* get_LittleEndian();
        static DataConverter* get_BigEndian();
        static DataConverter* get_Native();
        
    };
    
}
namespace Mono { namespace Globalization { namespace Unicode {
    
    struct MANAGED_API UnicodeData : public virtual System::Object{
        static System::Converter<System::String*, int32_t>* __f__am_cache0;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map1;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map2;
        
        void constructor();
        virtual cli::array<UcdCharacterProperty*>* ParseFile_5d8c937b576f9b09(System::String* file);
        UcdCharacterProperty* Parse(System::String* line);
        UcdDecompositionType ParseDecompositionType(System::String* s);
        System::Globalization::UnicodeCategory ParseUnicodeCategory(System::String* s);
        static int32_t _Parse_m__0(System::String* dv);
        virtual cli::array<CodePointRange*>* get_SimpleCases_2325e5522320db2d() = 0;
        virtual cli::array<CodePointRange*>* get_CategoryRanges_7fff5478a3a668d7() = 0;
        
    };
    
}}}
namespace Mono { namespace Math { namespace Prime { namespace Generator {
    
    struct MANAGED_API SequentialSearchPrimeGeneratorBase : public virtual PrimeGeneratorBase{
        
        void constructor();
        virtual Mono::Math::BigInteger* GenerateSearchBase_e4e6b18ddceac6c(int32_t bits, System::Object* context);
        virtual Mono::Math::BigInteger* GenerateNewPrime_96549c2617c35d0a(int32_t bits) override;
        virtual Mono::Math::BigInteger* GenerateNewPrime_12472ea6101d74d5(int32_t bits, System::Object* context);
        virtual bool IsPrimeAcceptable_e3599ecc89096791(Mono::Math::BigInteger* bi, System::Object* context);
        
    };
    
}}}}
namespace Mono { namespace Security { namespace Authenticode {
    
    struct MANAGED_API AuthenticodeBase : public virtual System::Object{
        static /*constexpr*/ System::String* spcIndirectDataContext() { return _T("1.3.6.1.4.1.311.2.1.4"); }
        cli::array<unsigned char>* fileblock;
        System::IO::FileStream* fs;
        int32_t blockNo;
        int32_t blockLength;
        int32_t peOffset;
        int32_t dirSecurityOffset;
        int32_t dirSecuritySize;
        int32_t coffSymbolTableOffset;
        
        void constructor();
        void Open(System::String* filename);
        void Close();
        bool ReadFirstBlock();
        cli::array<unsigned char>* GetSecurityEntry();
        cli::array<unsigned char>* GetHash(System::Security::Cryptography::HashAlgorithm* hash);
        cli::array<unsigned char>* HashFile(System::String* fileName, System::String* hashName);
        int32_t get_PEOffset();
        int32_t get_CoffSymbolTableOffset();
        int32_t get_SecurityOffset();
        
    };
    
}}}
namespace Mono { namespace Security { namespace Cryptography {
    
    struct MANAGED_API SymmetricTransform : public virtual System::Object, public virtual System::Security::Cryptography::ICryptoTransform, public virtual System::IDisposable{
        System::Security::Cryptography::SymmetricAlgorithm* algo;
        bool encrypt;
        int32_t BlockSizeByte;
        cli::array<unsigned char>* temp;
        cli::array<unsigned char>* temp2;
        cli::array<unsigned char>* workBuff;
        cli::array<unsigned char>* workout;
        int32_t FeedBackByte;
        int32_t FeedBackIter;
        bool m_disposed;
        bool lastBlock;
        System::Security::Cryptography::RandomNumberGenerator* _rng;
        
        void constructor(System::Security::Cryptography::SymmetricAlgorithm* symmAlgo, bool encryption, cli::array<unsigned char>* rgbIV);
        virtual void Finalize_6cd8b3965c03e7ad();
        void Dispose();
        virtual void Dispose_c0fd0d8ff386db0d(bool disposing);
        virtual void Transform_62e95237619eb355(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        virtual void ECB_94d714c69347f447(cli::array<unsigned char>* input, cli::array<unsigned char>* output) = 0;
        virtual void CBC_58d409ffea331cd7(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        virtual void CFB_77060e157a789d8(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        virtual void OFB_b1a409b313d2f57e(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        virtual void CTS_f5f5f34419061f62(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        void CheckInput(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        virtual int32_t TransformBlock_ae7940e12ac19b2d(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        int32_t InternalTransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        void Random2(cli::array<unsigned char>* buffer, int32_t start, int32_t length);
        void ThrowBadPaddingException(System::Security::Cryptography::PaddingMode padding, int32_t length, int32_t position);
        cli::array<unsigned char>* FinalEncrypt(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        cli::array<unsigned char>* FinalDecrypt(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        virtual cli::array<unsigned char>* TransformFinalBlock_b50acf58c03aba0a(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        virtual bool get_CanTransformMultipleBlocks_6ab5f7b44ce018f3();
        virtual bool get_CanReuseTransform_dc6193f5d984ad67();
        virtual int32_t get_InputBlockSize_ffe7482408103da5();
        virtual int32_t get_OutputBlockSize_97555d7a856ef43b();
        bool get_KeepLastBlock();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
}}}
namespace Mono { namespace Security { namespace X509 {
    
    struct MANAGED_API TrustAnchors : public virtual System::Object, public virtual ITrustAnchors{
        static cli::array<unsigned char>* msroot;
        static cli::array<unsigned char>* verisign;
        static cli::array<unsigned char>* verisign_ts_root;
        static cli::array<unsigned char>* oldverisign;
        static cli::array<unsigned char>* thawte;
        static X509CertificateCollection* coll;
        
        TrustAnchors();
        static void static_constructor();
        void constructor();
        X509CertificateCollection* get_Anchors();
        
        virtual X509CertificateCollection* get_Anchors_d1264350bad2a64a() override;
    };
    
    
    struct MANAGED_API AttributeTypeAndValue : public virtual System::Object{
        System::String* oid;
        System::String* attrValue;
        int32_t upperBound;
        unsigned char encoding;
        
        void constructor(System::String* oid, int32_t upperBound);
        void constructor(System::String* oid, int32_t upperBound, unsigned char encoding);
        Mono::Security::ASN1* GetASN1(unsigned char encoding);
        Mono::Security::ASN1* GetASN12();
        cli::array<unsigned char>* GetBytes(unsigned char encoding);
        cli::array<unsigned char>* GetBytes2();
        unsigned char SelectBestEncoding();
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        Mono::Security::ASN1* get_ASN1();
        
    };
    
    
    struct MANAGED_API X509Extension : public virtual System::Object{
        System::String* extnOid;
        bool extnCritical;
        Mono::Security::ASN1* extnValue;
        
        void constructor();
        void constructor(Mono::Security::ASN1* asn1);
        void constructor(X509Extension* extension);
        virtual void Decode_cefcb854d4bf305c();
        virtual void Encode_e7b55e24a6cbc279();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        cli::array<unsigned char>* GetBytes();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void WriteLine(System::Text::StringBuilder* sb, int32_t n, int32_t pos);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        Mono::Security::ASN1* get_ASN1();
        System::String* get_Oid();
        bool get_Critical();
        bool set_Critical(bool value);
        virtual System::String* get_Name_7f87430b0f20607();
        Mono::Security::ASN1* get_Value();
        
    };
    
}}}
namespace Mono { namespace Xml {
    
    struct MANAGED_API SmallXmlParser : public virtual System::Object{
        IContentHandler* handler;
        System::IO::TextReader* reader;
        System::Collections::Stack* elementNames;
        System::Collections::Stack* xmlSpaces;
        System::String* xmlSpace;
        System::Text::StringBuilder* buffer;
        cli::array<char16_t>* nameBuffer;
        bool isWhitespace;
        AttrListImpl* attributes;
        int32_t line;
        bool resetColumn;
        int32_t column;
        
        void constructor();
        System::Exception* Error(System::String* msg);
        System::Exception* UnexpectedEndError();
        bool IsNameChar(char16_t c, bool start);
        bool IsWhitespace(int32_t c);
        void SkipWhitespaces();
        void HandleWhitespaces();
        void SkipWhitespaces2(bool expected);
        int32_t Peek();
        int32_t Read();
        void Expect(int32_t c);
        System::String* ReadUntil(char16_t until, bool handleReferences);
        System::String* ReadName();
        void Parse(System::IO::TextReader* input, IContentHandler* handler);
        void Cleanup();
        void ReadContent();
        void HandleBufferedContent();
        void ReadCharacters();
        void ReadReference();
        int32_t ReadCharacterReference();
        void ReadAttribute(AttrListImpl* a);
        void ReadCDATASection();
        void ReadComment();
        
    };
    
}}
namespace System {
    
    struct MANAGED_API MonoTODOAttribute : public virtual Attribute{
        String* comment;
        
        void constructor();
        void constructor(String* comment);
        String* get_Comment();
        
    };
    
    
    struct MANAGED_API ArgumentException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147024809;
        String* param_name;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(String* message, String* paramName);
        void constructor(String* message, String* paramName, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* get_ParamName_299aa21f59781bb8();
        virtual String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API EventArgs : public virtual Object{
        static EventArgs* Empty;
        
        EventArgs();
        void constructor();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API ArithmeticException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147024362;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API TypeLoadException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233054;
        String* className;
        String* assemblyName;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(String* className, String* assemblyName);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* get_Message_d211df4045b57cbf() override;
        String* get_TypeName();
        
    };
    
    
    struct MANAGED_API OutOfMemoryException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147024882;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API MissingMemberException : public virtual MemberAccessException{
        static constexpr int32_t Result = -2146233070;
        String* ClassName;
        String* MemberName;
        cli::array<unsigned char>* Signature;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* className, String* memberName);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API Delegate : public virtual Object, public virtual ICloneable, public virtual Runtime::Serialization::ISerializable{
        void* method_ptr;
        void* invoke_impl;
        Object* m_target;
        void* method;
        void* delegate_trampoline;
        void* method_code;
        Reflection::MethodInfo* method_info;
        Reflection::MethodInfo* original_method_info;
        DelegateData* data;
        
        void constructor(Object* target, String* method);
        void constructor(Type* target, String* method);
        static Delegate* CreateDelegate_internal(Type* type, Object* target, Reflection::MethodInfo* info, bool throwOnBindFailure);
        void SetMulticastInvoke();
        static bool arg_type_match(Type* delArgType, Type* argType);
        static bool arg_type_match_this(Type* delArgType, Type* argType, bool boxedThis);
        static bool return_type_match(Type* delReturnType, Type* returnType);
        static Delegate* CreateDelegate(Type* type, Object* firstArgument, Reflection::MethodInfo* method, bool throwOnBindFailure);
        static Delegate* CreateDelegate2(Type* type, Object* firstArgument, Reflection::MethodInfo* method, bool throwOnBindFailure, bool allowClosed);
        static Delegate* CreateDelegate3(Type* type, Object* firstArgument, Reflection::MethodInfo* method);
        static Delegate* CreateDelegate4(Type* type, Reflection::MethodInfo* method, bool throwOnBindFailure);
        static Delegate* CreateDelegate5(Type* type, Reflection::MethodInfo* method);
        static Delegate* CreateDelegate6(Type* type, Object* target, String* method);
        static Reflection::MethodInfo* GetCandidateMethod(Type* type, Type* target, String* method, Reflection::BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static Delegate* CreateDelegate7(Type* type, Type* target, String* method, bool ignoreCase, bool throwOnBindFailure);
        static Delegate* CreateDelegate8(Type* type, Type* target, String* method);
        static Delegate* CreateDelegate9(Type* type, Type* target, String* method, bool ignoreCase);
        static Delegate* CreateDelegate10(Type* type, Object* target, String* method, bool ignoreCase, bool throwOnBindFailure);
        static Delegate* CreateDelegate11(Type* type, Object* target, String* method, bool ignoreCase);
        Object* DynamicInvoke(cli::array<Object*>* args);
        virtual Object* DynamicInvokeImpl_929f0cf2f6cc1bc9(cli::array<Object*>* args);
        virtual Object* Clone_ea12f3f395dbfa01();
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual Reflection::MethodInfo* GetMethodImpl_6cc946ae8113eac0();
        virtual void GetObjectData_e87c6354ab1f5b0(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual cli::array<Delegate*>* GetInvocationList_8fef0390be027d95();
        static Delegate* Combine(Delegate* a, Delegate* b);
        static Delegate* Combine2(cli::array<Delegate*>* delegates);
        virtual Delegate* CombineImpl_1d822eded1f305a6(Delegate* d);
        static Delegate* Remove(Delegate* source, Delegate* value);
        virtual Delegate* RemoveImpl_683e7d1a8f792013(Delegate* d);
        static Delegate* RemoveAll(Delegate* source, Delegate* value);
        bool IsTransparentProxy();
        static bool op_Equality(Delegate* d1, Delegate* d2);
        static bool op_Inequality(Delegate* d1, Delegate* d2);
        Reflection::MethodInfo* get_Method();
        Object* get_Target();
        
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API InvalidOperationException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233079;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API NotSupportedException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233067;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API StringComparer : public virtual Object, public virtual Collections::IComparer, public virtual Collections::IEqualityComparer, public virtual Collections::Generic::IComparer2<String*>, public virtual Collections::Generic::IEqualityComparer2<String*>{
        static StringComparer* invariantCultureIgnoreCase;
        static StringComparer* invariantCulture;
        static StringComparer* ordinalIgnoreCase;
        static StringComparer* ordinal;
        
        StringComparer();
        void constructor();
        static void static_constructor();
        static StringComparer* Create(Globalization::CultureInfo* culture, bool ignoreCase);
        int32_t Compare(Object* x, Object* y);
        bool Equals3(Object* x, Object* y) /*new*/;
        int32_t GetHashCode2(Object* obj);
        virtual int32_t Compare_aa3d1bf936762ace(String* x, String* y) = 0;
        virtual bool Equals_34b0513c0e663568(String* x, String* y) = 0;
        virtual int32_t GetHashCode_c89a0097b5036ad3(String* obj) = 0;
        static StringComparer* get_CurrentCulture();
        static StringComparer* get_CurrentCultureIgnoreCase();
        static StringComparer* get_InvariantCulture();
        static StringComparer* get_InvariantCultureIgnoreCase();
        static StringComparer* get_Ordinal();
        static StringComparer* get_OrdinalIgnoreCase();
        
        virtual int32_t Compare_451fd276747b629d(Object* x, Object* y) override;
        virtual bool Equals_ad190887ea91ded(Object* x, Object* y) override;
        virtual int32_t GetHashCode_f8793dfb2b096a5a(Object* obj) override;
        virtual int32_t Compare_5902559f67a8cefa(String* x, String* y) override;
        virtual bool Equals_f783e5e22b72a1c0(String* x, String* y) override;
        virtual int32_t GetHashCode_74f46a6b01295dbe(String* obj) override;
    };
    
    
    struct MANAGED_API TimeZone : public virtual Object{
        static TimeZone* currentTimeZone;
        static Object* tz_lock;
        static int64_t timezone_check;
        
        TimeZone();
        void constructor();
        static void static_constructor();
        virtual Globalization::DaylightTime* GetDaylightChanges_7aec528d6e066e(int32_t year) = 0;
        virtual TimeSpan GetUtcOffset_7ede31ceb7855151(DateTime time) = 0;
        virtual bool IsDaylightSavingTime_3bdf7ceedb2508ce(DateTime time);
        static bool IsDaylightSavingTime2(DateTime time, Globalization::DaylightTime* daylightTimes);
        virtual DateTime ToLocalTime_727a1d453c597b66(DateTime time);
        virtual DateTime ToUniversalTime_a2fdcc18b24d9d81(DateTime time);
        TimeSpan GetLocalTimeDiff(DateTime time);
        TimeSpan GetLocalTimeDiff2(DateTime time, TimeSpan utc_offset);
        static TimeZone* get_CurrentTimeZone();
        virtual String* get_DaylightName_2eca7f1486446145() = 0;
        virtual String* get_StandardName_2e2b3e3d784ffee2() = 0;
        
    };
    
    
    struct MANAGED_API FormatException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233033;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ApplicationException : public virtual Exception{
        static constexpr int32_t Result = -2146232832;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ContextBoundObject : public virtual MarshalByRefObject{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API UnauthorizedAccessException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233088;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API OperationCanceledException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233029;
        Nullable2<Threading::CancellationToken> token;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(Threading::CancellationToken token);
        void constructor(String* message, Threading::CancellationToken token);
        void constructor(String* message, Exception* innerException, Threading::CancellationToken token);
        Threading::CancellationToken get_CancellationToken();
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API CollectionBase : public virtual System::Object, public virtual IList, public virtual ICollection, public virtual IEnumerable{
        ArrayList* list;
        
        void constructor();
        void constructor(int32_t capacity);
        IEnumerator* GetEnumerator();
        void Clear();
        void RemoveAt(int32_t index);
        virtual void OnClear_546ea22836fc4347();
        virtual void OnClearComplete_262d89123b61bb40();
        virtual void OnInsert_b7fce752b35e7db5(int32_t index, System::Object* value);
        virtual void OnInsertComplete_5963d3846329d8fa(int32_t index, System::Object* value);
        virtual void OnRemove_aefde0c876b0f4bb(int32_t index, System::Object* value);
        virtual void OnRemoveComplete_e8fa485a1524028a(int32_t index, System::Object* value);
        virtual void OnSet_744186d05d41e86d(int32_t index, System::Object* oldValue, System::Object* newValue);
        virtual void OnSetComplete_8b0900bc1e5ce252(int32_t index, System::Object* oldValue, System::Object* newValue);
        virtual void OnValidate_b8e0f62511f977c6(System::Object* value);
        void CopyTo(System::Array* array, int32_t index);
        int32_t Add(System::Object* value);
        bool Contains(System::Object* value);
        int32_t IndexOf(System::Object* value);
        void Insert(int32_t index, System::Object* value);
        void Remove(System::Object* value);
        int32_t get_Count();
        int32_t get_Capacity();
        int32_t set_Capacity(int32_t value);
        ArrayList* get_InnerList();
        IList* get_List();
        System::Object* get_SyncRoot();
        bool get_IsSynchronized();
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        System::Object* get_Item(int32_t index);
        System::Object* set_Item(int32_t index, System::Object* value);
        
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
    
    struct MANAGED_API FixedSizeArrayListWrapper : public virtual ArrayListWrapper{
        
        void constructor(ArrayList* innerList);
        virtual int32_t Add_e6a92085999ce388(System::Object* value) override;
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c) override;
        virtual void Clear_cd6654e5a40f5056() override;
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value) override;
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c) override;
        virtual void Remove_2225381aaf812c6d(System::Object* value) override;
        virtual void RemoveAt_2abea768d3273318(int32_t index) override;
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count) override;
        virtual void TrimToSize_d8592d0aafda93d() override;
        virtual System::String* get_ErrorMessage_d1b0b946fa8d50da();
        virtual int32_t get_Capacity_2220db8052d52582() override;
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value) override;
        virtual bool get_IsFixedSize_97a42a087785251() override;
        
    };
    
    
    struct MANAGED_API FixedSizeListWrapper : public virtual ListWrapper{
        
        void constructor(IList* innerList);
        virtual int32_t Add_bcf09ba25e62648f(System::Object* value) override;
        virtual void Clear_77f454011f626479() override;
        virtual void Insert_290942a010dce429(int32_t index, System::Object* value) override;
        virtual void Remove_f0670db65479e773(System::Object* value) override;
        virtual void RemoveAt_a5bebe22efe6f1a7(int32_t index) override;
        virtual System::String* get_ErrorMessage_461bc84fd2dc69d6();
        virtual bool get_IsFixedSize_3444cf8f8ef3efa4() override;
        
    };
    
    
    struct MANAGED_API Hashtable : public virtual System::Object, public virtual IDictionary, public virtual ICollection, public virtual IEnumerable, public virtual System::ICloneable, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IDeserializationCallback{
        static constexpr int32_t CHAIN_MARKER = -2147483648;
        cli::array<Slot>* table;
        cli::array<int32_t>* hashes;
        HashKeys* hashKeys;
        HashValues* hashValues;
        IHashCodeProvider* hcpRef;
        IComparer* comparerRef;
        System::Runtime::Serialization::SerializationInfo* serializationInfo;
        IEqualityComparer* equalityComparer;
        int32_t inUse;
        int32_t modificationCount;
        float loadFactor;
        int32_t threshold;
        static cli::array<int32_t>* primeTbl;
        
        Hashtable();
        void constructor();
        void constructor(int32_t capacity, float loadFactor, IHashCodeProvider* hcp, IComparer* comparer);
        void constructor(int32_t capacity, float loadFactor);
        void constructor(int32_t capacity);
        void constructor(Hashtable* source);
        void constructor(int32_t capacity, IHashCodeProvider* hcp, IComparer* comparer);
        void constructor(IDictionary* d, float loadFactor, IHashCodeProvider* hcp, IComparer* comparer);
        void constructor(IDictionary* d, float loadFactor);
        void constructor(IDictionary* d);
        void constructor(IDictionary* d, IHashCodeProvider* hcp, IComparer* comparer);
        void constructor(IHashCodeProvider* hcp, IComparer* comparer);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(IDictionary* d, IEqualityComparer* equalityComparer);
        void constructor(IDictionary* d, float loadFactor, IEqualityComparer* equalityComparer);
        void constructor(IEqualityComparer* equalityComparer);
        void constructor(int32_t capacity, IEqualityComparer* equalityComparer);
        void constructor(int32_t capacity, float loadFactor, IEqualityComparer* equalityComparer);
        static void static_constructor();
        IEnumerator* GetEnumerator();
        virtual void CopyTo_2ceaf225ee09f8a(System::Array* array, int32_t arrayIndex);
        virtual void Add_3f7ab157bcb41156(System::Object* key, System::Object* value);
        virtual void Clear_f1f405c8fa63a059();
        virtual bool Contains_be7d0f2741618cb4(System::Object* key);
        virtual IDictionaryEnumerator* GetEnumerator_47df71de9b680069();
        virtual void Remove_fd653674dd8a5ac4(System::Object* key);
        virtual bool ContainsKey_5de2e202a0290d76(System::Object* key);
        virtual bool ContainsValue_c2c435f6458aea98(System::Object* value);
        virtual System::Object* Clone_7f5df2dba23978b();
        virtual void GetObjectData_f5c8af3d5979ea57(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void OnDeserialization_868d234d4d762260(System::Object* sender);
        static Hashtable* Synchronized(Hashtable* table);
        virtual int32_t GetHash_6b53c6911c980a14(System::Object* key);
        virtual bool KeyEquals_c2b05002bc8dc204(System::Object* item, System::Object* key);
        void AdjustThreshold();
        void SetTable(cli::array<Slot>* table, cli::array<int32_t>* hashes);
        int32_t Find(System::Object* key);
        void Rehash();
        void PutImpl(System::Object* key, System::Object* value, bool overwrite);
        void CopyToArray(System::Array* arr, int32_t i, EnumeratorMode mode);
        static bool TestPrime(int32_t x);
        static int32_t CalcPrime(int32_t x);
        static int32_t ToPrime(int32_t x);
        IComparer* get_comparer();
        IComparer* set_comparer(IComparer* value);
        IHashCodeProvider* get_hcp();
        IHashCodeProvider* set_hcp(IHashCodeProvider* value);
        IEqualityComparer* get_EqualityComparer();
        virtual int32_t get_Count_40aff81471a60b4c();
        virtual bool get_IsSynchronized_6d887770284f3341();
        virtual System::Object* get_SyncRoot_2d1e4aa44bab8a0d();
        virtual bool get_IsFixedSize_984422caf0fb996a();
        virtual bool get_IsReadOnly_4faf7104d0e98623();
        virtual ICollection* get_Keys_8171dfd94447fa93();
        virtual ICollection* get_Values_4ed88b5f6e59ef25();
        virtual System::Object* get_Item_d75c6e706b965758(System::Object* key);
        virtual System::Object* set_Item_84c7e24d9caa09(System::Object* key, System::Object* value);
        
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual ICollection* get_Keys_d809cadac60b140a() override;
        virtual ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
    };
    
    
    struct MANAGED_API Queue : public virtual System::Object, public virtual ICollection, public virtual IEnumerable, public virtual System::ICloneable{
        cli::array<System::Object*>* _array;
        int32_t _head;
        int32_t _size;
        int32_t _tail;
        int32_t _growFactor;
        int32_t _version;
        
        void constructor();
        void constructor(int32_t capacity);
        void constructor(ICollection* col);
        void constructor(int32_t capacity, float growFactor);
        virtual void CopyTo_a242f31c9e5a44f6(System::Array* array, int32_t index);
        virtual IEnumerator* GetEnumerator_9c4544dfc8024fc3();
        virtual System::Object* Clone_bcf06e67c65a40c7();
        virtual void Clear_861e11dd27e6c911();
        virtual bool Contains_26022acb06595f32(System::Object* obj);
        virtual System::Object* Dequeue_65b33648b3aa820f();
        virtual void Enqueue_7ab7b5c658b77bbe(System::Object* obj);
        virtual System::Object* Peek_8319b8ebd54b1ede();
        static Queue* Synchronized(Queue* queue);
        virtual cli::array<System::Object*>* ToArray_ccb213d63131bb6c();
        virtual void TrimToSize_ba0f5f9778fb48a6();
        void grow();
        virtual int32_t get_Count_d68471db5ed73aae();
        virtual bool get_IsSynchronized_c60381663baf0d11();
        virtual System::Object* get_SyncRoot_d7b361956ed7602e();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API SortedList : public virtual System::Object, public virtual IDictionary, public virtual ICollection, public virtual IEnumerable, public virtual System::ICloneable{
        static constexpr int32_t INITIAL_SIZE = 16;
        cli::array<Slot2>* table;
        IComparer* comparer;
        int32_t inUse;
        int32_t modificationCount;
        int32_t defaultCapacity;
        
        void constructor();
        void constructor(int32_t initialCapacity);
        void constructor(IComparer* comparer, int32_t capacity);
        void constructor(IComparer* comparer);
        void constructor(IDictionary* d);
        void constructor(IDictionary* d, IComparer* comparer);
        IEnumerator* GetEnumerator();
        virtual void Add_73ffb8be47e034c5(System::Object* key, System::Object* value);
        virtual void Clear_5308a33218829a30();
        virtual bool Contains_34d44683dd1aa8bd(System::Object* key);
        virtual IDictionaryEnumerator* GetEnumerator_958c16317aeb4444();
        virtual void Remove_61abf193a3ae1d2b(System::Object* key);
        virtual void CopyTo_8484dba7aeba95d9(System::Array* array, int32_t arrayIndex);
        virtual System::Object* Clone_e04bc1da0532c023();
        virtual IList* GetKeyList_ffbd7f3ff810d3();
        virtual IList* GetValueList_17bf7e573fc23371();
        virtual void RemoveAt_cba3ea1ee2c9606d(int32_t index);
        virtual int32_t IndexOfKey_81491507d0744836(System::Object* key);
        virtual int32_t IndexOfValue_782f6ce5fef83fb5(System::Object* value);
        virtual bool ContainsKey_e3470ab0b9b87703(System::Object* key);
        virtual bool ContainsValue_ef34ededfed85e10(System::Object* value);
        virtual System::Object* GetByIndex_920ca5caddf75e3d(int32_t index);
        virtual void SetByIndex_6f02898365af9fc4(int32_t index, System::Object* value);
        virtual System::Object* GetKey_bd6d1bec1a5b310c(int32_t index);
        static SortedList* Synchronized(SortedList* list);
        virtual void TrimToSize_40ad24c8c4892462();
        void Resize(int32_t n, bool copy);
        void EnsureCapacity(int32_t n, int32_t free);
        void PutImpl(System::Object* key, System::Object* value, bool overwrite);
        System::Object* GetImpl(System::Object* key);
        void InitTable(int32_t capacity, bool forceSize);
        void CopyToArray(System::Array* arr, int32_t i, EnumeratorMode2 mode);
        int32_t Find(System::Object* key);
        virtual int32_t get_Count_78ce60b82e5a007();
        virtual bool get_IsSynchronized_766878a892ebabf4();
        virtual System::Object* get_SyncRoot_d4fc4c9fde3847f6();
        virtual bool get_IsFixedSize_8ae72e21b9352319();
        virtual bool get_IsReadOnly_1c2de291a8a6bf90();
        virtual ICollection* get_Keys_2962390e8ff57dd6();
        virtual ICollection* get_Values_cb1c2f63e58da7b3();
        virtual System::Object* get_Item_c9a994fdd927bead(System::Object* key);
        virtual System::Object* set_Item_1ba4748ac76411aa(System::Object* key, System::Object* value);
        virtual int32_t get_Capacity_db68c0b120caeec5();
        virtual int32_t set_Capacity_13c76b6b4fffc55d(int32_t value);
        
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual ICollection* get_Keys_d809cadac60b140a() override;
        virtual ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
    };
    
    
    struct MANAGED_API Stack : public virtual System::Object, public virtual ICollection, public virtual IEnumerable, public virtual System::ICloneable{
        static constexpr int32_t default_capacity = 16;
        cli::array<System::Object*>* contents;
        int32_t current;
        int32_t count;
        int32_t capacity;
        int32_t modCount;
        
        void constructor();
        void constructor(ICollection* col);
        void constructor(int32_t initialCapacity);
        void Resize(int32_t ncapacity);
        static Stack* Synchronized(Stack* stack);
        virtual void Clear_8c8c25624b18372d();
        virtual System::Object* Clone_be99069adbf1961c();
        virtual bool Contains_e73575808049e7be(System::Object* obj);
        virtual void CopyTo_f10714ed2802c46b(System::Array* array, int32_t index);
        virtual IEnumerator* GetEnumerator_ae53897f8a2f577a();
        virtual System::Object* Peek_6b91e1254bdabd34();
        virtual System::Object* Pop_9492442210514403();
        virtual void Push_9a8495c8210a673(System::Object* obj);
        virtual cli::array<System::Object*>* ToArray_429131696de6db19();
        virtual int32_t get_Count_a768d394e63a6b27();
        virtual bool get_IsSynchronized_d5977c6adec21cc3();
        virtual System::Object* get_SyncRoot_d19ca4cd2e3adde6();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API ReadOnlyCollectionBase : public virtual System::Object, public virtual ICollection, public virtual IEnumerable{
        ArrayList* list;
        
        void constructor();
        virtual IEnumerator* GetEnumerator_92182c889cb5e81d();
        IEnumerator* GetEnumerator2();
        void CopyTo(System::Array* array, int32_t index);
        virtual int32_t get_Count_d1f8482d32e8ef54();
        ArrayList* get_InnerList();
        System::Object* get_SyncRoot();
        bool get_IsSynchronized();
        
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
    };
    
}}
namespace System { namespace Globalization {
    
    struct MANAGED_API EastAsianLunisolarCalendar : public virtual Calendar{
        CCEastAsianLunisolarEraHandler* M_EraHandler;
        
        void constructor(CCEastAsianLunisolarEraHandler* eraHandler);
        void M_CheckDateTime(System::DateTime time);
        void M_CheckEra(int32_t era);
        int32_t M_CheckYEG(int32_t year, int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        int32_t M_CheckYMEG(int32_t year, int32_t month, int32_t era);
        int32_t M_CheckYMDEG(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        int32_t GetCelestialStem(int32_t sexagenaryYear);
        virtual int32_t GetSexagenaryYear_7e817f7e639c1442(System::DateTime time);
        int32_t GetTerrestrialBranch(int32_t sexagenaryYear);
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual int32_t get_ActualCurrentEra_d2c09b5f859d63e9();
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        
    };
    
    
    struct MANAGED_API Bootstring : public virtual System::Object{
        char16_t delimiter;
        int32_t base_num;
        int32_t tmin;
        int32_t tmax;
        int32_t skew;
        int32_t damp;
        int32_t initial_bias;
        int32_t initial_n;
        
        void constructor(char16_t delimiter, int32_t baseNum, int32_t tmin, int32_t tmax, int32_t skew, int32_t damp, int32_t initialBias, int32_t initialN);
        System::String* Encode(System::String* s, int32_t offset);
        char16_t EncodeDigit(int32_t d);
        int32_t DecodeDigit(char16_t c);
        int32_t Adapt(int32_t delta, int32_t numPoints, bool firstTime);
        System::String* Decode(System::String* s, int32_t offset);
        
    };
    
}}
namespace System { namespace IO {
    
    struct MANAGED_API StreamReader : public virtual TextReader{
        static constexpr int32_t DefaultBufferSize = 1024;
        static constexpr int32_t DefaultFileBufferSize = 4096;
        static constexpr int32_t MinimumBufferSize = 128;
        static constexpr bool leave_open = false;
        cli::array<unsigned char>* input_buffer;
        static cli::array<unsigned char>* input_buffer_recycle;
        static System::Object* input_buffer_recycle_lock;
        cli::array<char16_t>* decoded_buffer;
        static cli::array<char16_t>* decoded_buffer_recycle;
        System::Text::Encoding* encoding;
        System::Text::Decoder2* decoder;
        System::Text::StringBuilder* line_builder;
        Stream* base_stream;
        int32_t decoded_count;
        int32_t pos;
        int32_t buffer_size;
        int32_t do_checks;
        bool mayBlock;
        static StreamReader* Null2;
        bool foundCR;
        
        StreamReader();
        void constructor();
        void constructor(Stream* stream);
        void constructor(Stream* stream, bool detectEncodingFromByteOrderMarks);
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        void constructor(Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks);
        void constructor(Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize);
        void constructor(System::String* path);
        void constructor(System::String* path, bool detectEncodingFromByteOrderMarks);
        void constructor(System::String* path, System::Text::Encoding* encoding);
        void constructor(System::String* path, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks);
        void constructor(System::String* path, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize);
        static void static_constructor();
        void Initialize(Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize);
        virtual void Close_7c5ccd5fb8dfeba3() override;
        virtual void Dispose_6de32a3267835eb1(bool disposing) override;
        int32_t DoChecks(int32_t count);
        void DiscardBufferedData();
        int32_t ReadBuffer();
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        bool DataAvailable();
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        int32_t FindNextEOL();
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        void CheckState();
        virtual Stream* get_BaseStream_cbffc4235bf758d4();
        virtual System::Text::Encoding* get_CurrentEncoding_b15371dbc6908554();
        bool get_EndOfStream();
        
    };
    
    
    struct MANAGED_API StreamWriter : public virtual TextWriter{
        static constexpr int32_t DefaultBufferSize = 1024;
        static constexpr int32_t DefaultFileBufferSize = 4096;
        static constexpr int32_t MinimumBufferSize = 256;
        static constexpr bool leave_open = false;
        System::Text::Encoding* internalEncoding;
        Stream* internalStream;
        cli::array<unsigned char>* byte_buf;
        cli::array<char16_t>* decode_buf;
        int32_t byte_pos;
        int32_t decode_pos;
        bool iflush;
        bool DisposedAlready;
        bool preamble_done;
        static StreamWriter* Null2;
        
        StreamWriter();
        void constructor(Stream* stream);
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        void constructor(Stream* stream, System::Text::Encoding* encoding, int32_t bufferSize);
        void constructor(System::String* path);
        void constructor(System::String* path, bool append);
        void constructor(System::String* path, bool append, System::Text::Encoding* encoding);
        void constructor(System::String* path, bool append, System::Text::Encoding* encoding, int32_t bufferSize);
        static void static_constructor();
        virtual void Finalize_b7f7e65eab84c162();
        void Initialize(System::Text::Encoding* encoding, int32_t bufferSize);
        virtual void Dispose_6868d8c2d2b3dfb7(bool disposing) override;
        virtual void Flush_c8220c56815bfd56() override;
        void FlushBytes();
        void Decode();
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        void LowLevelWrite(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        void LowLevelWrite2(System::String* s);
        virtual void Write_96ccae6b0b267024(char16_t value) override;
        virtual void Write_6d89396c0c5b77c4(cli::array<char16_t>* buffer) override;
        virtual void Write_dcf5e45abd9e11c4(System::String* value) override;
        virtual void Close_745be624b802d9f6() override;
        void CheckState();
        virtual bool get_AutoFlush_84cda26e8ae50ae1();
        virtual bool set_AutoFlush_12a815ad7ffc54a(bool value);
        virtual Stream* get_BaseStream_2c967ce883c8b975();
        virtual System::Text::Encoding* get_Encoding_55955d94411af675() override;
        
    };
    
    
    struct MANAGED_API FileSystemInfo : public virtual System::MarshalByRefObject, public virtual System::Runtime::Serialization::ISerializable{
        System::String* FullPath;
        System::String* OriginalPath;
        MonoIOStat stat;
        bool valid;
        
        void constructor();
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_e22ded754991345d(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void Delete_2d3445237ba2ed66() = 0;
        void Refresh();
        void Refresh2(bool force);
        virtual void InternalRefresh_5c7cc70032723c7a();
        void CheckPath(System::String* path);
        virtual bool get_Exists_44ccb569427c51d7() = 0;
        virtual System::String* get_Name_34b64716a6d0afcd() = 0;
        virtual System::String* get_FullName_3d8989b544082b48();
        System::String* get_Extension();
        FileAttributes get_Attributes();
        FileAttributes set_Attributes(FileAttributes value);
        System::DateTime get_CreationTime();
        System::DateTime set_CreationTime(System::DateTime value);
        System::DateTime get_CreationTimeUtc();
        System::DateTime set_CreationTimeUtc(System::DateTime value);
        System::DateTime get_LastAccessTime();
        System::DateTime set_LastAccessTime(System::DateTime value);
        System::DateTime get_LastAccessTimeUtc();
        System::DateTime set_LastAccessTimeUtc(System::DateTime value);
        System::DateTime get_LastWriteTime();
        System::DateTime set_LastWriteTime(System::DateTime value);
        System::DateTime get_LastWriteTimeUtc();
        System::DateTime set_LastWriteTimeUtc(System::DateTime value);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API IOException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, int32_t hresult);
        
    };
    
    
    struct MANAGED_API FileStream : public virtual Stream{
        static constexpr int32_t DefaultBufferSize = 4096;
        static cli::array<unsigned char>* buf_recycle;
        static System::Object* buf_recycle_lock;
        cli::array<unsigned char>* buf;
        System::String* name;
        Microsoft::Win32::SafeHandles::SafeFileHandle* safeHandle;
        int64_t append_startpos;
        void* handle;
        FileAccess access;
        bool owner;
        bool async;
        bool canseek;
        bool anonymous;
        bool buf_dirty;
        int32_t buf_size;
        int32_t buf_length;
        int32_t buf_offset;
        int64_t buf_start;
        
        FileStream();
        void constructor(void* handle, FileAccess access);
        void constructor(void* handle, FileAccess access, bool ownsHandle);
        void constructor(void* handle, FileAccess access, bool ownsHandle, int32_t bufferSize);
        void constructor(void* handle, FileAccess access, bool ownsHandle, int32_t bufferSize, bool isAsync);
        void constructor(void* handle, FileAccess access, bool ownsHandle, int32_t bufferSize, bool isAsync, bool isZeroSize);
        void constructor(System::String* path, FileMode mode);
        void constructor(System::String* path, FileMode mode, FileAccess access);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share, int32_t bufferSize);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share, int32_t bufferSize, bool useAsync);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share, int32_t bufferSize, FileOptions options);
        void constructor(Microsoft::Win32::SafeHandles::SafeFileHandle* handle, FileAccess access);
        void constructor(Microsoft::Win32::SafeHandles::SafeFileHandle* handle, FileAccess access, int32_t bufferSize);
        void constructor(Microsoft::Win32::SafeHandles::SafeFileHandle* handle, FileAccess access, int32_t bufferSize, bool isAsync);
        void constructor(System::String* path, FileMode mode, System::Security::AccessControl::FileSystemRights rights, FileShare share, int32_t bufferSize, FileOptions options);
        void constructor(System::String* path, FileMode mode, System::Security::AccessControl::FileSystemRights rights, FileShare share, int32_t bufferSize, FileOptions options, System::Security::AccessControl::FileSecurity* fileSecurity);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share, int32_t bufferSize, bool isAsync, bool anonymous);
        void constructor(System::String* path, FileMode mode, FileAccess access, FileShare share, int32_t bufferSize, bool anonymous, FileOptions options);
        static void static_constructor();
        virtual void Finalize_8d87242530ad8015();
        void ExposeHandle();
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* array, int32_t offset, int32_t count) override;
        int32_t ReadInternal(cli::array<unsigned char>* dest, int32_t offset, int32_t count);
        virtual System::IAsyncResult* BeginRead_783f127b729b2f0a(cli::array<unsigned char>* array, int32_t offset, int32_t numBytes, System::AsyncCallback* userCallback, System::Object* stateObject) override;
        virtual int32_t EndRead_fffd36c36fbcca5b(System::IAsyncResult* asyncResult) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* array, int32_t offset, int32_t count) override;
        void WriteInternal(cli::array<unsigned char>* src, int32_t offset, int32_t count);
        virtual System::IAsyncResult* BeginWrite_85b245acef3a8d4a(cli::array<unsigned char>* array, int32_t offset, int32_t numBytes, System::AsyncCallback* userCallback, System::Object* stateObject) override;
        virtual void EndWrite_4a9b8c2a22f9c4e3(System::IAsyncResult* asyncResult) override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Flush_132821400030c993() override;
        virtual void Flush_45c7245c20dbb092(bool flushToDisk);
        virtual void Lock_5f3c7fa1bcb2cdc0(int64_t position, int64_t length);
        virtual void Unlock_9bd2607d2344dcd0(int64_t position, int64_t length);
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        System::Security::AccessControl::FileSecurity* GetAccessControl();
        void SetAccessControl(System::Security::AccessControl::FileSecurity* fileSecurity);
        int32_t ReadSegment(cli::array<unsigned char>* dest, int32_t dest_offset, int32_t count);
        int32_t WriteSegment(cli::array<unsigned char>* src, int32_t src_offset, int32_t count);
        void FlushBuffer(Stream* st);
        void FlushBuffer2();
        void FlushBufferIfDirty();
        void RefillBuffer();
        int32_t ReadData(void* handle, cli::array<unsigned char>* buf, int32_t offset, int32_t count);
        void InitBuffer(int32_t size, bool isZeroSize);
        System::String* GetSecureFileName(System::String* filename);
        System::String* GetSecureFileName2(System::String* filename, bool full);
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_IsAsync_f1144e989e0e63e();
        System::String* get_Name();
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        virtual void* get_Handle_74aea2418d83b5a0();
        virtual Microsoft::Win32::SafeHandles::SafeFileHandle* get_SafeFileHandle_b919aff741b12494();
        
    };
    
}}
namespace System { namespace IO { namespace IsolatedStorage {
    
    struct MANAGED_API IsolatedStorage : public virtual System::MarshalByRefObject{
        IsolatedStorageScope storage_scope;
        System::Object* _assemblyIdentity;
        System::Object* _domainIdentity;
        System::Object* _applicationIdentity;
        
        void constructor();
        virtual System::Security::Permissions::IsolatedStoragePermission* GetPermission_bd95612ebfcb7e7e(System::Security::PermissionSet* ps) = 0;
        void InitStore(IsolatedStorageScope scope, System::Type* domainEvidenceType, System::Type* assemblyEvidenceType);
        void InitStore2(IsolatedStorageScope scope, System::Type* appEvidenceType);
        virtual void Remove_b3e3f72785a30fc() = 0;
        virtual bool IncreaseQuotaTo_ede0fdcdc0552a87(int64_t newQuotaSize);
        System::Object* get_ApplicationIdentity();
        System::Object* get_AssemblyIdentity();
        virtual uint64_t get_CurrentSize_c4d8b3e65a826a34();
        System::Object* get_DomainIdentity();
        virtual uint64_t get_MaximumSize_bf42d10b1bbb7a25();
        IsolatedStorageScope get_Scope();
        virtual int64_t get_AvailableFreeSpace_18d9a80c1eecd236();
        virtual int64_t get_Quota_3816cb7ba1196819();
        virtual int64_t get_UsedSize_673e5c0d6520fff9();
        virtual char16_t get_SeparatorExternal_f44feaab38d1f088();
        virtual char16_t get_SeparatorInternal_58b8fdacb2da10bf();
        
    };
    
}}}
namespace System { namespace Reflection {
    
    struct MANAGED_API Binder : public virtual System::Object{
        static Binder* default_binder;
        
        Binder();
        void constructor();
        static void static_constructor();
        virtual FieldInfo* BindToField_221370eceb50f96a(BindingFlags bindingAttr, cli::array<FieldInfo*>* match, System::Object* value, System::Globalization::CultureInfo* culture) = 0;
        virtual MethodBase* BindToMethod_c4d067cd0e5ef7a(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* names, System::Object* state) = 0;
        virtual System::Object* ChangeType_330506257d259909(System::Object* value, System::Type* type, System::Globalization::CultureInfo* culture) = 0;
        virtual void ReorderArgumentArray_b525b590b5921f82(cli::array<System::Object*>* args, System::Object* state) = 0;
        virtual MethodBase* SelectMethod_3e1ca0f0e362534f(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) = 0;
        virtual PropertyInfo* SelectProperty_d299ada322143a6(BindingFlags bindingAttr, cli::array<PropertyInfo*>* match, System::Type* returnType, cli::array<System::Type*>* indexes, cli::array<ParameterModifier>* modifiers) = 0;
        static bool ConvertArgs(Binder* binder, cli::array<System::Object*>* args, cli::array<ParameterInfo*>* pinfo, System::Globalization::CultureInfo* culture);
        static int32_t GetDerivedLevel(System::Type* type);
        static MethodBase* FindMostDerivedMatch(cli::array<MethodBase*>* match);
        static Binder* get_DefaultBinder();
        
    };
    
    
    struct MANAGED_API Assembly : public virtual System::Object, public virtual ICustomAttributeProvider, public virtual System::Runtime::InteropServices::_Assembly, public virtual System::Security::IEvidenceFactory, public virtual System::Runtime::Serialization::ISerializable{
        void* _mono_assembly;
        ResolveEventHolder* resolve_event_holder;
        System::Security::Policy::Evidence* _evidence;
        System::Security::PermissionSet* _minimum;
        System::Security::PermissionSet* _optional;
        System::Security::PermissionSet* _refuse;
        System::Security::PermissionSet* _granted;
        System::Security::PermissionSet* _denied;
        bool fromByteArray;
        System::String* assemblyName;
        
        void constructor();
        System::String* get_code_base(bool escaped);
        System::String* get_fullname();
        System::String* get_location();
        System::String* InternalImageRuntimeVersion();
        System::String* GetCodeBase(bool escaped);
        System::Security::Policy::Evidence* UnprotectedGetEvidence();
        bool get_global_assembly_cache();
        virtual void GetObjectData_6b61218d0e15f122(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual bool IsDefined_42f87feac494b032(System::Type* attributeType, bool inherit);
        virtual cli::array<System::Object*>* GetCustomAttributes_887544480e7ebe63(bool inherit);
        virtual cli::array<System::Object*>* GetCustomAttributes_30a143c7dfd48919(System::Type* attributeType, bool inherit);
        System::Object* GetFilesInternal(System::String* name, bool getResourceModules);
        virtual cli::array<System::IO::FileStream*>* GetFiles_4f893757e6a7c4b6();
        virtual cli::array<System::IO::FileStream*>* GetFiles_4b160752c34b70d5(bool getResourceModules);
        virtual System::IO::FileStream* GetFile_321baf5b87b86022(System::String* name);
        void* GetManifestResourceInternal(System::String* name, int32_t size, Module* module);
        virtual System::IO::Stream* GetManifestResourceStream_b395b331908084e(System::String* name);
        virtual System::IO::Stream* GetManifestResourceStream_6ad572412eedcffd(System::Type* type, System::String* name);
        virtual cli::array<System::Type*>* GetTypes_7d5d1df2c0939ee2(bool exportedOnly);
        virtual cli::array<System::Type*>* GetTypes_596eee17684f649();
        virtual cli::array<System::Type*>* GetExportedTypes_4dc21035aef13039();
        virtual System::Type* GetType_cce33183e0cab1ba(System::String* name, bool throwOnError);
        virtual System::Type* GetType_99cbfcc4e094eb08(System::String* name);
        System::Type* InternalGetType(Module* module, System::String* name, bool throwOnError, bool ignoreCase);
        static void InternalGetAssemblyName(System::String* assemblyFile, AssemblyName* aname);
        static void FillName(Assembly* ass, AssemblyName* aname);
        virtual AssemblyName* GetName_7bcd94721bb29265(bool copiedName);
        virtual AssemblyName* GetName_7088a38b93d0dcc5();
        virtual AssemblyName* UnprotectedGetName_b11b135b2412c023();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static System::String* CreateQualifiedName(System::String* assemblyName, System::String* typeName);
        static Assembly* GetAssembly(System::Type* type);
        static Assembly* GetEntryAssembly();
        Assembly* GetSatelliteAssemblyNoThrow(System::Globalization::CultureInfo* culture, System::Version* version);
        Assembly* GetSatelliteAssembly(System::Globalization::CultureInfo* culture, System::Version* version, bool throwOnError);
        static Assembly* LoadFrom(System::String* assemblyFile, bool refonly);
        static Assembly* LoadFrom2(System::String* assemblyFile);
        static Assembly* LoadFrom3(System::String* assemblyFile, System::Security::Policy::Evidence* securityEvidence);
        static Assembly* LoadFrom4(System::String* assemblyFile, System::Security::Policy::Evidence* securityEvidence, cli::array<unsigned char>* hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        static Assembly* LoadFrom5(System::String* assemblyFile, cli::array<unsigned char>* hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        static Assembly* UnsafeLoadFrom(System::String* assemblyFile);
        static Assembly* LoadFile(System::String* path, System::Security::Policy::Evidence* securityEvidence);
        static Assembly* LoadFile2(System::String* path);
        static Assembly* Load(System::String* assemblyString);
        static Assembly* Load2(System::String* assemblyString, System::Security::Policy::Evidence* assemblySecurity);
        static Assembly* Load3(AssemblyName* assemblyRef);
        static Assembly* Load4(AssemblyName* assemblyRef, System::Security::Policy::Evidence* assemblySecurity);
        static Assembly* Load5(cli::array<unsigned char>* rawAssembly);
        static Assembly* Load6(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore);
        static Assembly* Load7(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, System::Security::Policy::Evidence* securityEvidence);
        static Assembly* Load8(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, System::Security::SecurityContextSource securityContextSource);
        static Assembly* ReflectionOnlyLoad(cli::array<unsigned char>* rawAssembly);
        static Assembly* ReflectionOnlyLoad2(System::String* assemblyString);
        static Assembly* ReflectionOnlyLoadFrom(System::String* assemblyFile);
        static Assembly* LoadWithPartialName(System::String* partialName);
        Module* LoadModule(System::String* moduleName, cli::array<unsigned char>* rawModule);
        virtual Module* LoadModule_87df81afaaa787f6(System::String* moduleName, cli::array<unsigned char>* rawModule, cli::array<unsigned char>* rawSymbolStore);
        static Assembly* load_with_partial_name(System::String* name, System::Security::Policy::Evidence* e);
        static Assembly* LoadWithPartialName2(System::String* partialName, System::Security::Policy::Evidence* securityEvidence);
        static Assembly* LoadWithPartialName3(System::String* partialName, System::Security::Policy::Evidence* securityEvidence, bool oldBehavior);
        System::Object* CreateInstance(System::String* typeName);
        System::Object* CreateInstance2(System::String* typeName, bool ignoreCase);
        virtual System::Object* CreateInstance_d07d9768930f5848(System::String* typeName, bool ignoreCase, BindingFlags bindingAttr, Binder* binder, cli::array<System::Object*>* args, System::Globalization::CultureInfo* culture, cli::array<System::Object*>* activationAttributes);
        cli::array<Module*>* GetLoadedModules();
        cli::array<Module*>* GetModules();
        virtual cli::array<Module*>* GetModulesInternal_ea568dcc02539ffb();
        cli::array<System::String*>* GetNamespaces();
        virtual cli::array<System::String*>* GetManifestResourceNames_d63b24d819c7a44d();
        static Assembly* GetExecutingAssembly();
        static Assembly* GetCallingAssembly();
        static cli::array<AssemblyName*>* GetReferencedAssemblies(Assembly* module);
        bool GetManifestResourceInfoInternal(System::String* name, ManifestResourceInfo* info);
        virtual ManifestResourceInfo* GetManifestResourceInfo_2cc36efdd5a68bdc(System::String* resourceName);
        static int32_t MonoDebugger_GetMethodToken(MethodBase* method);
        virtual Module* GetManifestModule_e233b7576740b3d7();
        Module* GetManifestModuleInternal();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void Resolve();
        static bool LoadPermissions(Assembly* a, void* minimum, int32_t minLength, void* optional, int32_t optLength, void* refused, int32_t refLength);
        void LoadAssemblyPermissions();
        static System::Exception* CreateNIE();
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_b7ccb5bba4dfdbe4();
        virtual System::Type* GetType_30e9b2dcc4956479(System::String* name, bool throwOnError, bool ignoreCase);
        virtual Module* GetModule_d3e09c815c6ebd46(System::String* name);
        virtual cli::array<AssemblyName*>* GetReferencedAssemblies_c967ce8a0efd4c58();
        virtual cli::array<Module*>* GetModules_1ce70abfc6e0d050(bool getResourceModules);
        virtual cli::array<Module*>* GetLoadedModules_db6b585bebc1ac2e(bool getResourceModules);
        virtual Assembly* GetSatelliteAssembly_995bfc41ec1f61b8(System::Globalization::CultureInfo* culture);
        virtual Assembly* GetSatelliteAssembly_22d0b12d929a333c(System::Globalization::CultureInfo* culture, System::Version* version);
        static bool op_Equality(Assembly* left, Assembly* right);
        static bool op_Inequality(Assembly* left, Assembly* right);
        virtual System::String* get_CodeBase_5e12949b795c9d90();
        virtual System::String* get_EscapedCodeBase_2cc20f2402d62395();
        virtual System::String* get_FullName_abd52da7f47cce07();
        virtual MethodInfo* get_EntryPoint_63c1ef73cc6df57c();
        virtual System::Security::Policy::Evidence* get_Evidence_4f4a60b88ffe9545();
        void set_FromByteArray(bool value);
        virtual System::String* get_Location_3a7779d7eb72fa50();
        virtual System::String* get_ImageRuntimeVersion_3e077bddac126c9();
        virtual int64_t get_HostContext_132922c4e02b90db();
        virtual bool get_ReflectionOnly_b2af717d1dca672();
        System::Security::PermissionSet* get_GrantedPermissionSet();
        System::Security::PermissionSet* get_DeniedPermissionSet();
        virtual System::Security::PermissionSet* get_PermissionSet_8b84f92b47b6d274();
        virtual System::Security::SecurityRuleSet get_SecurityRuleSet_7821afdcdf547360();
        bool get_IsFullyTrusted();
        virtual Module* get_ManifestModule_238a73903fb58278();
        virtual bool get_GlobalAssemblyCache_db80d4f5ee2824e7();
        virtual bool get_IsDynamic_a494841e91ae4bbb();
        void add_ModuleResolve(ModuleResolveEventHandler* value);
        void remove_ModuleResolve(ModuleResolveEventHandler* value);
        
        virtual void GetObjectData_ae6d7ff8b3644797(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
        virtual bool IsDefined_8c9afbc5cd24386a(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_24af6ad180c3735(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_5ff69fa11191e1b5(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::IO::FileStream*>* GetFiles_6c517f2273715467() override;
        virtual cli::array<System::IO::FileStream*>* GetFiles_83c5197d3be9ba99(bool getResourceModules) override;
        virtual System::IO::FileStream* GetFile_6615c487c2ac205(System::String* name) override;
        virtual System::IO::Stream* GetManifestResourceStream_c4c4dd7ea9b411f6(System::String* name) override;
        virtual System::IO::Stream* GetManifestResourceStream_20b4219e40c67fdc(System::Type* type, System::String* name) override;
        virtual cli::array<System::Type*>* GetTypes_ab49a096d38726a7() override;
        virtual cli::array<System::Type*>* GetExportedTypes_ee0adeac46d6ab34() override;
        virtual System::Type* GetType_d55779600806b0d2(System::String* name, bool throwOnError) override;
        virtual System::Type* GetType_7162ad856792a116(System::String* name) override;
        virtual AssemblyName* GetName_7ef5b4b80c448759(bool copiedName) override;
        virtual AssemblyName* GetName_62e3f693cd2ffb23() override;
        virtual System::String* ToString_3f4baa3ff40b0198() override;
        virtual Module* LoadModule_f73be9448f7656b4(System::String* moduleName, cli::array<unsigned char>* rawModule) override;
        virtual Module* LoadModule_6024c0019defdb86(System::String* moduleName, cli::array<unsigned char>* rawModule, cli::array<unsigned char>* rawSymbolStore) override;
        virtual System::Object* CreateInstance_2b8fb34696040934(System::String* typeName) override;
        virtual System::Object* CreateInstance_9c79205ac6f0875a(System::String* typeName, bool ignoreCase) override;
        virtual System::Object* CreateInstance_86d37a2e814be153(System::String* typeName, bool ignoreCase, BindingFlags bindingAttr, Binder* binder, cli::array<System::Object*>* args, System::Globalization::CultureInfo* culture, cli::array<System::Object*>* activationAttributes) override;
        virtual cli::array<Module*>* GetLoadedModules_7e45bd270ba0508e() override;
        virtual cli::array<Module*>* GetModules_6cc1dd291a7a622() override;
        virtual cli::array<System::String*>* GetManifestResourceNames_a76da541e39a6687() override;
        virtual ManifestResourceInfo* GetManifestResourceInfo_bcc15dc0035eec0a(System::String* resourceName) override;
        virtual int32_t GetHashCode_20a08aead0d6820a() override;
        virtual bool Equals_56ec287b8d40063b(System::Object* o) override;
        virtual System::Type* GetType_4f7329f347090d49(System::String* name, bool throwOnError, bool ignoreCase) override;
        virtual Module* GetModule_a7906997a13617a7(System::String* name) override;
        virtual cli::array<AssemblyName*>* GetReferencedAssemblies_1e24baa3c5838f22() override;
        virtual cli::array<Module*>* GetModules_70286f2f0a1cfacc(bool getResourceModules) override;
        virtual cli::array<Module*>* GetLoadedModules_f8ba3198d02efd9f(bool getResourceModules) override;
        virtual Assembly* GetSatelliteAssembly_ba2feb006a3fcaa4(System::Globalization::CultureInfo* culture) override;
        virtual Assembly* GetSatelliteAssembly_f069f89f4969cda7(System::Globalization::CultureInfo* culture, System::Version* version) override;
        virtual System::String* get_CodeBase_dc45d01428f64731() override;
        virtual System::String* get_EscapedCodeBase_14607f27139752e7() override;
        virtual System::String* get_FullName_f0e20ee2bbdaa1a9() override;
        virtual MethodInfo* get_EntryPoint_2f6c2f38d51e8a4a() override;
        virtual System::Security::Policy::Evidence* get_Evidence_d7f857b710104664() override;
        virtual System::Security::Policy::Evidence* get_Evidence_f1eadb7cf64a7592() override;
        virtual System::String* get_Location_b64a656d361bdd61() override;
        virtual bool get_GlobalAssemblyCache_dace09e2d2af9909() override;
        virtual void add_ModuleResolve_d5a251350234170b(ModuleResolveEventHandler* value) override;
        virtual void remove_ModuleResolve_e6556aa4bfb257ed(ModuleResolveEventHandler* value) override;
        virtual System::Type* GetType_c52017a01d9d8f63() override;
    };
    
    
    struct MANAGED_API EventInfo : public virtual MemberInfo, public virtual System::Runtime::InteropServices::_EventInfo{
        AddEventAdapter* cached_add_event;
        
        void constructor();
        virtual void AddEventHandler_ad88f4bed9d5ff3c(System::Object* target, System::Delegate* handler);
        MethodInfo* GetAddMethod();
        virtual MethodInfo* GetAddMethod_e6ed2f5f0e24f59f(bool nonPublic) = 0;
        MethodInfo* GetRaiseMethod();
        virtual MethodInfo* GetRaiseMethod_da2f94f17ce18705(bool nonPublic) = 0;
        MethodInfo* GetRemoveMethod();
        virtual MethodInfo* GetRemoveMethod_2709ba07e73fded4(bool nonPublic) = 0;
        virtual cli::array<MethodInfo*>* GetOtherMethods_cea105c0bef756da(bool nonPublic);
        cli::array<MethodInfo*>* GetOtherMethods2();
        virtual void RemoveEventHandler_3607721c5f918cf8(System::Object* target, System::Delegate* handler);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        template<class T, class D>
        static void AddEventFrame_2(AddEvent<T, D>* addEvent, System::Object* obj, System::Object* dele);
        template<class D>
        static void StaticAddEventAdapterFrame_1(StaticAddEvent<D>* addEvent, System::Object* obj, System::Object* dele);
        static AddEventAdapter* CreateAddEventDelegate(MethodInfo* method);
        static bool op_Equality2(EventInfo* left, EventInfo* right);
        static bool op_Inequality2(EventInfo* left, EventInfo* right);
        virtual EventAttributes get_Attributes_3412d62533ff880() = 0;
        virtual System::Type* get_EventHandlerType_814bf5fc85dc0978();
        virtual bool get_IsMulticast_acc4249946776471();
        bool get_IsSpecialName();
        virtual MemberTypes get_MemberType_cd521d320810c98f() override;
        
        virtual void AddEventHandler_43d8c94497c03223(System::Object* target, System::Delegate* handler) override;
        virtual MethodInfo* GetAddMethod_b8ad5c9a0997b299() override;
        virtual MethodInfo* GetAddMethod_603de97606b6f9ba(bool nonPublic) override;
        virtual MethodInfo* GetRaiseMethod_b646ee39c81574e3() override;
        virtual MethodInfo* GetRaiseMethod_6b206823316c0c3(bool nonPublic) override;
        virtual MethodInfo* GetRemoveMethod_5c784be17c5066d3() override;
        virtual MethodInfo* GetRemoveMethod_da0b684fb4d4c4a0(bool nonPublic) override;
        virtual void RemoveEventHandler_20b46eba63f124c5(System::Object* target, System::Delegate* handler) override;
        virtual bool Equals_74589a42728bf90e(System::Object* obj) override;
        virtual int32_t GetHashCode_b17eaacfd022126a() override;
        virtual void GetIDsOfNames_23802a60f491840e(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_f3ce2c87f102b967(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_fa070d4fce2714f5(uint32_t pcTInfo) override;
        virtual void Invoke_8ea6ee7f8b34ed83(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual EventAttributes get_Attributes_91126e6e9bda9278() override;
        virtual System::Type* get_EventHandlerType_394adbc6331a2c50() override;
        virtual bool get_IsMulticast_f3825bb24df5079f() override;
        virtual bool get_IsSpecialName_7600c5d3a63b1be9() override;
        virtual MemberTypes get_MemberType_7f92432e8d28a37() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_fa63d0ff32ae5fc8(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_d3fde144b6b8ae22(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetType_5dcc5daa0b76d62() override;
        virtual bool IsDefined_7f2e7c95c1a2697(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_7bb73a9f3918b46f() override;
        virtual System::Type* get_DeclaringType_b190790d6bb5c6f8() override;
        virtual System::String* get_Name_34bcf56a8cc37ed8() override;
        virtual System::Type* get_ReflectedType_324d464fdf876c3() override;
    };
    
    
    struct MANAGED_API FieldInfo : public virtual MemberInfo, public virtual System::Runtime::InteropServices::_FieldInfo{
        
        void constructor();
        virtual System::Object* GetValue_57ad13b528e8b8a5(System::Object* obj) = 0;
        virtual void SetValue_b73df766c23f1507(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, System::Globalization::CultureInfo* culture) = 0;
        void SetValue2(System::Object* obj, System::Object* value);
        static FieldInfo* internal_from_handle_type(void* field_handle, void* type_handle);
        static FieldInfo* GetFieldFromHandle(System::RuntimeFieldHandle handle);
        static FieldInfo* GetFieldFromHandle2(System::RuntimeFieldHandle handle, System::RuntimeTypeHandle declaringType);
        virtual int32_t GetFieldOffset_309c846c3e72bf1();
        virtual System::Object* GetValueDirect_fe94b812363b7da5(System::TypedReference obj);
        virtual void SetValueDirect_6c2dbfe9e649b416(System::TypedReference obj, System::Object* value);
        Emit::UnmanagedMarshal* GetUnmanagedMarshal();
        cli::array<System::Object*>* GetPseudoCustomAttributes();
        cli::array<System::Type*>* GetTypeModifiers(bool optional);
        virtual cli::array<System::Type*>* GetOptionalCustomModifiers_f176d0d77551c108();
        virtual cli::array<System::Type*>* GetRequiredCustomModifiers_66f99b4733e13865();
        virtual System::Object* GetRawConstantValue_6b30cc96112d2961();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static bool op_Equality2(FieldInfo* left, FieldInfo* right);
        static bool op_Inequality2(FieldInfo* left, FieldInfo* right);
        virtual FieldAttributes get_Attributes_ecc2fe2071b9c047() = 0;
        virtual System::RuntimeFieldHandle get_FieldHandle_43fbd13b33ef15a8() = 0;
        virtual System::Type* get_FieldType_1dab4079098d7fff() = 0;
        virtual MemberTypes get_MemberType_cd521d320810c98f() override;
        bool get_IsLiteral();
        bool get_IsStatic();
        bool get_IsInitOnly();
        bool get_IsPublic();
        bool get_IsPrivate();
        bool get_IsFamily();
        bool get_IsAssembly();
        bool get_IsFamilyAndAssembly();
        bool get_IsFamilyOrAssembly();
        bool get_IsPinvokeImpl();
        bool get_IsSpecialName();
        bool get_IsNotSerialized();
        virtual Emit::UnmanagedMarshal* get_UMarshal_dd8c1dc6c2728d2();
        virtual bool get_IsSecurityCritical_d5bc9148633db2f2();
        virtual bool get_IsSecuritySafeCritical_ad2590022e00bce();
        virtual bool get_IsSecurityTransparent_33c3723407cb30a9();
        
        virtual System::Object* GetValue_95ea295e93d9c205(System::Object* obj) override;
        virtual void SetValue_14cd561b90357660(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, System::Globalization::CultureInfo* culture) override;
        virtual void SetValue_bff43279853da815(System::Object* obj, System::Object* value) override;
        virtual System::Object* GetValueDirect_667c004c43af2df7(System::TypedReference obj) override;
        virtual void SetValueDirect_a9c4f4eec2bc7475(System::TypedReference obj, System::Object* value) override;
        virtual bool Equals_9460c999c7a56206(System::Object* obj) override;
        virtual int32_t GetHashCode_5a649ad5c5c43cca() override;
        virtual void GetIDsOfNames_bc4e4af5039b7c20(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_8134a221284f4ba5(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_81bba0bef18b5824(uint32_t pcTInfo) override;
        virtual void Invoke_ef3e075c01706822(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual FieldAttributes get_Attributes_adffe146267d1214() override;
        virtual System::RuntimeFieldHandle get_FieldHandle_1992b90454f55bf5() override;
        virtual System::Type* get_FieldType_95a03f2dcf5511a9() override;
        virtual MemberTypes get_MemberType_dc52cdbb2693a23a() override;
        virtual bool get_IsLiteral_28466bffcbcd522() override;
        virtual bool get_IsStatic_a14ccf83b632c9b4() override;
        virtual bool get_IsInitOnly_92c94432c489bd06() override;
        virtual bool get_IsPublic_de3389d9f6383193() override;
        virtual bool get_IsPrivate_eafc38c3d2a23aaa() override;
        virtual bool get_IsFamily_7a1a19e876496230() override;
        virtual bool get_IsAssembly_7b632c06d77bf7f9() override;
        virtual bool get_IsFamilyAndAssembly_863e9b0f875c7704() override;
        virtual bool get_IsFamilyOrAssembly_19cc6861b480a8ed() override;
        virtual bool get_IsPinvokeImpl_db85c58b7a196918() override;
        virtual bool get_IsSpecialName_eaaed4f25dea5d2f() override;
        virtual bool get_IsNotSerialized_24ecbaffa59651c8() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_575e5069ebfca34f(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_5acdc1cb26d1261f(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetType_3c93304fd89a812b() override;
        virtual bool IsDefined_d05f61558bec5ed2(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_f22c3c4f8be6702d() override;
        virtual System::Type* get_DeclaringType_c4f8b59fa02e7a62() override;
        virtual System::String* get_Name_1e5ba9be5de44c4a() override;
        virtual System::Type* get_ReflectedType_127893312bd5a2c0() override;
    };
    
    
    struct MANAGED_API MonoMethod : public virtual MethodInfo, public virtual System::Runtime::Serialization::ISerializable{
        void* mhandle;
        System::String* name;
        System::Type* reftype;
        
        void constructor();
        void constructor(System::RuntimeMethodHandle mhandle);
        static System::String* get_name(MethodBase* method);
        static MonoMethod* get_base_method(MonoMethod* method, bool definition);
        virtual MethodInfo* GetBaseDefinition_b00937f21f1a7556() override;
        virtual MethodInfo* GetBaseMethod_15ff4b8595f9b09() override;
        virtual MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        System::Object* InternalInvoke(System::Object* obj, cli::array<System::Object*>* parameters, System::Exception* exc);
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        static System::Runtime::InteropServices::DllImportAttribute* GetDllImportAttribute(void* mhandle);
        cli::array<System::Object*>* GetPseudoCustomAttributes();
        static bool ShouldPrintFullName(System::Type* type);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual MethodInfo* MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* methodInstantiation) override;
        MethodInfo* MakeGenericMethod_impl(cli::array<System::Type*>* types);
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958() override;
        MethodInfo* GetGenericMethodDefinition_impl();
        virtual MethodInfo* GetGenericMethodDefinition_298ff0fcf1d6e37f() override;
        virtual MethodBody* GetMethodBody_3bb8bd5a6a55236() override;
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        virtual ParameterInfo* get_ReturnParameter_d8c8b72c8a40767c() override;
        virtual System::Type* get_ReturnType_832339e848f448fe() override;
        virtual ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual CallingConventions get_CallingConvention_309cf574b58a053a() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual bool get_IsGenericMethodDefinition_cce889be2a806b0f() override;
        virtual bool get_IsGenericMethod_7e509e51546ea990() override;
        virtual bool get_ContainsGenericParameters_113614fa92731376() override;
        
        virtual System::String* ToString_344d714047f59070() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Type* get_ReturnType_4452cb3548281551() override;
        virtual CallingConventions get_CallingConvention_1d365159f80ff2b() override;
    };
    
    
    struct MANAGED_API MonoCMethod : public virtual ConstructorInfo, public virtual System::Runtime::Serialization::ISerializable{
        void* mhandle;
        System::String* name;
        System::Type* reftype;
        
        void constructor();
        virtual MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        System::Object* InternalInvoke(System::Object* obj, cli::array<System::Object*>* parameters, System::Exception* exc);
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Object* Invoke_d9ede2dfc2f2dd62(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual MethodBody* GetMethodBody_3bb8bd5a6a55236() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual CallingConventions get_CallingConvention_309cf574b58a053a() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
        virtual System::String* ToString_a95e215a60192892() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual CallingConventions get_CallingConvention_a50132e872765544() override;
    };
    
    
    struct MANAGED_API Module : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual ICustomAttributeProvider, public virtual System::Runtime::InteropServices::_Module{
        static constexpr BindingFlags defaultBindingFlags = (System::Reflection::BindingFlags)28L;
        static TypeFilter* FilterTypeName;
        static TypeFilter* FilterTypeNameIgnoreCase;
        void* _impl;
        Assembly* assembly;
        System::String* fqname;
        System::String* name;
        System::String* scopename;
        bool is_resource;
        int32_t token;
        
        Module();
        static void static_constructor();
        void constructor();
        static int32_t get_MetadataToken(Module* module);
        static int32_t GetMDStreamVersion(void* module_handle);
        FieldInfo* GetField(System::String* name);
        cli::array<FieldInfo*>* GetFields();
        MethodInfo* GetMethod(System::String* name);
        MethodInfo* GetMethod2(System::String* name, cli::array<System::Type*>* types);
        MethodInfo* GetMethod3(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers);
        cli::array<MethodInfo*>* GetMethods();
        virtual void GetObjectData_e90fa704d41e9612(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Type* GetType_a66b4e15451215(System::String* className);
        virtual System::Type* GetType_2d1dcb4032b0487e(System::String* className, bool ignoreCase);
        cli::array<System::Type*>* InternalGetTypes();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Exception* resolve_token_exception(int32_t metadataToken, ResolveTokenError error, System::String* tokenType);
        cli::array<void*>* ptrs_from_types(cli::array<System::Type*>* types);
        FieldInfo* ResolveField(int32_t metadataToken);
        MemberInfo* ResolveMember(int32_t metadataToken);
        MethodBase* ResolveMethod(int32_t metadataToken);
        System::Type* ResolveType(int32_t metadataToken);
        static System::Type* MonoDebugger_ResolveType(Module* module, int32_t token);
        static System::Guid Mono_GetGuid(Module* module);
        virtual System::Guid GetModuleVersionId_c8f7394bf9778713();
        static bool filter_by_type_name(System::Type* m, System::Object* filterCriteria);
        static bool filter_by_type_name_ignore_case(System::Type* m, System::Object* filterCriteria);
        void* GetHINSTANCE();
        System::String* GetGuidInternal();
        System::Type* GetGlobalType();
        static void* ResolveTypeToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error);
        static void* ResolveMethodToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error);
        static void* ResolveFieldToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error);
        static System::String* ResolveStringToken(void* module, int32_t token, ResolveTokenError error);
        static MemberInfo* ResolveMemberToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error);
        static cli::array<unsigned char>* ResolveSignature(void* module, int32_t metadataToken, ResolveTokenError error);
        static void GetPEKind(void* module, PortableExecutableKinds peKind, ImageFileMachine machine);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static System::Exception* CreateNIE();
        virtual bool IsResource_27dec1ebb40006c6();
        virtual cli::array<System::Type*>* FindTypes_fd05c708caa859b8(TypeFilter* filter, System::Object* filterCriteria);
        virtual cli::array<System::Object*>* GetCustomAttributes_60f12c5b82d89770(bool inherit);
        virtual cli::array<System::Object*>* GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit);
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_efa981070afbf622();
        virtual FieldInfo* GetField_41336984e4f8fc62(System::String* name, BindingFlags bindingAttr);
        virtual cli::array<FieldInfo*>* GetFields_676a5dd50d936280(BindingFlags bindingFlags);
        virtual MethodInfo* GetMethodImpl_6896a740547de21d(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers);
        virtual cli::array<MethodInfo*>* GetMethods_df7587a505f60ad1(BindingFlags bindingFlags);
        virtual void GetPEKind_7f6df4eff35de4ca(PortableExecutableKinds peKind, ImageFileMachine machine);
        virtual System::Type* GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase);
        virtual bool IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit);
        virtual FieldInfo* ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments);
        virtual MemberInfo* ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments);
        virtual MethodBase* ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments);
        virtual cli::array<unsigned char>* ResolveSignature_a46b44b280a2cd11(int32_t metadataToken);
        virtual System::String* ResolveString_f0f214b35440d5e7(int32_t metadataToken);
        virtual System::Type* ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments);
        virtual System::Security::Cryptography::X509Certificates::X509Certificate2* GetSignerCertificate_9251eb29d4d8fa27();
        virtual cli::array<System::Type*>* GetTypes_a0a49ca31fb27210();
        static bool op_Equality(Module* left, Module* right);
        static bool op_Inequality(Module* left, Module* right);
        System::ModuleHandle get_ModuleHandle();
        System::Guid get_MvId();
        virtual Assembly* get_Assembly_dbea84123403c0aa();
        virtual System::String* get_Name_51eff21286003cfa();
        virtual System::String* get_ScopeName_da7d7aa6d0cd103f();
        virtual int32_t get_MDStreamVersion_8976919ee80930d7();
        virtual System::Guid get_ModuleVersionId_d7f4c95bdb0ad1b2();
        virtual System::String* get_FullyQualifiedName_ae33b8f6fc78fb8f();
        virtual int32_t get_MetadataToken_a9fc5f43a9908cd0();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual void GetIDsOfNames_21b152fbff43d289(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_260aa4f867fd6fd5(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_c80374543020238f(uint32_t pcTInfo) override;
        virtual void Invoke_686f3a72f7a8e22(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
    };
    
    
    struct MANAGED_API PropertyInfo : public virtual MemberInfo, public virtual System::Runtime::InteropServices::_PropertyInfo{
        
        void constructor();
        cli::array<MethodInfo*>* GetAccessors();
        virtual cli::array<MethodInfo*>* GetAccessors_9a7eb6d477c42a6d(bool nonPublic) = 0;
        MethodInfo* GetGetMethod();
        virtual MethodInfo* GetGetMethod_598f563fd3755017(bool nonPublic) = 0;
        virtual cli::array<ParameterInfo*>* GetIndexParameters_66437e9b713ac629() = 0;
        MethodInfo* GetSetMethod();
        virtual MethodInfo* GetSetMethod_8896cb22c4f8d900(bool nonPublic) = 0;
        virtual System::Object* GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index);
        virtual System::Object* GetValue_e428a2cef74e332d(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) = 0;
        virtual void SetValue_1695ad6de909516e(System::Object* obj, System::Object* value, cli::array<System::Object*>* index);
        virtual void SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) = 0;
        virtual cli::array<System::Type*>* GetOptionalCustomModifiers_f21d0b942de3b4e();
        virtual cli::array<System::Type*>* GetRequiredCustomModifiers_81237c6c21cb723();
        static System::NotImplementedException* CreateNIE();
        virtual System::Object* GetConstantValue_175a0b35c21225ba();
        virtual System::Object* GetRawConstantValue_dd88d19bf0ed90e4();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static bool op_Equality2(PropertyInfo* left, PropertyInfo* right);
        static bool op_Inequality2(PropertyInfo* left, PropertyInfo* right);
        virtual PropertyAttributes get_Attributes_44d275d722218b81() = 0;
        virtual bool get_CanRead_f4dae9b567f6ce33() = 0;
        virtual bool get_CanWrite_a9c71933951c9826() = 0;
        bool get_IsSpecialName();
        virtual MemberTypes get_MemberType_cd521d320810c98f() override;
        virtual System::Type* get_PropertyType_68b4b04678fe4f8a() = 0;
        
        virtual cli::array<MethodInfo*>* GetAccessors_da9e2ca6e4dd3482() override;
        virtual cli::array<MethodInfo*>* GetAccessors_59a0bfdaedb007c(bool nonPublic) override;
        virtual MethodInfo* GetGetMethod_22dbc42ee812754c() override;
        virtual MethodInfo* GetGetMethod_6968d1fbf893caf2(bool nonPublic) override;
        virtual cli::array<ParameterInfo*>* GetIndexParameters_14483f59bc20265() override;
        virtual MethodInfo* GetSetMethod_ab92dfa716a7aa22() override;
        virtual MethodInfo* GetSetMethod_bc66033ddce9efa0(bool nonPublic) override;
        virtual System::Object* GetValue_2c0ea8f469169d57(System::Object* obj, cli::array<System::Object*>* index) override;
        virtual System::Object* GetValue_5c4287abeb0e7d6e(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual void SetValue_42dc5b3a16b3868c(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) override;
        virtual void SetValue_6668f5b0d61ae93b(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual bool Equals_35205ed1d0d24667(System::Object* obj) override;
        virtual int32_t GetHashCode_f63a3941a1dc75bc() override;
        virtual void GetIDsOfNames_543d0db39ba3c944(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_a3cbba6cae9ec8b4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_87d5dfef26ae0dd2(uint32_t pcTInfo) override;
        virtual void Invoke_2658e83a6cb776b7(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual PropertyAttributes get_Attributes_1bea9714c54419aa() override;
        virtual bool get_CanRead_ef8e9b1025a3b21a() override;
        virtual bool get_CanWrite_375056fcc54af0b8() override;
        virtual bool get_IsSpecialName_136ed05fe7cb7256() override;
        virtual MemberTypes get_MemberType_f062e4acbf7ce28d() override;
        virtual System::Type* get_PropertyType_31b54c84f8684bd3() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_eefb51d8f72617fa(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_855d2e1478057365(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetType_adcc73cb09269a4b() override;
        virtual bool IsDefined_e028345db151e511(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_23ebaa63b8f17cf6() override;
        virtual System::Type* get_DeclaringType_c6040d00ca0e5f1a() override;
        virtual System::String* get_Name_2ec41f95ff7a8b17() override;
        virtual System::Type* get_ReflectedType_c368bf8f01d9ffdc() override;
    };
    
    
    struct MANAGED_API LocalVariableInfo : public virtual System::Object{
        System::Type* type;
        bool is_pinned;
        uint16_t position;
        
        void constructor();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool get_IsPinned_494a31d10daaf415();
        virtual int32_t get_LocalIndex_5862e4748cbc9231();
        virtual System::Type* get_LocalType_6f444539e4836b2c();
        
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API DerivedType : public virtual System::Type{
        System::Type* elementType;
        
        void constructor(System::Type* elementType);
        static void create_unmanaged_type(System::Type* type);
        virtual System::String* FormatName_c623ebab7e1e1aea(System::String* elementName) = 0;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual System::Reflection::EventInfo* GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual System::Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual System::Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) override;
        virtual bool IsInstanceOfType_bd709d8c55b4333d(System::Object* o) override;
        virtual bool IsAssignableFrom_e3aa32d778e63a90(System::Type* c) override;
        virtual System::Type* MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual bool get_ContainsGenericParameters_19598881dd690ad3() override;
        virtual System::Reflection::GenericParameterAttributes get_GenericParameterAttributes_b31b8b8f1d79d815() override;
        virtual System::Runtime::InteropServices::StructLayoutAttribute* get_StructLayoutAttribute_c8846f98114193d0() override;
        virtual System::Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        
    };
    
}}}
namespace System { namespace Resources {
    
    struct MANAGED_API ResourceSet : public virtual System::Object, public virtual System::IDisposable, public virtual System::Collections::IEnumerable{
        IResourceReader* Reader;
        System::Collections::Hashtable* Table;
        bool resources_read;
        System::Collections::Hashtable* table_nocase;
        
        void constructor();
        void constructor(IResourceReader* reader);
        void constructor(System::IO::Stream* stream);
        void constructor(System::IO::UnmanagedMemoryStream* stream);
        void constructor(System::String* fileName);
        virtual void Close_aae27c392ca1f5fd();
        void Dispose();
        virtual void Dispose_7a4cf41303887492(bool disposing);
        virtual System::Type* GetDefaultReader_8dd3156ec8ecd598();
        virtual System::Type* GetDefaultWriter_d422ec36e345a192();
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_511466a1e09ff2();
        System::Collections::IEnumerator* GetEnumerator2();
        System::Object* GetObjectInternal(System::String* name, bool ignoreCase);
        virtual System::Object* GetObject_2d3d6866d6caab0d(System::String* name);
        virtual System::Object* GetObject_7df952fd6236c0e7(System::String* name, bool ignoreCase);
        System::String* GetStringInternal(System::String* name, bool ignoreCase);
        virtual System::String* GetString_965a113282dfe2fc(System::String* name);
        virtual System::String* GetString_4a396ac3e6731098(System::String* name, bool ignoreCase);
        virtual void ReadResources_9eaf1854611e4818();
        System::IO::UnmanagedMemoryStream* GetStream(System::String* name, bool ignoreCase);
        bool get_IsDisposed();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
    };
    
    
    struct MANAGED_API Win32Resource : public virtual System::Object{
        NameOrId* type;
        NameOrId* name;
        int32_t language;
        
        void constructor(NameOrId* type, NameOrId* name, int32_t language);
        void constructor(Win32ResourceType type, int32_t name, int32_t language);
        virtual void WriteTo_c67bbc499a650118(System::IO::Stream* s) = 0;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        Win32ResourceType get_ResourceType();
        NameOrId* get_Name();
        NameOrId* get_Type();
        int32_t get_Language();
        
    };
    
}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    struct MANAGED_API CustomConstantAttribute : public virtual System::Attribute{
        
        void constructor();
        virtual System::Object* get_Value_2eb981927c501f0e() = 0;
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API CriticalHandle : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject, public virtual System::IDisposable{
        void* handle;
        bool _disposed;
        
        void constructor(void* invalidHandleValue);
        virtual void Finalize_930372d325809d9a();
        void Close();
        void Dispose();
        virtual void Dispose_a50e254b4f44bdb0(bool disposing);
        virtual bool ReleaseHandle_10ffa0208255a9c3() = 0;
        void SetHandle(void* handle);
        void SetHandleAsInvalid();
        bool get_IsClosed();
        virtual bool get_IsInvalid_2fec8dcdb17ef2a3() = 0;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API ExternalException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* message, int32_t errorCode);
        virtual int32_t get_ErrorCode_40cd36daa03fec71();
        
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    struct MANAGED_API TypeEntry : public virtual System::Object{
        System::String* assembly_name;
        System::String* type_name;
        
        void constructor();
        System::String* get_AssemblyName();
        System::String* set_AssemblyName(System::String* value);
        System::String* get_TypeName();
        System::String* set_TypeName(System::String* value);
        
    };
    
    
    struct MANAGED_API ProviderData : public virtual System::Object{
        System::String* Ref;
        System::String* Type2;
        System::String* Id;
        System::Collections::Hashtable* CustomProperties;
        System::Collections::IList* CustomData;
        
        void constructor();
        void CopyFrom(ProviderData* other);
        
    };
    
    
    struct MANAGED_API RemotingException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* InnerException);
        
    };
    
    
    struct MANAGED_API ServerIdentity : public virtual Identity{
        System::Type* _objectType;
        System::MarshalByRefObject* _serverObject;
        Messaging::IMessageSink* _serverSink;
        Contexts::Context2* _context;
        Lifetime::Lease* _lease;
        
        void constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType);
        void StartTrackingLifetime(Lifetime::ILease* lease);
        virtual void OnLifetimeExpired_e5bffd3f0ee9cda2();
        virtual ObjRef* CreateObjRef_366556653a47f288(System::Type* requestedType) override;
        void AttachServerObject(System::MarshalByRefObject* serverObject, Contexts::Context2* context);
        virtual Messaging::IMessage* SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) = 0;
        virtual Messaging::IMessageCtrl* AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) = 0;
        void DisposeServerObject();
        System::Type* get_ObjectType();
        Lifetime::Lease* get_Lease();
        Contexts::Context2* get_Context();
        Contexts::Context2* set_Context(Contexts::Context2* value);
        
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API BaseChannelObjectWithProperties : public virtual System::Object, public virtual System::Collections::IDictionary, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        System::Collections::Hashtable* table;
        
        void constructor();
        virtual void Add_2e0cc46b6f5b39af(System::Object* key, System::Object* value);
        virtual void Clear_8ffd4fa1ec43d480();
        virtual bool Contains_71330cff12df5547(System::Object* key);
        virtual void CopyTo_7fd02345ed41791b(System::Array* array, int32_t index);
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_c7500511247ec59();
        System::Collections::IEnumerator* GetEnumerator2();
        virtual void Remove_b53f91745646ed6a(System::Object* key);
        virtual int32_t get_Count_71041d0495b6ff46();
        virtual bool get_IsFixedSize_6395df2c82d6b9f7();
        virtual bool get_IsReadOnly_ebb68688cdc55cb2();
        virtual bool get_IsSynchronized_c68490f579af4c3();
        virtual System::Object* get_Item_593a2a34dd2c3a91(System::Object* key);
        virtual System::Object* set_Item_e97df2a7db730e1a(System::Object* key, System::Object* value);
        virtual System::Collections::ICollection* get_Keys_9678cd4a10400c88();
        virtual System::Collections::IDictionary* get_Properties_ebd08d2ecde34832();
        virtual System::Object* get_SyncRoot_d3ef26010f2a22ec();
        virtual System::Collections::ICollection* get_Values_cb1640740b4b52b2();
        
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual System::Collections::ICollection* get_Keys_d809cadac60b140a() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual System::Collections::ICollection* get_Values_ef6ae5cda2bdcf40() override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    struct MANAGED_API ContextAttribute : public virtual System::Attribute, public virtual IContextAttribute, public virtual IContextProperty{
        System::String* AttributeName;
        
        void constructor(System::String* name);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual void Freeze_ee06f0cc6fc5f1f(Context2* newContext);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual void GetPropertiesForNewContext_f6e9f6568c456816(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg);
        virtual bool IsContextOK_7837aaab12d993b6(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg);
        virtual bool IsNewContextOK_19a054e462d56b73(Context2* newCtx);
        virtual System::String* get_Name_2c4efe01fcf96d3();
        
        virtual void Freeze_15e6c602de21dea(Context2* newContext) override;
        virtual void GetPropertiesForNewContext_98ae344cb00933c3(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) override;
        virtual bool IsContextOK_c0cd4400710cc315(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) override;
        virtual bool IsNewContextOK_d441173b4713767c(Context2* newCtx) override;
        virtual System::String* get_Name_c8dae2189d434839() override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API CADMessageBase : public virtual System::Object{
        cli::array<System::Object*>* _args;
        cli::array<unsigned char>* _serializedArgs;
        int32_t _propertyCount;
        CADArgHolder* _callContext;
        
        void constructor();
        static int32_t MarshalProperties(System::Collections::IDictionary* dict, System::Collections::ArrayList* args);
        static void UnmarshalProperties(System::Collections::IDictionary* dict, int32_t count, System::Collections::ArrayList* args);
        static bool IsPossibleToIgnoreMarshal(System::Object* obj);
        System::Object* MarshalArgument(System::Object* arg, System::Collections::ArrayList* args);
        System::Object* UnmarshalArgument(System::Object* arg, System::Collections::ArrayList* args);
        cli::array<System::Object*>* MarshalArguments(cli::array<System::Object*>* arguments, System::Collections::ArrayList* args);
        cli::array<System::Object*>* UnmarshalArguments(cli::array<System::Object*>* arguments, System::Collections::ArrayList* args);
        void SaveLogicalCallContext(IMethodMessage* msg, System::Collections::ArrayList* serializeList);
        LogicalCallContext* GetLogicalCallContext(System::Collections::ArrayList* args);
        
    };
    
    
    struct MANAGED_API MethodCall : public virtual System::Object, public virtual IMethodCallMessage, public virtual IMethodMessage, public virtual IMessage, public virtual System::Runtime::Serialization::ISerializable, public virtual IInternalMessage, public virtual ISerializationRootObject{
        System::String* _uri;
        System::String* _typeName;
        System::String* _methodName;
        cli::array<System::Object*>* _args;
        cli::array<System::Type*>* _methodSignature;
        System::Reflection::MethodBase* _methodBase;
        LogicalCallContext* _callContext;
        ArgInfo* _inArgInfo;
        System::Runtime::Remoting::Identity* _targetIdentity;
        cli::array<System::Type*>* _genericArguments;
        System::Collections::IDictionary* ExternalProperties;
        System::Collections::IDictionary* InternalProperties;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map9;
        
        void constructor(cli::array<Header*>* h1);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(CADMethodCallMessage* msg);
        void constructor(IMessage* msg);
        void constructor(System::String* uri, System::String* typeName, System::String* methodName, cli::array<System::Object*>* args);
        void constructor();
        void CopyFrom(IMethodMessage* call);
        virtual void InitMethodProperty_cd5bad7ed64a6b8e(System::String* key, System::Object* value);
        virtual void GetObjectData_972cb159043c8ab0(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void InitDictionary_dbfe50419d0adffb();
        System::Object* GetArg(int32_t argNum);
        System::String* GetArgName(int32_t index);
        System::Object* GetInArg(int32_t argNum);
        System::String* GetInArgName(int32_t index);
        virtual System::Object* HeaderHandler_f576efadf387778e(cli::array<Header*>* h);
        virtual void Init_205d4c505e7bb970();
        void ResolveMethod();
        System::Type* CastTo(System::String* clientType, System::Type* serverType);
        static System::String* GetTypeNameFromAssemblyQualifiedName(System::String* aqname);
        void RootSetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx);
        int32_t get_ArgCount();
        cli::array<System::Object*>* get_Args();
        bool get_HasVarArgs();
        int32_t get_InArgCount();
        cli::array<System::Object*>* get_InArgs();
        LogicalCallContext* get_LogicalCallContext();
        System::Reflection::MethodBase* get_MethodBase();
        System::String* get_MethodName();
        System::Object* get_MethodSignature();
        virtual System::Collections::IDictionary* get_Properties_c453f36b3f043bdc();
        System::String* get_TypeName();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        System::String* get_Uri2();
        System::String* set_Uri2(System::String* value);
        System::Runtime::Remoting::Identity* get_TargetIdentity();
        System::Runtime::Remoting::Identity* set_TargetIdentity(System::Runtime::Remoting::Identity* value);
        cli::array<System::Type*>* get_GenericArguments();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t argNum) override;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t index) override;
        virtual void RootSetObjectData_9389585d3660e24c(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual int32_t get_InArgCount_cb2e74281a598234() override;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
        virtual System::String* get_Uri_39a650ec2a69ead0() override;
        virtual System::String* set_Uri_96dc10f55685ba70(System::String* value) override;
        virtual System::Runtime::Remoting::Identity* get_TargetIdentity_462ebd8041156d75() override;
        virtual System::Runtime::Remoting::Identity* set_TargetIdentity_8fbc4984471e7e77(System::Runtime::Remoting::Identity* value) override;
    };
    
    
    struct MANAGED_API MethodResponse : public virtual System::Object, public virtual IMethodReturnMessage, public virtual System::Runtime::Serialization::ISerializable, public virtual IInternalMessage, public virtual ISerializationRootObject, public virtual IMethodMessage, public virtual IMessage{
        System::String* _methodName;
        System::String* _uri;
        System::String* _typeName;
        System::Reflection::MethodBase* _methodBase;
        System::Object* _returnValue;
        System::Exception* _exception;
        cli::array<System::Type*>* _methodSignature;
        ArgInfo* _inArgInfo;
        cli::array<System::Object*>* _args;
        cli::array<System::Object*>* _outArgs;
        IMethodCallMessage* _callMsg;
        LogicalCallContext* _callContext;
        System::Runtime::Remoting::Identity* _targetIdentity;
        System::Collections::IDictionary* ExternalProperties;
        System::Collections::IDictionary* InternalProperties;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapC;
        
        void constructor(cli::array<Header*>* h1, IMethodCallMessage* mcm);
        void constructor(System::Exception* e, IMethodCallMessage* msg);
        void constructor(System::Object* returnValue, cli::array<System::Object*>* outArgs, LogicalCallContext* callCtx, IMethodCallMessage* msg);
        void constructor(IMethodCallMessage* msg, CADMethodReturnMessage* retmsg);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void InitMethodProperty(System::String* key, System::Object* value);
        System::Object* GetArg(int32_t argNum);
        System::String* GetArgName(int32_t index);
        virtual void GetObjectData_1ee8033ec9301158(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetOutArg(int32_t argNum);
        System::String* GetOutArgName(int32_t index);
        virtual System::Object* HeaderHandler_61c0b0e57c2852f8(cli::array<Header*>* h);
        void RootSetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx);
        int32_t get_ArgCount();
        cli::array<System::Object*>* get_Args();
        System::Exception* get_Exception();
        bool get_HasVarArgs();
        LogicalCallContext* get_LogicalCallContext();
        System::Reflection::MethodBase* get_MethodBase();
        System::String* get_MethodName();
        System::Object* get_MethodSignature();
        int32_t get_OutArgCount();
        cli::array<System::Object*>* get_OutArgs();
        virtual System::Collections::IDictionary* get_Properties_42e9af5b3d4ade59();
        System::Object* get_ReturnValue();
        System::String* get_TypeName();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        System::String* get_Uri2();
        System::String* set_Uri2(System::String* value);
        System::Runtime::Remoting::Identity* get_TargetIdentity();
        System::Runtime::Remoting::Identity* set_TargetIdentity(System::Runtime::Remoting::Identity* value);
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t argNum) override;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t index) override;
        virtual void RootSetObjectData_9389585d3660e24c(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual System::Exception* get_Exception_f355b7f547514947() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() override;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
        virtual System::String* get_Uri_39a650ec2a69ead0() override;
        virtual System::String* set_Uri_96dc10f55685ba70(System::String* value) override;
        virtual System::Runtime::Remoting::Identity* get_TargetIdentity_462ebd8041156d75() override;
        virtual System::Runtime::Remoting::Identity* set_TargetIdentity_8fbc4984471e7e77(System::Runtime::Remoting::Identity* value) override;
    };
    
    
    struct MANAGED_API MethodCallDictionary : public virtual MethodDictionary{
        static cli::array<System::String*>* InternalKeys;
        
        MethodCallDictionary();
        void constructor(IMethodMessage* message);
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API InternalMessageWrapper : public virtual System::Object{
        IMessage* WrappedMessage;
        
        void constructor(IMessage* msg);
        
    };
    
    
    struct MANAGED_API MethodReturnDictionary : public virtual MethodDictionary{
        static cli::array<System::String*>* InternalReturnKeys;
        static cli::array<System::String*>* InternalExceptionKeys;
        
        MethodReturnDictionary();
        void constructor(IMethodReturnMessage* message);
        static void static_constructor();
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    struct MANAGED_API SoapAttribute : public virtual System::Attribute{
        bool _nested;
        bool _useAttribute;
        System::String* ProtXmlNamespace;
        System::Object* ReflectInfo;
        
        void constructor();
        virtual void SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject);
        virtual bool get_Embedded_f5ad42c3c6ddd2f2();
        virtual bool set_Embedded_139f29de313baee0(bool value);
        virtual bool get_UseAttribute_8c48997d109215be();
        virtual bool set_UseAttribute_58a33ce933bb0a6a(bool value);
        virtual System::String* get_XmlNamespace_85ad94434edc23f3();
        virtual System::String* set_XmlNamespace_4b7c52cb770bdec0(System::String* value);
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    struct MANAGED_API RealProxy : public virtual System::Object{
        System::Type* class_to_proxy;
        System::Runtime::Remoting::Contexts::Context2* _targetContext;
        System::MarshalByRefObject* _server;
        int32_t _targetDomainId;
        System::String* _targetUri;
        System::Runtime::Remoting::Identity* _objectIdentity;
        System::Object* _objTP;
        System::Object* _stubData;
        
        void constructor();
        void constructor(System::Type* classToProxy);
        void constructor(System::Type* classToProxy, System::Runtime::Remoting::ClientIdentity* identity);
        void constructor(System::Type* classToProxy, void* stub, System::Object* stubData);
        static System::Type* InternalGetProxyType(System::Object* transparentProxy);
        System::Type* GetProxiedType();
        virtual System::Runtime::Remoting::ObjRef* CreateObjRef_d53c2f494bc47a1c(System::Type* requestedType);
        virtual void GetObjectData_fa01d7e4569bf5cb(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void* GetCOMIUnknown_c51d183b56c2a48f(bool fIsMarshalled);
        virtual void SetCOMIUnknown_10499de4453533b3(void* i);
        virtual void* SupportsInterface_bd3f88d193ad01aa(System::Guid iid);
        static System::Object* GetStubData(RealProxy* rp);
        static void SetStubData(RealProxy* rp, System::Object* stubData);
        virtual System::Runtime::Remoting::Messaging::IMessage* Invoke_fb5532e107d73b9f(System::Runtime::Remoting::Messaging::IMessage* msg) = 0;
        static System::Object* PrivateInvoke(RealProxy* rp, System::Runtime::Remoting::Messaging::IMessage* msg, System::Exception* exc, cli::array<System::Object*>* out_args);
        virtual System::Object* InternalGetTransparentProxy_5c707b8d2fd2d74b(System::String* className);
        virtual System::Object* GetTransparentProxy_efb39f7079c89638();
        System::Runtime::Remoting::Activation::IConstructionReturnMessage* InitializeServerObject(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg);
        void AttachServer(System::MarshalByRefObject* s);
        System::MarshalByRefObject* DetachServer();
        System::MarshalByRefObject* GetUnwrappedServer();
        void SetTargetDomain(int32_t domainId);
        System::Object* GetAppDomainTarget();
        static cli::array<System::Object*>* ProcessResponse(System::Runtime::Remoting::Messaging::IMethodReturnMessage* mrm, System::Runtime::Remoting::Messaging::MonoMethodMessage* call);
        System::Runtime::Remoting::Identity* get_ObjectIdentity();
        System::Runtime::Remoting::Identity* set_ObjectIdentity(System::Runtime::Remoting::Identity* value);
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    struct MANAGED_API BaseFixupRecord : public virtual System::Object{
        ObjectRecord* ObjectToBeFixed;
        ObjectRecord* ObjectRequired;
        BaseFixupRecord* NextSameContainer;
        BaseFixupRecord* NextSameRequired;
        
        void constructor(ObjectRecord* objectToBeFixed, ObjectRecord* objectRequired);
        bool DoFixup(ObjectManager* manager, bool strict);
        virtual void FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) = 0;
        
    };
    
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    struct MANAGED_API ClrTypeMetadata : public virtual TypeMetadata2{
        System::Type* InstanceType;
        
        void constructor(System::Type* instanceType);
        virtual bool get_RequiresTypes_a63dc7473dcf7e12() override;
        
    };
    
}}}}}
namespace System { namespace Security {
    
    struct MANAGED_API SecurityState : public virtual System::Object{
        
        void constructor();
        virtual void EnsureState_61529bd496462ad() = 0;
        bool IsStateAvailable();
        
    };
    
    
    struct MANAGED_API PermissionSet : public virtual System::Object, public virtual ISecurityEncodable, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable, public virtual IStackWalk, public virtual System::Runtime::Serialization::IDeserializationCallback{
        static /*constexpr*/ System::String* tagName() { return _T("PermissionSet"); }
        static constexpr int32_t version = 1;
        static cli::array<System::Object*>* psUnrestricted;
        Permissions::PermissionState state;
        System::Collections::ArrayList* list;
        Policy::PolicyLevel* _policyLevel;
        bool _declsec;
        bool _readOnly;
        cli::array<bool>* _ignored;
        static cli::array<System::Object*>* action;
        
        PermissionSet();
        void constructor();
        void constructor(Permissions::PermissionState state);
        void constructor(PermissionSet* permSet);
        void constructor(System::String* xml);
        void constructor(IPermission* perm);
        static void static_constructor();
        IPermission* AddPermission(IPermission* perm);
        void Assert();
        void Clear();
        virtual PermissionSet* Copy_cfeae72b3c523c4e();
        virtual void CopyTo_732d1dab1e90fd5a(System::Array* array, int32_t index);
        void Demand();
        void CasOnlyDemand(int32_t skip);
        void Deny();
        virtual void FromXml_2ac858dba9ca352b(SecurityElement* et);
        System::Collections::IEnumerator* GetEnumerator();
        bool IsSubsetOf(PermissionSet* target);
        void PermitOnly();
        bool ContainsNonCodeAccessPermissions();
        static cli::array<unsigned char>* ConvertPermissionSet(System::String* inFormat, cli::array<unsigned char>* inData, System::String* outFormat);
        IPermission* GetPermission(System::Type* permClass);
        PermissionSet* Intersect(PermissionSet* other);
        void InternalIntersect(PermissionSet* intersect, PermissionSet* a, PermissionSet* b, bool unrestricted);
        bool IsEmpty();
        bool IsUnrestricted();
        IPermission* RemovePermission(System::Type* permClass);
        IPermission* SetPermission(IPermission* perm);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual SecurityElement* ToXml_c2a66662101c88c3();
        PermissionSet* Union(PermissionSet* other);
        void OnDeserialization(System::Object* sender);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static void RevertAssert();
        void SetReadOnly(bool value);
        bool AllIgnored();
        bool ProcessFrame(SecurityFrame frame, System::Reflection::Assembly* current, System::AppDomain* domain);
        void CheckAssembly(System::Reflection::Assembly* a, SecurityFrame frame);
        void CheckAppDomain(System::AppDomain* domain, SecurityFrame frame);
        static PermissionSet* CreateFromBinaryFormat(cli::array<unsigned char>* data);
        static int32_t ReadEncodedInt(cli::array<unsigned char>* data, int32_t position);
        static IPermission* ProcessAttribute(cli::array<unsigned char>* data, int32_t position);
        virtual int32_t get_Count_db378507423fcdb();
        virtual bool get_IsSynchronized_14b476662929a566();
        virtual bool get_IsReadOnly_e481161c49619fed();
        virtual System::Object* get_SyncRoot_8a019b52a35087b9();
        bool get_DeclarativeSecurity();
        bool set_DeclarativeSecurity(bool value);
        Policy::PolicyLevel* get_Resolver();
        Policy::PolicyLevel* set_Resolver(Policy::PolicyLevel* value);
        
        virtual void Assert_e1a4f90c372da24c() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual void Demand_55e1408892730c3e() override;
        virtual void Deny_db68b9e52373af22() override;
        virtual void FromXml_1053a148f0375461(SecurityElement* et) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void PermitOnly_a57179fb262ef034() override;
        virtual SecurityElement* ToXml_4868e697107d327() override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    struct MANAGED_API QualifiedAce : public virtual KnownAce{
        cli::array<unsigned char>* opaque;
        
        void constructor(AceType type, AceFlags flags, cli::array<unsigned char>* opaque);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        cli::array<unsigned char>* GetOpaque();
        void SetOpaque(cli::array<unsigned char>* opaque);
        AceQualifier get_AceQualifier();
        bool get_IsCallback();
        int32_t get_OpaqueLength();
        
    };
    
    
    struct MANAGED_API GenericSecurityDescriptor : public virtual System::Object{
        
        void constructor();
        void GetBinaryForm(cli::array<unsigned char>* binaryForm, int32_t offset);
        System::String* GetSddlForm(AccessControlSections includeSections);
        static bool IsSddlConversionSupported();
        void WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset);
        void WriteInt(int32_t val, cli::array<unsigned char>* buffer, int32_t offset);
        int32_t get_BinaryLength();
        virtual ControlFlags get_ControlFlags_5819543aa2ed7520() = 0;
        virtual System::Security::Principal::SecurityIdentifier* get_Group_86703f8c66d04ea6() = 0;
        virtual System::Security::Principal::SecurityIdentifier* set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier* value) = 0;
        virtual System::Security::Principal::SecurityIdentifier* get_Owner_fe0200e7078f0b90() = 0;
        virtual System::Security::Principal::SecurityIdentifier* set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier* value) = 0;
        static unsigned char get_Revision();
        virtual GenericAcl* get_InternalDacl_5c63bd9d907ab726();
        virtual GenericAcl* get_InternalSacl_e5b16f647b074625();
        virtual unsigned char get_InternalReservedField_e823bda30612d306();
        bool get_DaclPresent();
        bool get_SaclPresent();
        
    };
    
    
    struct MANAGED_API AccessRule : public virtual AuthorizationRule{
        AccessControlType type;
        
        void constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
        AccessControlType get_AccessControlType();
        
    };
    
    
    struct MANAGED_API AuditRule : public virtual AuthorizationRule{
        AuditFlags auditFlags;
        
        void constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags);
        AuditFlags get_AuditFlags();
        
    };
    
    
    struct MANAGED_API FileSystemSecurity : public virtual NativeObjectSecurity{
        
        void constructor(bool isContainer);
        void constructor(bool isContainer, System::String* name, AccessControlSections includeSections);
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) final;
        void AddAccessRule(FileSystemAccessRule* rule);
        bool RemoveAccessRule(FileSystemAccessRule* rule);
        void RemoveAccessRuleAll(FileSystemAccessRule* rule);
        void RemoveAccessRuleSpecific(FileSystemAccessRule* rule);
        void ResetAccessRule(FileSystemAccessRule* rule);
        void SetAccessRule(FileSystemAccessRule* rule);
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) final;
        void AddAuditRule(FileSystemAuditRule* rule);
        bool RemoveAuditRule(FileSystemAuditRule* rule);
        void RemoveAuditRuleAll(FileSystemAuditRule* rule);
        void RemoveAuditRuleSpecific(FileSystemAuditRule* rule);
        void SetAuditRule(FileSystemAuditRule* rule);
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API CommonAcl : public virtual GenericAcl{
        static constexpr int32_t default_capacity = 10;
        bool is_container;
        unsigned char revision;
        System::Collections::Generic::List<GenericAce*>* list;
        bool is_ds;
        
        void constructor(bool isContainer, bool isDS, unsigned char revision);
        void constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity);
        virtual void GetBinaryForm_f4afc682e7e10d18(cli::array<unsigned char>* binaryForm, int32_t offset) final;
        void Purge(System::Security::Principal::SecurityIdentifier* sid);
        void RemoveInheritedAces();
        virtual System::String* GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) override;
        virtual int32_t get_BinaryLength_4ea089e3a02d2299() final;
        virtual int32_t get_Count_5cd77c86ebcd1b2c() final;
        bool get_IsCanonical();
        bool get_IsContainer();
        bool get_IsDS();
        virtual GenericAce* get_Item_60d48735f5e5392f(int32_t index) final;
        virtual GenericAce* set_Item_bfb6c47e01525adb(int32_t index, GenericAce* value) final;
        virtual unsigned char get_Revision_d515f8407d8d1240() final;
        
    };
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API DSA : public virtual AsymmetricAlgorithm{
        
        void constructor();
        static DSA* Create3() /*new*/;
        static DSA* Create4(System::String* algName) /*new*/;
        virtual cli::array<unsigned char>* CreateSignature_9fa6bb91f702a4df(cli::array<unsigned char>* rgbHash) = 0;
        virtual DSAParameters ExportParameters_c041d0915f31506(bool includePrivateParameters) = 0;
        void ZeroizePrivateKey(DSAParameters parameters);
        virtual void FromXmlString_ec36cca6166e6990(System::String* xmlString) override;
        virtual void ImportParameters_42bffe0948290f21(DSAParameters parameters) = 0;
        virtual System::String* ToXmlString_681b6b8ae145c576(bool includePrivateParameters) override;
        virtual bool VerifySignature_a25545e0d63f0901(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) = 0;
        
    };
    
    
    struct MANAGED_API RSA : public virtual AsymmetricAlgorithm{
        
        void constructor();
        static RSA* Create3() /*new*/;
        static RSA* Create4(System::String* algName) /*new*/;
        virtual cli::array<unsigned char>* EncryptValue_16a44acec74209ed(cli::array<unsigned char>* rgb) = 0;
        virtual cli::array<unsigned char>* DecryptValue_e0f03fff133976bf(cli::array<unsigned char>* rgb) = 0;
        virtual RSAParameters ExportParameters_f406cf113d936197(bool includePrivateParameters) = 0;
        virtual void ImportParameters_43620ad65e380dd(RSAParameters parameters) = 0;
        void ZeroizePrivateKey(RSAParameters parameters);
        virtual void FromXmlString_ec36cca6166e6990(System::String* xmlString) override;
        virtual System::String* ToXmlString_681b6b8ae145c576(bool includePrivateParameters) override;
        
    };
    
    
    struct MANAGED_API CryptographicException : public virtual System::SystemException{
        
        void constructor();
        void constructor(int32_t hr);
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* format, System::String* insert);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
        virtual bool Equals_8745d1c324afa9f2(System::Object* obj) override;
        virtual System::Exception* GetBaseException_253c3eebfe2fed4a() override;
        virtual int32_t GetHashCode_3274e1baccc4f8d1() override;
        virtual void GetObjectData_cacfaf455dbef0a5(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Type* GetType_74b1e7e5e0897ded() override;
        virtual System::String* ToString_118e365de8f6791a() override;
        virtual System::String* get_HelpLink_c746e07ff3b23b1d() override;
        virtual System::String* set_HelpLink_c6d532780c9a4ffa(System::String* value) override;
        virtual System::Exception* get_InnerException_fee5e87d6404fbbb() override;
        virtual System::String* get_Message_236e49c6b265ab9b() override;
        virtual System::String* get_Source_1ad0ababbacddeca() override;
        virtual System::String* set_Source_593b7183e562d37d(System::String* value) override;
        virtual System::String* get_StackTrace_eedb0499938735b7() override;
        virtual System::Reflection::MethodBase* get_TargetSite_d5a44210796e0db() override;
    };
    
    
    struct MANAGED_API DES : public virtual SymmetricAlgorithm{
        static constexpr int32_t keySizeByte = 8;
        static cli::array<unsigned char>* weakKeys;
        static cli::array<unsigned char>* semiWeakKeys;
        
        DES();
        void constructor();
        static void static_constructor();
        static DES* Create3() /*new*/;
        static DES* Create4(System::String* algName) /*new*/;
        static bool IsWeakKey(cli::array<unsigned char>* rgbKey);
        static bool IsSemiWeakKey(cli::array<unsigned char>* rgbKey);
        virtual cli::array<unsigned char>* get_Key_79a2c753d4f0f561() override;
        virtual cli::array<unsigned char>* set_Key_9b56e7a05d7e4c8f(cli::array<unsigned char>* value) override;
        
    };
    
    
    struct MANAGED_API AsymmetricSignatureDeformatter : public virtual System::Object{
        
        void constructor();
        virtual void SetHashAlgorithm_5a7fb9c08aaf7ac9(System::String* strName) = 0;
        virtual void SetKey_d453955f9571ca18(AsymmetricAlgorithm* key) = 0;
        virtual bool VerifySignature_ecf649797288645c(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) = 0;
        virtual bool VerifySignature_424b9406be3cf878(HashAlgorithm* hash, cli::array<unsigned char>* rgbSignature);
        
    };
    
    
    struct MANAGED_API AsymmetricSignatureFormatter : public virtual System::Object{
        
        void constructor();
        virtual void SetHashAlgorithm_9029a89c4cb706ce(System::String* strName) = 0;
        virtual void SetKey_1b1967336b333b5c(AsymmetricAlgorithm* key) = 0;
        virtual cli::array<unsigned char>* CreateSignature_119f8aceb75b0d2(cli::array<unsigned char>* rgbHash) = 0;
        virtual cli::array<unsigned char>* CreateSignature_dc38abed6af1a66(HashAlgorithm* hash);
        
    };
    
    
    struct MANAGED_API HMAC : public virtual KeyedHashAlgorithm{
        bool _disposed;
        System::String* _hashName;
        HashAlgorithm* _algo;
        Mono::Security::Cryptography::BlockProcessor* _block;
        int32_t _blockSizeValue;
        
        void constructor();
        cli::array<unsigned char>* KeySetup(cli::array<unsigned char>* key, unsigned char padding);
        virtual void Dispose_66239c1dbe6eca10(bool disposing) override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ib, int32_t cb) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        virtual void Initialize_4bdfe3e821ea432() override;
        static HMAC* Create() /*new*/;
        static HMAC* Create2(System::String* algorithmName) /*new*/;
        int32_t get_BlockSizeValue();
        int32_t set_BlockSizeValue(int32_t value);
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        virtual cli::array<unsigned char>* get_Key_326b1bef7df09fc3() override;
        virtual cli::array<unsigned char>* set_Key_3e476ff3afc5eb94(cli::array<unsigned char>* value) override;
        Mono::Security::Cryptography::BlockProcessor* get_Block();
        
    };
    
    
    struct MANAGED_API MD5 : public virtual HashAlgorithm{
        
        void constructor();
        static MD5* Create3() /*new*/;
        static MD5* Create4(System::String* algName) /*new*/;
        
    };
    
    
    struct MANAGED_API DeriveBytes2 : public virtual System::Object, public virtual System::IDisposable{
        bool m_disposed;
        
        void constructor();
        virtual cli::array<unsigned char>* GetBytes_ad106635b376b402(int32_t cb) = 0;
        virtual void Reset_638e8b09d94d54e4() = 0;
        void Dispose();
        virtual void Dispose_803fca5f32415300(bool disposing);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API MaskGenerationMethod : public virtual System::Object{
        
        void constructor();
        virtual cli::array<unsigned char>* GenerateMask_234a8635eaf4eb53(cli::array<unsigned char>* rgbSeed, int32_t cbReturn) = 0;
        
    };
    
    
    struct MANAGED_API RC2 : public virtual SymmetricAlgorithm{
        int32_t EffectiveKeySizeValue;
        
        void constructor();
        static RC2* Create3() /*new*/;
        static RC2* Create4(System::String* AlgName) /*new*/;
        virtual int32_t get_EffectiveKeySize_5d48beb267b8d37a();
        virtual int32_t set_EffectiveKeySize_724f57ed7427a770(int32_t value);
        virtual int32_t get_KeySize_ec919ce7243c4a9() override;
        virtual int32_t set_KeySize_f5b8ff3d506d2d5a(int32_t value) override;
        
    };
    
    
    struct MANAGED_API Rijndael : public virtual SymmetricAlgorithm{
        
        void constructor();
        static Rijndael* Create3() /*new*/;
        static Rijndael* Create4(System::String* algName) /*new*/;
        
    };
    
    
    struct MANAGED_API RIPEMD160 : public virtual HashAlgorithm{
        
        void constructor();
        static RIPEMD160* Create3() /*new*/;
        static RIPEMD160* Create4(System::String* hashName) /*new*/;
        
    };
    
    
    struct MANAGED_API RandomNumberGenerator : public virtual System::Object, public virtual System::IDisposable{
        
        void constructor();
        static RandomNumberGenerator* Create();
        static RandomNumberGenerator* Create2(System::String* rngName);
        virtual void GetBytes_bf6c3bc1baf70dfd(cli::array<unsigned char>* data) = 0;
        virtual void GetNonZeroBytes_eb33fce7e843c67b(cli::array<unsigned char>* data) = 0;
        void Dispose();
        virtual void Dispose_322058ebc1ad4f39(bool disposing);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API AsymmetricKeyExchangeDeformatter : public virtual System::Object{
        
        void constructor();
        virtual cli::array<unsigned char>* DecryptKeyExchange_a085cba75fa7b7e8(cli::array<unsigned char>* rgb) = 0;
        virtual void SetKey_bd4b3e1db375026(AsymmetricAlgorithm* key) = 0;
        virtual System::String* get_Parameters_24dbb412163f248d() = 0;
        virtual System::String* set_Parameters_f734d1cc05a7e81b(System::String* value) = 0;
        
    };
    
    
    struct MANAGED_API AsymmetricKeyExchangeFormatter : public virtual System::Object{
        
        void constructor();
        virtual cli::array<unsigned char>* CreateKeyExchange_57ddeacaf3382dd4(cli::array<unsigned char>* data) = 0;
        virtual cli::array<unsigned char>* CreateKeyExchange_d7106f3b8416be39(cli::array<unsigned char>* data, System::Type* symAlgType) = 0;
        virtual void SetKey_4186746ff8b83ffd(AsymmetricAlgorithm* key) = 0;
        virtual System::String* get_Parameters_c99e16816ae9e82d() = 0;
        
    };
    
    
    struct MANAGED_API SHA1 : public virtual HashAlgorithm{
        
        void constructor();
        static SHA1* Create3() /*new*/;
        static SHA1* Create4(System::String* hashName) /*new*/;
        
    };
    
    
    struct MANAGED_API SHA256 : public virtual HashAlgorithm{
        
        void constructor();
        static SHA256* Create3() /*new*/;
        static SHA256* Create4(System::String* hashName) /*new*/;
        
    };
    
    
    struct MANAGED_API SHA384 : public virtual HashAlgorithm{
        
        void constructor();
        static SHA384* Create3() /*new*/;
        static SHA384* Create4(System::String* hashName) /*new*/;
        
    };
    
    
    struct MANAGED_API SHA512 : public virtual HashAlgorithm{
        
        void constructor();
        static SHA512* Create3() /*new*/;
        static SHA512* Create4(System::String* hashName) /*new*/;
        
    };
    
    
    struct MANAGED_API SignatureDescription : public virtual System::Object{
        System::String* _DeformatterAlgorithm;
        System::String* _DigestAlgorithm;
        System::String* _FormatterAlgorithm;
        System::String* _KeyAlgorithm;
        
        void constructor();
        void constructor(System::Security::SecurityElement* el);
        virtual AsymmetricSignatureDeformatter* CreateDeformatter_8eb8daaf249d6ff0(AsymmetricAlgorithm* key);
        virtual HashAlgorithm* CreateDigest_35cf85d843e5c3d2();
        virtual AsymmetricSignatureFormatter* CreateFormatter_f3b600e181bd68be(AsymmetricAlgorithm* key);
        System::String* get_DeformatterAlgorithm();
        System::String* set_DeformatterAlgorithm(System::String* value);
        System::String* get_DigestAlgorithm();
        System::String* set_DigestAlgorithm(System::String* value);
        System::String* get_FormatterAlgorithm();
        System::String* set_FormatterAlgorithm(System::String* value);
        System::String* get_KeyAlgorithm();
        System::String* set_KeyAlgorithm(System::String* value);
        
    };
    
    
    struct MANAGED_API TripleDES : public virtual SymmetricAlgorithm{
        
        void constructor();
        static bool IsWeakKey(cli::array<unsigned char>* rgbKey);
        static TripleDES* Create3() /*new*/;
        static TripleDES* Create4(System::String* str) /*new*/;
        virtual cli::array<unsigned char>* get_Key_79a2c753d4f0f561() override;
        virtual cli::array<unsigned char>* set_Key_9b56e7a05d7e4c8f(cli::array<unsigned char>* value) override;
        
    };
    
}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API IsolatedStoragePermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission{
        static constexpr int32_t version = 1;
        int64_t m_userQuota;
        int64_t m_machineQuota;
        int64_t m_expirationDays;
        bool m_permanentData;
        IsolatedStorageContainment m_allowed;
        
        void constructor(PermissionState state);
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        bool IsEmpty();
        int64_t get_UserQuota();
        int64_t set_UserQuota(int64_t value);
        IsolatedStorageContainment get_UsageAllowed();
        IsolatedStorageContainment set_UsageAllowed(IsolatedStorageContainment value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* esd) override;
    };
    
    
    struct MANAGED_API IsolatedStoragePermissionAttribute : public virtual CodeAccessSecurityAttribute{
        IsolatedStorageContainment usage_allowed;
        int64_t user_quota;
        
        void constructor(SecurityAction action);
        IsolatedStorageContainment get_UsageAllowed();
        IsolatedStorageContainment set_UsageAllowed(IsolatedStorageContainment value);
        int64_t get_UserQuota();
        int64_t set_UserQuota(int64_t value);
        
    };
    
}}}
namespace System { namespace Security { namespace Policy {
    
    struct MANAGED_API CodeGroup : public virtual System::Object{
        PolicyStatement* m_policy;
        IMembershipCondition* m_membershipCondition;
        System::String* m_description;
        System::String* m_name;
        System::Collections::ArrayList* m_children;
        
        void constructor(IMembershipCondition* membershipCondition, PolicyStatement* policy);
        void constructor(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual CodeGroup* Copy_7fdc78f7390869fe() = 0;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) = 0;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) = 0;
        void AddChild(CodeGroup* group);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        bool Equals4(CodeGroup* cg, bool compareChildren);
        void RemoveChild(CodeGroup* group);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual void ParseXml_ecb12c827959aa39(System::Security::SecurityElement* e, PolicyLevel* level);
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        virtual void CreateXml_14eb36ca74574a81(System::Security::SecurityElement* element, PolicyLevel* level);
        static CodeGroup* CreateFromXml(System::Security::SecurityElement* se, PolicyLevel* level);
        virtual System::String* get_MergeLogic_cd001da1f3850530() = 0;
        PolicyStatement* get_PolicyStatement();
        PolicyStatement* set_PolicyStatement(PolicyStatement* value);
        System::String* get_Description();
        System::String* set_Description(System::String* value);
        IMembershipCondition* get_MembershipCondition();
        IMembershipCondition* set_MembershipCondition(IMembershipCondition* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::Collections::IList* get_Children();
        System::Collections::IList* set_Children(System::Collections::IList* value);
        virtual System::String* get_AttributeString_f768971bd5bbaf63();
        virtual System::String* get_PermissionSetName_4d6dd01cf3ccc2f3();
        
    };
    
}}}
namespace System { namespace Security { namespace Principal {
    
    struct MANAGED_API IdentityReference : public virtual System::Object{
        
        void constructor();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override = 0;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override = 0;
        virtual bool IsValidTargetType_23b55042c769999c(System::Type* targetType) = 0;
        virtual System::String* ToString_1636a0751cb9ac11() override = 0;
        virtual IdentityReference* Translate_1920497c56851819(System::Type* targetType) = 0;
        static bool op_Equality(IdentityReference* left, IdentityReference* right);
        static bool op_Inequality(IdentityReference* left, IdentityReference* right);
        virtual System::String* get_Value_31a6ad648afbd5f5() = 0;
        
    };
    
}}}
namespace System { namespace Text {
    
    struct MANAGED_API Encoding : public virtual System::Object, public virtual System::ICloneable{
        int32_t codePage;
        int32_t windows_code_page;
        bool is_readonly;
        DecoderFallback* decoder_fallback;
        EncoderFallback* encoder_fallback;
        static System::Reflection::Assembly* i18nAssembly;
        static bool i18nDisabled;
        static cli::array<EncodingInfo*>* encoding_infos;
        bool is_mail_news_display;
        bool is_mail_news_save;
        bool is_browser_save;
        bool is_browser_display;
        System::String* body_name;
        System::String* encoding_name;
        System::String* header_name;
        System::String* web_name;
        static Encoding* asciiEncoding;
        static Encoding* bigEndianEncoding;
        static Encoding* defaultEncoding;
        static Encoding* utf7Encoding;
        static Encoding* utf8EncodingWithMarkers;
        static Encoding* utf8EncodingWithoutMarkers;
        static Encoding* unicodeEncoding;
        static Encoding* isoLatin1Encoding;
        static Encoding* utf8EncodingUnsafe;
        static Encoding* utf32Encoding;
        static Encoding* bigEndianUTF32Encoding;
        static System::Object* lockobj;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map11;
        
        Encoding();
        void constructor();
        void constructor(int32_t codePage);
        static void static_constructor();
        static System::String* _(System::String* arg);
        void SetFallbackInternal(EncoderFallback* e, DecoderFallback* d);
        static cli::array<unsigned char>* Convert2(Encoding* srcEncoding, Encoding* dstEncoding, cli::array<unsigned char>* bytes);
        static cli::array<unsigned char>* Convert3(Encoding* srcEncoding, Encoding* dstEncoding, cli::array<unsigned char>* bytes, int32_t index, int32_t count);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) = 0;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* s);
        virtual int32_t GetByteCount_8ddd893811c6fb16(cli::array<char16_t>* chars);
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) = 0;
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex);
        virtual cli::array<unsigned char>* GetBytes_49806e8e98b1c1db(System::String* s);
        virtual cli::array<unsigned char>* GetBytes_d1513e6a9072eb1(cli::array<char16_t>* chars, int32_t index, int32_t count);
        virtual cli::array<unsigned char>* GetBytes_c786a154203d1d3e(cli::array<char16_t>* chars);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) = 0;
        virtual int32_t GetCharCount_1703b678788a899e(cli::array<unsigned char>* bytes);
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) = 0;
        virtual cli::array<char16_t>* GetChars_66b39e5249276d4a(cli::array<unsigned char>* bytes, int32_t index, int32_t count);
        virtual cli::array<char16_t>* GetChars_7bd8879fade07d8e(cli::array<unsigned char>* bytes);
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5();
        virtual Encoder* GetEncoder_c3a25b0b739d51c8();
        static System::Object* InvokeI18N(System::String* name, cli::array<System::Object*>* args);
        static Encoding* GetEncoding(int32_t codepage);
        virtual System::Object* Clone_c7ab6a38a8e4176e();
        static Encoding* GetEncoding2(int32_t codepage, EncoderFallback* encoderFallback, DecoderFallback* decoderFallback);
        static Encoding* GetEncoding3(System::String* name, EncoderFallback* encoderFallback, DecoderFallback* decoderFallback);
        static cli::array<EncodingInfo*>* GetEncodings();
        bool IsAlwaysNormalized();
        virtual bool IsAlwaysNormalized_3d9dd6497a77d101(NormalizationForm form);
        static Encoding* GetEncoding4(System::String* name);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) = 0;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) = 0;
        virtual cli::array<unsigned char>* GetPreamble_15ff85f00c460f87();
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count);
        virtual System::String* GetString_12d22365648431d7(cli::array<unsigned char>* bytes);
        static System::String* InternalCodePage(int32_t code_page);
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count);
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count);
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount);
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount);
        bool get_IsReadOnly();
        virtual bool get_IsSingleByte_35caa6a029e2b816();
        DecoderFallback* get_DecoderFallback();
        DecoderFallback* set_DecoderFallback(DecoderFallback* value);
        EncoderFallback* get_EncoderFallback();
        EncoderFallback* set_EncoderFallback(EncoderFallback* value);
        virtual System::String* get_BodyName_4e100a97a0424038();
        virtual int32_t get_CodePage_91fb8f67e293f9c5();
        virtual System::String* get_EncodingName_cceb96db74b2252b();
        virtual System::String* get_HeaderName_905c2b4b7e3e3c75();
        virtual bool get_IsBrowserDisplay_52cbc4f0fcb00858();
        virtual bool get_IsBrowserSave_1e19416373d08662();
        virtual bool get_IsMailNewsDisplay_53d46b3981a20587();
        virtual bool get_IsMailNewsSave_217a4ecd1696aff8();
        virtual System::String* get_WebName_baa3e40df8ce4d3e();
        virtual int32_t get_WindowsCodePage_c9469fd7af078754();
        static Encoding* get_ASCII();
        static Encoding* get_BigEndianUnicode();
        static Encoding* get_Default();
        static Encoding* get_ISOLatin1();
        static Encoding* get_UTF7();
        static Encoding* get_UTF8();
        static Encoding* get_UTF8Unmarked();
        static Encoding* get_UTF8UnmarkedUnsafe();
        static Encoding* get_Unicode();
        static Encoding* get_UTF32();
        static Encoding* get_BigEndianUTF32();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API DecoderFallback : public virtual System::Object{
        static DecoderFallback* exception_fallback;
        static DecoderFallback* replacement_fallback;
        static DecoderFallback* standard_safe_fallback;
        
        DecoderFallback();
        void constructor();
        static void static_constructor();
        virtual DecoderFallbackBuffer* CreateFallbackBuffer_dad5db136d065044() = 0;
        static DecoderFallback* get_ExceptionFallback();
        virtual int32_t get_MaxCharCount_4c0c8ac224d22848() = 0;
        static DecoderFallback* get_ReplacementFallback();
        static DecoderFallback* get_StandardSafeFallback();
        
    };
    
    
    struct MANAGED_API DecoderFallbackBuffer : public virtual System::Object{
        
        void constructor();
        virtual bool Fallback_1ea6d9bfef1f4bac(cli::array<unsigned char>* bytesUnknown, int32_t index) = 0;
        virtual char16_t GetNextChar_7967ec44cca772f9() = 0;
        virtual bool MovePrevious_c3549fdac1194a1d() = 0;
        virtual void Reset_dc5d0be891187587();
        virtual int32_t get_Remaining_b256701c9c2b0bc4() = 0;
        
    };
    
    
    struct MANAGED_API EncoderFallback : public virtual System::Object{
        static EncoderFallback* exception_fallback;
        static EncoderFallback* replacement_fallback;
        static EncoderFallback* standard_safe_fallback;
        
        EncoderFallback();
        void constructor();
        static void static_constructor();
        virtual EncoderFallbackBuffer* CreateFallbackBuffer_a579589a4ca0924f() = 0;
        static EncoderFallback* get_ExceptionFallback();
        virtual int32_t get_MaxCharCount_d3886d08d9f851fe() = 0;
        static EncoderFallback* get_ReplacementFallback();
        static EncoderFallback* get_StandardSafeFallback();
        
    };
    
    
    struct MANAGED_API EncoderFallbackBuffer : public virtual System::Object{
        
        void constructor();
        virtual bool Fallback_2e254195ffd348dc(char16_t charUnknown, int32_t index) = 0;
        virtual bool Fallback_571cd731a6ea7558(char16_t charUnknownHigh, char16_t charUnknownLow, int32_t index) = 0;
        virtual char16_t GetNextChar_84e759436123fac0() = 0;
        virtual bool MovePrevious_a841421c2eaf80e7() = 0;
        virtual void Reset_e8feb6df1bde1a59();
        virtual int32_t get_Remaining_dd4149ac6c4a9379() = 0;
        
    };
    
    
    struct MANAGED_API Decoder2 : public virtual System::Object{
        DecoderFallback* fallback;
        DecoderFallbackBuffer* fallback_buffer;
        
        void constructor();
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) = 0;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) = 0;
        virtual int32_t GetCharCount_70ec3c7ca72b5799(cli::array<unsigned char>* bytes, int32_t index, int32_t count, bool flush);
        virtual int32_t GetCharCount_e5526205eecd824a(unsigned char* bytes, int32_t count, bool flush);
        virtual int32_t GetChars_41a75c27687b2d7f(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex, bool flush);
        virtual int32_t GetChars_e5afb2ed21a74698(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount, bool flush);
        virtual void Reset_d03c70a495965fed();
        virtual void Convert_9af9b7214f1d3f95(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount, bool flush, int32_t bytesUsed, int32_t charsUsed, bool completed);
        virtual void Convert_aa55aa2c58be8fe2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, bool flush, int32_t bytesUsed, int32_t charsUsed, bool completed);
        void CheckArguments(cli::array<char16_t>* chars, int32_t charIndex);
        void CheckArguments2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount);
        void CheckArguments3(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount);
        DecoderFallback* get_Fallback();
        DecoderFallback* set_Fallback(DecoderFallback* value);
        DecoderFallbackBuffer* get_FallbackBuffer();
        
    };
    
    
    struct MANAGED_API Encoder : public virtual System::Object{
        EncoderFallback* fallback;
        EncoderFallbackBuffer* fallback_buffer;
        
        void constructor();
        virtual int32_t GetByteCount_85f1385779510289(cli::array<char16_t>* chars, int32_t index, int32_t count, bool flush) = 0;
        virtual int32_t GetBytes_ac22a3cfd526ffd3(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, bool flush) = 0;
        virtual int32_t GetByteCount_addb240243fed46d(char16_t* chars, int32_t count, bool flush);
        virtual int32_t GetBytes_4985ee639a8a9b65(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount, bool flush);
        virtual void Reset_d50600f03626a729();
        virtual void Convert_ed7267004a1f0914(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount, bool flush, int32_t charsUsed, int32_t bytesUsed, bool completed);
        virtual void Convert_6be0592b51d62804(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, bool flush, int32_t charsUsed, int32_t bytesUsed, bool completed);
        void CheckArguments(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount);
        EncoderFallback* get_Fallback();
        EncoderFallback* set_Fallback(EncoderFallback* value);
        EncoderFallbackBuffer* get_FallbackBuffer();
        
    };
    
}}
namespace System { namespace Threading {
    
    struct MANAGED_API EventWaitHandle : public virtual WaitHandle{
        
        void constructor(void* handle);
        void constructor(bool initialState, EventResetMode mode);
        void constructor(bool initialState, EventResetMode mode, System::String* name);
        void constructor(bool initialState, EventResetMode mode, System::String* name, bool createdNew);
        void constructor(bool initialState, EventResetMode mode, System::String* name, bool createdNew, System::Security::AccessControl::EventWaitHandleSecurity* eventSecurity);
        static bool IsManualReset(EventResetMode mode);
        System::Security::AccessControl::EventWaitHandleSecurity* GetAccessControl();
        static EventWaitHandle* OpenExisting(System::String* name);
        static EventWaitHandle* OpenExisting2(System::String* name, System::Security::AccessControl::EventWaitHandleRights rights);
        bool Reset();
        bool Set();
        void SetAccessControl(System::Security::AccessControl::EventWaitHandleSecurity* eventSecurity);
        
    };
    
}}
namespace System { namespace Threading { namespace Tasks {
    
    struct MANAGED_API TaskScheduler : public virtual System::Object{
        static TaskScheduler* defaultScheduler;
        static TaskScheduler* currentScheduler;
        int32_t id;
        static int32_t lastId;
        static System::EventHandler2<UnobservedTaskExceptionEventArgs*>* UnobservedTaskException;
        
        TaskScheduler();
        void constructor();
        static void static_constructor();
        static TaskScheduler* FromCurrentSynchronizationContext();
        virtual System::Collections::Generic::IEnumerable2<Task*>* GetScheduledTasks_1a3a2b32f93a346c() = 0;
        virtual void QueueTask_cbe2927cfadeb04c(Task* task) = 0;
        virtual bool TryDequeue_e11e522f718d830b(Task* task);
        bool TryExecuteTask(Task* task);
        virtual bool TryExecuteTaskInline_89cb38840fe95613(Task* task, bool taskWasPreviouslyQueued) = 0;
        bool RunInline(Task* task);
        static UnobservedTaskExceptionEventArgs* FireUnobservedEvent(Task* task, System::AggregateException* e);
        static TaskScheduler* get_Default();
        static TaskScheduler* get_Current();
        static TaskScheduler* set_Current(TaskScheduler* value);
        int32_t get_Id();
        virtual int32_t get_MaximumConcurrencyLevel_a56c57882f7ce248();
        static void add_UnobservedTaskException(System::EventHandler2<UnobservedTaskExceptionEventArgs*>* value);
        static void remove_UnobservedTaskException(System::EventHandler2<UnobservedTaskExceptionEventArgs*>* value);
        
    };
    
    
    struct MANAGED_API TaskActionInvoker : public virtual System::Object{
        static TaskActionInvoker* Empty;
        
        TaskActionInvoker();
        void constructor();
        static void static_constructor();
        static TaskActionInvoker* Create(System::Action* action);
        static TaskActionInvoker* Create2(System::Action2<System::Object*>* action);
        static TaskActionInvoker* Create3(System::Action2<Task*>* action);
        static TaskActionInvoker* Create4(System::Action4<Task*, System::Object*>* action);
        template<class TResult>
        static TaskActionInvoker* Create_1(System::Action2<Task2<TResult>*>* action);
        template<class TResult>
        static TaskActionInvoker* Create_12(System::Action4<Task2<TResult>*, System::Object*>* action);
        template<class TResult>
        static TaskActionInvoker* Create_13(System::Func<TResult>* action);
        template<class TResult>
        static TaskActionInvoker* Create_14(System::Func2<System::Object*, TResult>* action);
        template<class TResult>
        static TaskActionInvoker* Create_15(System::Func2<Task*, TResult>* action);
        template<class TResult>
        static TaskActionInvoker* Create_16(System::Func4<Task*, System::Object*, TResult>* action);
        template<class TResult, class TNewResult>
        static TaskActionInvoker* Create_2(System::Func2<Task2<TResult>*, TNewResult>* action);
        template<class TResult, class TNewResult>
        static TaskActionInvoker* Create_22(System::Func4<Task2<TResult>*, System::Object*, TNewResult>* action);
        static TaskActionInvoker* Create5(System::Action2<cli::array<Task*>*>* action, cli::array<Task*>* tasks);
        template<class TResult>
        static TaskActionInvoker* Create_17(System::Func2<cli::array<Task*>*, TResult>* action, cli::array<Task*>* tasks);
        static TaskActionInvoker* Create6(System::Action2<Task*>* action, cli::array<Task*>* tasks);
        template<class TResult>
        static TaskActionInvoker* Create_18(System::Func2<Task*, TResult>* action, cli::array<Task*>* tasks);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) = 0;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() = 0;
        
    };
    
    
    struct MANAGED_API Task : public virtual System::Object, public virtual System::IDisposable, public virtual System::IAsyncResult{
        static constexpr TaskCreationOptions WorkerTaskNotSupportedOptions = (System::Threading::Tasks::TaskCreationOptions)3L;
        static constexpr TaskCreationOptions MaxTaskCreationOptions = (System::Threading::Tasks::TaskCreationOptions)7L;
        static Task* current;
        static System::Action2<Task*>* childWorkAdder;
        Task* parent;
        Task* contAncestor;
        static int32_t id;
        static TaskFactory* defaultFactory;
        System::Threading::CountdownEvent* childTasks;
        int32_t taskId;
        TaskCreationOptions taskCreationOptions;
        TaskScheduler* scheduler;
        TaskExceptionSlot* exSlot;
        TaskStatus status;
        TaskActionInvoker* invoker;
        System::Object* state;
        System::Threading::AtomicBooleanValue executing;
        TaskCompletionQueue<IContinuation*> continuations;
        System::Threading::CancellationToken token;
        System::Nullable2<System::Threading::CancellationTokenRegistration> cancellationRegistration;
        static System::Action2<System::Object*>* __f__am_cache0;
        
        Task();
        void constructor(System::Action* action);
        void constructor(System::Action* action, TaskCreationOptions creationOptions);
        void constructor(System::Action* action, System::Threading::CancellationToken cancellationToken);
        void constructor(System::Action* action, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions);
        void constructor(System::Action2<System::Object*>* action, System::Object* state);
        void constructor(System::Action2<System::Object*>* action, System::Object* state, TaskCreationOptions creationOptions);
        void constructor(System::Action2<System::Object*>* action, System::Object* state, System::Threading::CancellationToken cancellationToken);
        void constructor(System::Action2<System::Object*>* action, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions);
        void constructor(TaskActionInvoker* invoker, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, Task* parent);
        void constructor(TaskActionInvoker* invoker, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, Task* parent, Task* contAncestor);
        static void static_constructor();
        static bool CheckTaskOptions(TaskCreationOptions opt, TaskCreationOptions member);
        void Start();
        void Start2(TaskScheduler* scheduler);
        void SetupScheduler(TaskScheduler* scheduler);
        void RunSynchronously();
        void RunSynchronously2(TaskScheduler* scheduler);
        Task* ContinueWith(System::Action2<Task*>* continuationAction);
        Task* ContinueWith2(System::Action2<Task*>* continuationAction, TaskContinuationOptions continuationOptions);
        Task* ContinueWith3(System::Action2<Task*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        Task* ContinueWith4(System::Action2<Task*>* continuationAction, TaskScheduler* scheduler);
        Task* ContinueWith5(System::Action2<Task*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task* ContinueWith6(TaskActionInvoker* invoker, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* ContinueWith_1(System::Func2<Task*, TResult>* continuationFunction);
        template<class TResult>
        Task2<TResult>* ContinueWith_12(System::Func2<Task*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TResult>
        Task2<TResult>* ContinueWith_13(System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TResult>
        Task2<TResult>* ContinueWith_14(System::Func2<Task*, TResult>* continuationFunction, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* ContinueWith_15(System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* ContinueWith_16(TaskActionInvoker* invoker, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        void ContinueWithCore(Task* continuation, TaskContinuationOptions options, TaskScheduler* scheduler);
        void ContinueWith7(IContinuation* continuation);
        void RemoveContinuation(IContinuation* continuation);
        static TaskCreationOptions GetCreationOptions(TaskContinuationOptions kind);
        void Schedule();
        void ThreadStart2();
        bool TrySetCanceled();
        bool TrySetException(System::AggregateException* aggregate);
        void Execute();
        void AddChild();
        void ChildCompleted(System::AggregateException* childEx);
        void InnerInvoke();
        void Finish();
        void ProcessCompleteDelegates();
        void ProcessChildExceptions();
        void CancelReal();
        void HandleGenericException(System::Exception* e);
        void HandleGenericException2(System::AggregateException* e);
        void WaitOnChildren();
        void Wait();
        void Wait2(System::Threading::CancellationToken cancellationToken);
        bool Wait3(System::TimeSpan timeout);
        bool Wait4(int32_t millisecondsTimeout);
        bool Wait5(int32_t millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
        static void WaitAll(cli::array<Task*>* tasks);
        static void WaitAll2(cli::array<Task*>* tasks, System::Threading::CancellationToken cancellationToken);
        static bool WaitAll3(cli::array<Task*>* tasks, System::TimeSpan timeout);
        static bool WaitAll4(cli::array<Task*>* tasks, int32_t millisecondsTimeout);
        static bool WaitAll5(cli::array<Task*>* tasks, int32_t millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
        static int32_t WaitAny(cli::array<Task*>* tasks);
        static int32_t WaitAny2(cli::array<Task*>* tasks, System::TimeSpan timeout);
        static int32_t WaitAny3(cli::array<Task*>* tasks, int32_t millisecondsTimeout);
        static int32_t WaitAny4(cli::array<Task*>* tasks, System::Threading::CancellationToken cancellationToken);
        static int32_t WaitAny5(cli::array<Task*>* tasks, int32_t millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
        static int32_t CheckTimeout(System::TimeSpan timeout);
        static void CheckForNullTasks(cli::array<Task*>* tasks);
        void Dispose();
        virtual void Dispose_d167f1eeb30e25ff(bool disposing);
        static void _Task_m__46(System::Object* l);
        static TaskFactory* get_Factory();
        static System::Nullable2<int32_t> get_CurrentId();
        System::AggregateException* get_Exception();
        bool get_IsCanceled();
        bool get_IsCompleted();
        bool get_IsFaulted();
        TaskCreationOptions get_CreationOptions();
        TaskStatus get_Status();
        TaskStatus set_Status(TaskStatus value);
        TaskExceptionSlot* get_ExceptionSlot();
        System::Object* get_AsyncState();
        bool get_CompletedSynchronously();
        System::Threading::WaitHandle* get_AsyncWaitHandle();
        int32_t get_Id();
        bool get_IsContinuation();
        Task* get_ContinuationAncestor();
        System::String* get_DisplayActionMethod();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool get_IsCompleted_908b07d70649b7ff() override;
        virtual System::Object* get_AsyncState_edfadcd905632437() override;
        virtual bool get_CompletedSynchronously_2176ca6518f7b5dc() override;
        virtual System::Threading::WaitHandle* get_AsyncWaitHandle_7620505c49d113f3() override;
    };
    
}}}

struct MANAGED_API Consts : public virtual System::Object{
    static /*constexpr*/ System::String* MonoVersion() { return _T("@MONO_VERSION@"); }
    static /*constexpr*/ System::String* MonoCompany() { return _T("Mono development team"); }
    static /*constexpr*/ System::String* MonoProduct() { return _T("Mono Common Language Infrastructure"); }
    static /*constexpr*/ System::String* MonoCopyright() { return _T("(c) Various Mono authors"); }
    static /*constexpr*/ System::String* FxVersion() { return _T("4.0.0.0"); }
    static /*constexpr*/ System::String* FxFileVersion() { return _T("4.0.30319.1"); }
    static /*constexpr*/ System::String* VsVersion() { return _T("0.0.0.0"); }
    static /*constexpr*/ System::String* VsFileVersion() { return _T("10.0.0.0"); }
    static /*constexpr*/ System::String* AssemblyI18N() { return _T("I18N, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"); }
    static /*constexpr*/ System::String* AssemblyMicrosoft_VisualStudio() { return _T("Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblyMicrosoft_VisualStudio_Web() { return _T("Microsoft.VisualStudio.Web, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblyMicrosoft_VSDesigner() { return _T("Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblyMono_Http() { return _T("Mono.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"); }
    static /*constexpr*/ System::String* AssemblyMono_Posix() { return _T("Mono.Posix, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"); }
    static /*constexpr*/ System::String* AssemblyMono_Security() { return _T("Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"); }
    static /*constexpr*/ System::String* AssemblyMono_Messaging_RabbitMQ() { return _T("Mono.Messaging.RabbitMQ, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"); }
    static /*constexpr*/ System::String* AssemblyCorlib() { return _T("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystem() { return _T("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystem_Data() { return _T("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystem_Design() { return _T("System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_DirectoryServices() { return _T("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Drawing() { return _T("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Drawing_Design() { return _T("System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Messaging() { return _T("System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Security() { return _T("System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_ServiceProcess() { return _T("System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Web() { return _T("System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
    static /*constexpr*/ System::String* AssemblySystem_Windows_Forms() { return _T("System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystem_2_0() { return _T("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystemCore_3_5() { return _T("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* AssemblySystem_Core() { return _T("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
    static /*constexpr*/ System::String* WindowsBase_3_0() { return _T("WindowsBase, Version=3.0.0.0, PublicKeyToken=31bf3856ad364e35"); }
    static /*constexpr*/ System::String* AssemblyWindowsBase() { return _T("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); }
    static /*constexpr*/ System::String* AssemblyPresentationCore_3_5() { return _T("PresentationCore, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); }
    static /*constexpr*/ System::String* AssemblyPresentationFramework_3_5() { return _T("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); }
    
    
};


struct MANAGED_API Locale : public virtual System::Object{
    
    void constructor();
    static System::String* GetText(System::String* msg);
    static System::String* GetText2(System::String* fmt, cli::array<System::Object*>* args);
    
};

namespace Microsoft { namespace Win32 {
    
    struct MANAGED_API Registry : public virtual System::Object{
        static RegistryKey* ClassesRoot;
        static RegistryKey* CurrentConfig;
        static RegistryKey* CurrentUser;
        static RegistryKey* DynData;
        static RegistryKey* LocalMachine;
        static RegistryKey* PerformanceData;
        static RegistryKey* Users;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map0;
        
        Registry();
        static void static_constructor();
        static RegistryKey* ToKey(System::String* keyName, bool setting);
        static void SetValue(System::String* keyName, System::String* valueName, System::Object* value);
        static void SetValue2(System::String* keyName, System::String* valueName, System::Object* value, RegistryValueKind valueKind);
        static System::Object* GetValue(System::String* keyName, System::String* valueName, System::Object* defaultValue);
        
    };
    
    
    struct MANAGED_API RegistryKey : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        System::Object* handle;
        SafeHandles::SafeRegistryHandle* safe_handle;
        System::Object* hive;
        System::String* qname;
        bool isRemoteRoot;
        bool isWritable;
        static IRegistryApi* RegistryApi;
        
        RegistryKey();
        static void static_constructor();
        void constructor(RegistryHive hiveId);
        void constructor(RegistryHive hiveId, void* keyHandle, bool remoteRoot);
        void constructor(System::Object* data, System::String* keyName, bool writable);
        virtual void Finalize_97a09cd51cc9cae0();
        void Dispose();
        void Flush();
        void Close();
        void SetValue(System::String* name, System::Object* value);
        void SetValue2(System::String* name, System::Object* value, RegistryValueKind valueKind);
        RegistryKey* OpenSubKey(System::String* name);
        RegistryKey* OpenSubKey2(System::String* name, bool writable);
        System::Object* GetValue(System::String* name);
        System::Object* GetValue2(System::String* name, System::Object* defaultValue);
        System::Object* GetValue3(System::String* name, System::Object* defaultValue, RegistryValueOptions options);
        RegistryValueKind GetValueKind(System::String* name);
        RegistryKey* CreateSubKey(System::String* subkey);
        RegistryKey* CreateSubKey2(System::String* subkey, RegistryKeyPermissionCheck permissionCheck);
        RegistryKey* CreateSubKey3(System::String* subkey, RegistryKeyPermissionCheck permissionCheck, System::Security::AccessControl::RegistrySecurity* registrySecurity);
        RegistryKey* CreateSubKey4(System::String* subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions options);
        RegistryKey* CreateSubKey5(System::String* subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions, System::Security::AccessControl::RegistrySecurity* registrySecurity);
        void DeleteSubKey(System::String* subkey);
        void DeleteSubKey2(System::String* subkey, bool throwOnMissingSubKey);
        void DeleteSubKeyTree(System::String* subkey);
        void DeleteSubKeyTree2(System::String* subkey, bool throwOnMissingSubKey);
        void DeleteValue(System::String* name);
        void DeleteValue2(System::String* name, bool throwOnMissingValue);
        System::Security::AccessControl::RegistrySecurity* GetAccessControl();
        System::Security::AccessControl::RegistrySecurity* GetAccessControl2(System::Security::AccessControl::AccessControlSections includeSections);
        cli::array<System::String*>* GetSubKeyNames();
        cli::array<System::String*>* GetValueNames();
        static RegistryKey* FromHandle(SafeHandles::SafeRegistryHandle* handle);
        static RegistryKey* FromHandle2(SafeHandles::SafeRegistryHandle* handle, RegistryView view);
        static RegistryKey* OpenRemoteBaseKey(RegistryHive hKey, System::String* machineName);
        static RegistryKey* OpenRemoteBaseKey2(RegistryHive hKey, System::String* machineName, RegistryView view);
        static RegistryKey* OpenBaseKey(RegistryHive hKey, RegistryView view);
        RegistryKey* OpenSubKey3(System::String* name, RegistryKeyPermissionCheck permissionCheck);
        RegistryKey* OpenSubKey4(System::String* name, RegistryKeyPermissionCheck permissionCheck, System::Security::AccessControl::RegistryRights rights);
        void SetAccessControl(System::Security::AccessControl::RegistrySecurity* registrySecurity);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void AssertKeyStillValid();
        void AssertKeyNameNotNull(System::String* subKeyName);
        void AssertKeyNameLength(System::String* name);
        void DeleteChildKeysAndValues();
        static System::String* DecodeString(cli::array<unsigned char>* data);
        static System::IO::IOException* CreateMarkedForDeletionException();
        static System::String* GetHiveName(RegistryHive hive);
        System::String* get_Name();
        int32_t get_SubKeyCount();
        int32_t get_ValueCount();
        SafeHandles::SafeRegistryHandle* get_Handle();
        RegistryView get_View();
        bool get_IsRoot();
        bool get_IsWritable();
        RegistryHive get_Hive();
        System::Object* get_InternalHandle();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API ExpandString : public virtual System::Object{
        System::String* value;
        
        void constructor(System::String* s);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* Expand();
        
    };
    
    
    struct MANAGED_API KeyHandler : public virtual System::Object{
        static /*constexpr*/ System::String* VolatileDirectoryName() { return _T("volatile-keys"); }
        static System::Collections::Hashtable* key_to_handler;
        static System::Collections::Hashtable* dir_to_handler;
        System::String* Dir;
        System::String* ActualDir;
        bool IsVolatile2;
        System::Collections::Hashtable* values;
        System::String* file;
        bool dirty;
        static System::String* user_store;
        static System::String* machine_store;
        
        KeyHandler();
        static void static_constructor();
        void constructor(RegistryKey* rkey, System::String* basedir);
        void constructor(RegistryKey* rkey, System::String* basedir, bool is_volatile);
        virtual void Finalize_3f786511f9cd099b();
        void Load();
        void LoadKey(System::Security::SecurityElement* se);
        RegistryKey* Ensure(RegistryKey* rkey, System::String* extra, bool writable);
        RegistryKey* Ensure2(RegistryKey* rkey, System::String* extra, bool writable, bool is_volatile);
        RegistryKey* Probe(RegistryKey* rkey, System::String* extra, bool writable);
        static System::String* CombineName(RegistryKey* rkey, System::String* extra);
        static int64_t GetSystemBootTime();
        static int64_t GetRegisteredBootTime(System::String* path);
        static void SaveRegisteredBootTime(System::String* path, int64_t btime);
        static void CleanVolatileKeys();
        static bool VolatileKeyExists(System::String* dir);
        static System::String* GetVolatileDir(System::String* dir);
        static KeyHandler* Lookup(RegistryKey* rkey, bool createNonExisting);
        static System::String* GetRootFromDir(System::String* dir);
        static void Drop(RegistryKey* rkey);
        static void Drop2(System::String* dir);
        static bool Delete(System::String* dir);
        RegistryValueKind GetValueKind(System::String* name);
        System::Object* GetValue(System::String* name, RegistryValueOptions options);
        void SetValue(System::String* name, System::Object* value);
        cli::array<System::String*>* GetValueNames();
        int32_t GetSubKeyCount();
        cli::array<System::String*>* GetSubKeyNames();
        void SetValue2(System::String* name, System::Object* value, RegistryValueKind valueKind);
        void SetDirty();
        void DirtyTimeout(System::Object* state);
        void Flush();
        bool ValueExists(System::String* name);
        void RemoveValue(System::String* name);
        void Save();
        void AssertNotMarkedForDeletion();
        int32_t get_ValueCount();
        bool get_IsMarkedForDeletion();
        static System::String* get_UserStore();
        static System::String* get_MachineStore();
        
    };
    
    
    struct MANAGED_API UnixRegistryApi : public virtual System::Object, public virtual IRegistryApi{
        
        void constructor();
        static System::String* ToUnix(System::String* keyname);
        static bool IsWellKnownKey(System::String* parentKeyName, System::String* keyname);
        RegistryKey* CreateSubKey(RegistryKey* rkey, System::String* keyname);
        RegistryKey* CreateSubKey2(RegistryKey* rkey, System::String* keyname, RegistryOptions options);
        RegistryKey* OpenRemoteBaseKey(RegistryHive hKey, System::String* machineName);
        RegistryKey* OpenSubKey(RegistryKey* rkey, System::String* keyname, bool writable);
        RegistryKey* FromHandle(SafeHandles::SafeRegistryHandle* handle);
        void Flush(RegistryKey* rkey);
        void Close(RegistryKey* rkey);
        System::Object* GetValue(RegistryKey* rkey, System::String* name, System::Object* default_value, RegistryValueOptions options);
        void SetValue(RegistryKey* rkey, System::String* name, System::Object* value);
        void SetValue2(RegistryKey* rkey, System::String* name, System::Object* value, RegistryValueKind valueKind);
        int32_t SubKeyCount(RegistryKey* rkey);
        int32_t ValueCount(RegistryKey* rkey);
        void DeleteValue(RegistryKey* rkey, System::String* name, bool throw_if_missing);
        void DeleteKey(RegistryKey* rkey, System::String* keyname, bool throw_if_missing);
        cli::array<System::String*>* GetSubKeyNames(RegistryKey* rkey);
        cli::array<System::String*>* GetValueNames(RegistryKey* rkey);
        System::String* ToString2(RegistryKey* rkey);
        RegistryKey* CreateSubKey3(RegistryKey* rkey, System::String* keyname, bool writable);
        RegistryKey* CreateSubKey4(RegistryKey* rkey, System::String* keyname, bool writable, bool is_volatile);
        RegistryValueKind GetValueKind(RegistryKey* rkey, System::String* name);
        void* GetHandle(RegistryKey* key);
        
        virtual RegistryKey* CreateSubKey_e3b01f557508b68f(RegistryKey* rkey, System::String* keyname) override;
        virtual RegistryKey* CreateSubKey_d59517498a7eff5a(RegistryKey* rkey, System::String* keyname, RegistryOptions options) override;
        virtual RegistryKey* OpenRemoteBaseKey_f80fed951d8f34a6(RegistryHive hKey, System::String* machineName) override;
        virtual RegistryKey* OpenSubKey_4d6bff263dc4c438(RegistryKey* rkey, System::String* keyname, bool writable) override;
        virtual RegistryKey* FromHandle_46a059a7a448791a(SafeHandles::SafeRegistryHandle* handle) override;
        virtual void Flush_53d355753283f224(RegistryKey* rkey) override;
        virtual void Close_7ab99d30db36a1fc(RegistryKey* rkey) override;
        virtual System::Object* GetValue_e35c4dfdaf0e1cb4(RegistryKey* rkey, System::String* name, System::Object* default_value, RegistryValueOptions options) override;
        virtual void SetValue_9e6c50dfb2e1c48(RegistryKey* rkey, System::String* name, System::Object* value) override;
        virtual void SetValue_5d8b5cf92e3e050f(RegistryKey* rkey, System::String* name, System::Object* value, RegistryValueKind valueKind) override;
        virtual int32_t SubKeyCount_2748a641640ffdf6(RegistryKey* rkey) override;
        virtual int32_t ValueCount_2062387fe7292f8d(RegistryKey* rkey) override;
        virtual void DeleteValue_8d736af9c68b135(RegistryKey* rkey, System::String* name, bool throw_if_missing) override;
        virtual void DeleteKey_84e4c2cae50b1273(RegistryKey* rkey, System::String* keyname, bool throw_if_missing) override;
        virtual cli::array<System::String*>* GetSubKeyNames_34dc199201a58ad7(RegistryKey* rkey) override;
        virtual cli::array<System::String*>* GetValueNames_1b2f3e2c26006c8d(RegistryKey* rkey) override;
        virtual System::String* ToString_8a8e8752aa6cc828(RegistryKey* rkey) override;
        virtual RegistryValueKind GetValueKind_c91458ed4ea1e91a(RegistryKey* rkey, System::String* name) override;
        virtual void* GetHandle_1af66fc049eafa1e(RegistryKey* key) override;
    };
    
    
    struct MANAGED_API Win32RegistryApi : public virtual System::Object, public virtual IRegistryApi{
        static constexpr int32_t OpenRegKeyRead = 131097;
        static constexpr int32_t OpenRegKeyWrite = 131078;
        static constexpr int32_t Int32ByteSize = 4;
        static constexpr int32_t Int64ByteSize = 8;
        static constexpr int32_t RegOptionsNonVolatile = 0;
        static constexpr int32_t RegOptionsVolatile = 1;
        static constexpr int32_t BufferMaxLength = 1024;
        int32_t NativeBytesPerCharacter;
        
        void constructor();
        static int32_t RegCreateKeyEx(void* keyBase, System::String* keyName, int32_t reserved, void* lpClass, int32_t options, int32_t access, void* securityAttrs, void* keyHandle, int32_t disposition);
        static int32_t RegCloseKey(void* keyHandle);
        static int32_t RegConnectRegistry(System::String* machineName, void* hKey, void* keyHandle);
        static int32_t RegFlushKey(void* keyHandle);
        static int32_t RegOpenKeyEx(void* keyBase, System::String* keyName, void* reserved, int32_t access, void* keyHandle);
        static int32_t RegDeleteKey(void* keyHandle, System::String* valueName);
        static int32_t RegDeleteValue(void* keyHandle, System::String* valueName);
        static int32_t RegEnumKey(void* keyBase, int32_t index, System::Text::StringBuilder* nameBuffer, int32_t bufferLength);
        static int32_t RegEnumValue(void* keyBase, int32_t index, System::Text::StringBuilder* nameBuffer, int32_t nameLength, void* reserved, RegistryValueKind type, void* data, void* dataLength);
        static int32_t RegSetValueEx(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, System::String* data, int32_t rawDataLength);
        static int32_t RegSetValueEx2(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, cli::array<unsigned char>* rawData, int32_t rawDataLength);
        static int32_t RegSetValueEx3(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, int32_t data, int32_t rawDataLength);
        static int32_t RegSetValueEx4(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, int64_t data, int32_t rawDataLength);
        static int32_t RegQueryValueEx(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, void* zero, int32_t dataSize);
        static int32_t RegQueryValueEx2(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, cli::array<unsigned char>* data, int32_t dataSize);
        static int32_t RegQueryValueEx3(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, int32_t data, int32_t dataSize);
        static int32_t RegQueryValueEx4(void* keyBase, System::String* valueName, void* reserved, RegistryValueKind type, int64_t data, int32_t dataSize);
        void* GetHandle(RegistryKey* key);
        static bool IsHandleValid(RegistryKey* key);
        RegistryValueKind GetValueKind(RegistryKey* rkey, System::String* name);
        System::Object* GetValue(RegistryKey* rkey, System::String* name, System::Object* defaultValue, RegistryValueOptions options);
        void SetValue(RegistryKey* rkey, System::String* name, System::Object* value, RegistryValueKind valueKind);
        void SetValue2(RegistryKey* rkey, System::String* name, System::Object* value);
        int32_t GetBinaryValue(RegistryKey* rkey, System::String* name, RegistryValueKind type, cli::array<unsigned char>* data, int32_t size);
        int32_t SubKeyCount(RegistryKey* rkey);
        int32_t ValueCount(RegistryKey* rkey);
        RegistryKey* OpenRemoteBaseKey(RegistryHive hKey, System::String* machineName);
        RegistryKey* OpenSubKey(RegistryKey* rkey, System::String* keyName, bool writable);
        void Flush(RegistryKey* rkey);
        void Close(RegistryKey* rkey);
        RegistryKey* FromHandle(SafeHandles::SafeRegistryHandle* handle);
        RegistryKey* CreateSubKey(RegistryKey* rkey, System::String* keyName);
        RegistryKey* CreateSubKey2(RegistryKey* rkey, System::String* keyName, RegistryOptions options);
        void DeleteKey(RegistryKey* rkey, System::String* keyName, bool shouldThrowWhenKeyMissing);
        void DeleteValue(RegistryKey* rkey, System::String* value, bool shouldThrowWhenKeyMissing);
        cli::array<System::String*>* GetSubKeyNames(RegistryKey* rkey);
        cli::array<System::String*>* GetValueNames(RegistryKey* rkey);
        void GenerateException(int32_t errorCode);
        System::String* ToString2(RegistryKey* rkey);
        static System::String* CombineName(RegistryKey* rkey, System::String* localName);
        
        virtual void* GetHandle_1af66fc049eafa1e(RegistryKey* key) override;
        virtual RegistryValueKind GetValueKind_c91458ed4ea1e91a(RegistryKey* rkey, System::String* name) override;
        virtual System::Object* GetValue_e35c4dfdaf0e1cb4(RegistryKey* rkey, System::String* name, System::Object* defaultValue, RegistryValueOptions options) override;
        virtual void SetValue_5d8b5cf92e3e050f(RegistryKey* rkey, System::String* name, System::Object* value, RegistryValueKind valueKind) override;
        virtual void SetValue_9e6c50dfb2e1c48(RegistryKey* rkey, System::String* name, System::Object* value) override;
        virtual int32_t SubKeyCount_2748a641640ffdf6(RegistryKey* rkey) override;
        virtual int32_t ValueCount_2062387fe7292f8d(RegistryKey* rkey) override;
        virtual RegistryKey* OpenRemoteBaseKey_f80fed951d8f34a6(RegistryHive hKey, System::String* machineName) override;
        virtual RegistryKey* OpenSubKey_4d6bff263dc4c438(RegistryKey* rkey, System::String* keyName, bool writable) override;
        virtual void Flush_53d355753283f224(RegistryKey* rkey) override;
        virtual void Close_7ab99d30db36a1fc(RegistryKey* rkey) override;
        virtual RegistryKey* FromHandle_46a059a7a448791a(SafeHandles::SafeRegistryHandle* handle) override;
        virtual RegistryKey* CreateSubKey_e3b01f557508b68f(RegistryKey* rkey, System::String* keyName) override;
        virtual RegistryKey* CreateSubKey_d59517498a7eff5a(RegistryKey* rkey, System::String* keyName, RegistryOptions options) override;
        virtual void DeleteKey_84e4c2cae50b1273(RegistryKey* rkey, System::String* keyName, bool shouldThrowWhenKeyMissing) override;
        virtual void DeleteValue_8d736af9c68b135(RegistryKey* rkey, System::String* value, bool shouldThrowWhenKeyMissing) override;
        virtual cli::array<System::String*>* GetSubKeyNames_34dc199201a58ad7(RegistryKey* rkey) override;
        virtual cli::array<System::String*>* GetValueNames_1b2f3e2c26006c8d(RegistryKey* rkey) override;
        virtual System::String* ToString_8a8e8752aa6cc828(RegistryKey* rkey) override;
    };
    
    
    struct MANAGED_API Win32ResultCode : public virtual System::Object{
        static constexpr int32_t Success = 0;
        static constexpr int32_t FileNotFound = 2;
        static constexpr int32_t AccessDenied = 5;
        static constexpr int32_t InvalidHandle = 6;
        static constexpr int32_t InvalidParameter = 87;
        static constexpr int32_t MoreData = 234;
        static constexpr int32_t NetworkPathNotFound = 53;
        static constexpr int32_t NoMoreEntries = 259;
        static constexpr int32_t MarkedForDeletion = 1018;
        
        void constructor();
        
    };
    
}}
namespace Microsoft { namespace Win32 { namespace SafeHandles {
    
    struct MANAGED_API CriticalHandleMinusOneIsInvalid : public virtual System::Runtime::InteropServices::CriticalHandle{
        
        void constructor();
        virtual bool get_IsInvalid_2fec8dcdb17ef2a3() override;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API CriticalHandleZeroOrMinusOneIsInvalid : public virtual System::Runtime::InteropServices::CriticalHandle{
        
        void constructor();
        virtual bool get_IsInvalid_2fec8dcdb17ef2a3() override;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SafeFileHandle : public virtual SafeHandleZeroOrMinusOneIsInvalid{
        
        void constructor(void* preexistingHandle, bool ownsHandle);
        void constructor();
        virtual bool ReleaseHandle_f52de76ab86d3480() override;
        
    };
    
    
    struct MANAGED_API SafeHandleMinusOneIsInvalid : public virtual System::Runtime::InteropServices::SafeHandle{
        
        void constructor(bool ownsHandle);
        virtual bool get_IsInvalid_64f170f124c20f6b() override;
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SafeRegistryHandle : public virtual SafeHandleZeroOrMinusOneIsInvalid{
        
        void constructor(void* preexistingHandle, bool ownsHandle);
        virtual bool ReleaseHandle_f52de76ab86d3480() override;
        static int32_t RegCloseKey(void* keyHandle);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SafeWaitHandle : public virtual SafeHandleZeroOrMinusOneIsInvalid{
        
        void constructor(void* existingHandle, bool ownsHandle);
        virtual bool ReleaseHandle_f52de76ab86d3480() override;
        
    };
    
}}}
namespace Mono {
    
    struct MANAGED_API PackContext : public virtual System::Object{
        cli::array<unsigned char>* buffer;
        int32_t next;
        System::String* description;
        int32_t i;
        DataConverter* conv;
        int32_t repeat;
        int32_t align;
        
        void constructor();
        void Add(cli::array<unsigned char>* group);
        cli::array<unsigned char>* Get();
        
    };
    
    
    struct MANAGED_API CopyConverter : public virtual DataConverter{
        
        void constructor();
        virtual double GetDouble_982f91d38d946b8(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint64_t GetUInt64_dffd8018e877d5b3(cli::array<unsigned char>* data, int32_t index) override;
        virtual int64_t GetInt64_cb5ad8c264a233be(cli::array<unsigned char>* data, int32_t index) override;
        virtual float GetFloat_2855d1e0112a51d8(cli::array<unsigned char>* data, int32_t index) override;
        virtual int32_t GetInt32_5fe45303465b6967(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint32_t GetUInt32_dddce65a8680a7dd(cli::array<unsigned char>* data, int32_t index) override;
        virtual int16_t GetInt16_758f7ab00ffee775(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint16_t GetUInt16_b622ed9a3e9dd013(cli::array<unsigned char>* data, int32_t index) override;
        virtual void PutBytes_826b3ecadff1e9db(cli::array<unsigned char>* dest, int32_t destIdx, double value) override;
        virtual void PutBytes_9c1149d2e7e5f565(cli::array<unsigned char>* dest, int32_t destIdx, float value) override;
        virtual void PutBytes_cbf2c466c0e65790(cli::array<unsigned char>* dest, int32_t destIdx, int32_t value) override;
        virtual void PutBytes_8baa85ac9d2698a3(cli::array<unsigned char>* dest, int32_t destIdx, uint32_t value) override;
        virtual void PutBytes_6c0f4987776467f3(cli::array<unsigned char>* dest, int32_t destIdx, int64_t value) override;
        virtual void PutBytes_cad08b7dc9cde562(cli::array<unsigned char>* dest, int32_t destIdx, uint64_t value) override;
        virtual void PutBytes_24b92f8078ec7174(cli::array<unsigned char>* dest, int32_t destIdx, int16_t value) override;
        virtual void PutBytes_d2f5dd10e40042a8(cli::array<unsigned char>* dest, int32_t destIdx, uint16_t value) override;
        
    };
    
    
    struct MANAGED_API SwapConverter : public virtual DataConverter{
        
        void constructor();
        virtual double GetDouble_982f91d38d946b8(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint64_t GetUInt64_dffd8018e877d5b3(cli::array<unsigned char>* data, int32_t index) override;
        virtual int64_t GetInt64_cb5ad8c264a233be(cli::array<unsigned char>* data, int32_t index) override;
        virtual float GetFloat_2855d1e0112a51d8(cli::array<unsigned char>* data, int32_t index) override;
        virtual int32_t GetInt32_5fe45303465b6967(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint32_t GetUInt32_dddce65a8680a7dd(cli::array<unsigned char>* data, int32_t index) override;
        virtual int16_t GetInt16_758f7ab00ffee775(cli::array<unsigned char>* data, int32_t index) override;
        virtual uint16_t GetUInt16_b622ed9a3e9dd013(cli::array<unsigned char>* data, int32_t index) override;
        virtual void PutBytes_826b3ecadff1e9db(cli::array<unsigned char>* dest, int32_t destIdx, double value) override;
        virtual void PutBytes_9c1149d2e7e5f565(cli::array<unsigned char>* dest, int32_t destIdx, float value) override;
        virtual void PutBytes_cbf2c466c0e65790(cli::array<unsigned char>* dest, int32_t destIdx, int32_t value) override;
        virtual void PutBytes_8baa85ac9d2698a3(cli::array<unsigned char>* dest, int32_t destIdx, uint32_t value) override;
        virtual void PutBytes_6c0f4987776467f3(cli::array<unsigned char>* dest, int32_t destIdx, int64_t value) override;
        virtual void PutBytes_cad08b7dc9cde562(cli::array<unsigned char>* dest, int32_t destIdx, uint64_t value) override;
        virtual void PutBytes_24b92f8078ec7174(cli::array<unsigned char>* dest, int32_t destIdx, int16_t value) override;
        virtual void PutBytes_d2f5dd10e40042a8(cli::array<unsigned char>* dest, int32_t destIdx, uint16_t value) override;
        
    };
    
    
    struct MANAGED_API Runtime : public virtual System::Object{
        
        void constructor();
        static void mono_runtime_install_handlers();
        static void InstallSignalHandlers();
        static System::String* GetDisplayName();
        
    };
    
}
namespace Mono { namespace Globalization { namespace Unicode {
    
    struct MANAGED_API CodePointIndexer : public virtual System::Object{
        cli::array<TableRange>* ranges;
        int32_t TotalCount;
        int32_t defaultIndex;
        int32_t defaultCP;
        
        void constructor(cli::array<int32_t>* starts, cli::array<int32_t>* ends, int32_t defaultIndex, int32_t defaultCP);
        static System::Array* CompressArray(System::Array* source, System::Type* type, CodePointIndexer* indexer);
        int32_t ToIndex(int32_t cp);
        int32_t ToCodePoint(int32_t i);
        
    };
    
    
    struct MANAGED_API CollationElementTableUtil : public virtual System::Object{
        static CodePointIndexer* Indexer;
        
        CollationElementTableUtil();
        static void static_constructor();
        void constructor();
        
    };
    
    
    struct MANAGED_API TailoringInfo : public virtual System::Object{
        int32_t LCID;
        int32_t TailoringIndex;
        int32_t TailoringCount;
        bool FrenchSort;
        
        void constructor(int32_t lcid, int32_t tailoringIndex, int32_t tailoringCount, bool frenchSort);
        
    };
    
    
    struct MANAGED_API Contraction : public virtual System::Object{
        int32_t Index;
        cli::array<char16_t>* Source;
        System::String* Replacement;
        cli::array<unsigned char>* SortKey2;
        
        void constructor(int32_t index, cli::array<char16_t>* source, System::String* replacement, cli::array<unsigned char>* sortkey);
        
    };
    
    
    struct MANAGED_API ContractionComparer : public virtual System::Object, public virtual System::Collections::IComparer{
        static ContractionComparer* Instance;
        
        ContractionComparer();
        void constructor();
        static void static_constructor();
        int32_t Compare(System::Object* o1, System::Object* o2);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* o1, System::Object* o2) override;
    };
    
    
    struct MANAGED_API Level2Map : public virtual System::Object{
        unsigned char Source;
        unsigned char Replace;
        
        void constructor(unsigned char source, unsigned char replace);
        
    };
    
    
    struct MANAGED_API Level2MapComparer : public virtual System::Object, public virtual System::Collections::IComparer{
        static Level2MapComparer* Instance;
        
        Level2MapComparer();
        void constructor();
        static void static_constructor();
        int32_t Compare(System::Object* o1, System::Object* o2);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* o1, System::Object* o2) override;
    };
    
    
    struct MANAGED_API MSCompatUnicodeTable : public virtual System::Object{
        static constexpr int32_t ResourceVersionSize = 1;
        static int32_t MaxExpansionLength;
        static unsigned char* ignorableFlags;
        static unsigned char* categories;
        static unsigned char* level1;
        static unsigned char* level2;
        static unsigned char* level3;
        static unsigned char* cjkCHScategory;
        static unsigned char* cjkCHTcategory;
        static unsigned char* cjkJAcategory;
        static unsigned char* cjkKOcategory;
        static unsigned char* cjkCHSlv1;
        static unsigned char* cjkCHTlv1;
        static unsigned char* cjkJAlv1;
        static unsigned char* cjkKOlv1;
        static unsigned char* cjkKOlv2;
        static cli::array<char16_t>* tailoringArr;
        static cli::array<TailoringInfo*>* tailoringInfos;
        static System::Object* forLock;
        static bool isReady;
        
        MSCompatUnicodeTable();
        static void static_constructor();
        void constructor();
        static TailoringInfo* GetTailoringInfo(int32_t lcid);
        static void BuildTailoringTables(System::Globalization::CultureInfo* culture, TailoringInfo* t, cli::array<Contraction*>* contractions, cli::array<Level2Map*>* diacriticals);
        static void SetCJKReferences(System::String* name, CodePointIndexer* cjkIndexer, unsigned char* catTable, unsigned char* lv1Table, CodePointIndexer* lv2Indexer, unsigned char* lv2Table);
        static unsigned char Category(int32_t cp);
        static unsigned char Level1(int32_t cp);
        static unsigned char Level2(int32_t cp);
        static unsigned char Level3(int32_t cp);
        static bool IsSortable(System::String* s);
        static bool IsSortable2(int32_t cp);
        static bool IsIgnorable(int32_t cp);
        static bool IsIgnorable2(int32_t cp, unsigned char flag);
        static bool IsIgnorableSymbol(int32_t cp);
        static bool IsIgnorableNonSpacing(int32_t cp);
        static int32_t ToKanaTypeInsensitive(int32_t i);
        static int32_t ToWidthCompat(int32_t i);
        static bool HasSpecialWeight(char16_t c);
        static unsigned char GetJapaneseDashType(char16_t c);
        static bool IsHalfWidthKana(char16_t c);
        static bool IsHiragana(char16_t c);
        static bool IsJapaneseSmallLetter(char16_t c);
        static void* GetResource(System::String* name);
        static uint32_t UInt32FromBytePtr(unsigned char* raw, uint32_t idx);
        static void FillCJK(System::String* culture, CodePointIndexer* cjkIndexer, unsigned char* catTable, unsigned char* lv1Table, CodePointIndexer* lv2Indexer, unsigned char* lv2Table);
        static void FillCJKCore(System::String* culture, CodePointIndexer* cjkIndexer, unsigned char* catTable, unsigned char* lv1Table, CodePointIndexer* cjkLv2Indexer, unsigned char* lv2Table);
        static bool get_IsReady();
        
    };
    
    
    struct MANAGED_API MSCompatUnicodeTableUtil : public virtual System::Object{
        static constexpr unsigned char ResourceVersion = 3;
        static CodePointIndexer* Ignorable;
        static CodePointIndexer* Category;
        static CodePointIndexer* Level1;
        static CodePointIndexer* Level2;
        static CodePointIndexer* Level3;
        static CodePointIndexer* CjkCHS;
        static CodePointIndexer* Cjk;
        
        MSCompatUnicodeTableUtil();
        static void static_constructor();
        void constructor();
        
    };
    
    
    struct MANAGED_API Normalization : public virtual System::Object{
        static constexpr int32_t NoNfd = 1;
        static constexpr int32_t NoNfkd = 2;
        static constexpr int32_t NoNfc = 4;
        static constexpr int32_t MaybeNfc = 8;
        static constexpr int32_t NoNfkc = 16;
        static constexpr int32_t MaybeNfkc = 32;
        static constexpr int32_t FullCompositionExclusion = 64;
        static constexpr int32_t IsUnsafe = 128;
        static constexpr int32_t HangulSBase = 44032;
        static constexpr int32_t HangulLBase = 4352;
        static constexpr int32_t HangulVBase = 4449;
        static constexpr int32_t HangulTBase = 4519;
        static constexpr int32_t HangulLCount = 19;
        static constexpr int32_t HangulVCount = 21;
        static constexpr int32_t HangulTCount = 28;
        static constexpr int32_t HangulNCount = 588;
        static constexpr int32_t HangulSCount = 11172;
        static unsigned char* props;
        static int32_t* mappedChars;
        static int16_t* charMapIndex;
        static int16_t* helperIndex;
        static uint16_t* mapIdxToComposite;
        static unsigned char* combiningClass;
        static System::Object* forLock;
        static bool isReady;
        
        Normalization();
        static void static_constructor();
        void constructor();
        static uint32_t PropValue(int32_t cp);
        static int32_t CharMapIdx(int32_t cp);
        static unsigned char GetCombiningClass(int32_t c);
        static int32_t GetPrimaryCompositeFromMapIndex(int32_t src);
        static int32_t GetPrimaryCompositeHelperIndex(int32_t cp);
        static System::String* Compose(System::String* source, int32_t checkType);
        static System::Text::StringBuilder* Combine(System::String* source, int32_t start, int32_t checkType);
        static void Combine2(System::Text::StringBuilder* sb, int32_t i, int32_t checkType);
        static int32_t CombineHangul(System::Text::StringBuilder* sb, System::String* s, int32_t current);
        static int32_t Fetch(System::Text::StringBuilder* sb, System::String* s, int32_t i);
        static int32_t TryComposeWithPreviousStarter(System::Text::StringBuilder* sb, System::String* s, int32_t current);
        static int32_t TryCompose(int32_t i, int32_t starter, int32_t candidate);
        static System::String* Decompose(System::String* source, int32_t checkType);
        static void Decompose2(System::String* source, System::Text::StringBuilder* sb, int32_t checkType);
        static void ReorderCanonical(System::String* src, System::Text::StringBuilder* sb, int32_t start);
        static void DecomposeChar(System::Text::StringBuilder* sb, cli::array<int32_t>* buf, System::String* s, int32_t i, int32_t checkType, int32_t start);
        static NormalizationCheck QuickCheck(char16_t c, int32_t type);
        static int32_t GetCanonicalHangul(int32_t s, cli::array<int32_t>* buf, int32_t bufIdx);
        static int32_t GetCanonical(int32_t c, cli::array<int32_t>* buf, int32_t bufIdx, int32_t checkType);
        static bool IsNormalized(System::String* source, int32_t type);
        static System::String* Normalize(System::String* source, int32_t type);
        static void load_normalization_resource(void* props, void* mappedChars, void* charMapIndex, void* helperIndex, void* mapIdxToComposite, void* combiningClass);
        static bool get_IsReady();
        
    };
    
    
    struct MANAGED_API NormalizationTableUtil : public virtual System::Object{
        static CodePointIndexer* Prop;
        static CodePointIndexer* Map;
        static CodePointIndexer* Combining;
        static CodePointIndexer* Composite;
        static CodePointIndexer* Helper;
        
        NormalizationTableUtil();
        static void static_constructor();
        void constructor();
        static int32_t PropIdx(int32_t cp);
        static int32_t PropCP(int32_t index);
        static int32_t MapIdx(int32_t cp);
        static int32_t MapCP(int32_t index);
        static int32_t CbIdx(int32_t cp);
        static int32_t CbCP(int32_t index);
        static int32_t get_PropCount();
        static int32_t get_MapCount();
        
    };
    
    
    struct MANAGED_API SimpleCollator : public virtual System::Object{
        static constexpr int32_t UnsafeFlagLength = 96;
        static bool QuickCheckDisabled;
        static SimpleCollator* invariant;
        System::Globalization::TextInfo* textInfo;
        CodePointIndexer* cjkIndexer;
        cli::array<Contraction*>* contractions;
        cli::array<Level2Map*>* level2Maps;
        cli::array<unsigned char>* unsafeFlags;
        unsigned char* cjkCatTable;
        unsigned char* cjkLv1Table;
        unsigned char* cjkLv2Table;
        CodePointIndexer* cjkLv2Indexer;
        int32_t lcid;
        bool frenchSort;
        
        SimpleCollator();
        void constructor(System::Globalization::CultureInfo* culture);
        static void static_constructor();
        void SetCJKTable(System::Globalization::CultureInfo* culture, CodePointIndexer* cjkIndexer, unsigned char* catTable, unsigned char* lv1Table, CodePointIndexer* lv2Indexer, unsigned char* lv2Table);
        static System::Globalization::CultureInfo* GetNeutralCulture(System::Globalization::CultureInfo* info);
        unsigned char Category(int32_t cp);
        unsigned char Level1(int32_t cp);
        unsigned char Level2(int32_t cp, ExtenderType ext);
        static bool IsHalfKana(int32_t cp, System::Globalization::CompareOptions opt);
        Contraction* GetContraction(System::String* s, int32_t start, int32_t end);
        Contraction* GetContraction2(System::String* s, int32_t start, int32_t end, cli::array<Contraction*>* clist);
        Contraction* GetTailContraction(System::String* s, int32_t start, int32_t end);
        Contraction* GetTailContraction2(System::String* s, int32_t start, int32_t end, cli::array<Contraction*>* clist);
        Contraction* GetContraction3(char16_t c);
        Contraction* GetContraction4(char16_t c, cli::array<Contraction*>* clist);
        int32_t FilterOptions(int32_t i, System::Globalization::CompareOptions opt);
        ExtenderType GetExtenderType(int32_t i);
        static unsigned char ToDashTypeValue(ExtenderType ext, System::Globalization::CompareOptions opt);
        int32_t FilterExtender(int32_t i, ExtenderType ext, System::Globalization::CompareOptions opt);
        static bool IsIgnorable(int32_t i, System::Globalization::CompareOptions opt);
        bool IsSafe(int32_t i);
        System::Globalization::SortKey* GetSortKey(System::String* s);
        System::Globalization::SortKey* GetSortKey2(System::String* s, System::Globalization::CompareOptions options);
        System::Globalization::SortKey* GetSortKey3(System::String* s, int32_t start, int32_t length, System::Globalization::CompareOptions options);
        void GetSortKey4(System::String* s, int32_t start, int32_t end, SortKeyBuffer* buf, System::Globalization::CompareOptions opt);
        void FillSortKeyRaw(int32_t i, ExtenderType ext, SortKeyBuffer* buf, System::Globalization::CompareOptions opt);
        void FillSurrogateSortKeyRaw(int32_t i, SortKeyBuffer* buf);
        int32_t Compare(System::String* s1, System::String* s2);
        int32_t Compare2(System::String* s1, System::String* s2, System::Globalization::CompareOptions options);
        int32_t CompareOrdinal(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2);
        int32_t CompareQuick(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2, bool sourceConsumed, bool targetConsumed, bool immediateBreakup);
        int32_t CompareOrdinalIgnoreCase(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2);
        int32_t Compare3(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2, System::Globalization::CompareOptions options);
        void ClearBuffer(unsigned char* buffer, int32_t size);
        bool QuickCheckPossible(System::String* s1, int32_t idx1, int32_t end1, System::String* s2, int32_t idx2, int32_t end2);
        int32_t CompareInternal(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2, bool targetConsumed, bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, Context ctx);
        int32_t CompareFlagPair(bool b1, bool b2);
        bool IsPrefix(System::String* src, System::String* target, System::Globalization::CompareOptions opt);
        bool IsPrefix2(System::String* s, System::String* target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        bool IsPrefix3(System::String* s, System::String* target, int32_t start, int32_t length, bool skipHeadingExtenders, Context ctx);
        bool IsSuffix(System::String* src, System::String* target, System::Globalization::CompareOptions opt);
        bool IsSuffix2(System::String* s, System::String* target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        int32_t IndexOf(System::String* s, System::String* target, System::Globalization::CompareOptions opt);
        int32_t QuickIndexOf(System::String* s, System::String* target, int32_t start, int32_t length, bool testWasUnable);
        int32_t IndexOf2(System::String* s, System::String* target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        int32_t IndexOfOrdinal(System::String* s, System::String* target, int32_t start, int32_t length);
        int32_t IndexOfOrdinalIgnoreCase(System::String* s, System::String* target, int32_t start, int32_t length);
        int32_t IndexOf3(System::String* s, char16_t target, System::Globalization::CompareOptions opt);
        int32_t IndexOf4(System::String* s, char16_t target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        int32_t IndexOfOrdinal2(System::String* s, char16_t target, int32_t start, int32_t length);
        int32_t IndexOfOrdinalIgnoreCase2(System::String* s, char16_t target, int32_t start, int32_t length);
        int32_t IndexOfSortKey(System::String* s, int32_t start, int32_t length, unsigned char* sortkey, char16_t target, int32_t ti, bool noLv4, Context ctx);
        int32_t IndexOf5(System::String* s, System::String* target, int32_t start, int32_t length, unsigned char* targetSortKey, Context ctx);
        int32_t LastIndexOf(System::String* s, System::String* target, System::Globalization::CompareOptions opt);
        int32_t LastIndexOf2(System::String* s, System::String* target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        int32_t LastIndexOfOrdinal(System::String* s, System::String* target, int32_t start, int32_t length);
        int32_t LastIndexOfOrdinalIgnoreCase(System::String* s, System::String* target, int32_t start, int32_t length);
        int32_t LastIndexOf3(System::String* s, char16_t target, System::Globalization::CompareOptions opt);
        int32_t LastIndexOf4(System::String* s, char16_t target, int32_t start, int32_t length, System::Globalization::CompareOptions opt);
        int32_t LastIndexOfOrdinal2(System::String* s, char16_t target, int32_t start, int32_t length);
        int32_t LastIndexOfOrdinalIgnoreCase2(System::String* s, char16_t target, int32_t start, int32_t length);
        int32_t LastIndexOfSortKey(System::String* s, int32_t start, int32_t orgStart, int32_t length, unsigned char* sortkey, int32_t ti, bool noLv4, Context ctx);
        int32_t LastIndexOf5(System::String* s, System::String* target, int32_t start, int32_t length, unsigned char* targetSortKey, Context ctx);
        bool MatchesForward(System::String* s, int32_t idx, int32_t end, int32_t ti, unsigned char* sortkey, bool noLv4, Context ctx);
        bool MatchesForwardCore(System::String* s, int32_t idx, int32_t end, int32_t ti, unsigned char* sortkey, bool noLv4, ExtenderType ext, Contraction* ct, Context ctx);
        bool MatchesPrimitive(System::Globalization::CompareOptions opt, unsigned char* source, int32_t si, ExtenderType ext, unsigned char* target, int32_t ti, bool noLv4);
        bool MatchesBackward(System::String* s, int32_t idx, int32_t end, int32_t orgStart, int32_t ti, unsigned char* sortkey, bool noLv4, Context ctx);
        bool MatchesBackwardCore(System::String* s, int32_t idx, int32_t end, int32_t orgStart, int32_t ti, unsigned char* sortkey, bool noLv4, ExtenderType ext, Contraction* ct, Context ctx);
        
    };
    
    
    struct MANAGED_API SortKeyBuffer : public virtual System::Object{
        cli::array<unsigned char>* l1b;
        System::String* source;
        int32_t l1;
        int32_t lcid;
        System::Globalization::CompareOptions options;
        bool processLevel2;
        bool frenchSort;
        bool frenchSorted;
        cli::array<unsigned char>* l2b;
        cli::array<unsigned char>* l3b;
        cli::array<unsigned char>* l4sb;
        cli::array<unsigned char>* l4tb;
        cli::array<unsigned char>* l4kb;
        cli::array<unsigned char>* l4wb;
        cli::array<unsigned char>* l5b;
        int32_t l2;
        int32_t l3;
        int32_t l4s;
        int32_t l4t;
        int32_t l4k;
        int32_t l4w;
        int32_t l5;
        
        void constructor(int32_t lcid);
        void Reset();
        void ClearBuffer();
        void Initialize(System::Globalization::CompareOptions options, int32_t lcid, System::String* s, bool frenchSort);
        void AppendCJKExtension(unsigned char lv1msb, unsigned char lv1lsb);
        void AppendKana(unsigned char category, unsigned char lv1, unsigned char lv2, unsigned char lv3, bool isSmallKana, unsigned char markType, bool isKatakana, bool isHalfWidth);
        void AppendNormal(unsigned char category, unsigned char lv1, unsigned char lv2, unsigned char lv3);
        void AppendLevel5(unsigned char category, unsigned char lv1);
        void AppendBufferPrimitive(unsigned char value, cli::array<unsigned char>* buf, int32_t bidx);
        System::Globalization::SortKey* GetResultAndReset();
        int32_t GetOptimizedLength(cli::array<unsigned char>* data, int32_t len, unsigned char defaultValue);
        System::Globalization::SortKey* GetResult();
        
    };
    
    
    struct MANAGED_API TestDriver : public virtual System::Object{
        SimpleCollator* coll;
        
        void constructor();
        static void Main(cli::array<System::String*>* args);
        void CheckCultures();
        void Run();
        void Generate();
        void Compare(System::String* s1, System::String* s2);
        void Compare2(System::String* s1, System::String* s2, System::Globalization::CompareOptions opt);
        void Compare3(System::String* s1, int32_t idx1, int32_t len1, System::String* s2, int32_t idx2, int32_t len2, System::Globalization::CompareOptions opt);
        void IndexOf(System::String* s, char16_t c, System::Globalization::CompareOptions opt);
        void IndexOf2(System::String* s, char16_t c, int32_t idx, int32_t len, System::Globalization::CompareOptions opt);
        void IndexOf3(System::String* s1, System::String* s2, System::Globalization::CompareOptions opt);
        void IndexOf4(System::String* s1, System::String* s2, int32_t idx, int32_t len, System::Globalization::CompareOptions opt);
        void IsPrefix(System::String* s1, System::String* s2, System::Globalization::CompareOptions opt);
        void LastIndexOf(System::String* s, char16_t c, System::Globalization::CompareOptions opt);
        void LastIndexOf2(System::String* s1, System::String* s2, System::Globalization::CompareOptions opt);
        void LastIndexOf3(System::String* s1, System::String* s2, int32_t idx, int32_t len, System::Globalization::CompareOptions opt);
        void IsSuffix(System::String* s1, System::String* s2, System::Globalization::CompareOptions opt);
        void DumpSortKey(System::String* s);
        void DumpSortKey2(System::String* s, int32_t idx, int32_t len, System::Globalization::CompareOptions opt);
        
    };
    
    
    struct MANAGED_API Driver : public virtual System::Object{
        
        void constructor();
        static void Main(cli::array<System::String*>* args);
        
    };
    
    
    struct MANAGED_API UnicodeData5_1_0 : public virtual UnicodeData{
        static cli::array<CodePointRange*>* simple_cases;
        static cli::array<CodePointRange*>* category_ranges;
        
        UnicodeData5_1_0();
        void constructor();
        static void static_constructor();
        virtual cli::array<CodePointRange*>* get_SimpleCases_2325e5522320db2d() override;
        virtual cli::array<CodePointRange*>* get_CategoryRanges_7fff5478a3a668d7() override;
        
    };
    
    
    struct MANAGED_API UnicodeDataCodeGeneratorC5_1_0 : public virtual System::Object{
        UnicodeData* catalog;
        System::IO::TextWriter* w;
        
        void constructor(UnicodeData* catalog, System::IO::TextWriter* writer);
        void GenerateStructures();
        void GenerateCodePointRanges(System::String* name, cli::array<CodePointRange*>* ranges);
        void GenerateUnicodeCategoryListC(cli::array<UcdCharacterProperty*>* ucd);
        void GenerateSimpleTitlecaseMappingListC(cli::array<UcdCharacterProperty*>* ucd);
        void GenerateSimpleCaseMappingListC(cli::array<UcdCharacterProperty*>* ucd);
        void GenerateSimpleCaseMappingListC2(cli::array<UcdCharacterProperty*>* ucd, bool upper, bool small);
        GUnicodeType ToGUnicodeCategory(System::Globalization::UnicodeCategory v);
        
    };
    
    
    struct MANAGED_API CodePointRange : public virtual System::Object{
        int32_t _Start_k__BackingField;
        int32_t _End_k__BackingField;
        
        void constructor(int32_t start, int32_t end);
        int32_t get_Start();
        int32_t set_Start(int32_t value);
        int32_t get_End();
        int32_t set_End(int32_t value);
        
    };
    
    
    struct MANAGED_API UcdCharacterProperty : public virtual System::Object{
        int32_t _Codepoint_k__BackingField;
        System::String* _Name_k__BackingField;
        System::Globalization::UnicodeCategory _Category_k__BackingField;
        System::Nullable2<unsigned char> _CanonicalCombiningClass_k__BackingField;
        UcdBidiClass _BidiClass_k__BackingField;
        UcdDecompositionType _DecompositionType_k__BackingField;
        cli::array<int32_t>* _DecompositionMapping_k__BackingField;
        System::String* _DecimalDigitValue_k__BackingField;
        System::String* _DigitValue_k__BackingField;
        System::String* _NumericValue_k__BackingField;
        bool _BidiMirrored_k__BackingField;
        System::String* _Unicode1Name_k__BackingField;
        System::String* _IsoComment_k__BackingField;
        int32_t _SimpleUppercaseMapping_k__BackingField;
        int32_t _SimpleLowercaseMapping_k__BackingField;
        int32_t _SimpleTitlecaseMapping_k__BackingField;
        
        void constructor();
        int32_t get_Codepoint();
        int32_t set_Codepoint(int32_t value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::Globalization::UnicodeCategory get_Category();
        System::Globalization::UnicodeCategory set_Category(System::Globalization::UnicodeCategory value);
        System::Nullable2<unsigned char> get_CanonicalCombiningClass();
        System::Nullable2<unsigned char> set_CanonicalCombiningClass(System::Nullable2<unsigned char> value);
        UcdBidiClass get_BidiClass();
        UcdBidiClass set_BidiClass(UcdBidiClass value);
        UcdDecompositionType get_DecompositionType();
        UcdDecompositionType set_DecompositionType(UcdDecompositionType value);
        cli::array<int32_t>* get_DecompositionMapping();
        cli::array<int32_t>* set_DecompositionMapping(cli::array<int32_t>* value);
        System::String* get_DecimalDigitValue();
        System::String* set_DecimalDigitValue(System::String* value);
        System::String* get_DigitValue();
        System::String* set_DigitValue(System::String* value);
        System::String* get_NumericValue();
        System::String* set_NumericValue(System::String* value);
        bool get_BidiMirrored();
        bool set_BidiMirrored(bool value);
        System::String* get_Unicode1Name();
        System::String* set_Unicode1Name(System::String* value);
        System::String* get_IsoComment();
        System::String* set_IsoComment(System::String* value);
        int32_t get_SimpleUppercaseMapping();
        int32_t set_SimpleUppercaseMapping(int32_t value);
        int32_t get_SimpleLowercaseMapping();
        int32_t set_SimpleLowercaseMapping(int32_t value);
        int32_t get_SimpleTitlecaseMapping();
        int32_t set_SimpleTitlecaseMapping(int32_t value);
        
    };
    
}}}
namespace Mono { namespace Interop {
    
    struct MANAGED_API ComInteropProxy : public virtual System::Runtime::Remoting::Proxies::RealProxy, public virtual System::Runtime::Remoting::IRemotingTypeInfo{
        System::__ComObject* com_object;
        int32_t ref_count;
        System::String* type_name;
        
        void constructor(System::Type* t);
        void constructor(void* pUnk);
        void constructor(void* pUnk, System::Type* t);
        static void AddProxy(void* pItf, ComInteropProxy* proxy);
        static ComInteropProxy* FindProxy(void* pItf);
        void CacheProxy();
        static ComInteropProxy* GetProxy(void* pItf, System::Type* t);
        static ComInteropProxy* CreateProxy(System::Type* t);
        virtual System::Runtime::Remoting::Messaging::IMessage* Invoke_fb5532e107d73b9f(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        bool CanCastTo(System::Type* fromType, System::Object* o);
        System::String* get_TypeName();
        System::String* set_TypeName(System::String* value);
        
        virtual bool CanCastTo_7f8304fa142c3271(System::Type* fromType, System::Object* o) override;
        virtual System::String* get_TypeName_e368785a4c79e626() override;
        virtual System::String* set_TypeName_d3657f810af9c065(System::String* value) override;
    };
    
}}
namespace Mono { namespace Math {
    
    struct MANAGED_API ModulusRing : public virtual System::Object{
        BigInteger* mod;
        BigInteger* constant;
        
        void constructor(BigInteger* modulus);
        void BarrettReduction(BigInteger* x);
        BigInteger* Multiply(BigInteger* a, BigInteger* b);
        BigInteger* Difference(BigInteger* a, BigInteger* b);
        BigInteger* Pow(BigInteger* a, BigInteger* k);
        BigInteger* Pow2(uint32_t b, BigInteger* exp);
        
    };
    
    
    struct MANAGED_API Kernel : public virtual System::Object{
        
        void constructor();
        static BigInteger* AddSameSign(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* Subtract(BigInteger* big, BigInteger* small);
        static void MinusEq(BigInteger* big, BigInteger* small);
        static void PlusEq(BigInteger* bi1, BigInteger* bi2);
        static Sign Compare(BigInteger* bi1, BigInteger* bi2);
        static uint32_t SingleByteDivideInPlace(BigInteger* n, uint32_t d);
        static uint32_t DwordMod(BigInteger* n, uint32_t d);
        static BigInteger* DwordDiv(BigInteger* n, uint32_t d);
        static cli::array<BigInteger*>* DwordDivMod(BigInteger* n, uint32_t d);
        static cli::array<BigInteger*>* multiByteDivide(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* LeftShift(BigInteger* bi, int32_t n);
        static BigInteger* RightShift(BigInteger* bi, int32_t n);
        static BigInteger* MultiplyByDword(BigInteger* n, uint32_t f);
        static void Multiply(cli::array<uint32_t>* x, uint32_t xOffset, uint32_t xLen, cli::array<uint32_t>* y, uint32_t yOffset, uint32_t yLen, cli::array<uint32_t>* d, uint32_t dOffset);
        static void MultiplyMod2p32pmod(cli::array<uint32_t>* x, int32_t xOffset, int32_t xLen, cli::array<uint32_t>* y, int32_t yOffest, int32_t yLen, cli::array<uint32_t>* d, int32_t dOffset, int32_t mod);
        static void SquarePositive(BigInteger* bi, cli::array<uint32_t>* wkSpace);
        static BigInteger* gcd(BigInteger* a, BigInteger* b);
        static uint32_t modInverse(BigInteger* bi, uint32_t modulus);
        static BigInteger* modInverse2(BigInteger* bi, BigInteger* modulus);
        
    };
    
    
    struct MANAGED_API BigInteger : public virtual System::Object{
        static constexpr uint32_t DEFAULT_LEN = 20U;
        static /*constexpr*/ System::String* WouldReturnNegVal() { return _T("Operation would return a negative value"); }
        uint32_t length;
        cli::array<uint32_t>* data;
        static cli::array<uint32_t>* smallPrimes;
        static System::Security::Cryptography::RandomNumberGenerator* rng;
        
        BigInteger();
        void constructor();
        void constructor(Sign sign, uint32_t len);
        void constructor(BigInteger* bi);
        void constructor(BigInteger* bi, uint32_t len);
        void constructor(cli::array<unsigned char>* inData);
        void constructor(cli::array<uint32_t>* inData);
        void constructor(uint32_t ui);
        void constructor(uint64_t ul);
        static void static_constructor();
        static BigInteger* Parse(System::String* number);
        static BigInteger* Add(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* Subtract(BigInteger* bi1, BigInteger* bi2);
        static int32_t Modulus(BigInteger* bi, int32_t i);
        static uint32_t Modulus2(BigInteger* bi, uint32_t ui);
        static BigInteger* Modulus3(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* Divid(BigInteger* bi, int32_t i);
        static BigInteger* Divid2(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* Multiply(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* Multiply2(BigInteger* bi, int32_t i);
        static BigInteger* GenerateRandom(int32_t bits, System::Security::Cryptography::RandomNumberGenerator* rng);
        static BigInteger* GenerateRandom2(int32_t bits);
        void Randomize(System::Security::Cryptography::RandomNumberGenerator* rng);
        void Randomize2();
        int32_t BitCount();
        bool TestBit(uint32_t bitNum);
        bool TestBit2(int32_t bitNum);
        void SetBit(uint32_t bitNum);
        void ClearBit(uint32_t bitNum);
        void SetBit2(uint32_t bitNum, bool value);
        int32_t LowestSetBit();
        cli::array<unsigned char>* GetBytes();
        Sign Compare(BigInteger* bi);
        System::String* ToString2(uint32_t radix);
        System::String* ToString3(uint32_t radix, System::String* characterSet);
        void Normalize();
        void Clear();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        BigInteger* GCD(BigInteger* bi);
        BigInteger* ModInverse(BigInteger* modulus);
        BigInteger* ModPow(BigInteger* exp, BigInteger* n);
        bool IsProbablePrime();
        static BigInteger* NextHighestPrime(BigInteger* bi);
        static BigInteger* GeneratePseudoPrime(int32_t bits);
        void Incr2();
        static BigInteger* op_Implicit(uint32_t value);
        static BigInteger* op_Implicit2(int32_t value);
        static BigInteger* op_Implicit3(uint64_t value);
        static BigInteger* op_Addition(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* op_Subtraction(BigInteger* bi1, BigInteger* bi2);
        static int32_t op_Modulus(BigInteger* bi, int32_t i);
        static uint32_t op_Modulus2(BigInteger* bi, uint32_t ui);
        static BigInteger* op_Modulus3(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* op_Division(BigInteger* bi, int32_t i);
        static BigInteger* op_Division2(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* op_Multiply(BigInteger* bi1, BigInteger* bi2);
        static BigInteger* op_Multiply2(BigInteger* bi, int32_t i);
        static BigInteger* op_LeftShift(BigInteger* bi1, int32_t shiftVal);
        static BigInteger* op_RightShift(BigInteger* bi1, int32_t shiftVal);
        static bool op_Equality(BigInteger* bi1, uint32_t ui);
        static bool op_Inequality(BigInteger* bi1, uint32_t ui);
        static bool op_Equality2(BigInteger* bi1, BigInteger* bi2);
        static bool op_Inequality2(BigInteger* bi1, BigInteger* bi2);
        static bool op_GreaterThan(BigInteger* bi1, BigInteger* bi2);
        static bool op_LessThan(BigInteger* bi1, BigInteger* bi2);
        static bool op_GreaterThanOrEqual(BigInteger* bi1, BigInteger* bi2);
        static bool op_LessThanOrEqual(BigInteger* bi1, BigInteger* bi2);
        static System::Security::Cryptography::RandomNumberGenerator* get_Rng();
        
    };
    
}}
namespace Mono { namespace Math { namespace Prime {
    
    struct MANAGED_API PrimalityTests : public virtual System::Object{
        
        void constructor();
        static int32_t GetSPPRounds(Mono::Math::BigInteger* bi, ConfidenceFactor confidence);
        static bool Test(Mono::Math::BigInteger* n, ConfidenceFactor confidence);
        static bool RabinMillerTest(Mono::Math::BigInteger* n, ConfidenceFactor confidence);
        static bool SmallPrimeSppTest(Mono::Math::BigInteger* bi, ConfidenceFactor confidence);
        
    };
    
}}}
namespace Mono { namespace Math { namespace Prime { namespace Generator {
    
    struct MANAGED_API NextPrimeFinder : public virtual SequentialSearchPrimeGeneratorBase{
        
        void constructor();
        virtual Mono::Math::BigInteger* GenerateSearchBase_e4e6b18ddceac6c(int32_t bits, System::Object* Context) override;
        
    };
    
}}}}
namespace Mono { namespace Security {
    
    struct MANAGED_API ASN1 : public virtual System::Object{
        unsigned char m_nTag;
        cli::array<unsigned char>* m_aValue;
        System::Collections::ArrayList* elist;
        
        void constructor();
        void constructor(unsigned char tag);
        void constructor(unsigned char tag, cli::array<unsigned char>* data);
        void constructor(cli::array<unsigned char>* data);
        bool CompareArray(cli::array<unsigned char>* array1, cli::array<unsigned char>* array2);
        bool Equals3(cli::array<unsigned char>* asn1);
        bool CompareValue(cli::array<unsigned char>* value);
        ASN1* Add(ASN1* asn1);
        virtual cli::array<unsigned char>* GetBytes_b91405229279a4ac();
        void Decode(cli::array<unsigned char>* asn1, int32_t anPos, int32_t anLength);
        void DecodeTLV(cli::array<unsigned char>* asn1, int32_t pos, unsigned char tag, int32_t length, cli::array<unsigned char>* content);
        ASN1* Element2(int32_t index, unsigned char anTag);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void SaveToFile(System::String* filename);
        int32_t get_Count();
        unsigned char get_Tag();
        int32_t get_Length();
        cli::array<unsigned char>* get_Value();
        cli::array<unsigned char>* set_Value(cli::array<unsigned char>* value);
        ASN1* get_Item(int32_t index);
        
    };
    
    
    struct MANAGED_API ASN1Convert : public virtual System::Object{
        
        static ASN1* FromDateTime(System::DateTime dt);
        static ASN1* FromInt32(int32_t value);
        static ASN1* FromOid(System::String* oid);
        static ASN1* FromUnsignedBigInteger(cli::array<unsigned char>* big);
        static int32_t ToInt32(ASN1* asn1);
        static System::String* ToOid(ASN1* asn1);
        static System::DateTime ToDateTime(ASN1* time);
        
    };
    
    
    struct MANAGED_API BitConverterLE : public virtual System::Object{
        
        void constructor();
        static cli::array<unsigned char>* GetUShortBytes(unsigned char* bytes);
        static cli::array<unsigned char>* GetUIntBytes(unsigned char* bytes);
        static cli::array<unsigned char>* GetULongBytes(unsigned char* bytes);
        static cli::array<unsigned char>* GetBytes(bool value);
        static cli::array<unsigned char>* GetBytes2(char16_t value);
        static cli::array<unsigned char>* GetBytes3(int16_t value);
        static cli::array<unsigned char>* GetBytes4(int32_t value);
        static cli::array<unsigned char>* GetBytes5(int64_t value);
        static cli::array<unsigned char>* GetBytes6(uint16_t value);
        static cli::array<unsigned char>* GetBytes7(uint32_t value);
        static cli::array<unsigned char>* GetBytes8(uint64_t value);
        static cli::array<unsigned char>* GetBytes9(float value);
        static cli::array<unsigned char>* GetBytes10(double value);
        static void UShortFromBytes(unsigned char* dst, cli::array<unsigned char>* src, int32_t startIndex);
        static void UIntFromBytes(unsigned char* dst, cli::array<unsigned char>* src, int32_t startIndex);
        static void ULongFromBytes(unsigned char* dst, cli::array<unsigned char>* src, int32_t startIndex);
        static bool ToBoolean(cli::array<unsigned char>* value, int32_t startIndex);
        static char16_t ToChar(cli::array<unsigned char>* value, int32_t startIndex);
        static int16_t ToInt16(cli::array<unsigned char>* value, int32_t startIndex);
        static int32_t ToInt32(cli::array<unsigned char>* value, int32_t startIndex);
        static int64_t ToInt64(cli::array<unsigned char>* value, int32_t startIndex);
        static uint16_t ToUInt16(cli::array<unsigned char>* value, int32_t startIndex);
        static uint32_t ToUInt32(cli::array<unsigned char>* value, int32_t startIndex);
        static uint64_t ToUInt64(cli::array<unsigned char>* value, int32_t startIndex);
        static float ToSingle(cli::array<unsigned char>* value, int32_t startIndex);
        static double ToDouble(cli::array<unsigned char>* value, int32_t startIndex);
        
    };
    
    
    struct MANAGED_API Oid : public virtual System::Object{
        static /*constexpr*/ System::String* rsaEncryption() { return _T("1.2.840.113549.1.1.1"); }
        static /*constexpr*/ System::String* data() { return _T("1.2.840.113549.1.7.1"); }
        static /*constexpr*/ System::String* signedData() { return _T("1.2.840.113549.1.7.2"); }
        static /*constexpr*/ System::String* envelopedData() { return _T("1.2.840.113549.1.7.3"); }
        static /*constexpr*/ System::String* signedAndEnvelopedData() { return _T("1.2.840.113549.1.7.4"); }
        static /*constexpr*/ System::String* digestedData() { return _T("1.2.840.113549.1.7.5"); }
        static /*constexpr*/ System::String* encryptedData() { return _T("1.2.840.113549.1.7.6"); }
        static /*constexpr*/ System::String* contentType() { return _T("1.2.840.113549.1.9.3"); }
        static /*constexpr*/ System::String* messageDigest() { return _T("1.2.840.113549.1.9.4"); }
        static /*constexpr*/ System::String* signingTime() { return _T("1.2.840.113549.1.9.5"); }
        static /*constexpr*/ System::String* countersignature() { return _T("1.2.840.113549.1.9.6"); }
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ContentInfo : public virtual System::Object{
        System::String* contentType;
        ASN1* content;
        
        void constructor();
        void constructor(System::String* oid);
        void constructor(cli::array<unsigned char>* data);
        void constructor(ASN1* asn1);
        ASN1* GetASN1();
        cli::array<unsigned char>* GetBytes();
        ASN1* get_ASN1();
        ASN1* get_Content();
        ASN1* set_Content(ASN1* value);
        System::String* get_ContentType();
        System::String* set_ContentType(System::String* value);
        
    };
    
    
    struct MANAGED_API EncryptedData : public virtual System::Object{
        unsigned char _version;
        ContentInfo* _content;
        ContentInfo* _encryptionAlgorithm;
        cli::array<unsigned char>* _encrypted;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void constructor(ASN1* asn1);
        ASN1* GetASN1();
        cli::array<unsigned char>* GetBytes();
        ASN1* get_ASN1();
        ContentInfo* get_ContentInfo();
        ContentInfo* get_EncryptionAlgorithm();
        cli::array<unsigned char>* get_EncryptedContent();
        unsigned char get_Version();
        unsigned char set_Version(unsigned char value);
        
    };
    
    
    struct MANAGED_API EnvelopedData : public virtual System::Object{
        unsigned char _version;
        ContentInfo* _content;
        ContentInfo* _encryptionAlgorithm;
        System::Collections::ArrayList* _recipientInfos;
        cli::array<unsigned char>* _encrypted;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void constructor(ASN1* asn1);
        ASN1* GetASN1();
        cli::array<unsigned char>* GetBytes();
        System::Collections::ArrayList* get_RecipientInfos();
        ASN1* get_ASN1();
        ContentInfo* get_ContentInfo();
        ContentInfo* get_EncryptionAlgorithm();
        cli::array<unsigned char>* get_EncryptedContent();
        unsigned char get_Version();
        unsigned char set_Version(unsigned char value);
        
    };
    
    
    struct MANAGED_API RecipientInfo : public virtual System::Object{
        int32_t _version;
        System::String* _oid;
        cli::array<unsigned char>* _key;
        cli::array<unsigned char>* _ski;
        System::String* _issuer;
        cli::array<unsigned char>* _serial;
        
        void constructor();
        void constructor(ASN1* data);
        System::String* get_Oid();
        cli::array<unsigned char>* get_Key();
        cli::array<unsigned char>* get_SubjectKeyIdentifier();
        System::String* get_Issuer();
        cli::array<unsigned char>* get_Serial();
        int32_t get_Version();
        
    };
    
    
    struct MANAGED_API SignedData : public virtual System::Object{
        unsigned char version;
        System::String* hashAlgorithm;
        ContentInfo* contentInfo;
        X509::X509CertificateCollection* certs;
        System::Collections::ArrayList* crls;
        SignerInfo* signerInfo;
        bool mda;
        bool signed_;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void constructor(ASN1* asn1);
        bool VerifySignature(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        System::String* OidToName(System::String* oid);
        ASN1* GetASN1();
        cli::array<unsigned char>* GetBytes();
        ASN1* get_ASN1();
        X509::X509CertificateCollection* get_Certificates();
        ContentInfo* get_ContentInfo();
        System::Collections::ArrayList* get_Crls();
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        SignerInfo* get_SignerInfo();
        unsigned char get_Version();
        unsigned char set_Version(unsigned char value);
        bool get_UseAuthenticatedAttributes();
        bool set_UseAuthenticatedAttributes(bool value);
        
    };
    
    
    struct MANAGED_API SignerInfo : public virtual System::Object{
        unsigned char version;
        X509::X509Certificate* x509;
        System::String* hashAlgorithm;
        System::Security::Cryptography::AsymmetricAlgorithm* key;
        System::Collections::ArrayList* authenticatedAttributes;
        System::Collections::ArrayList* unauthenticatedAttributes;
        cli::array<unsigned char>* signature;
        System::String* issuer;
        cli::array<unsigned char>* serial;
        cli::array<unsigned char>* ski;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void constructor(ASN1* asn1);
        ASN1* GetASN1();
        cli::array<unsigned char>* GetBytes();
        System::String* get_IssuerName();
        cli::array<unsigned char>* get_SerialNumber();
        cli::array<unsigned char>* get_SubjectKeyIdentifier();
        ASN1* get_ASN1();
        System::Collections::ArrayList* get_AuthenticatedAttributes();
        X509::X509Certificate* get_Certificate();
        X509::X509Certificate* set_Certificate(X509::X509Certificate* value);
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        System::Security::Cryptography::AsymmetricAlgorithm* get_Key();
        System::Security::Cryptography::AsymmetricAlgorithm* set_Key(System::Security::Cryptography::AsymmetricAlgorithm* value);
        cli::array<unsigned char>* get_Signature();
        cli::array<unsigned char>* set_Signature(cli::array<unsigned char>* value);
        System::Collections::ArrayList* get_UnauthenticatedAttributes();
        unsigned char get_Version();
        unsigned char set_Version(unsigned char value);
        
    };
    
    
    struct MANAGED_API PKCS7 : public virtual System::Object{
        
        void constructor();
        static ASN1* Attribute2(System::String* oid, ASN1* value);
        static ASN1* AlgorithmIdentifier(System::String* oid);
        static ASN1* AlgorithmIdentifier2(System::String* oid, ASN1* parameters);
        static ASN1* IssuerAndSerialNumber(X509::X509Certificate* x509);
        
    };
    
    
    struct MANAGED_API StrongNameSignature : public virtual System::Object{
        cli::array<unsigned char>* hash;
        cli::array<unsigned char>* signature;
        uint32_t signaturePosition;
        uint32_t signatureLength;
        uint32_t metadataPosition;
        uint32_t metadataLength;
        unsigned char cliFlag;
        uint32_t cliFlagPosition;
        
        void constructor();
        cli::array<unsigned char>* get_Hash();
        cli::array<unsigned char>* set_Hash(cli::array<unsigned char>* value);
        cli::array<unsigned char>* get_Signature();
        cli::array<unsigned char>* set_Signature(cli::array<unsigned char>* value);
        uint32_t get_MetadataPosition();
        uint32_t set_MetadataPosition(uint32_t value);
        uint32_t get_MetadataLength();
        uint32_t set_MetadataLength(uint32_t value);
        uint32_t get_SignaturePosition();
        uint32_t set_SignaturePosition(uint32_t value);
        uint32_t get_SignatureLength();
        uint32_t set_SignatureLength(uint32_t value);
        unsigned char get_CliFlag();
        unsigned char set_CliFlag(unsigned char value);
        uint32_t get_CliFlagPosition();
        uint32_t set_CliFlagPosition(uint32_t value);
        
    };
    
    
    struct MANAGED_API StrongName : public virtual System::Object{
        System::Security::Cryptography::RSA* rsa;
        cli::array<unsigned char>* publicKey;
        cli::array<unsigned char>* keyToken;
        System::String* tokenAlgorithm;
        static System::Object* lockObject;
        static bool initialized;
        
        StrongName();
        void constructor();
        void constructor(int32_t keySize);
        void constructor(cli::array<unsigned char>* data);
        void constructor(System::Security::Cryptography::RSA* rsa);
        static void static_constructor();
        void InvalidateCache();
        cli::array<unsigned char>* GetBytes();
        uint32_t RVAtoPosition(uint32_t r, int32_t sections, cli::array<unsigned char>* headers);
        StrongNameSignature* StrongHash(System::IO::Stream* stream, StrongNameOptions options);
        cli::array<unsigned char>* Hash2(System::String* fileName);
        bool Sign2(System::String* fileName);
        bool Verify(System::String* fileName);
        bool Verify2(System::IO::Stream* stream);
        static bool IsAssemblyStrongnamed(System::String* assemblyName);
        static bool VerifySignature(cli::array<unsigned char>* publicKey, int32_t algorithm, cli::array<unsigned char>* hash, cli::array<unsigned char>* signature);
        static bool Verify3(System::Security::Cryptography::RSA* rsa, System::Configuration::Assemblies::AssemblyHashAlgorithm algorithm, cli::array<unsigned char>* hash, cli::array<unsigned char>* signature);
        bool get_CanSign();
        System::Security::Cryptography::RSA* get_RSA();
        System::Security::Cryptography::RSA* set_RSA(System::Security::Cryptography::RSA* value);
        cli::array<unsigned char>* get_PublicKey();
        cli::array<unsigned char>* get_PublicKeyToken();
        System::String* get_TokenAlgorithm();
        System::String* set_TokenAlgorithm(System::String* value);
        
    };
    
    
    struct MANAGED_API Element : public virtual System::Object{
        System::Collections::Hashtable* assemblies;
        
        void constructor();
        void constructor(System::String* assembly, System::String* users);
        System::String* GetUsers(System::String* assembly);
        
    };
    
    
    struct MANAGED_API StrongNameManager : public virtual System::Object{
        static System::Collections::Hashtable* mappings;
        static System::Collections::Hashtable* tokens;
        
        StrongNameManager();
        static void static_constructor();
        void constructor();
        static void LoadConfig(System::String* filename);
        static void LoadMapping(System::Security::SecurityElement* mapping);
        static void LoadVerificationSettings(System::Security::SecurityElement* settings);
        static cli::array<unsigned char>* GetMappedPublicKey(cli::array<unsigned char>* token);
        static bool MustVerify(System::Reflection::AssemblyName* an);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API Uri : public virtual System::Object{
        bool isUnixFilePath;
        System::String* source;
        System::String* scheme;
        System::String* host;
        int32_t port;
        System::String* path;
        System::String* query;
        System::String* fragment;
        System::String* userinfo;
        bool isUnc;
        bool isOpaquePart;
        cli::array<System::String*>* segments;
        bool userEscaped;
        System::String* cachedAbsoluteUri;
        System::String* cachedToString;
        System::String* cachedLocalPath;
        int32_t cachedHashCode;
        bool reduce;
        static System::String* hexUpperChars;
        static System::String* SchemeDelimiter;
        static System::String* UriSchemeFile;
        static System::String* UriSchemeFtp;
        static System::String* UriSchemeGopher;
        static System::String* UriSchemeHttp;
        static System::String* UriSchemeHttps;
        static System::String* UriSchemeMailto;
        static System::String* UriSchemeNews;
        static System::String* UriSchemeNntp;
        static cli::array<UriScheme>* schemes;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map3;
        
        Uri();
        void constructor(System::String* uriString);
        void constructor(System::String* uriString, bool dontEscape);
        void constructor(System::String* uriString, bool dontEscape, bool reduce);
        void constructor(Uri* baseUri, System::String* relativeUri);
        void constructor(Uri* baseUri, System::String* relativeUri, bool dontEscape);
        static void static_constructor();
        static bool IsIPv4Address(System::String* name);
        static bool IsDomainAddress(System::String* name);
        static bool CheckSchemeName(System::String* schemeName);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* comparant) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* GetLeftPart(UriPartial part);
        static int32_t FromHex(char16_t digit);
        static System::String* HexEscape(char16_t character);
        static char16_t HexUnescape(System::String* pattern, int32_t index);
        static bool IsHexDigit(char16_t digit);
        static bool IsHexEncoding(System::String* pattern, int32_t index);
        System::String* MakeRelative(Uri* toUri);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void Escape2();
        static System::String* EscapeString(System::String* str);
        static System::String* EscapeString2(System::String* str, bool escapeReserved, bool escapeHex, bool escapeBrackets);
        void Parse();
        System::String* Unescape(System::String* str);
        System::String* Unescape2(System::String* str, bool excludeSharp);
        void ParseAsWindowsUNC(System::String* uriString);
        void ParseAsWindowsAbsoluteFilePath(System::String* uriString);
        void ParseAsUnixAbsoluteFilePath(System::String* uriString);
        void Parse2(System::String* uriString);
        static System::String* Reduce(System::String* path);
        static System::String* GetSchemeDelimiter(System::String* scheme);
        static int32_t GetDefaultPort(System::String* scheme);
        System::String* GetOpaqueWiseSchemeDelimiter();
        bool IsBadFileSystemCharacter(char16_t ch);
        static bool IsExcludedCharacter(char16_t ch);
        static bool IsPredefinedScheme(System::String* scheme);
        bool IsReservedCharacter(char16_t ch);
        System::String* get_AbsolutePath();
        System::String* get_AbsoluteUri();
        System::String* get_Authority();
        System::String* get_Fragment();
        System::String* get_Host();
        bool get_IsDefaultPort();
        bool get_IsFile();
        bool get_IsLoopback();
        bool get_IsUnc();
        System::String* get_LocalPath();
        System::String* get_PathAndQuery();
        int32_t get_Port();
        System::String* get_Query();
        System::String* get_Scheme();
        cli::array<System::String*>* get_Segments();
        bool get_UserEscaped();
        System::String* get_UserInfo();
        
    };
    
}}
namespace Mono { namespace Security { namespace Authenticode {
    
    struct MANAGED_API AuthenticodeDeformatter : public virtual AuthenticodeBase{
        System::String* filename;
        cli::array<unsigned char>* hash;
        Mono::Security::X509::X509CertificateCollection* coll;
        Mono::Security::ASN1* signedHash;
        System::DateTime timestamp;
        Mono::Security::X509::X509Certificate* signingCertificate;
        int32_t reason;
        bool trustedRoot;
        bool trustedTimestampRoot;
        cli::array<unsigned char>* entry;
        Mono::Security::X509::X509Chain* signerChain;
        Mono::Security::X509::X509Chain* timestampChain;
        
        void constructor();
        void constructor(System::String* fileName);
        bool IsTrusted();
        bool CheckSignature(System::String* fileName);
        bool CompareIssuerSerial(System::String* issuer, cli::array<unsigned char>* serial, Mono::Security::X509::X509Certificate* x509);
        bool VerifySignature(Mono::Security::SignedData* sd, cli::array<unsigned char>* calculatedMessageDigest, System::Security::Cryptography::HashAlgorithm* ha);
        bool VerifyCounterSignature(Mono::Security::SignerInfo* cs, cli::array<unsigned char>* signature);
        void Reset();
        System::String* get_FileName();
        System::String* set_FileName(System::String* value);
        cli::array<unsigned char>* get_Hash();
        int32_t get_Reason();
        cli::array<unsigned char>* get_Signature();
        System::DateTime get_Timestamp();
        Mono::Security::X509::X509CertificateCollection* get_Certificates();
        Mono::Security::X509::X509Certificate* get_SigningCertificate();
        
    };
    
}}}
namespace Mono { namespace Security { namespace Cryptography {
    
    struct MANAGED_API CryptoConvert : public virtual System::Object{
        
        void constructor();
        static int32_t ToInt32LE(cli::array<unsigned char>* bytes, int32_t offset);
        static uint32_t ToUInt32LE(cli::array<unsigned char>* bytes, int32_t offset);
        static cli::array<unsigned char>* GetBytesLE(int32_t val);
        static cli::array<unsigned char>* Trim(cli::array<unsigned char>* array);
        static System::Security::Cryptography::RSA* FromCapiPrivateKeyBlob(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::RSA* FromCapiPrivateKeyBlob2(cli::array<unsigned char>* blob, int32_t offset);
        static System::Security::Cryptography::DSA* FromCapiPrivateKeyBlobDSA(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::DSA* FromCapiPrivateKeyBlobDSA2(cli::array<unsigned char>* blob, int32_t offset);
        static cli::array<unsigned char>* ToCapiPrivateKeyBlob(System::Security::Cryptography::RSA* rsa);
        static cli::array<unsigned char>* ToCapiPrivateKeyBlob2(System::Security::Cryptography::DSA* dsa);
        static System::Security::Cryptography::RSA* FromCapiPublicKeyBlob(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::RSA* FromCapiPublicKeyBlob2(cli::array<unsigned char>* blob, int32_t offset);
        static System::Security::Cryptography::DSA* FromCapiPublicKeyBlobDSA(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::DSA* FromCapiPublicKeyBlobDSA2(cli::array<unsigned char>* blob, int32_t offset);
        static cli::array<unsigned char>* ToCapiPublicKeyBlob(System::Security::Cryptography::RSA* rsa);
        static cli::array<unsigned char>* ToCapiPublicKeyBlob2(System::Security::Cryptography::DSA* dsa);
        static System::Security::Cryptography::RSA* FromCapiKeyBlob(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::RSA* FromCapiKeyBlob2(cli::array<unsigned char>* blob, int32_t offset);
        static System::Security::Cryptography::DSA* FromCapiKeyBlobDSA(cli::array<unsigned char>* blob);
        static System::Security::Cryptography::DSA* FromCapiKeyBlobDSA2(cli::array<unsigned char>* blob, int32_t offset);
        static cli::array<unsigned char>* ToCapiKeyBlob(System::Security::Cryptography::AsymmetricAlgorithm* keypair, bool includePrivateKey);
        static cli::array<unsigned char>* ToCapiKeyBlob2(System::Security::Cryptography::RSA* rsa, bool includePrivateKey);
        static cli::array<unsigned char>* ToCapiKeyBlob3(System::Security::Cryptography::DSA* dsa, bool includePrivateKey);
        static System::String* ToHex(cli::array<unsigned char>* input);
        static unsigned char FromHexChar(char16_t c);
        static cli::array<unsigned char>* FromHex(System::String* hex);
        
    };
    
    
    struct MANAGED_API KeyBuilder : public virtual System::Object{
        static System::Security::Cryptography::RandomNumberGenerator* rng;
        
        void constructor();
        static cli::array<unsigned char>* Key2(int32_t size);
        static cli::array<unsigned char>* IV(int32_t size);
        static System::Security::Cryptography::RandomNumberGenerator* get_Rng();
        
    };
    
    
    struct MANAGED_API BlockProcessor : public virtual System::Object{
        System::Security::Cryptography::ICryptoTransform* transform;
        cli::array<unsigned char>* block;
        int32_t blockSize;
        int32_t blockCount;
        
        void constructor(System::Security::Cryptography::ICryptoTransform* transform);
        void constructor(System::Security::Cryptography::ICryptoTransform* transform, int32_t blockSize);
        virtual void Finalize_d15966cd3f681596();
        void Initialize();
        void Core(cli::array<unsigned char>* rgb);
        void Core2(cli::array<unsigned char>* rgb, int32_t ib, int32_t cb);
        cli::array<unsigned char>* Final();
        
    };
    
    
    struct MANAGED_API DSAManaged : public virtual System::Security::Cryptography::DSA{
        static constexpr int32_t defaultKeySize = 1024;
        bool keypairGenerated;
        bool m_disposed;
        Mono::Math::BigInteger* p;
        Mono::Math::BigInteger* q;
        Mono::Math::BigInteger* g;
        Mono::Math::BigInteger* x;
        Mono::Math::BigInteger* y;
        Mono::Math::BigInteger* j;
        Mono::Math::BigInteger* seed;
        int32_t counter;
        bool j_missing;
        System::Security::Cryptography::RandomNumberGenerator* rng;
        KeyGeneratedEventHandler* KeyGenerated;
        
        void constructor();
        void constructor(int32_t dwKeySize);
        virtual void Finalize_a7ad61d560f2a251();
        void Generate();
        void GenerateKeyPair();
        void add(cli::array<unsigned char>* a, cli::array<unsigned char>* b, int32_t value);
        void GenerateParams(int32_t keyLength);
        cli::array<unsigned char>* NormalizeArray(cli::array<unsigned char>* array);
        virtual System::Security::Cryptography::DSAParameters ExportParameters_c041d0915f31506(bool includePrivateParameters) override;
        virtual void ImportParameters_42bffe0948290f21(System::Security::Cryptography::DSAParameters parameters) override;
        virtual cli::array<unsigned char>* CreateSignature_9fa6bb91f702a4df(cli::array<unsigned char>* rgbHash) override;
        virtual bool VerifySignature_a25545e0d63f0901(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) override;
        virtual void Dispose_2369c0ba816a26e4(bool disposing) override;
        System::Security::Cryptography::RandomNumberGenerator* get_Random();
        virtual int32_t get_KeySize_6bd474632c551ac() override;
        virtual System::String* get_KeyExchangeAlgorithm_e4956689b1767b62() override;
        bool get_PublicOnly();
        virtual System::String* get_SignatureAlgorithm_94f2ebe82aebde31() override;
        void add_KeyGenerated(KeyGeneratedEventHandler* value);
        void remove_KeyGenerated(KeyGeneratedEventHandler* value);
        
    };
    
    
    struct MANAGED_API HMACAlgorithm : public virtual System::Object{
        cli::array<unsigned char>* key;
        cli::array<unsigned char>* hash;
        System::Security::Cryptography::HashAlgorithm* algo;
        System::String* hashName;
        BlockProcessor* block;
        
        void constructor(System::String* algoName);
        virtual void Finalize_76e0a35fcdd856df();
        void CreateHash(System::String* algoName);
        void Dispose();
        void Initialize();
        cli::array<unsigned char>* KeySetup(cli::array<unsigned char>* key, unsigned char padding);
        void Core(cli::array<unsigned char>* rgb, int32_t ib, int32_t cb);
        cli::array<unsigned char>* Final();
        System::Security::Cryptography::HashAlgorithm* get_Algo();
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        cli::array<unsigned char>* get_Key();
        cli::array<unsigned char>* set_Key(cli::array<unsigned char>* value);
        
    };
    
    
    struct MANAGED_API KeyPairPersistence : public virtual System::Object{
        static bool _userPathExists;
        static System::String* _userPath;
        static bool _machinePathExists;
        static System::String* _machinePath;
        System::Security::Cryptography::CspParameters* _params;
        System::String* _keyvalue;
        System::String* _filename;
        System::String* _container;
        static System::Object* lockobj;
        
        KeyPairPersistence();
        void constructor(System::Security::Cryptography::CspParameters* parameters);
        void constructor(System::Security::Cryptography::CspParameters* parameters, System::String* keyPair);
        static void static_constructor();
        bool Load();
        void Save();
        void Remove();
        static bool _CanSecure(System::String* root);
        static bool _ProtectUser(System::String* path);
        static bool _ProtectMachine(System::String* path);
        static bool _IsUserProtected(System::String* path);
        static bool _IsMachineProtected(System::String* path);
        static bool CanSecure(System::String* path);
        static bool ProtectUser(System::String* path);
        static bool ProtectMachine(System::String* path);
        static bool IsUserProtected(System::String* path);
        static bool IsMachineProtected(System::String* path);
        System::Security::Cryptography::CspParameters* Copy(System::Security::Cryptography::CspParameters* p);
        void FromXml(System::String* xml);
        System::String* ToXml();
        System::String* get_Filename();
        System::String* get_KeyValue();
        System::String* set_KeyValue(System::String* value);
        System::Security::Cryptography::CspParameters* get_Parameters();
        static System::String* get_UserPath();
        static System::String* get_MachinePath();
        bool get_CanChange();
        bool get_UseDefaultKeyContainer();
        bool get_UseMachineKeyStore();
        System::String* get_ContainerName();
        
    };
    
    
    struct MANAGED_API MACAlgorithm : public virtual System::Object{
        System::Security::Cryptography::SymmetricAlgorithm* algo;
        System::Security::Cryptography::ICryptoTransform* enc;
        cli::array<unsigned char>* block;
        int32_t blockSize;
        int32_t blockCount;
        
        void constructor(System::Security::Cryptography::SymmetricAlgorithm* algorithm);
        void Initialize(cli::array<unsigned char>* key);
        void Core(cli::array<unsigned char>* rgb, int32_t ib, int32_t cb);
        cli::array<unsigned char>* Final();
        
    };
    
    
    struct MANAGED_API PKCS1 : public virtual System::Object{
        static cli::array<unsigned char>* emptySHA1;
        static cli::array<unsigned char>* emptySHA256;
        static cli::array<unsigned char>* emptySHA384;
        static cli::array<unsigned char>* emptySHA512;
        
        PKCS1();
        void constructor();
        static void static_constructor();
        static bool Compare(cli::array<unsigned char>* array1, cli::array<unsigned char>* array2);
        static cli::array<unsigned char>* xor_(cli::array<unsigned char>* array1, cli::array<unsigned char>* array2);
        static cli::array<unsigned char>* GetEmptyHash(System::Security::Cryptography::HashAlgorithm* hash);
        static cli::array<unsigned char>* I2OSP(int32_t x, int32_t size);
        static cli::array<unsigned char>* I2OSP2(cli::array<unsigned char>* x, int32_t size);
        static cli::array<unsigned char>* OS2IP(cli::array<unsigned char>* x);
        static cli::array<unsigned char>* RSAEP(System::Security::Cryptography::RSA* rsa, cli::array<unsigned char>* m);
        static cli::array<unsigned char>* RSADP(System::Security::Cryptography::RSA* rsa, cli::array<unsigned char>* c);
        static cli::array<unsigned char>* RSASP1(System::Security::Cryptography::RSA* rsa, cli::array<unsigned char>* m);
        static cli::array<unsigned char>* RSAVP1(System::Security::Cryptography::RSA* rsa, cli::array<unsigned char>* s);
        static cli::array<unsigned char>* Encrypt_OAEP(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::HashAlgorithm* hash, System::Security::Cryptography::RandomNumberGenerator* rng, cli::array<unsigned char>* M);
        static cli::array<unsigned char>* Decrypt_OAEP(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* C);
        static cli::array<unsigned char>* Encrypt_v15(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::RandomNumberGenerator* rng, cli::array<unsigned char>* M);
        static cli::array<unsigned char>* Decrypt_v15(System::Security::Cryptography::RSA* rsa, cli::array<unsigned char>* C);
        static cli::array<unsigned char>* Sign_v15(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* hashValue);
        static bool Verify_v15(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* hashValue, cli::array<unsigned char>* signature);
        static bool Verify_v152(System::Security::Cryptography::RSA* rsa, System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* hashValue, cli::array<unsigned char>* signature, bool tryNonStandardEncoding);
        static cli::array<unsigned char>* Encode_v15(System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* hashValue, int32_t emLength);
        static cli::array<unsigned char>* MGF1(System::Security::Cryptography::HashAlgorithm* hash, cli::array<unsigned char>* mgfSeed, int32_t maskLen);
        
    };
    
    
    struct MANAGED_API PrivateKeyInfo : public virtual System::Object{
        int32_t _version;
        System::String* _algorithm;
        cli::array<unsigned char>* _key;
        System::Collections::ArrayList* _list;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void Decode(cli::array<unsigned char>* data);
        cli::array<unsigned char>* GetBytes();
        static cli::array<unsigned char>* RemoveLeadingZero(cli::array<unsigned char>* bigInt);
        static cli::array<unsigned char>* Normalize(cli::array<unsigned char>* bigInt, int32_t length);
        static System::Security::Cryptography::RSA* DecodeRSA(cli::array<unsigned char>* keypair);
        static cli::array<unsigned char>* Encode(System::Security::Cryptography::RSA* rsa);
        static System::Security::Cryptography::DSA* DecodeDSA(cli::array<unsigned char>* privateKey, System::Security::Cryptography::DSAParameters dsaParameters);
        static cli::array<unsigned char>* Encode2(System::Security::Cryptography::DSA* dsa);
        static cli::array<unsigned char>* Encode3(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        System::String* get_Algorithm();
        System::String* set_Algorithm(System::String* value);
        System::Collections::ArrayList* get_Attributes();
        cli::array<unsigned char>* get_PrivateKey();
        cli::array<unsigned char>* set_PrivateKey(cli::array<unsigned char>* value);
        int32_t get_Version();
        int32_t set_Version(int32_t value);
        
    };
    
    
    struct MANAGED_API EncryptedPrivateKeyInfo : public virtual System::Object{
        System::String* _algorithm;
        cli::array<unsigned char>* _salt;
        int32_t _iterations;
        cli::array<unsigned char>* _data;
        
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void Decode(cli::array<unsigned char>* data);
        cli::array<unsigned char>* GetBytes();
        System::String* get_Algorithm();
        System::String* set_Algorithm(System::String* value);
        cli::array<unsigned char>* get_EncryptedData();
        cli::array<unsigned char>* set_EncryptedData(cli::array<unsigned char>* value);
        cli::array<unsigned char>* get_Salt();
        cli::array<unsigned char>* set_Salt(cli::array<unsigned char>* value);
        int32_t get_IterationCount();
        int32_t set_IterationCount(int32_t value);
        
    };
    
    
    struct MANAGED_API PKCS8 : public virtual System::Object{
        
        void constructor();
        static KeyInfo GetType2(cli::array<unsigned char>* data);
        
    };
    
    
    struct MANAGED_API RSAManaged : public virtual System::Security::Cryptography::RSA{
        static constexpr int32_t defaultKeySize = 1024;
        bool isCRTpossible;
        bool keyBlinding;
        bool keypairGenerated;
        bool m_disposed;
        Mono::Math::BigInteger* d;
        Mono::Math::BigInteger* p;
        Mono::Math::BigInteger* q;
        Mono::Math::BigInteger* dp;
        Mono::Math::BigInteger* dq;
        Mono::Math::BigInteger* qInv;
        Mono::Math::BigInteger* n;
        Mono::Math::BigInteger* e;
        KeyGeneratedEventHandler2* KeyGenerated;
        
        void constructor();
        void constructor(int32_t keySize);
        virtual void Finalize_3e5c4b545ea2b716();
        void GenerateKeyPair();
        virtual cli::array<unsigned char>* DecryptValue_e0f03fff133976bf(cli::array<unsigned char>* rgb) override;
        virtual cli::array<unsigned char>* EncryptValue_16a44acec74209ed(cli::array<unsigned char>* rgb) override;
        virtual System::Security::Cryptography::RSAParameters ExportParameters_f406cf113d936197(bool includePrivateParameters) override;
        virtual void ImportParameters_43620ad65e380dd(System::Security::Cryptography::RSAParameters parameters) override;
        virtual void Dispose_2369c0ba816a26e4(bool disposing) override;
        virtual System::String* ToXmlString_681b6b8ae145c576(bool includePrivateParameters) override;
        cli::array<unsigned char>* GetPaddedValue(Mono::Math::BigInteger* value, int32_t length);
        virtual int32_t get_KeySize_6bd474632c551ac() override;
        virtual System::String* get_KeyExchangeAlgorithm_e4956689b1767b62() override;
        bool get_PublicOnly();
        virtual System::String* get_SignatureAlgorithm_94f2ebe82aebde31() override;
        bool get_UseKeyBlinding();
        bool set_UseKeyBlinding(bool value);
        bool get_IsCrtPossible();
        void add_KeyGenerated(KeyGeneratedEventHandler2* value);
        void remove_KeyGenerated(KeyGeneratedEventHandler2* value);
        
    };
    
}}}
namespace Mono { namespace Security { namespace X509 {
    
    struct MANAGED_API PKCS5 : public virtual System::Object{
        static /*constexpr*/ System::String* pbeWithMD2AndDESCBC() { return _T("1.2.840.113549.1.5.1"); }
        static /*constexpr*/ System::String* pbeWithMD5AndDESCBC() { return _T("1.2.840.113549.1.5.3"); }
        static /*constexpr*/ System::String* pbeWithMD2AndRC2CBC() { return _T("1.2.840.113549.1.5.4"); }
        static /*constexpr*/ System::String* pbeWithMD5AndRC2CBC() { return _T("1.2.840.113549.1.5.6"); }
        static /*constexpr*/ System::String* pbeWithSHA1AndDESCBC() { return _T("1.2.840.113549.1.5.10"); }
        static /*constexpr*/ System::String* pbeWithSHA1AndRC2CBC() { return _T("1.2.840.113549.1.5.11"); }
        
        void constructor();
        
    };
    
    
    struct MANAGED_API PKCS9 : public virtual System::Object{
        static /*constexpr*/ System::String* friendlyName() { return _T("1.2.840.113549.1.9.20"); }
        static /*constexpr*/ System::String* localKeyId() { return _T("1.2.840.113549.1.9.21"); }
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SafeBag : public virtual System::Object{
        System::String* _bagOID;
        Mono::Security::ASN1* _asn1;
        
        void constructor(System::String* bagOID, Mono::Security::ASN1* asn1);
        System::String* get_BagOID();
        Mono::Security::ASN1* get_ASN1();
        
    };
    
    
    struct MANAGED_API DeriveBytes : public virtual System::Object{
        static cli::array<unsigned char>* keyDiversifier;
        static cli::array<unsigned char>* ivDiversifier;
        static cli::array<unsigned char>* macDiversifier;
        System::String* _hashName;
        int32_t _iterations;
        cli::array<unsigned char>* _password;
        cli::array<unsigned char>* _salt;
        
        DeriveBytes();
        void constructor();
        static void static_constructor();
        void Adjust(cli::array<unsigned char>* a, int32_t aOff, cli::array<unsigned char>* b);
        cli::array<unsigned char>* Derive(cli::array<unsigned char>* diversifier, int32_t n);
        cli::array<unsigned char>* DeriveKey(int32_t size);
        cli::array<unsigned char>* DeriveIV(int32_t size);
        cli::array<unsigned char>* DeriveMAC(int32_t size);
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        int32_t get_IterationCount();
        int32_t set_IterationCount(int32_t value);
        cli::array<unsigned char>* get_Password();
        cli::array<unsigned char>* set_Password(cli::array<unsigned char>* value);
        cli::array<unsigned char>* get_Salt();
        cli::array<unsigned char>* set_Salt(cli::array<unsigned char>* value);
        
    };
    
    
    struct MANAGED_API PKCS12 : public virtual System::Object, public virtual System::ICloneable{
        static /*constexpr*/ System::String* pbeWithSHAAnd128BitRC4() { return _T("1.2.840.113549.1.12.1.1"); }
        static /*constexpr*/ System::String* pbeWithSHAAnd40BitRC4() { return _T("1.2.840.113549.1.12.1.2"); }
        static /*constexpr*/ System::String* pbeWithSHAAnd3KeyTripleDESCBC() { return _T("1.2.840.113549.1.12.1.3"); }
        static /*constexpr*/ System::String* pbeWithSHAAnd2KeyTripleDESCBC() { return _T("1.2.840.113549.1.12.1.4"); }
        static /*constexpr*/ System::String* pbeWithSHAAnd128BitRC2CBC() { return _T("1.2.840.113549.1.12.1.5"); }
        static /*constexpr*/ System::String* pbeWithSHAAnd40BitRC2CBC() { return _T("1.2.840.113549.1.12.1.6"); }
        static /*constexpr*/ System::String* keyBag() { return _T("1.2.840.113549.1.12.10.1.1"); }
        static /*constexpr*/ System::String* pkcs8ShroudedKeyBag() { return _T("1.2.840.113549.1.12.10.1.2"); }
        static /*constexpr*/ System::String* certBag() { return _T("1.2.840.113549.1.12.10.1.3"); }
        static /*constexpr*/ System::String* crlBag() { return _T("1.2.840.113549.1.12.10.1.4"); }
        static /*constexpr*/ System::String* secretBag() { return _T("1.2.840.113549.1.12.10.1.5"); }
        static /*constexpr*/ System::String* safeContentsBag() { return _T("1.2.840.113549.1.12.10.1.6"); }
        static /*constexpr*/ System::String* x509Certificate() { return _T("1.2.840.113549.1.9.22.1"); }
        static /*constexpr*/ System::String* sdsiCertificate() { return _T("1.2.840.113549.1.9.22.2"); }
        static /*constexpr*/ System::String* x509Crl() { return _T("1.2.840.113549.1.9.23.1"); }
        static constexpr int32_t CryptoApiPasswordLimit = 32;
        static int32_t recommendedIterationCount;
        cli::array<unsigned char>* _password;
        System::Collections::ArrayList* _keyBags;
        System::Collections::ArrayList* _secretBags;
        X509CertificateCollection* _certs;
        bool _keyBagsChanged;
        bool _secretBagsChanged;
        bool _certsChanged;
        int32_t _iterations;
        System::Collections::ArrayList* _safeBags;
        System::Security::Cryptography::RandomNumberGenerator* _rng;
        static int32_t password_max_length;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map4;
        
        PKCS12();
        void constructor();
        void constructor(cli::array<unsigned char>* data);
        void constructor(cli::array<unsigned char>* data, System::String* password);
        void constructor(cli::array<unsigned char>* data, cli::array<unsigned char>* password);
        static void static_constructor();
        virtual void Finalize_f05b2c1a942579d3();
        void Decode(cli::array<unsigned char>* data);
        bool Compare(cli::array<unsigned char>* expected, cli::array<unsigned char>* actual);
        System::Security::Cryptography::SymmetricAlgorithm* GetSymmetricAlgorithm(System::String* algorithmOid, cli::array<unsigned char>* salt, int32_t iterationCount);
        cli::array<unsigned char>* Decrypt(System::String* algorithmOid, cli::array<unsigned char>* salt, int32_t iterationCount, cli::array<unsigned char>* encryptedData);
        cli::array<unsigned char>* Decrypt2(Mono::Security::EncryptedData* ed);
        cli::array<unsigned char>* Encrypt(System::String* algorithmOid, cli::array<unsigned char>* salt, int32_t iterationCount, cli::array<unsigned char>* data);
        System::Security::Cryptography::DSAParameters GetExistingParameters(bool found);
        void AddPrivateKey(Mono::Security::Cryptography::PrivateKeyInfo* pki);
        void ReadSafeBag(Mono::Security::ASN1* safeBag);
        Mono::Security::ASN1* Pkcs8ShroudedKeyBagSafeBag(System::Security::Cryptography::AsymmetricAlgorithm* aa, System::Collections::IDictionary* attributes);
        Mono::Security::ASN1* KeyBagSafeBag(System::Security::Cryptography::AsymmetricAlgorithm* aa, System::Collections::IDictionary* attributes);
        Mono::Security::ASN1* SecretBagSafeBag(cli::array<unsigned char>* secret, System::Collections::IDictionary* attributes);
        Mono::Security::ASN1* CertificateSafeBag(X509Certificate* x509, System::Collections::IDictionary* attributes);
        cli::array<unsigned char>* MAC(cli::array<unsigned char>* password, cli::array<unsigned char>* salt, int32_t iterations, cli::array<unsigned char>* data);
        cli::array<unsigned char>* GetBytes();
        Mono::Security::ContentInfo* EncryptedContentInfo(Mono::Security::ASN1* safeBags, System::String* algorithmOid);
        void AddCertificate(X509Certificate* cert);
        void AddCertificate2(X509Certificate* cert, System::Collections::IDictionary* attributes);
        void RemoveCertificate(X509Certificate* cert);
        void RemoveCertificate2(X509Certificate* cert, System::Collections::IDictionary* attrs);
        bool CompareAsymmetricAlgorithm(System::Security::Cryptography::AsymmetricAlgorithm* a1, System::Security::Cryptography::AsymmetricAlgorithm* a2);
        void AddPkcs8ShroudedKeyBag(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        void AddPkcs8ShroudedKeyBag2(System::Security::Cryptography::AsymmetricAlgorithm* aa, System::Collections::IDictionary* attributes);
        void RemovePkcs8ShroudedKeyBag(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        void AddKeyBag(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        void AddKeyBag2(System::Security::Cryptography::AsymmetricAlgorithm* aa, System::Collections::IDictionary* attributes);
        void RemoveKeyBag(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        void AddSecretBag(cli::array<unsigned char>* secret);
        void AddSecretBag2(cli::array<unsigned char>* secret, System::Collections::IDictionary* attributes);
        void RemoveSecretBag(cli::array<unsigned char>* secret);
        System::Security::Cryptography::AsymmetricAlgorithm* GetAsymmetricAlgorithm(System::Collections::IDictionary* attrs);
        cli::array<unsigned char>* GetSecret(System::Collections::IDictionary* attrs);
        X509Certificate* GetCertificate(System::Collections::IDictionary* attrs);
        System::Collections::IDictionary* GetAttributes(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        System::Collections::IDictionary* GetAttributes2(X509Certificate* cert);
        void SaveToFile(System::String* filename);
        System::Object* Clone();
        static cli::array<unsigned char>* LoadFile(System::String* filename);
        static PKCS12* LoadFromFile(System::String* filename);
        static PKCS12* LoadFromFile2(System::String* filename, System::String* password);
        void set_Password(System::String* value);
        int32_t get_IterationCount();
        int32_t set_IterationCount(int32_t value);
        System::Collections::ArrayList* get_Keys();
        System::Collections::ArrayList* get_Secrets();
        X509CertificateCollection* get_Certificates();
        System::Security::Cryptography::RandomNumberGenerator* get_RNG();
        static int32_t get_MaximumPasswordLength();
        static int32_t set_MaximumPasswordLength(int32_t value);
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API TestAnchors : public virtual TrustAnchors{
        static cli::array<unsigned char>* rootagency;
        static cli::array<unsigned char>* monoTestRoot;
        
        TestAnchors();
        static void static_constructor();
        void constructor();
        
    };
    
    
    struct MANAGED_API X501 : public virtual System::Object{
        static cli::array<unsigned char>* countryName;
        static cli::array<unsigned char>* organizationName;
        static cli::array<unsigned char>* organizationalUnitName;
        static cli::array<unsigned char>* commonName;
        static cli::array<unsigned char>* localityName;
        static cli::array<unsigned char>* stateOrProvinceName;
        static cli::array<unsigned char>* streetAddress;
        static cli::array<unsigned char>* domainComponent;
        static cli::array<unsigned char>* userid;
        static cli::array<unsigned char>* email;
        static cli::array<unsigned char>* dnQualifier;
        static cli::array<unsigned char>* title;
        static cli::array<unsigned char>* surname;
        static cli::array<unsigned char>* givenName;
        static cli::array<unsigned char>* initial;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map5;
        
        X501();
        void constructor();
        static void static_constructor();
        static System::String* ToString2(Mono::Security::ASN1* seq);
        static System::String* ToString3(Mono::Security::ASN1* seq, bool reversed, System::String* separator, bool quotes);
        static void AppendEntry(System::Text::StringBuilder* sb, Mono::Security::ASN1* entry, bool quotes);
        static AttributeTypeAndValue* GetAttributeFromOid(System::String* attributeType);
        static bool IsOid(System::String* oid);
        static AttributeTypeAndValue* ReadAttribute(System::String* value, int32_t pos);
        static bool IsHex(char16_t c);
        static System::String* ReadHex(System::String* value, int32_t pos);
        static int32_t ReadEscaped(System::Text::StringBuilder* sb, System::String* value, int32_t pos);
        static int32_t ReadQuoted(System::Text::StringBuilder* sb, System::String* value, int32_t pos);
        static System::String* ReadValue(System::String* value, int32_t pos);
        static Mono::Security::ASN1* FromString(System::String* rdn);
        
    };
    
    
    struct MANAGED_API X509Certificate : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        Mono::Security::ASN1* decoder;
        cli::array<unsigned char>* m_encodedcert;
        System::DateTime m_from;
        System::DateTime m_until;
        Mono::Security::ASN1* issuer;
        System::String* m_issuername;
        System::String* m_keyalgo;
        cli::array<unsigned char>* m_keyalgoparams;
        Mono::Security::ASN1* subject;
        System::String* m_subject;
        cli::array<unsigned char>* m_publickey;
        cli::array<unsigned char>* signature;
        System::String* m_signaturealgo;
        cli::array<unsigned char>* m_signaturealgoparams;
        cli::array<unsigned char>* certhash;
        System::Security::Cryptography::RSA* _rsa;
        System::Security::Cryptography::DSA* _dsa;
        int32_t version;
        cli::array<unsigned char>* serialnumber;
        cli::array<unsigned char>* issuerUniqueID;
        cli::array<unsigned char>* subjectUniqueID;
        X509ExtensionCollection* extensions;
        static System::String* encoding_error;
        
        X509Certificate();
        void constructor(cli::array<unsigned char>* data);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        void Parse(cli::array<unsigned char>* data);
        cli::array<unsigned char>* GetUnsignedBigInteger(cli::array<unsigned char>* integer);
        bool WasCurrent(System::DateTime instant);
        bool VerifySignature(System::Security::Cryptography::DSA* dsa);
        System::String* GetHashNameFromOID(System::String* oid);
        bool VerifySignature2(System::Security::Cryptography::RSA* rsa);
        bool VerifySignature3(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        bool CheckSignature(cli::array<unsigned char>* hash, System::String* hashAlgorithm, cli::array<unsigned char>* signature);
        Mono::Security::ASN1* GetIssuerName();
        Mono::Security::ASN1* GetSubjectName();
        virtual void GetObjectData_d40d37eb78c2fb36(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static cli::array<unsigned char>* PEM(System::String* type, cli::array<unsigned char>* data);
        System::Security::Cryptography::DSA* get_DSA();
        System::Security::Cryptography::DSA* set_DSA(System::Security::Cryptography::DSA* value);
        X509ExtensionCollection* get_Extensions();
        cli::array<unsigned char>* get_Hash();
        virtual System::String* get_IssuerName_25458e2c269ceeaa();
        virtual System::String* get_KeyAlgorithm_26169b6c5ae631ca();
        virtual cli::array<unsigned char>* get_KeyAlgorithmParameters_7dd2925ed6c97721();
        virtual cli::array<unsigned char>* set_KeyAlgorithmParameters_801b9760d32c6ea0(cli::array<unsigned char>* value);
        virtual cli::array<unsigned char>* get_PublicKey_bbce0ec4cf2d16e();
        virtual System::Security::Cryptography::RSA* get_RSA_32368d0ddec581fa();
        virtual System::Security::Cryptography::RSA* set_RSA_c0bdcd7611af9c2e(System::Security::Cryptography::RSA* value);
        virtual cli::array<unsigned char>* get_RawData_c0a18e988d76611c();
        virtual cli::array<unsigned char>* get_SerialNumber_ac6911419cae47b0();
        virtual cli::array<unsigned char>* get_Signature_70c9a3cf49c25627();
        virtual System::String* get_SignatureAlgorithm_95f3bb8eaa3ff774();
        virtual cli::array<unsigned char>* get_SignatureAlgorithmParameters_40b5c25a4236cd23();
        virtual System::String* get_SubjectName_8e1ad5a09a5c9697();
        virtual System::DateTime get_ValidFrom_b9a836b86f941230();
        virtual System::DateTime get_ValidUntil_63987634a232abc0();
        int32_t get_Version();
        bool get_IsCurrent();
        cli::array<unsigned char>* get_IssuerUniqueIdentifier();
        cli::array<unsigned char>* get_SubjectUniqueIdentifier();
        bool get_IsSelfSigned();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API X509CertificateEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        System::Collections::IEnumerator* enumerator;
        
        void constructor(X509CertificateCollection* mappings);
        bool MoveNext();
        void Reset();
        bool MoveNext2();
        void Reset2();
        X509Certificate* get_Current();
        System::Object* get_Current2();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API X509CertificateCollection : public virtual System::Collections::CollectionBase{
        
        void constructor();
        void constructor(cli::array<X509Certificate*>* value);
        void constructor(X509CertificateCollection* value);
        int32_t Add2(X509Certificate* value);
        void AddRange(cli::array<X509Certificate*>* value);
        void AddRange2(X509CertificateCollection* value);
        bool Contains2(X509Certificate* value);
        void CopyTo2(cli::array<X509Certificate*>* array, int32_t index);
        X509CertificateEnumerator* GetEnumerator2() /*new*/;
        System::Collections::IEnumerator* GetEnumerator3();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t IndexOf2(X509Certificate* value);
        void Insert2(int32_t index, X509Certificate* value);
        void Remove2(X509Certificate* value);
        bool Compare(cli::array<unsigned char>* array1, cli::array<unsigned char>* array2);
        X509Certificate* get_Item2(int32_t index);
        X509Certificate* set_Item2(int32_t index, X509Certificate* value);
        
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
    };
    
    
    struct MANAGED_API X509Chain : public virtual System::Object{
        X509CertificateCollection* roots;
        X509CertificateCollection* certs;
        X509Certificate* _root;
        X509CertificateCollection* _chain;
        X509ChainStatusFlags _status;
        
        void constructor();
        void constructor(X509CertificateCollection* chain);
        void LoadCertificate(X509Certificate* x509);
        void LoadCertificates(X509CertificateCollection* collection);
        X509Certificate* FindByIssuerName(System::String* issuerName);
        bool Build(X509Certificate* leaf);
        void Reset();
        bool IsValid(X509Certificate* cert);
        X509Certificate* FindCertificateParent(X509Certificate* child);
        X509Certificate* FindCertificateRoot(X509Certificate* potentialRoot);
        bool IsTrusted(X509Certificate* potentialTrusted);
        bool IsParent(X509Certificate* child, X509Certificate* parent);
        X509CertificateCollection* get_Chain();
        X509Certificate* get_Root();
        X509ChainStatusFlags get_Status();
        X509CertificateCollection* get_TrustAnchors();
        X509CertificateCollection* set_TrustAnchors(X509CertificateCollection* value);
        
    };
    
    
    struct MANAGED_API X509CrlEntry : public virtual System::Object{
        cli::array<unsigned char>* sn;
        System::DateTime revocationDate;
        X509ExtensionCollection* extensions;
        
        void constructor(cli::array<unsigned char>* serialNumber, System::DateTime revocationDate, X509ExtensionCollection* extensions);
        void constructor(Mono::Security::ASN1* entry);
        cli::array<unsigned char>* GetBytes();
        cli::array<unsigned char>* get_SerialNumber();
        System::DateTime get_RevocationDate();
        X509ExtensionCollection* get_Extensions();
        
    };
    
    
    struct MANAGED_API X509Crl : public virtual System::Object{
        System::String* issuer;
        unsigned char version;
        System::DateTime thisUpdate;
        System::DateTime nextUpdate;
        System::Collections::ArrayList* entries;
        System::String* signatureOID;
        cli::array<unsigned char>* signature;
        X509ExtensionCollection* extensions;
        cli::array<unsigned char>* encoded;
        cli::array<unsigned char>* hash_value;
        
        void constructor(cli::array<unsigned char>* crl);
        void Parse(cli::array<unsigned char>* crl);
        bool WasCurrent(System::DateTime instant);
        cli::array<unsigned char>* GetBytes();
        bool Compare(cli::array<unsigned char>* array1, cli::array<unsigned char>* array2);
        X509CrlEntry* GetCrlEntry(X509Certificate* x509);
        X509CrlEntry* GetCrlEntry2(cli::array<unsigned char>* serialNumber);
        bool VerifySignature(X509Certificate* x509);
        System::String* GetHashName();
        bool VerifySignature2(System::Security::Cryptography::DSA* dsa);
        bool VerifySignature3(System::Security::Cryptography::RSA* rsa);
        bool VerifySignature4(System::Security::Cryptography::AsymmetricAlgorithm* aa);
        static X509Crl* CreateFromFile(System::String* filename);
        System::Collections::ArrayList* get_Entries();
        X509CrlEntry* get_Item(int32_t index);
        X509CrlEntry* get_Item2(cli::array<unsigned char>* serialNumber);
        X509ExtensionCollection* get_Extensions();
        cli::array<unsigned char>* get_Hash();
        System::String* get_IssuerName();
        System::DateTime get_NextUpdate();
        System::DateTime get_ThisUpdate();
        System::String* get_SignatureAlgorithm();
        cli::array<unsigned char>* get_Signature();
        cli::array<unsigned char>* get_RawData();
        unsigned char get_Version();
        bool get_IsCurrent();
        
    };
    
    
    struct MANAGED_API X509ExtensionCollection : public virtual System::Collections::CollectionBase{
        bool readOnly;
        
        void constructor();
        void constructor(Mono::Security::ASN1* asn1);
        int32_t Add2(X509Extension* extension);
        void AddRange(cli::array<X509Extension*>* extension);
        void AddRange2(X509ExtensionCollection* collection);
        bool Contains2(X509Extension* extension);
        bool Contains3(System::String* oid);
        void CopyTo2(cli::array<X509Extension*>* extensions, int32_t index);
        int32_t IndexOf2(X509Extension* extension);
        int32_t IndexOf3(System::String* oid);
        void Insert2(int32_t index, X509Extension* extension);
        void Remove2(X509Extension* extension);
        void Remove3(System::String* oid);
        System::Collections::IEnumerator* GetEnumerator2();
        cli::array<unsigned char>* GetBytes();
        X509Extension* get_Item2(int32_t index);
        X509Extension* get_Item3(System::String* oid);
        
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
    };
    
    
    struct MANAGED_API X509Store : public virtual System::Object{
        System::String* _storePath;
        X509CertificateCollection* _certificates;
        System::Collections::ArrayList* _crls;
        bool _crl;
        System::String* _name;
        
        void constructor(System::String* path, bool crl);
        void Clear();
        void Import(X509Certificate* certificate);
        void Import2(X509Crl* crl);
        void Remove(X509Certificate* certificate);
        void Remove2(X509Crl* crl);
        System::String* GetUniqueName(X509Certificate* certificate);
        System::String* GetUniqueName2(X509Crl* crl);
        cli::array<unsigned char>* GetUniqueName3(X509ExtensionCollection* extensions);
        System::String* GetUniqueName4(System::String* method, cli::array<unsigned char>* name, System::String* fileExtension);
        cli::array<unsigned char>* Load(System::String* filename);
        X509Certificate* LoadCertificate(System::String* filename);
        X509Crl* LoadCrl(System::String* filename);
        bool CheckStore(System::String* path, bool throwException);
        X509CertificateCollection* BuildCertificatesCollection(System::String* storeName);
        System::Collections::ArrayList* BuildCrlsCollection(System::String* storeName);
        void ImportPrivateKey(X509Certificate* certificate, System::Security::Cryptography::CspParameters* cspParams);
        X509CertificateCollection* get_Certificates();
        System::Collections::ArrayList* get_Crls();
        System::String* get_Name();
        
    };
    
    
    struct MANAGED_API X509StoreManager : public virtual System::Object{
        static System::String* _userPath;
        static System::String* _localMachinePath;
        static X509Stores* _userStore;
        static X509Stores* _machineStore;
        
        void constructor();
        static System::String* get_CurrentUserPath();
        static System::String* get_LocalMachinePath();
        static X509Stores* get_CurrentUser();
        static X509Stores* get_LocalMachine();
        static X509CertificateCollection* get_IntermediateCACertificates();
        static System::Collections::ArrayList* get_IntermediateCACrls();
        static X509CertificateCollection* get_TrustedRootCertificates();
        static System::Collections::ArrayList* get_TrustedRootCACrls();
        static X509CertificateCollection* get_UntrustedCertificates();
        
    };
    
    
    struct MANAGED_API Names : public virtual System::Object{
        static /*constexpr*/ System::String* Personal() { return _T("My"); }
        static /*constexpr*/ System::String* OtherPeople() { return _T("AddressBook"); }
        static /*constexpr*/ System::String* IntermediateCA() { return _T("CA"); }
        static /*constexpr*/ System::String* TrustedRoot() { return _T("Trust"); }
        static /*constexpr*/ System::String* Untrusted() { return _T("Disallowed"); }
        
        void constructor();
        
    };
    
    
    struct MANAGED_API X509Stores : public virtual System::Object{
        System::String* _storePath;
        X509Store* _personal;
        X509Store* _other;
        X509Store* _intermediate;
        X509Store* _trusted;
        X509Store* _untrusted;
        
        void constructor(System::String* path);
        void Clear();
        X509Store* Open(System::String* storeName, bool create);
        X509Store* get_Personal();
        X509Store* get_OtherPeople();
        X509Store* get_IntermediateCA();
        X509Store* get_TrustedRoot();
        X509Store* get_Untrusted();
        
    };
    
    
    struct MANAGED_API Name : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CommonName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SerialNumber : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API LocalityName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API StateOrProvinceName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OrganizationName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OrganizationalUnitName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API EmailAddress : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DomainComponent : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API UserId : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API Oid2 : public virtual AttributeTypeAndValue{
        
        void constructor(System::String* oid);
        
    };
    
    
    struct MANAGED_API Title : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CountryName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DnQualifier : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API Surname : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API GivenName : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API Initial : public virtual AttributeTypeAndValue{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API X520 : public virtual System::Object{
        
        void constructor();
        
    };
    
}}}
namespace Mono { namespace Security { namespace X509 { namespace Extensions {
    
    struct MANAGED_API BasicConstraintsExtension : public virtual Mono::Security::X509::X509Extension{
        static constexpr int32_t NoPathLengthConstraint = -1;
        bool cA;
        int32_t pathLenConstraint;
        
        void constructor();
        void constructor(Mono::Security::ASN1* asn1);
        void constructor(Mono::Security::X509::X509Extension* extension);
        virtual void Decode_cefcb854d4bf305c() override;
        virtual void Encode_e7b55e24a6cbc279() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        bool get_CertificateAuthority();
        bool set_CertificateAuthority(bool value);
        virtual System::String* get_Name_7f87430b0f20607() override;
        int32_t get_PathLenConstraint();
        int32_t set_PathLenConstraint(int32_t value);
        
    };
    
    
    struct MANAGED_API KeyUsageExtension : public virtual Mono::Security::X509::X509Extension{
        int32_t kubits;
        
        void constructor(Mono::Security::ASN1* asn1);
        void constructor(Mono::Security::X509::X509Extension* extension);
        void constructor();
        virtual void Decode_cefcb854d4bf305c() override;
        virtual void Encode_e7b55e24a6cbc279() override;
        bool Support(KeyUsages usage);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        KeyUsages get_KeyUsage();
        KeyUsages set_KeyUsage(KeyUsages value);
        virtual System::String* get_Name_7f87430b0f20607() override;
        
    };
    
    
    struct MANAGED_API SubjectKeyIdentifierExtension : public virtual Mono::Security::X509::X509Extension{
        cli::array<unsigned char>* ski;
        
        void constructor();
        void constructor(Mono::Security::ASN1* asn1);
        void constructor(Mono::Security::X509::X509Extension* extension);
        virtual void Decode_cefcb854d4bf305c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::String* get_Name_7f87430b0f20607() override;
        cli::array<unsigned char>* get_Identifier();
        
    };
    
}}}}
namespace Mono { namespace Xml {
    
    struct MANAGED_API SecurityParser : public virtual SmallXmlParser, public virtual IContentHandler{
        System::Security::SecurityElement* root;
        System::Security::SecurityElement* current;
        System::Collections::Stack* stack;
        
        void constructor();
        void LoadXml(System::String* xml);
        System::Security::SecurityElement* ToXml();
        void OnStartParsing(SmallXmlParser* parser);
        void OnProcessingInstruction(System::String* name, System::String* text);
        void OnIgnorableWhitespace(System::String* s);
        void OnStartElement(System::String* name, IAttrList* attrs);
        void OnEndElement(System::String* name);
        void OnChars(System::String* ch);
        void OnEndParsing(SmallXmlParser* parser);
        
        virtual void OnStartParsing_60c119bf90baa608(SmallXmlParser* parser) override;
        virtual void OnProcessingInstruction_eeedb82cbfe7ab40(System::String* name, System::String* text) override;
        virtual void OnIgnorableWhitespace_39f85fe38215782c(System::String* s) override;
        virtual void OnStartElement_431a5ecd1484562f(System::String* name, IAttrList* attrs) override;
        virtual void OnEndElement_47dd703957202fcd(System::String* name) override;
        virtual void OnChars_23545ef97e4c205b(System::String* ch) override;
        virtual void OnEndParsing_ddf0252ce1c74235(SmallXmlParser* parser) override;
    };
    
    
    struct MANAGED_API DefaultHandler : public virtual System::Object, public virtual IContentHandler{
        
        void constructor();
        void OnStartParsing(SmallXmlParser* parser);
        void OnEndParsing(SmallXmlParser* parser);
        void OnStartElement(System::String* name, IAttrList* attrs);
        void OnEndElement(System::String* name);
        void OnChars(System::String* s);
        void OnIgnorableWhitespace(System::String* s);
        void OnProcessingInstruction(System::String* name, System::String* text);
        
        virtual void OnStartParsing_60c119bf90baa608(SmallXmlParser* parser) override;
        virtual void OnEndParsing_ddf0252ce1c74235(SmallXmlParser* parser) override;
        virtual void OnStartElement_431a5ecd1484562f(System::String* name, IAttrList* attrs) override;
        virtual void OnEndElement_47dd703957202fcd(System::String* name) override;
        virtual void OnChars_23545ef97e4c205b(System::String* s) override;
        virtual void OnIgnorableWhitespace_39f85fe38215782c(System::String* s) override;
        virtual void OnProcessingInstruction_eeedb82cbfe7ab40(System::String* name, System::String* text) override;
    };
    
    
    struct MANAGED_API AttrListImpl : public virtual System::Object, public virtual IAttrList{
        System::Collections::Generic::List<System::String*>* attrNames;
        System::Collections::Generic::List<System::String*>* attrValues;
        
        void constructor();
        System::String* GetName(int32_t i);
        System::String* GetValue(int32_t i);
        System::String* GetValue2(System::String* name);
        void Clear();
        void Add(System::String* name, System::String* value);
        int32_t get_Length();
        bool get_IsEmpty();
        cli::array<System::String*>* get_Names();
        cli::array<System::String*>* get_Values();
        
        virtual System::String* GetName_71efa89033fbba85(int32_t i) override;
        virtual System::String* GetValue_e96b4d39015c72a4(int32_t i) override;
        virtual System::String* GetValue_da157d9f297d63a4(System::String* name) override;
        virtual int32_t get_Length_4ee791fdf528d8a() override;
        virtual bool get_IsEmpty_ffd3b9fc5868c6c7() override;
        virtual cli::array<System::String*>* get_Names_9f5e761023ba0c63() override;
        virtual cli::array<System::String*>* get_Values_56e80d7ef1a6a837() override;
    };
    
    
    struct MANAGED_API SmallXmlParserException : public virtual System::SystemException{
        int32_t line;
        int32_t column;
        
        void constructor(System::String* msg, int32_t line, int32_t column);
        int32_t get_Line();
        int32_t get_Column();
        
    };
    
}}
namespace System {
    
    struct MANAGED_API MonoDocumentationNoteAttribute : public virtual MonoTODOAttribute{
        
        void constructor(String* comment);
        
    };
    
    
    struct MANAGED_API MonoExtensionAttribute : public virtual MonoTODOAttribute{
        
        void constructor(String* comment);
        
    };
    
    
    struct MANAGED_API MonoInternalNoteAttribute : public virtual MonoTODOAttribute{
        
        void constructor(String* comment);
        
    };
    
    
    struct MANAGED_API MonoLimitationAttribute : public virtual MonoTODOAttribute{
        
        void constructor(String* comment);
        
    };
    
    
    struct MANAGED_API MonoNotSupportedAttribute : public virtual MonoTODOAttribute{
        
        void constructor(String* comment);
        
    };
    
    
    struct MANAGED_API AccessViolationException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147467261;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ActivationContext : public virtual Object, public virtual IDisposable, public virtual Runtime::Serialization::ISerializable{
        ApplicationIdentity* _appid;
        ContextForm _form;
        bool _disposed;
        
        void constructor(ApplicationIdentity* identity);
        virtual void Finalize_1e60813e63b360d0();
        static ActivationContext* CreatePartialActivationContext(ApplicationIdentity* identity);
        static ActivationContext* CreatePartialActivationContext2(ApplicationIdentity* identity, cli::array<String*>* manifestPaths);
        void Dispose();
        void Dispose2(bool disposing);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        ContextForm get_Form();
        ApplicationIdentity* get_Identity();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API Activator : public virtual Object, public virtual Runtime::InteropServices::_Activator{
        static constexpr Reflection::BindingFlags _flags = (System::Reflection::BindingFlags)532L;
        static constexpr Reflection::BindingFlags _accessFlags = (System::Reflection::BindingFlags)127L;
        
        void constructor();
        static Runtime::Remoting::ObjectHandle* CreateComInstanceFrom(String* assemblyName, String* typeName);
        static Runtime::Remoting::ObjectHandle* CreateComInstanceFrom2(String* assemblyName, String* typeName, cli::array<unsigned char>* hashValue, Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom(String* assemblyFile, String* typeName);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom2(String* assemblyFile, String* typeName, cli::array<Object*>* activationAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom3(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityInfo);
        static Runtime::Remoting::ObjectHandle* CreateInstance(String* assemblyName, String* typeName);
        static Runtime::Remoting::ObjectHandle* CreateInstance2(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstance3(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityInfo);
        static Runtime::Remoting::ObjectHandle* CreateInstance4(ActivationContext* activationContext);
        static Runtime::Remoting::ObjectHandle* CreateInstance5(ActivationContext* activationContext, cli::array<String*>* activationCustomData);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom4(AppDomain* domain, String* assemblyFile, String* typeName);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom5(AppDomain* domain, String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstance6(AppDomain* domain, String* assemblyName, String* typeName);
        static Runtime::Remoting::ObjectHandle* CreateInstance7(AppDomain* domain, String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        template<class T>
        static T CreateInstance_1();
        static Object* CreateInstance8(Type* type);
        static Object* CreateInstance9(Type* type, cli::array<Object*>* args);
        static Object* CreateInstance10(Type* type, cli::array<Object*>* args, cli::array<Object*>* activationAttributes);
        static Object* CreateInstance11(Type* type, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture);
        static Object* CreateInstance12(Type* type, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        static Object* CreateInstance13(Type* type, bool nonPublic);
        static void CheckType(Type* type);
        static void CheckAbstractType(Type* type);
        static Object* GetObject(Type* type, String* url);
        static Object* GetObject2(Type* type, String* url, Object* state);
        static Object* CreateInstanceInternal(Type* type);
        void GetIDsOfNames(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static Runtime::Remoting::ObjectHandle* CreateInstance14(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstance15(AppDomain* domain, String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom6(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        static Runtime::Remoting::ObjectHandle* CreateInstanceFrom7(AppDomain* domain, String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        
        virtual void GetIDsOfNames_48d015a76eb21be9(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_bd361ada0936d12d(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_d5a4067d5ef51f60(uint32_t pcTInfo) override;
        virtual void Invoke_d0a599bfce5b27ab(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API AggregateException : public virtual Exception{
        static /*constexpr*/ String* defaultMessage() { return _T("One or more errors occured"); }
        Collections::Generic::List<Exception*>* innerExceptions;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(cli::array<Exception*>* innerExceptions);
        void constructor(String* message, cli::array<Exception*>* innerExceptions);
        void constructor(Collections::Generic::IEnumerable2<Exception*>* innerExceptions);
        void constructor(String* message, Collections::Generic::IEnumerable2<Exception*>* innerExceptions);
        AggregateException* Flatten();
        void Handle(Func2<Exception*, bool>* predicate);
        void AddChildException(AggregateException* childEx);
        virtual String* ToString_1636a0751cb9ac11() override;
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual Exception* GetBaseException_3c80088934e2347b() override;
        Collections::ObjectModel::ReadOnlyCollection<Exception*>* get_InnerExceptions();
        
    };
    
    
    struct MANAGED_API Loader : public virtual Object{
        String* assembly;
        
        void constructor(String* assembly);
        void Load();
        
    };
    
    
    struct MANAGED_API Initializer : public virtual Object{
        AppDomainInitializer* initializer;
        cli::array<String*>* arguments;
        
        void constructor(AppDomainInitializer* initializer, cli::array<String*>* arguments);
        void Initialize();
        
    };
    
    
    struct MANAGED_API AppDomain : public virtual MarshalByRefObject, public virtual _AppDomain, public virtual Security::IEvidenceFactory{
        void* _mono_app_domain;
        static String* _process_guid;
        static Collections::Hashtable* type_resolve_in_progress;
        static Collections::Hashtable* assembly_resolve_in_progress;
        static Collections::Hashtable* assembly_resolve_in_progress_refonly;
        Security::Policy::Evidence* _evidence;
        Security::PermissionSet* _granted;
        Security::Principal::PrincipalPolicy _principalPolicy;
        static Security::Principal::IPrincipal* _principal;
        static AppDomain* default_domain;
        AppDomainManager* _domain_manager;
        ActivationContext* _activation;
        ApplicationIdentity* _applicationIdentity;
        Collections::Generic::List<String*>* compatibility_switch;
        AssemblyLoadEventHandler* AssemblyLoad;
        ResolveEventHandler* AssemblyResolve;
        EventHandler* DomainUnload;
        EventHandler* ProcessExit;
        ResolveEventHandler* ResourceResolve;
        ResolveEventHandler* TypeResolve;
        UnhandledExceptionEventHandler* UnhandledException;
        ResolveEventHandler* ReflectionOnlyAssemblyResolve;
        
        void constructor();
        AppDomainSetup* getSetup();
        String* getFriendlyName();
        static AppDomain* getCurDomain();
        static AppDomain* getRootDomain();
        void AppendPrivatePath(String* path);
        void ClearPrivatePath();
        void ClearShadowCopyPath();
        Runtime::Remoting::ObjectHandle* CreateComInstanceFrom(String* assemblyName, String* typeName);
        Runtime::Remoting::ObjectHandle* CreateComInstanceFrom2(String* assemblyFile, String* typeName, cli::array<unsigned char>* hashValue, Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        Runtime::Remoting::ObjectHandle* CreateInstance(String* assemblyName, String* typeName);
        Runtime::Remoting::ObjectHandle* CreateInstance2(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes);
        Runtime::Remoting::ObjectHandle* CreateInstance3(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        Object* CreateInstanceAndUnwrap(String* assemblyName, String* typeName);
        Object* CreateInstanceAndUnwrap2(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes);
        Object* CreateInstanceAndUnwrap3(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        Runtime::Remoting::ObjectHandle* CreateInstance4(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        Object* CreateInstanceAndUnwrap4(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        Runtime::Remoting::ObjectHandle* CreateInstanceFrom(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        Object* CreateInstanceFromAndUnwrap(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes);
        Runtime::Remoting::ObjectHandle* CreateInstanceFrom2(String* assemblyFile, String* typeName);
        Runtime::Remoting::ObjectHandle* CreateInstanceFrom3(String* assemblyFile, String* typeName, cli::array<Object*>* activationAttributes);
        Runtime::Remoting::ObjectHandle* CreateInstanceFrom4(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        Object* CreateInstanceFromAndUnwrap2(String* assemblyName, String* typeName);
        Object* CreateInstanceFromAndUnwrap3(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes);
        Object* CreateInstanceFromAndUnwrap4(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly2(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly3(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly4(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly5(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly6(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly7(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly8(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly9(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions, bool isSynchronized);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly10(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions, bool isSynchronized, Collections::Generic::IEnumerable2<Reflection::Emit::CustomAttributeBuilder*>* assemblyAttributes);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly11(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Collections::Generic::IEnumerable2<Reflection::Emit::CustomAttributeBuilder*>* assemblyAttributes);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly12(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, bool isSynchronized, Collections::Generic::IEnumerable2<Reflection::Emit::CustomAttributeBuilder*>* assemblyAttributes);
        Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly13(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Collections::Generic::IEnumerable2<Reflection::Emit::CustomAttributeBuilder*>* assemblyAttributes, Security::SecurityContextSource securityContextSource);
        Reflection::Emit::AssemblyBuilder* DefineInternalDynamicAssembly(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access);
        void DoCallBack(CrossAppDomainDelegate* callBackDelegate);
        int32_t ExecuteAssembly(String* assemblyFile);
        int32_t ExecuteAssembly2(String* assemblyFile, Security::Policy::Evidence* assemblySecurity);
        int32_t ExecuteAssembly3(String* assemblyFile, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args);
        int32_t ExecuteAssembly4(String* assemblyFile, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args, cli::array<unsigned char>* hashValue, Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        int32_t ExecuteAssembly5(String* assemblyFile, cli::array<String*>* args);
        int32_t ExecuteAssembly6(String* assemblyFile, cli::array<String*>* args, cli::array<unsigned char>* hashValue, Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);
        int32_t ExecuteAssemblyInternal(Reflection::Assembly* a, cli::array<String*>* args);
        int32_t ExecuteAssembly7(Reflection::Assembly* a, cli::array<String*>* args);
        cli::array<Reflection::Assembly*>* GetAssemblies(bool refOnly);
        cli::array<Reflection::Assembly*>* GetAssemblies2();
        Object* GetData(String* name);
        Type* GetType() /*new*/;
        virtual Object* InitializeLifetimeService_8f02e9c96ffbe30f() override;
        Reflection::Assembly* LoadAssembly(String* assemblyRef, Security::Policy::Evidence* securityEvidence, bool refOnly);
        Reflection::Assembly* Load(Reflection::AssemblyName* assemblyRef);
        Reflection::Assembly* LoadSatellite(Reflection::AssemblyName* assemblyRef, bool throwOnError);
        Reflection::Assembly* Load2(Reflection::AssemblyName* assemblyRef, Security::Policy::Evidence* assemblySecurity);
        Reflection::Assembly* Load3(String* assemblyString);
        Reflection::Assembly* Load4(String* assemblyString, Security::Policy::Evidence* assemblySecurity);
        Reflection::Assembly* Load5(String* assemblyString, Security::Policy::Evidence* assemblySecurity, bool refonly);
        Reflection::Assembly* Load6(cli::array<unsigned char>* rawAssembly);
        Reflection::Assembly* Load7(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore);
        Reflection::Assembly* LoadAssemblyRaw(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, Security::Policy::Evidence* securityEvidence, bool refonly);
        Reflection::Assembly* Load8(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, Security::Policy::Evidence* securityEvidence);
        Reflection::Assembly* Load9(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, Security::Policy::Evidence* securityEvidence, bool refonly);
        void SetAppDomainPolicy(Security::Policy::PolicyLevel* domainPolicy);
        void SetCachePath(String* path);
        void SetPrincipalPolicy(Security::Principal::PrincipalPolicy policy);
        void SetShadowCopyFiles();
        void SetShadowCopyPath(String* path);
        void SetThreadPrincipal(Security::Principal::IPrincipal* principal);
        static AppDomain* InternalSetDomainByID(int32_t domain_id);
        static AppDomain* InternalSetDomain(AppDomain* context);
        static void InternalPushDomainRef(AppDomain* domain);
        static void InternalPushDomainRefByID(int32_t domain_id);
        static void InternalPopDomainRef();
        static Runtime::Remoting::Contexts::Context2* InternalSetContext(Runtime::Remoting::Contexts::Context2* context);
        static Runtime::Remoting::Contexts::Context2* InternalGetContext();
        static Runtime::Remoting::Contexts::Context2* InternalGetDefaultContext();
        static String* InternalGetProcessGuid(String* newguid);
        static Object* InvokeInDomain(AppDomain* domain, Reflection::MethodInfo* method, Object* obj, cli::array<Object*>* args);
        static Object* InvokeInDomainByID(int32_t domain_id, Reflection::MethodInfo* method, Object* obj, cli::array<Object*>* args);
        static String* GetProcessGuid();
        static AppDomain* CreateDomain(String* friendlyName);
        static AppDomain* CreateDomain2(String* friendlyName, Security::Policy::Evidence* securityInfo);
        static AppDomain* createDomain(String* friendlyName, AppDomainSetup* info);
        static AppDomain* CreateDomain3(String* friendlyName, Security::Policy::Evidence* securityInfo, AppDomainSetup* info);
        static AppDomain* CreateDomain4(String* friendlyName, Security::Policy::Evidence* securityInfo, String* appBasePath, String* appRelativeSearchPath, bool shadowCopyFiles);
        static AppDomain* CreateDomain5(String* friendlyName, Security::Policy::Evidence* securityInfo, AppDomainSetup* info, Security::PermissionSet* grantSet, cli::array<Security::Policy::StrongName2*>* fullTrustAssemblies);
        static AppDomainSetup* CreateDomainSetup(String* appBasePath, String* appRelativeSearchPath, bool shadowCopyFiles);
        static bool InternalIsFinalizingForUnload(int32_t domain_id);
        bool IsFinalizingForUnload();
        static void InternalUnload(int32_t domain_id);
        int32_t getDomainID();
        static void Unload(AppDomain* domain);
        void SetData(String* name, Object* data);
        void SetData2(String* name, Object* data, Security::IPermission* permission);
        void SetDynamicBase(String* path);
        static int32_t GetCurrentThreadId();
        virtual String* ToString_1636a0751cb9ac11() override;
        static void ValidateAssemblyName(String* name);
        void DoAssemblyLoad(Reflection::Assembly* assembly);
        Reflection::Assembly* DoAssemblyResolve(String* name, bool refonly);
        Reflection::Assembly* DoTypeResolve(Object* name_or_tb);
        Reflection::Assembly* DoResourceResolve(String* name, Reflection::Assembly* requesting);
        void DoDomainUnload();
        cli::array<unsigned char>* GetMarshalledDomainObjRef();
        void ProcessMessageInDomain(cli::array<unsigned char>* arrRequest, Runtime::Remoting::Messaging::CADMethodCallMessage* cadMsg, cli::array<unsigned char>* arrResponse, Runtime::Remoting::Messaging::CADMethodReturnMessage* cadMrm);
        String* ApplyPolicy(String* assemblyName);
        static AppDomain* CreateDomain6(String* friendlyName, Security::Policy::Evidence* securityInfo, String* appBasePath, String* appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer* adInit, cli::array<String*>* adInitArgs);
        int32_t ExecuteAssemblyByName(String* assemblyName);
        int32_t ExecuteAssemblyByName2(String* assemblyName, Security::Policy::Evidence* assemblySecurity);
        int32_t ExecuteAssemblyByName3(String* assemblyName, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args);
        int32_t ExecuteAssemblyByName4(Reflection::AssemblyName* assemblyName, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args);
        int32_t ExecuteAssemblyByName5(String* assemblyName, cli::array<String*>* args);
        int32_t ExecuteAssemblyByName6(Reflection::AssemblyName* assemblyName, cli::array<String*>* args);
        bool IsDefaultAppDomain();
        cli::array<Reflection::Assembly*>* ReflectionOnlyGetAssemblies();
        void GetIDsOfNames(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        Nullable2<bool> IsCompatibilitySwitchSet(String* value);
        void SetCompatibilitySwitch(String* value);
        AppDomainSetup* get_SetupInformationNoCopy();
        AppDomainSetup* get_SetupInformation();
        Security::Policy::ApplicationTrust* get_ApplicationTrust();
        String* get_BaseDirectory();
        String* get_RelativeSearchPath();
        String* get_DynamicDirectory();
        bool get_ShadowCopyFiles();
        String* get_FriendlyName();
        Security::Policy::Evidence* get_Evidence();
        Security::Principal::IPrincipal* get_DefaultPrincipal();
        Security::PermissionSet* get_GrantedPermissionSet();
        Security::PermissionSet* get_PermissionSet();
        static AppDomain* get_CurrentDomain();
        static AppDomain* get_DefaultDomain();
        bool get_IsHomogenous();
        bool get_IsFullyTrusted();
        AppDomainManager* get_DomainManager();
        ActivationContext* get_ActivationContext();
        ApplicationIdentity* get_ApplicationIdentity();
        int32_t get_Id();
        static bool get_MonitoringIsEnabled();
        static bool set_MonitoringIsEnabled(bool value);
        int64_t get_MonitoringSurvivedMemorySize();
        static int64_t get_MonitoringSurvivedProcessMemorySize();
        int64_t get_MonitoringTotalAllocatedMemorySize();
        TimeSpan get_MonitoringTotalProcessorTime();
        void add_AssemblyLoad(AssemblyLoadEventHandler* value);
        void remove_AssemblyLoad(AssemblyLoadEventHandler* value);
        void add_AssemblyResolve(ResolveEventHandler* value);
        void remove_AssemblyResolve(ResolveEventHandler* value);
        void add_DomainUnload(EventHandler* value);
        void remove_DomainUnload(EventHandler* value);
        void add_ProcessExit(EventHandler* value);
        void remove_ProcessExit(EventHandler* value);
        void add_ResourceResolve(ResolveEventHandler* value);
        void remove_ResourceResolve(ResolveEventHandler* value);
        void add_TypeResolve(ResolveEventHandler* value);
        void remove_TypeResolve(ResolveEventHandler* value);
        void add_UnhandledException(UnhandledExceptionEventHandler* value);
        void remove_UnhandledException(UnhandledExceptionEventHandler* value);
        void add_ReflectionOnlyAssemblyResolve(ResolveEventHandler* value);
        void remove_ReflectionOnlyAssemblyResolve(ResolveEventHandler* value);
        
        virtual void AppendPrivatePath_b3ee2eec783a3754(String* path) override;
        virtual void ClearPrivatePath_bee8a0fbf4df9e1e() override;
        virtual void ClearShadowCopyPath_b0050824cd24a2b9() override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_b0289026ebfffff7(String* assemblyName, String* typeName) override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_953176cf11400657(String* assemblyName, String* typeName, cli::array<Object*>* activationAttributes) override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstance_593e3b24df052556(String* assemblyName, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes) override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_a887219b218de75d(String* assemblyFile, String* typeName) override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_655dfdad722dba22(String* assemblyFile, String* typeName, cli::array<Object*>* activationAttributes) override;
        virtual Runtime::Remoting::ObjectHandle* CreateInstanceFrom_3090b41533c8c88c(String* assemblyFile, String* typeName, bool ignoreCase, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, cli::array<Object*>* args, Globalization::CultureInfo* culture, cli::array<Object*>* activationAttributes, Security::Policy::Evidence* securityAttributes) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_c3dc46d012ab6aeb(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_627f226f06baa8b6(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_21f25a254658c094(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_604e078899c011f0(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_290276c209d2331(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_decd91a805fc8e1b(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_7102ce3e754e1ad3(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_3c294097a9c19c30(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions) override;
        virtual Reflection::Emit::AssemblyBuilder* DefineDynamicAssembly_3143681a2942300a(Reflection::AssemblyName* name, Reflection::Emit::AssemblyBuilderAccess access, String* dir, Security::Policy::Evidence* evidence, Security::PermissionSet* requiredPermissions, Security::PermissionSet* optionalPermissions, Security::PermissionSet* refusedPermissions, bool isSynchronized) override;
        virtual void DoCallBack_66db270a4ceffdfe(CrossAppDomainDelegate* callBackDelegate) override;
        virtual int32_t ExecuteAssembly_aebf0fe3b56c1c6f(String* assemblyFile) override;
        virtual int32_t ExecuteAssembly_7527301e547e9998(String* assemblyFile, Security::Policy::Evidence* assemblySecurity) override;
        virtual int32_t ExecuteAssembly_d0e79bc117cbb23c(String* assemblyFile, Security::Policy::Evidence* assemblySecurity, cli::array<String*>* args) override;
        virtual cli::array<Reflection::Assembly*>* GetAssemblies_2f2f24782e9bbaa1() override;
        virtual Object* GetData_8d88d80779f39e8d(String* name) override;
        virtual Type* GetType_8770470dc313272b() override;
        virtual Object* InitializeLifetimeService_a5c5aadd1b06210b() override;
        virtual Reflection::Assembly* Load_ca851dd254b4f361(Reflection::AssemblyName* assemblyRef) override;
        virtual Reflection::Assembly* Load_3da712896f486abc(Reflection::AssemblyName* assemblyRef, Security::Policy::Evidence* assemblySecurity) override;
        virtual Reflection::Assembly* Load_d908dcc0864db1d3(String* assemblyString) override;
        virtual Reflection::Assembly* Load_fdea81560c002669(String* assemblyString, Security::Policy::Evidence* assemblySecurity) override;
        virtual Reflection::Assembly* Load_f3c3a9f63e02d7c7(cli::array<unsigned char>* rawAssembly) override;
        virtual Reflection::Assembly* Load_dc2369822d808ae3(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore) override;
        virtual Reflection::Assembly* Load_102c0f4f7d676d04(cli::array<unsigned char>* rawAssembly, cli::array<unsigned char>* rawSymbolStore, Security::Policy::Evidence* securityEvidence) override;
        virtual void SetAppDomainPolicy_e0a2fcde2ca025e6(Security::Policy::PolicyLevel* domainPolicy) override;
        virtual void SetCachePath_b899d77d9e3e4a1e(String* path) override;
        virtual void SetPrincipalPolicy_d991a50e71ad558f(Security::Principal::PrincipalPolicy policy) override;
        virtual void SetShadowCopyPath_33d17aa37e2073bf(String* path) override;
        virtual void SetThreadPrincipal_61af26702d580521(Security::Principal::IPrincipal* principal) override;
        virtual void SetData_fae3a991137e9570(String* name, Object* data) override;
        virtual String* ToString_e621708666fbb83e() override;
        virtual void GetIDsOfNames_4870ff5d64d8c1f1(Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_7e5828400406fc0a(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_9db5fe51658e3d38(uint32_t pcTInfo) override;
        virtual void Invoke_9fac458325d11ed4(uint32_t dispIdMember, Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual String* get_BaseDirectory_950eba357d2ea91d() override;
        virtual String* get_RelativeSearchPath_6d86d21708d754c9() override;
        virtual String* get_DynamicDirectory_b9f183d81035af32() override;
        virtual bool get_ShadowCopyFiles_c64e19b67830a0d6() override;
        virtual String* get_FriendlyName_a7ea6ef61f96e4f0() override;
        virtual Security::Policy::Evidence* get_Evidence_b29329a23899d3a1() override;
        virtual Security::Policy::Evidence* get_Evidence_f1eadb7cf64a7592() override;
        virtual void add_AssemblyLoad_d41608c4efde307d(AssemblyLoadEventHandler* value) override;
        virtual void remove_AssemblyLoad_78edf16ad91a8170(AssemblyLoadEventHandler* value) override;
        virtual void add_AssemblyResolve_1bc6b8609d68da1(ResolveEventHandler* value) override;
        virtual void remove_AssemblyResolve_b723f81b23087974(ResolveEventHandler* value) override;
        virtual void add_DomainUnload_d3cf45e1009e4e8a(EventHandler* value) override;
        virtual void remove_DomainUnload_d67c5135e3e23c1(EventHandler* value) override;
        virtual void add_ProcessExit_1b1e458c957cc32f(EventHandler* value) override;
        virtual void remove_ProcessExit_5709ece2c4ad927a(EventHandler* value) override;
        virtual void add_ResourceResolve_25585e4d513c6288(ResolveEventHandler* value) override;
        virtual void remove_ResourceResolve_4859b7f44cf2916(ResolveEventHandler* value) override;
        virtual void add_TypeResolve_b86030308f849881(ResolveEventHandler* value) override;
        virtual void remove_TypeResolve_14e72b551178582b(ResolveEventHandler* value) override;
        virtual void add_UnhandledException_eccab8e37f0236c3(UnhandledExceptionEventHandler* value) override;
        virtual void remove_UnhandledException_8a9eff9b9b50b9b8(UnhandledExceptionEventHandler* value) override;
        virtual bool Equals_5e8e0f86a79f1d51(Object* obj) override;
        virtual int32_t GetHashCode_fd0ed3bf64cfe8f9() override;
        virtual Object* GetLifetimeService_2b12bb4495bc713c() override;
    };
    
    
    struct MANAGED_API AppDomainManager : public virtual MarshalByRefObject{
        Runtime::Hosting::ApplicationActivator* _activator;
        AppDomainManagerInitializationOptions _flags;
        
        void constructor();
        virtual AppDomain* CreateDomain_e0cc55be844f0adc(String* friendlyName, Security::Policy::Evidence* securityInfo, AppDomainSetup* appDomainInfo);
        virtual void InitializeNewDomain_e52e2ebfedaaf98d(AppDomainSetup* appDomainInfo);
        virtual bool CheckSecuritySettings_2015fecad7c95253(Security::SecurityState* state);
        static AppDomain* CreateDomainHelper(String* friendlyName, Security::Policy::Evidence* securityInfo, AppDomainSetup* appDomainInfo);
        virtual Runtime::Hosting::ApplicationActivator* get_ApplicationActivator_128e5f63aa18eebc();
        virtual Reflection::Assembly* get_EntryAssembly_1ba7bde2af04ce13();
        virtual Threading::HostExecutionContextManager* get_HostExecutionContextManager_acf5ce766691b961();
        virtual Security::HostSecurityManager* get_HostSecurityManager_78a0d9527aa5ded3();
        AppDomainManagerInitializationOptions get_InitializationFlags();
        AppDomainManagerInitializationOptions set_InitializationFlags(AppDomainManagerInitializationOptions value);
        
    };
    
    
    struct MANAGED_API AppDomainSetup : public virtual Object, public virtual IAppDomainSetup{
        String* application_base;
        String* application_name;
        String* cache_path;
        String* configuration_file;
        String* dynamic_base;
        String* license_file;
        String* private_bin_path;
        String* private_bin_path_probe;
        String* shadow_copy_directories;
        String* shadow_copy_files;
        bool publisher_policy;
        bool path_changed;
        LoaderOptimization loader_optimization;
        bool disallow_binding_redirects;
        bool disallow_code_downloads;
        Runtime::Hosting::ActivationArguments* _activationArguments;
        AppDomainInitializer* domain_initializer;
        Security::Policy::ApplicationTrust* application_trust;
        cli::array<String*>* domain_initializer_args;
        bool disallow_appbase_probe;
        cli::array<unsigned char>* configuration_bytes;
        cli::array<unsigned char>* serialized_non_primitives;
        
        void constructor();
        void constructor(AppDomainSetup* setup);
        void constructor(Runtime::Hosting::ActivationArguments* activationArguments);
        void constructor(ActivationContext* activationContext);
        static String* GetAppBase(String* appBase);
        cli::array<unsigned char>* GetConfigurationBytes();
        void SetConfigurationBytes(cli::array<unsigned char>* value);
        void DeserializeNonPrimitives();
        void SerializeNonPrimitives();
        void SetCompatibilitySwitches(Collections::Generic::IEnumerable2<String*>* switches);
        String* get_ApplicationBase();
        String* set_ApplicationBase(String* value);
        String* get_ApplicationName();
        String* set_ApplicationName(String* value);
        String* get_CachePath();
        String* set_CachePath(String* value);
        String* get_ConfigurationFile();
        String* set_ConfigurationFile(String* value);
        bool get_DisallowPublisherPolicy();
        bool set_DisallowPublisherPolicy(bool value);
        String* get_DynamicBase();
        String* set_DynamicBase(String* value);
        String* get_LicenseFile();
        String* set_LicenseFile(String* value);
        LoaderOptimization get_LoaderOptimization();
        LoaderOptimization set_LoaderOptimization(LoaderOptimization value);
        String* get_PrivateBinPath();
        String* set_PrivateBinPath(String* value);
        String* get_PrivateBinPathProbe();
        String* set_PrivateBinPathProbe(String* value);
        String* get_ShadowCopyDirectories();
        String* set_ShadowCopyDirectories(String* value);
        String* get_ShadowCopyFiles();
        String* set_ShadowCopyFiles(String* value);
        bool get_DisallowBindingRedirects();
        bool set_DisallowBindingRedirects(bool value);
        bool get_DisallowCodeDownload();
        bool set_DisallowCodeDownload(bool value);
        Runtime::Hosting::ActivationArguments* get_ActivationArguments();
        Runtime::Hosting::ActivationArguments* set_ActivationArguments(Runtime::Hosting::ActivationArguments* value);
        AppDomainInitializer* get_AppDomainInitializer();
        AppDomainInitializer* set_AppDomainInitializer(AppDomainInitializer* value);
        cli::array<String*>* get_AppDomainInitializerArguments();
        cli::array<String*>* set_AppDomainInitializerArguments(cli::array<String*>* value);
        Security::Policy::ApplicationTrust* get_ApplicationTrust();
        Security::Policy::ApplicationTrust* set_ApplicationTrust(Security::Policy::ApplicationTrust* value);
        bool get_DisallowApplicationBaseProbing();
        bool set_DisallowApplicationBaseProbing(bool value);
        
        virtual String* get_ApplicationBase_9721289a5eae8836() override;
        virtual String* set_ApplicationBase_4873b8c25c63c048(String* value) override;
        virtual String* get_ApplicationName_e8fa5c72c612228c() override;
        virtual String* set_ApplicationName_ccc13d0847864819(String* value) override;
        virtual String* get_CachePath_c696e8dcfbd4017c() override;
        virtual String* set_CachePath_35f2a12bef0a32d0(String* value) override;
        virtual String* get_ConfigurationFile_9376e208dae3aba0() override;
        virtual String* set_ConfigurationFile_398471c00bb93ab1(String* value) override;
        virtual String* get_DynamicBase_755a2f189fc3f2ad() override;
        virtual String* set_DynamicBase_dc22b98e02191087(String* value) override;
        virtual String* get_LicenseFile_f73f0a4c53b13a1b() override;
        virtual String* set_LicenseFile_3d344cd71e3a0bbd(String* value) override;
        virtual String* get_PrivateBinPath_bef59c6818e17f4c() override;
        virtual String* set_PrivateBinPath_ebc4d24d2b23cc82(String* value) override;
        virtual String* get_PrivateBinPathProbe_8d247bd69349815a() override;
        virtual String* set_PrivateBinPathProbe_d6b5308e90c21862(String* value) override;
        virtual String* get_ShadowCopyDirectories_27b053b1a11ee820() override;
        virtual String* set_ShadowCopyDirectories_d44cecd50c99c9e3(String* value) override;
        virtual String* get_ShadowCopyFiles_c865b8136fa4fff5() override;
        virtual String* set_ShadowCopyFiles_e981770a6ada516e(String* value) override;
    };
    
    
    struct MANAGED_API AppDomainUnloadedException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146234348;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ApplicationId : public virtual Object{
        cli::array<unsigned char>* _token;
        String* _name;
        Version* _version;
        String* _proc;
        String* _culture;
        
        void constructor(cli::array<unsigned char>* publicKeyToken, String* name, Version* version, String* processorArchitecture, String* culture);
        ApplicationId* Copy();
        virtual bool Equals_ed975d2f4a7d193e(Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual String* ToString_1636a0751cb9ac11() override;
        String* get_Culture();
        String* get_Name();
        String* get_ProcessorArchitecture();
        cli::array<unsigned char>* get_PublicKeyToken();
        Version* get_Version();
        
    };
    
    
    struct MANAGED_API ApplicationIdentity : public virtual Object, public virtual Runtime::Serialization::ISerializable{
        String* _fullName;
        String* _codeBase;
        
        void constructor(String* applicationIdentityFullName);
        virtual String* ToString_1636a0751cb9ac11() override;
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        String* get_CodeBase();
        String* get_FullName();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API ArgumentNullException : public virtual ArgumentException{
        static constexpr int32_t Result = -2147467261;
        
        void constructor();
        void constructor(String* paramName);
        void constructor(String* paramName, String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ArgumentOutOfRangeException : public virtual ArgumentException{
        static constexpr int32_t Result = -2146233086;
        Object* actual_value;
        
        void constructor();
        void constructor(String* paramName);
        void constructor(String* paramName, String* message);
        void constructor(String* paramName, Object* actualValue, String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual Object* get_ActualValue_aa5ed9bfb68c696f();
        virtual String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API SimpleEnumerator : public virtual Object, public virtual Collections::IEnumerator, public virtual ICloneable{
        Array* enumeratee;
        int32_t currentpos;
        int32_t length;
        
        void constructor(Array* arrayToEnumerate);
        bool MoveNext();
        void Reset();
        Object* Clone();
        Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API Array : public virtual Object, public virtual ICloneable, public virtual Collections::ICollection, public virtual Collections::IList, public virtual Collections::IEnumerable, public virtual Collections::IStructuralComparable, public virtual Collections::IStructuralEquatable{
        
        void constructor();
        int32_t InternalArray__ICollection_get_Count();
        bool InternalArray__ICollection_get_IsReadOnly();
        template<class T>
        Collections::Generic::IEnumerator2<T>* InternalArray__IEnumerable_GetEnumerator_1();
        void InternalArray__ICollection_Clear();
        template<class T>
        void InternalArray__ICollection_Add_1(T item);
        template<class T>
        bool InternalArray__ICollection_Remove_1(T item);
        template<class T>
        bool InternalArray__ICollection_Contains_1(T item);
        template<class T>
        void InternalArray__ICollection_CopyTo_1(cli::array<T>* array, int32_t index);
        template<class T>
        void InternalArray__Insert_1(int32_t index, T item);
        void InternalArray__RemoveAt(int32_t index);
        template<class T>
        int32_t InternalArray__IndexOf_1(T item);
        template<class T>
        T InternalArray__get_Item_1(int32_t index);
        template<class T>
        void InternalArray__set_Item_1(int32_t index, T item);
        template<class T>
        void GetGenericValueImpl_1(int32_t pos, T value);
        template<class T>
        void SetGenericValueImpl_1(int32_t pos, T value);
        int32_t Add(Object* value);
        void Clear();
        bool Contains(Object* value);
        int32_t IndexOf(Object* value);
        void Insert(int32_t index, Object* value);
        void Remove(Object* value);
        void RemoveAt(int32_t index);
        int32_t GetRank();
        int32_t GetLength(int32_t dimension);
        int64_t GetLongLength(int32_t dimension);
        int32_t GetLowerBound(int32_t dimension);
        Object* GetValue(cli::array<int32_t>* indices);
        void SetValue(Object* value, cli::array<int32_t>* indices);
        Object* GetValueImpl(int32_t pos);
        void SetValueImpl(Object* value, int32_t pos);
        static bool FastCopy(Array* source, int32_t source_idx, Array* dest, int32_t dest_idx, int32_t length);
        static Array* CreateInstanceImpl(Type* elementType, cli::array<int32_t>* lengths, cli::array<int32_t>* bounds);
        Collections::IEnumerator* GetEnumerator();
        int32_t CompareTo(Object* other, Collections::IComparer* comparer);
        bool Equals3(Object* other, Collections::IEqualityComparer* comparer);
        int32_t GetHashCode2(Collections::IEqualityComparer* comparer);
        int32_t GetUpperBound(int32_t dimension);
        Object* GetValue2(int32_t index);
        Object* GetValue3(int32_t index1, int32_t index2);
        Object* GetValue4(int32_t index1, int32_t index2, int32_t index3);
        Object* GetValue5(int64_t index);
        Object* GetValue6(int64_t index1, int64_t index2);
        Object* GetValue7(int64_t index1, int64_t index2, int64_t index3);
        void SetValue2(Object* value, int64_t index);
        void SetValue3(Object* value, int64_t index1, int64_t index2);
        void SetValue4(Object* value, int64_t index1, int64_t index2, int64_t index3);
        void SetValue5(Object* value, int32_t index);
        void SetValue6(Object* value, int32_t index1, int32_t index2);
        void SetValue7(Object* value, int32_t index1, int32_t index2, int32_t index3);
        static Array* CreateInstance(Type* elementType, int32_t length);
        static Array* CreateInstance2(Type* elementType, int32_t length1, int32_t length2);
        static Array* CreateInstance3(Type* elementType, int32_t length1, int32_t length2, int32_t length3);
        static Array* CreateInstance4(Type* elementType, cli::array<int32_t>* lengths);
        static Array* CreateInstance5(Type* elementType, cli::array<int32_t>* lengths, cli::array<int32_t>* lowerBounds);
        static cli::array<int32_t>* GetIntArray(cli::array<int64_t>* values);
        static Array* CreateInstance6(Type* elementType, cli::array<int64_t>* lengths);
        Object* GetValue8(cli::array<int64_t>* indices);
        void SetValue8(Object* value, cli::array<int64_t>* indices);
        static int32_t BinarySearch(Array* array, Object* value);
        static int32_t BinarySearch2(Array* array, Object* value, Collections::IComparer* comparer);
        static int32_t BinarySearch3(Array* array, int32_t index, int32_t length, Object* value);
        static int32_t BinarySearch4(Array* array, int32_t index, int32_t length, Object* value, Collections::IComparer* comparer);
        static int32_t DoBinarySearch(Array* array, int32_t index, int32_t length, Object* value, Collections::IComparer* comparer);
        static void Clear2(Array* array, int32_t index, int32_t length);
        static void ClearInternal(Array* a, int32_t index, int32_t count);
        Object* Clone();
        static void Copy(Array* sourceArray, Array* destinationArray, int32_t length);
        static void Copy2(Array* sourceArray, int32_t sourceIndex, Array* destinationArray, int32_t destinationIndex, int32_t length);
        static void Copy3(Array* sourceArray, int64_t sourceIndex, Array* destinationArray, int64_t destinationIndex, int64_t length);
        static void Copy4(Array* sourceArray, Array* destinationArray, int64_t length);
        static int32_t IndexOf2(Array* array, Object* value);
        static int32_t IndexOf3(Array* array, Object* value, int32_t startIndex);
        static int32_t IndexOf4(Array* array, Object* value, int32_t startIndex, int32_t count);
        void Initialize();
        static int32_t LastIndexOf(Array* array, Object* value);
        static int32_t LastIndexOf2(Array* array, Object* value, int32_t startIndex);
        static int32_t LastIndexOf3(Array* array, Object* value, int32_t startIndex, int32_t count);
        static Swapper* get_swapper(Array* array);
        static void Reverse(Array* array);
        static void Reverse2(Array* array, int32_t index, int32_t length);
        static void Sort(Array* array);
        static void Sort2(Array* keys, Array* items);
        static void Sort3(Array* array, Collections::IComparer* comparer);
        static void Sort4(Array* array, int32_t index, int32_t length);
        static void Sort5(Array* keys, Array* items, Collections::IComparer* comparer);
        static void Sort6(Array* keys, Array* items, int32_t index, int32_t length);
        static void Sort7(Array* array, int32_t index, int32_t length, Collections::IComparer* comparer);
        static void Sort8(Array* keys, Array* items, int32_t index, int32_t length, Collections::IComparer* comparer);
        static void SortImpl(Array* keys, Array* items, int32_t index, int32_t length, Collections::IComparer* comparer);
        void int_swapper(int32_t i, int32_t j);
        void obj_swapper(int32_t i, int32_t j);
        void slow_swapper(int32_t i, int32_t j);
        void double_swapper(int32_t i, int32_t j);
        static bool QSortArrange(Array* keys, Array* items, int32_t lo, Object* v0, int32_t hi, Object* v1, Collections::IComparer* comparer);
        static void qsort(Array* keys, Array* items, int32_t low, int32_t high, Collections::IComparer* comparer);
        static void CheckComparerAvailable(Array* keys, int32_t low, int32_t high);
        static void swap(Array* keys, Array* items, int32_t i, int32_t j);
        template<class T>
        static void Sort_1(cli::array<T>* array);
        template<class TKey, class TValue>
        static void Sort_2(cli::array<TKey>* keys, cli::array<TValue>* items);
        template<class T>
        static void Sort_12(cli::array<T>* array, Collections::Generic::IComparer2<T>* comparer);
        template<class TKey, class TValue>
        static void Sort_22(cli::array<TKey>* keys, cli::array<TValue>* items, Collections::Generic::IComparer2<TKey>* comparer);
        template<class T>
        static void Sort_13(cli::array<T>* array, int32_t index, int32_t length);
        template<class TKey, class TValue>
        static void Sort_23(cli::array<TKey>* keys, cli::array<TValue>* items, int32_t index, int32_t length);
        template<class T>
        static void Sort_14(cli::array<T>* array, int32_t index, int32_t length, Collections::Generic::IComparer2<T>* comparer);
        template<class TKey, class TValue>
        static void Sort_24(cli::array<TKey>* keys, cli::array<TValue>* items, int32_t index, int32_t length, Collections::Generic::IComparer2<TKey>* comparer);
        template<class TKey, class TValue>
        static void SortImpl_2(cli::array<TKey>* keys, cli::array<TValue>* items, int32_t index, int32_t length, Collections::Generic::IComparer2<TKey>* comparer);
        template<class TKey>
        static void SortImpl_1(cli::array<TKey>* keys, int32_t index, int32_t length, Collections::Generic::IComparer2<TKey>* comparer);
        template<class T>
        static void Sort_15(cli::array<T>* array, Comparison<T>* comparison);
        template<class T>
        static void SortImpl_12(cli::array<T>* array, int32_t length, Comparison<T>* comparison);
        template<class T, class U>
        static bool QSortArrange_2(cli::array<T>* keys, cli::array<U>* items, int32_t lo, int32_t hi);
        template<class T>
        static bool QSortArrange_1(cli::array<T>* keys, int32_t lo, int32_t hi);
        template<class T, class U>
        static void qsort_2(cli::array<T>* keys, cli::array<U>* items, int32_t low, int32_t high);
        template<class T>
        static void qsort_1(cli::array<T>* keys, int32_t low, int32_t high);
        template<class K, class V>
        static bool QSortArrange_22(cli::array<K>* keys, cli::array<V>* items, int32_t lo, int32_t hi, Collections::Generic::IComparer2<K>* comparer);
        template<class K>
        static bool QSortArrange_12(cli::array<K>* keys, int32_t lo, int32_t hi, Collections::Generic::IComparer2<K>* comparer);
        template<class K, class V>
        static void qsort_22(cli::array<K>* keys, cli::array<V>* items, int32_t low, int32_t high, Collections::Generic::IComparer2<K>* comparer);
        template<class K>
        static void qsort_12(cli::array<K>* keys, int32_t low, int32_t high, Collections::Generic::IComparer2<K>* comparer);
        template<class T>
        static bool QSortArrange_13(cli::array<T>* array, int32_t lo, int32_t hi, Comparison<T>* compare);
        template<class T>
        static void qsort_13(cli::array<T>* array, int32_t low, int32_t high, Comparison<T>* compare);
        template<class K>
        static void CheckComparerAvailable_1(cli::array<K>* keys, int32_t low, int32_t high);
        template<class K, class V>
        static void swap_2(cli::array<K>* keys, cli::array<V>* items, int32_t i, int32_t j);
        template<class T>
        static void swap_1(cli::array<T>* array, int32_t i, int32_t j);
        void CopyTo(Array* array, int32_t index);
        void CopyTo2(Array* array, int64_t index);
        template<class T>
        static void Resize_1(cli::array<T>* array, int32_t newSize);
        template<class T>
        static bool TrueForAll_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static void ForEach_1(cli::array<T>* array, Action2<T>* action);
        template<class TInput, class TOutput>
        static cli::array<TOutput>* ConvertAll_2(cli::array<TInput>* array, Converter<TInput, TOutput>* converter);
        template<class T>
        static int32_t FindLastIndex_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static int32_t FindLastIndex_12(cli::array<T>* array, int32_t startIndex, Predicate<T>* match);
        template<class T>
        static int32_t FindLastIndex_13(cli::array<T>* array, int32_t startIndex, int32_t count, Predicate<T>* match);
        template<class T>
        static int32_t FindIndex_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static int32_t FindIndex_12(cli::array<T>* array, int32_t startIndex, Predicate<T>* match);
        template<class T>
        static int32_t FindIndex_13(cli::array<T>* array, int32_t startIndex, int32_t count, Predicate<T>* match);
        template<class T>
        static int32_t BinarySearch_1(cli::array<T>* array, T value);
        template<class T>
        static int32_t BinarySearch_12(cli::array<T>* array, T value, Collections::Generic::IComparer2<T>* comparer);
        template<class T>
        static int32_t BinarySearch_13(cli::array<T>* array, int32_t index, int32_t length, T value);
        template<class T>
        static int32_t BinarySearch_14(cli::array<T>* array, int32_t index, int32_t length, T value, Collections::Generic::IComparer2<T>* comparer);
        template<class T>
        static int32_t IndexOf_1(cli::array<T>* array, T value);
        template<class T>
        static int32_t IndexOf_12(cli::array<T>* array, T value, int32_t startIndex);
        template<class T>
        static int32_t IndexOf_13(cli::array<T>* array, T value, int32_t startIndex, int32_t count);
        template<class T>
        static int32_t LastIndexOf_1(cli::array<T>* array, T value);
        template<class T>
        static int32_t LastIndexOf_12(cli::array<T>* array, T value, int32_t startIndex);
        template<class T>
        static int32_t LastIndexOf_13(cli::array<T>* array, T value, int32_t startIndex, int32_t count);
        template<class T>
        static cli::array<T>* FindAll_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static bool Exists_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static Collections::ObjectModel::ReadOnlyCollection<T>* AsReadOnly_1(cli::array<T>* array);
        template<class T>
        static T Find_1(cli::array<T>* array, Predicate<T>* match);
        template<class T>
        static T FindLast_1(cli::array<T>* array, Predicate<T>* match);
        static void ConstrainedCopy(Array* sourceArray, int32_t sourceIndex, Array* destinationArray, int32_t destinationIndex, int32_t length);
        int32_t get_Length();
        int64_t get_LongLength();
        int32_t get_Rank();
        Object* get_Item(int32_t index);
        Object* set_Item(int32_t index, Object* value);
        int32_t get_Count();
        bool get_IsSynchronized();
        Object* get_SyncRoot();
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        
        virtual int32_t Add_985508e3bf9b7a73(Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, Object* value) override;
        virtual void Remove_69f1b1e57bb34112(Object* value) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual void CopyTo_7065a6e3cf6a140(Array* array, int32_t index) override;
        virtual Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual Object* set_Item_d57705373e0668e7(int32_t index, Object* value) override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
    };
    
    
    struct MANAGED_API ArrayTypeMismatchException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233085;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API AssemblyLoadEventArgs : public virtual EventArgs{
        Reflection::Assembly* m_loadedAssembly;
        
        void constructor(Reflection::Assembly* loadedAssembly);
        Reflection::Assembly* get_LoadedAssembly();
        
    };
    
    
    struct MANAGED_API AttributeUsageAttribute : public virtual Attribute{
        AttributeTargets valid_on;
        bool allow_multiple;
        bool inherited;
        
        void constructor(AttributeTargets validOn);
        bool get_AllowMultiple();
        bool set_AllowMultiple(bool value);
        bool get_Inherited();
        bool set_Inherited(bool value);
        AttributeTargets get_ValidOn();
        
    };
    
    
    struct MANAGED_API BadImageFormatException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147024885;
        String* fileName;
        String* fusionLog;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        void constructor(String* message, String* fileName);
        void constructor(String* message, String* fileName, Exception* inner);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* ToString_1636a0751cb9ac11() override;
        virtual String* get_Message_d211df4045b57cbf() override;
        String* get_FileName();
        String* get_FusionLog();
        
    };
    
    
    struct MANAGED_API BitConverter : public virtual Object{
        static bool SwappedWordsInDouble;
        static bool IsLittleEndian;
        
        BitConverter();
        static void static_constructor();
        static bool AmILittleEndian();
        static bool DoubleWordsAreSwapped();
        static int64_t DoubleToInt64Bits(double value);
        static double Int64BitsToDouble(int64_t value);
        static double InternalInt64BitsToDouble(int64_t value);
        static cli::array<unsigned char>* GetBytes(unsigned char* ptr, int32_t count);
        static cli::array<unsigned char>* GetBytes2(bool value);
        static cli::array<unsigned char>* GetBytes3(char16_t value);
        static cli::array<unsigned char>* GetBytes4(int16_t value);
        static cli::array<unsigned char>* GetBytes5(int32_t value);
        static cli::array<unsigned char>* GetBytes6(int64_t value);
        static cli::array<unsigned char>* GetBytes7(uint16_t value);
        static cli::array<unsigned char>* GetBytes8(uint32_t value);
        static cli::array<unsigned char>* GetBytes9(uint64_t value);
        static cli::array<unsigned char>* GetBytes10(float value);
        static cli::array<unsigned char>* GetBytes11(double value);
        static void PutBytes(unsigned char* dst, cli::array<unsigned char>* src, int32_t start_index, int32_t count);
        static bool ToBoolean(cli::array<unsigned char>* value, int32_t startIndex);
        static char16_t ToChar(cli::array<unsigned char>* value, int32_t startIndex);
        static int16_t ToInt16(cli::array<unsigned char>* value, int32_t startIndex);
        static int32_t ToInt32(cli::array<unsigned char>* value, int32_t startIndex);
        static int64_t ToInt64(cli::array<unsigned char>* value, int32_t startIndex);
        static uint16_t ToUInt16(cli::array<unsigned char>* value, int32_t startIndex);
        static uint32_t ToUInt32(cli::array<unsigned char>* value, int32_t startIndex);
        static uint64_t ToUInt64(cli::array<unsigned char>* value, int32_t startIndex);
        static float ToSingle(cli::array<unsigned char>* value, int32_t startIndex);
        static double ToDouble(cli::array<unsigned char>* value, int32_t startIndex);
        static double SwappableToDouble(cli::array<unsigned char>* value, int32_t startIndex);
        static String* ToString2(cli::array<unsigned char>* value);
        static String* ToString3(cli::array<unsigned char>* value, int32_t startIndex);
        static String* ToString4(cli::array<unsigned char>* value, int32_t startIndex, int32_t length);
        
    };
    
    
    struct MANAGED_API Buffer : public virtual Object{
        
        static int32_t ByteLength(Array* array);
        static unsigned char GetByte(Array* array, int32_t index);
        static void SetByte(Array* array, int32_t index, unsigned char value);
        static void BlockCopy(Array* src, int32_t srcOffset, Array* dst, int32_t dstOffset, int32_t count);
        static int32_t ByteLengthInternal(Array* array);
        static unsigned char GetByteInternal(Array* array, int32_t index);
        static void SetByteInternal(Array* array, int32_t index, int32_t value);
        static bool BlockCopyInternal(Array* src, int32_t src_offset, Array* dest, int32_t dest_offset, int32_t count);
        
    };
    
    
    struct MANAGED_API CannotUnloadAppDomainException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146234347;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        
    };
    
    
    struct MANAGED_API CharEnumerator : public virtual Object, public virtual Collections::IEnumerator, public virtual ICloneable, public virtual Collections::Generic::IEnumerator2<char16_t>, public virtual IDisposable{
        String* str;
        int32_t index;
        int32_t length;
        
        void constructor(String* s);
        void Dispose();
        Object* Clone();
        bool MoveNext();
        void Reset();
        char16_t get_Current();
        Object* get_Current2();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual char16_t get_Current_9be2a11682d08be8() override;
        virtual Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API CLSCompliantAttribute : public virtual Attribute{
        bool is_compliant;
        
        void constructor(bool isCompliant);
        bool get_IsCompliant();
        
    };
    
    
    struct MANAGED_API WindowsConsole : public virtual Object{
        static bool ctrlHandlerAdded;
        static WindowsCancelHandler* cancelHandler;
        
        WindowsConsole();
        void constructor();
        static void static_constructor();
        static int32_t GetConsoleCP();
        static int32_t GetConsoleOutputCP();
        static bool SetConsoleCtrlHandler(WindowsCancelHandler* handler, bool addHandler);
        static bool DoWindowsConsoleCancelEvent(int32_t keyCode);
        static int32_t GetInputCodePage();
        static int32_t GetOutputCodePage();
        static void AddCtrlHandler();
        static void RemoveCtrlHandler();
        
    };
    
    
    struct MANAGED_API Console : public virtual Object{
        static IO::TextWriter* stdout_;
        static IO::TextWriter* stderr_;
        static IO::TextReader* stdin_;
        static Text::Encoding* inputEncoding;
        static Text::Encoding* outputEncoding;
        static ConsoleCancelEventHandler* cancel_event;
        static InternalCancelHandler* cancel_handler;
        
        Console();
        static void static_constructor();
        static void SetupStreams(Text::Encoding* inputEncoding, Text::Encoding* outputEncoding);
        static IO::Stream* Open(void* handle, IO::FileAccess access, int32_t bufferSize);
        static IO::Stream* OpenStandardError();
        static IO::Stream* OpenStandardError2(int32_t bufferSize);
        static IO::Stream* OpenStandardInput();
        static IO::Stream* OpenStandardInput2(int32_t bufferSize);
        static IO::Stream* OpenStandardOutput();
        static IO::Stream* OpenStandardOutput2(int32_t bufferSize);
        static void SetError(IO::TextWriter* newError);
        static void SetIn(IO::TextReader* newIn);
        static void SetOut(IO::TextWriter* newOut);
        static void Write(bool value);
        static void Write2(char16_t value);
        static void Write3(cli::array<char16_t>* buffer);
        static void Write4(Decimal value);
        static void Write5(double value);
        static void Write6(int32_t value);
        static void Write7(int64_t value);
        static void Write8(Object* value);
        static void Write9(float value);
        static void Write10(String* value);
        static void Write11(uint32_t value);
        static void Write12(uint64_t value);
        static void Write13(String* format, Object* arg0);
        static void Write14(String* format, cli::array<Object*>* arg);
        static void Write15(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        static void Write16(String* format, Object* arg0, Object* arg1);
        static void Write17(String* format, Object* arg0, Object* arg1, Object* arg2);
        static void Write18(String* format, Object* arg0, Object* arg1, Object* arg2, Object* arg3);
        static void WriteLine();
        static void WriteLine2(bool value);
        static void WriteLine3(char16_t value);
        static void WriteLine4(cli::array<char16_t>* buffer);
        static void WriteLine5(Decimal value);
        static void WriteLine6(double value);
        static void WriteLine7(int32_t value);
        static void WriteLine8(int64_t value);
        static void WriteLine9(Object* value);
        static void WriteLine10(float value);
        static void WriteLine11(String* value);
        static void WriteLine12(uint32_t value);
        static void WriteLine13(uint64_t value);
        static void WriteLine14(String* format, Object* arg0);
        static void WriteLine15(String* format, cli::array<Object*>* arg);
        static void WriteLine16(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        static void WriteLine17(String* format, Object* arg0, Object* arg1);
        static void WriteLine18(String* format, Object* arg0, Object* arg1, Object* arg2);
        static void WriteLine19(String* format, Object* arg0, Object* arg1, Object* arg2, Object* arg3);
        static int32_t Read();
        static String* ReadLine();
        static void Beep();
        static void Beep2(int32_t frequency, int32_t duration);
        static void Clear();
        static void MoveBufferArea(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop);
        static void MoveBufferArea2(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
        static ConsoleKeyInfo ReadKey();
        static ConsoleKeyInfo ReadKey2(bool intercept);
        static void ResetColor();
        static void SetBufferSize(int32_t width, int32_t height);
        static void SetCursorPosition(int32_t left, int32_t top);
        static void SetWindowPosition(int32_t left, int32_t top);
        static void SetWindowSize(int32_t width, int32_t height);
        static void DoConsoleCancelEvent();
        static IO::TextWriter* get_Error();
        static IO::TextWriter* get_Out();
        static IO::TextReader* get_In();
        static Text::Encoding* get_InputEncoding();
        static Text::Encoding* set_InputEncoding(Text::Encoding* value);
        static Text::Encoding* get_OutputEncoding();
        static Text::Encoding* set_OutputEncoding(Text::Encoding* value);
        static ConsoleColor get_BackgroundColor();
        static ConsoleColor set_BackgroundColor(ConsoleColor value);
        static int32_t get_BufferHeight();
        static int32_t set_BufferHeight(int32_t value);
        static int32_t get_BufferWidth();
        static int32_t set_BufferWidth(int32_t value);
        static bool get_CapsLock();
        static int32_t get_CursorLeft();
        static int32_t set_CursorLeft(int32_t value);
        static int32_t get_CursorTop();
        static int32_t set_CursorTop(int32_t value);
        static int32_t get_CursorSize();
        static int32_t set_CursorSize(int32_t value);
        static bool get_CursorVisible();
        static bool set_CursorVisible(bool value);
        static ConsoleColor get_ForegroundColor();
        static ConsoleColor set_ForegroundColor(ConsoleColor value);
        static bool get_KeyAvailable();
        static int32_t get_LargestWindowHeight();
        static int32_t get_LargestWindowWidth();
        static bool get_NumberLock();
        static String* get_Title();
        static String* set_Title(String* value);
        static bool get_TreatControlCAsInput();
        static bool set_TreatControlCAsInput(bool value);
        static int32_t get_WindowHeight();
        static int32_t set_WindowHeight(int32_t value);
        static int32_t get_WindowLeft();
        static int32_t set_WindowLeft(int32_t value);
        static int32_t get_WindowTop();
        static int32_t set_WindowTop(int32_t value);
        static int32_t get_WindowWidth();
        static int32_t set_WindowWidth(int32_t value);
        static void add_CancelKeyPress(ConsoleCancelEventHandler* value);
        static void remove_CancelKeyPress(ConsoleCancelEventHandler* value);
        
    };
    
    
    struct MANAGED_API ConsoleCancelEventArgs : public virtual EventArgs{
        bool cancel;
        ConsoleSpecialKey specialKey;
        
        void constructor(ConsoleSpecialKey key);
        bool get_Cancel();
        bool set_Cancel(bool value);
        ConsoleSpecialKey get_SpecialKey();
        
    };
    
    
    struct MANAGED_API ConsoleDriver : public virtual Object{
        static IConsoleDriver* driver;
        static bool is_console;
        static bool called_isatty;
        
        ConsoleDriver();
        static void static_constructor();
        static IConsoleDriver* CreateNullConsoleDriver();
        static IConsoleDriver* CreateWindowsConsoleDriver();
        static IConsoleDriver* CreateTermInfoDriver(String* term);
        static void Beep(int32_t frequency, int32_t duration);
        static void Clear();
        static void MoveBufferArea(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop);
        static void MoveBufferArea2(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
        static void Init();
        static int32_t Read();
        static String* ReadLine();
        static ConsoleKeyInfo ReadKey(bool intercept);
        static void ResetColor();
        static void SetBufferSize(int32_t width, int32_t height);
        static void SetCursorPosition(int32_t left, int32_t top);
        static void SetWindowPosition(int32_t left, int32_t top);
        static void SetWindowSize(int32_t width, int32_t height);
        static bool Isatty(void* handle);
        static int32_t InternalKeyAvailable(int32_t ms_timeout);
        static bool TtySetup(String* keypadXmit, String* teardown, cli::array<unsigned char>* control_characters, int32_t* address);
        static bool SetEcho(bool wantEcho);
        static bool SetBreak(bool wantBreak);
        static bool get_Initialized();
        static ConsoleColor get_BackgroundColor();
        static ConsoleColor set_BackgroundColor(ConsoleColor value);
        static int32_t get_BufferHeight();
        static int32_t set_BufferHeight(int32_t value);
        static int32_t get_BufferWidth();
        static int32_t set_BufferWidth(int32_t value);
        static bool get_CapsLock();
        static int32_t get_CursorLeft();
        static int32_t set_CursorLeft(int32_t value);
        static int32_t get_CursorSize();
        static int32_t set_CursorSize(int32_t value);
        static int32_t get_CursorTop();
        static int32_t set_CursorTop(int32_t value);
        static bool get_CursorVisible();
        static bool set_CursorVisible(bool value);
        static bool get_KeyAvailable();
        static ConsoleColor get_ForegroundColor();
        static ConsoleColor set_ForegroundColor(ConsoleColor value);
        static int32_t get_LargestWindowHeight();
        static int32_t get_LargestWindowWidth();
        static bool get_NumberLock();
        static String* get_Title();
        static String* set_Title(String* value);
        static bool get_TreatControlCAsInput();
        static bool set_TreatControlCAsInput(bool value);
        static int32_t get_WindowHeight();
        static int32_t set_WindowHeight(int32_t value);
        static int32_t get_WindowLeft();
        static int32_t set_WindowLeft(int32_t value);
        static int32_t get_WindowTop();
        static int32_t set_WindowTop(int32_t value);
        static int32_t get_WindowWidth();
        static int32_t set_WindowWidth(int32_t value);
        static bool get_IsErrorRedirected();
        static bool get_IsOutputRedirected();
        static bool get_IsInputRedirected();
        static bool get_IsConsole();
        
    };
    
    
    struct MANAGED_API ContextMarshalException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233084;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API ContextStaticAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ControlCharacters : public virtual Object{
        static constexpr int32_t Intr = 0;
        static constexpr int32_t Quit = 1;
        static constexpr int32_t Erase = 2;
        static constexpr int32_t Kill = 3;
        static constexpr int32_t EOF = 4;
        static constexpr int32_t Time = 5;
        static constexpr int32_t Min = 6;
        static constexpr int32_t SWTC = 7;
        static constexpr int32_t Start = 8;
        static constexpr int32_t Stop = 9;
        static constexpr int32_t Susp = 10;
        static constexpr int32_t EOL = 11;
        static constexpr int32_t Reprint = 12;
        static constexpr int32_t Discard = 13;
        static constexpr int32_t WErase = 14;
        static constexpr int32_t LNext = 15;
        static constexpr int32_t EOL2 = 16;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API Convert : public virtual Object{
        static constexpr int32_t MaxBytesPerLine = 57;
        static Object* DBNull2;
        static cli::array<Type*>* conversionTable;
        
        Convert();
        static void static_constructor();
        static cli::array<unsigned char>* InternalFromBase64String(String* str, bool allowWhitespaceOnly);
        static cli::array<unsigned char>* InternalFromBase64CharArray(cli::array<char16_t>* arr, int32_t offset, int32_t length);
        static cli::array<unsigned char>* FromBase64CharArray(cli::array<char16_t>* inArray, int32_t offset, int32_t length);
        static cli::array<unsigned char>* FromBase64String(String* s);
        static TypeCode GetTypeCode(Object* value);
        static bool IsDBNull(Object* value);
        static int32_t ToBase64CharArray(cli::array<unsigned char>* inArray, int32_t offsetIn, int32_t length, cli::array<char16_t>* outArray, int32_t offsetOut);
        static String* ToBase64String(cli::array<unsigned char>* inArray);
        static String* ToBase64String2(cli::array<unsigned char>* inArray, int32_t offset, int32_t length);
        static String* ToBase64String3(cli::array<unsigned char>* inArray, Base64FormattingOptions options);
        static String* ToBase64String4(cli::array<unsigned char>* inArray, int32_t offset, int32_t length, Base64FormattingOptions options);
        static int32_t ToBase64CharArray2(cli::array<unsigned char>* inArray, int32_t offsetIn, int32_t length, cli::array<char16_t>* outArray, int32_t offsetOut, Base64FormattingOptions options);
        static Text::StringBuilder* ToBase64StringBuilderWithLine(cli::array<unsigned char>* inArray, int32_t offset, int32_t length);
        static bool ToBoolean(bool value);
        static bool ToBoolean2(unsigned char value);
        static bool ToBoolean3(char16_t value);
        static bool ToBoolean4(DateTime value);
        static bool ToBoolean5(Decimal value);
        static bool ToBoolean6(double value);
        static bool ToBoolean7(float value);
        static bool ToBoolean8(int32_t value);
        static bool ToBoolean9(int64_t value);
        static bool ToBoolean10(signed char value);
        static bool ToBoolean11(int16_t value);
        static bool ToBoolean12(String* value);
        static bool ToBoolean13(String* value, IFormatProvider* provider);
        static bool ToBoolean14(uint32_t value);
        static bool ToBoolean15(uint64_t value);
        static bool ToBoolean16(uint16_t value);
        static bool ToBoolean17(Object* value);
        static bool ToBoolean18(Object* value, IFormatProvider* provider);
        static unsigned char ToByte(bool value);
        static unsigned char ToByte2(unsigned char value);
        static unsigned char ToByte3(char16_t value);
        static unsigned char ToByte4(DateTime value);
        static unsigned char ToByte5(Decimal value);
        static unsigned char ToByte6(double value);
        static unsigned char ToByte7(float value);
        static unsigned char ToByte8(int32_t value);
        static unsigned char ToByte9(int64_t value);
        static unsigned char ToByte10(signed char value);
        static unsigned char ToByte11(int16_t value);
        static unsigned char ToByte12(String* value);
        static unsigned char ToByte13(String* value, IFormatProvider* provider);
        static unsigned char ToByte14(String* value, int32_t fromBase);
        static unsigned char ToByte15(uint32_t value);
        static unsigned char ToByte16(uint64_t value);
        static unsigned char ToByte17(uint16_t value);
        static unsigned char ToByte18(Object* value);
        static unsigned char ToByte19(Object* value, IFormatProvider* provider);
        static char16_t ToChar(bool value);
        static char16_t ToChar2(unsigned char value);
        static char16_t ToChar3(char16_t value);
        static char16_t ToChar4(DateTime value);
        static char16_t ToChar5(Decimal value);
        static char16_t ToChar6(double value);
        static char16_t ToChar7(int32_t value);
        static char16_t ToChar8(int64_t value);
        static char16_t ToChar9(float value);
        static char16_t ToChar10(signed char value);
        static char16_t ToChar11(int16_t value);
        static char16_t ToChar12(String* value);
        static char16_t ToChar13(String* value, IFormatProvider* provider);
        static char16_t ToChar14(uint32_t value);
        static char16_t ToChar15(uint64_t value);
        static char16_t ToChar16(uint16_t value);
        static char16_t ToChar17(Object* value);
        static char16_t ToChar18(Object* value, IFormatProvider* provider);
        static DateTime ToDateTime(String* value);
        static DateTime ToDateTime2(String* value, IFormatProvider* provider);
        static DateTime ToDateTime3(bool value);
        static DateTime ToDateTime4(unsigned char value);
        static DateTime ToDateTime5(char16_t value);
        static DateTime ToDateTime6(DateTime value);
        static DateTime ToDateTime7(Decimal value);
        static DateTime ToDateTime8(double value);
        static DateTime ToDateTime9(int16_t value);
        static DateTime ToDateTime10(int32_t value);
        static DateTime ToDateTime11(int64_t value);
        static DateTime ToDateTime12(float value);
        static DateTime ToDateTime13(Object* value);
        static DateTime ToDateTime14(Object* value, IFormatProvider* provider);
        static DateTime ToDateTime15(signed char value);
        static DateTime ToDateTime16(uint16_t value);
        static DateTime ToDateTime17(uint32_t value);
        static DateTime ToDateTime18(uint64_t value);
        static Decimal ToDecimal(bool value);
        static Decimal ToDecimal2(unsigned char value);
        static Decimal ToDecimal3(char16_t value);
        static Decimal ToDecimal4(DateTime value);
        static Decimal ToDecimal5(Decimal value);
        static Decimal ToDecimal6(double value);
        static Decimal ToDecimal7(float value);
        static Decimal ToDecimal8(int32_t value);
        static Decimal ToDecimal9(int64_t value);
        static Decimal ToDecimal10(signed char value);
        static Decimal ToDecimal11(int16_t value);
        static Decimal ToDecimal12(String* value);
        static Decimal ToDecimal13(String* value, IFormatProvider* provider);
        static Decimal ToDecimal14(uint32_t value);
        static Decimal ToDecimal15(uint64_t value);
        static Decimal ToDecimal16(uint16_t value);
        static Decimal ToDecimal17(Object* value);
        static Decimal ToDecimal18(Object* value, IFormatProvider* provider);
        static double ToDouble(bool value);
        static double ToDouble2(unsigned char value);
        static double ToDouble3(char16_t value);
        static double ToDouble4(DateTime value);
        static double ToDouble5(Decimal value);
        static double ToDouble6(double value);
        static double ToDouble7(float value);
        static double ToDouble8(int32_t value);
        static double ToDouble9(int64_t value);
        static double ToDouble10(signed char value);
        static double ToDouble11(int16_t value);
        static double ToDouble12(String* value);
        static double ToDouble13(String* value, IFormatProvider* provider);
        static double ToDouble14(uint32_t value);
        static double ToDouble15(uint64_t value);
        static double ToDouble16(uint16_t value);
        static double ToDouble17(Object* value);
        static double ToDouble18(Object* value, IFormatProvider* provider);
        static int16_t ToInt16(bool value);
        static int16_t ToInt162(unsigned char value);
        static int16_t ToInt163(char16_t value);
        static int16_t ToInt164(DateTime value);
        static int16_t ToInt165(Decimal value);
        static int16_t ToInt166(double value);
        static int16_t ToInt167(float value);
        static int16_t ToInt168(int32_t value);
        static int16_t ToInt169(int64_t value);
        static int16_t ToInt1610(signed char value);
        static int16_t ToInt1611(int16_t value);
        static int16_t ToInt1612(String* value);
        static int16_t ToInt1613(String* value, IFormatProvider* provider);
        static int16_t ToInt1614(String* value, int32_t fromBase);
        static int16_t ToInt1615(uint32_t value);
        static int16_t ToInt1616(uint64_t value);
        static int16_t ToInt1617(uint16_t value);
        static int16_t ToInt1618(Object* value);
        static int16_t ToInt1619(Object* value, IFormatProvider* provider);
        static int32_t ToInt32(bool value);
        static int32_t ToInt322(unsigned char value);
        static int32_t ToInt323(char16_t value);
        static int32_t ToInt324(DateTime value);
        static int32_t ToInt325(Decimal value);
        static int32_t ToInt326(double value);
        static int32_t ToInt327(float value);
        static int32_t ToInt328(int32_t value);
        static int32_t ToInt329(int64_t value);
        static int32_t ToInt3210(signed char value);
        static int32_t ToInt3211(int16_t value);
        static int32_t ToInt3212(String* value);
        static int32_t ToInt3213(String* value, IFormatProvider* provider);
        static int32_t ToInt3214(String* value, int32_t fromBase);
        static int32_t ToInt3215(uint32_t value);
        static int32_t ToInt3216(uint64_t value);
        static int32_t ToInt3217(uint16_t value);
        static int32_t ToInt3218(Object* value);
        static int32_t ToInt3219(Object* value, IFormatProvider* provider);
        static int64_t ToInt64(bool value);
        static int64_t ToInt642(unsigned char value);
        static int64_t ToInt643(char16_t value);
        static int64_t ToInt644(DateTime value);
        static int64_t ToInt645(Decimal value);
        static int64_t ToInt646(double value);
        static int64_t ToInt647(float value);
        static int64_t ToInt648(int32_t value);
        static int64_t ToInt649(int64_t value);
        static int64_t ToInt6410(signed char value);
        static int64_t ToInt6411(int16_t value);
        static int64_t ToInt6412(String* value);
        static int64_t ToInt6413(String* value, IFormatProvider* provider);
        static int64_t ToInt6414(String* value, int32_t fromBase);
        static int64_t ToInt6415(uint32_t value);
        static int64_t ToInt6416(uint64_t value);
        static int64_t ToInt6417(uint16_t value);
        static int64_t ToInt6418(Object* value);
        static int64_t ToInt6419(Object* value, IFormatProvider* provider);
        static signed char ToSByte(bool value);
        static signed char ToSByte2(unsigned char value);
        static signed char ToSByte3(char16_t value);
        static signed char ToSByte4(DateTime value);
        static signed char ToSByte5(Decimal value);
        static signed char ToSByte6(double value);
        static signed char ToSByte7(float value);
        static signed char ToSByte8(int32_t value);
        static signed char ToSByte9(int64_t value);
        static signed char ToSByte10(signed char value);
        static signed char ToSByte11(int16_t value);
        static signed char ToSByte12(String* value);
        static signed char ToSByte13(String* value, IFormatProvider* provider);
        static signed char ToSByte14(String* value, int32_t fromBase);
        static signed char ToSByte15(uint32_t value);
        static signed char ToSByte16(uint64_t value);
        static signed char ToSByte17(uint16_t value);
        static signed char ToSByte18(Object* value);
        static signed char ToSByte19(Object* value, IFormatProvider* provider);
        static float ToSingle(bool value);
        static float ToSingle2(unsigned char value);
        static float ToSingle3(char16_t value);
        static float ToSingle4(DateTime value);
        static float ToSingle5(Decimal value);
        static float ToSingle6(double value);
        static float ToSingle7(float value);
        static float ToSingle8(int32_t value);
        static float ToSingle9(int64_t value);
        static float ToSingle10(signed char value);
        static float ToSingle11(int16_t value);
        static float ToSingle12(String* value);
        static float ToSingle13(String* value, IFormatProvider* provider);
        static float ToSingle14(uint32_t value);
        static float ToSingle15(uint64_t value);
        static float ToSingle16(uint16_t value);
        static float ToSingle17(Object* value);
        static float ToSingle18(Object* value, IFormatProvider* provider);
        static String* ToString2(bool value);
        static String* ToString3(bool value, IFormatProvider* provider);
        static String* ToString4(unsigned char value);
        static String* ToString5(unsigned char value, IFormatProvider* provider);
        static String* ToString6(unsigned char value, int32_t toBase);
        static String* ToString7(char16_t value);
        static String* ToString8(char16_t value, IFormatProvider* provider);
        static String* ToString9(DateTime value);
        static String* ToString10(DateTime value, IFormatProvider* provider);
        static String* ToString11(Decimal value);
        static String* ToString12(Decimal value, IFormatProvider* provider);
        static String* ToString13(double value);
        static String* ToString14(double value, IFormatProvider* provider);
        static String* ToString15(float value);
        static String* ToString16(float value, IFormatProvider* provider);
        static String* ToString17(int32_t value);
        static String* ToString18(int32_t value, int32_t toBase);
        static String* ToString19(int32_t value, IFormatProvider* provider);
        static String* ToString20(int64_t value);
        static String* ToString21(int64_t value, int32_t toBase);
        static String* ToString22(int64_t value, IFormatProvider* provider);
        static String* ToString23(Object* value);
        static String* ToString24(Object* value, IFormatProvider* provider);
        static String* ToString25(signed char value);
        static String* ToString26(signed char value, IFormatProvider* provider);
        static String* ToString27(int16_t value);
        static String* ToString28(int16_t value, int32_t toBase);
        static String* ToString29(int16_t value, IFormatProvider* provider);
        static String* ToString30(String* value);
        static String* ToString31(String* value, IFormatProvider* provider);
        static String* ToString32(uint32_t value);
        static String* ToString33(uint32_t value, IFormatProvider* provider);
        static String* ToString34(uint64_t value);
        static String* ToString35(uint64_t value, IFormatProvider* provider);
        static String* ToString36(uint16_t value);
        static String* ToString37(uint16_t value, IFormatProvider* provider);
        static uint16_t ToUInt16(bool value);
        static uint16_t ToUInt162(unsigned char value);
        static uint16_t ToUInt163(char16_t value);
        static uint16_t ToUInt164(DateTime value);
        static uint16_t ToUInt165(Decimal value);
        static uint16_t ToUInt166(double value);
        static uint16_t ToUInt167(float value);
        static uint16_t ToUInt168(int32_t value);
        static uint16_t ToUInt169(int64_t value);
        static uint16_t ToUInt1610(signed char value);
        static uint16_t ToUInt1611(int16_t value);
        static uint16_t ToUInt1612(String* value);
        static uint16_t ToUInt1613(String* value, IFormatProvider* provider);
        static uint16_t ToUInt1614(String* value, int32_t fromBase);
        static uint16_t ToUInt1615(uint32_t value);
        static uint16_t ToUInt1616(uint64_t value);
        static uint16_t ToUInt1617(uint16_t value);
        static uint16_t ToUInt1618(Object* value);
        static uint16_t ToUInt1619(Object* value, IFormatProvider* provider);
        static uint32_t ToUInt32(bool value);
        static uint32_t ToUInt322(unsigned char value);
        static uint32_t ToUInt323(char16_t value);
        static uint32_t ToUInt324(DateTime value);
        static uint32_t ToUInt325(Decimal value);
        static uint32_t ToUInt326(double value);
        static uint32_t ToUInt327(float value);
        static uint32_t ToUInt328(int32_t value);
        static uint32_t ToUInt329(int64_t value);
        static uint32_t ToUInt3210(signed char value);
        static uint32_t ToUInt3211(int16_t value);
        static uint32_t ToUInt3212(String* value);
        static uint32_t ToUInt3213(String* value, IFormatProvider* provider);
        static uint32_t ToUInt3214(String* value, int32_t fromBase);
        static uint32_t ToUInt3215(uint32_t value);
        static uint32_t ToUInt3216(uint64_t value);
        static uint32_t ToUInt3217(uint16_t value);
        static uint32_t ToUInt3218(Object* value);
        static uint32_t ToUInt3219(Object* value, IFormatProvider* provider);
        static uint64_t ToUInt64(bool value);
        static uint64_t ToUInt642(unsigned char value);
        static uint64_t ToUInt643(char16_t value);
        static uint64_t ToUInt644(DateTime value);
        static uint64_t ToUInt645(Decimal value);
        static uint64_t ToUInt646(double value);
        static uint64_t ToUInt647(float value);
        static uint64_t ToUInt648(int32_t value);
        static uint64_t ToUInt649(int64_t value);
        static uint64_t ToUInt6410(signed char value);
        static uint64_t ToUInt6411(int16_t value);
        static uint64_t ToUInt6412(String* value);
        static uint64_t ToUInt6413(String* value, IFormatProvider* provider);
        static uint64_t ToUInt6414(String* value, int32_t fromBase);
        static uint64_t ToUInt6415(uint32_t value);
        static uint64_t ToUInt6416(uint64_t value);
        static uint64_t ToUInt6417(uint16_t value);
        static uint64_t ToUInt6418(Object* value);
        static uint64_t ToUInt6419(Object* value, IFormatProvider* provider);
        static Object* ChangeType(Object* value, Type* conversionType);
        static Object* ChangeType2(Object* value, TypeCode typeCode);
        static Object* ChangeType3(Object* value, Type* conversionType, IFormatProvider* provider);
        static Object* ChangeType4(Object* value, TypeCode typeCode, IFormatProvider* provider);
        static bool NotValidBase(int32_t value);
        static int32_t ConvertFromBase(String* value, int32_t fromBase, bool unsigned_);
        static int64_t ConvertFromBase64(String* value, int32_t fromBase, bool unsigned_);
        static void EndianSwap(cli::array<unsigned char>* value);
        static String* ConvertToBase2(cli::array<unsigned char>* value);
        static String* ConvertToBase8(cli::array<unsigned char>* value);
        static String* ConvertToBase16(cli::array<unsigned char>* value);
        static Object* ToType(Object* value, Type* conversionType, IFormatProvider* provider, bool try_target_to_type);
        
    };
    
    
    struct MANAGED_API DataMisalignedException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233023;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        
    };
    
    
    struct MANAGED_API DateTimeUtils : public virtual Object{
        
        static int32_t CountRepeat(String* fmt, int32_t p, char16_t c);
        static void ZeroPad(Text::StringBuilder* output, int32_t digits, int32_t len);
        static int32_t ParseQuotedString(String* fmt, int32_t pos, Text::StringBuilder* output);
        static String* GetStandardPattern(char16_t format, Globalization::DateTimeFormatInfo* dfi, bool useutc, bool use_invariant);
        static String* GetStandardPattern2(char16_t format, Globalization::DateTimeFormatInfo* dfi, bool useutc, bool use_invariant, bool date_time_offset);
        static String* ToString2(DateTime dt, String* format, Globalization::DateTimeFormatInfo* dfi);
        static String* ToString3(DateTime dt, Nullable2<TimeSpan> utc_offset, String* format, Globalization::DateTimeFormatInfo* dfi);
        
    };
    
    
    struct MANAGED_API DBNull : public virtual Object, public virtual Runtime::Serialization::ISerializable, public virtual IConvertible{
        static DBNull* Value;
        
        DBNull();
        void constructor();
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        TypeCode GetTypeCode();
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
    };
    
    
    struct MANAGED_API DelegateData : public virtual Object{
        Type* target_type;
        String* method_name;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DelegateEntry : public virtual Object{
        String* type;
        String* assembly;
        Object* target;
        String* targetTypeAssembly;
        String* targetTypeName;
        String* methodName;
        DelegateEntry* delegateEntry;
        
        void constructor(Delegate* del, String* targetLabel);
        Delegate* DeserializeDelegate(Runtime::Serialization::SerializationInfo* info);
        
    };
    
    
    struct MANAGED_API DelegateSerializationHolder : public virtual Object, public virtual Runtime::Serialization::ISerializable, public virtual Runtime::Serialization::IObjectReference{
        Delegate* _delegate;
        
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        static void GetDelegateData(Delegate* instance, Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        Object* GetRealObject(Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual Object* GetRealObject_692566897a6926e4(Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API DivideByZeroException : public virtual ArithmeticException{
        static constexpr int32_t Result = -2147352558;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API DllNotFoundException : public virtual TypeLoadException{
        static constexpr int32_t Result = -2146233052;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API DuplicateWaitObjectException : public virtual ArgumentException{
        static constexpr int32_t Result = -2146233047;
        
        void constructor();
        void constructor(String* parameterName);
        void constructor(String* parameterName, String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API EntryPointNotFoundException : public virtual TypeLoadException{
        static constexpr int32_t Result = -2146233053;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API SByteComparer : public virtual Object, public virtual Collections::IComparer, public virtual Collections::Generic::IComparer2<signed char>{
        
        void constructor();
        int32_t Compare(Object* x, Object* y);
        int32_t Compare2(signed char ix, signed char iy);
        
        virtual int32_t Compare_451fd276747b629d(Object* x, Object* y) override;
        virtual int32_t Compare_5902559f67a8cefa(signed char ix, signed char iy) override;
    };
    
    
    struct MANAGED_API ShortComparer : public virtual Object, public virtual Collections::IComparer, public virtual Collections::Generic::IComparer2<int16_t>{
        
        void constructor();
        int32_t Compare(Object* x, Object* y);
        int32_t Compare2(int16_t ix, int16_t iy);
        
        virtual int32_t Compare_451fd276747b629d(Object* x, Object* y) override;
        virtual int32_t Compare_5902559f67a8cefa(int16_t ix, int16_t iy) override;
    };
    
    
    struct MANAGED_API IntComparer : public virtual Object, public virtual Collections::IComparer, public virtual Collections::Generic::IComparer2<int32_t>{
        
        void constructor();
        int32_t Compare(Object* x, Object* y);
        int32_t Compare2(int32_t ix, int32_t iy);
        
        virtual int32_t Compare_451fd276747b629d(Object* x, Object* y) override;
        virtual int32_t Compare_5902559f67a8cefa(int32_t ix, int32_t iy) override;
    };
    
    
    struct MANAGED_API LongComparer : public virtual Object, public virtual Collections::IComparer, public virtual Collections::Generic::IComparer2<int64_t>{
        
        void constructor();
        int32_t Compare(Object* x, Object* y);
        int32_t Compare2(int64_t ix, int64_t iy);
        
        virtual int32_t Compare_451fd276747b629d(Object* x, Object* y) override;
        virtual int32_t Compare_5902559f67a8cefa(int64_t ix, int64_t iy) override;
    };
    
    
    struct MANAGED_API Environment : public virtual Object{
        static constexpr int32_t mono_corlib_version = 100;
        static String* nl;
        static OperatingSystem* os;
        
        static String* GetNewLine();
        static String* GetOSVersionString();
        static void Exit(int32_t exitCode);
        static String* ExpandEnvironmentVariables(String* name);
        static cli::array<String*>* GetCommandLineArgs();
        static String* internalGetEnvironmentVariable(String* variable);
        static String* GetEnvironmentVariable(String* variable);
        static Collections::Hashtable* GetEnvironmentVariablesNoCase();
        static Collections::IDictionary* GetEnvironmentVariables();
        static String* GetWindowsFolderPath(int32_t folder);
        static String* GetFolderPath(SpecialFolder folder);
        static String* GetFolderPath2(SpecialFolder folder, SpecialFolderOption option);
        static String* ReadXdgUserDir(String* config_dir, String* home_dir, String* key, String* fallback);
        static String* UnixGetFolderPath(SpecialFolder folder, SpecialFolderOption option);
        static cli::array<String*>* GetLogicalDrives();
        static void internalBroadcastSettingChange();
        static String* GetEnvironmentVariable2(String* variable, EnvironmentVariableTarget target);
        static Collections::IDictionary* GetEnvironmentVariables2(EnvironmentVariableTarget target);
        static void SetEnvironmentVariable(String* variable, String* value);
        static void SetEnvironmentVariable2(String* variable, String* value, EnvironmentVariableTarget target);
        static void InternalSetEnvironmentVariable(String* variable, String* value);
        static void FailFast(String* message);
        static void FailFast2(String* message, Exception* exception);
        static String* internalGetGacPath();
        static cli::array<String*>* GetLogicalDrivesInternal();
        static cli::array<String*>* GetEnvironmentVariableNames();
        static String* GetMachineConfigPath();
        static String* internalGetHome();
        static int32_t GetPageSize();
        static String* get_CommandLine();
        static String* get_CurrentDirectory();
        static String* set_CurrentDirectory(String* value);
        static int32_t get_ExitCode();
        static int32_t set_ExitCode(int32_t value);
        static bool get_HasShutdownStarted();
        static String* get_MachineName();
        static String* get_NewLine();
        static PlatformID get_Platform();
        static OperatingSystem* get_OSVersion();
        static String* get_StackTrace();
        static String* get_SystemDirectory();
        static int32_t get_TickCount();
        static String* get_UserDomainName();
        static bool get_UserInteractive();
        static String* get_UserName();
        static Version* get_Version();
        static int64_t get_WorkingSet();
        static bool get_Is64BitOperatingSystem();
        static bool get_Is64BitProcess();
        static int32_t get_SystemPageSize();
        static int32_t get_ProcessorCount();
        static bool get_IsRunningOnWindows();
        static String* get_GacPath();
        static bool get_IsUnix();
        static bool get_IsMacOS();
        
    };
    
    
    struct MANAGED_API ExecutionEngineException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API FieldAccessException : public virtual MemberAccessException{
        static constexpr int32_t Result = -2146233081;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API FlagsAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API GC : public virtual Object{
        static Object* EPHEMERON_TOMBSTONE;
        
        GC();
        static void static_constructor();
        static void InternalCollect(int32_t generation);
        static void Collect();
        static void Collect2(int32_t generation);
        static void Collect3(int32_t generation, GCCollectionMode mode);
        static int32_t GetGeneration(Object* obj);
        static int32_t GetGeneration2(WeakReference* wo);
        static int64_t GetTotalMemory(bool forceFullCollection);
        static void KeepAlive(Object* obj);
        static void ReRegisterForFinalize(Object* obj);
        static void SuppressFinalize(Object* obj);
        static void WaitForPendingFinalizers();
        static int32_t CollectionCount(int32_t generation);
        static void RecordPressure(int64_t bytesAllocated);
        static void AddMemoryPressure(int64_t bytesAllocated);
        static void RemoveMemoryPressure(int64_t bytesAllocated);
        static GCNotificationStatus WaitForFullGCApproach();
        static GCNotificationStatus WaitForFullGCApproach2(int32_t millisecondsTimeout);
        static GCNotificationStatus WaitForFullGCComplete();
        static GCNotificationStatus WaitForFullGCComplete2(int32_t millisecondsTimeout);
        static void RegisterForFullGCNotification(int32_t maxGenerationThreshold, int32_t largeObjectHeapThreshold);
        static void CancelFullGCNotification();
        static void register_ephemeron_array(cli::array<Runtime::CompilerServices::Ephemeron>* array);
        static Object* get_ephemeron_tombstone();
        static int32_t get_MaxGeneration();
        
    };
    
    
    struct MANAGED_API GuidParser : public virtual Object{
        String* _src;
        int32_t _length;
        int32_t _cur;
        
        void constructor(String* src);
        void Reset();
        static bool HasHyphen(Format format);
        bool TryParseNDBP(Format format, Guid guid);
        bool TryParseX(Guid guid);
        bool ParseHexPrefix();
        bool ParseChar(char16_t c);
        bool ParseHex(int32_t length, bool strict, uint64_t res);
        bool Parse(Format format, Guid guid);
        bool Parse2(Guid guid);
        bool get_Eof();
        
    };
    
    
    struct MANAGED_API IndexOutOfRangeException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API InsufficientExecutionStackException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        
    };
    
    
    struct MANAGED_API InsufficientMemoryException : public virtual OutOfMemoryException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        
    };
    
    
    struct MANAGED_API InvalidCastException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147467262;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(String* message, int32_t errorCode);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API InvalidProgramException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API InvalidTimeZoneException : public virtual Exception{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API KnownTerminals : public virtual Object{
        
        static cli::array<unsigned char>* get_linux();
        static cli::array<unsigned char>* get_xterm();
        static cli::array<unsigned char>* get_ansi();
        
    };
    
    
    template<class T> struct MANAGED_API Lazy : public virtual Object{
        T value;
        Func<T>* factory;
        Object* monitor;
        Exception* exception;
        Threading::LazyThreadSafetyMode mode;
        bool inited;
        static Func<T>* __f__am_cache0;
        static Func<T>* __f__am_cache1;
        
        void constructor();
        void constructor(Func<T>* valueFactory);
        void constructor(bool isThreadSafe);
        void constructor(Func<T>* valueFactory, bool isThreadSafe);
        void constructor(Threading::LazyThreadSafetyMode mode);
        void constructor(Func<T>* valueFactory, Threading::LazyThreadSafetyMode mode);
        T InitValue();
        virtual String* ToString_1636a0751cb9ac11() override;
        static T _Lazy_m__1();
        static T _Lazy_m__2();
        T get_Value();
        bool get_IsValueCreated();
        
    };
    
    
    struct MANAGED_API LoaderOptimizationAttribute : public virtual Attribute{
        LoaderOptimization lo;
        
        void constructor(unsigned char value);
        void constructor(LoaderOptimization value);
        LoaderOptimization get_Value();
        
    };
    
    
    struct MANAGED_API LocalDataStoreSlot : public virtual Object{
        int32_t slot;
        bool thread_local_;
        static Object* lock_obj;
        static cli::array<bool>* slot_bitmap_thread;
        static cli::array<bool>* slot_bitmap_context;
        
        LocalDataStoreSlot();
        void constructor(bool in_thread);
        static void static_constructor();
        virtual void Finalize_e34971a3d042a046();
        
    };
    
    
    struct MANAGED_API Math : public virtual Object{
        static constexpr double E = 2.71828182845905;
        static constexpr double PI = 3.14159265358979;
        
        static Decimal Abs(Decimal value);
        static double Abs2(double value);
        static float Abs3(float value);
        static int32_t Abs4(int32_t value);
        static int64_t Abs5(int64_t value);
        static signed char Abs6(signed char value);
        static int16_t Abs7(int16_t value);
        static Decimal Ceiling(Decimal d);
        static double Ceiling2(double a);
        static int64_t BigMul(int32_t a, int32_t b);
        static int32_t DivRem(int32_t a, int32_t b, int32_t result);
        static int64_t DivRem2(int64_t a, int64_t b, int64_t result);
        static double Floor(double d);
        static double IEEERemainder(double x, double y);
        static double Log(double a, double newBase);
        static unsigned char Max(unsigned char val1, unsigned char val2);
        static Decimal Max2(Decimal val1, Decimal val2);
        static double Max3(double val1, double val2);
        static float Max4(float val1, float val2);
        static int32_t Max5(int32_t val1, int32_t val2);
        static int64_t Max6(int64_t val1, int64_t val2);
        static signed char Max7(signed char val1, signed char val2);
        static int16_t Max8(int16_t val1, int16_t val2);
        static uint32_t Max9(uint32_t val1, uint32_t val2);
        static uint64_t Max10(uint64_t val1, uint64_t val2);
        static uint16_t Max11(uint16_t val1, uint16_t val2);
        static unsigned char Min(unsigned char val1, unsigned char val2);
        static Decimal Min2(Decimal val1, Decimal val2);
        static double Min3(double val1, double val2);
        static float Min4(float val1, float val2);
        static int32_t Min5(int32_t val1, int32_t val2);
        static int64_t Min6(int64_t val1, int64_t val2);
        static signed char Min7(signed char val1, signed char val2);
        static int16_t Min8(int16_t val1, int16_t val2);
        static uint32_t Min9(uint32_t val1, uint32_t val2);
        static uint64_t Min10(uint64_t val1, uint64_t val2);
        static uint16_t Min11(uint16_t val1, uint16_t val2);
        static Decimal Round(Decimal d);
        static Decimal Round2(Decimal d, int32_t decimals);
        static Decimal Round3(Decimal d, MidpointRounding mode);
        static Decimal RoundAwayFromZero(Decimal d);
        static Decimal Round4(Decimal d, int32_t decimals, MidpointRounding mode);
        static double Round5(double a);
        static double Round6(double value, int32_t digits);
        static double Round22(double value, int32_t digits, bool away_from_zero);
        static double Round7(double value, MidpointRounding mode);
        static double Round8(double value, int32_t digits, MidpointRounding mode);
        static double Truncate(double d);
        static Decimal Truncate2(Decimal d);
        static Decimal Floor2(Decimal d);
        static int32_t Sign2(Decimal value);
        static int32_t Sign3(double value);
        static int32_t Sign4(float value);
        static int32_t Sign5(int32_t value);
        static int32_t Sign6(int64_t value);
        static int32_t Sign7(signed char value);
        static int32_t Sign8(int16_t value);
        static double Sin(double a);
        static double Cos(double d);
        static double Tan(double a);
        static double Sinh(double value);
        static double Cosh(double value);
        static double Tanh(double value);
        static double Acos(double d);
        static double Asin(double d);
        static double Atan(double d);
        static double Atan2(double y, double x);
        static double Exp(double d);
        static double Log2(double d);
        static double Log10(double d);
        static double Pow(double x, double y);
        static double Sqrt(double d);
        
    };
    
    
    struct MANAGED_API MethodAccessException : public virtual MemberAccessException{
        static constexpr int32_t Result = -2146233072;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API MissingFieldException : public virtual MissingMemberException{
        static constexpr int32_t Result2 = -2146233071;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        void constructor(String* className, String* fieldName);
        virtual String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API MissingMethodException : public virtual MissingMemberException{
        static constexpr int32_t Result2 = -2146233069;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        void constructor(String* className, String* methodName);
        virtual String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API MonoAsyncCall : public virtual Object{
        Object* msg;
        void* cb_method;
        Object* cb_target;
        Object* state;
        Object* res;
        Object* out_args;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API MonoCQItem : public virtual Object{
        cli::array<Object*>* array;
        cli::array<unsigned char>* array_state;
        int32_t head;
        int32_t tail;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API AttributeInfo : public virtual Object{
        AttributeUsageAttribute* _usage;
        int32_t _inheritanceLevel;
        
        void constructor(AttributeUsageAttribute* usage, int32_t inheritanceLevel);
        AttributeUsageAttribute* get_Usage();
        int32_t get_InheritanceLevel();
        
    };
    
    
    struct MANAGED_API MonoCustomAttrs : public virtual Object{
        static Reflection::Assembly* corlib;
        static Type* AttributeUsageType;
        static AttributeUsageAttribute* DefaultAttributeUsage;
        
        MonoCustomAttrs();
        void constructor();
        static void static_constructor();
        static bool IsUserCattrProvider(Object* obj);
        static cli::array<Object*>* GetCustomAttributesInternal(Reflection::ICustomAttributeProvider* obj, Type* attributeType, bool pseudoAttrs);
        static cli::array<Object*>* GetPseudoCustomAttributes(Reflection::ICustomAttributeProvider* obj, Type* attributeType);
        static cli::array<Object*>* GetCustomAttributesBase(Reflection::ICustomAttributeProvider* obj, Type* attributeType);
        static Attribute* GetCustomAttribute(Reflection::ICustomAttributeProvider* obj, Type* attributeType, bool inherit);
        static cli::array<Object*>* GetCustomAttributes(Reflection::ICustomAttributeProvider* obj, Type* attributeType, bool inherit);
        static cli::array<Object*>* GetCustomAttributes2(Reflection::ICustomAttributeProvider* obj, bool inherit);
        static cli::array<Reflection::CustomAttributeData*>* GetCustomAttributesDataInternal(Reflection::ICustomAttributeProvider* obj);
        static Collections::Generic::IList2<Reflection::CustomAttributeData*>* GetCustomAttributesData(Reflection::ICustomAttributeProvider* obj);
        static bool IsDefined(Reflection::ICustomAttributeProvider* obj, Type* attributeType, bool inherit);
        static bool IsDefinedInternal(Reflection::ICustomAttributeProvider* obj, Type* AttributeType);
        static Reflection::PropertyInfo* GetBasePropertyDefinition(Reflection::PropertyInfo* property);
        static Reflection::EventInfo* GetBaseEventDefinition(Reflection::EventInfo* evt);
        static Reflection::ICustomAttributeProvider* GetBase(Reflection::ICustomAttributeProvider* obj);
        static AttributeUsageAttribute* RetrieveAttributeUsage(Type* attributeType);
        
    };
    
    
    struct MANAGED_API MonoListItem : public virtual Object{
        MonoListItem* next;
        Object* data;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API MonoTypeInfo : public virtual Object{
        String* full_name;
        Reflection::ConstructorInfo* default_ctor;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API MonoType : public virtual Type, public virtual Runtime::Serialization::ISerializable{
        MonoTypeInfo* type_info;
        
        void constructor(Object* obj);
        static void type_from_obj(MonoType* type, Object* obj);
        static Reflection::TypeAttributes get_attributes(Type* type);
        Reflection::ConstructorInfo* GetDefaultConstructor();
        virtual Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        static Reflection::ConstructorInfo* GetConstructorImpl3(cli::array<Reflection::ConstructorInfo*>* methods, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers);
        cli::array<Reflection::ConstructorInfo*>* GetConstructors_internal(Reflection::BindingFlags bindingAttr, Type* reflected_type);
        virtual cli::array<Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(Reflection::BindingFlags bindingAttr) override;
        Reflection::EventInfo* InternalGetEvent(String* name, Reflection::BindingFlags bindingAttr);
        virtual Reflection::EventInfo* GetEvent_7f053fa54114e387(String* name, Reflection::BindingFlags bindingAttr) override;
        cli::array<Reflection::EventInfo*>* GetEvents_internal(Reflection::BindingFlags bindingAttr, Type* reflected_type);
        virtual cli::array<Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(String* name, Reflection::BindingFlags bindingAttr) override;
        cli::array<Reflection::FieldInfo*>* GetFields_internal(Reflection::BindingFlags bindingAttr, Type* reflected_type);
        virtual cli::array<Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(Reflection::BindingFlags bindingAttr) override;
        virtual Type* GetInterface_55c1d0ec3ece6104(String* name, bool ignoreCase) override;
        virtual cli::array<Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual cli::array<Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(Reflection::BindingFlags bindingAttr) override;
        cli::array<Reflection::MethodInfo*>* GetMethodsByName(String* name, Reflection::BindingFlags bindingAttr, bool ignoreCase, Type* reflected_type);
        virtual cli::array<Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Reflection::CallingConventions callConvention, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        Reflection::MethodInfo* GetCorrespondingInflatedMethod(Reflection::MethodInfo* generic);
        Reflection::ConstructorInfo* GetCorrespondingInflatedConstructor(Reflection::ConstructorInfo* generic);
        virtual Reflection::MethodInfo* GetMethod_c725b8f4a943d5c8(Reflection::MethodInfo* fromNoninstanciated) override;
        virtual Reflection::ConstructorInfo* GetConstructor_1dd1da77cc4fe364(Reflection::ConstructorInfo* fromNoninstanciated) override;
        virtual Reflection::FieldInfo* GetField_4da1f61e7e2a6f8c(Reflection::FieldInfo* fromNoninstanciated) override;
        virtual Type* GetNestedType_31962c16c0c85df9(String* name, Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<Type*>* GetNestedTypes_bb6ee40b0fa4052d(Reflection::BindingFlags bindingAttr) override;
        cli::array<Reflection::PropertyInfo*>* GetPropertiesByName(String* name, Reflection::BindingFlags bindingAttr, bool icase, Type* reflected_type);
        virtual cli::array<Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(Reflection::BindingFlags bindingAttr) override;
        virtual Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(String* name, Reflection::BindingFlags bindingAttr, Reflection::Binder* binder, Type* returnType, cli::array<Type*>* types, cli::array<Reflection::ParameterModifier>* modifiers) override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsSubclassOf_5d7dbe0215a30fda(Type* type) override;
        virtual Object* InvokeMember_70c4601d847070a2(String* name, Reflection::BindingFlags invokeAttr, Reflection::Binder* binder, Object* target, cli::array<Object*>* args, cli::array<Reflection::ParameterModifier>* modifiers, Globalization::CultureInfo* culture, cli::array<String*>* namedParameters) override;
        virtual Type* GetElementType_ab5070dbbfe66f5f() override;
        String* getFullName(bool full_name, bool assembly_qualified);
        virtual bool IsDefined_91943a8ac363f11f(Type* attributeType, bool inherit) override;
        virtual cli::array<Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<Object*>* GetCustomAttributes_90419687cfa65ef7(Type* attributeType, bool inherit) override;
        virtual int32_t GetArrayRank_fccf91da5e4acf4f() override;
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual String* ToString_1636a0751cb9ac11() override;
        virtual cli::array<Type*>* GetGenericArguments_a7fb476275cfe9a3() override;
        virtual Type* GetGenericTypeDefinition_15f8fc7813e8e8bf() override;
        virtual Collections::Generic::IList2<Reflection::CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        virtual Array* GetEnumValues_bdf747371fce41cc() override;
        static Reflection::MethodBase* CheckMethodSecurity(Reflection::MethodBase* mb);
        int32_t get_core_clr_security_level();
        virtual Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        virtual Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual Type* get_BaseType_6a0646ae880055f6() override;
        virtual String* get_FullName_7e8fa72ba225e1a4() override;
        virtual Guid get_GUID_bdb6b630c3237a21() override;
        virtual Reflection::MemberTypes get_MemberType_cd521d320810c98f() override;
        virtual String* get_Name_50fad5fa936c3ae2() override;
        virtual String* get_Namespace_cb4ed37007083e7f() override;
        virtual Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual Type* get_DeclaringType_6121cd6a84393166() override;
        virtual Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        virtual bool get_ContainsGenericParameters_19598881dd690ad3() override;
        virtual bool get_IsGenericParameter_2a17c4bf67798b07() override;
        virtual Reflection::MethodBase* get_DeclaringMethod_6dc070d2040335e5() override;
        virtual bool get_IsSecurityTransparent_6da55418ab72fb10() override;
        virtual bool get_IsSecurityCritical_50a9063c5d34fcdb() override;
        virtual bool get_IsSecuritySafeCritical_bcc034bfd05c04c9() override;
        virtual Runtime::InteropServices::StructLayoutAttribute* get_StructLayoutAttribute_c8846f98114193d0() override;
        
        virtual bool IsSubclassOf_875608a6f6bc1b50(Type* type) override;
        virtual int32_t GetArrayRank_bde6428644f11785() override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* ToString_7ae6b85e974ee75a() override;
        virtual Reflection::MemberTypes get_MemberType_49298b8bb0d10a74() override;
        virtual Reflection::Module* get_Module_e878d08348938612() override;
        virtual Type* get_DeclaringType_57e85ec7caa4a7e9() override;
        virtual Type* get_ReflectedType_338a78c0f78949() override;
        virtual RuntimeTypeHandle get_TypeHandle_a660506a2c0cc3d5() override;
    };
    
    
    struct MANAGED_API MTAThreadAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API MulticastDelegate : public virtual Delegate{
        MulticastDelegate* prev;
        MulticastDelegate* kpm_next;
        
        void constructor(Object* target, String* method);
        void constructor(Type* target, String* method);
        virtual void GetObjectData_e87c6354ab1f5b0(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual Object* DynamicInvokeImpl_929f0cf2f6cc1bc9(cli::array<Object*>* args) final;
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) final;
        virtual int32_t GetHashCode_6648aef0f235ee6c() final;
        virtual cli::array<Delegate*>* GetInvocationList_8fef0390be027d95() final;
        virtual Delegate* CombineImpl_1d822eded1f305a6(Delegate* follow) final;
        bool BaseEquals(MulticastDelegate* value);
        static MulticastDelegate* KPM(MulticastDelegate* needle, MulticastDelegate* haystack, MulticastDelegate* tail);
        virtual Delegate* RemoveImpl_683e7d1a8f792013(Delegate* value) final;
        static bool op_Equality2(MulticastDelegate* d1, MulticastDelegate* d2);
        static bool op_Inequality2(MulticastDelegate* d1, MulticastDelegate* d2);
        bool get_HasSingleTarget();
        
    };
    
    
    struct MANAGED_API MulticastNotSupportedException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API NonSerializedAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API NotCancelableException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233028;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API NotFiniteNumberException : public virtual ArithmeticException{
        static constexpr int32_t Result = -2146233048;
        double offending_number;
        
        void constructor();
        void constructor(double offendingNumber);
        void constructor(String* message);
        void constructor(String* message, double offendingNumber);
        void constructor(String* message, double offendingNumber, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        double get_OffendingNumber();
        
    };
    
    
    struct MANAGED_API NotImplementedException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147467263;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API Nullable : public virtual Object{
        
        template<class T>
        static int32_t Compare_1(Nullable2<T> n1, Nullable2<T> n2);
        template<class T>
        static bool Equals_1(Nullable2<T> n1, Nullable2<T> n2);
        static Type* GetUnderlyingType(Type* nullableType);
        
    };
    
    
    struct MANAGED_API NullConsoleDriver : public virtual Object, public virtual IConsoleDriver{
        
        void constructor();
        void Beep(int32_t frequency, int32_t duration);
        void Clear();
        void MoveBufferArea(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
        void Init();
        String* ReadLine();
        ConsoleKeyInfo ReadKey(bool intercept);
        void ResetColor();
        void SetBufferSize(int32_t width, int32_t height);
        void SetCursorPosition(int32_t left, int32_t top);
        void SetWindowPosition(int32_t left, int32_t top);
        void SetWindowSize(int32_t width, int32_t height);
        ConsoleColor get_BackgroundColor();
        ConsoleColor set_BackgroundColor(ConsoleColor value);
        int32_t get_BufferHeight();
        int32_t set_BufferHeight(int32_t value);
        int32_t get_BufferWidth();
        int32_t set_BufferWidth(int32_t value);
        bool get_CapsLock();
        int32_t get_CursorLeft();
        int32_t set_CursorLeft(int32_t value);
        int32_t get_CursorSize();
        int32_t set_CursorSize(int32_t value);
        int32_t get_CursorTop();
        int32_t set_CursorTop(int32_t value);
        bool get_CursorVisible();
        bool set_CursorVisible(bool value);
        ConsoleColor get_ForegroundColor();
        ConsoleColor set_ForegroundColor(ConsoleColor value);
        bool get_KeyAvailable();
        bool get_Initialized();
        int32_t get_LargestWindowHeight();
        int32_t get_LargestWindowWidth();
        bool get_NumberLock();
        String* get_Title();
        String* set_Title(String* value);
        bool get_TreatControlCAsInput();
        bool set_TreatControlCAsInput(bool value);
        int32_t get_WindowHeight();
        int32_t set_WindowHeight(int32_t value);
        int32_t get_WindowLeft();
        int32_t set_WindowLeft(int32_t value);
        int32_t get_WindowTop();
        int32_t set_WindowTop(int32_t value);
        int32_t get_WindowWidth();
        int32_t set_WindowWidth(int32_t value);
        
        virtual void Beep_1da4596cc175b056(int32_t frequency, int32_t duration) override;
        virtual void Clear_f1b4f6af283cc2c9() override;
        virtual void MoveBufferArea_5b90e28706eb2f21(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) override;
        virtual void Init_c5426ee2900a294b() override;
        virtual String* ReadLine_d9726d4d34f7f3c0() override;
        virtual ConsoleKeyInfo ReadKey_6a3b7aab317c85ed(bool intercept) override;
        virtual void ResetColor_8f6250a6a6d78789() override;
        virtual void SetBufferSize_343d697c2e12d0db(int32_t width, int32_t height) override;
        virtual void SetCursorPosition_1b5796b8c190ffa5(int32_t left, int32_t top) override;
        virtual void SetWindowPosition_cd2b9c3f7be414da(int32_t left, int32_t top) override;
        virtual void SetWindowSize_4cfb33f333b34cf(int32_t width, int32_t height) override;
        virtual ConsoleColor get_BackgroundColor_c9fafb327ddb8be6() override;
        virtual ConsoleColor set_BackgroundColor_344fac019c9386b1(ConsoleColor value) override;
        virtual int32_t get_BufferHeight_37934843c5ad875e() override;
        virtual int32_t set_BufferHeight_5d535a7eaee8afa7(int32_t value) override;
        virtual int32_t get_BufferWidth_4e39d049ce05cb10() override;
        virtual int32_t set_BufferWidth_ba768a1fb5af86f3(int32_t value) override;
        virtual bool get_CapsLock_5c626ee325707d5c() override;
        virtual int32_t get_CursorLeft_a1045160a5e0c167() override;
        virtual int32_t set_CursorLeft_58812b936675567d(int32_t value) override;
        virtual int32_t get_CursorSize_c23bb8efe316d434() override;
        virtual int32_t set_CursorSize_f0834eb8266a5be6(int32_t value) override;
        virtual int32_t get_CursorTop_529e091e36331015() override;
        virtual int32_t set_CursorTop_785544d75b1c0bee(int32_t value) override;
        virtual bool get_CursorVisible_56c3cc5601135b6f() override;
        virtual bool set_CursorVisible_cf1ec653cdd99e69(bool value) override;
        virtual ConsoleColor get_ForegroundColor_7612ec7b8c8aaaa5() override;
        virtual ConsoleColor set_ForegroundColor_940cb65e8fef1858(ConsoleColor value) override;
        virtual bool get_KeyAvailable_484cd75e08a09869() override;
        virtual bool get_Initialized_317ffc50d17896d3() override;
        virtual int32_t get_LargestWindowHeight_e89fef87df5ea56d() override;
        virtual int32_t get_LargestWindowWidth_6d2cf275eb651738() override;
        virtual bool get_NumberLock_9e29453ae6b2f675() override;
        virtual String* get_Title_297f109429139f1f() override;
        virtual String* set_Title_5ffd8093a2ce14e8(String* value) override;
        virtual bool get_TreatControlCAsInput_724ae746e19a1372() override;
        virtual bool set_TreatControlCAsInput_22e3ed8b8ed195e4(bool value) override;
        virtual int32_t get_WindowHeight_d105cfc0640e021b() override;
        virtual int32_t set_WindowHeight_762a4dd6c7316c83(int32_t value) override;
        virtual int32_t get_WindowLeft_2e939ca75d6696f7() override;
        virtual int32_t set_WindowLeft_6b1bb1c980db7ca6(int32_t value) override;
        virtual int32_t get_WindowTop_869e53cfc4194ff6() override;
        virtual int32_t set_WindowTop_6ed3579f04406446(int32_t value) override;
        virtual int32_t get_WindowWidth_aaf18af655c54aa3() override;
        virtual int32_t set_WindowWidth_34776e6c3b72e222(int32_t value) override;
    };
    
    
    struct MANAGED_API NullReferenceException : public virtual SystemException{
        static constexpr int32_t Result2 = -2147467261;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API CustomInfo : public virtual Object{
        bool UseGroup;
        int32_t DecimalDigits;
        int32_t DecimalPointPos;
        int32_t DecimalTailSharpDigits;
        int32_t IntegerDigits;
        int32_t IntegerHeadSharpDigits;
        int32_t IntegerHeadPos;
        bool UseExponent;
        int32_t ExponentDigits;
        int32_t ExponentTailSharpDigits;
        bool ExponentNegativeSignOnly;
        int32_t DividePlaces;
        int32_t Percents;
        int32_t Permilles;
        
        void constructor();
        static void GetActiveSection(String* format, bool positive, bool zero, int32_t offset, int32_t length);
        static CustomInfo* Parse(String* format, int32_t offset, int32_t length, Globalization::NumberFormatInfo* nfi);
        String* Format2(String* format, int32_t offset, int32_t length, Globalization::NumberFormatInfo* nfi, bool positive, Text::StringBuilder* sb_int, Text::StringBuilder* sb_dec, Text::StringBuilder* sb_exp);
        
    };
    
    
    struct MANAGED_API NumberFormatter : public virtual Object{
        static constexpr int32_t DefaultExpPrecision = 6;
        static constexpr int32_t HundredMillion = 100000000;
        static constexpr int64_t SeventeenDigitsThreshold = 10000000000000000L;
        static constexpr uint64_t ULongDivHundredMillion = 184467440737UL;
        static constexpr uint64_t ULongModHundredMillion = 9551616UL;
        static constexpr int32_t DoubleBitsExponentShift = 52;
        static constexpr int32_t DoubleBitsExponentMask = 2047;
        static constexpr int64_t DoubleBitsMantissaMask = 4503599627370495L;
        static constexpr int32_t DecimalBitsScaleMask = 2031616;
        static constexpr int32_t SingleDefPrecision = 7;
        static constexpr int32_t DoubleDefPrecision = 15;
        static constexpr int32_t Int8DefPrecision = 3;
        static constexpr int32_t UInt8DefPrecision = 3;
        static constexpr int32_t Int16DefPrecision = 5;
        static constexpr int32_t UInt16DefPrecision = 5;
        static constexpr int32_t Int32DefPrecision = 10;
        static constexpr int32_t UInt32DefPrecision = 10;
        static constexpr int32_t Int64DefPrecision = 19;
        static constexpr int32_t UInt64DefPrecision = 20;
        static constexpr int32_t DecimalDefPrecision = 100;
        static constexpr int32_t TenPowersListLength = 19;
        static constexpr double MinRoundtripVal = std::numeric_limits<double>::epsilon();
        static constexpr double MaxRoundtripVal = 1.79769313486231E+308;
        static uint64_t* MantissaBitsTable;
        static int32_t* TensExponentTable;
        static char16_t* DigitLowerTable;
        static char16_t* DigitUpperTable;
        static int64_t* TenPowersList;
        static int32_t* DecHexDigits;
        Globalization::NumberFormatInfo* _nfi;
        cli::array<char16_t>* _cbuf;
        bool _NaN;
        bool _infinity;
        bool _isCustomFormat;
        bool _specifierIsUpper;
        bool _positive;
        char16_t _specifier;
        int32_t _precision;
        int32_t _defPrecision;
        int32_t _digitsLen;
        int32_t _offset;
        int32_t _decPointPos;
        uint32_t _val1;
        uint32_t _val2;
        uint32_t _val3;
        uint32_t _val4;
        int32_t _ind;
        static NumberFormatter* threadNumberFormatter;
        
        NumberFormatter();
        static void static_constructor();
        void constructor(Threading::Thread* current);
        static void GetFormatterTables(uint64_t* MantissaBitsTable, int32_t* TensExponentTable, char16_t* DigitLowerTable, char16_t* DigitUpperTable, int64_t* TenPowersList, int32_t* DecHexDigits);
        static int64_t GetTenPowerOf(int32_t i);
        void InitDecHexDigits(uint32_t value);
        void InitDecHexDigits2(uint64_t value);
        void InitDecHexDigits3(uint32_t hi, uint64_t lo);
        static uint32_t FastToDecHex(int32_t val);
        static uint32_t ToDecHex(int32_t val);
        static int32_t FastDecHexLen(int32_t val);
        static int32_t DecHexLen(uint32_t val);
        int32_t DecHexLen2();
        static int32_t ScaleOrder(int64_t hi);
        int32_t InitialFloatingPrecision();
        static int32_t ParsePrecision(String* format);
        void Init(String* format);
        void InitHex(uint64_t value);
        void Init2(String* format, int32_t value, int32_t defPrecision);
        void Init3(String* format, uint32_t value, int32_t defPrecision);
        void Init4(String* format, int64_t value);
        void Init5(String* format, uint64_t value);
        void Init6(String* format, double value, int32_t defPrecision);
        void Init7(String* format, Decimal value);
        void ResetCharBuf(int32_t size);
        void Resize(int32_t len);
        void Append(char16_t c);
        void Append2(char16_t c, int32_t cnt);
        void Append3(String* s);
        Globalization::NumberFormatInfo* GetNumberFormatInstance(IFormatProvider* fp);
        void RoundPos(int32_t pos);
        bool RoundDecimal(int32_t decimals);
        bool RoundBits(int32_t shift);
        void RemoveTrailingZeros();
        void AddOneToDecHex();
        static uint32_t AddOneToDecHex2(uint32_t val);
        int32_t CountTrailingZeros();
        static int32_t CountTrailingZeros2(uint32_t val);
        static NumberFormatter* GetInstance();
        void Release();
        static void SetThreadCurrentCulture(Globalization::CultureInfo* culture);
        static String* NumberToString(String* format, signed char value, IFormatProvider* fp);
        static String* NumberToString2(String* format, unsigned char value, IFormatProvider* fp);
        static String* NumberToString3(String* format, uint16_t value, IFormatProvider* fp);
        static String* NumberToString4(String* format, int16_t value, IFormatProvider* fp);
        static String* NumberToString5(String* format, uint32_t value, IFormatProvider* fp);
        static String* NumberToString6(String* format, int32_t value, IFormatProvider* fp);
        static String* NumberToString7(String* format, uint64_t value, IFormatProvider* fp);
        static String* NumberToString8(String* format, int64_t value, IFormatProvider* fp);
        static String* NumberToString9(String* format, float value, IFormatProvider* fp);
        static String* NumberToString10(String* format, double value, IFormatProvider* fp);
        static String* NumberToString11(String* format, Decimal value, IFormatProvider* fp);
        static String* NumberToString12(uint32_t value, IFormatProvider* fp);
        static String* NumberToString13(int32_t value, IFormatProvider* fp);
        static String* NumberToString14(uint64_t value, IFormatProvider* fp);
        static String* NumberToString15(int64_t value, IFormatProvider* fp);
        static String* NumberToString16(float value, IFormatProvider* fp);
        static String* NumberToString17(double value, IFormatProvider* fp);
        String* FastIntegerToString(int32_t value, IFormatProvider* fp);
        String* IntegerToString(String* format, IFormatProvider* fp);
        String* NumberToString18(String* format, Globalization::NumberFormatInfo* nfi);
        String* FormatCurrency(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatDecimal(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatHexadecimal(int32_t precision);
        String* FormatFixedPoint(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatRoundtrip(double origval, Globalization::NumberFormatInfo* nfi);
        String* FormatRoundtrip2(float origval, Globalization::NumberFormatInfo* nfi);
        String* FormatGeneral(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatNumber(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatPercent(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatExponential(int32_t precision, Globalization::NumberFormatInfo* nfi);
        String* FormatExponential2(int32_t precision, Globalization::NumberFormatInfo* nfi, int32_t expDigits);
        String* FormatCustom(String* format, Globalization::NumberFormatInfo* nfi);
        static void ZeroTrimEnd(Text::StringBuilder* sb, bool canEmpty);
        static bool IsZeroOnly(Text::StringBuilder* sb);
        static void AppendNonNegativeNumber(Text::StringBuilder* sb, int32_t v);
        void AppendIntegerString(int32_t minLength, Text::StringBuilder* sb);
        void AppendIntegerString2(int32_t minLength);
        void AppendDecimalString(int32_t precision, Text::StringBuilder* sb);
        void AppendDecimalString2(int32_t precision);
        void AppendIntegerStringWithGroupSeparator(cli::array<int32_t>* groups, String* groupSeparator);
        void AppendExponent(Globalization::NumberFormatInfo* nfi, int32_t exponent, int32_t minDigits);
        void AppendOneDigit(int32_t start);
        void FastAppendDigits(int32_t val, bool force);
        void AppendDigits(int32_t start, int32_t end);
        void AppendDigits2(int32_t start, int32_t end, Text::StringBuilder* sb);
        void Multiply10(int32_t count);
        void Divide10(int32_t count);
        NumberFormatter* GetClone();
        void set_CurrentCulture(Globalization::CultureInfo* value);
        int32_t get_IntegerDigits();
        int32_t get_DecimalDigits();
        bool get_IsFloatingSource();
        bool get_IsZero();
        bool get_IsZeroInteger();
        
    };
    
    
    struct MANAGED_API ObjectDisposedException : public virtual InvalidOperationException{
        String* obj_name;
        String* msg;
        
        void constructor(String* objectName);
        void constructor(String* objectName, String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual String* get_Message_d211df4045b57cbf() override;
        String* get_ObjectName();
        
    };
    
    
    struct MANAGED_API ObsoleteAttribute : public virtual Attribute{
        String* _message;
        bool _error;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, bool error);
        String* get_Message();
        bool get_IsError();
        
    };
    
    
    struct MANAGED_API OperatingSystem : public virtual Object, public virtual ICloneable, public virtual Runtime::Serialization::ISerializable{
        PlatformID _platform;
        Version* _version;
        String* _servicePack;
        
        void constructor(PlatformID platform, Version* version);
        Object* Clone();
        void GetObjectData(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual String* ToString_1636a0751cb9ac11() override;
        PlatformID get_Platform();
        Version* get_Version();
        String* get_ServicePack();
        String* get_VersionString();
        
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API OverflowException : public virtual ArithmeticException{
        static constexpr int32_t Result = -2146233066;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ParamArrayAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API PlatformNotSupportedException : public virtual NotSupportedException{
        static constexpr int32_t Result = -2146233031;
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* inner);
        
    };
    
    
    struct MANAGED_API Random : public virtual Object{
        static constexpr int32_t MBIG = 2147483647;
        static constexpr int32_t MSEED = 161803398;
        int32_t inext;
        cli::array<int32_t>* SeedArray;
        int32_t inextp;
        
        void constructor();
        void constructor(int32_t Seed);
        virtual double Sample_30fd83eefb868e36();
        virtual int32_t Next_5d1c2ba772311adc();
        virtual int32_t Next_6230398d2aa7146(int32_t maxValue);
        virtual int32_t Next_33b9d2ae4fec0c4d(int32_t minValue, int32_t maxValue);
        virtual void NextBytes_9d5391dd460375ec(cli::array<unsigned char>* buffer);
        virtual double NextDouble_e02a5de50c499a05();
        
    };
    
    
    struct MANAGED_API RankException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233065;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ResolveEventArgs : public virtual EventArgs{
        String* m_Name;
        Reflection::Assembly* m_Requesting;
        
        void constructor(String* name);
        void constructor(String* name, Reflection::Assembly* requestingAssembly);
        String* get_Name();
        Reflection::Assembly* get_RequestingAssembly();
        
    };
    
    
    struct MANAGED_API SerializableAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API StackOverflowException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API STAThreadAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API String : public virtual Object, public virtual IConvertible, public virtual ICloneable, public virtual Collections::IEnumerable, public virtual IComparable, public virtual IComparable2<String*>, public virtual IEquatable<String*>, public virtual Collections::Generic::IEnumerable2<char16_t>{
        int32_t length;
        char16_t start_char;
        static String* Empty;
        static int32_t LOS_limit;
        
        String();
        void constructor(char16_t* value);
        void constructor(char16_t* value, int32_t startIndex, int32_t length);
        void constructor(signed char* value);
        void constructor(signed char* value, int32_t startIndex, int32_t length);
        void constructor(signed char* value, int32_t startIndex, int32_t length, Text::Encoding* enc);
        void constructor(cli::array<char16_t>* value, int32_t startIndex, int32_t length);
        void constructor(cli::array<char16_t>* value);
        void constructor(char16_t c, int32_t count);
        static void static_constructor();
        static bool Equals3(String* a, String* b);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals5(String* value);
        Object* Clone();
        TypeCode GetTypeCode();
        void CopyTo(int32_t sourceIndex, cli::array<char16_t>* destination, int32_t destinationIndex, int32_t count);
        cli::array<char16_t>* ToCharArray();
        cli::array<char16_t>* ToCharArray2(int32_t startIndex, int32_t length);
        cli::array<String*>* Split(cli::array<char16_t>* separator);
        cli::array<String*>* Split2(cli::array<char16_t>* separator, int32_t count);
        cli::array<String*>* Split3(cli::array<char16_t>* separator, StringSplitOptions options);
        cli::array<String*>* Split4(cli::array<char16_t>* separator, int32_t count, StringSplitOptions options);
        cli::array<String*>* Split5(cli::array<String*>* separator, StringSplitOptions options);
        cli::array<String*>* Split6(cli::array<String*>* separator, int32_t count, StringSplitOptions options);
        cli::array<String*>* SplitByCharacters(cli::array<char16_t>* sep, int32_t count, bool removeEmpty);
        String* Substring(int32_t startIndex);
        String* Substring2(int32_t startIndex, int32_t length);
        String* SubstringUnchecked(int32_t startIndex, int32_t length);
        String* Trim();
        String* Trim2(cli::array<char16_t>* trimChars);
        String* TrimStart(cli::array<char16_t>* trimChars);
        String* TrimEnd(cli::array<char16_t>* trimChars);
        int32_t FindNotWhiteSpace(int32_t pos, int32_t target, int32_t change);
        int32_t FindNotInTable(int32_t pos, int32_t target, int32_t change, cli::array<char16_t>* table);
        static int32_t Compare(String* strA, String* strB);
        static int32_t Compare2(String* strA, String* strB, bool ignoreCase);
        static int32_t Compare3(String* strA, String* strB, bool ignoreCase, Globalization::CultureInfo* culture);
        static int32_t Compare4(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length);
        static int32_t Compare5(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length, bool ignoreCase);
        static int32_t Compare6(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length, bool ignoreCase, Globalization::CultureInfo* culture);
        static int32_t Compare7(String* strA, String* strB, StringComparison comparisonType);
        static int32_t Compare8(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length, StringComparison comparisonType);
        static bool Equals6(String* a, String* b, StringComparison comparisonType);
        bool Equals7(String* value, StringComparison comparisonType);
        static int32_t Compare9(String* strA, String* strB, Globalization::CultureInfo* culture, Globalization::CompareOptions options);
        static int32_t Compare10(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length, Globalization::CultureInfo* culture, Globalization::CompareOptions options);
        int32_t CompareTo(Object* value);
        int32_t CompareTo2(String* strB);
        static int32_t CompareOrdinal(String* strA, String* strB);
        static int32_t CompareOrdinal2(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length);
        static int32_t CompareOrdinalCaseInsensitive(String* strA, int32_t indexA, String* strB, int32_t indexB, int32_t length);
        static int32_t CompareOrdinalUnchecked(String* strA, int32_t indexA, int32_t lenA, String* strB, int32_t indexB, int32_t lenB);
        static int32_t CompareOrdinalCaseInsensitiveUnchecked(String* strA, int32_t indexA, int32_t lenA, String* strB, int32_t indexB, int32_t lenB);
        bool EndsWith(String* value);
        bool EndsWith2(String* value, bool ignoreCase, Globalization::CultureInfo* culture);
        int32_t IndexOfAny(cli::array<char16_t>* anyOf);
        int32_t IndexOfAny2(cli::array<char16_t>* anyOf, int32_t startIndex);
        int32_t IndexOfAny3(cli::array<char16_t>* anyOf, int32_t startIndex, int32_t count);
        int32_t IndexOfAnyUnchecked(cli::array<char16_t>* anyOf, int32_t startIndex, int32_t count);
        int32_t IndexOf(String* value, StringComparison comparisonType);
        int32_t IndexOf2(String* value, int32_t startIndex, StringComparison comparisonType);
        int32_t IndexOf3(String* value, int32_t startIndex, int32_t count, StringComparison comparisonType);
        int32_t IndexOfOrdinal(String* value, int32_t startIndex, int32_t count, Globalization::CompareOptions options);
        int32_t IndexOfOrdinalUnchecked(String* value, int32_t startIndex, int32_t count);
        int32_t IndexOfOrdinalIgnoreCaseUnchecked(String* value, int32_t startIndex, int32_t count);
        int32_t LastIndexOf(String* value, StringComparison comparisonType);
        int32_t LastIndexOf2(String* value, int32_t startIndex, StringComparison comparisonType);
        int32_t LastIndexOf3(String* value, int32_t startIndex, int32_t count, StringComparison comparisonType);
        int32_t LastIndexOfOrdinal(String* value, int32_t startIndex, int32_t count, Globalization::CompareOptions options);
        int32_t LastIndexOfOrdinalUnchecked(String* value, int32_t startIndex, int32_t count);
        int32_t LastIndexOfOrdinalIgnoreCaseUnchecked(String* value, int32_t startIndex, int32_t count);
        int32_t IndexOf4(char16_t value);
        int32_t IndexOf5(char16_t value, int32_t startIndex);
        int32_t IndexOf6(char16_t value, int32_t startIndex, int32_t count);
        int32_t IndexOfUnchecked(char16_t value, int32_t startIndex, int32_t count);
        int32_t IndexOfOrdinalIgnoreCase(char16_t value, int32_t startIndex, int32_t count);
        int32_t IndexOf7(String* value);
        int32_t IndexOf8(String* value, int32_t startIndex);
        int32_t IndexOf9(String* value, int32_t startIndex, int32_t count);
        int32_t LastIndexOfAny(cli::array<char16_t>* anyOf);
        int32_t LastIndexOfAny2(cli::array<char16_t>* anyOf, int32_t startIndex);
        int32_t LastIndexOfAny3(cli::array<char16_t>* anyOf, int32_t startIndex, int32_t count);
        int32_t LastIndexOfAnyUnchecked(cli::array<char16_t>* anyOf, int32_t startIndex, int32_t count);
        int32_t LastIndexOf4(char16_t value);
        int32_t LastIndexOf5(char16_t value, int32_t startIndex);
        int32_t LastIndexOf6(char16_t value, int32_t startIndex, int32_t count);
        int32_t LastIndexOfUnchecked(char16_t value, int32_t startIndex, int32_t count);
        int32_t LastIndexOfOrdinalIgnoreCase(char16_t value, int32_t startIndex, int32_t count);
        int32_t LastIndexOf7(String* value);
        int32_t LastIndexOf8(String* value, int32_t startIndex);
        int32_t LastIndexOf9(String* value, int32_t startIndex, int32_t count);
        bool Contains(String* value);
        static bool IsNullOrEmpty(String* value);
        String* Normalize();
        String* Normalize2(Text::NormalizationForm normalizationForm);
        bool IsNormalized();
        bool IsNormalized2(Text::NormalizationForm normalizationForm);
        String* Remove(int32_t startIndex);
        String* PadLeft(int32_t totalWidth);
        String* PadLeft2(int32_t totalWidth, char16_t paddingChar);
        String* PadRight(int32_t totalWidth);
        String* PadRight2(int32_t totalWidth, char16_t paddingChar);
        bool StartsWith(String* value);
        bool StartsWith2(String* value, StringComparison comparisonType);
        bool EndsWith3(String* value, StringComparison comparisonType);
        bool StartsWith3(String* value, bool ignoreCase, Globalization::CultureInfo* culture);
        String* Replace(char16_t oldChar, char16_t newChar);
        String* Replace2(String* oldValue, String* newValue);
        String* ReplaceUnchecked(String* oldValue, String* newValue);
        String* ReplaceFallback(String* oldValue, String* newValue, int32_t testedCount);
        String* Remove2(int32_t startIndex, int32_t count);
        String* ToLower();
        String* ToLower2(Globalization::CultureInfo* culture);
        String* ToLowerInvariant();
        String* ToUpper();
        String* ToUpper2(Globalization::CultureInfo* culture);
        String* ToUpperInvariant();
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(IFormatProvider* provider);
        static String* Format2(String* format, Object* arg0);
        static String* Format3(String* format, Object* arg0, Object* arg1);
        static String* Format4(String* format, Object* arg0, Object* arg1, Object* arg2);
        static String* Format5(String* format, cli::array<Object*>* args);
        static String* Format6(IFormatProvider* provider, String* format, cli::array<Object*>* args);
        static Text::StringBuilder* FormatHelper(Text::StringBuilder* result, IFormatProvider* provider, String* format, cli::array<Object*>* args);
        static String* Copy(String* str);
        static String* Concat(Object* arg0);
        static String* Concat2(Object* arg0, Object* arg1);
        static String* Concat3(Object* arg0, Object* arg1, Object* arg2);
        static String* Concat4(Object* arg0, Object* arg1, Object* arg2, Object* arg3);
        static String* Concat5(String* str0, String* str1);
        static String* Concat6(String* str0, String* str1, String* str2);
        static String* Concat7(String* str0, String* str1, String* str2, String* str3);
        static String* Concat8(cli::array<Object*>* args);
        static String* Concat9(cli::array<String*>* values);
        static String* ConcatInternal(cli::array<String*>* values, int32_t length);
        String* Insert(int32_t startIndex, String* value);
        static String* Intern(String* str);
        static String* IsInterned(String* str);
        static String* Join(String* separator, cli::array<String*>* value);
        static String* Join2(String* separator, cli::array<String*>* value, int32_t startIndex, int32_t count);
        static String* JoinUnchecked(String* separator, cli::array<String*>* value, int32_t startIndex, int32_t count);
        bool ToBoolean(IFormatProvider* provider);
        unsigned char ToByte(IFormatProvider* provider);
        char16_t ToChar(IFormatProvider* provider);
        DateTime ToDateTime(IFormatProvider* provider);
        Decimal ToDecimal(IFormatProvider* provider);
        double ToDouble(IFormatProvider* provider);
        int16_t ToInt16(IFormatProvider* provider);
        int32_t ToInt32(IFormatProvider* provider);
        int64_t ToInt64(IFormatProvider* provider);
        signed char ToSByte(IFormatProvider* provider);
        float ToSingle(IFormatProvider* provider);
        Object* ToType(Type* targetType, IFormatProvider* provider);
        uint16_t ToUInt16(IFormatProvider* provider);
        uint32_t ToUInt32(IFormatProvider* provider);
        uint64_t ToUInt64(IFormatProvider* provider);
        CharEnumerator* GetEnumerator();
        Collections::Generic::IEnumerator2<char16_t>* GetEnumerator2();
        Collections::IEnumerator* GetEnumerator3();
        static void ParseFormatSpecifier(String* str, int32_t ptr, int32_t n, int32_t width, bool left_align, String* format);
        static int32_t ParseDecimal(String* str, int32_t ptr);
        void InternalSetChar(int32_t idx, char16_t val);
        void InternalSetLength(int32_t newLength);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static String* Concat10(Collections::Generic::IEnumerable2<String*>* values);
        template<class T>
        static String* Concat_1(Collections::Generic::IEnumerable2<T>* values);
        static String* Join3(String* separator, Collections::Generic::IEnumerable2<String*>* values);
        static String* Join4(String* separator, cli::array<Object*>* values);
        template<class T>
        static String* Join_1(String* separator, Collections::Generic::IEnumerable2<T>* values);
        static bool IsNullOrWhiteSpace(String* value);
        int32_t GetCaseInsensitiveHashCode();
        String* CreateString(signed char* value);
        String* CreateString2(signed char* value, int32_t startIndex, int32_t length);
        String* CreateString3(signed char* value, int32_t startIndex, int32_t length, Text::Encoding* enc);
        String* CreateString4(char16_t* value);
        String* CreateString5(char16_t* value, int32_t startIndex, int32_t length);
        String* CreateString6(cli::array<char16_t>* val, int32_t startIndex, int32_t length);
        String* CreateString7(cli::array<char16_t>* val);
        String* CreateString8(char16_t c, int32_t count);
        static void memset(unsigned char* dest, int32_t val, int32_t len);
        static void memcpy4(unsigned char* dest, unsigned char* src, int32_t size);
        static void memcpy2(unsigned char* dest, unsigned char* src, int32_t size);
        static void memcpy1(unsigned char* dest, unsigned char* src, int32_t size);
        static void memcpy(unsigned char* dest, unsigned char* src, int32_t size);
        static void CharCopy(char16_t* dest, char16_t* src, int32_t count);
        static void CharCopyReverse(char16_t* dest, char16_t* src, int32_t count);
        static void CharCopy2(String* target, int32_t targetIndex, String* source, int32_t sourceIndex, int32_t count);
        static void CharCopy3(String* target, int32_t targetIndex, cli::array<char16_t>* source, int32_t sourceIndex, int32_t count);
        static void CharCopyReverse2(String* target, int32_t targetIndex, String* source, int32_t sourceIndex, int32_t count);
        static String* InternalAllocateStr(int32_t length);
        static String* InternalIntern(String* str);
        static String* InternalIsInterned(String* str);
        static int32_t GetLOSLimit();
        static bool op_Equality(String* a, String* b);
        static bool op_Inequality(String* a, String* b);
        char16_t get_Chars(int32_t index);
        int32_t get_Length();
        
        virtual bool Equals_ea48fd0c13a733fe(String* value) override;
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual TypeCode GetTypeCode_701c52aeb2913904() override;
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* value) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(String* strB) override;
        virtual String* ToString_f121fe9e066b5628(IFormatProvider* provider) override;
        virtual bool ToBoolean_f2ed021e3648bfba(IFormatProvider* provider) override;
        virtual unsigned char ToByte_ce47dcc06c443b11(IFormatProvider* provider) override;
        virtual char16_t ToChar_12adc960e23347fe(IFormatProvider* provider) override;
        virtual DateTime ToDateTime_86b01e143a29eff2(IFormatProvider* provider) override;
        virtual Decimal ToDecimal_9c02fd5cdb5f6a0c(IFormatProvider* provider) override;
        virtual double ToDouble_bf8714f37f489c82(IFormatProvider* provider) override;
        virtual int16_t ToInt16_5e1de9bafa245bf2(IFormatProvider* provider) override;
        virtual int32_t ToInt32_9e7108d4c09b7e42(IFormatProvider* provider) override;
        virtual int64_t ToInt64_9801f9765e5301f6(IFormatProvider* provider) override;
        virtual signed char ToSByte_e1f09487d48936db(IFormatProvider* provider) override;
        virtual float ToSingle_1cfd1ce472f9fad6(IFormatProvider* provider) override;
        virtual Object* ToType_bf083accfb52550a(Type* targetType, IFormatProvider* provider) override;
        virtual uint16_t ToUInt16_1e02ae7e2827241a(IFormatProvider* provider) override;
        virtual uint32_t ToUInt32_9a72f29c26115cfd(IFormatProvider* provider) override;
        virtual uint64_t ToUInt64_fe563f2a802e4265(IFormatProvider* provider) override;
        virtual Collections::Generic::IEnumerator2<char16_t>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
    };
    
    
    struct MANAGED_API CultureAwareComparer : public virtual StringComparer{
        bool _ignoreCase;
        Globalization::CompareInfo* _compareInfo;
        
        void constructor(Globalization::CultureInfo* ci, bool ignore_case);
        virtual int32_t Compare_aa3d1bf936762ace(String* x, String* y) override;
        virtual bool Equals_34b0513c0e663568(String* x, String* y) override;
        virtual int32_t GetHashCode_c89a0097b5036ad3(String* s) override;
        
    };
    
    
    struct MANAGED_API OrdinalComparer : public virtual StringComparer{
        bool _ignoreCase;
        
        void constructor(bool ignoreCase);
        virtual int32_t Compare_aa3d1bf936762ace(String* x, String* y) override;
        virtual bool Equals_34b0513c0e663568(String* x, String* y) override;
        virtual int32_t GetHashCode_c89a0097b5036ad3(String* s) override;
        
    };
    
    
    struct MANAGED_API TermInfoDriver : public virtual Object, public virtual IConsoleDriver{
        static int32_t* native_terminal_size;
        static int32_t terminal_size;
        static cli::array<String*>* locations;
        TermInfoReader* reader;
        int32_t cursorLeft;
        int32_t cursorTop;
        String* title;
        String* titleFormat;
        bool cursorVisible;
        String* csrVisible;
        String* csrInvisible;
        String* clear;
        String* bell;
        String* term;
        IO::StreamReader* stdin_;
        IO::CStreamWriter* stdout_;
        int32_t windowWidth;
        int32_t windowHeight;
        int32_t bufferHeight;
        int32_t bufferWidth;
        cli::array<char16_t>* buffer;
        int32_t readpos;
        int32_t writepos;
        String* keypadXmit;
        bool controlCAsInput;
        bool inited;
        Object* initLock;
        bool initKeys;
        String* origPair;
        String* origColors;
        String* cursorAddress;
        ConsoleColor fgcolor;
        ConsoleColor bgcolor;
        bool color16;
        String* setlfgcolor;
        String* setlbgcolor;
        String* setfgcolor;
        String* setbgcolor;
        bool noGetPosition;
        Collections::Hashtable* keymap;
        ByteMatcher* rootmap;
        bool home_1_1;
        int32_t rl_startx;
        cli::array<unsigned char>* control_characters;
        cli::array<char16_t>* echobuf;
        int32_t echon;
        static cli::array<TermInfoStrings>* UsedKeys;
        String* keypadLocal;
        int32_t rl_starty;
        
        TermInfoDriver();
        void constructor();
        void constructor(String* term);
        static void static_constructor();
        static String* SearchTerminfo(String* term);
        void WriteConsole(String* str);
        void Init();
        static String* MangleParameters(String* str);
        static int32_t TranslateColor(ConsoleColor desired, bool light);
        void IncrementX();
        void WriteSpecialKey(ConsoleKeyInfo key);
        void WriteSpecialKey2(char16_t c);
        bool IsSpecialKey(ConsoleKeyInfo key);
        bool IsSpecialKey2(char16_t c);
        void GetCursorPosition();
        void CheckWindowDimensions();
        void Clear();
        void Beep(int32_t frequency, int32_t duration);
        void MoveBufferArea(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
        void AddToBuffer(int32_t b);
        void AdjustBuffer();
        ConsoleKeyInfo CreateKeyInfoFromInt(int32_t n, bool alt);
        Object* GetKeyFromBuffer(bool cooked);
        ConsoleKeyInfo ReadKeyInternal(bool fresh);
        bool InputPending();
        void QueueEcho(char16_t c);
        void Echo(ConsoleKeyInfo key);
        void EchoFlush();
        int32_t Read(cli::array<char16_t>* dest, int32_t index, int32_t count);
        ConsoleKeyInfo ReadKey(bool intercept);
        String* ReadLine();
        void ResetColor();
        void SetBufferSize(int32_t width, int32_t height);
        void SetCursorPosition(int32_t left, int32_t top);
        void SetWindowPosition(int32_t left, int32_t top);
        void SetWindowSize(int32_t width, int32_t height);
        void CreateKeyMap();
        void InitKeys();
        void AddStringMapping(TermInfoStrings s);
        bool get_Initialized();
        ConsoleColor get_BackgroundColor();
        ConsoleColor set_BackgroundColor(ConsoleColor value);
        ConsoleColor get_ForegroundColor();
        ConsoleColor set_ForegroundColor(ConsoleColor value);
        int32_t get_BufferHeight();
        int32_t set_BufferHeight(int32_t value);
        int32_t get_BufferWidth();
        int32_t set_BufferWidth(int32_t value);
        bool get_CapsLock();
        int32_t get_CursorLeft();
        int32_t set_CursorLeft(int32_t value);
        int32_t get_CursorTop();
        int32_t set_CursorTop(int32_t value);
        bool get_CursorVisible();
        bool set_CursorVisible(bool value);
        int32_t get_CursorSize();
        int32_t set_CursorSize(int32_t value);
        bool get_KeyAvailable();
        int32_t get_LargestWindowHeight();
        int32_t get_LargestWindowWidth();
        bool get_NumberLock();
        String* get_Title();
        String* set_Title(String* value);
        bool get_TreatControlCAsInput();
        bool set_TreatControlCAsInput(bool value);
        int32_t get_WindowHeight();
        int32_t set_WindowHeight(int32_t value);
        int32_t get_WindowLeft();
        int32_t set_WindowLeft(int32_t value);
        int32_t get_WindowTop();
        int32_t set_WindowTop(int32_t value);
        int32_t get_WindowWidth();
        int32_t set_WindowWidth(int32_t value);
        
        virtual void Init_c5426ee2900a294b() override;
        virtual void Clear_f1b4f6af283cc2c9() override;
        virtual void Beep_1da4596cc175b056(int32_t frequency, int32_t duration) override;
        virtual void MoveBufferArea_5b90e28706eb2f21(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) override;
        virtual ConsoleKeyInfo ReadKey_6a3b7aab317c85ed(bool intercept) override;
        virtual String* ReadLine_d9726d4d34f7f3c0() override;
        virtual void ResetColor_8f6250a6a6d78789() override;
        virtual void SetBufferSize_343d697c2e12d0db(int32_t width, int32_t height) override;
        virtual void SetCursorPosition_1b5796b8c190ffa5(int32_t left, int32_t top) override;
        virtual void SetWindowPosition_cd2b9c3f7be414da(int32_t left, int32_t top) override;
        virtual void SetWindowSize_4cfb33f333b34cf(int32_t width, int32_t height) override;
        virtual bool get_Initialized_317ffc50d17896d3() override;
        virtual ConsoleColor get_BackgroundColor_c9fafb327ddb8be6() override;
        virtual ConsoleColor set_BackgroundColor_344fac019c9386b1(ConsoleColor value) override;
        virtual ConsoleColor get_ForegroundColor_7612ec7b8c8aaaa5() override;
        virtual ConsoleColor set_ForegroundColor_940cb65e8fef1858(ConsoleColor value) override;
        virtual int32_t get_BufferHeight_37934843c5ad875e() override;
        virtual int32_t set_BufferHeight_5d535a7eaee8afa7(int32_t value) override;
        virtual int32_t get_BufferWidth_4e39d049ce05cb10() override;
        virtual int32_t set_BufferWidth_ba768a1fb5af86f3(int32_t value) override;
        virtual bool get_CapsLock_5c626ee325707d5c() override;
        virtual int32_t get_CursorLeft_a1045160a5e0c167() override;
        virtual int32_t set_CursorLeft_58812b936675567d(int32_t value) override;
        virtual int32_t get_CursorTop_529e091e36331015() override;
        virtual int32_t set_CursorTop_785544d75b1c0bee(int32_t value) override;
        virtual bool get_CursorVisible_56c3cc5601135b6f() override;
        virtual bool set_CursorVisible_cf1ec653cdd99e69(bool value) override;
        virtual int32_t get_CursorSize_c23bb8efe316d434() override;
        virtual int32_t set_CursorSize_f0834eb8266a5be6(int32_t value) override;
        virtual bool get_KeyAvailable_484cd75e08a09869() override;
        virtual int32_t get_LargestWindowHeight_e89fef87df5ea56d() override;
        virtual int32_t get_LargestWindowWidth_6d2cf275eb651738() override;
        virtual bool get_NumberLock_9e29453ae6b2f675() override;
        virtual String* get_Title_297f109429139f1f() override;
        virtual String* set_Title_5ffd8093a2ce14e8(String* value) override;
        virtual bool get_TreatControlCAsInput_724ae746e19a1372() override;
        virtual bool set_TreatControlCAsInput_22e3ed8b8ed195e4(bool value) override;
        virtual int32_t get_WindowHeight_d105cfc0640e021b() override;
        virtual int32_t set_WindowHeight_762a4dd6c7316c83(int32_t value) override;
        virtual int32_t get_WindowLeft_2e939ca75d6696f7() override;
        virtual int32_t set_WindowLeft_6b1bb1c980db7ca6(int32_t value) override;
        virtual int32_t get_WindowTop_869e53cfc4194ff6() override;
        virtual int32_t set_WindowTop_6ed3579f04406446(int32_t value) override;
        virtual int32_t get_WindowWidth_aaf18af655c54aa3() override;
        virtual int32_t set_WindowWidth_34776e6c3b72e222(int32_t value) override;
    };
    
    
    struct MANAGED_API ByteMatcher : public virtual Object{
        Collections::Hashtable* map;
        Collections::Hashtable* starts;
        
        void constructor();
        void AddMapping(TermInfoStrings key, cli::array<unsigned char>* val);
        void Sort();
        bool StartsWith(int32_t c);
        TermInfoStrings Match(cli::array<char16_t>* buffer, int32_t offset, int32_t length, int32_t used);
        
    };
    
    
    struct MANAGED_API TermInfoReader : public virtual Object{
        int16_t boolSize;
        int16_t numSize;
        int16_t strOffsets;
        cli::array<unsigned char>* buffer;
        int32_t booleansOffset;
        
        void constructor(String* term, String* filename);
        void constructor(String* term, cli::array<unsigned char>* buffer);
        void ReadHeader(cli::array<unsigned char>* buffer, int32_t position);
        void ReadNames(cli::array<unsigned char>* buffer, int32_t position);
        bool Get(TermInfoBooleans boolean);
        int32_t Get2(TermInfoNumbers number);
        String* Get3(TermInfoStrings tstr);
        cli::array<unsigned char>* GetStringBytes(TermInfoStrings tstr);
        int16_t GetInt16(cli::array<unsigned char>* buffer, int32_t offset);
        String* GetString(cli::array<unsigned char>* buffer, int32_t offset);
        cli::array<unsigned char>* GetStringBytes2(cli::array<unsigned char>* buffer, int32_t offset);
        static String* Escape2(String* s);
        
    };
    
    
    struct MANAGED_API ThreadStaticAttribute : public virtual Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API TimeoutException : public virtual SystemException{
        static constexpr int32_t Result2 = -2146233083;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API Parser : public virtual Object{
        String* _src;
        int32_t _cur;
        int32_t _length;
        ParseError parse_error;
        bool parsed_ticks;
        Globalization::NumberFormatInfo* number_format;
        int32_t parsed_numbers_count;
        bool parsed_days_separator;
        bool Exact;
        bool AllMembersRequired;
        bool CultureSensitive;
        bool UseColonAsDaySeparator;
        
        void constructor(String* src);
        void constructor(String* src, IFormatProvider* formatProvider);
        void Reset();
        Globalization::NumberFormatInfo* GetNumberFormatInfo(IFormatProvider* formatProvider);
        void ParseWhiteSpace();
        bool ParseSign();
        int32_t ParseIntExact(int32_t digit_count, int32_t max_digit_count);
        int32_t ParseInt(bool optional);
        bool ParseOptDaysSeparator();
        bool ParseOptDecimalSeparator();
        bool ParseLiteral(String* value);
        bool ParseChar(char16_t c);
        bool ParseOptDot();
        void ParseColon(bool optional);
        int64_t ParseTicks();
        int64_t ParseTicksExact(int32_t digits_count, int32_t max_digits_count);
        void SetParseError(ParseError error);
        bool CheckParseSuccess(bool tryParse);
        bool Execute(bool tryParse, TimeSpan result);
        bool ExecuteWithFormat(String* format, Globalization::TimeSpanStyles style, bool tryParse, TimeSpan result);
        bool get_AtEnd();
        
    };
    
    
    struct MANAGED_API FormatParser : public virtual Object{
        int32_t cur;
        String* format;
        
        void constructor(String* format);
        FormatElement GetNextElement();
        int32_t ParseChar(char16_t c);
        char16_t ParseEscapedChar();
        String* ParseLiteral();
        bool get_AtEnd();
        
    };
    
    
    struct MANAGED_API CurrentSystemTimeZone : public virtual TimeZone, public virtual Runtime::Serialization::IDeserializationCallback{
        String* m_standardName;
        String* m_daylightName;
        Collections::Hashtable* m_CachedDaylightChanges;
        int64_t m_ticksOffset;
        TimeSpan utcOffsetWithOutDLS;
        TimeSpan utcOffsetWithDLS;
        static int32_t this_year;
        static Globalization::DaylightTime* this_year_dlt;
        
        void constructor();
        void constructor(int64_t lnow);
        static bool GetTimeZoneData(int32_t year, cli::array<int64_t>* data, cli::array<String*>* names);
        virtual Globalization::DaylightTime* GetDaylightChanges_7aec528d6e066e(int32_t year) override;
        virtual TimeSpan GetUtcOffset_7ede31ceb7855151(DateTime time) override;
        void OnDeserialization(Object* sender);
        void OnDeserialization2(Globalization::DaylightTime* dlt);
        Globalization::DaylightTime* GetDaylightTimeFromData(cli::array<int64_t>* data);
        virtual String* get_DaylightName_2eca7f1486446145() override;
        virtual String* get_StandardName_2e2b3e3d784ffee2() override;
        
        virtual void OnDeserialization_e9ecfecba8df9754(Object* sender) override;
    };
    
    
    struct MANAGED_API TimeZoneNotFoundException : public virtual Exception{
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API Tuple : public virtual Object{
        
        template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
        static Tuple2<T1, T2, T3, T4, T5, T6, T7, Tuple3<T8>*>* Create_8(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);
        template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
        static Tuple9<T1, T2, T3, T4, T5, T6, T7>* Create_7(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        template<class T1, class T2, class T3, class T4, class T5, class T6>
        static Tuple8<T1, T2, T3, T4, T5, T6>* Create_6(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        template<class T1, class T2, class T3, class T4, class T5>
        static Tuple7<T1, T2, T3, T4, T5>* Create_5(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        template<class T1, class T2, class T3, class T4>
        static Tuple6<T1, T2, T3, T4>* Create_4(T1 item1, T2 item2, T3 item3, T4 item4);
        template<class T1, class T2, class T3>
        static Tuple5<T1, T2, T3>* Create_3(T1 item1, T2 item2, T3 item3);
        template<class T1, class T2>
        static Tuple4<T1, T2>* Create_2(T1 item1, T2 item2);
        template<class T1>
        static Tuple3<T1>* Create_1(T1 item1);
        
    };
    
    
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class TRest> struct MANAGED_API Tuple2 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        T4 item4;
        T5 item5;
        T6 item6;
        T7 item7;
        TRest rest;
        
        void constructor(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        T7 get_Item7();
        TRest get_Rest();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1> struct MANAGED_API Tuple3 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        
        void constructor(T1 item1);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2> struct MANAGED_API Tuple4 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        
        void constructor(T1 item1, T2 item2);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2, class T3> struct MANAGED_API Tuple5 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        
        void constructor(T1 item1, T2 item2, T3 item3);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2, class T3, class T4> struct MANAGED_API Tuple6 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        T4 item4;
        
        void constructor(T1 item1, T2 item2, T3 item3, T4 item4);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2, class T3, class T4, class T5> struct MANAGED_API Tuple7 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        T4 item4;
        T5 item5;
        
        void constructor(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2, class T3, class T4, class T5, class T6> struct MANAGED_API Tuple8 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        T4 item4;
        T5 item5;
        T6 item6;
        
        void constructor(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7> struct MANAGED_API Tuple9 : public virtual Object, public virtual Collections::IStructuralEquatable, public virtual Collections::IStructuralComparable, public virtual IComparable{
        T1 item1;
        T2 item2;
        T3 item3;
        T4 item4;
        T5 item5;
        T6 item6;
        T7 item7;
        
        void constructor(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        int32_t CompareTo(Object* obj);
        int32_t CompareTo2(Object* other, Collections::IComparer* comparer);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        bool Equals4(Object* other, Collections::IEqualityComparer* comparer);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetHashCode3(Collections::IEqualityComparer* comparer);
        virtual String* ToString_1636a0751cb9ac11() override;
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        T7 get_Item7();
        
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* obj) override;
        virtual int32_t CompareTo_6a6cfba1da2bec3b(Object* other, Collections::IComparer* comparer) override;
        virtual bool Equals_2f89738462b0fb33(Object* other, Collections::IEqualityComparer* comparer) override;
        virtual int32_t GetHashCode_94e84ad7bccbc132(Collections::IEqualityComparer* comparer) override;
    };
    
    
    struct MANAGED_API TypeAccessException : public virtual TypeLoadException{
        static constexpr int32_t Result = -2146233054;
        
        void constructor();
        void constructor(String* message);
        void constructor(String* message, Exception* inner);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API TypeInitializationException : public virtual SystemException{
        String* type_name;
        
        void constructor(String* fullTypeName, Exception* innerException);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        String* get_TypeName();
        
    };
    
    
    struct MANAGED_API ArraySpec : public virtual Object{
        int32_t dimensions;
        bool bound;
        
        void constructor(int32_t dimensions, bool bound);
        Type* Resolve(Type* type);
        
    };
    
    
    struct MANAGED_API TypeSpec : public virtual Object{
        String* name;
        Collections::Generic::List<String*>* nested;
        Collections::Generic::List<TypeSpec*>* generic_params;
        Collections::Generic::List<ArraySpec*>* array_spec;
        int32_t pointer_level;
        bool is_byref;
        String* assembly_name;
        
        void constructor();
        static TypeSpec* Parse(String* typeName);
        Type* Resolve(Func2<Reflection::AssemblyName*, Reflection::Assembly*>* assemblyResolver, Func3<Reflection::Assembly*, String*, bool, Type*>* typeResolver, bool throwOnError, bool ignoreCase);
        void AddName(String* type_name);
        void AddArray(ArraySpec* array);
        static void SkipSpace(String* name, int32_t pos);
        static TypeSpec* Parse2(String* name, int32_t p, bool is_recurse, bool allow_aqn);
        bool get_IsArray();
        
    };
    
    
    struct MANAGED_API TypeUnloadedException : public virtual SystemException{
        
        void constructor();
        void constructor(String* message);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        void constructor(String* message, Exception* innerException);
        
    };
    
    
    struct MANAGED_API UnhandledExceptionEventArgs : public virtual EventArgs{
        Object* exception;
        bool m_isTerminating;
        
        void constructor(Object* exception, bool isTerminating);
        Object* get_ExceptionObject();
        bool get_IsTerminating();
        
    };
    
    
    struct MANAGED_API UnitySerializationHolder : public virtual Object, public virtual Runtime::Serialization::IObjectReference, public virtual Runtime::Serialization::ISerializable{
        String* _data;
        UnityType _unityType;
        String* _assemblyName;
        
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        static void GetTypeData(Type* instance, Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        static void GetDBNullData(DBNull* instance, Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        static void GetAssemblyData(Reflection::Assembly* instance, Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        static void GetModuleData(Reflection::Module* instance, Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext ctx);
        virtual void GetObjectData_e37fac8b2d7c8b4f(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual Object* GetRealObject_81b2ad0a9e261bd8(Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
        virtual Object* GetRealObject_692566897a6926e4(Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API Version : public virtual Object, public virtual ICloneable, public virtual IComparable, public virtual IComparable2<Version*>, public virtual IEquatable<Version*>{
        static constexpr int32_t UNDEFINED = -1;
        int32_t _Major;
        int32_t _Minor;
        int32_t _Build;
        int32_t _Revision;
        
        void constructor();
        void constructor(String* version);
        void constructor(int32_t major, int32_t minor);
        void constructor(int32_t major, int32_t minor, int32_t build);
        void constructor(int32_t major, int32_t minor, int32_t build, int32_t revision);
        void CheckedSet(int32_t defined, int32_t major, int32_t minor, int32_t build, int32_t revision);
        Object* Clone();
        int32_t CompareTo(Object* version);
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        int32_t CompareTo2(Version* value);
        bool Equals4(Version* obj);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual String* ToString_1636a0751cb9ac11() override;
        String* ToString3(int32_t fieldCount);
        static Version* Parse(String* input);
        static bool TryParse(String* input, Version* result);
        static Version* CreateFromString(String* info);
        static bool op_Equality(Version* v1, Version* v2);
        static bool op_Inequality(Version* v1, Version* v2);
        static bool op_GreaterThan(Version* v1, Version* v2);
        static bool op_GreaterThanOrEqual(Version* v1, Version* v2);
        static bool op_LessThan(Version* v1, Version* v2);
        static bool op_LessThanOrEqual(Version* v1, Version* v2);
        int32_t get_Build();
        int32_t get_Major();
        int32_t get_Minor();
        int32_t get_Revision();
        int16_t get_MajorRevision();
        int16_t get_MinorRevision();
        
        virtual Object* Clone_d5efb96d327809c8() override;
        virtual int32_t CompareTo_ed9d39205b7812f0(Object* version) override;
        virtual int32_t CompareTo_8a8b7d6c83beb422(Version* value) override;
        virtual bool Equals_ea48fd0c13a733fe(Version* obj) override;
    };
    
    
    struct MANAGED_API WeakReference : public virtual Object, public virtual Runtime::Serialization::ISerializable{
        bool isLongReference;
        Runtime::InteropServices::GCHandle gcHandle;
        
        void constructor(Object* target);
        void constructor(Object* target, bool trackResurrection);
        void constructor(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual void Finalize_ff598d82cfedbf51();
        void AllocateHandle(Object* target);
        virtual void GetObjectData_d18af1d641fa5d4e(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context);
        virtual bool get_IsAlive_a17364112f61bda0();
        virtual Object* get_Target_4c75add6ace39d1f();
        virtual Object* set_Target_620f6f0fddcc5c17(Object* value);
        virtual bool get_TrackResurrection_2c0ad7d726fd0373();
        
        virtual void GetObjectData_11b895a112e04409(Runtime::Serialization::SerializationInfo* info, Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API WindowsConsoleDriver : public virtual Object, public virtual IConsoleDriver{
        void* inputHandle;
        void* outputHandle;
        int16_t defaultAttribute;
        
        void constructor();
        static ConsoleColor GetForeground(int16_t attr);
        static ConsoleColor GetBackground(int16_t attr);
        static int16_t GetAttrForeground(int32_t attr, ConsoleColor color);
        static int16_t GetAttrBackground(int32_t attr, ConsoleColor color);
        void Beep(int32_t frequency, int32_t duration);
        void Clear();
        void MoveBufferArea(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
        void Init();
        String* ReadLine();
        ConsoleKeyInfo ReadKey(bool intercept);
        void ResetColor();
        void SetBufferSize(int32_t width, int32_t height);
        void SetCursorPosition(int32_t left, int32_t top);
        void SetWindowPosition(int32_t left, int32_t top);
        void SetWindowSize(int32_t width, int32_t height);
        bool IsModifierKey(int16_t virtualKeyCode);
        static void* GetStdHandle(Handles handle);
        static void _Beep(int32_t frequency, int32_t duration);
        static bool GetConsoleScreenBufferInfo(void* handle, ConsoleScreenBufferInfo info);
        static bool FillConsoleOutputCharacter(void* handle, char16_t c, int32_t size, Coord coord, int32_t written);
        static bool FillConsoleOutputAttribute(void* handle, int16_t c, int32_t size, Coord coord, int32_t written);
        static bool SetConsoleCursorPosition(void* handle, Coord coord);
        static bool SetConsoleTextAttribute(void* handle, int16_t attribute);
        static bool SetConsoleScreenBufferSize(void* handle, Coord newSize);
        static bool SetConsoleWindowInfo(void* handle, bool absolute, SmallRect rect);
        static int32_t GetConsoleTitle(Text::StringBuilder* sb, int32_t size);
        static bool SetConsoleTitle(String* title);
        static bool GetConsoleCursorInfo(void* handle, ConsoleCursorInfo info);
        static bool SetConsoleCursorInfo(void* handle, ConsoleCursorInfo info);
        static int16_t GetKeyState(int32_t virtKey);
        static bool GetConsoleMode(void* handle, int32_t mode);
        static bool SetConsoleMode(void* handle, int32_t mode);
        static bool PeekConsoleInput(void* handle, InputRecord record, int32_t length, int32_t eventsRead);
        static bool ReadConsoleInput(void* handle, InputRecord record, int32_t length, int32_t nread);
        static Coord GetLargestConsoleWindowSize(void* handle);
        static bool ReadConsoleOutput(void* handle, void* buffer, Coord bsize, Coord bpos, SmallRect region);
        static bool WriteConsoleOutput(void* handle, cli::array<CharInfo>* buffer, Coord bsize, Coord bpos, SmallRect region);
        ConsoleColor get_BackgroundColor();
        ConsoleColor set_BackgroundColor(ConsoleColor value);
        int32_t get_BufferHeight();
        int32_t set_BufferHeight(int32_t value);
        int32_t get_BufferWidth();
        int32_t set_BufferWidth(int32_t value);
        bool get_CapsLock();
        int32_t get_CursorLeft();
        int32_t set_CursorLeft(int32_t value);
        int32_t get_CursorSize();
        int32_t set_CursorSize(int32_t value);
        int32_t get_CursorTop();
        int32_t set_CursorTop(int32_t value);
        bool get_CursorVisible();
        bool set_CursorVisible(bool value);
        ConsoleColor get_ForegroundColor();
        ConsoleColor set_ForegroundColor(ConsoleColor value);
        bool get_KeyAvailable();
        bool get_Initialized();
        int32_t get_LargestWindowHeight();
        int32_t get_LargestWindowWidth();
        bool get_NumberLock();
        String* get_Title();
        String* set_Title(String* value);
        bool get_TreatControlCAsInput();
        bool set_TreatControlCAsInput(bool value);
        int32_t get_WindowHeight();
        int32_t set_WindowHeight(int32_t value);
        int32_t get_WindowLeft();
        int32_t set_WindowLeft(int32_t value);
        int32_t get_WindowTop();
        int32_t set_WindowTop(int32_t value);
        int32_t get_WindowWidth();
        int32_t set_WindowWidth(int32_t value);
        
        virtual void Beep_1da4596cc175b056(int32_t frequency, int32_t duration) override;
        virtual void Clear_f1b4f6af283cc2c9() override;
        virtual void MoveBufferArea_5b90e28706eb2f21(int32_t sourceLeft, int32_t sourceTop, int32_t sourceWidth, int32_t sourceHeight, int32_t targetLeft, int32_t targetTop, char16_t sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) override;
        virtual void Init_c5426ee2900a294b() override;
        virtual String* ReadLine_d9726d4d34f7f3c0() override;
        virtual ConsoleKeyInfo ReadKey_6a3b7aab317c85ed(bool intercept) override;
        virtual void ResetColor_8f6250a6a6d78789() override;
        virtual void SetBufferSize_343d697c2e12d0db(int32_t width, int32_t height) override;
        virtual void SetCursorPosition_1b5796b8c190ffa5(int32_t left, int32_t top) override;
        virtual void SetWindowPosition_cd2b9c3f7be414da(int32_t left, int32_t top) override;
        virtual void SetWindowSize_4cfb33f333b34cf(int32_t width, int32_t height) override;
        virtual ConsoleColor get_BackgroundColor_c9fafb327ddb8be6() override;
        virtual ConsoleColor set_BackgroundColor_344fac019c9386b1(ConsoleColor value) override;
        virtual int32_t get_BufferHeight_37934843c5ad875e() override;
        virtual int32_t set_BufferHeight_5d535a7eaee8afa7(int32_t value) override;
        virtual int32_t get_BufferWidth_4e39d049ce05cb10() override;
        virtual int32_t set_BufferWidth_ba768a1fb5af86f3(int32_t value) override;
        virtual bool get_CapsLock_5c626ee325707d5c() override;
        virtual int32_t get_CursorLeft_a1045160a5e0c167() override;
        virtual int32_t set_CursorLeft_58812b936675567d(int32_t value) override;
        virtual int32_t get_CursorSize_c23bb8efe316d434() override;
        virtual int32_t set_CursorSize_f0834eb8266a5be6(int32_t value) override;
        virtual int32_t get_CursorTop_529e091e36331015() override;
        virtual int32_t set_CursorTop_785544d75b1c0bee(int32_t value) override;
        virtual bool get_CursorVisible_56c3cc5601135b6f() override;
        virtual bool set_CursorVisible_cf1ec653cdd99e69(bool value) override;
        virtual ConsoleColor get_ForegroundColor_7612ec7b8c8aaaa5() override;
        virtual ConsoleColor set_ForegroundColor_940cb65e8fef1858(ConsoleColor value) override;
        virtual bool get_KeyAvailable_484cd75e08a09869() override;
        virtual bool get_Initialized_317ffc50d17896d3() override;
        virtual int32_t get_LargestWindowHeight_e89fef87df5ea56d() override;
        virtual int32_t get_LargestWindowWidth_6d2cf275eb651738() override;
        virtual bool get_NumberLock_9e29453ae6b2f675() override;
        virtual String* get_Title_297f109429139f1f() override;
        virtual String* set_Title_5ffd8093a2ce14e8(String* value) override;
        virtual bool get_TreatControlCAsInput_724ae746e19a1372() override;
        virtual bool set_TreatControlCAsInput_22e3ed8b8ed195e4(bool value) override;
        virtual int32_t get_WindowHeight_d105cfc0640e021b() override;
        virtual int32_t set_WindowHeight_762a4dd6c7316c83(int32_t value) override;
        virtual int32_t get_WindowLeft_2e939ca75d6696f7() override;
        virtual int32_t set_WindowLeft_6b1bb1c980db7ca6(int32_t value) override;
        virtual int32_t get_WindowTop_869e53cfc4194ff6() override;
        virtual int32_t set_WindowTop_6ed3579f04406446(int32_t value) override;
        virtual int32_t get_WindowWidth_aaf18af655c54aa3() override;
        virtual int32_t set_WindowWidth_34776e6c3b72e222(int32_t value) override;
    };
    
    
    struct MANAGED_API __ComObject : public virtual MarshalByRefObject{
        void* iunknown;
        void* hash_table;
        Threading::SynchronizationContext* synchronization_context;
        
        void constructor();
        void constructor(Type* t);
        void constructor(void* pItf);
        virtual void Finalize_e871e3b866a85e2c();
        static __ComObject* CreateRCW(Type* t);
        void ReleaseInterfaces();
        void Initialize(Type* t);
        void InitializeApartmentDetails();
        static Guid GetCLSID(Type* t);
        void* GetInterfaceInternal(Type* t, bool throwException);
        void* GetInterface(Type* t, bool throwException);
        void* GetInterface2(Type* t);
        void CheckIUnknown();
        virtual bool Equals_ed975d2f4a7d193e(Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static int32_t CoCreateInstance(Guid rclsid, void* pUnkOuter, uint32_t dwClsContext, Guid riid, void* pUnk);
        void _Finalize_m__3(Object* state);
        void* get_IUnknown();
        void* get_IDispatch();
        static Guid get_IID_IUnknown();
        static Guid get_IID_IDispatch();
        
    };
    
}
namespace System { namespace Collections {
    
    struct MANAGED_API ArrayListEnumerator : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        System::Object* m_Current;
        ArrayList* m_List;
        int32_t m_Pos;
        int32_t m_Index;
        int32_t m_Count;
        int32_t m_ExpectedStateChanges;
        
        void constructor(ArrayList* list);
        void constructor(ArrayList* list, int32_t index, int32_t count);
        System::Object* Clone();
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API SimpleEnumerator2 : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        ArrayList* list;
        System::Object* currentElement;
        int32_t index;
        int32_t version;
        static System::Object* endFlag;
        
        SimpleEnumerator2();
        void constructor(ArrayList* list);
        static void static_constructor();
        System::Object* Clone();
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API EnumeratorWithRange : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        int32_t m_StartIndex;
        int32_t m_Count;
        int32_t m_MaxCount;
        IEnumerator* m_Enumerator;
        
        void constructor(IEnumerator* enumerator, int32_t index, int32_t count);
        System::Object* Clone();
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API ArrayListAdapter : public virtual ArrayList{
        IList* m_Adaptee;
        
        void constructor(IList* adaptee);
        virtual int32_t Add_e6a92085999ce388(System::Object* value) override;
        virtual void Clear_cd6654e5a40f5056() override;
        virtual bool Contains_f1c198d01147f1ee(System::Object* value) override;
        virtual int32_t IndexOf_7e9811d6771f771d(System::Object* value) override;
        virtual int32_t IndexOf_1c0527e45dc3728e(System::Object* value, int32_t startIndex) override;
        virtual int32_t IndexOf_adae3dc40eaa594e(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual int32_t LastIndexOf_ecfd0185f74248a7(System::Object* value) override;
        virtual int32_t LastIndexOf_ed2c73a4e33a0826(System::Object* value, int32_t startIndex) override;
        virtual int32_t LastIndexOf_c6f99b5b290904b1(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value) override;
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c) override;
        virtual void Remove_2225381aaf812c6d(System::Object* value) override;
        virtual void RemoveAt_2abea768d3273318(int32_t index) override;
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count) override;
        virtual void Reverse_e7caef4018f63b41() override;
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count) override;
        virtual void SetRange_87e491be8261c464(int32_t index, ICollection* c) override;
        virtual void CopyTo_c634d425a65b1fc3(System::Array* array) override;
        virtual void CopyTo_2bc540dad3c25b9e(System::Array* array, int32_t index) override;
        virtual void CopyTo_4b0d97bda775c102(int32_t index, System::Array* array, int32_t arrayIndex, int32_t count) override;
        virtual IEnumerator* GetEnumerator_84e3ba8f2fdefd62() override;
        virtual IEnumerator* GetEnumerator_78a3fe75766282cd(int32_t index, int32_t count) override;
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c) override;
        virtual int32_t BinarySearch_77606568b997fd61(System::Object* value) override;
        virtual int32_t BinarySearch_f0deec366fa04a93(System::Object* value, IComparer* comparer) override;
        virtual int32_t BinarySearch_5160cee074873e3f(int32_t index, int32_t count, System::Object* value, IComparer* comparer) override;
        virtual System::Object* Clone_5d610374e21ea7b0() override;
        virtual ArrayList* GetRange_21d02af9397d43dc(int32_t index, int32_t count) override;
        virtual void TrimToSize_d8592d0aafda93d() override;
        virtual void Sort_9fb0fdfea73c2096() override;
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer) override;
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer) override;
        static void Swap(IList* list, int32_t x, int32_t y);
        static void QuickSort(IList* list, int32_t left, int32_t right, IComparer* comparer);
        virtual cli::array<System::Object*>* ToArray_360bcd462eb48114() override;
        virtual System::Array* ToArray_7b80f35a5dbfbc47(System::Type* elementType) override;
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index) override;
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_2354963792616712() override;
        virtual int32_t get_Capacity_2220db8052d52582() override;
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value) override;
        virtual bool get_IsFixedSize_97a42a087785251() override;
        virtual bool get_IsReadOnly_671df7b1908db8ee() override;
        virtual System::Object* get_SyncRoot_edb1ba826807b569() override;
        virtual bool get_IsSynchronized_ffa26be0a148c3c0() override;
        
    };
    
    
    struct MANAGED_API SynchronizedArrayListWrapper : public virtual ArrayListWrapper{
        System::Object* m_SyncRoot;
        
        void constructor(ArrayList* innerArrayList);
        virtual int32_t Add_e6a92085999ce388(System::Object* value) override;
        virtual void Clear_cd6654e5a40f5056() override;
        virtual bool Contains_f1c198d01147f1ee(System::Object* value) override;
        virtual int32_t IndexOf_7e9811d6771f771d(System::Object* value) override;
        virtual int32_t IndexOf_1c0527e45dc3728e(System::Object* value, int32_t startIndex) override;
        virtual int32_t IndexOf_adae3dc40eaa594e(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual int32_t LastIndexOf_ecfd0185f74248a7(System::Object* value) override;
        virtual int32_t LastIndexOf_ed2c73a4e33a0826(System::Object* value, int32_t startIndex) override;
        virtual int32_t LastIndexOf_c6f99b5b290904b1(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value) override;
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c) override;
        virtual void Remove_2225381aaf812c6d(System::Object* value) override;
        virtual void RemoveAt_2abea768d3273318(int32_t index) override;
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count) override;
        virtual void Reverse_e7caef4018f63b41() override;
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count) override;
        virtual void CopyTo_c634d425a65b1fc3(System::Array* array) override;
        virtual void CopyTo_2bc540dad3c25b9e(System::Array* array, int32_t index) override;
        virtual void CopyTo_4b0d97bda775c102(int32_t index, System::Array* array, int32_t arrayIndex, int32_t count) override;
        virtual IEnumerator* GetEnumerator_84e3ba8f2fdefd62() override;
        virtual IEnumerator* GetEnumerator_78a3fe75766282cd(int32_t index, int32_t count) override;
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c) override;
        virtual int32_t BinarySearch_77606568b997fd61(System::Object* value) override;
        virtual int32_t BinarySearch_f0deec366fa04a93(System::Object* value, IComparer* comparer) override;
        virtual int32_t BinarySearch_5160cee074873e3f(int32_t index, int32_t count, System::Object* value, IComparer* comparer) override;
        virtual System::Object* Clone_5d610374e21ea7b0() override;
        virtual ArrayList* GetRange_21d02af9397d43dc(int32_t index, int32_t count) override;
        virtual void TrimToSize_d8592d0aafda93d() override;
        virtual void Sort_9fb0fdfea73c2096() override;
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer) override;
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer) override;
        virtual cli::array<System::Object*>* ToArray_360bcd462eb48114() override;
        virtual System::Array* ToArray_7b80f35a5dbfbc47(System::Type* elementType) override;
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index) override;
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_2354963792616712() override;
        virtual int32_t get_Capacity_2220db8052d52582() override;
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value) override;
        virtual bool get_IsFixedSize_97a42a087785251() override;
        virtual bool get_IsReadOnly_671df7b1908db8ee() override;
        virtual bool get_IsSynchronized_ffa26be0a148c3c0() override;
        virtual System::Object* get_SyncRoot_edb1ba826807b569() override;
        
    };
    
    
    struct MANAGED_API ReadOnlyArrayListWrapper : public virtual FixedSizeArrayListWrapper{
        
        void constructor(ArrayList* innerArrayList);
        virtual void Reverse_e7caef4018f63b41() override;
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count) override;
        virtual void SetRange_87e491be8261c464(int32_t index, ICollection* c) override;
        virtual void Sort_9fb0fdfea73c2096() override;
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer) override;
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer) override;
        virtual System::String* get_ErrorMessage_d1b0b946fa8d50da() override;
        virtual bool get_IsReadOnly_671df7b1908db8ee() override;
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index) override;
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value) override;
        
    };
    
    
    struct MANAGED_API RangedArrayList : public virtual ArrayListWrapper{
        int32_t m_InnerIndex;
        int32_t m_InnerCount;
        int32_t m_InnerStateChanges;
        
        void constructor(ArrayList* innerList, int32_t index, int32_t count);
        void VerifyStateChanges();
        virtual int32_t Add_e6a92085999ce388(System::Object* value) override;
        virtual void Clear_cd6654e5a40f5056() override;
        virtual bool Contains_f1c198d01147f1ee(System::Object* value) override;
        virtual int32_t IndexOf_7e9811d6771f771d(System::Object* value) override;
        virtual int32_t IndexOf_1c0527e45dc3728e(System::Object* value, int32_t startIndex) override;
        virtual int32_t IndexOf_adae3dc40eaa594e(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual int32_t LastIndexOf_ecfd0185f74248a7(System::Object* value) override;
        virtual int32_t LastIndexOf_ed2c73a4e33a0826(System::Object* value, int32_t startIndex) override;
        virtual int32_t LastIndexOf_c6f99b5b290904b1(System::Object* value, int32_t startIndex, int32_t count) override;
        virtual void Insert_59557a2615bf3b8e(int32_t index, System::Object* value) override;
        virtual void InsertRange_2250ae882d749466(int32_t index, ICollection* c) override;
        virtual void Remove_2225381aaf812c6d(System::Object* value) override;
        virtual void RemoveAt_2abea768d3273318(int32_t index) override;
        virtual void RemoveRange_808c38a5e4171a64(int32_t index, int32_t count) override;
        virtual void Reverse_e7caef4018f63b41() override;
        virtual void Reverse_bb783f185b528565(int32_t index, int32_t count) override;
        virtual void SetRange_87e491be8261c464(int32_t index, ICollection* c) override;
        virtual void CopyTo_c634d425a65b1fc3(System::Array* array) override;
        virtual void CopyTo_2bc540dad3c25b9e(System::Array* array, int32_t index) override;
        virtual void CopyTo_4b0d97bda775c102(int32_t index, System::Array* array, int32_t arrayIndex, int32_t count) override;
        virtual IEnumerator* GetEnumerator_84e3ba8f2fdefd62() override;
        virtual IEnumerator* GetEnumerator_78a3fe75766282cd(int32_t index, int32_t count) override;
        virtual void AddRange_a8bb4db32a72ffe(ICollection* c) override;
        virtual int32_t BinarySearch_77606568b997fd61(System::Object* value) override;
        virtual int32_t BinarySearch_f0deec366fa04a93(System::Object* value, IComparer* comparer) override;
        virtual int32_t BinarySearch_5160cee074873e3f(int32_t index, int32_t count, System::Object* value, IComparer* comparer) override;
        virtual System::Object* Clone_5d610374e21ea7b0() override;
        virtual ArrayList* GetRange_21d02af9397d43dc(int32_t index, int32_t count) override;
        virtual void TrimToSize_d8592d0aafda93d() override;
        virtual void Sort_9fb0fdfea73c2096() override;
        virtual void Sort_bdf7dee226e6219b(IComparer* comparer) override;
        virtual void Sort_e6922b45a581abd6(int32_t index, int32_t count, IComparer* comparer) override;
        virtual cli::array<System::Object*>* ToArray_360bcd462eb48114() override;
        virtual System::Array* ToArray_7b80f35a5dbfbc47(System::Type* elementType) override;
        virtual bool get_IsSynchronized_ffa26be0a148c3c0() override;
        virtual System::Object* get_Item_fd0155f142ae570(int32_t index) override;
        virtual System::Object* set_Item_9f12782653a34813(int32_t index, System::Object* value) override;
        virtual int32_t get_Count_2354963792616712() override;
        virtual int32_t get_Capacity_2220db8052d52582() override;
        virtual int32_t set_Capacity_8cc9f300b61d27aa(int32_t value) override;
        
    };
    
    
    struct MANAGED_API SynchronizedListWrapper : public virtual ListWrapper{
        System::Object* m_SyncRoot;
        
        void constructor(IList* innerList);
        virtual int32_t Add_bcf09ba25e62648f(System::Object* value) override;
        virtual void Clear_77f454011f626479() override;
        virtual bool Contains_f9107b57b0828239(System::Object* value) override;
        virtual int32_t IndexOf_e6724c0395a3dad0(System::Object* value) override;
        virtual void Insert_290942a010dce429(int32_t index, System::Object* value) override;
        virtual void Remove_f0670db65479e773(System::Object* value) override;
        virtual void RemoveAt_a5bebe22efe6f1a7(int32_t index) override;
        virtual void CopyTo_91752f56f47af7f3(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_6e025ed1cc117836() override;
        virtual int32_t get_Count_614a2abb891f748b() override;
        virtual bool get_IsSynchronized_23e3b7993e71d737() override;
        virtual System::Object* get_SyncRoot_a3def0e51eeaf8d9() override;
        virtual bool get_IsFixedSize_3444cf8f8ef3efa4() override;
        virtual bool get_IsReadOnly_fe00057b4a1798ff() override;
        virtual System::Object* get_Item_896a441a7363c710(int32_t index) override;
        virtual System::Object* set_Item_a9ec2ce7dfe8dea5(int32_t index, System::Object* value) override;
        
    };
    
    
    struct MANAGED_API ReadOnlyListWrapper : public virtual FixedSizeListWrapper{
        
        void constructor(IList* innerList);
        virtual System::String* get_ErrorMessage_461bc84fd2dc69d6() override;
        virtual bool get_IsReadOnly_fe00057b4a1798ff() override;
        virtual System::Object* get_Item_896a441a7363c710(int32_t index) override;
        virtual System::Object* set_Item_a9ec2ce7dfe8dea5(int32_t index, System::Object* value) override;
        
    };
    
    
    struct MANAGED_API BitArrayEnumerator : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        BitArray* _bitArray;
        bool _current;
        int32_t _index;
        int32_t _version;
        
        void constructor(BitArray* ba);
        System::Object* Clone();
        bool MoveNext();
        void Reset();
        void checkVersion();
        System::Object* get_Current();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API BitArray : public virtual System::Object, public virtual ICollection, public virtual System::ICloneable, public virtual IEnumerable{
        cli::array<int32_t>* m_array;
        int32_t m_length;
        int32_t _version;
        
        void constructor(BitArray* bits);
        void constructor(cli::array<bool>* values);
        void constructor(cli::array<unsigned char>* bytes);
        void constructor(cli::array<int32_t>* values);
        void constructor(int32_t length);
        void constructor(int32_t length, bool defaultValue);
        unsigned char getByte(int32_t byteIndex);
        void setByte(int32_t byteIndex, unsigned char value);
        void checkOperand(BitArray* operand);
        System::Object* Clone();
        void CopyTo(System::Array* array, int32_t index);
        BitArray* Not();
        BitArray* And(BitArray* value);
        BitArray* Or(BitArray* value);
        BitArray* Xor(BitArray* value);
        bool Get(int32_t index);
        void Set(int32_t index, bool value);
        void SetAll(bool value);
        IEnumerator* GetEnumerator();
        int32_t get_Count();
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        bool get_Item(int32_t index);
        bool set_Item(int32_t index, bool value);
        int32_t get_Length();
        int32_t set_Length(int32_t value);
        System::Object* get_SyncRoot();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API CaseInsensitiveComparer : public virtual System::Object, public virtual IComparer{
        static CaseInsensitiveComparer* defaultComparer;
        static CaseInsensitiveComparer* defaultInvariantComparer;
        System::Globalization::CultureInfo* culture;
        
        CaseInsensitiveComparer();
        void constructor();
        void constructor(bool invariant);
        void constructor(System::Globalization::CultureInfo* culture);
        static void static_constructor();
        int32_t Compare(System::Object* a, System::Object* b);
        static CaseInsensitiveComparer* get_Default();
        static CaseInsensitiveComparer* get_DefaultInvariant();
        
        virtual int32_t Compare_451fd276747b629d(System::Object* a, System::Object* b) override;
    };
    
    
    struct MANAGED_API CaseInsensitiveHashCodeProvider : public virtual System::Object, public virtual IHashCodeProvider{
        static CaseInsensitiveHashCodeProvider* singletonInvariant;
        static CaseInsensitiveHashCodeProvider* singleton;
        static System::Object* sync;
        System::Globalization::TextInfo* m_text;
        
        CaseInsensitiveHashCodeProvider();
        void constructor();
        void constructor(System::Globalization::CultureInfo* culture);
        static void static_constructor();
        static bool AreEqual(System::Globalization::CultureInfo* a, System::Globalization::CultureInfo* b);
        static bool AreEqual2(System::Globalization::TextInfo* info, System::Globalization::CultureInfo* culture);
        int32_t GetHashCode2(System::Object* obj);
        static CaseInsensitiveHashCodeProvider* get_Default();
        static CaseInsensitiveHashCodeProvider* get_DefaultInvariant();
        
        virtual int32_t GetHashCode_5d8a358493971efd(System::Object* obj) override;
    };
    
    
    struct MANAGED_API CollectionDebuggerView : public virtual System::Object{
        ICollection* c;
        
        void constructor(ICollection* col);
        cli::array<System::Object*>* get_Items();
        
    };
    
    
    struct MANAGED_API Comparer : public virtual System::Object, public virtual IComparer, public virtual System::Runtime::Serialization::ISerializable{
        static Comparer* Default2;
        static Comparer* DefaultInvariant;
        System::Globalization::CompareInfo* m_compareInfo;
        
        Comparer();
        void constructor();
        void constructor(System::Globalization::CultureInfo* culture);
        static void static_constructor();
        int32_t Compare(System::Object* a, System::Object* b);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* a, System::Object* b) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API DictionaryBase : public virtual System::Object, public virtual IDictionary, public virtual ICollection, public virtual IEnumerable{
        Hashtable* hashtable;
        
        void constructor();
        void Clear();
        void CopyTo(System::Array* array, int32_t index);
        void DoCopy(System::Array* array, int32_t index);
        IDictionaryEnumerator* GetEnumerator();
        virtual void OnClear_6ef9b9f2f0fd4809();
        virtual void OnClearComplete_5ab571a511f10976();
        virtual System::Object* OnGet_94f724c5d18f2041(System::Object* key, System::Object* currentValue);
        virtual void OnInsert_862340ab831c4da5(System::Object* key, System::Object* value);
        virtual void OnInsertComplete_dc9f25e67cf29410(System::Object* key, System::Object* value);
        virtual void OnSet_5d422c0e116e47b0(System::Object* key, System::Object* oldValue, System::Object* newValue);
        virtual void OnSetComplete_6298bb84d799d58a(System::Object* key, System::Object* oldValue, System::Object* newValue);
        virtual void OnRemove_e1848c9085edcf00(System::Object* key, System::Object* value);
        virtual void OnRemoveComplete_492d5c927ebfd38f(System::Object* key, System::Object* value);
        virtual void OnValidate_a02562a8e925acee(System::Object* key, System::Object* value);
        void Add(System::Object* key, System::Object* value);
        void Remove(System::Object* key);
        bool Contains(System::Object* key);
        IEnumerator* GetEnumerator2();
        int32_t get_Count();
        IDictionary* get_Dictionary();
        Hashtable* get_InnerHashtable();
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        System::Object* get_Item(System::Object* key);
        System::Object* set_Item(System::Object* key, System::Object* value);
        ICollection* get_Keys();
        ICollection* get_Values();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        
        virtual void Clear_23091c63869f817f() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual ICollection* get_Keys_d809cadac60b140a() override;
        virtual ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API KeyMarker : public virtual System::Object, public virtual System::Runtime::Serialization::IObjectReference{
        static KeyMarker* Removed;
        
        KeyMarker();
        void constructor();
        static void static_constructor();
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API Enumerator : public virtual System::Object, public virtual IDictionaryEnumerator, public virtual IEnumerator{
        Hashtable* host;
        System::Object* currentKey;
        System::Object* currentValue;
        int32_t stamp;
        int32_t pos;
        int32_t size;
        EnumeratorMode mode;
        static System::String* xstr;
        
        Enumerator();
        void constructor(Hashtable* host, EnumeratorMode mode);
        static void static_constructor();
        void FailFast();
        void Reset();
        bool MoveNext();
        DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        System::Object* get_Current();
        
        virtual void Reset_bcd82381eed41868() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API HashKeys : public virtual System::Object, public virtual ICollection, public virtual IEnumerable{
        Hashtable* host;
        
        void constructor(Hashtable* host);
        virtual void CopyTo_26b7b563095a6a78(System::Array* array, int32_t arrayIndex);
        virtual IEnumerator* GetEnumerator_d0848c73b0d4ba7e();
        virtual int32_t get_Count_870e31a32a0811da();
        virtual bool get_IsSynchronized_1b4048350ba18310();
        virtual System::Object* get_SyncRoot_2b118fba429beabc();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API HashValues : public virtual System::Object, public virtual ICollection, public virtual IEnumerable{
        Hashtable* host;
        
        void constructor(Hashtable* host);
        virtual void CopyTo_3dedcd2541c30c5b(System::Array* array, int32_t arrayIndex);
        virtual IEnumerator* GetEnumerator_76e01e69f9d79a21();
        virtual int32_t get_Count_7bc0b9b088d0f437();
        virtual bool get_IsSynchronized_124b5400ee4ed680();
        virtual System::Object* get_SyncRoot_aa8e50be6f68d1c8();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API SyncHashtable : public virtual Hashtable{
        Hashtable* host;
        
        void constructor(Hashtable* host);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_f5c8af3d5979ea57(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        IEnumerator* GetEnumerator3();
        virtual void CopyTo_2ceaf225ee09f8a(System::Array* array, int32_t arrayIndex) override;
        virtual void Add_3f7ab157bcb41156(System::Object* key, System::Object* value) override;
        virtual void Clear_f1f405c8fa63a059() override;
        virtual bool Contains_be7d0f2741618cb4(System::Object* key) override;
        virtual IDictionaryEnumerator* GetEnumerator_47df71de9b680069() override;
        virtual void Remove_fd653674dd8a5ac4(System::Object* key) override;
        virtual bool ContainsKey_5de2e202a0290d76(System::Object* key) override;
        virtual bool ContainsValue_c2c435f6458aea98(System::Object* value) override;
        virtual System::Object* Clone_7f5df2dba23978b() override;
        virtual int32_t get_Count_40aff81471a60b4c() override;
        virtual bool get_IsSynchronized_6d887770284f3341() override;
        virtual System::Object* get_SyncRoot_2d1e4aa44bab8a0d() override;
        virtual bool get_IsFixedSize_984422caf0fb996a() override;
        virtual bool get_IsReadOnly_4faf7104d0e98623() override;
        virtual ICollection* get_Keys_8171dfd94447fa93() override;
        virtual ICollection* get_Values_4ed88b5f6e59ef25() override;
        virtual System::Object* get_Item_d75c6e706b965758(System::Object* key) override;
        virtual System::Object* set_Item_84c7e24d9caa09(System::Object* key, System::Object* value) override;
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual ICollection* get_Keys_d809cadac60b140a() override;
        virtual ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
    };
    
    
    struct MANAGED_API SyncQueue : public virtual Queue{
        Queue* queue;
        
        void constructor(Queue* queue);
        virtual void CopyTo_a242f31c9e5a44f6(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_9c4544dfc8024fc3() override;
        virtual System::Object* Clone_bcf06e67c65a40c7() override;
        virtual void Clear_861e11dd27e6c911() override;
        virtual void TrimToSize_ba0f5f9778fb48a6() override;
        virtual bool Contains_26022acb06595f32(System::Object* obj) override;
        virtual System::Object* Dequeue_65b33648b3aa820f() override;
        virtual void Enqueue_7ab7b5c658b77bbe(System::Object* obj) override;
        virtual System::Object* Peek_8319b8ebd54b1ede() override;
        virtual cli::array<System::Object*>* ToArray_ccb213d63131bb6c() override;
        virtual int32_t get_Count_d68471db5ed73aae() override;
        virtual bool get_IsSynchronized_c60381663baf0d11() override;
        virtual System::Object* get_SyncRoot_d7b361956ed7602e() override;
        
    };
    
    
    struct MANAGED_API QueueEnumerator : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        Queue* queue;
        int32_t _version;
        int32_t current;
        
        void constructor(Queue* q);
        System::Object* Clone();
        virtual bool MoveNext_e38147317beb6367();
        virtual void Reset_f399ddbfb4a26238();
        virtual System::Object* get_Current_dfd4e333254568bd();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API Enumerator2 : public virtual System::Object, public virtual System::ICloneable, public virtual IDictionaryEnumerator, public virtual IEnumerator{
        SortedList* host;
        System::Object* currentKey;
        System::Object* currentValue;
        int32_t stamp;
        int32_t pos;
        int32_t size;
        EnumeratorMode2 mode;
        bool invalid;
        static System::String* xstr;
        
        Enumerator2();
        void constructor(SortedList* host, EnumeratorMode2 mode);
        void constructor(SortedList* host);
        static void static_constructor();
        void Reset();
        bool MoveNext();
        System::Object* Clone();
        DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        System::Object* get_Current();
        
        virtual void Reset_bcd82381eed41868() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API ListKeys : public virtual System::Object, public virtual IList, public virtual IEnumerable, public virtual ICollection{
        SortedList* host;
        
        void constructor(SortedList* host);
        virtual void CopyTo_ab674e4725a04dd5(System::Array* array, int32_t arrayIndex);
        virtual int32_t Add_c75566abdfd3f1dc(System::Object* value);
        virtual void Clear_de8b60e6daa645fa();
        virtual bool Contains_a17f9f0078013e59(System::Object* key);
        virtual int32_t IndexOf_1478511550cde2ad(System::Object* key);
        virtual void Insert_1f210e681eab810a(int32_t index, System::Object* value);
        virtual void Remove_96c7b29ece8e3105(System::Object* value);
        virtual void RemoveAt_acef67f8944a5305(int32_t index);
        virtual IEnumerator* GetEnumerator_cfd57c074767b6cf();
        virtual int32_t get_Count_8dbd9d9efdb630c7();
        virtual bool get_IsSynchronized_30c043785c3848e1();
        virtual System::Object* get_SyncRoot_d7cb07b3d3ac34f9();
        virtual bool get_IsFixedSize_de999dd589b62794();
        virtual bool get_IsReadOnly_ef714023f662889b();
        virtual System::Object* get_Item_9b384f79b2a8f442(int32_t index);
        virtual System::Object* set_Item_766478b9723d0685(int32_t index, System::Object* value);
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(System::Object* key) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* key) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
    
    struct MANAGED_API ListValues : public virtual System::Object, public virtual IList, public virtual IEnumerable, public virtual ICollection{
        SortedList* host;
        
        void constructor(SortedList* host);
        virtual void CopyTo_5c11843f30416058(System::Array* array, int32_t arrayIndex);
        virtual int32_t Add_b209d72c1dbda305(System::Object* value);
        virtual void Clear_5f40b3c399928145();
        virtual bool Contains_1431cca1be25e62e(System::Object* value);
        virtual int32_t IndexOf_4988cb7302341a9d(System::Object* value);
        virtual void Insert_7e27e989df4a7c98(int32_t index, System::Object* value);
        virtual void Remove_bbb8a6a15af4657f(System::Object* value);
        virtual void RemoveAt_3e80344965f12590(int32_t index);
        virtual IEnumerator* GetEnumerator_9e0ab377ed68f679();
        virtual int32_t get_Count_2968b09a1d64f9e5();
        virtual bool get_IsSynchronized_625d34d3b10e142e();
        virtual System::Object* get_SyncRoot_ecf4ff86be0f7dc5();
        virtual bool get_IsFixedSize_7509d66a3ff49ce6();
        virtual bool get_IsReadOnly_216abd3d5aa2f510();
        virtual System::Object* get_Item_d6a462476dd6db5b(int32_t index);
        virtual System::Object* set_Item_5e0f725cf069c7d2(int32_t index, System::Object* value);
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
    
    struct MANAGED_API SynchedSortedList : public virtual SortedList{
        SortedList* host;
        
        void constructor(SortedList* host);
        virtual void CopyTo_8484dba7aeba95d9(System::Array* array, int32_t arrayIndex) override;
        virtual void Add_73ffb8be47e034c5(System::Object* key, System::Object* value) override;
        virtual void Clear_5308a33218829a30() override;
        virtual bool Contains_34d44683dd1aa8bd(System::Object* key) override;
        virtual IDictionaryEnumerator* GetEnumerator_958c16317aeb4444() override;
        virtual void Remove_61abf193a3ae1d2b(System::Object* key) override;
        virtual bool ContainsKey_e3470ab0b9b87703(System::Object* key) override;
        virtual bool ContainsValue_ef34ededfed85e10(System::Object* value) override;
        virtual System::Object* Clone_e04bc1da0532c023() override;
        virtual System::Object* GetByIndex_920ca5caddf75e3d(int32_t index) override;
        virtual System::Object* GetKey_bd6d1bec1a5b310c(int32_t index) override;
        virtual IList* GetKeyList_ffbd7f3ff810d3() override;
        virtual IList* GetValueList_17bf7e573fc23371() override;
        virtual void RemoveAt_cba3ea1ee2c9606d(int32_t index) override;
        virtual int32_t IndexOfKey_81491507d0744836(System::Object* key) override;
        virtual int32_t IndexOfValue_782f6ce5fef83fb5(System::Object* val) override;
        virtual void SetByIndex_6f02898365af9fc4(int32_t index, System::Object* value) override;
        virtual void TrimToSize_40ad24c8c4892462() override;
        virtual int32_t get_Capacity_db68c0b120caeec5() override;
        virtual int32_t set_Capacity_13c76b6b4fffc55d(int32_t value) override;
        virtual int32_t get_Count_78ce60b82e5a007() override;
        virtual bool get_IsSynchronized_766878a892ebabf4() override;
        virtual System::Object* get_SyncRoot_d4fc4c9fde3847f6() override;
        virtual bool get_IsFixedSize_8ae72e21b9352319() override;
        virtual bool get_IsReadOnly_1c2de291a8a6bf90() override;
        virtual ICollection* get_Keys_2962390e8ff57dd6() override;
        virtual ICollection* get_Values_cb1c2f63e58da7b3() override;
        virtual System::Object* get_Item_c9a994fdd927bead(System::Object* key) override;
        virtual System::Object* set_Item_1ba4748ac76411aa(System::Object* key, System::Object* value) override;
        
    };
    
    
    struct MANAGED_API SyncStack : public virtual Stack{
        Stack* stack;
        
        void constructor(Stack* s);
        virtual void Clear_8c8c25624b18372d() override;
        virtual System::Object* Clone_be99069adbf1961c() override;
        virtual bool Contains_e73575808049e7be(System::Object* obj) override;
        virtual void CopyTo_f10714ed2802c46b(System::Array* array, int32_t index) override;
        virtual IEnumerator* GetEnumerator_ae53897f8a2f577a() override;
        virtual System::Object* Peek_6b91e1254bdabd34() override;
        virtual System::Object* Pop_9492442210514403() override;
        virtual void Push_9a8495c8210a673(System::Object* obj) override;
        virtual cli::array<System::Object*>* ToArray_429131696de6db19() override;
        virtual int32_t get_Count_a768d394e63a6b27() override;
        virtual bool get_IsSynchronized_d5977c6adec21cc3() override;
        virtual System::Object* get_SyncRoot_d19ca4cd2e3adde6() override;
        
    };
    
    
    struct MANAGED_API Enumerator3 : public virtual System::Object, public virtual IEnumerator, public virtual System::ICloneable{
        static constexpr int32_t EOF = -1;
        static constexpr int32_t BOF = -2;
        Stack* stack;
        int32_t modCount;
        int32_t current;
        
        void constructor(Stack* s);
        System::Object* Clone();
        virtual bool MoveNext_95653590660ca25b();
        virtual void Reset_f5f37e29637be803();
        virtual System::Object* get_Current_9c1f38e77bf983c1();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API ComparerImpl : public virtual System::Object, public virtual IComparer, public virtual IEqualityComparer{
        
        void constructor();
        int32_t Compare(System::Object* x, System::Object* y);
        int32_t GetHashCode2(System::Object* obj);
        bool Equals3(System::Object* x, System::Object* y);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* x, System::Object* y) override;
        virtual int32_t GetHashCode_f8793dfb2b096a5a(System::Object* obj) override;
        virtual bool Equals_ad190887ea91ded(System::Object* x, System::Object* y) override;
    };
    
    
    struct MANAGED_API StructuralComparisons : public virtual System::Object{
        static ComparerImpl* comparer;
        
        StructuralComparisons();
        static void static_constructor();
        static IComparer* get_StructuralComparer();
        static IEqualityComparer* get_StructuralEqualityComparer();
        
    };
    
}}
namespace System { namespace Collections { namespace Concurrent {
    
    template<class TKey, class TValue> struct MANAGED_API ConcurrentDictionaryEnumerator : public virtual System::Object, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* internalEnum;
        
        void constructor(System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* internalEnum);
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API ConcurrentDictionary : public virtual System::Object, public virtual System::Collections::Generic::IDictionary2<TKey, TValue>, public virtual System::Collections::Generic::ICollection2<System::Collections::Generic::KeyValuePair<TKey, TValue>>, public virtual System::Collections::Generic::IEnumerable2<System::Collections::Generic::KeyValuePair<TKey, TValue>>, public virtual System::Collections::IDictionary, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        System::Collections::Generic::IEqualityComparer2<TKey>* comparer;
        SplitOrderedList<TKey, System::Collections::Generic::KeyValuePair<TKey, TValue>>* internalDictionary;
        static System::Func2<System::Collections::Generic::KeyValuePair<TKey, TValue>, TKey>* __f__am_cache0;
        static System::Func2<System::Collections::Generic::KeyValuePair<TKey, TValue>, TValue>* __f__am_cache1;
        
        void constructor();
        void constructor(System::Collections::Generic::IEnumerable2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* collection);
        void constructor(System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        void constructor(System::Collections::Generic::IEnumerable2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* collection, System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        void constructor(int32_t concurrencyLevel, int32_t capacity);
        void constructor(int32_t concurrencyLevel, System::Collections::Generic::IEnumerable2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* collection, System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        void constructor(int32_t concurrencyLevel, int32_t capacity, System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        void Add(TKey key, TValue value);
        void Add2(TKey key, TValue value);
        bool TryAdd(TKey key, TValue value);
        void Add3(System::Collections::Generic::KeyValuePair<TKey, TValue> pair);
        TValue AddOrUpdate(TKey key, System::Func2<TKey, TValue>* addValueFactory, System::Func4<TKey, TValue, TValue>* updateValueFactory);
        TValue AddOrUpdate2(TKey key, TValue addValue, System::Func4<TKey, TValue, TValue>* updateValueFactory);
        TValue AddOrUpdate3(TKey key, TValue addValue, TValue updateValue);
        TValue GetValue(TKey key);
        bool TryGetValue(TKey key, TValue value);
        bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);
        TValue GetOrAdd(TKey key, System::Func2<TKey, TValue>* valueFactory);
        TValue GetOrAdd2(TKey key, TValue value);
        bool TryRemove(TKey key, TValue value);
        bool Remove(TKey key);
        bool Remove2(TKey key);
        bool Remove3(System::Collections::Generic::KeyValuePair<TKey, TValue> pair);
        bool ContainsKey(TKey key);
        bool Contains(System::Object* key);
        void Remove4(System::Object* key);
        void Add4(System::Object* key, System::Object* value);
        bool Contains2(System::Collections::Generic::KeyValuePair<TKey, TValue> pair);
        cli::array<System::Collections::Generic::KeyValuePair<TKey, TValue>>* ToArray();
        void Clear();
        template<class T>
        System::Collections::Generic::ICollection2<T>* GetPart_1(System::Func2<System::Collections::Generic::KeyValuePair<TKey, TValue>, T>* extractor);
        void CopyTo(System::Array* array, int32_t startIndex);
        void CopyTo2(cli::array<System::Collections::Generic::KeyValuePair<TKey, TValue>>* array, int32_t startIndex);
        void CopyTo3(cli::array<System::Collections::Generic::KeyValuePair<TKey, TValue>>* array, int32_t startIndex);
        void CopyTo4(cli::array<System::Collections::Generic::KeyValuePair<TKey, TValue>>* array, int32_t startIndex, int32_t num);
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* GetEnumeratorInternal();
        System::Collections::IDictionaryEnumerator* GetEnumerator3();
        template<class U, class V>
        static System::Collections::Generic::KeyValuePair<U, V> Make_2(U key, V value);
        uint32_t Hash2(TKey key);
        static TKey _get_Keys_m__9(System::Collections::Generic::KeyValuePair<TKey, TValue> kvp);
        static TValue _get_Values_m__A(System::Collections::Generic::KeyValuePair<TKey, TValue> kvp);
        TValue get_Item(TKey key);
        TValue set_Item(TKey key, TValue value);
        System::Object* get_Item2(System::Object* key);
        System::Object* set_Item2(System::Object* key, System::Object* value);
        int32_t get_Count();
        bool get_IsEmpty();
        bool get_IsReadOnly();
        bool get_IsReadOnly2();
        System::Collections::Generic::ICollection2<TKey>* get_Keys();
        System::Collections::Generic::ICollection2<TValue>* get_Values();
        System::Collections::ICollection* get_Keys2();
        System::Collections::ICollection* get_Values2();
        System::Object* get_SyncRoot();
        bool get_IsFixedSize();
        bool get_IsSynchronized();
        
        virtual void Add_98fd6232ab01b789(TKey key, TValue value) override;
        virtual void Add_a6fc54bc2aa3c029(System::Collections::Generic::KeyValuePair<TKey, TValue> pair) override;
        virtual bool TryGetValue_ce9f0a16d22fc3a7(TKey key, TValue value) override;
        virtual bool Remove_6b6ef63eca7c3783(TKey key) override;
        virtual bool Remove_67948971902d0cce(System::Collections::Generic::KeyValuePair<TKey, TValue> pair) override;
        virtual bool ContainsKey_6b27cc7fbf3d0673(TKey key) override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual bool Contains_ca946a648e63e62e(System::Collections::Generic::KeyValuePair<TKey, TValue> pair) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual void Clear_23091c63869f817f() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t startIndex) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<System::Collections::Generic::KeyValuePair<TKey, TValue>>* array, int32_t startIndex) override;
        virtual System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<TKey, TValue>>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual TValue get_Item_6184d8d494c06347(TKey key) override;
        virtual TValue set_Item_9efe7d5d7f862add(TKey key, TValue value) override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual System::Collections::Generic::ICollection2<TKey>* get_Keys_2b6b38d6f5ec99fa() override;
        virtual System::Collections::Generic::ICollection2<TValue>* get_Values_9c050b7765e02952() override;
        virtual System::Collections::ICollection* get_Keys_d809cadac60b140a() override;
        virtual System::Collections::ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
    };
    
    
    template<class T> struct MANAGED_API Node : public virtual System::Object{
        T Data2;
        int32_t Key2;
        Node<T>* Next;
        bool Marked;
        
        void constructor();
        void constructor(Node<T>* wrapped);
        
    };
    
    
    template<class T> struct MANAGED_API ConcurrentOrderedList : public virtual System::Object, public virtual System::Collections::Generic::ICollection2<T>, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::IEnumerable{
        Node<T>* head;
        Node<T>* tail;
        System::Collections::Generic::IEqualityComparer2<T>* comparer;
        int32_t count;
        
        void constructor();
        void constructor(System::Collections::Generic::IEqualityComparer2<T>* comparer);
        bool TryAdd(T data);
        bool TryRemove(T data);
        bool TryRemoveHash(int32_t key, T data);
        bool TryPop(T data);
        bool Contains(T data);
        bool ContainsHash(int32_t key);
        bool TryGetFromHash(int32_t key, T data);
        void Clear();
        void CopyTo(cli::array<T>* array, int32_t startIndex);
        Node<T>* ListSearch(int32_t key, Node<T>* left);
        bool ListDelete(int32_t key, T data);
        bool ListPop(T data);
        bool ListInsert(Node<T>* newNode);
        bool ListFind(int32_t key, Node<T>* data);
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        System::Collections::Generic::IEnumerator2<T>* GetEnumeratorInternal();
        void Add(T item);
        bool Remove(T item);
        System::Collections::Generic::IEqualityComparer2<T>* get_Comparer();
        int32_t get_Count();
        bool get_IsReadOnly();
        
        virtual bool Contains_ca946a648e63e62e(T data) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual void CopyTo_e6884c04285bc976(cli::array<T>* array, int32_t startIndex) override;
        virtual System::Collections::Generic::IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void Add_a6fc54bc2aa3c029(T item) override;
        virtual bool Remove_67948971902d0cce(T item) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
    };
    
    
    template<class T> struct MANAGED_API Node2 : public virtual System::Object{
        T Value;
        Node2<T>* Next;
        
        void constructor();
        
    };
    
    
    template<class T> struct MANAGED_API NodeObjectPool : public virtual ObjectPool<Node2<T>*>{
        
        void constructor();
        virtual Node2<T>* Creator_c074cf904cf11d1e() override;
        
    };
    
    
    template<class T> struct MANAGED_API ConcurrentQueue : public virtual System::Object, public virtual IProducerConsumerCollection<T>, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        Node2<T>* head;
        Node2<T>* tail;
        int32_t count;
        static NodeObjectPool<T>* pool;
        System::Object* syncRoot;
        
        ConcurrentQueue();
        void constructor();
        void constructor(System::Collections::Generic::IEnumerable2<T>* collection);
        static void static_constructor();
        static Node2<T>* ZeroOut(Node2<T>* node);
        void Enqueue(T item);
        bool TryAdd(T item);
        bool TryDequeue(T result);
        bool TryPeek(T result);
        void Clear();
        System::Collections::IEnumerator* GetEnumerator();
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator2();
        System::Collections::Generic::IEnumerator2<T>* InternalGetEnumerator();
        void CopyTo(System::Array* array, int32_t index);
        void CopyTo2(cli::array<T>* array, int32_t index);
        cli::array<T>* ToArray();
        bool TryTake(T item);
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        int32_t get_Count();
        bool get_IsEmpty();
        
        virtual bool TryAdd_c8c99cf8ee0a136a(T item) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Collections::Generic::IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual void CopyTo_c08b50ac29c8b1c8(cli::array<T>* array, int32_t index) override;
        virtual cli::array<T>* ToArray_8ccf9eabf7c0f83c() override;
        virtual bool TryTake_847d302d2cfeb97(T item) override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
    };
    
    
    template<class T> struct MANAGED_API Node3 : public virtual System::Object{
        T Value;
        Node3<T>* Next;
        
        void constructor();
        
    };
    
    
    template<class T> struct MANAGED_API NodeObjectPool2 : public virtual ObjectPool<Node3<T>*>{
        
        void constructor();
        virtual Node3<T>* Creator_c074cf904cf11d1e() override;
        
    };
    
    
    template<class T> struct MANAGED_API ConcurrentStack : public virtual System::Object, public virtual IProducerConsumerCollection<T>, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        Node3<T>* head;
        int32_t count;
        static NodeObjectPool2<T>* pool;
        System::Object* syncRoot;
        
        ConcurrentStack();
        void constructor();
        void constructor(System::Collections::Generic::IEnumerable2<T>* collection);
        static void static_constructor();
        static Node3<T>* ZeroOut(Node3<T>* node);
        bool TryAdd(T elem);
        void Push(T item);
        void PushRange(cli::array<T>* items);
        void PushRange2(cli::array<T>* items, int32_t startIndex, int32_t count);
        bool TryPop(T result);
        int32_t TryPopRange(cli::array<T>* items);
        int32_t TryPopRange2(cli::array<T>* items, int32_t startIndex, int32_t count);
        bool TryPeek(T result);
        void Clear();
        System::Collections::IEnumerator* GetEnumerator();
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator2();
        System::Collections::Generic::IEnumerator2<T>* InternalGetEnumerator();
        void CopyTo(System::Array* array, int32_t index);
        void CopyTo2(cli::array<T>* array, int32_t index);
        bool TryTake(T item);
        cli::array<T>* ToArray();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        int32_t get_Count();
        bool get_IsEmpty();
        
        virtual bool TryAdd_c8c99cf8ee0a136a(T elem) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual System::Collections::Generic::IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual void CopyTo_c08b50ac29c8b1c8(cli::array<T>* array, int32_t index) override;
        virtual bool TryTake_847d302d2cfeb97(T item) override;
        virtual cli::array<T>* ToArray_8ccf9eabf7c0f83c() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
    };
    
    
    template<class T> struct MANAGED_API ObjectPool : public virtual System::Object{
        static constexpr int32_t capacity = 20;
        static constexpr int32_t bit = 134217728;
        cli::array<T>* buffer;
        int32_t addIndex;
        int32_t removeIndex;
        
        void constructor();
        virtual T Creator_c074cf904cf11d1e() = 0;
        T Take();
        void Release(T obj);
        
    };
    
    
    template<class TSource> struct MANAGED_API ProxyEnumerator : public virtual System::Object, public virtual System::Collections::Generic::IEnumerator2<TSource>, public virtual System::IDisposable, public virtual System::Collections::IEnumerator{
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, TSource>>* internalEnumerator;
        TSource _Current_k__BackingField;
        
        void constructor(System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, TSource>>* enumerator);
        void Dispose();
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        TSource get_Current2();
        TSource set_Current(TSource value);
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
        virtual TSource get_Current_9be2a11682d08be8() override;
    };
    
    
    template<class TSource> struct MANAGED_API OrderablePartitioner : public virtual Partitioner<TSource>{
        bool keysOrderedInEachPartition;
        bool keysOrderedAcrossPartitions;
        bool keysNormalized;
        
        void constructor(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);
        virtual System::Collections::Generic::IEnumerable2<TSource>* GetDynamicPartitions_9e06f5d55ec2b8be() override;
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<TSource>*>* GetPartitions_388b8792e0ab2501(int32_t partitionCount) override;
        System::Collections::Generic::IEnumerator2<TSource>* GetProxyEnumerator(System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, TSource>>* enumerator);
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, TSource>>*>* GetOrderablePartitions_abc13b50067e2c56(int32_t partitionCount) = 0;
        virtual System::Collections::Generic::IEnumerable2<System::Collections::Generic::KeyValuePair<int64_t, TSource>>* GetOrderableDynamicPartitions_f7c19bb268c93fb3();
        bool get_KeysOrderedInEachPartition();
        bool get_KeysOrderedAcrossPartitions();
        bool get_KeysNormalized();
        
    };
    
    
    struct MANAGED_API Partitioner2 : public virtual System::Object{
        
        template<class TSource>
        static OrderablePartitioner<TSource>* Create_1(System::Collections::Generic::IEnumerable2<TSource>* source);
        template<class TSource>
        static OrderablePartitioner<TSource>* Create_12(cli::array<TSource>* array, bool loadBalance);
        template<class TSource>
        static OrderablePartitioner<TSource>* Create_13(System::Collections::Generic::IList2<TSource>* list, bool loadBalance);
        static OrderablePartitioner<System::Tuple4<int32_t, int32_t>*>* Create(int32_t fromInclusive, int32_t toExclusive);
        static OrderablePartitioner<System::Tuple4<int32_t, int32_t>*>* Create2(int32_t fromInclusive, int32_t toExclusive, int32_t rangeSize);
        static OrderablePartitioner<System::Tuple4<int64_t, int64_t>*>* Create3(int64_t fromInclusive, int64_t toExclusive);
        static OrderablePartitioner<System::Tuple4<int64_t, int64_t>*>* Create4(int64_t fromInclusive, int64_t toExclusive, int64_t rangeSize);
        
    };
    
    
    template<class TSource> struct MANAGED_API Partitioner : public virtual System::Object{
        
        void constructor();
        virtual System::Collections::Generic::IEnumerable2<TSource>* GetDynamicPartitions_9e06f5d55ec2b8be();
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<TSource>*>* GetPartitions_388b8792e0ab2501(int32_t partitionCount) = 0;
        virtual bool get_SupportsDynamicPartitions_5600fc5184df900();
        
    };
    
    
    template<class TKey, class T> struct MANAGED_API Node4 : public virtual System::Object{
        bool Marked;
        uint64_t Key2;
        TKey SubKey;
        T Data2;
        Node4<TKey, T>* Next;
        
        void constructor();
        Node4<TKey, T>* Init(uint64_t key, TKey subKey, T data);
        Node4<TKey, T>* Init2(uint64_t key);
        Node4<TKey, T>* Init3(Node4<TKey, T>* wrapped);
        
    };
    
    
    template<class TKey, class T> struct MANAGED_API NodeObjectPool3 : public virtual ObjectPool<Node4<TKey, T>*>{
        
        void constructor();
        virtual Node4<TKey, T>* Creator_c074cf904cf11d1e() override;
        
    };
    
    
    template<class TKey, class T> struct MANAGED_API SplitOrderedList : public virtual System::Object{
        static constexpr int32_t MaxLoad = 5;
        static constexpr uint32_t BucketSize = 512U;
        static NodeObjectPool3<TKey, T>* pool;
        Node4<TKey, T>* head;
        Node4<TKey, T>* tail;
        cli::array<Node4<TKey, T>*>* buckets;
        int32_t count;
        int32_t size;
        SimpleRwLock<TKey, T> slim;
        System::Collections::Generic::IEqualityComparer2<TKey>* comparer;
        static cli::array<unsigned char>* reverseTable;
        static cli::array<unsigned char>* logTable;
        
        SplitOrderedList();
        void constructor(System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        static void static_constructor();
        T InsertOrUpdate(uint32_t key, TKey subKey, System::Func<T>* addGetter, System::Func2<T, T>* updateGetter);
        T InsertOrUpdate2(uint32_t key, TKey subKey, T addValue, T updateValue);
        bool Insert(uint32_t key, TKey subKey, T data);
        T InsertOrGet(uint32_t key, TKey subKey, T data, System::Func<T>* dataCreator);
        bool InsertInternal(uint32_t key, TKey subKey, T data, System::Func<T>* dataCreator, Node4<TKey, T>* current);
        bool Find(uint32_t key, TKey subKey, T data);
        bool CompareExchange(uint32_t key, TKey subKey, T data, System::Func2<T, bool>* check);
        bool Delete(uint32_t key, TKey subKey, T data);
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator();
        Node4<TKey, T>* InitializeBucket(uint32_t b);
        static uint32_t GetParent(uint32_t v);
        static uint64_t ComputeRegularKey(uint32_t key);
        static uint64_t ComputeDummyKey(uint32_t key);
        Node4<TKey, T>* GetBucket(uint32_t index);
        Node4<TKey, T>* SetBucket(uint32_t index, Node4<TKey, T>* node);
        void CheckSegment(uint32_t segment, bool readLockTaken);
        Node4<TKey, T>* ListSearch(uint64_t key, TKey subKey, Node4<TKey, T>* left, Node4<TKey, T>* h);
        bool ListDelete(Node4<TKey, T>* startPoint, uint64_t key, TKey subKey, T data);
        bool ListInsert(Node4<TKey, T>* newNode, Node4<TKey, T>* startPoint, Node4<TKey, T>* current, System::Func<T>* dataCreator);
        bool ListFind(uint64_t key, TKey subKey, Node4<TKey, T>* startPoint, Node4<TKey, T>* data);
        int32_t get_Count();
        
    };
    
}}}
namespace System { namespace Collections { namespace Concurrent { namespace Partitioners {
    
    template<class T> struct MANAGED_API PartitionerState : public virtual System::Object{
        bool Finished;
        int64_t Index;
        System::Object* SyncLock;
        
        void constructor();
        
    };
    
    
    template<class T> struct MANAGED_API EnumerablePartitioner : public virtual System::Collections::Concurrent::OrderablePartitioner<T>{
        static constexpr int32_t InitialPartitionSize = 1;
        static constexpr int32_t PartitionMultiplier = 2;
        System::Collections::Generic::IEnumerable2<T>* source;
        int32_t initialPartitionSize;
        int32_t partitionMultiplier;
        
        void constructor(System::Collections::Generic::IEnumerable2<T>* source);
        void constructor(System::Collections::Generic::IEnumerable2<T>* source, int32_t initialPartitionSize, int32_t partitionMultiplier);
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>*>* GetOrderablePartitions_abc13b50067e2c56(int32_t partitionCount) override;
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>* GetPartitionEnumeratorSimple(System::Collections::Generic::IEnumerator2<T>* src, PartitionerState<T>* state, bool last);
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>* GetPartitionEnumerator(System::Collections::Generic::IEnumerator2<T>* src, PartitionerState<T>* state);
        
    };
    
    
    template<class T> struct MANAGED_API Range : public virtual System::Object{
        int32_t Actual;
        int32_t LastIndex;
        
        void constructor(int32_t frm, int32_t lastIndex);
        
    };
    
    
    template<class T> struct MANAGED_API ListPartitioner : public virtual System::Collections::Concurrent::OrderablePartitioner<T>{
        System::Collections::Generic::IList2<T>* source;
        
        void constructor(System::Collections::Generic::IList2<T>* source);
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>*>* GetOrderablePartitions_abc13b50067e2c56(int32_t partitionCount) override;
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>* GetEnumeratorForRange(cli::array<Range<T>*>* ranges, int32_t workerIndex);
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>* GetEmpty();
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, T>>* GetEnumeratorForRangeInternal(cli::array<Range<T>*>* ranges, int32_t workerIndex);
        
    };
    
    
    struct MANAGED_API UserRangePartitioner : public virtual System::Collections::Concurrent::OrderablePartitioner<System::Tuple4<int32_t, int32_t>*>{
        int32_t start;
        int32_t end;
        int32_t rangeSize;
        
        void constructor(int32_t start, int32_t end, int32_t rangeSize);
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, System::Tuple4<int32_t, int32_t>*>>*>* GetOrderablePartitions_abc13b50067e2c56(int32_t partitionCount) override;
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, System::Tuple4<int32_t, int32_t>*>>* GetEnumerator(System::Func<int32_t>* getNextIndex);
        
    };
    
    
    struct MANAGED_API UserLongRangePartitioner : public virtual System::Collections::Concurrent::OrderablePartitioner<System::Tuple4<int64_t, int64_t>*>{
        int64_t start;
        int64_t end;
        int64_t rangeSize;
        
        void constructor(int64_t start, int64_t end, int64_t rangeSize);
        virtual System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, System::Tuple4<int64_t, int64_t>*>>*>* GetOrderablePartitions_abc13b50067e2c56(int32_t partitionCount) override;
        System::Collections::Generic::IEnumerator2<System::Collections::Generic::KeyValuePair<int64_t, System::Tuple4<int64_t, int64_t>*>>* GetEnumerator(System::Func<int64_t>* getNextIndex);
        
    };
    
}}}}
namespace System { namespace Collections { namespace Generic {
    
    template<class T> struct MANAGED_API CollectionDebuggerView2 : public virtual System::Object{
        ICollection2<T>* c;
        
        void constructor(ICollection2<T>* col);
        cli::array<T>* get_Items();
        
    };
    
    
    template<class T, class U> struct MANAGED_API CollectionDebuggerView3 : public virtual System::Object{
        ICollection2<KeyValuePair<T, U>>* c;
        
        void constructor(ICollection2<KeyValuePair<T, U>>* col);
        cli::array<KeyValuePair<T, U>>* get_Items();
        
    };
    
    
    template<class T> struct MANAGED_API DefaultComparer : public virtual Comparer2<T>{
        
        void constructor();
        virtual int32_t Compare_1b044eff3abea0d9(T x, T y) override;
        
    };
    
    
    template<class T> struct MANAGED_API Comparer2 : public virtual System::Object, public virtual IComparer2<T>, public virtual System::Collections::IComparer{
        static Comparer2<T>* _default;
        
        Comparer2();
        void constructor();
        static void static_constructor();
        virtual int32_t Compare_1b044eff3abea0d9(T x, T y) = 0;
        int32_t Compare2(System::Object* x, System::Object* y);
        static Comparer2<T>* get_Default();
        
        virtual int32_t Compare_5902559f67a8cefa(T x, T y) override;
        virtual int32_t Compare_451fd276747b629d(System::Object* x, System::Object* y) override;
    };
    
    
    template<class T> struct MANAGED_API GenericComparer : public virtual Comparer2<T>{
        
        void constructor();
        virtual int32_t Compare_1b044eff3abea0d9(T x, T y) override;
        
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API ShimEnumerator : public virtual System::Object, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        Enumerator4<TKey, TValue> host_enumerator;
        
        void constructor(Dictionary<TKey, TValue>* host);
        void Dispose();
        bool MoveNext();
        void Reset();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        System::Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API KeyCollection : public virtual System::Object, public virtual ICollection2<TKey>, public virtual IEnumerable2<TKey>, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        Dictionary<TKey, TValue>* dictionary;
        
        void constructor(Dictionary<TKey, TValue>* dictionary);
        void CopyTo(cli::array<TKey>* array, int32_t index);
        Enumerator5<TKey, TValue> GetEnumerator();
        void Add(TKey item);
        void Clear();
        bool Contains(TKey item);
        bool Remove(TKey item);
        IEnumerator2<TKey>* GetEnumerator2();
        void CopyTo2(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator3();
        int32_t get_Count();
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        
        virtual void CopyTo_e6884c04285bc976(cli::array<TKey>* array, int32_t index) override;
        virtual void Add_a6fc54bc2aa3c029(TKey item) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual bool Contains_ca946a648e63e62e(TKey item) override;
        virtual bool Remove_67948971902d0cce(TKey item) override;
        virtual IEnumerator2<TKey>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API ValueCollection : public virtual System::Object, public virtual ICollection2<TValue>, public virtual IEnumerable2<TValue>, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        Dictionary<TKey, TValue>* dictionary;
        
        void constructor(Dictionary<TKey, TValue>* dictionary);
        void CopyTo(cli::array<TValue>* array, int32_t index);
        Enumerator6<TKey, TValue> GetEnumerator();
        void Add(TValue item);
        void Clear();
        bool Contains(TValue item);
        bool Remove(TValue item);
        IEnumerator2<TValue>* GetEnumerator2();
        void CopyTo2(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator3();
        int32_t get_Count();
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        
        virtual void CopyTo_e6884c04285bc976(cli::array<TValue>* array, int32_t index) override;
        virtual void Add_a6fc54bc2aa3c029(TValue item) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual bool Contains_ca946a648e63e62e(TValue item) override;
        virtual bool Remove_67948971902d0cce(TValue item) override;
        virtual IEnumerator2<TValue>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API Dictionary : public virtual System::Object, public virtual IDictionary2<TKey, TValue>, public virtual System::Collections::IDictionary, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual ICollection2<KeyValuePair<TKey, TValue>>, public virtual IEnumerable2<KeyValuePair<TKey, TValue>>, public virtual System::Collections::IEnumerable, public virtual System::Collections::ICollection{
        static constexpr int32_t INITIAL_SIZE = 10;
        static constexpr float DEFAULT_LOAD_FACTOR = 0.9f;
        static constexpr int32_t NO_SLOT = -1;
        static constexpr int32_t HASH_FLAG = -2147483648;
        cli::array<int32_t>* table;
        cli::array<Link>* linkSlots;
        cli::array<TKey>* keySlots;
        cli::array<TValue>* valueSlots;
        IEqualityComparer2<TKey>* hcp;
        System::Runtime::Serialization::SerializationInfo* serialization_info;
        int32_t touchedSlots;
        int32_t emptySlot;
        int32_t count;
        int32_t threshold;
        int32_t generation;
        
        void constructor();
        void constructor(IEqualityComparer2<TKey>* comparer);
        void constructor(IDictionary2<TKey, TValue>* dictionary);
        void constructor(int32_t capacity);
        void constructor(IDictionary2<TKey, TValue>* dictionary, IEqualityComparer2<TKey>* comparer);
        void constructor(int32_t capacity, IEqualityComparer2<TKey>* comparer);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void Init(int32_t capacity, IEqualityComparer2<TKey>* hcp);
        void InitArrays(int32_t size);
        void CopyToCheck(System::Array* array, int32_t index);
        void CopyKeys(cli::array<TKey>* array, int32_t index);
        void CopyValues(cli::array<TValue>* array, int32_t index);
        static KeyValuePair<TKey, TValue> make_pair(TKey key, TValue value);
        static TKey pick_key(TKey key, TValue value);
        static TValue pick_value(TKey key, TValue value);
        void CopyTo(cli::array<KeyValuePair<TKey, TValue>>* array, int32_t index);
        template<class TRet>
        void Do_ICollectionCopyTo_1(System::Array* array, int32_t index, Transform<TKey, TValue, TRet>* transform);
        void Resize();
        void Add(TKey key, TValue value);
        void Clear();
        bool ContainsKey(TKey key);
        bool ContainsValue(TValue value);
        virtual void GetObjectData_15c552da9e393b6(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void OnDeserialization_b298596fbc47c46f(System::Object* sender);
        bool Remove(TKey key);
        bool TryGetValue(TKey key, TValue value);
        static TKey ToTKey(System::Object* key);
        static TValue ToTValue(System::Object* value);
        void Add2(System::Object* key, System::Object* value);
        bool Contains(System::Object* key);
        void Remove2(System::Object* key);
        void Add3(KeyValuePair<TKey, TValue> keyValuePair);
        bool Contains2(KeyValuePair<TKey, TValue> keyValuePair);
        void CopyTo2(cli::array<KeyValuePair<TKey, TValue>>* array, int32_t index);
        bool Remove3(KeyValuePair<TKey, TValue> keyValuePair);
        bool ContainsKeyValuePair(KeyValuePair<TKey, TValue> pair);
        void CopyTo3(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator();
        IEnumerator2<KeyValuePair<TKey, TValue>>* GetEnumerator2();
        System::Collections::IDictionaryEnumerator* GetEnumerator3();
        Enumerator4<TKey, TValue> GetEnumerator4();
        int32_t get_Count();
        TValue get_Item(TKey key);
        TValue set_Item(TKey key, TValue value);
        IEqualityComparer2<TKey>* get_Comparer();
        ICollection2<TKey>* get_Keys();
        ICollection2<TValue>* get_Values();
        KeyCollection<TKey, TValue>* get_Keys2();
        ValueCollection<TKey, TValue>* get_Values2();
        System::Collections::ICollection* get_Keys3();
        System::Collections::ICollection* get_Values3();
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        System::Object* get_Item2(System::Object* key);
        System::Object* set_Item2(System::Object* key, System::Object* value);
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        bool get_IsReadOnly2();
        
        virtual void Add_98fd6232ab01b789(TKey key, TValue value) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool ContainsKey_6b27cc7fbf3d0673(TKey key) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual bool Remove_6b6ef63eca7c3783(TKey key) override;
        virtual bool TryGetValue_ce9f0a16d22fc3a7(TKey key, TValue value) override;
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* key) override;
        virtual void Remove_f212b96e00d6aaed(System::Object* key) override;
        virtual void Add_a6fc54bc2aa3c029(KeyValuePair<TKey, TValue> keyValuePair) override;
        virtual bool Contains_ca946a648e63e62e(KeyValuePair<TKey, TValue> keyValuePair) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<KeyValuePair<TKey, TValue>>* array, int32_t index) override;
        virtual bool Remove_67948971902d0cce(KeyValuePair<TKey, TValue> keyValuePair) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual IEnumerator2<KeyValuePair<TKey, TValue>>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual TValue get_Item_6184d8d494c06347(TKey key) override;
        virtual TValue set_Item_9efe7d5d7f862add(TKey key, TValue value) override;
        virtual ICollection2<TKey>* get_Keys_2b6b38d6f5ec99fa() override;
        virtual ICollection2<TValue>* get_Values_9c050b7765e02952() override;
        virtual System::Collections::ICollection* get_Keys_d809cadac60b140a() override;
        virtual System::Collections::ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
    };
    
    
    template<class T> struct MANAGED_API DefaultComparer2 : public virtual EqualityComparer<T>{
        
        void constructor();
        virtual int32_t GetHashCode_f61694b39bec824d(T obj) override;
        virtual bool Equals_e786aaeef5b10ff2(T x, T y) override;
        
    };
    
    
    template<class T> struct MANAGED_API EqualityComparer : public virtual System::Object, public virtual System::Collections::IEqualityComparer, public virtual IEqualityComparer2<T>{
        static EqualityComparer<T>* _default;
        
        EqualityComparer();
        static void static_constructor();
        void constructor();
        virtual int32_t GetHashCode_f61694b39bec824d(T obj) = 0;
        virtual bool Equals_e786aaeef5b10ff2(T x, T y) = 0;
        int32_t GetHashCode3(System::Object* obj);
        bool Equals4(System::Object* x, System::Object* y);
        static EqualityComparer<T>* get_Default();
        
        virtual int32_t GetHashCode_74f46a6b01295dbe(T obj) override;
        virtual bool Equals_f783e5e22b72a1c0(T x, T y) override;
        virtual int32_t GetHashCode_f8793dfb2b096a5a(System::Object* obj) override;
        virtual bool Equals_ad190887ea91ded(System::Object* x, System::Object* y) override;
    };
    
    
    struct MANAGED_API InternalStringComparer : public virtual EqualityComparer<System::String*>{
        
        void constructor();
        virtual int32_t GetHashCode_f61694b39bec824d(System::String* obj) override;
        virtual bool Equals_e786aaeef5b10ff2(System::String* x, System::String* y) override;
        
    };
    
    
    template<class T> struct MANAGED_API GenericEqualityComparer : public virtual EqualityComparer<T>{
        
        void constructor();
        virtual int32_t GetHashCode_f61694b39bec824d(T obj) override;
        virtual bool Equals_e786aaeef5b10ff2(T x, T y) override;
        
    };
    
    
    struct MANAGED_API KeyNotFoundException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    template<class T> struct MANAGED_API List : public virtual System::Object, public virtual IList2<T>, public virtual System::Collections::IList, public virtual ICollection2<T>, public virtual IEnumerable2<T>, public virtual System::Collections::IEnumerable, public virtual System::Collections::ICollection{
        static constexpr int32_t DefaultCapacity = 4;
        cli::array<T>* _items;
        int32_t _size;
        int32_t _version;
        static cli::array<T>* EmptyArray;
        
        List();
        void constructor();
        void constructor(IEnumerable2<T>* collection);
        void constructor(int32_t capacity);
        void constructor(cli::array<T>* data, int32_t size);
        static void static_constructor();
        void Add(T item);
        void GrowIfNeeded(int32_t newCount);
        void CheckRange(int32_t idx, int32_t count);
        void AddCollection(ICollection2<T>* collection);
        void AddEnumerable(IEnumerable2<T>* enumerable);
        void AddRange(IEnumerable2<T>* collection);
        System::Collections::ObjectModel::ReadOnlyCollection<T>* AsReadOnly();
        int32_t BinarySearch(T item);
        int32_t BinarySearch2(T item, IComparer2<T>* comparer);
        int32_t BinarySearch3(int32_t index, int32_t count, T item, IComparer2<T>* comparer);
        void Clear();
        bool Contains(T item);
        template<class TOutput>
        List<TOutput>* ConvertAll_1(System::Converter<T, TOutput>* converter);
        void CopyTo(cli::array<T>* array);
        void CopyTo2(cli::array<T>* array, int32_t arrayIndex);
        void CopyTo3(int32_t index, cli::array<T>* array, int32_t arrayIndex, int32_t count);
        bool Exists(System::Predicate<T>* match);
        T Find(System::Predicate<T>* match);
        static void CheckMatch(System::Predicate<T>* match);
        List<T>* FindAll(System::Predicate<T>* match);
        List<T>* FindAllStackBits(System::Predicate<T>* match);
        List<T>* FindAllList(System::Predicate<T>* match);
        int32_t FindIndex(System::Predicate<T>* match);
        int32_t FindIndex2(int32_t startIndex, System::Predicate<T>* match);
        int32_t FindIndex3(int32_t startIndex, int32_t count, System::Predicate<T>* match);
        int32_t GetIndex(int32_t startIndex, int32_t count, System::Predicate<T>* match);
        T FindLast(System::Predicate<T>* match);
        int32_t FindLastIndex(System::Predicate<T>* match);
        int32_t FindLastIndex2(int32_t startIndex, System::Predicate<T>* match);
        int32_t FindLastIndex3(int32_t startIndex, int32_t count, System::Predicate<T>* match);
        int32_t GetLastIndex(int32_t startIndex, int32_t count, System::Predicate<T>* match);
        void ForEach(System::Action2<T>* action);
        Enumerator7<T> GetEnumerator();
        List<T>* GetRange(int32_t index, int32_t count);
        int32_t IndexOf(T item);
        int32_t IndexOf2(T item, int32_t index);
        int32_t IndexOf3(T item, int32_t index, int32_t count);
        void Shift(int32_t start, int32_t delta);
        void CheckIndex(int32_t index);
        void Insert(int32_t index, T item);
        void InsertRange(int32_t index, IEnumerable2<T>* collection);
        void InsertCollection(int32_t index, ICollection2<T>* collection);
        void InsertEnumeration(int32_t index, IEnumerable2<T>* enumerable);
        int32_t LastIndexOf(T item);
        int32_t LastIndexOf2(T item, int32_t index);
        int32_t LastIndexOf3(T item, int32_t index, int32_t count);
        bool Remove(T item);
        int32_t RemoveAll(System::Predicate<T>* match);
        void RemoveAt(int32_t index);
        void RemoveRange(int32_t index, int32_t count);
        void Reverse();
        void Reverse2(int32_t index, int32_t count);
        void Sort();
        void Sort2(IComparer2<T>* comparer);
        void Sort3(System::Comparison<T>* comparison);
        void Sort4(int32_t index, int32_t count, IComparer2<T>* comparer);
        cli::array<T>* ToArray();
        void TrimExcess();
        bool TrueForAll(System::Predicate<T>* match);
        IEnumerator2<T>* GetEnumerator2();
        void CopyTo4(System::Array* array, int32_t arrayIndex);
        System::Collections::IEnumerator* GetEnumerator3();
        int32_t Add2(System::Object* item);
        bool Contains2(System::Object* item);
        int32_t IndexOf4(System::Object* item);
        void Insert2(int32_t index, System::Object* item);
        void Remove2(System::Object* item);
        int32_t get_Capacity();
        int32_t set_Capacity(int32_t value);
        int32_t get_Count();
        T get_Item(int32_t index);
        T set_Item(int32_t index, T value);
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        bool get_IsFixedSize();
        bool get_IsReadOnly2();
        System::Object* get_Item2(int32_t index);
        System::Object* set_Item2(int32_t index, System::Object* value);
        
        virtual void Add_a6fc54bc2aa3c029(T item) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_ca946a648e63e62e(T item) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<T>* array, int32_t arrayIndex) override;
        virtual int32_t IndexOf_9e82d7c34bb82d25(T item) override;
        virtual void Insert_d9ae15974e481e9e(int32_t index, T item) override;
        virtual bool Remove_67948971902d0cce(T item) override;
        virtual void RemoveAt_92d07238fa433d4a(int32_t index) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t arrayIndex) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* item) override;
        virtual bool Contains_2a2192a595869f4e(System::Object* item) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* item) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* item) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* item) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual T get_Item_e6c1a54cb8f591e7(int32_t index) override;
        virtual T set_Item_13ad50de181a1c01(int32_t index, T value) override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
}}}
namespace System { namespace Collections { namespace ObjectModel {
    
    template<class T> struct MANAGED_API Collection : public virtual System::Object, public virtual System::Collections::Generic::IList2<T>, public virtual System::Collections::IList, public virtual System::Collections::Generic::ICollection2<T>, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::IEnumerable, public virtual System::Collections::ICollection{
        System::Collections::Generic::IList2<T>* list;
        System::Object* syncRoot;
        
        void constructor();
        void constructor(System::Collections::Generic::IList2<T>* list);
        void Add(T item);
        void Clear();
        virtual void ClearItems_2bead28bfee60c73();
        bool Contains(T item);
        void CopyTo(cli::array<T>* array, int32_t index);
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator();
        int32_t IndexOf(T item);
        void Insert(int32_t index, T item);
        virtual void InsertItem_30de9292a784d6bb(int32_t index, T item);
        bool Remove(T item);
        void RemoveAt(int32_t index);
        virtual void RemoveItem_7622edc394af89c9(int32_t index);
        virtual void SetItem_a7062d77a0b1825b(int32_t index, T item);
        static bool IsValidItem(System::Object* item);
        static T ConvertItem(System::Object* item);
        static void CheckWritable(System::Collections::Generic::IList2<T>* list);
        static bool IsSynchronized(System::Collections::Generic::IList2<T>* list);
        static bool IsFixedSize(System::Collections::Generic::IList2<T>* list);
        void CopyTo2(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator2();
        int32_t Add2(System::Object* value);
        bool Contains2(System::Object* value);
        int32_t IndexOf2(System::Object* value);
        void Insert2(int32_t index, System::Object* value);
        void Remove2(System::Object* value);
        System::Collections::Generic::IList2<T>* get_Items();
        int32_t get_Count();
        T get_Item(int32_t index);
        T set_Item(int32_t index, T value);
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        bool get_IsFixedSize();
        bool get_IsReadOnly2();
        System::Object* get_Item2(int32_t index);
        System::Object* set_Item2(int32_t index, System::Object* value);
        
        virtual void Add_a6fc54bc2aa3c029(T item) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_ca946a648e63e62e(T item) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<T>* array, int32_t index) override;
        virtual System::Collections::Generic::IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual int32_t IndexOf_9e82d7c34bb82d25(T item) override;
        virtual void Insert_d9ae15974e481e9e(int32_t index, T item) override;
        virtual bool Remove_67948971902d0cce(T item) override;
        virtual void RemoveAt_92d07238fa433d4a(int32_t index) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual T get_Item_e6c1a54cb8f591e7(int32_t index) override;
        virtual T set_Item_13ad50de181a1c01(int32_t index, T value) override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
    
    template<class TKey, class TItem> struct MANAGED_API KeyedCollection : public virtual Collection<TItem>{
        System::Collections::Generic::Dictionary<TKey, TItem>* dictionary;
        System::Collections::Generic::IEqualityComparer2<TKey>* comparer;
        int32_t dictionaryCreationThreshold;
        
        void constructor();
        void constructor(System::Collections::Generic::IEqualityComparer2<TKey>* comparer);
        void constructor(System::Collections::Generic::IEqualityComparer2<TKey>* comparer, int32_t dictionaryCreationThreshold);
        bool Contains3(TKey key);
        int32_t IndexOfKey(TKey key);
        bool Remove3(TKey key);
        void ChangeItemKey(TItem item, TKey newKey);
        virtual void ClearItems_2bead28bfee60c73() override;
        virtual TKey GetKeyForItem_61f71d2768095475(TItem item) = 0;
        virtual void InsertItem_30de9292a784d6bb(int32_t index, TItem item) override;
        virtual void RemoveItem_7622edc394af89c9(int32_t index) override;
        virtual void SetItem_a7062d77a0b1825b(int32_t index, TItem item) override;
        System::Collections::Generic::IEqualityComparer2<TKey>* get_Comparer();
        TItem get_Item3(TKey key);
        System::Collections::Generic::IDictionary2<TKey, TItem>* get_Dictionary();
        
    };
    
    
    template<class T> struct MANAGED_API ReadOnlyCollection : public virtual System::Object, public virtual System::Collections::Generic::IList2<T>, public virtual System::Collections::IList, public virtual System::Collections::Generic::ICollection2<T>, public virtual System::Collections::Generic::IEnumerable2<T>, public virtual System::Collections::IEnumerable, public virtual System::Collections::ICollection{
        System::Collections::Generic::IList2<T>* list;
        
        void constructor(System::Collections::Generic::IList2<T>* list);
        void Add(T item);
        void Clear();
        bool Contains(T value);
        void CopyTo(cli::array<T>* array, int32_t index);
        System::Collections::Generic::IEnumerator2<T>* GetEnumerator();
        int32_t IndexOf(T value);
        void Insert(int32_t index, T item);
        bool Remove(T item);
        void RemoveAt(int32_t index);
        void CopyTo2(System::Array* array, int32_t index);
        System::Collections::IEnumerator* GetEnumerator2();
        int32_t Add2(System::Object* value);
        void Clear2();
        bool Contains2(System::Object* value);
        int32_t IndexOf2(System::Object* value);
        void Insert2(int32_t index, System::Object* value);
        void Remove2(System::Object* value);
        void RemoveAt2(int32_t index);
        int32_t get_Count();
        System::Collections::Generic::IList2<T>* get_Items();
        T get_Item(int32_t index);
        T get_Item2(int32_t index);
        T set_Item(int32_t index, T value);
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        bool get_IsFixedSize();
        bool get_IsReadOnly2();
        System::Object* get_Item3(int32_t index);
        System::Object* set_Item2(int32_t index, System::Object* value);
        
        virtual void Add_a6fc54bc2aa3c029(T item) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual bool Contains_ca946a648e63e62e(T value) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<T>* array, int32_t index) override;
        virtual System::Collections::Generic::IEnumerator2<T>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual int32_t IndexOf_9e82d7c34bb82d25(T value) override;
        virtual void Insert_d9ae15974e481e9e(int32_t index, T item) override;
        virtual bool Remove_67948971902d0cce(T item) override;
        virtual void RemoveAt_92d07238fa433d4a(int32_t index) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t Add_985508e3bf9b7a73(System::Object* value) override;
        virtual void Clear_e0ee496065507a2f() override;
        virtual bool Contains_2a2192a595869f4e(System::Object* value) override;
        virtual int32_t IndexOf_7f6d78d7aa6d53e5(System::Object* value) override;
        virtual void Insert_16e8bd69dfc603f4(int32_t index, System::Object* value) override;
        virtual void Remove_69f1b1e57bb34112(System::Object* value) override;
        virtual void RemoveAt_dce190584913328b(int32_t index) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual T get_Item_e6c1a54cb8f591e7(int32_t index) override;
        virtual T set_Item_13ad50de181a1c01(int32_t index, T value) override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
        virtual bool get_IsFixedSize_4d3eaee3435ee591() override;
        virtual bool get_IsReadOnly_53b6e02d46187790() override;
        virtual System::Object* get_Item_8550d21996ef9dc5(int32_t index) override;
        virtual System::Object* set_Item_d57705373e0668e7(int32_t index, System::Object* value) override;
    };
    
}}}
namespace System { namespace Deployment { namespace Internal {
    
    struct MANAGED_API InternalActivationContextHelper : public virtual System::Object{
        
        static System::Object* GetActivationContextData(System::ActivationContext* appInfo);
        static System::Object* GetApplicationComponentManifest(System::ActivationContext* appInfo);
        static cli::array<unsigned char>* GetApplicationManifestBytes(System::ActivationContext* appInfo);
        static System::Object* GetDeploymentComponentManifest(System::ActivationContext* appInfo);
        static cli::array<unsigned char>* GetDeploymentManifestBytes(System::ActivationContext* appInfo);
        static bool IsFirstRun(System::ActivationContext* appInfo);
        static void PrepareForExecution(System::ActivationContext* appInfo);
        
    };
    
    
    struct MANAGED_API InternalApplicationIdentityHelper : public virtual System::Object{
        
        static System::Object* GetInternalAppId(System::ApplicationIdentity* id);
        
    };
    
}}}
namespace System { namespace Diagnostics {
    
    struct MANAGED_API ConditionalAttribute : public virtual System::Attribute{
        System::String* myCondition;
        
        void constructor(System::String* conditionString);
        System::String* get_ConditionString();
        
    };
    
    
    struct MANAGED_API DebuggableAttribute : public virtual System::Attribute{
        bool JITTrackingEnabledFlag;
        bool JITOptimizerDisabledFlag;
        DebuggingModes debuggingModes;
        
        void constructor(bool isJITTrackingEnabled, bool isJITOptimizerDisabled);
        void constructor(DebuggingModes modes);
        DebuggingModes get_DebuggingFlags();
        bool get_IsJITTrackingEnabled();
        bool get_IsJITOptimizerDisabled();
        
    };
    
    
    struct MANAGED_API Debugger : public virtual System::Object{
        static System::String* DefaultCategory;
        
        Debugger();
        void constructor();
        static void static_constructor();
        static bool IsAttached_internal();
        static void Break();
        static bool IsLogging();
        static bool Launch();
        static void Log(int32_t level, System::String* category, System::String* message);
        static bool get_IsAttached();
        
    };
    
    
    struct MANAGED_API DebuggerBrowsableAttribute : public virtual System::Attribute{
        DebuggerBrowsableState state;
        
        void constructor(DebuggerBrowsableState state);
        DebuggerBrowsableState get_State();
        
    };
    
    
    struct MANAGED_API DebuggerDisplayAttribute : public virtual System::Attribute{
        System::String* value;
        System::String* target_type_name;
        System::Type* target_type;
        System::String* type;
        System::String* name;
        
        void constructor(System::String* value);
        System::String* get_Value();
        System::Type* get_Target();
        System::Type* set_Target(System::Type* value);
        System::String* get_TargetTypeName();
        System::String* set_TargetTypeName(System::String* value);
        System::String* get_Type();
        System::String* set_Type(System::String* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        
    };
    
    
    struct MANAGED_API DebuggerHiddenAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DebuggerNonUserCodeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DebuggerStepperBoundaryAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DebuggerStepThroughAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DebuggerTypeProxyAttribute : public virtual System::Attribute{
        System::String* proxy_type_name;
        System::String* target_type_name;
        System::Type* target_type;
        
        void constructor(System::String* typeName);
        void constructor(System::Type* type);
        System::String* get_ProxyTypeName();
        System::Type* get_Target();
        System::Type* set_Target(System::Type* value);
        System::String* get_TargetTypeName();
        System::String* set_TargetTypeName(System::String* value);
        
    };
    
    
    struct MANAGED_API DebuggerVisualizerAttribute : public virtual System::Attribute{
        System::String* description;
        System::String* visualizerSourceName;
        System::String* visualizerName;
        System::String* targetTypeName;
        System::Type* target;
        
        void constructor(System::String* visualizerTypeName);
        void constructor(System::Type* visualizer);
        void constructor(System::String* visualizerTypeName, System::String* visualizerObjectSourceTypeName);
        void constructor(System::String* visualizerTypeName, System::Type* visualizerObjectSource);
        void constructor(System::Type* visualizer, System::String* visualizerObjectSourceTypeName);
        void constructor(System::Type* visualizer, System::Type* visualizerObjectSource);
        System::String* get_Description();
        System::String* set_Description(System::String* value);
        System::Type* get_Target();
        System::Type* set_Target(System::Type* value);
        System::String* get_TargetTypeName();
        System::String* set_TargetTypeName(System::String* value);
        System::String* get_VisualizerObjectSourceTypeName();
        System::String* get_VisualizerTypeName();
        
    };
    
    
    struct MANAGED_API StackFrame : public virtual System::Object{
        static constexpr int32_t OFFSET_UNKNOWN = -1;
        int32_t ilOffset;
        int32_t nativeOffset;
        System::Reflection::MethodBase* methodBase;
        System::String* fileName;
        int32_t lineNumber;
        int32_t columnNumber;
        System::String* internalMethodName;
        
        void constructor();
        void constructor(bool fNeedFileInfo);
        void constructor(int32_t skipFrames);
        void constructor(int32_t skipFrames, bool fNeedFileInfo);
        void constructor(System::String* fileName, int32_t lineNumber);
        void constructor(System::String* fileName, int32_t lineNumber, int32_t colNumber);
        static bool get_frame_info(int32_t skip, bool needFileInfo, System::Reflection::MethodBase* method, int32_t iloffset, int32_t native_offset, System::String* file, int32_t line, int32_t column);
        virtual int32_t GetFileLineNumber_55fe214715732be8();
        virtual int32_t GetFileColumnNumber_4d47ac0b355aa095();
        virtual System::String* GetFileName_a639782e0c46ed4e();
        System::String* GetSecureFileName();
        virtual int32_t GetILOffset_3f696258d4f94ef6();
        virtual System::Reflection::MethodBase* GetMethod_c520bf4862e6a796();
        virtual int32_t GetNativeOffset_bd54530a35fdb2cf();
        System::String* GetInternalMethodName();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API StackTrace : public virtual System::Object{
        static constexpr int32_t METHODS_TO_SKIP = 0;
        cli::array<StackFrame*>* frames;
        bool debug_info;
        
        void constructor();
        void constructor(bool fNeedFileInfo);
        void constructor(int32_t skipFrames);
        void constructor(int32_t skipFrames, bool fNeedFileInfo);
        void constructor(System::Exception* e);
        void constructor(System::Exception* e, bool fNeedFileInfo);
        void constructor(System::Exception* e, int32_t skipFrames);
        void constructor(System::Exception* e, int32_t skipFrames, bool fNeedFileInfo);
        void constructor(System::Exception* e, int32_t skipFrames, bool fNeedFileInfo, bool returnNativeFrames);
        void constructor(StackFrame* frame);
        void constructor(System::Threading::Thread* targetThread, bool needFileInfo);
        void init_frames(int32_t skipFrames, bool fNeedFileInfo);
        static cli::array<StackFrame*>* get_trace(System::Exception* e, int32_t skipFrames, bool fNeedFileInfo);
        virtual StackFrame* GetFrame_e0dab4b211315370(int32_t index);
        virtual cli::array<StackFrame*>* GetFrames_ffdb22808b4e738a();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual int32_t get_FrameCount_3360fc636a0e470d();
        
    };
    
}}
namespace System { namespace Diagnostics { namespace CodeAnalysis {
    
    struct MANAGED_API SuppressMessageAttribute : public virtual System::Attribute{
        System::String* category;
        System::String* checkId;
        System::String* justification;
        System::String* messageId;
        System::String* scope;
        System::String* target;
        
        void constructor(System::String* category, System::String* checkId);
        System::String* get_Category();
        System::String* get_CheckId();
        System::String* get_Justification();
        System::String* set_Justification(System::String* value);
        System::String* get_MessageId();
        System::String* set_MessageId(System::String* value);
        System::String* get_Scope();
        System::String* set_Scope(System::String* value);
        System::String* get_Target();
        System::String* set_Target(System::String* value);
        
    };
    
}}}
namespace System { namespace Diagnostics { namespace Contracts {
    
    struct MANAGED_API Contract : public virtual System::Object{
        static System::EventHandler2<ContractFailedEventArgs*>* ContractFailed;
        
        static System::Type* GetContractExceptionType();
        static System::Type* GetContractShouldAssertExceptionType();
        static void ReportFailure(ContractFailureKind kind, System::String* userMessage, System::String* conditionText, System::Exception* innerException);
        static void AssertMustUseRewriter(ContractFailureKind kind, System::String* message);
        static void Assert(bool condition);
        static void Assert2(bool condition, System::String* userMessage);
        static void Assume(bool condition);
        static void Assume2(bool condition, System::String* userMessage);
        static void EndContractBlock();
        static void Ensures(bool condition);
        static void Ensures2(bool condition, System::String* userMessage);
        template<class TException>
        static void EnsuresOnThrow_1(bool condition);
        template<class TException>
        static void EnsuresOnThrow_12(bool condition, System::String* userMessage);
        template<class T>
        static bool Exists_1(System::Collections::Generic::IEnumerable2<T>* collection, System::Predicate<T>* predicate);
        static bool Exists(int32_t fromInclusive, int32_t toExclusive, System::Predicate<int32_t>* predicate);
        template<class T>
        static bool ForAll_1(System::Collections::Generic::IEnumerable2<T>* collection, System::Predicate<T>* predicate);
        static bool ForAll(int32_t fromInclusive, int32_t toExclusive, System::Predicate<int32_t>* predicate);
        static void Invariant(bool condition);
        static void Invariant2(bool condition, System::String* userMessage);
        template<class T>
        static T OldValue_1(T value);
        static void Requires(bool condition);
        static void Requires2(bool condition, System::String* userMessage);
        template<class TException>
        static void Requires_1(bool condition);
        template<class TException>
        static void Requires_12(bool condition, System::String* userMessage);
        template<class T>
        static T Result_1();
        template<class T>
        static T ValueAtReturn_1(T value);
        static System::EventHandler2<ContractFailedEventArgs*>* get_InternalContractFailedEvent();
        static void add_ContractFailed(System::EventHandler2<ContractFailedEventArgs*>* value);
        static void remove_ContractFailed(System::EventHandler2<ContractFailedEventArgs*>* value);
        
    };
    
    
    struct MANAGED_API ContractClassAttribute : public virtual System::Attribute{
        System::Type* type;
        
        void constructor(System::Type* typeContainingContracts);
        System::Type* get_TypeContainingContracts();
        
    };
    
    
    struct MANAGED_API ContractClassForAttribute : public virtual System::Attribute{
        System::Type* type;
        
        void constructor(System::Type* typeContractsAreFor);
        System::Type* get_TypeContractsAreFor();
        
    };
    
    
    struct MANAGED_API ContractException : public virtual System::Exception{
        System::String* _Failure_k__BackingField;
        ContractFailureKind _Kind_k__BackingField;
        System::String* _Condition_k__BackingField;
        System::String* _UserMessage_k__BackingField;
        
        void constructor(System::String* failure, ContractFailureKind kind, System::String* condition, System::String* userMessage, System::Exception* innerException);
        System::String* get_Failure();
        System::String* set_Failure(System::String* value);
        ContractFailureKind get_Kind();
        ContractFailureKind set_Kind(ContractFailureKind value);
        System::String* get_Condition();
        System::String* set_Condition(System::String* value);
        System::String* get_UserMessage();
        System::String* set_UserMessage(System::String* value);
        
    };
    
    
    struct MANAGED_API ContractFailedEventArgs : public virtual System::EventArgs{
        System::String* _Condition_k__BackingField;
        ContractFailureKind _FailureKind_k__BackingField;
        bool _Handled_k__BackingField;
        bool _Unwind_k__BackingField;
        System::String* _Message_k__BackingField;
        System::Exception* _OriginalException_k__BackingField;
        
        void constructor(ContractFailureKind failureKind, System::String* message, System::String* condition, System::Exception* originalException);
        void SetHandled();
        void SetUnwind();
        System::String* get_Condition();
        System::String* set_Condition(System::String* value);
        ContractFailureKind get_FailureKind();
        ContractFailureKind set_FailureKind(ContractFailureKind value);
        bool get_Handled();
        bool set_Handled(bool value);
        bool get_Unwind();
        bool set_Unwind(bool value);
        System::String* get_Message();
        System::String* set_Message(System::String* value);
        System::Exception* get_OriginalException();
        System::Exception* set_OriginalException(System::Exception* value);
        
    };
    
    
    struct MANAGED_API ContractInvariantMethodAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ContractPublicPropertyNameAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* name);
        System::String* get_Name();
        
    };
    
    
    struct MANAGED_API ContractReferenceAssemblyAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ContractRuntimeIgnoredAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ContractShouldAssertException : public virtual System::Exception{
        
        void constructor(System::String* msg);
        
    };
    
    
    struct MANAGED_API ContractVerificationAttribute : public virtual System::Attribute{
        bool val;
        
        void constructor(bool value);
        bool get_Value();
        
    };
    
    
    struct MANAGED_API PureAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
}}}
namespace System { namespace Diagnostics { namespace Contracts { namespace Internal {
    
    struct MANAGED_API ContractHelper : public virtual System::Object{
        
        static System::String* RaiseContractFailedEvent(System::Diagnostics::Contracts::ContractFailureKind failureKind, System::String* userMessage, System::String* conditionText, System::Exception* innerException);
        static void TriggerFailure(System::Diagnostics::Contracts::ContractFailureKind kind, System::String* displayMessage, System::String* userMessage, System::String* conditionText, System::Exception* innerException);
        
    };
    
}}}}
namespace System { namespace Diagnostics { namespace SymbolStore {
    
    struct MANAGED_API SymDocumentType : public virtual System::Object{
        static System::Guid Text;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SymLanguageType : public virtual System::Object{
        static System::Guid Basic;
        static System::Guid C;
        static System::Guid Cobol;
        static System::Guid CPlusPlus;
        static System::Guid CSharp;
        static System::Guid ILAssembly;
        static System::Guid Java;
        static System::Guid JScript;
        static System::Guid MCPlusPlus;
        static System::Guid Pascal;
        static System::Guid SMC;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SymLanguageVendor : public virtual System::Object{
        static System::Guid Microsoft;
        
        void constructor();
        
    };
    
}}}
namespace System { namespace Globalization {
    
    struct MANAGED_API SortKey : public virtual System::Object{
        System::String* source;
        cli::array<unsigned char>* key;
        CompareOptions options;
        int32_t lcid;
        
        void constructor(int32_t lcid, System::String* source, CompareOptions opt);
        void constructor(int32_t lcid, System::String* source, cli::array<unsigned char>* buffer, CompareOptions opt, int32_t lv1Length, int32_t lv2Length, int32_t lv3Length, int32_t kanaSmallLength, int32_t markTypeLength, int32_t katakanaLength, int32_t kanaWidthLength, int32_t identLength);
        static int32_t Compare(SortKey* sortkey1, SortKey* sortkey2);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::String* get_OriginalString_f4d9253cc39fbcc1();
        virtual cli::array<unsigned char>* get_KeyData_e359e5d060ef0079();
        
    };
    
    
    struct MANAGED_API CCMath : public virtual System::Object{
        
        static double round(double x);
        static double mod(double x, double y);
        static int32_t div(int32_t x, int32_t y);
        static int32_t mod2(int32_t x, int32_t y);
        static int32_t div_mod(int32_t remainder, int32_t x, int32_t y);
        static int32_t signum(double x);
        static int32_t signum2(int32_t x);
        static double amod(double x, double y);
        static int32_t amod2(int32_t x, int32_t y);
        
    };
    
    
    struct MANAGED_API CCFixed : public virtual System::Object{
        
        static System::DateTime ToDateTime(int32_t date);
        static System::DateTime ToDateTime2(int32_t date, int32_t hour, int32_t minute, int32_t second, double milliseconds);
        static int32_t FromDateTime(System::DateTime time);
        static System::DayOfWeek day_of_week(int32_t date);
        static int32_t kday_on_or_before(int32_t date, int32_t k);
        static int32_t kday_on_or_after(int32_t date, int32_t k);
        static int32_t kd_nearest(int32_t date, int32_t k);
        static int32_t kday_after(int32_t date, int32_t k);
        static int32_t kday_before(int32_t date, int32_t k);
        
    };
    
    
    struct MANAGED_API CCGregorianCalendar : public virtual System::Object{
        static constexpr int32_t epoch = 1;
        
        static bool is_leap_year(int32_t year);
        static int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        static int32_t year_from_fixed(int32_t date);
        static void my_from_fixed(int32_t month, int32_t year, int32_t date);
        static void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        static int32_t month_from_fixed(int32_t date);
        static int32_t day_from_fixed(int32_t date);
        static int32_t date_difference(int32_t dayA, int32_t monthA, int32_t yearA, int32_t dayB, int32_t monthB, int32_t yearB);
        static int32_t day_number(int32_t day, int32_t month, int32_t year);
        static int32_t days_remaining(int32_t day, int32_t month, int32_t year);
        static System::DateTime AddMonths(System::DateTime time, int32_t months);
        static System::DateTime AddYears(System::DateTime time, int32_t years);
        static int32_t GetDayOfMonth(System::DateTime time);
        static int32_t GetDayOfYear(System::DateTime time);
        static int32_t GetDaysInMonth(int32_t year, int32_t month);
        static int32_t GetDaysInYear(int32_t year);
        static int32_t GetMonth(System::DateTime time);
        static int32_t GetYear(System::DateTime time);
        static bool IsLeapDay(int32_t year, int32_t month, int32_t day);
        static System::DateTime ToDateTime(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t milliseconds);
        
    };
    
    
    struct MANAGED_API CCJulianCalendar : public virtual System::Object{
        static constexpr int32_t epoch = -1;
        
        static bool is_leap_year(int32_t year);
        static int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        static int32_t year_from_fixed(int32_t date);
        static void my_from_fixed(int32_t month, int32_t year, int32_t date);
        static void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        static int32_t month_from_fixed(int32_t date);
        static int32_t day_from_fixed(int32_t date);
        static int32_t date_difference(int32_t dayA, int32_t monthA, int32_t yearA, int32_t dayB, int32_t monthB, int32_t yearB);
        static int32_t day_number(int32_t day, int32_t month, int32_t year);
        static int32_t days_remaining(int32_t day, int32_t month, int32_t year);
        
    };
    
    
    struct MANAGED_API CCHebrewCalendar : public virtual System::Object{
        static constexpr int32_t epoch = -1373427;
        
        static bool is_leap_year(int32_t year);
        static int32_t last_month_of_year(int32_t year);
        static int32_t elapsed_days(int32_t year);
        static int32_t new_year_delay(int32_t year);
        static int32_t last_day_of_month(int32_t month, int32_t year);
        static bool long_heshvan(int32_t year);
        static bool short_kislev(int32_t year);
        static int32_t days_in_year(int32_t year);
        static int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        static int32_t year_from_fixed(int32_t date);
        static void my_from_fixed(int32_t month, int32_t year, int32_t date);
        static void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        static int32_t month_from_fixed(int32_t date);
        static int32_t day_from_fixed(int32_t date);
        static int32_t date_difference(int32_t dayA, int32_t monthA, int32_t yearA, int32_t dayB, int32_t monthB, int32_t yearB);
        static int32_t day_number(int32_t day, int32_t month, int32_t year);
        static int32_t days_remaining(int32_t day, int32_t month, int32_t year);
        
    };
    
    
    struct MANAGED_API CCHijriCalendar : public virtual System::Object{
        static constexpr int32_t epoch = 227014;
        
        static bool is_leap_year(int32_t year);
        static int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        static int32_t year_from_fixed(int32_t date);
        static void my_from_fixed(int32_t month, int32_t year, int32_t date);
        static void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        static int32_t month_from_fixed(int32_t date);
        static int32_t day_from_fixed(int32_t date);
        static int32_t date_difference(int32_t dayA, int32_t monthA, int32_t yearA, int32_t dayB, int32_t monthB, int32_t yearB);
        static int32_t day_number(int32_t day, int32_t month, int32_t year);
        static int32_t days_remaining(int32_t day, int32_t month, int32_t year);
        
    };
    
    
    struct MANAGED_API CCEastAsianLunisolarCalendar : public virtual System::Object{
        
        void constructor();
        static int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        static int32_t year_from_fixed(int32_t date);
        static void my_from_fixed(int32_t month, int32_t year, int32_t date);
        static void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        static System::DateTime AddMonths(System::DateTime date, int32_t months);
        static System::DateTime AddYears(System::DateTime date, int32_t years);
        static int32_t GetDayOfMonth(System::DateTime date);
        static int32_t GetDayOfYear(System::DateTime date);
        static int32_t GetDaysInMonth(int32_t gyear, int32_t month);
        static int32_t GetDaysInYear(int32_t year);
        static int32_t GetMonth(System::DateTime date);
        static bool IsLeapMonth(int32_t gyear, int32_t month);
        static bool IsLeapYear(int32_t gyear);
        static System::DateTime ToDateTime(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond);
        
    };
    
    
    struct MANAGED_API CCGregorianEraHandler : public virtual System::Object{
        System::Collections::SortedList* _Eras;
        
        void constructor();
        void appendEra(int32_t nr, int32_t rd_start, int32_t rd_end);
        void appendEra2(int32_t nr, int32_t rd_start);
        int32_t GregorianYear(int32_t year, int32_t era);
        int32_t EraYear(int32_t era, int32_t date);
        void CheckDateTime(System::DateTime time);
        bool ValidDate(int32_t date);
        bool ValidEra(int32_t era);
        cli::array<int32_t>* get_Eras();
        
    };
    
    
    struct MANAGED_API CCEastAsianLunisolarEraHandler : public virtual System::Object{
        System::Collections::SortedList* _Eras;
        
        void constructor();
        void appendEra(int32_t nr, int32_t rd_start, int32_t rd_end);
        void appendEra2(int32_t nr, int32_t rd_start);
        int32_t GregorianYear(int32_t year, int32_t era);
        int32_t EraYear(int32_t era, int32_t date);
        void CheckDateTime(System::DateTime time);
        bool ValidDate(int32_t date);
        bool ValidEra(int32_t era);
        cli::array<int32_t>* get_Eras();
        
    };
    
    
    struct MANAGED_API CharUnicodeInfo : public virtual System::Object{
        
        static int32_t GetDecimalDigitValue(char16_t ch);
        static int32_t GetDecimalDigitValue2(System::String* s, int32_t index);
        static int32_t GetDigitValue(char16_t ch);
        static int32_t GetDigitValue2(System::String* s, int32_t index);
        static double GetNumericValue(char16_t ch);
        static double GetNumericValue2(System::String* s, int32_t index);
        static UnicodeCategory GetUnicodeCategory(char16_t ch);
        static UnicodeCategory GetUnicodeCategory2(System::String* s, int32_t index);
        
    };
    
    
    struct MANAGED_API ChineseLunisolarCalendar : public virtual EastAsianLunisolarCalendar{
        static constexpr int32_t ChineseEra = 1;
        static CCEastAsianLunisolarEraHandler* era_handler;
        static System::DateTime ChineseMin;
        static System::DateTime ChineseMax;
        
        ChineseLunisolarCalendar();
        static void static_constructor();
        void constructor();
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API CodePageDataItem : public virtual System::Object{
        System::String* m_bodyName;
        int32_t m_codePage;
        int32_t m_dataIndex;
        System::String* m_description;
        uint32_t m_flags;
        System::String* m_headerName;
        int32_t m_uiFamilyCodePage;
        System::String* m_webName;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CompareInfo : public virtual System::Object, public virtual System::Runtime::Serialization::IDeserializationCallback{
        static constexpr CompareOptions ValidCompareOptions_NoStringSort = (System::Globalization::CompareOptions)1342177311L;
        static constexpr CompareOptions ValidCompareOptions = (System::Globalization::CompareOptions)1879048223L;
        static bool useManagedCollation;
        int32_t culture;
        System::String* icu_name;
        int32_t win32LCID;
        System::String* m_name;
        Mono::Globalization::Unicode::SimpleCollator* collator;
        static System::Collections::Hashtable* collators;
        static System::Object* monitor;
        
        CompareInfo();
        void constructor();
        void constructor(CultureInfo* ci);
        static void static_constructor();
        virtual void Finalize_5d1f090c8cfaa1be();
        void OnDeserialization(System::Object* sender);
        void construct_compareinfo(System::String* locale);
        void free_internal_collator();
        int32_t internal_compare(System::String* str1, int32_t offset1, int32_t length1, System::String* str2, int32_t offset2, int32_t length2, CompareOptions options);
        void assign_sortkey(System::Object* key, System::String* source, CompareOptions options);
        int32_t internal_index(System::String* source, int32_t sindex, int32_t count, char16_t value, CompareOptions options, bool first);
        int32_t internal_index2(System::String* source, int32_t sindex, int32_t count, System::String* value, CompareOptions options, bool first);
        int32_t internal_compare_managed(System::String* str1, int32_t offset1, int32_t length1, System::String* str2, int32_t offset2, int32_t length2, CompareOptions options);
        int32_t internal_compare_switch(System::String* str1, int32_t offset1, int32_t length1, System::String* str2, int32_t offset2, int32_t length2, CompareOptions options);
        virtual int32_t Compare_50fe18f7ad0224bc(System::String* string1, System::String* string2);
        virtual int32_t Compare_272e035d74e81a5d(System::String* string1, System::String* string2, CompareOptions options);
        virtual int32_t Compare_341393099ee9866c(System::String* string1, int32_t offset1, System::String* string2, int32_t offset2);
        virtual int32_t Compare_f1be80f4ffa76329(System::String* string1, int32_t offset1, System::String* string2, int32_t offset2, CompareOptions options);
        virtual int32_t Compare_e4c71eff518222d5(System::String* string1, int32_t offset1, int32_t length1, System::String* string2, int32_t offset2, int32_t length2);
        virtual int32_t Compare_cfb40aa8f022b1c6(System::String* string1, int32_t offset1, int32_t length1, System::String* string2, int32_t offset2, int32_t length2, CompareOptions options);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        static CompareInfo* GetCompareInfo(int32_t culture);
        static CompareInfo* GetCompareInfo2(System::String* name);
        static CompareInfo* GetCompareInfo3(int32_t culture, System::Reflection::Assembly* assembly);
        static CompareInfo* GetCompareInfo4(System::String* name, System::Reflection::Assembly* assembly);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual SortKey* GetSortKey_76c4476fb6c2b7c1(System::String* source);
        virtual SortKey* GetSortKey_250194ddfe99a207(System::String* source, CompareOptions options);
        virtual int32_t IndexOf_9c7b97d4f571f153(System::String* source, char16_t value);
        virtual int32_t IndexOf_dd6d478317271ca6(System::String* source, System::String* value);
        virtual int32_t IndexOf_61b63989536ef546(System::String* source, char16_t value, CompareOptions options);
        virtual int32_t IndexOf_9314bddb56529e1d(System::String* source, char16_t value, int32_t startIndex);
        virtual int32_t IndexOf_75c6c055d8cfb310(System::String* source, System::String* value, CompareOptions options);
        virtual int32_t IndexOf_ccad65d26a41a9cd(System::String* source, System::String* value, int32_t startIndex);
        virtual int32_t IndexOf_6eceb976ca70cd8e(System::String* source, char16_t value, int32_t startIndex, CompareOptions options);
        virtual int32_t IndexOf_60e351d75135f46d(System::String* source, char16_t value, int32_t startIndex, int32_t count);
        virtual int32_t IndexOf_62c9d90f539625a7(System::String* source, System::String* value, int32_t startIndex, CompareOptions options);
        virtual int32_t IndexOf_b74a781533c8ed6d(System::String* source, System::String* value, int32_t startIndex, int32_t count);
        int32_t internal_index_managed(System::String* s, int32_t sindex, int32_t count, char16_t c, CompareOptions opt, bool first);
        int32_t internal_index_switch(System::String* s, int32_t sindex, int32_t count, char16_t c, CompareOptions opt, bool first);
        virtual int32_t IndexOf_d25f4e56610cd081(System::String* source, char16_t value, int32_t startIndex, int32_t count, CompareOptions options);
        int32_t internal_index_managed2(System::String* s1, int32_t sindex, int32_t count, System::String* s2, CompareOptions opt, bool first);
        int32_t internal_index_switch2(System::String* s1, int32_t sindex, int32_t count, System::String* s2, CompareOptions opt, bool first);
        virtual int32_t IndexOf_434caa895db2be65(System::String* source, System::String* value, int32_t startIndex, int32_t count, CompareOptions options);
        virtual bool IsPrefix_fd99a7e73f2a5cba(System::String* source, System::String* prefix);
        virtual bool IsPrefix_5175c6f6b5c36f0a(System::String* source, System::String* prefix, CompareOptions options);
        virtual bool IsSuffix_b5bcb2cbb9f575c7(System::String* source, System::String* suffix);
        virtual bool IsSuffix_aee4ee93cc1fc6d(System::String* source, System::String* suffix, CompareOptions options);
        virtual int32_t LastIndexOf_6ef54df3a337d7df(System::String* source, char16_t value);
        virtual int32_t LastIndexOf_cce999127e14fb8(System::String* source, System::String* value);
        virtual int32_t LastIndexOf_9b4ba083ca07b46c(System::String* source, char16_t value, CompareOptions options);
        virtual int32_t LastIndexOf_36afeb037dd8551(System::String* source, char16_t value, int32_t startIndex);
        virtual int32_t LastIndexOf_7ce9454dba9ad554(System::String* source, System::String* value, CompareOptions options);
        virtual int32_t LastIndexOf_726af652382a35da(System::String* source, System::String* value, int32_t startIndex);
        virtual int32_t LastIndexOf_b16ef57bb1dd2c7d(System::String* source, char16_t value, int32_t startIndex, CompareOptions options);
        virtual int32_t LastIndexOf_ed6dad7a88d75f3f(System::String* source, char16_t value, int32_t startIndex, int32_t count);
        virtual int32_t LastIndexOf_c981d9279c2bd5ee(System::String* source, System::String* value, int32_t startIndex, CompareOptions options);
        virtual int32_t LastIndexOf_5c1e773a5b209242(System::String* source, System::String* value, int32_t startIndex, int32_t count);
        virtual int32_t LastIndexOf_3dd9c7ed9a014563(System::String* source, char16_t value, int32_t startIndex, int32_t count, CompareOptions options);
        virtual int32_t LastIndexOf_dcf739de60ff316f(System::String* source, System::String* value, int32_t startIndex, int32_t count, CompareOptions options);
        static bool IsSortable(char16_t ch);
        static bool IsSortable2(System::String* text);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static bool get_UseManagedCollation();
        int32_t get_LCID();
        virtual System::String* get_Name_43d83d40e01dbdd2();
        
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
    };
    
    
    struct MANAGED_API CultureInfo : public virtual System::Object, public virtual System::ICloneable, public virtual System::IFormatProvider{
        static constexpr int32_t NumOptionalCalendars = 5;
        static constexpr int32_t GregorianTypeMask = 16777215;
        static constexpr int32_t CalendarTypeBits = 24;
        static constexpr int32_t InvariantCultureId = 127;
        static CultureInfo* invariant_culture_info;
        static System::Object* shared_table_lock;
        static int32_t BootstrapCultureID;
        bool m_isReadOnly;
        int32_t cultureID;
        int32_t parent_lcid;
        int32_t specific_lcid;
        int32_t datetime_index;
        int32_t number_index;
        bool m_useUserOverride;
        NumberFormatInfo* numInfo;
        DateTimeFormatInfo* dateTimeInfo;
        TextInfo* textInfo;
        System::String* m_name;
        System::String* displayname;
        System::String* englishname;
        System::String* nativename;
        System::String* iso3lang;
        System::String* iso2lang;
        System::String* icu_name;
        System::String* win3lang;
        System::String* territory;
        CompareInfo* compareInfo;
        int32_t* calendar_data;
        void* textinfo_data;
        cli::array<Calendar*>* optional_calendars;
        CultureInfo* parent_culture;
        int32_t m_dataItem;
        Calendar* calendar;
        bool constructed;
        cli::array<unsigned char>* cached_serialized_form;
        static System::String* MSG_READONLY;
        static System::Collections::Hashtable* shared_by_number;
        static System::Collections::Hashtable* shared_by_name;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map6;
        
        CultureInfo();
        void constructor(int32_t culture);
        void constructor(int32_t culture, bool useUserOverride);
        void constructor(int32_t culture, bool useUserOverride, bool read_only);
        void constructor(System::String* name);
        void constructor(System::String* name, bool useUserOverride);
        void constructor(System::String* name, bool useUserOverride, bool read_only);
        void constructor();
        static void static_constructor();
        static CultureInfo* CreateSpecificCulture(System::String* name);
        static CultureInfo* ConstructCurrentCulture();
        static CultureInfo* ConstructCurrentUICulture();
        CultureInfo* GetConsoleFallbackUICulture();
        void ClearCachedData();
        virtual System::Object* Clone_490644fd8134e39b();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        static cli::array<CultureInfo*>* GetCultures(CultureTypes types);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static CultureInfo* ReadOnly(CultureInfo* ci);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static bool IsIDNeutralCulture(int32_t lcid);
        void CheckNeutral();
        virtual System::Object* GetFormat_49958c0908ff1d8f(System::Type* formatType);
        void Construct();
        bool ConstructInternalLocaleFromName(System::String* locale);
        bool ConstructInternalLocaleFromLcid(int32_t lcid);
        static bool ConstructInternalLocaleFromSpecificName(CultureInfo* ci, System::String* name);
        static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo* ci);
        bool construct_internal_locale_from_lcid(int32_t lcid);
        bool construct_internal_locale_from_name(System::String* name);
        static bool construct_internal_locale_from_specific_name(CultureInfo* ci, System::String* name);
        static bool construct_internal_locale_from_current_locale(CultureInfo* ci);
        static cli::array<CultureInfo*>* internal_get_cultures(bool neutral, bool specific, bool installed);
        void construct_datetime_format();
        void construct_number_format();
        static bool internal_is_lcid_neutral(int32_t lcid, bool is_neutral);
        void ConstructInvariant(bool read_only);
        TextInfo* CreateTextInfo(bool readOnly);
        static void insert_into_shared_tables(CultureInfo* c);
        static CultureInfo* GetCultureInfo(int32_t culture);
        static CultureInfo* GetCultureInfo2(System::String* name);
        static CultureInfo* GetCultureInfo3(System::String* name, System::String* altName);
        static CultureInfo* GetCultureInfoByIetfLanguageTag(System::String* name);
        static CultureInfo* CreateCulture(System::String* name, bool reference);
        void ConstructCalendars();
        static CultureInfo* get_InvariantCulture();
        static CultureInfo* get_CurrentCulture();
        static CultureInfo* get_CurrentUICulture();
        System::String* get_Territory();
        CultureTypes get_CultureTypes();
        System::String* get_IetfLanguageTag();
        virtual int32_t get_KeyboardLayoutId_273912e657e107e5();
        virtual int32_t get_LCID_f4b9bc9d0bf0db86();
        virtual System::String* get_Name_7a59bd1b86cfacd3();
        virtual System::String* get_NativeName_a995d62d1c2e9299();
        virtual Calendar* get_Calendar_5bead9100809a423();
        virtual cli::array<Calendar*>* get_OptionalCalendars_87cc46022bfd6370();
        virtual CultureInfo* get_Parent_87d5fb2f5c680cba();
        virtual TextInfo* get_TextInfo_63dfa6e5f11a61f0();
        virtual System::String* get_ThreeLetterISOLanguageName_87cb454d9c6b990();
        virtual System::String* get_ThreeLetterWindowsLanguageName_d83af167f1e2a02a();
        virtual System::String* get_TwoLetterISOLanguageName_85225151341c586c();
        bool get_UseUserOverride();
        System::String* get_IcuName();
        virtual CompareInfo* get_CompareInfo_ef6e4d0bc469f6a();
        virtual bool get_IsNeutralCulture_9f9d058104a281b5();
        virtual NumberFormatInfo* get_NumberFormat_56b6d54c07628932();
        virtual NumberFormatInfo* set_NumberFormat_f7b4f6eb05a5ded6(NumberFormatInfo* value);
        virtual DateTimeFormatInfo* get_DateTimeFormat_cb96d9a9bbedcdf2();
        virtual DateTimeFormatInfo* set_DateTimeFormat_435b1b701c3815b6(DateTimeFormatInfo* value);
        virtual System::String* get_DisplayName_52e82426094191e5();
        virtual System::String* get_EnglishName_57b493e168ab483b();
        static CultureInfo* get_InstalledUICulture();
        bool get_IsReadOnly();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual System::Object* GetFormat_b67414a65453cc7e(System::Type* formatType) override;
    };
    
    
    struct MANAGED_API CultureNotFoundException : public virtual System::ArgumentException{
        System::String* invalid_culture_name;
        System::Nullable2<int32_t> invalid_culture_id;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::String* paramName, System::String* message);
        void constructor(System::String* message, int32_t invalidCultureId, System::Exception* innerException);
        void constructor(System::String* paramName, int32_t invalidCultureId, System::String* message);
        void constructor(System::String* message, System::String* invalidCultureName, System::Exception* innerException);
        void constructor(System::String* paramName, System::String* invalidCultureName, System::String* message);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Nullable2<int32_t> get_InvalidCultureId_ff22afdc31cbb8b();
        virtual System::String* get_InvalidCultureName_bee3729bec787d8a();
        virtual System::String* get_Message_d211df4045b57cbf() override;
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* get_Message_236e49c6b265ab9b() override;
    };
    
    
    struct MANAGED_API DateTimeFormatInfo : public virtual System::Object, public virtual System::ICloneable, public virtual System::IFormatProvider{
        static /*constexpr*/ System::String* _RoundtripPattern() { return _T("yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss.fffffffK"); }
        static System::String* MSG_READONLY;
        static cli::array<System::String*>* INVARIANT_ABBREVIATED_DAY_NAMES;
        static cli::array<System::String*>* INVARIANT_DAY_NAMES;
        static cli::array<System::String*>* INVARIANT_ABBREVIATED_MONTH_NAMES;
        static cli::array<System::String*>* INVARIANT_MONTH_NAMES;
        static cli::array<System::String*>* INVARIANT_SHORT_DAY_NAMES;
        static DateTimeFormatInfo* theInvariantDateTimeFormatInfo;
        bool m_isReadOnly;
        System::String* amDesignator;
        System::String* pmDesignator;
        System::String* dateSeparator;
        System::String* timeSeparator;
        System::String* shortDatePattern;
        System::String* longDatePattern;
        System::String* shortTimePattern;
        System::String* longTimePattern;
        System::String* monthDayPattern;
        System::String* yearMonthPattern;
        System::String* fullDateTimePattern;
        System::String* _RFC1123Pattern;
        System::String* _SortableDateTimePattern;
        System::String* _UniversalSortableDateTimePattern;
        int32_t firstDayOfWeek;
        Calendar* calendar;
        int32_t calendarWeekRule;
        cli::array<System::String*>* abbreviatedDayNames;
        cli::array<System::String*>* dayNames;
        cli::array<System::String*>* monthNames;
        cli::array<System::String*>* abbreviatedMonthNames;
        cli::array<System::String*>* allShortDatePatterns;
        cli::array<System::String*>* allLongDatePatterns;
        cli::array<System::String*>* allShortTimePatterns;
        cli::array<System::String*>* allLongTimePatterns;
        cli::array<System::String*>* monthDayPatterns;
        cli::array<System::String*>* yearMonthPatterns;
        cli::array<System::String*>* shortDayNames;
        int32_t nDataItem;
        bool m_useUserOverride;
        bool m_isDefaultCalendar;
        int32_t CultureID;
        bool bUseCalendarInfo;
        System::String* generalShortTimePattern;
        System::String* generalLongTimePattern;
        cli::array<System::String*>* m_eraNames;
        cli::array<System::String*>* m_abbrevEraNames;
        cli::array<System::String*>* m_abbrevEnglishEraNames;
        cli::array<System::String*>* m_dateWords;
        cli::array<int32_t>* optionalCalendars;
        cli::array<System::String*>* m_superShortDayNames;
        cli::array<System::String*>* genitiveMonthNames;
        cli::array<System::String*>* m_genitiveAbbreviatedMonthNames;
        cli::array<System::String*>* leapYearMonthNames;
        DateTimeFormatFlags formatFlags;
        System::String* m_name;
        cli::array<System::String*>* all_date_time_patterns;
        
        DateTimeFormatInfo();
        void constructor(bool read_only);
        void constructor();
        static void static_constructor();
        static DateTimeFormatInfo* GetInstance(System::IFormatProvider* provider);
        static DateTimeFormatInfo* ReadOnly(DateTimeFormatInfo* dtfi);
        System::Object* Clone();
        System::Object* GetFormat(System::Type* formatType);
        System::String* GetAbbreviatedEraName(int32_t era);
        System::String* GetAbbreviatedMonthName(int32_t month);
        int32_t GetEra(System::String* eraName);
        System::String* GetEraName(int32_t era);
        System::String* GetMonthName(int32_t month);
        cli::array<System::String*>* GetAllDateTimePatterns();
        cli::array<System::String*>* GetAllDateTimePatternsInternal();
        void FillAllDateTimePatterns();
        cli::array<System::String*>* GetAllDateTimePatterns2(char16_t format);
        cli::array<System::String*>* GetAllRawDateTimePatterns(char16_t format);
        System::String* GetDayName(System::DayOfWeek dayofweek);
        System::String* GetAbbreviatedDayName(System::DayOfWeek dayofweek);
        void FillInvariantPatterns();
        static cli::array<System::String*>* PopulateCombinedList(cli::array<System::String*>* dates, cli::array<System::String*>* times);
        System::String* GetShortestDayName(System::DayOfWeek dayOfWeek);
        void SetAllDateTimePatterns(cli::array<System::String*>* patterns, char16_t format);
        void CheckDaysValue(cli::array<System::String*>* value);
        void CheckMonthsValue(cli::array<System::String*>* value);
        bool get_IsReadOnly();
        cli::array<System::String*>* get_AbbreviatedDayNames();
        cli::array<System::String*>* set_AbbreviatedDayNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_RawAbbreviatedDayNames();
        cli::array<System::String*>* set_RawAbbreviatedDayNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_AbbreviatedMonthNames();
        cli::array<System::String*>* set_AbbreviatedMonthNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_RawAbbreviatedMonthNames();
        cli::array<System::String*>* set_RawAbbreviatedMonthNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_DayNames();
        cli::array<System::String*>* set_DayNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_RawDayNames();
        cli::array<System::String*>* set_RawDayNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_MonthNames();
        cli::array<System::String*>* set_MonthNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_RawMonthNames();
        cli::array<System::String*>* set_RawMonthNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_AbbreviatedMonthGenitiveNames();
        cli::array<System::String*>* set_AbbreviatedMonthGenitiveNames(cli::array<System::String*>* value);
        cli::array<System::String*>* get_MonthGenitiveNames();
        cli::array<System::String*>* set_MonthGenitiveNames(cli::array<System::String*>* value);
        System::String* get_NativeCalendarName();
        cli::array<System::String*>* get_ShortestDayNames();
        cli::array<System::String*>* set_ShortestDayNames(cli::array<System::String*>* value);
        System::String* get_AMDesignator();
        System::String* set_AMDesignator(System::String* value);
        System::String* get_PMDesignator();
        System::String* set_PMDesignator(System::String* value);
        System::String* get_DateSeparator();
        System::String* set_DateSeparator(System::String* value);
        System::String* get_TimeSeparator();
        System::String* set_TimeSeparator(System::String* value);
        System::String* get_LongDatePattern();
        System::String* set_LongDatePattern(System::String* value);
        System::String* get_ShortDatePattern();
        System::String* set_ShortDatePattern(System::String* value);
        System::String* get_ShortTimePattern();
        System::String* set_ShortTimePattern(System::String* value);
        System::String* get_LongTimePattern();
        System::String* set_LongTimePattern(System::String* value);
        System::String* get_MonthDayPattern();
        System::String* set_MonthDayPattern(System::String* value);
        System::String* get_YearMonthPattern();
        System::String* set_YearMonthPattern(System::String* value);
        System::String* get_FullDateTimePattern();
        System::String* set_FullDateTimePattern(System::String* value);
        static DateTimeFormatInfo* get_CurrentInfo();
        static DateTimeFormatInfo* get_InvariantInfo();
        System::DayOfWeek get_FirstDayOfWeek();
        System::DayOfWeek set_FirstDayOfWeek(System::DayOfWeek value);
        Calendar* get_Calendar();
        Calendar* set_Calendar(Calendar* value);
        CalendarWeekRule get_CalendarWeekRule();
        CalendarWeekRule set_CalendarWeekRule(CalendarWeekRule value);
        System::String* get_RFC1123Pattern();
        System::String* get_RoundtripPattern();
        System::String* get_SortableDateTimePattern();
        System::String* get_UniversalSortableDateTimePattern();
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual System::Object* GetFormat_b67414a65453cc7e(System::Type* formatType) override;
    };
    
    
    struct MANAGED_API DaylightTime : public virtual System::Object{
        System::DateTime m_start;
        System::TimeSpan m_delta;
        System::DateTime m_end;
        
        void constructor(System::DateTime start, System::DateTime end, System::TimeSpan delta);
        System::DateTime get_Start();
        System::DateTime get_End();
        System::TimeSpan get_Delta();
        
    };
    
    
    struct MANAGED_API GregorianCalendar : public virtual Calendar{
        static constexpr int32_t ADEra = 1;
        GregorianCalendarTypes m_type;
        static System::Nullable2<System::DateTime> Min;
        static System::Nullable2<System::DateTime> Max;
        
        void constructor(GregorianCalendarTypes type);
        void constructor();
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual GregorianCalendarTypes get_CalendarType_23a247a9bf212892();
        virtual GregorianCalendarTypes set_CalendarType_868621f754c8b21(GregorianCalendarTypes value);
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API HebrewCalendar : public virtual Calendar{
        static constexpr int64_t M_MinTicks = 499147488000000000L;
        static constexpr int64_t M_MaxTicks = 706783967999999999L;
        static constexpr int32_t M_MinYear = 5343;
        static int32_t HebrewEra;
        static System::DateTime Min;
        static System::DateTime Max;
        
        HebrewCalendar();
        void constructor();
        static void static_constructor();
        void M_CheckDateTime(System::DateTime time);
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        int32_t M_CCMonth(int32_t month, int32_t year);
        int32_t M_Month(int32_t ccmonth, int32_t year);
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual int32_t get_M_MaxYear_b3d9776fced847fe() override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API HijriCalendar : public virtual Calendar{
        static int32_t HijriEra;
        static int32_t M_MinFixed;
        static int32_t M_MaxFixed;
        int32_t M_AddHijriDate;
        static System::DateTime Min;
        static System::DateTime Max;
        
        HijriCalendar();
        void constructor();
        static void static_constructor();
        void M_CheckFixedHijri(System::String* param, int32_t rdHijri);
        void M_CheckDateTime(System::DateTime time);
        int32_t M_FromDateTime(System::DateTime time);
        System::DateTime M_ToDateTime(int32_t rd);
        System::DateTime M_ToDateTime2(int32_t date, int32_t hour, int32_t minute, int32_t second, int32_t milliseconds);
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual int32_t get_AddHijriDate_de230c2822d0e775();
        virtual int32_t set_AddHijriDate_4e624536250a29c4(int32_t value);
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        int32_t get_HijriAdjustment();
        int32_t set_HijriAdjustment(int32_t value);
        
    };
    
    
    struct MANAGED_API IdnMapping : public virtual System::Object{
        bool allow_unassigned;
        Punycode* puny;
        bool use_std3;
        
        void constructor();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* GetAscii(System::String* unicode);
        System::String* GetAscii2(System::String* unicode, int32_t index);
        System::String* GetAscii3(System::String* unicode, int32_t index, int32_t count);
        System::String* Convert2(System::String* input, int32_t index, int32_t count, bool toAscii);
        System::String* ToAscii(System::String* s, int32_t offset);
        void VerifyLength(System::String* s, int32_t offset);
        System::String* NamePrep(System::String* s, int32_t offset);
        void VerifyProhibitedCharacters(System::String* s, int32_t offset);
        void VerifyStd3AsciiRules(System::String* s, int32_t offset);
        System::String* GetUnicode(System::String* ascii);
        System::String* GetUnicode2(System::String* ascii, int32_t index);
        System::String* GetUnicode3(System::String* ascii, int32_t index, int32_t count);
        System::String* ToUnicode(System::String* s, int32_t offset);
        bool get_AllowUnassigned();
        bool set_AllowUnassigned(bool value);
        bool get_UseStd3AsciiRules();
        bool set_UseStd3AsciiRules(bool value);
        
    };
    
    
    struct MANAGED_API Punycode : public virtual Bootstring{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API JapaneseCalendar : public virtual Calendar{
        static CCGregorianEraHandler* M_EraHandler;
        static System::DateTime JapanMin;
        static System::DateTime JapanMax;
        
        JapaneseCalendar();
        static void static_constructor();
        void constructor();
        void M_CheckDateTime(System::DateTime time);
        void M_CheckEra(int32_t era);
        int32_t M_CheckYEG(int32_t year, int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        int32_t M_CheckYMEG(int32_t year, int32_t month, int32_t era);
        int32_t M_CheckYMDEG(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API JapaneseLunisolarCalendar : public virtual EastAsianLunisolarCalendar{
        static constexpr int32_t JapaneseEra = 1;
        static CCEastAsianLunisolarEraHandler* era_handler;
        static System::DateTime JapanMin;
        static System::DateTime JapanMax;
        
        JapaneseLunisolarCalendar();
        static void static_constructor();
        void constructor();
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t get_ActualCurrentEra_d2c09b5f859d63e9() override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API JulianCalendar : public virtual Calendar{
        static int32_t JulianEra;
        static System::DateTime JulianMin;
        static System::DateTime JulianMax;
        
        JulianCalendar();
        void constructor();
        static void static_constructor();
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API KoreanCalendar : public virtual Calendar{
        static constexpr int32_t KoreanEra = 1;
        static CCGregorianEraHandler* M_EraHandler;
        static System::DateTime KoreanMin;
        static System::DateTime KoreanMax;
        
        KoreanCalendar();
        static void static_constructor();
        void constructor();
        void M_CheckEra(int32_t era);
        int32_t M_CheckYEG(int32_t year, int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        int32_t M_CheckYMEG(int32_t year, int32_t month, int32_t era);
        int32_t M_CheckYMDEG(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API KoreanLunisolarCalendar : public virtual EastAsianLunisolarCalendar{
        static constexpr int32_t GregorianEra = 1;
        static CCEastAsianLunisolarEraHandler* era_handler;
        static System::DateTime KoreanMin;
        static System::DateTime KoreanMax;
        
        KoreanLunisolarCalendar();
        static void static_constructor();
        void constructor();
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API NumberFormatInfo : public virtual System::Object, public virtual System::ICloneable, public virtual System::IFormatProvider{
        bool isReadOnly;
        System::String* decimalFormats;
        System::String* currencyFormats;
        System::String* percentFormats;
        System::String* digitPattern;
        System::String* zeroPattern;
        int32_t currencyDecimalDigits;
        System::String* currencyDecimalSeparator;
        System::String* currencyGroupSeparator;
        cli::array<int32_t>* currencyGroupSizes;
        int32_t currencyNegativePattern;
        int32_t currencyPositivePattern;
        System::String* currencySymbol;
        System::String* nanSymbol;
        System::String* negativeInfinitySymbol;
        System::String* negativeSign;
        int32_t numberDecimalDigits;
        System::String* numberDecimalSeparator;
        System::String* numberGroupSeparator;
        cli::array<int32_t>* numberGroupSizes;
        int32_t numberNegativePattern;
        int32_t percentDecimalDigits;
        System::String* percentDecimalSeparator;
        System::String* percentGroupSeparator;
        cli::array<int32_t>* percentGroupSizes;
        int32_t percentNegativePattern;
        int32_t percentPositivePattern;
        System::String* percentSymbol;
        System::String* perMilleSymbol;
        System::String* positiveInfinitySymbol;
        System::String* positiveSign;
        System::String* ansiCurrencySymbol;
        int32_t m_dataItem;
        bool m_useUserOverride;
        bool validForParseAsNumber;
        bool validForParseAsCurrency;
        cli::array<System::String*>* nativeDigits;
        int32_t digitSubstitution;
        static cli::array<System::String*>* invariantNativeDigits;
        
        NumberFormatInfo();
        void constructor(int32_t lcid, bool read_only);
        void constructor(bool read_only);
        void constructor();
        static void static_constructor();
        void InitPatterns();
        System::Object* GetFormat(System::Type* formatType);
        System::Object* Clone();
        static NumberFormatInfo* ReadOnly(NumberFormatInfo* nfi);
        static NumberFormatInfo* GetInstance(System::IFormatProvider* formatProvider);
        int32_t get_CurrencyDecimalDigits();
        int32_t set_CurrencyDecimalDigits(int32_t value);
        System::String* get_CurrencyDecimalSeparator();
        System::String* set_CurrencyDecimalSeparator(System::String* value);
        System::String* get_CurrencyGroupSeparator();
        System::String* set_CurrencyGroupSeparator(System::String* value);
        cli::array<int32_t>* get_CurrencyGroupSizes();
        cli::array<int32_t>* set_CurrencyGroupSizes(cli::array<int32_t>* value);
        cli::array<int32_t>* get_RawCurrencyGroupSizes();
        cli::array<int32_t>* set_RawCurrencyGroupSizes(cli::array<int32_t>* value);
        int32_t get_CurrencyNegativePattern();
        int32_t set_CurrencyNegativePattern(int32_t value);
        int32_t get_CurrencyPositivePattern();
        int32_t set_CurrencyPositivePattern(int32_t value);
        System::String* get_CurrencySymbol();
        System::String* set_CurrencySymbol(System::String* value);
        static NumberFormatInfo* get_CurrentInfo();
        static NumberFormatInfo* get_InvariantInfo();
        bool get_IsReadOnly();
        System::String* get_NaNSymbol();
        System::String* set_NaNSymbol(System::String* value);
        cli::array<System::String*>* get_NativeDigits();
        cli::array<System::String*>* set_NativeDigits(cli::array<System::String*>* value);
        DigitShapes get_DigitSubstitution();
        DigitShapes set_DigitSubstitution(DigitShapes value);
        System::String* get_NegativeInfinitySymbol();
        System::String* set_NegativeInfinitySymbol(System::String* value);
        System::String* get_NegativeSign();
        System::String* set_NegativeSign(System::String* value);
        int32_t get_NumberDecimalDigits();
        int32_t set_NumberDecimalDigits(int32_t value);
        System::String* get_NumberDecimalSeparator();
        System::String* set_NumberDecimalSeparator(System::String* value);
        System::String* get_NumberGroupSeparator();
        System::String* set_NumberGroupSeparator(System::String* value);
        cli::array<int32_t>* get_NumberGroupSizes();
        cli::array<int32_t>* set_NumberGroupSizes(cli::array<int32_t>* value);
        cli::array<int32_t>* get_RawNumberGroupSizes();
        cli::array<int32_t>* set_RawNumberGroupSizes(cli::array<int32_t>* value);
        int32_t get_NumberNegativePattern();
        int32_t set_NumberNegativePattern(int32_t value);
        int32_t get_PercentDecimalDigits();
        int32_t set_PercentDecimalDigits(int32_t value);
        System::String* get_PercentDecimalSeparator();
        System::String* set_PercentDecimalSeparator(System::String* value);
        System::String* get_PercentGroupSeparator();
        System::String* set_PercentGroupSeparator(System::String* value);
        cli::array<int32_t>* get_PercentGroupSizes();
        cli::array<int32_t>* set_PercentGroupSizes(cli::array<int32_t>* value);
        cli::array<int32_t>* get_RawPercentGroupSizes();
        cli::array<int32_t>* set_RawPercentGroupSizes(cli::array<int32_t>* value);
        int32_t get_PercentNegativePattern();
        int32_t set_PercentNegativePattern(int32_t value);
        int32_t get_PercentPositivePattern();
        int32_t set_PercentPositivePattern(int32_t value);
        System::String* get_PercentSymbol();
        System::String* set_PercentSymbol(System::String* value);
        System::String* get_PerMilleSymbol();
        System::String* set_PerMilleSymbol(System::String* value);
        System::String* get_PositiveInfinitySymbol();
        System::String* set_PositiveInfinitySymbol(System::String* value);
        System::String* get_PositiveSign();
        System::String* set_PositiveSign(System::String* value);
        
        virtual System::Object* GetFormat_b67414a65453cc7e(System::Type* formatType) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API PersianCalendar : public virtual Calendar{
        static constexpr int64_t M_MinTicks = 196036416000000000L;
        static constexpr int32_t M_MinYear = 1;
        static constexpr int32_t epoch = 226895;
        static int32_t PersianEra;
        static System::DateTime PersianMin;
        static System::DateTime PersianMax;
        
        PersianCalendar();
        void constructor();
        static void static_constructor();
        void M_CheckDateTime(System::DateTime time);
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        int32_t fixed_from_dmy(int32_t day, int32_t month, int32_t year);
        int32_t year_from_fixed(int32_t date);
        void my_from_fixed(int32_t month, int32_t year, int32_t date);
        void dmy_from_fixed(int32_t day, int32_t month, int32_t year, int32_t date);
        bool is_leap_year(int32_t year);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API RegionInfo : public virtual System::Object{
        static RegionInfo* currentRegion;
        int32_t regionId;
        System::String* iso2Name;
        System::String* iso3Name;
        System::String* win3Name;
        System::String* englishName;
        System::String* currencySymbol;
        System::String* isoCurrencySymbol;
        System::String* currencyEnglishName;
        int32_t lcid;
        
        void constructor(int32_t culture);
        void constructor(System::String* name);
        bool GetByTerritory(CultureInfo* ci);
        bool construct_internal_region_from_name(System::String* name);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static RegionInfo* get_CurrentRegion();
        virtual System::String* get_CurrencyEnglishName_11b35a21eae160d();
        virtual System::String* get_CurrencySymbol_b69fe85c17be1743();
        virtual System::String* get_DisplayName_bc0a8e7d4f2ccbb3();
        virtual System::String* get_EnglishName_ef4bbabc6246acac();
        virtual int32_t get_GeoId_444432e0a6fc700f();
        virtual bool get_IsMetric_c8c7150d013c863e();
        virtual System::String* get_ISOCurrencySymbol_9795598a14d3034d();
        virtual System::String* get_NativeName_28f7744bba08c8d9();
        virtual System::String* get_CurrencyNativeName_220dbae82fc109a1();
        virtual System::String* get_Name_aa8506371e3ae98f();
        virtual System::String* get_ThreeLetterISORegionName_81c0fa077c952438();
        virtual System::String* get_ThreeLetterWindowsRegionName_ff69caefd8da1bc1();
        virtual System::String* get_TwoLetterISORegionName_a80b0feff91b723a();
        
    };
    
    
    struct MANAGED_API StringInfo : public virtual System::Object{
        System::String* s;
        int32_t length;
        
        void constructor();
        void constructor(System::String* value);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* SubstringByTextElements(int32_t startingTextElement);
        System::String* SubstringByTextElements2(int32_t startingTextElement, int32_t lengthInTextElements);
        static System::String* GetNextTextElement(System::String* str);
        static System::String* GetNextTextElement2(System::String* str, int32_t index);
        static int32_t GetNextTextElementLength(System::String* str, int32_t index);
        static TextElementEnumerator* GetTextElementEnumerator(System::String* str);
        static TextElementEnumerator* GetTextElementEnumerator2(System::String* str, int32_t index);
        static cli::array<int32_t>* ParseCombiningCharacters(System::String* str);
        int32_t get_LengthInTextElements();
        System::String* get_String();
        System::String* set_String(System::String* value);
        
    };
    
    
    struct MANAGED_API TaiwanCalendar : public virtual Calendar{
        static CCGregorianEraHandler* M_EraHandler;
        static System::DateTime TaiwanMin;
        static System::DateTime TaiwanMax;
        
        TaiwanCalendar();
        static void static_constructor();
        void constructor();
        void M_CheckDateTime(System::DateTime time);
        void M_CheckEra(int32_t era);
        int32_t M_CheckYEG(int32_t year, int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        int32_t M_CheckYMEG(int32_t year, int32_t month, int32_t era);
        int32_t M_CheckYMDEG(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API TaiwanLunisolarCalendar : public virtual EastAsianLunisolarCalendar{
        static constexpr int32_t TaiwanEra = 1;
        static CCEastAsianLunisolarEraHandler* era_handler;
        static System::DateTime TaiwanMin;
        static System::DateTime TaiwanMax;
        
        TaiwanLunisolarCalendar();
        static void static_constructor();
        void constructor();
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API TextElementEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        int32_t index;
        int32_t elementindex;
        int32_t startpos;
        System::String* str;
        System::String* element;
        
        void constructor(System::String* str, int32_t startpos);
        System::String* GetTextElement();
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        int32_t get_ElementIndex();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API TextInfo : public virtual System::Object, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual System::ICloneable{
        System::String* m_listSeparator;
        bool m_isReadOnly;
        System::String* customCultureName;
        int32_t m_nDataItem;
        bool m_useUserOverride;
        int32_t m_win32LangID;
        CultureInfo* ci;
        bool handleDotI;
        Data data;
        
        void constructor(CultureInfo* ci, int32_t lcid, void* data, bool read_only);
        void constructor(TextInfo* textInfo);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* ToTitleCase(System::String* str);
        virtual char16_t ToLower_6b32dfb00a24a852(char16_t c);
        virtual char16_t ToUpper_d4d54a4b5ef4f4c7(char16_t c);
        char16_t ToTitleCase2(char16_t c);
        virtual System::String* ToLower_4a9626b08fd9b34f(System::String* str);
        virtual System::String* ToUpper_e8666e8cddf53901(System::String* str);
        static TextInfo* ReadOnly(TextInfo* textInfo);
        void OnDeserialization(System::Object* sender);
        virtual System::Object* Clone_44be9aa808ba92d();
        virtual int32_t get_ANSICodePage_3487ba754586e2d2();
        virtual int32_t get_EBCDICCodePage_9c6cac1274ec0da6();
        int32_t get_LCID();
        virtual System::String* get_ListSeparator_38425c2002d1a031();
        virtual System::String* set_ListSeparator_d0d54fbb574b9e9(System::String* value);
        virtual int32_t get_MacCodePage_891737ecab226e53();
        virtual int32_t get_OEMCodePage_66052b7987828f2f();
        System::String* get_CultureName();
        bool get_IsReadOnly();
        bool get_IsRightToLeft();
        
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API ThaiBuddhistCalendar : public virtual Calendar{
        static constexpr int32_t ThaiBuddhistEra = 1;
        static CCGregorianEraHandler* M_EraHandler;
        static System::DateTime ThaiMin;
        static System::DateTime ThaiMax;
        
        ThaiBuddhistCalendar();
        static void static_constructor();
        void constructor();
        void M_CheckEra(int32_t era);
        int32_t M_CheckYEG(int32_t year, int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        int32_t M_CheckYMEG(int32_t year, int32_t month, int32_t era);
        int32_t M_CheckYMDEG(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetWeekOfYear_d25712e900e29bec(System::DateTime time, CalendarWeekRule rule, System::DayOfWeek firstDayOfWeek) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
    
    struct MANAGED_API UmAlQuraCalendar : public virtual Calendar{
        static constexpr int32_t UmAlQuraEra = 1;
        static int32_t M_MinFixed;
        static int32_t M_MaxFixed;
        int32_t M_AddHijriDate;
        static System::DateTime Min;
        static System::DateTime Max;
        
        UmAlQuraCalendar();
        void constructor();
        static void static_constructor();
        void M_CheckFixedHijri(System::String* param, int32_t rdHijri);
        void M_CheckDateTime(System::DateTime time);
        int32_t M_FromDateTime(System::DateTime time);
        System::DateTime M_ToDateTime(int32_t rd);
        System::DateTime M_ToDateTime2(int32_t date, int32_t hour, int32_t minute, int32_t second, int32_t milliseconds);
        void M_CheckEra(int32_t era);
        virtual void M_CheckYE_c830e88539d38d64(int32_t year, int32_t era) override;
        void M_CheckYME(int32_t year, int32_t month, int32_t era);
        void M_CheckYMDE(int32_t year, int32_t month, int32_t day, int32_t era);
        virtual System::DateTime AddMonths_a4a4579bf9385278(System::DateTime time, int32_t months) override;
        virtual System::DateTime AddYears_8bb7ea0ef803063e(System::DateTime time, int32_t years) override;
        virtual int32_t GetDayOfMonth_7da4e9f8c6f0dece(System::DateTime time) override;
        virtual System::DayOfWeek GetDayOfWeek_4c0b69c7bb83520e(System::DateTime time) override;
        virtual int32_t GetDayOfYear_1eaa1ac34e65f799(System::DateTime time) override;
        virtual int32_t GetDaysInMonth_233a2cea4d4c72fe(int32_t year, int32_t month, int32_t era) override;
        virtual int32_t GetDaysInYear_ae0f8cfee3ff2567(int32_t year, int32_t era) override;
        virtual int32_t GetEra_1d16c3456dce785e(System::DateTime time) override;
        virtual int32_t GetLeapMonth_fb3256a34d84f7ed(int32_t year, int32_t era) override;
        virtual int32_t GetMonth_66424683b988a96b(System::DateTime time) override;
        virtual int32_t GetMonthsInYear_2ae36c9a94a7bffb(int32_t year, int32_t era) override;
        virtual int32_t GetYear_75c1b17aa90af360(System::DateTime time) override;
        virtual bool IsLeapDay_7c795c9f36944ade(int32_t year, int32_t month, int32_t day, int32_t era) override;
        virtual bool IsLeapMonth_85b9917f2bdaeef7(int32_t year, int32_t month, int32_t era) override;
        virtual bool IsLeapYear_7aad026a1103cfb(int32_t year, int32_t era) override;
        virtual System::DateTime ToDateTime_82b4ff6780819fcd(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) override;
        virtual int32_t ToFourDigitYear_cb92a104112b3121(int32_t year) override;
        virtual cli::array<int32_t>* get_Eras_91b8aa89b8256658() override;
        virtual int32_t get_TwoDigitYearMax_14e9789b3d89e801() override;
        virtual int32_t set_TwoDigitYearMax_4852e071586288ab(int32_t value) override;
        virtual int32_t get_AddHijriDate_6bdbae9ac7363670();
        virtual int32_t set_AddHijriDate_bf418fb7733e37f4(int32_t value);
        virtual CalendarAlgorithmType get_AlgorithmType_1e3f8ed99adb8bde() override;
        virtual System::DateTime get_MinSupportedDateTime_63cdcad9cf7fca4e() override;
        virtual System::DateTime get_MaxSupportedDateTime_7bc53f690ae04821() override;
        
    };
    
}}
namespace System { namespace IO {
    
    struct MANAGED_API CStreamReader : public virtual StreamReader{
        System::TermInfoDriver* driver;
        
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* dest, int32_t index, int32_t count) override;
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        
    };
    
    
    struct MANAGED_API CStreamWriter : public virtual StreamWriter{
        System::TermInfoDriver* driver;
        
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual void Write_96ccae6b0b267024(char16_t val) override;
        void InternalWriteString(System::String* val);
        void InternalWriteChar(char16_t val);
        void InternalWriteChars(cli::array<char16_t>* buffer, int32_t n);
        virtual void Write_6d89396c0c5b77c4(cli::array<char16_t>* val) override;
        virtual void Write_dcf5e45abd9e11c4(System::String* val) override;
        
    };
    
    
    struct MANAGED_API BinaryReader : public virtual System::Object, public virtual System::IDisposable{
        static constexpr int32_t MaxBufferSize = 128;
        static constexpr bool leave_open = false;
        Stream* m_stream;
        System::Text::Encoding* m_encoding;
        cli::array<unsigned char>* m_buffer;
        System::Text::Decoder2* decoder;
        cli::array<char16_t>* charBuffer;
        cli::array<unsigned char>* charByteBuffer;
        bool m_disposed;
        
        void constructor(Stream* input);
        void constructor(Stream* input, System::Text::Encoding* encoding);
        virtual void Close_7e21193605247e18();
        virtual void Dispose_f27856de433d8cee(bool disposing);
        void Dispose2();
        virtual void FillBuffer_c9f34917233a7bf0(int32_t numBytes);
        virtual int32_t PeekChar_bba394f88b1679ad();
        virtual int32_t Read_b648b07e7bda1c64();
        virtual int32_t Read_e56820a6e9e603d8(cli::array<unsigned char>* buffer, int32_t index, int32_t count);
        virtual int32_t Read_e707a7910ba322cc(cli::array<char16_t>* buffer, int32_t index, int32_t count);
        int32_t ReadCharBytes(cli::array<char16_t>* buffer, int32_t index, int32_t count, int32_t bytes_read);
        int32_t Read7BitEncodedInt();
        virtual bool ReadBoolean_ffac632a26c093b3();
        virtual unsigned char ReadByte_a8e935915607659b();
        virtual cli::array<unsigned char>* ReadBytes_ff8723a8077b7798(int32_t count);
        virtual char16_t ReadChar_d9df7e93c29686d();
        virtual cli::array<char16_t>* ReadChars_e251759c1ffa23ff(int32_t count);
        virtual System::Decimal ReadDecimal_289b04b837613d00();
        virtual double ReadDouble_c4cf5262e4ca9658();
        virtual int16_t ReadInt16_cc677a86798a4911();
        virtual int32_t ReadInt32_e79bbed3af40f25f();
        virtual int64_t ReadInt64_324b86c0d5995c31();
        virtual signed char ReadSByte_de4608c911742c46();
        virtual System::String* ReadString_7b59e815ae441879();
        virtual float ReadSingle_4a83108898ca41d7();
        virtual uint16_t ReadUInt16_12c320b7592221bf();
        virtual uint32_t ReadUInt32_3acc4b6c3fc21142();
        virtual uint64_t ReadUInt64_af37b8afdb6259c1();
        void CheckBuffer(int32_t length);
        virtual Stream* get_BaseStream_f687c258329b093a();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API BinaryWriter : public virtual System::Object, public virtual System::IDisposable{
        static constexpr bool leave_open = false;
        static BinaryWriter* Null;
        Stream* OutStream;
        System::Text::Encoding* m_encoding;
        cli::array<unsigned char>* buffer;
        cli::array<unsigned char>* stringBuffer;
        int32_t maxCharsPerRound;
        bool disposed;
        
        BinaryWriter();
        void constructor();
        void constructor(Stream* output);
        void constructor(Stream* output, System::Text::Encoding* encoding);
        static void static_constructor();
        virtual void Close_333af8c4ea41df43();
        void Dispose();
        virtual void Dispose_2ccdb354743e31a8(bool disposing);
        virtual void Flush_3f4412918277f178();
        virtual int64_t Seek_53650fbf52a7a3bf(int32_t offset, SeekOrigin origin);
        virtual void Write_664daa13c7b699d4(bool value);
        virtual void Write_bc6e6f6f19ff3ad3(unsigned char value);
        virtual void Write_748d33f0d08b528e(cli::array<unsigned char>* buffer);
        virtual void Write_67008f3e2ece1dc3(cli::array<unsigned char>* buffer, int32_t index, int32_t count);
        virtual void Write_8d30dac55ff57ff8(char16_t ch);
        virtual void Write_a7ab51ccd6658347(cli::array<char16_t>* chars);
        virtual void Write_5e9f6092227a95ed(cli::array<char16_t>* chars, int32_t index, int32_t count);
        virtual void Write_8ba35d7f9fe8fd4b(System::Decimal value);
        virtual void Write_f38f5e7709f76e33(double value);
        virtual void Write_263157ba3ce9bc51(int16_t value);
        virtual void Write_6382fee822de735b(int32_t value);
        virtual void Write_f3b14072d1fca470(int64_t value);
        virtual void Write_9eb51dc30d6ae1a5(signed char value);
        virtual void Write_6581fbda559dbe80(float value);
        virtual void Write_6de303e680f3eff5(System::String* value);
        virtual void Write_7065176233f87453(uint16_t value);
        virtual void Write_805c393976ef76e5(uint32_t value);
        virtual void Write_694a3defde87112b(uint64_t value);
        void Write7BitEncodedInt(int32_t value);
        virtual Stream* get_BaseStream_6d7b07c4266897dc();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API BufferedStream : public virtual Stream{
        Stream* m_stream;
        cli::array<unsigned char>* m_buffer;
        int32_t m_buffer_pos;
        int32_t m_buffer_read_ahead;
        bool m_buffer_reading;
        bool disposed;
        
        void constructor(Stream* stream);
        void constructor(Stream* stream, int32_t bufferSize);
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        virtual void Flush_132821400030c993() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* array, int32_t offset, int32_t count) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* array, int32_t offset, int32_t count) override;
        void CheckObjectDisposedException();
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        
    };
    
    
    struct MANAGED_API Directory : public virtual System::Object{
        
        static DirectoryInfo* CreateDirectory(System::String* path);
        static DirectoryInfo* CreateDirectory2(System::String* path, System::Security::AccessControl::DirectorySecurity* directorySecurity);
        static DirectoryInfo* CreateDirectoriesInternal(System::String* path);
        static void Delete(System::String* path);
        static void RecursiveDelete(System::String* path);
        static void Delete2(System::String* path, bool recursive);
        static bool Exists(System::String* path);
        static System::DateTime GetLastAccessTime(System::String* path);
        static System::DateTime GetLastAccessTimeUtc(System::String* path);
        static System::DateTime GetLastWriteTime(System::String* path);
        static System::DateTime GetLastWriteTimeUtc(System::String* path);
        static System::DateTime GetCreationTime(System::String* path);
        static System::DateTime GetCreationTimeUtc(System::String* path);
        static System::String* GetCurrentDirectory();
        static cli::array<System::String*>* GetDirectories(System::String* path);
        static cli::array<System::String*>* GetDirectories2(System::String* path, System::String* searchPattern);
        static cli::array<System::String*>* GetDirectories3(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static void GetDirectoriesRecurse(System::String* path, System::String* searchPattern, System::Collections::Generic::List<System::String*>* all);
        static System::String* GetDirectoryRoot(System::String* path);
        static cli::array<System::String*>* GetFiles(System::String* path);
        static cli::array<System::String*>* GetFiles2(System::String* path, System::String* searchPattern);
        static cli::array<System::String*>* GetFiles3(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static void GetFilesRecurse(System::String* path, System::String* searchPattern, System::Collections::Generic::List<System::String*>* all);
        static cli::array<System::String*>* GetFileSystemEntries(System::String* path);
        static cli::array<System::String*>* GetFileSystemEntries2(System::String* path, System::String* searchPattern);
        static cli::array<System::String*>* GetLogicalDrives();
        static bool IsRootDirectory(System::String* path);
        static DirectoryInfo* GetParent(System::String* path);
        static void Move(System::String* sourceDirName, System::String* destDirName);
        static void SetAccessControl(System::String* path, System::Security::AccessControl::DirectorySecurity* directorySecurity);
        static void SetCreationTime(System::String* path, System::DateTime creationTime);
        static void SetCreationTimeUtc(System::String* path, System::DateTime creationTimeUtc);
        static void SetCurrentDirectory(System::String* path);
        static void SetLastAccessTime(System::String* path, System::DateTime lastAccessTime);
        static void SetLastAccessTimeUtc(System::String* path, System::DateTime lastAccessTimeUtc);
        static void SetLastWriteTime(System::String* path, System::DateTime lastWriteTime);
        static void SetLastWriteTimeUtc(System::String* path, System::DateTime lastWriteTimeUtc);
        static System::String* ValidateDirectoryListing(System::String* path, System::String* searchPattern, bool stop);
        static cli::array<System::String*>* GetFileSystemEntries3(System::String* path, System::String* searchPattern, FileAttributes mask, FileAttributes attrs);
        static cli::array<System::String*>* GetFileSystemEntries4(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static void EnumerateCheck(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateKind(System::String* path, System::String* searchPattern, SearchOption searchOption, FileAttributes kind);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateDirectories(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateDirectories2(System::String* path, System::String* searchPattern);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateDirectories3(System::String* path);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFiles(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFiles2(System::String* path, System::String* searchPattern);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFiles3(System::String* path);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFileSystemEntries(System::String* path, System::String* searchPattern, SearchOption searchOption);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFileSystemEntries2(System::String* path, System::String* searchPattern);
        static System::Collections::Generic::IEnumerable2<System::String*>* EnumerateFileSystemEntries3(System::String* path);
        static System::Security::AccessControl::DirectorySecurity* GetAccessControl(System::String* path, System::Security::AccessControl::AccessControlSections includeSections);
        static System::Security::AccessControl::DirectorySecurity* GetAccessControl2(System::String* path);
        
    };
    
    
    struct MANAGED_API DirectoryInfo : public virtual FileSystemInfo{
        System::String* current;
        System::String* parent;
        
        void constructor(System::String* path);
        void constructor(System::String* path, bool simpleOriginalPath);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void Initialize();
        void Create();
        DirectoryInfo* CreateSubdirectory(System::String* path);
        cli::array<FileInfo*>* GetFiles();
        cli::array<FileInfo*>* GetFiles2(System::String* searchPattern);
        cli::array<DirectoryInfo*>* GetDirectories();
        cli::array<DirectoryInfo*>* GetDirectories2(System::String* searchPattern);
        cli::array<FileSystemInfo*>* GetFileSystemInfos();
        cli::array<FileSystemInfo*>* GetFileSystemInfos2(System::String* searchPattern);
        cli::array<FileSystemInfo*>* GetFileSystemInfos3(System::String* searchPattern, SearchOption searchOption);
        void InternalGetFileSystemInfos(System::String* searchPattern, SearchOption searchOption, System::Collections::Generic::List<FileSystemInfo*>* infos);
        virtual void Delete_2d3445237ba2ed66() override;
        void Delete3(bool recursive);
        void MoveTo(System::String* destDirName);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<DirectoryInfo*>* GetDirectories3(System::String* searchPattern, SearchOption searchOption);
        int32_t GetFilesSubdirs(System::Collections::ArrayList* l, System::String* pattern);
        cli::array<FileInfo*>* GetFiles3(System::String* searchPattern, SearchOption searchOption);
        void Create2(System::Security::AccessControl::DirectorySecurity* directorySecurity);
        DirectoryInfo* CreateSubdirectory2(System::String* path, System::Security::AccessControl::DirectorySecurity* directorySecurity);
        System::Security::AccessControl::DirectorySecurity* GetAccessControl();
        System::Security::AccessControl::DirectorySecurity* GetAccessControl2(System::Security::AccessControl::AccessControlSections includeSections);
        void SetAccessControl(System::Security::AccessControl::DirectorySecurity* directorySecurity);
        System::Collections::Generic::IEnumerable2<DirectoryInfo*>* EnumerateDirectories();
        System::Collections::Generic::IEnumerable2<DirectoryInfo*>* EnumerateDirectories2(System::String* searchPattern);
        System::Collections::Generic::IEnumerable2<DirectoryInfo*>* EnumerateDirectories3(System::String* searchPattern, SearchOption searchOption);
        System::Collections::Generic::IEnumerable2<FileInfo*>* EnumerateFiles();
        System::Collections::Generic::IEnumerable2<FileInfo*>* EnumerateFiles2(System::String* searchPattern);
        System::Collections::Generic::IEnumerable2<FileInfo*>* EnumerateFiles3(System::String* searchPattern, SearchOption searchOption);
        System::Collections::Generic::IEnumerable2<FileSystemInfo*>* EnumerateFileSystemInfos();
        System::Collections::Generic::IEnumerable2<FileSystemInfo*>* EnumerateFileSystemInfos2(System::String* searchPattern);
        System::Collections::Generic::IEnumerable2<FileSystemInfo*>* EnumerateFileSystemInfos3(System::String* searchPattern, SearchOption searchOption);
        static System::Collections::Generic::IEnumerable2<FileSystemInfo*>* EnumerateFileSystemInfos4(System::String* full, System::String* searchPattern, SearchOption searchOption);
        virtual bool get_Exists_44ccb569427c51d7() override;
        virtual System::String* get_Name_34b64716a6d0afcd() override;
        DirectoryInfo* get_Parent();
        DirectoryInfo* get_Root();
        
    };
    
    
    struct MANAGED_API DirectoryNotFoundException : public virtual IOException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API DriveInfo : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        System::String* drive_format;
        System::String* path;
        
        void constructor(System::String* path, System::String* fstype);
        void constructor(System::String* driveName);
        static void GetDiskFreeSpace(System::String* path, uint64_t availableFreeSpace, uint64_t totalSize, uint64_t totalFreeSpace);
        static cli::array<DriveInfo*>* GetDrives();
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static bool GetDiskFreeSpaceInternal(System::String* pathName, uint64_t freeBytesAvail, uint64_t totalNumberOfBytes, uint64_t totalNumberOfFreeBytes, MonoIOError error);
        static uint32_t GetDriveTypeInternal(System::String* rootPathName);
        static System::String* GetDriveFormat(System::String* rootPathName);
        int64_t get_AvailableFreeSpace();
        int64_t get_TotalFreeSpace();
        int64_t get_TotalSize();
        System::String* get_VolumeLabel();
        System::String* set_VolumeLabel(System::String* value);
        System::String* get_DriveFormat();
        DriveType get_DriveType();
        System::String* get_Name();
        DirectoryInfo* get_RootDirectory();
        bool get_IsReady();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API DriveNotFoundException : public virtual IOException{
        static constexpr int32_t ErrorCode = -2147024893;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API EndOfStreamException : public virtual IOException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API File : public virtual System::Object{
        static System::Nullable2<System::DateTime> defaultLocalFileTime;
        
        static void AppendAllText(System::String* path, System::String* contents);
        static void AppendAllText2(System::String* path, System::String* contents, System::Text::Encoding* encoding);
        static StreamWriter* AppendText(System::String* path);
        static void Copy(System::String* sourceFileName, System::String* destFileName);
        static void Copy2(System::String* sourceFileName, System::String* destFileName, bool overwrite);
        static FileStream* Create(System::String* path);
        static FileStream* Create2(System::String* path, int32_t bufferSize);
        static FileStream* Create3(System::String* path, int32_t bufferSize, FileOptions options);
        static FileStream* Create4(System::String* path, int32_t bufferSize, FileOptions options, System::Security::AccessControl::FileSecurity* fileSecurity);
        static StreamWriter* CreateText(System::String* path);
        static void Delete(System::String* path);
        static bool Exists(System::String* path);
        static System::Security::AccessControl::FileSecurity* GetAccessControl(System::String* path);
        static System::Security::AccessControl::FileSecurity* GetAccessControl2(System::String* path, System::Security::AccessControl::AccessControlSections includeSections);
        static FileAttributes GetAttributes(System::String* path);
        static System::DateTime GetCreationTime(System::String* path);
        static System::DateTime GetCreationTimeUtc(System::String* path);
        static System::DateTime GetLastAccessTime(System::String* path);
        static System::DateTime GetLastAccessTimeUtc(System::String* path);
        static System::DateTime GetLastWriteTime(System::String* path);
        static System::DateTime GetLastWriteTimeUtc(System::String* path);
        static void Move(System::String* sourceFileName, System::String* destFileName);
        static FileStream* Open(System::String* path, FileMode mode);
        static FileStream* Open2(System::String* path, FileMode mode, FileAccess access);
        static FileStream* Open3(System::String* path, FileMode mode, FileAccess access, FileShare share);
        static FileStream* OpenRead(System::String* path);
        static StreamReader* OpenText(System::String* path);
        static FileStream* OpenWrite(System::String* path);
        static void Replace(System::String* sourceFileName, System::String* destinationFileName, System::String* destinationBackupFileName);
        static void Replace2(System::String* sourceFileName, System::String* destinationFileName, System::String* destinationBackupFileName, bool ignoreMetadataErrors);
        static void SetAccessControl(System::String* path, System::Security::AccessControl::FileSecurity* fileSecurity);
        static void SetAttributes(System::String* path, FileAttributes fileAttributes);
        static void SetCreationTime(System::String* path, System::DateTime creationTime);
        static void SetCreationTimeUtc(System::String* path, System::DateTime creationTimeUtc);
        static void SetLastAccessTime(System::String* path, System::DateTime lastAccessTime);
        static void SetLastAccessTimeUtc(System::String* path, System::DateTime lastAccessTimeUtc);
        static void SetLastWriteTime(System::String* path, System::DateTime lastWriteTime);
        static void SetLastWriteTimeUtc(System::String* path, System::DateTime lastWriteTimeUtc);
        static cli::array<unsigned char>* ReadAllBytes(System::String* path);
        static cli::array<System::String*>* ReadAllLines(System::String* path);
        static cli::array<System::String*>* ReadAllLines2(System::String* path, System::Text::Encoding* encoding);
        static cli::array<System::String*>* ReadAllLines3(StreamReader* reader);
        static System::String* ReadAllText(System::String* path);
        static System::String* ReadAllText2(System::String* path, System::Text::Encoding* encoding);
        static void WriteAllBytes(System::String* path, cli::array<unsigned char>* bytes);
        static void WriteAllLines(System::String* path, cli::array<System::String*>* contents);
        static void WriteAllLines2(System::String* path, cli::array<System::String*>* contents, System::Text::Encoding* encoding);
        static void WriteAllLines3(StreamWriter* writer, cli::array<System::String*>* contents);
        static void WriteAllText(System::String* path, System::String* contents);
        static void WriteAllText2(System::String* path, System::String* contents, System::Text::Encoding* encoding);
        static void Encrypt(System::String* path);
        static void Decrypt(System::String* path);
        static System::Collections::Generic::IEnumerable2<System::String*>* ReadLines(System::String* path);
        static System::Collections::Generic::IEnumerable2<System::String*>* ReadLines2(System::String* path, System::Text::Encoding* encoding);
        static System::Collections::Generic::IEnumerable2<System::String*>* ReadLines3(StreamReader* reader);
        static void AppendAllLines(System::String* path, System::Collections::Generic::IEnumerable2<System::String*>* contents);
        static void AppendAllLines2(System::String* path, System::Collections::Generic::IEnumerable2<System::String*>* contents, System::Text::Encoding* encoding);
        static void WriteAllLines4(System::String* path, System::Collections::Generic::IEnumerable2<System::String*>* contents);
        static void WriteAllLines5(System::String* path, System::Collections::Generic::IEnumerable2<System::String*>* contents, System::Text::Encoding* encoding);
        static System::DateTime get_DefaultLocalFileTime();
        
    };
    
    
    struct MANAGED_API FileInfo : public virtual FileSystemInfo{
        bool exists;
        
        void constructor(System::String* fileName);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void InternalRefresh_5c7cc70032723c7a() override;
        void Encrypt();
        void Decrypt();
        StreamReader* OpenText();
        StreamWriter* CreateText();
        StreamWriter* AppendText();
        FileStream* Create();
        FileStream* OpenRead();
        FileStream* OpenWrite();
        FileStream* Open(FileMode mode);
        FileStream* Open2(FileMode mode, FileAccess access);
        FileStream* Open3(FileMode mode, FileAccess access, FileShare share);
        virtual void Delete_2d3445237ba2ed66() override;
        void MoveTo(System::String* destFileName);
        FileInfo* CopyTo(System::String* destFileName);
        FileInfo* CopyTo2(System::String* destFileName, bool overwrite);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::AccessControl::FileSecurity* GetAccessControl();
        System::Security::AccessControl::FileSecurity* GetAccessControl2(System::Security::AccessControl::AccessControlSections includeSections);
        FileInfo* Replace(System::String* destinationFileName, System::String* destinationBackupFileName);
        FileInfo* Replace2(System::String* destinationFileName, System::String* destinationBackupFileName, bool ignoreMetadataErrors);
        void SetAccessControl(System::Security::AccessControl::FileSecurity* fileSecurity);
        virtual bool get_Exists_44ccb569427c51d7() override;
        virtual System::String* get_Name_34b64716a6d0afcd() override;
        bool get_IsReadOnly();
        bool set_IsReadOnly(bool value);
        int64_t get_Length();
        System::String* get_DirectoryName();
        DirectoryInfo* get_Directory();
        
    };
    
    
    struct MANAGED_API FileLoadException : public virtual IOException{
        static constexpr int32_t Result = -2147024894;
        System::String* msg;
        System::String* fileName;
        System::String* fusionLog;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::String* fileName);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* message, System::String* fileName, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::String* get_Message_d211df4045b57cbf() override;
        System::String* get_FileName();
        System::String* get_FusionLog();
        
    };
    
    
    struct MANAGED_API FileNotFoundException : public virtual IOException{
        static constexpr int32_t Result = -2146232799;
        System::String* fileName;
        System::String* fusionLog;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::String* message, System::String* fileName);
        void constructor(System::String* message, System::String* fileName, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_FileName();
        System::String* get_FusionLog();
        virtual System::String* get_Message_d211df4045b57cbf() override;
        
    };
    
    
    struct MANAGED_API FileStreamAsyncResult : public virtual System::Object, public virtual System::IAsyncResult{
        System::Object* state;
        bool completed;
        bool done;
        System::Exception* exc;
        System::Threading::ManualResetEvent* wh;
        System::AsyncCallback* cb;
        bool completedSynch;
        cli::array<unsigned char>* Buffer2;
        int32_t Offset;
        int32_t Count;
        int32_t OriginalCount;
        int32_t BytesRead;
        System::AsyncCallback* realcb;
        
        void constructor(System::AsyncCallback* cb, System::Object* state);
        static void CBWrapper(System::IAsyncResult* ares);
        void SetComplete(System::Exception* e);
        void SetComplete2(System::Exception* e, int32_t nbytes);
        void SetComplete3(System::Exception* e, int32_t nbytes, bool synch);
        System::Object* get_AsyncState();
        bool get_CompletedSynchronously();
        System::Threading::WaitHandle* get_AsyncWaitHandle();
        bool get_IsCompleted();
        System::Exception* get_Exception();
        bool get_Done();
        bool set_Done(bool value);
        
        virtual System::Object* get_AsyncState_edfadcd905632437() override;
        virtual bool get_CompletedSynchronously_2176ca6518f7b5dc() override;
        virtual System::Threading::WaitHandle* get_AsyncWaitHandle_7620505c49d113f3() override;
        virtual bool get_IsCompleted_908b07d70649b7ff() override;
    };
    
    
    struct MANAGED_API IntPtrStream : public virtual Stream{
        unsigned char* base_address;
        int32_t size;
        int32_t position;
        bool closed;
        System::EventHandler* Closed;
        
        void constructor(void* base_address, int32_t size);
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin loc) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual void Flush_132821400030c993() override;
        virtual void Close_59c62ed53ef2a481() override;
        void* get_BaseAddress();
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        void add_Closed(System::EventHandler* value);
        void remove_Closed(System::EventHandler* value);
        
    };
    
    
    struct MANAGED_API MemoryStream : public virtual Stream{
        bool canWrite;
        bool allowGetBuffer;
        int32_t capacity;
        int32_t length;
        cli::array<unsigned char>* internalBuffer;
        int32_t initialIndex;
        bool expandable;
        bool streamClosed;
        int32_t position;
        int32_t dirty_bytes;
        
        void constructor();
        void constructor(int32_t capacity);
        void constructor(cli::array<unsigned char>* buffer);
        void constructor(cli::array<unsigned char>* buffer, bool writable);
        void constructor(cli::array<unsigned char>* buffer, int32_t index, int32_t count);
        void constructor(cli::array<unsigned char>* buffer, int32_t index, int32_t count, bool writable);
        void constructor(cli::array<unsigned char>* buffer, int32_t index, int32_t count, bool writable, bool publiclyVisible);
        void InternalConstructor(cli::array<unsigned char>* buffer, int32_t index, int32_t count, bool writable, bool publicallyVisible);
        void CheckIfClosedThrowDisposed();
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        virtual void Flush_132821400030c993() override;
        virtual cli::array<unsigned char>* GetBuffer_21f804ce00c165c2();
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin loc) override;
        int32_t CalculateNewCapacity(int32_t minimum);
        void Expand(int32_t newSize);
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual cli::array<unsigned char>* ToArray_ebf8bde16e9d2ad6();
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual void WriteTo_a7b8208fadf74ef1(Stream* stream);
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual int32_t get_Capacity_5e9248c082f69421();
        virtual int32_t set_Capacity_8fc8ba2e9ae6df4c(int32_t value);
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        
    };
    
    
    struct MANAGED_API MonoIO : public virtual System::Object{
        static int32_t FileAlreadyExistsHResult;
        static FileAttributes InvalidFileAttributes;
        static void* InvalidHandle;
        
        MonoIO();
        void constructor();
        static void static_constructor();
        static System::Exception* GetException(MonoIOError error);
        static System::Exception* GetException2(System::String* path, MonoIOError error);
        static bool CreateDirectory(System::String* path, MonoIOError error);
        static bool RemoveDirectory(System::String* path, MonoIOError error);
        static cli::array<System::String*>* GetFileSystemEntries(System::String* path, System::String* path_with_pattern, int32_t attrs, int32_t mask, MonoIOError error);
        static System::String* GetCurrentDirectory(MonoIOError error);
        static bool SetCurrentDirectory(System::String* path, MonoIOError error);
        static bool MoveFile(System::String* path, System::String* dest, MonoIOError error);
        static bool CopyFile(System::String* path, System::String* dest, bool overwrite, MonoIOError error);
        static bool DeleteFile(System::String* path, MonoIOError error);
        static bool ReplaceFile(System::String* sourceFileName, System::String* destinationFileName, System::String* destinationBackupFileName, bool ignoreMetadataErrors, MonoIOError error);
        static FileAttributes GetFileAttributes(System::String* path, MonoIOError error);
        static bool SetFileAttributes(System::String* path, FileAttributes attrs, MonoIOError error);
        static MonoFileType GetFileType(void* handle, MonoIOError error);
        static System::String* FindFirst(System::String* path, System::String* pattern, FileAttributes result_attr, MonoIOError error, void* handle);
        static System::String* FindNext(void* handle, FileAttributes result_attr, MonoIOError error);
        static int32_t FindClose(void* handle);
        static bool Exists(System::String* path, MonoIOError error);
        static bool ExistsFile(System::String* path, MonoIOError error);
        static bool ExistsDirectory(System::String* path, MonoIOError error);
        static bool ExistsSymlink(System::String* path, MonoIOError error);
        static bool GetFileStat(System::String* path, MonoIOStat stat, MonoIOError error);
        static void* Open(System::String* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, MonoIOError error);
        static bool Close(void* handle, MonoIOError error);
        static int32_t Read(void* handle, cli::array<unsigned char>* dest, int32_t dest_offset, int32_t count, MonoIOError error);
        static int32_t Write(void* handle, cli::array<unsigned char>* src, int32_t src_offset, int32_t count, MonoIOError error);
        static int64_t Seek(void* handle, int64_t offset, SeekOrigin origin, MonoIOError error);
        static bool Flush(void* handle, MonoIOError error);
        static int64_t GetLength(void* handle, MonoIOError error);
        static bool SetLength(void* handle, int64_t length, MonoIOError error);
        static bool SetFileTime(void* handle, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, MonoIOError error);
        static bool SetFileTime2(System::String* path, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, MonoIOError error);
        static bool SetCreationTime(System::String* path, System::DateTime dateTime, MonoIOError error);
        static bool SetLastAccessTime(System::String* path, System::DateTime dateTime, MonoIOError error);
        static bool SetLastWriteTime(System::String* path, System::DateTime dateTime, MonoIOError error);
        static bool SetFileTime3(System::String* path, int32_t type, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, System::DateTime dateTime, MonoIOError error);
        static void Lock(void* handle, int64_t position, int64_t length, MonoIOError error);
        static void Unlock(void* handle, int64_t position, int64_t length, MonoIOError error);
        static bool CreatePipe(void* read_handle, void* write_handle);
        static bool DuplicateHandle(void* source_process_handle, void* source_handle, void* target_process_handle, void* target_handle, int32_t access, int32_t inherit, int32_t options);
        static int32_t GetTempPath(System::String* path);
        static void* get_ConsoleOutput();
        static void* get_ConsoleInput();
        static void* get_ConsoleError();
        static char16_t get_VolumeSeparatorChar();
        static char16_t get_DirectorySeparatorChar();
        static char16_t get_AltDirectorySeparatorChar();
        static char16_t get_PathSeparator();
        
    };
    
    
    struct MANAGED_API Path : public virtual System::Object{
        static cli::array<char16_t>* InvalidPathChars;
        static char16_t AltDirectorySeparatorChar;
        static char16_t DirectorySeparatorChar;
        static char16_t PathSeparator;
        static System::String* DirectorySeparatorStr;
        static char16_t VolumeSeparatorChar;
        static cli::array<char16_t>* PathSeparatorChars;
        static bool dirEqualsVolume;
        
        Path();
        static void static_constructor();
        static System::String* ChangeExtension(System::String* path, System::String* extension);
        static System::String* Combine(System::String* path1, System::String* path2);
        static System::String* CleanPath(System::String* s);
        static System::String* GetDirectoryName(System::String* path);
        static System::String* GetExtension(System::String* path);
        static System::String* GetFileName(System::String* path);
        static System::String* GetFileNameWithoutExtension(System::String* path);
        static System::String* GetFullPath(System::String* path);
        static System::String* WindowsDriveAdjustment(System::String* path);
        static System::String* InsecureGetFullPath(System::String* path);
        static bool IsDsc(char16_t c);
        static System::String* GetPathRoot(System::String* path);
        static System::String* GetTempFileName();
        static System::String* GetTempPath();
        static System::String* get_temp_path();
        static bool HasExtension(System::String* path);
        static bool IsPathRooted(System::String* path);
        static cli::array<char16_t>* GetInvalidFileNameChars();
        static cli::array<char16_t>* GetInvalidPathChars();
        static System::String* GetRandomFileName();
        static int32_t findExtension(System::String* path);
        static System::String* GetServerAndShare(System::String* path);
        static bool SameRoot(System::String* root, System::String* path);
        static System::String* CanonicalizePath(System::String* path);
        static bool IsPathSubsetOf(System::String* subset, System::String* path);
        static System::String* Combine2(cli::array<System::String*>* paths);
        static System::String* Combine3(System::String* path1, System::String* path2, System::String* path3);
        static System::String* Combine4(System::String* path1, System::String* path2, System::String* path3, System::String* path4);
        static void Validate(System::String* path);
        static void Validate2(System::String* path, System::String* parameterName);
        
    };
    
    
    struct MANAGED_API PathTooLongException : public virtual IOException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API SearchPattern : public virtual System::Object{
        static cli::array<char16_t>* WildcardChars;
        
        SearchPattern();
        void constructor();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API NullStream : public virtual Stream{
        
        void constructor();
        virtual void Flush_132821400030c993() override;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        
    };
    
    
    struct MANAGED_API SynchronizedStream : public virtual Stream{
        Stream* source;
        System::Object* slock;
        
        void constructor(Stream* source);
        virtual void Flush_132821400030c993() override;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        
    };
    
    
    struct MANAGED_API NullStreamReader : public virtual StreamReader{
        
        void constructor();
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        virtual Stream* get_BaseStream_cbffc4235bf758d4() override;
        virtual System::Text::Encoding* get_CurrentEncoding_b15371dbc6908554() override;
        
    };
    
    
    struct MANAGED_API StringReader : public virtual TextReader{
        System::String* source;
        int32_t nextChar;
        int32_t sourceLength;
        static cli::array<char16_t>* cr_lf;
        
        void constructor(System::String* s);
        virtual void Close_7c5ccd5fb8dfeba3() override;
        virtual void Dispose_6de32a3267835eb1(bool disposing) override;
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        static void ObjectDisposedException2();
        
    };
    
    
    struct MANAGED_API StringWriter : public virtual TextWriter{
        System::Text::StringBuilder* internalString;
        bool disposed;
        
        void constructor();
        void constructor(System::IFormatProvider* formatProvider);
        void constructor(System::Text::StringBuilder* sb);
        void constructor(System::Text::StringBuilder* sb, System::IFormatProvider* formatProvider);
        virtual void Close_745be624b802d9f6() override;
        virtual void Dispose_6868d8c2d2b3dfb7(bool disposing) override;
        virtual System::Text::StringBuilder* GetStringBuilder_dca6edbf4154476b();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual void Write_96ccae6b0b267024(char16_t value) override;
        virtual void Write_dcf5e45abd9e11c4(System::String* value) override;
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual System::Text::Encoding* get_Encoding_55955d94411af675() override;
        
    };
    
    
    struct MANAGED_API NullTextReader : public virtual TextReader{
        
        void constructor();
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        
    };
    
    
    struct MANAGED_API SynchronizedReader : public virtual TextReader{
        TextReader* reader;
        
        void constructor(TextReader* reader);
        virtual void Close_7c5ccd5fb8dfeba3() override;
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        virtual int32_t ReadBlock_f3ca37abea795c97(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        
    };
    
    
    struct MANAGED_API NullTextWriter : public virtual TextWriter{
        
        void constructor();
        virtual void Write_dcf5e45abd9e11c4(System::String* s) override;
        virtual void Write_96ccae6b0b267024(char16_t value) override;
        virtual void Write_61da934607a8065a(cli::array<char16_t>* value, int32_t index, int32_t count) override;
        virtual System::Text::Encoding* get_Encoding_55955d94411af675() override;
        
    };
    
    
    struct MANAGED_API SynchronizedWriter : public virtual TextWriter{
        TextWriter* writer;
        bool neverClose;
        
        void constructor(TextWriter* writer);
        void constructor(TextWriter* writer, bool neverClose);
        virtual void Close_745be624b802d9f6() override;
        virtual void Flush_c8220c56815bfd56() override;
        virtual void Write_443a7a25c054668(bool value) override;
        virtual void Write_96ccae6b0b267024(char16_t value) override;
        virtual void Write_6d89396c0c5b77c4(cli::array<char16_t>* value) override;
        virtual void Write_222d042b1869986(System::Decimal value) override;
        virtual void Write_12c6f74b27421524(int32_t value) override;
        virtual void Write_bda7727b5cfc5345(int64_t value) override;
        virtual void Write_55565de44c1e3104(System::Object* value) override;
        virtual void Write_3945ee193bccdd42(float value) override;
        virtual void Write_dcf5e45abd9e11c4(System::String* value) override;
        virtual void Write_8d2ce38f16ef9fe3(uint32_t value) override;
        virtual void Write_bed5c65a22d487e6(uint64_t value) override;
        virtual void Write_f2bf6875dbaeba6a(System::String* format, System::Object* value) override;
        virtual void Write_e2bf1f4b5968ab9(System::String* format, cli::array<System::Object*>* value) override;
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual void Write_d1ec280d8f085d73(System::String* format, System::Object* arg0, System::Object* arg1) override;
        virtual void Write_4d2ac9c7b9e5e3b6(System::String* format, System::Object* arg0, System::Object* arg1, System::Object* arg2) override;
        virtual void WriteLine_f0ca76dc02634177() override;
        virtual void WriteLine_711f0f7d57a6b9ec(bool value) override;
        virtual void WriteLine_5db503756aad6b7e(char16_t value) override;
        virtual void WriteLine_4e1d057f0df9eb1f(cli::array<char16_t>* value) override;
        virtual void WriteLine_7215ae0192c985c9(System::Decimal value) override;
        virtual void WriteLine_e88c356ba9c2db75(double value) override;
        virtual void WriteLine_4f98173db23c2ff8(int32_t value) override;
        virtual void WriteLine_79f607f527127dc5(int64_t value) override;
        virtual void WriteLine_dfd9dff343620f4d(System::Object* value) override;
        virtual void WriteLine_1fcb4a3f9e16c04c(float value) override;
        virtual void WriteLine_27fb29d2c5b390c7(System::String* value) override;
        virtual void WriteLine_cf4ece46b08b7fc4(uint32_t value) override;
        virtual void WriteLine_ee19bfc9492f25dd(uint64_t value) override;
        virtual void WriteLine_5eb6d2f1667d4085(System::String* format, System::Object* value) override;
        virtual void WriteLine_b743f1a08f47f965(System::String* format, cli::array<System::Object*>* value) override;
        virtual void WriteLine_9dea657622eb9bf4(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual void WriteLine_b33fb6632b99859a(System::String* format, System::Object* arg0, System::Object* arg1) override;
        virtual void WriteLine_10ed8cd26a3939e1(System::String* format, System::Object* arg0, System::Object* arg1, System::Object* arg2) override;
        virtual System::Text::Encoding* get_Encoding_55955d94411af675() override;
        virtual System::IFormatProvider* get_FormatProvider_5878562ed72ff523() override;
        virtual System::String* get_NewLine_22799fa26f7999ac() override;
        virtual System::String* set_NewLine_7d29519e1b46fe0b(System::String* value) override;
        
    };
    
    
    struct MANAGED_API UnexceptionalStreamReader : public virtual StreamReader{
        static cli::array<bool>* newline;
        static char16_t newlineChar;
        
        UnexceptionalStreamReader();
        static void static_constructor();
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        virtual int32_t Peek_82f04bf3cd196dfd() override;
        virtual int32_t Read_1d437d5ac2290f2b() override;
        virtual int32_t Read_24d2c98803d927e8(cli::array<char16_t>* dest_buffer, int32_t index, int32_t count) override;
        bool CheckEOL(char16_t current);
        virtual System::String* ReadLine_51552a49261f929e() override;
        virtual System::String* ReadToEnd_f683943dd5002e1e() override;
        
    };
    
    
    struct MANAGED_API UnexceptionalStreamWriter : public virtual StreamWriter{
        
        void constructor(Stream* stream, System::Text::Encoding* encoding);
        virtual void Flush_c8220c56815bfd56() override;
        virtual void Write_61da934607a8065a(cli::array<char16_t>* buffer, int32_t index, int32_t count) override;
        virtual void Write_96ccae6b0b267024(char16_t value) override;
        virtual void Write_6d89396c0c5b77c4(cli::array<char16_t>* value) override;
        virtual void Write_dcf5e45abd9e11c4(System::String* value) override;
        
    };
    
    
    struct MANAGED_API UnmanagedMemoryAccessor : public virtual System::Object, public virtual System::IDisposable{
        System::Runtime::InteropServices::SafeBuffer* buffer;
        int64_t offset;
        int64_t capacity;
        bool canwrite;
        bool canread;
        
        void constructor();
        void constructor(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t capacity);
        void constructor(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t capacity, FileAccess access);
        void Initialize(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t capacity, FileAccess access);
        void Dispose();
        virtual void Dispose_fa22ed4101a7af38(bool disposing);
        unsigned char ReadByte(int64_t position);
        bool ReadBoolean(int64_t position);
        char16_t ReadChar(int64_t position);
        System::Decimal ReadDecimal(int64_t position);
        double ReadDouble(int64_t position);
        int16_t ReadInt16(int64_t position);
        int32_t ReadInt32(int64_t position);
        int64_t ReadInt64(int64_t position);
        signed char ReadSByte(int64_t position);
        float ReadSingle(int64_t position);
        uint16_t ReadUInt16(int64_t position);
        uint32_t ReadUInt32(int64_t position);
        uint64_t ReadUInt64(int64_t position);
        template<class T>
        void Read_1(int64_t position, T structure);
        template<class T>
        int32_t ReadArray_1(int64_t position, cli::array<T>* array, int32_t offset, int32_t count);
        void Write(int64_t position, bool value);
        void Write2(int64_t position, unsigned char value);
        void Write3(int64_t position, char16_t value);
        void Write4(int64_t position, System::Decimal value);
        void Write5(int64_t position, double value);
        void Write6(int64_t position, int16_t value);
        void Write7(int64_t position, int32_t value);
        void Write8(int64_t position, int64_t value);
        void Write9(int64_t position, signed char value);
        void Write10(int64_t position, float value);
        void Write11(int64_t position, uint16_t value);
        void Write12(int64_t position, uint32_t value);
        void Write13(int64_t position, uint64_t value);
        template<class T>
        void Write_1(int64_t position, T structure);
        template<class T>
        void WriteArray_1(int64_t position, cli::array<T>* array, int32_t offset, int32_t count);
        bool get_CanRead();
        bool get_CanWrite();
        int64_t get_Capacity();
        bool get_IsOpen();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API UnmanagedMemoryStream : public virtual Stream{
        int64_t length;
        bool closed;
        int64_t capacity;
        FileAccess fileaccess;
        void* initial_pointer;
        int64_t initial_position;
        int64_t current_position;
        System::Runtime::InteropServices::SafeBuffer* safebuffer;
        System::EventHandler* Closed;
        
        void constructor();
        void constructor(unsigned char* pointer, int64_t length);
        void constructor(unsigned char* pointer, int64_t length, int64_t capacity, FileAccess access);
        void constructor(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t length);
        void constructor(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t length, FileAccess access);
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, SeekOrigin loc) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Flush_132821400030c993() override;
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        void Initialize(unsigned char* pointer, int64_t length, int64_t capacity, FileAccess access);
        void Initialize2(System::Runtime::InteropServices::SafeBuffer* buffer, int64_t offset, int64_t length, FileAccess access);
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        int64_t get_Capacity();
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        unsigned char* get_PositionPointer();
        unsigned char* set_PositionPointer(unsigned char* value);
        void add_Closed(System::EventHandler* value);
        void remove_Closed(System::EventHandler* value);
        
    };
    
}}
namespace System { namespace IO { namespace IsolatedStorage {
    
    struct MANAGED_API IsolatedStorageException : public virtual System::Exception{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API IsolatedStorageFile : public virtual IsolatedStorage, public virtual System::IDisposable{
        bool _resolved;
        uint64_t _maxSize;
        System::Security::Policy::Evidence* _fullEvidences;
        static System::Threading::Mutex* mutex;
        bool closed;
        bool disposed;
        System::IO::DirectoryInfo* directory;
        
        IsolatedStorageFile();
        void constructor(IsolatedStorageScope scope);
        void constructor(IsolatedStorageScope scope, System::String* location);
        static void static_constructor();
        virtual void Finalize_7a689dd73f4448e9();
        static System::Collections::IEnumerator* GetEnumerator(IsolatedStorageScope scope);
        static IsolatedStorageFile* GetStore(IsolatedStorageScope scope, System::Security::Policy::Evidence* domainEvidence, System::Type* domainEvidenceType, System::Security::Policy::Evidence* assemblyEvidence, System::Type* assemblyEvidenceType);
        static IsolatedStorageFile* GetStore2(IsolatedStorageScope scope, System::Object* domainIdentity, System::Object* assemblyIdentity);
        static IsolatedStorageFile* GetStore3(IsolatedStorageScope scope, System::Type* domainEvidenceType, System::Type* assemblyEvidenceType);
        static IsolatedStorageFile* GetStore4(IsolatedStorageScope scope, System::Object* applicationIdentity);
        static IsolatedStorageFile* GetStore5(IsolatedStorageScope scope, System::Type* applicationEvidenceType);
        static IsolatedStorageFile* GetMachineStoreForApplication();
        static IsolatedStorageFile* GetMachineStoreForAssembly();
        static IsolatedStorageFile* GetMachineStoreForDomain();
        static IsolatedStorageFile* GetUserStoreForApplication();
        static IsolatedStorageFile* GetUserStoreForAssembly();
        static IsolatedStorageFile* GetUserStoreForDomain();
        static IsolatedStorageFile* GetUserStoreForSite();
        static void Remove2(IsolatedStorageScope scope);
        static System::String* GetIsolatedStorageRoot(IsolatedStorageScope scope);
        static void Demand(IsolatedStorageScope scope);
        static System::Security::Permissions::IsolatedStorageContainment ScopeToContainment(IsolatedStorageScope scope);
        static uint64_t GetDirectorySize(System::IO::DirectoryInfo* di);
        void PostInit();
        void Close();
        void CreateDirectory(System::String* dir);
        void CopyFile(System::String* sourceFileName, System::String* destinationFileName);
        void CopyFile2(System::String* sourceFileName, System::String* destinationFileName, bool overwrite);
        IsolatedStorageFileStream* CreateFile(System::String* path);
        void DeleteDirectory(System::String* dir);
        void DeleteFile(System::String* file);
        void Dispose();
        bool DirectoryExists(System::String* path);
        bool FileExists(System::String* path);
        System::DateTimeOffset GetCreationTime(System::String* path);
        System::DateTimeOffset GetLastAccessTime(System::String* path);
        System::DateTimeOffset GetLastWriteTime(System::String* path);
        cli::array<System::String*>* GetDirectoryNames(System::String* searchPattern);
        cli::array<System::String*>* GetDirectoryNames2();
        cli::array<System::String*>* GetNames(cli::array<System::IO::FileSystemInfo*>* afsi);
        cli::array<System::String*>* GetFileNames(System::String* searchPattern);
        cli::array<System::String*>* GetFileNames2();
        virtual bool IncreaseQuotaTo_ede0fdcdc0552a87(int64_t newQuotaSize) override;
        void MoveDirectory(System::String* sourceDirectoryName, System::String* destinationDirectoryName);
        void MoveFile(System::String* sourceFileName, System::String* destinationFileName);
        IsolatedStorageFileStream* OpenFile(System::String* path, System::IO::FileMode mode);
        IsolatedStorageFileStream* OpenFile2(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access);
        IsolatedStorageFileStream* OpenFile3(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);
        virtual void Remove_b3e3f72785a30fc() override;
        virtual System::Security::Permissions::IsolatedStoragePermission* GetPermission_bd95612ebfcb7e7e(System::Security::PermissionSet* ps) override;
        void CheckOpen();
        void CheckOpen2(bool checkDirExists);
        bool IsPathInStorage(System::String* path);
        System::String* GetNameFromIdentity(System::Object* identity);
        static System::Object* GetTypeFromEvidence(System::Security::Policy::Evidence* e, System::Type* t);
        static System::Object* GetAssemblyIdentityFromEvidence(System::Security::Policy::Evidence* e);
        static System::Object* GetDomainIdentityFromEvidence(System::Security::Policy::Evidence* e);
        void SaveIdentities(System::String* root);
        virtual uint64_t get_CurrentSize_c4d8b3e65a826a34() override;
        virtual uint64_t get_MaximumSize_bf42d10b1bbb7a25() override;
        System::String* get_Root();
        virtual int64_t get_AvailableFreeSpace_18d9a80c1eecd236() override;
        virtual int64_t get_Quota_3816cb7ba1196819() override;
        virtual int64_t get_UsedSize_673e5c0d6520fff9() override;
        static bool get_IsEnabled();
        bool get_IsClosed();
        bool get_IsDisposed();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API IsolatedStorageFileEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        IsolatedStorageScope _scope;
        cli::array<System::String*>* _storages;
        int32_t _pos;
        
        void constructor(IsolatedStorageScope scope, System::String* root);
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API IsolatedStorageFileStream : public virtual System::IO::FileStream{
        
        void constructor(System::String* path, System::IO::FileMode mode);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int32_t bufferSize);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int32_t bufferSize, IsolatedStorageFile* isf);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, IsolatedStorageFile* isf);
        void constructor(System::String* path, System::IO::FileMode mode, System::IO::FileAccess access, IsolatedStorageFile* isf);
        void constructor(System::String* path, System::IO::FileMode mode, IsolatedStorageFile* isf);
        static System::String* CreateIsolatedPath(IsolatedStorageFile* isf, System::String* path, System::IO::FileMode mode);
        virtual System::IAsyncResult* BeginRead_783f127b729b2f0a(cli::array<unsigned char>* buffer, int32_t offset, int32_t numBytes, System::AsyncCallback* userCallback, System::Object* stateObject) override;
        virtual System::IAsyncResult* BeginWrite_85b245acef3a8d4a(cli::array<unsigned char>* buffer, int32_t offset, int32_t numBytes, System::AsyncCallback* userCallback, System::Object* stateObject) override;
        virtual int32_t EndRead_fffd36c36fbcca5b(System::IAsyncResult* asyncResult) override;
        virtual void EndWrite_4a9b8c2a22f9c4e3(System::IAsyncResult* asyncResult) override;
        virtual void Flush_132821400030c993() override;
        virtual void Flush_45c7245c20dbb092(bool flushToDisk) override;
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual int32_t ReadByte_61a294e42318f99() override;
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, System::IO::SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void WriteByte_4404d6329af3b6d5(unsigned char value) override;
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual Microsoft::Win32::SafeHandles::SafeFileHandle* get_SafeFileHandle_b919aff741b12494() override;
        virtual void* get_Handle_74aea2418d83b5a0() override;
        virtual bool get_IsAsync_f1144e989e0e63e() override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        
    };
    
    
    struct MANAGED_API IsolatedStorageSecurityState : public virtual System::Security::SecurityState{
        
        void constructor();
        virtual void EnsureState_61529bd496462ad() override;
        IsolatedStorageSecurityOptions get_Options();
        int64_t get_Quota();
        int64_t set_Quota(int64_t value);
        int64_t get_UsedSize();
        
    };
    
}}}
namespace System { namespace Reflection {
    
    struct MANAGED_API AmbiguousMatchException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ResolveEventHolder : public virtual System::Object{
        ModuleResolveEventHandler* ModuleResolve;
        
        void constructor();
        void add_ModuleResolve(ModuleResolveEventHandler* value);
        void remove_ModuleResolve(ModuleResolveEventHandler* value);
        
    };
    
    
    struct MANAGED_API ResourceCloseHandler : public virtual System::Object{
        Module* module;
        
        void constructor(Module* module);
        void OnClose(System::Object* sender, System::EventArgs* e);
        
    };
    
    
    struct MANAGED_API AssemblyAlgorithmIdAttribute : public virtual System::Attribute{
        uint32_t id;
        
        void constructor(System::Configuration::Assemblies::AssemblyHashAlgorithm algorithmId);
        void constructor(uint32_t algorithmId);
        uint32_t get_AlgorithmId();
        
    };
    
    
    struct MANAGED_API AssemblyCompanyAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* company);
        System::String* get_Company();
        
    };
    
    
    struct MANAGED_API AssemblyConfigurationAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* configuration);
        System::String* get_Configuration();
        
    };
    
    
    struct MANAGED_API AssemblyCopyrightAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* copyright);
        System::String* get_Copyright();
        
    };
    
    
    struct MANAGED_API AssemblyCultureAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* culture);
        System::String* get_Culture();
        
    };
    
    
    struct MANAGED_API AssemblyDefaultAliasAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* defaultAlias);
        System::String* get_DefaultAlias();
        
    };
    
    
    struct MANAGED_API AssemblyDelaySignAttribute : public virtual System::Attribute{
        bool delay;
        
        void constructor(bool delaySign);
        bool get_DelaySign();
        
    };
    
    
    struct MANAGED_API AssemblyDescriptionAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* description);
        System::String* get_Description();
        
    };
    
    
    struct MANAGED_API AssemblyFileVersionAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* version);
        System::String* get_Version();
        
    };
    
    
    struct MANAGED_API AssemblyFlagsAttribute : public virtual System::Attribute{
        uint32_t flags;
        
        void constructor(uint32_t flags);
        void constructor(int32_t assemblyFlags);
        void constructor(AssemblyNameFlags assemblyFlags);
        uint32_t get_Flags();
        int32_t get_AssemblyFlags();
        
    };
    
    
    struct MANAGED_API AssemblyInformationalVersionAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* informationalVersion);
        System::String* get_InformationalVersion();
        
    };
    
    
    struct MANAGED_API AssemblyKeyFileAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* keyFile);
        System::String* get_KeyFile();
        
    };
    
    
    struct MANAGED_API AssemblyKeyNameAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* keyName);
        System::String* get_KeyName();
        
    };
    
    
    struct MANAGED_API AssemblyName : public virtual System::Object, public virtual System::ICloneable, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual System::Runtime::InteropServices::_AssemblyName{
        System::String* name;
        System::String* codebase;
        int32_t major;
        System::Globalization::CultureInfo* cultureinfo;
        AssemblyNameFlags flags;
        System::Configuration::Assemblies::AssemblyHashAlgorithm hashalg;
        StrongNameKeyPair* keypair;
        cli::array<unsigned char>* publicKey;
        cli::array<unsigned char>* keyToken;
        System::Configuration::Assemblies::AssemblyVersionCompatibility versioncompat;
        System::Version* version;
        ProcessorArchitecture processor_architecture;
        int32_t minor;
        int32_t build;
        int32_t revision;
        
        void constructor();
        void constructor(System::String* assemblyName);
        void constructor(System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc);
        static bool ParseName(AssemblyName* aname, System::String* assemblyName);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<unsigned char>* GetPublicKey();
        cli::array<unsigned char>* GetPublicKeyToken();
        cli::array<unsigned char>* InternalGetPublicKeyToken();
        cli::array<unsigned char>* ComputePublicKeyToken();
        static bool ReferenceMatchesDefinition(AssemblyName* reference, AssemblyName* definition);
        void SetPublicKey(cli::array<unsigned char>* publicKey);
        void SetPublicKeyToken(cli::array<unsigned char>* publicKeyToken);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* Clone();
        void OnDeserialization(System::Object* sender);
        static AssemblyName* GetAssemblyName(System::String* assemblyFile);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        ProcessorArchitecture get_ProcessorArchitecture();
        ProcessorArchitecture set_ProcessorArchitecture(ProcessorArchitecture value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::String* get_CodeBase();
        System::String* set_CodeBase(System::String* value);
        System::String* get_EscapedCodeBase();
        System::Globalization::CultureInfo* get_CultureInfo();
        System::Globalization::CultureInfo* set_CultureInfo(System::Globalization::CultureInfo* value);
        AssemblyNameFlags get_Flags();
        AssemblyNameFlags set_Flags(AssemblyNameFlags value);
        System::String* get_FullName();
        System::Configuration::Assemblies::AssemblyHashAlgorithm get_HashAlgorithm();
        System::Configuration::Assemblies::AssemblyHashAlgorithm set_HashAlgorithm(System::Configuration::Assemblies::AssemblyHashAlgorithm value);
        StrongNameKeyPair* get_KeyPair();
        StrongNameKeyPair* set_KeyPair(StrongNameKeyPair* value);
        System::Version* get_Version();
        System::Version* set_Version(System::Version* value);
        System::Configuration::Assemblies::AssemblyVersionCompatibility get_VersionCompatibility();
        System::Configuration::Assemblies::AssemblyVersionCompatibility set_VersionCompatibility(System::Configuration::Assemblies::AssemblyVersionCompatibility value);
        bool get_IsPublicKeyValid();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual void GetIDsOfNames_95a76c89ebfee4d(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_9ad68d87655154c4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_d37b4bcf885883cd(uint32_t pcTInfo) override;
        virtual void Invoke_fc10cebd8e601a2b(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API AssemblyNameProxy : public virtual System::MarshalByRefObject{
        
        void constructor();
        AssemblyName* GetAssemblyName(System::String* assemblyFile);
        
    };
    
    
    struct MANAGED_API AssemblyProductAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* product);
        System::String* get_Product();
        
    };
    
    
    struct MANAGED_API AssemblyTitleAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* title);
        System::String* get_Title();
        
    };
    
    
    struct MANAGED_API AssemblyTrademarkAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* trademark);
        System::String* get_Trademark();
        
    };
    
    
    struct MANAGED_API AssemblyVersionAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* version);
        System::String* get_Version();
        
    };
    
    
    struct MANAGED_API Default : public virtual Binder{
        
        void constructor();
        virtual FieldInfo* BindToField_221370eceb50f96a(BindingFlags bindingAttr, cli::array<FieldInfo*>* match, System::Object* value, System::Globalization::CultureInfo* culture) override;
        virtual MethodBase* BindToMethod_c4d067cd0e5ef7a(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* names, System::Object* state) override;
        static void AdjustArguments(MethodBase* selected, cli::array<System::Object*>* args);
        void ReorderParameters(cli::array<System::String*>* names, cli::array<System::Object*>* args, MethodBase* selected);
        static bool IsArrayAssignable(System::Type* object_type, System::Type* target_type);
        virtual System::Object* ChangeType_330506257d259909(System::Object* value, System::Type* type, System::Globalization::CultureInfo* culture) override;
        virtual void ReorderArgumentArray_b525b590b5921f82(cli::array<System::Object*>* args, System::Object* state) override;
        static bool check_type(System::Type* from, System::Type* to);
        static bool check_arguments(cli::array<System::Type*>* types, cli::array<ParameterInfo*>* args, bool allowByRefMatch);
        virtual MethodBase* SelectMethod_3e1ca0f0e362534f(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        MethodBase* SelectMethod3(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers, bool allowByRefMatch);
        MethodBase* GetBetterMethod(MethodBase* m1, MethodBase* m2, cli::array<System::Type*>* types);
        int32_t CompareCloserType(System::Type* t1, System::Type* t2);
        virtual PropertyInfo* SelectProperty_d299ada322143a6(BindingFlags bindingAttr, cli::array<PropertyInfo*>* match, System::Type* returnType, cli::array<System::Type*>* indexes, cli::array<ParameterModifier>* modifiers) override;
        static int32_t check_arguments_with_score(cli::array<System::Type*>* types, cli::array<ParameterInfo*>* args);
        static int32_t check_type_with_score(System::Type* from, System::Type* to);
        
    };
    
    
    struct MANAGED_API LazyCAttrData : public virtual System::Object{
        Assembly* assembly;
        void* data;
        uint32_t data_length;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CustomAttributeData : public virtual System::Object{
        ConstructorInfo* ctorInfo;
        System::Collections::Generic::IList2<CustomAttributeTypedArgument>* ctorArgs;
        System::Collections::Generic::IList2<CustomAttributeNamedArgument>* namedArgs;
        LazyCAttrData* lazyData;
        
        void constructor();
        void constructor(ConstructorInfo* ctorInfo, Assembly* assembly, void* data, uint32_t data_length);
        static void ResolveArgumentsInternal(ConstructorInfo* ctor, Assembly* assembly, void* data, uint32_t data_length, cli::array<System::Object*>* ctorArgs, cli::array<System::Object*>* namedArgs);
        void ResolveArguments();
        static System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributes(Assembly* target);
        static System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributes2(MemberInfo* target);
        static System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributes3(Module* target);
        static System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributes4(ParameterInfo* target);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        template<class T>
        static cli::array<T>* UnboxValues_1(cli::array<System::Object*>* values);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual ConstructorInfo* get_Constructor_f48295d050610964();
        virtual System::Collections::Generic::IList2<CustomAttributeTypedArgument>* get_ConstructorArguments_6b8ce4268fd7d5c5();
        virtual System::Collections::Generic::IList2<CustomAttributeNamedArgument>* get_NamedArguments_654067baca149b46();
        
    };
    
    
    struct MANAGED_API CustomAttributeFormatException : public virtual System::FormatException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API DefaultMemberAttribute : public virtual System::Attribute{
        System::String* member_name;
        
        void constructor(System::String* memberName);
        System::String* get_MemberName();
        
    };
    
    
    struct MANAGED_API ExceptionHandlingClause : public virtual System::Object{
        System::Type* catch_type;
        int32_t filter_offset;
        ExceptionHandlingClauseOptions flags;
        int32_t try_offset;
        int32_t try_length;
        int32_t handler_offset;
        int32_t handler_length;
        
        void constructor();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Type* get_CatchType_906b541dc686e788();
        virtual int32_t get_FilterOffset_8e51714bf07ed863();
        virtual ExceptionHandlingClauseOptions get_Flags_e2fccf53c41ba67();
        virtual int32_t get_HandlerLength_8ba710d232bc6b57();
        virtual int32_t get_HandlerOffset_706653c7da65b0c4();
        virtual int32_t get_TryLength_a9b9254baf1d581b();
        virtual int32_t get_TryOffset_218c27aee658b662();
        
    };
    
    
    struct MANAGED_API InvalidFilterCriteriaException : public virtual System::ApplicationException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ManifestResourceInfo : public virtual System::Object{
        Assembly* _assembly;
        System::String* _filename;
        ResourceLocation _location;
        
        void constructor();
        void constructor(Assembly* containingAssembly, System::String* containingFileName, ResourceLocation resourceLocation);
        virtual System::String* get_FileName_7c119b8b7cfba9b7();
        virtual Assembly* get_ReferencedAssembly_2b9a0b794797dde5();
        virtual ResourceLocation get_ResourceLocation_4683f601004b7d5c();
        
    };
    
    
    struct MANAGED_API MemberInfoSerializationHolder : public virtual System::Object, public virtual System::Runtime::Serialization::IObjectReference, public virtual System::Runtime::Serialization::ISerializable{
        static constexpr BindingFlags DefaultBinding = (System::Reflection::BindingFlags)60L;
        System::String* _memberName;
        System::String* _memberSignature;
        MemberTypes _memberType;
        System::Type* _reflectedType;
        cli::array<System::Type*>* _genericArguments;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx);
        static void Serialize(System::Runtime::Serialization::SerializationInfo* info, System::String* name, System::Type* klass, System::String* signature, MemberTypes type);
        static void Serialize2(System::Runtime::Serialization::SerializationInfo* info, System::String* name, System::Type* klass, System::String* signature, MemberTypes type, cli::array<System::Type*>* genericArguments);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MethodBody : public virtual System::Object{
        cli::array<ExceptionHandlingClause*>* clauses;
        cli::array<LocalVariableInfo*>* locals;
        cli::array<unsigned char>* il;
        bool init_locals;
        int32_t sig_token;
        int32_t max_stack;
        
        void constructor();
        virtual cli::array<unsigned char>* GetILAsByteArray_faacc6fe29adce28();
        virtual System::Collections::Generic::IList2<ExceptionHandlingClause*>* get_ExceptionHandlingClauses_b568c3bb39d3c6b2();
        virtual System::Collections::Generic::IList2<LocalVariableInfo*>* get_LocalVariables_f574283c2c35a6fa();
        virtual bool get_InitLocals_b7e7a9ce43b221d();
        virtual int32_t get_LocalSignatureMetadataToken_5f2668432362f162();
        virtual int32_t get_MaxStackSize_dcf5f95899d588a4();
        
    };
    
    
    struct MANAGED_API Missing : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        static Missing* Value;
        
        Missing();
        void constructor();
        static void static_constructor();
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MonoAssembly : public virtual Assembly{
        
        void constructor();
        virtual System::Type* GetType_30e9b2dcc4956479(System::String* name, bool throwOnError, bool ignoreCase) override;
        virtual Module* GetModule_d3e09c815c6ebd46(System::String* name) override;
        virtual cli::array<AssemblyName*>* GetReferencedAssemblies_c967ce8a0efd4c58() override;
        virtual cli::array<Module*>* GetModules_1ce70abfc6e0d050(bool getResourceModules) override;
        virtual cli::array<Module*>* GetLoadedModules_db6b585bebc1ac2e(bool getResourceModules) override;
        virtual Assembly* GetSatelliteAssembly_995bfc41ec1f61b8(System::Globalization::CultureInfo* culture) override;
        virtual Assembly* GetSatelliteAssembly_22d0b12d929a333c(System::Globalization::CultureInfo* culture, System::Version* version) override;
        virtual Module* get_ManifestModule_238a73903fb58278() override;
        virtual bool get_GlobalAssemblyCache_db80d4f5ee2824e7() override;
        
    };
    
    
    struct MANAGED_API MonoEvent : public virtual EventInfo, public virtual System::Runtime::Serialization::ISerializable{
        void* klass;
        void* handle;
        
        void constructor();
        virtual MethodInfo* GetAddMethod_e6ed2f5f0e24f59f(bool nonPublic) override;
        virtual MethodInfo* GetRaiseMethod_da2f94f17ce18705(bool nonPublic) override;
        virtual MethodInfo* GetRemoveMethod_2709ba07e73fded4(bool nonPublic) override;
        virtual cli::array<MethodInfo*>* GetOtherMethods_cea105c0bef756da(bool nonPublic) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        virtual EventAttributes get_Attributes_3412d62533ff880() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
        virtual System::String* ToString_7bb73a9f3918b46f() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MonoField : public virtual FieldInfo, public virtual System::Runtime::Serialization::ISerializable{
        void* klass;
        System::RuntimeFieldHandle fhandle;
        System::String* name;
        System::Type* type;
        FieldAttributes attrs;
        
        void constructor();
        System::Type* ResolveType();
        System::Type* GetParentType(bool declaring);
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual int32_t GetFieldOffset_309c846c3e72bf1() override;
        System::Object* GetValueInternal(System::Object* obj);
        virtual System::Object* GetValue_57ad13b528e8b8a5(System::Object* obj) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static void SetValueInternal(FieldInfo* fi, System::Object* obj, System::Object* value);
        virtual void SetValue_b73df766c23f1507(System::Object* obj, System::Object* val, BindingFlags invokeAttr, Binder* binder, System::Globalization::CultureInfo* culture) override;
        MonoField* Clone(System::String* newName);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Object* GetRawConstantValue_6b30cc96112d2961() override;
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        void CheckGeneric();
        virtual FieldAttributes get_Attributes_ecc2fe2071b9c047() override;
        virtual System::RuntimeFieldHandle get_FieldHandle_43fbd13b33ef15a8() override;
        virtual System::Type* get_FieldType_1dab4079098d7fff() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
        virtual System::String* ToString_f22c3c4f8be6702d() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MonoGenericClass : public virtual System::Type{
        static constexpr BindingFlags flags = (System::Reflection::BindingFlags)62L;
        System::Type* generic_type;
        cli::array<System::Type*>* type_arguments;
        bool initialized;
        System::Collections::Hashtable* fields;
        int32_t event_count;
        System::Collections::Hashtable* ctors;
        System::Collections::Hashtable* methods;
        
        void constructor();
        void constructor(System::Type* tb, cli::array<System::Type*>* args);
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        void initialize(cli::array<MethodInfo*>* methods, cli::array<ConstructorInfo*>* ctors, cli::array<FieldInfo*>* fields, cli::array<PropertyInfo*>* properties, cli::array<EventInfo*>* events);
        static void register_with_runtime(System::Type* type);
        cli::array<EventInfo*>* GetEventsFromGTD(BindingFlags flags);
        cli::array<ConstructorInfo*>* GetConstructorsFromGTD(BindingFlags flags);
        cli::array<FieldInfo*>* GetFieldsFromGTD(BindingFlags bf);
        cli::array<MethodInfo*>* GetMethodsFromGTDWithHint(BindingFlags hint);
        cli::array<ConstructorInfo*>* GetConstructorsFromGTDWithHint(BindingFlags hint);
        static System::Type* PeelType(System::Type* t);
        static cli::array<PropertyInfo*>* GetPropertiesInternal(System::Type* type, BindingFlags bf);
        cli::array<System::Type*>* GetInterfacesFromGTD();
        void initialize2();
        System::Type* GetParentType();
        System::Type* InflateType(System::Type* type);
        System::Type* InflateType2(System::Type* type, cli::array<System::Type*>* method_args);
        static System::Type* InflateType3(System::Type* type, cli::array<System::Type*>* type_args, cli::array<System::Type*>* method_args);
        cli::array<System::Type*>* GetInterfacesInternal();
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual bool IsValueTypeImpl_fe1651255927f3c6() override;
        virtual MethodInfo* GetMethod_c725b8f4a943d5c8(MethodInfo* fromNoninstanciated) override;
        virtual ConstructorInfo* GetConstructor_1dd1da77cc4fe364(ConstructorInfo* fromNoninstanciated) override;
        virtual FieldInfo* GetField_4da1f61e7e2a6f8c(FieldInfo* fromNoninstanciated) override;
        virtual cli::array<MethodInfo*>* GetMethods_c5b4e5d4877e6672(BindingFlags bf) override;
        cli::array<MethodInfo*>* GetMethodsInternal(BindingFlags bf, MonoGenericClass* reftype);
        virtual cli::array<ConstructorInfo*>* GetConstructors_736b6e990b94b352(BindingFlags bf) override;
        cli::array<ConstructorInfo*>* GetConstructorsInternal(BindingFlags bf, MonoGenericClass* reftype);
        virtual cli::array<FieldInfo*>* GetFields_369be5ac49d99f8(BindingFlags bf) override;
        cli::array<FieldInfo*>* GetFieldsInternal(BindingFlags bf, MonoGenericClass* reftype);
        virtual cli::array<PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(BindingFlags bf) override;
        cli::array<PropertyInfo*>* GetPropertiesInternal2(BindingFlags bf, MonoGenericClass* reftype);
        virtual cli::array<EventInfo*>* GetEvents_a960b087e4d67be2(BindingFlags bf) override;
        cli::array<EventInfo*>* GetEventsInternal(BindingFlags bf, MonoGenericClass* reftype);
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(BindingFlags bf) override;
        virtual bool IsAssignableFrom_e3aa32d778e63a90(System::Type* c) override;
        System::String* format_name(bool full_name, bool assembly_qualified);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Type* GetGenericTypeDefinition_15f8fc7813e8e8bf() override;
        virtual cli::array<System::Type*>* GetGenericArguments_a7fb476275cfe9a3() override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual EventInfo* GetEvent_7f053fa54114e387(System::String* name, BindingFlags bindingAttr) override;
        virtual FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, BindingFlags bindingAttr) override;
        virtual cli::array<MemberInfo*>* GetMembers_54432b0ff6e99174(BindingFlags bindingAttr) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, BindingFlags bindingAttr) override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, BindingFlags invokeAttr, Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, BindingFlags bindingAttr, Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        bool get_IsCreated();
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        virtual Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual bool get_ContainsGenericParameters_19598881dd690ad3() override;
        virtual bool get_IsGenericTypeDefinition_8008dd501dc43926() override;
        virtual bool get_IsGenericType_4db8ddd5b97f3c14() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        
    };
    
    
    struct MANAGED_API MonoGenericMethod : public virtual MonoMethod{
        
        void constructor();
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        
    };
    
    
    struct MANAGED_API MonoGenericCMethod : public virtual MonoCMethod{
        
        void constructor();
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        
    };
    
    
    struct MANAGED_API MonoModule : public virtual Module{
        
        void constructor();
        virtual bool IsResource_27dec1ebb40006c6() override;
        virtual cli::array<System::Type*>* FindTypes_fd05c708caa859b8(TypeFilter* filter, System::Object* filterCriteria) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_60f12c5b82d89770(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit) override;
        virtual FieldInfo* GetField_41336984e4f8fc62(System::String* name, BindingFlags bindingAttr) override;
        virtual cli::array<FieldInfo*>* GetFields_676a5dd50d936280(BindingFlags bindingFlags) override;
        virtual MethodInfo* GetMethodImpl_6896a740547de21d(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual cli::array<MethodInfo*>* GetMethods_df7587a505f60ad1(BindingFlags bindingFlags) override;
        virtual void GetPEKind_7f6df4eff35de4ca(PortableExecutableKinds peKind, ImageFileMachine machine) override;
        virtual System::Type* GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase) override;
        virtual bool IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit) override;
        virtual FieldInfo* ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual MemberInfo* ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual MethodBase* ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual System::String* ResolveString_f0f214b35440d5e7(int32_t metadataToken) override;
        virtual System::Type* ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual cli::array<unsigned char>* ResolveSignature_a46b44b280a2cd11(int32_t metadataToken) override;
        virtual System::Security::Cryptography::X509Certificates::X509Certificate2* GetSignerCertificate_9251eb29d4d8fa27() override;
        virtual cli::array<System::Type*>* GetTypes_a0a49ca31fb27210() override;
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_efa981070afbf622() override;
        virtual Assembly* get_Assembly_dbea84123403c0aa() override;
        virtual System::String* get_Name_51eff21286003cfa() override;
        virtual System::String* get_ScopeName_da7d7aa6d0cd103f() override;
        virtual int32_t get_MDStreamVersion_8976919ee80930d7() override;
        virtual System::Guid get_ModuleVersionId_d7f4c95bdb0ad1b2() override;
        virtual System::String* get_FullyQualifiedName_ae33b8f6fc78fb8f() override;
        virtual int32_t get_MetadataToken_a9fc5f43a9908cd0() override;
        
    };
    
    
    struct MANAGED_API MonoProperty : public virtual PropertyInfo, public virtual System::Runtime::Serialization::ISerializable{
        void* klass;
        void* prop;
        MonoPropertyInfo info;
        PInfo cached;
        GetterAdapter* cached_getter;
        
        void constructor();
        void CachePropertyInfo(PInfo flags);
        virtual cli::array<MethodInfo*>* GetAccessors_9a7eb6d477c42a6d(bool nonPublic) override;
        virtual MethodInfo* GetGetMethod_598f563fd3755017(bool nonPublic) override;
        virtual cli::array<ParameterInfo*>* GetIndexParameters_66437e9b713ac629() override;
        virtual MethodInfo* GetSetMethod_8896cb22c4f8d900(bool nonPublic) override;
        virtual System::Object* GetConstantValue_175a0b35c21225ba() override;
        virtual System::Object* GetRawConstantValue_dd88d19bf0ed90e4() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        template<class T, class R>
        static System::Object* GetterAdapterFrame_2(Getter<T, R>* getter, System::Object* obj);
        template<class R>
        static System::Object* StaticGetterAdapterFrame_1(StaticGetter<R>* getter, System::Object* obj);
        static GetterAdapter* CreateGetterDelegate(MethodInfo* method);
        virtual System::Object* GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index) override;
        virtual System::Object* GetValue_e428a2cef74e332d(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual void SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual cli::array<System::Type*>* GetOptionalCustomModifiers_f21d0b942de3b4e() override;
        virtual cli::array<System::Type*>* GetRequiredCustomModifiers_81237c6c21cb723() override;
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_8a5353617f57fb2() override;
        virtual PropertyAttributes get_Attributes_44d275d722218b81() override;
        virtual bool get_CanRead_f4dae9b567f6ce33() override;
        virtual bool get_CanWrite_a9c71933951c9826() override;
        virtual System::Type* get_PropertyType_68b4b04678fe4f8a() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
        virtual System::Object* GetValue_2c0ea8f469169d57(System::Object* obj, cli::array<System::Object*>* index) override;
        virtual System::String* ToString_23ebaa63b8f17cf6() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API ObfuscateAssemblyAttribute : public virtual System::Attribute{
        bool is_private;
        bool strip;
        
        void constructor(bool assemblyIsPrivate);
        bool get_AssemblyIsPrivate();
        bool get_StripAfterObfuscation();
        bool set_StripAfterObfuscation(bool value);
        
    };
    
    
    struct MANAGED_API ObfuscationAttribute : public virtual System::Attribute{
        bool exclude;
        bool strip;
        bool applyToMembers;
        System::String* feature;
        
        void constructor();
        bool get_Exclude();
        bool set_Exclude(bool value);
        bool get_StripAfterObfuscation();
        bool set_StripAfterObfuscation(bool value);
        bool get_ApplyToMembers();
        bool set_ApplyToMembers(bool value);
        System::String* get_Feature();
        System::String* set_Feature(System::String* value);
        
    };
    
    
    struct MANAGED_API ParameterInfo : public virtual System::Object, public virtual ICustomAttributeProvider, public virtual System::Runtime::InteropServices::_ParameterInfo{
        System::Type* ClassImpl;
        System::Object* DefaultValueImpl;
        MemberInfo* MemberImpl;
        System::String* NameImpl;
        int32_t PositionImpl;
        ParameterAttributes AttrsImpl;
        Emit::UnmanagedMarshal* marshalAs;
        
        void constructor();
        void constructor(Emit::ParameterBuilder* pb, System::Type* type, MemberInfo* member, int32_t position);
        void constructor(ParameterInfo* pinfo, System::Type* type, MemberInfo* member, int32_t position);
        void constructor(ParameterInfo* pinfo, MemberInfo* member);
        void constructor(System::Type* type, MemberInfo* member, Emit::UnmanagedMarshal* marshalAs);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetMetadataToken();
        virtual cli::array<System::Object*>* GetCustomAttributes_fa76a8481b122aa(bool inherit);
        virtual cli::array<System::Object*>* GetCustomAttributes_1c88eb3824a80dfa(System::Type* attributeType, bool inherit);
        virtual bool IsDefined_f77a22c7742d1e97(System::Type* attributeType, bool inherit);
        cli::array<System::Object*>* GetPseudoCustomAttributes();
        cli::array<System::Type*>* GetTypeModifiers(bool optional);
        virtual cli::array<System::Type*>* GetOptionalCustomModifiers_52cfca5fa091f4a1();
        virtual cli::array<System::Type*>* GetRequiredCustomModifiers_36db32977af9cbab();
        virtual System::Collections::Generic::IList2<CustomAttributeData*>* GetCustomAttributesData_a3b4a484000f0762();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Type* get_ParameterType_97c5fa09a0b988d();
        virtual ParameterAttributes get_Attributes_450c629a82b88ec3();
        virtual System::Object* get_DefaultValue_3b49b70b95542e87();
        bool get_IsIn();
        bool get_IsLcid();
        bool get_IsOptional();
        bool get_IsOut();
        bool get_IsRetval();
        virtual MemberInfo* get_Member_3718e63e31df2b4e();
        virtual System::String* get_Name_1ad7a68577256740();
        virtual int32_t get_Position_1e6976b43412375f();
        virtual int32_t get_MetadataToken_ce27622109f762fd();
        virtual System::Object* get_RawDefaultValue_e0f20165bb28839();
        
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
        virtual void GetIDsOfNames_4283527bc2e9c90c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_810b7e55fcaab9e9(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_cf26089fea501d0(uint32_t pcTInfo) override;
        virtual void Invoke_4b0fe4a4b992b2d2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API Pointer : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        void* data;
        System::Type* type;
        
        void constructor();
        static System::Object* Box(void* ptr, System::Type* type);
        static void* Unbox(System::Object* ptr);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API ReflectionTypeLoadException : public virtual System::SystemException{
        cli::array<System::Exception*>* loaderExceptions;
        cli::array<System::Type*>* types;
        
        void constructor(cli::array<System::Type*>* classes, cli::array<System::Exception*>* exceptions);
        void constructor(cli::array<System::Type*>* classes, cli::array<System::Exception*>* exceptions, System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext sc);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        cli::array<System::Type*>* get_Types();
        cli::array<System::Exception*>* get_LoaderExceptions();
        
    };
    
    
    struct MANAGED_API StrongNameKeyPair : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IDeserializationCallback{
        cli::array<unsigned char>* _publicKey;
        System::String* _keyPairContainer;
        bool _keyPairExported;
        cli::array<unsigned char>* _keyPairArray;
        System::Security::Cryptography::RSA* _rsa;
        
        void constructor(cli::array<unsigned char>* keyPairArray);
        void constructor(System::IO::FileStream* keyPairFile);
        void constructor(System::String* keyPairContainer);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void OnDeserialization(System::Object* sender);
        System::Security::Cryptography::RSA* GetRSA();
        void LoadKey(cli::array<unsigned char>* key);
        Mono::Security::StrongName* StrongName3();
        cli::array<unsigned char>* get_PublicKey();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
    };
    
    
    struct MANAGED_API TargetException : public virtual System::ApplicationException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API TargetInvocationException : public virtual System::ApplicationException{
        
        void constructor(System::Exception* inner);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext sc);
        
    };
    
    
    struct MANAGED_API TargetParameterCountException : public virtual System::ApplicationException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API TypeDelegator : public virtual System::Type{
        System::Type* typeImpl;
        
        void constructor();
        void constructor(System::Type* delegatingType);
        virtual TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual cli::array<ConstructorInfo*>* GetConstructors_736b6e990b94b352(BindingFlags bindingAttr) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual EventInfo* GetEvent_7f053fa54114e387(System::String* name, BindingFlags bindingAttr) override;
        virtual cli::array<EventInfo*>* GetEvents_e6858c959b77de38() override;
        virtual cli::array<EventInfo*>* GetEvents_a960b087e4d67be2(BindingFlags bindingAttr) override;
        virtual FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, BindingFlags bindingAttr) override;
        virtual cli::array<FieldInfo*>* GetFields_369be5ac49d99f8(BindingFlags bindingAttr) override;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual InterfaceMapping GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) override;
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual cli::array<MemberInfo*>* GetMember_9c934e7384b805e1(System::String* name, MemberTypes type, BindingFlags bindingAttr) override;
        virtual cli::array<MemberInfo*>* GetMembers_54432b0ff6e99174(BindingFlags bindingAttr) override;
        virtual MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual cli::array<MethodInfo*>* GetMethods_c5b4e5d4877e6672(BindingFlags bindingAttr) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, BindingFlags bindingAttr) override;
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(BindingFlags bindingAttr) override;
        virtual cli::array<PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(BindingFlags bindingAttr) override;
        virtual PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, BindingFlags bindingAttr, Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, BindingFlags invokeAttr, Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsValueTypeImpl_fe1651255927f3c6() override;
        virtual Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        virtual int32_t get_MetadataToken_85fbeea46e971f25() override;
        
    };
    
    
    struct MANAGED_API MonoArrayMethod : public virtual MethodInfo{
        System::RuntimeMethodHandle mhandle;
        System::Type* parent;
        System::Type* ret;
        cli::array<System::Type*>* parameters;
        System::String* name;
        int32_t table_idx;
        CallingConventions call_conv;
        
        void constructor(System::Type* arrayClass, System::String* methodName, CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        virtual MethodInfo* GetBaseDefinition_b00937f21f1a7556() override;
        virtual MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Type* get_ReturnType_832339e848f448fe() override;
        virtual ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
    };
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    struct MANAGED_API GenericInstanceKey : public virtual System::Object{
        System::Type* gtd;
        cli::array<System::Type*>* args;
        int32_t hash_code;
        
        void constructor(System::Type* gtd, cli::array<System::Type*>* args);
        static bool IsBoundedVector(System::Type* type);
        static bool TypeEquals(System::Type* a, System::Type* b);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        
    };
    
    
    struct MANAGED_API AssemblyBuilder : public virtual System::Reflection::Assembly, public virtual System::Runtime::InteropServices::_AssemblyBuilder{
        static constexpr AssemblyBuilderAccess COMPILER_ACCESS = (System::Reflection::Emit::AssemblyBuilderAccess)2048L;
        void* dynamic_assembly;
        System::Reflection::MethodInfo* entry_point;
        cli::array<ModuleBuilder*>* modules;
        System::String* name;
        System::String* dir;
        cli::array<CustomAttributeBuilder*>* cattrs;
        cli::array<MonoResource>* resources;
        cli::array<unsigned char>* public_key;
        System::String* version;
        System::String* culture;
        uint32_t algid;
        uint32_t flags;
        PEFileKinds pekind;
        bool delay_sign;
        uint32_t access;
        cli::array<System::Reflection::Module*>* loaded_modules;
        cli::array<MonoWin32Resource>* win32_resources;
        cli::array<RefEmitPermissionSet>* permissions_minimum;
        cli::array<RefEmitPermissionSet>* permissions_optional;
        cli::array<RefEmitPermissionSet>* permissions_refused;
        System::Reflection::PortableExecutableKinds peKind;
        System::Reflection::ImageFileMachine machine;
        bool corlib_internal;
        cli::array<System::Type*>* type_forwarders;
        cli::array<unsigned char>* pktoken;
        System::Type* corlib_object_type;
        System::Type* corlib_value_type;
        System::Type* corlib_enum_type;
        System::Type* corlib_void_type;
        System::Collections::ArrayList* resource_writers;
        System::Resources::Win32VersionResource* version_res;
        bool created;
        bool is_module_only;
        Mono::Security::StrongName* sn;
        NativeResourceType native_resource;
        System::String* versioninfo_culture;
        ModuleBuilder* manifest_module;
        
        void constructor(System::Reflection::AssemblyName* n, System::String* directory, AssemblyBuilderAccess access, bool corlib_internal);
        static void basic_init(AssemblyBuilder* ab);
        void AddResourceFile(System::String* name, System::String* fileName);
        void AddResourceFile2(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute);
        void AddResourceFile3(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute, bool fileNeedsToExists);
        void AddPermissionRequests(System::Security::PermissionSet* required, System::Security::PermissionSet* optional, System::Security::PermissionSet* refused);
        void EmbedResourceFile(System::String* name, System::String* fileName);
        void EmbedResourceFile2(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute);
        ModuleBuilder* DefineDynamicModule(System::String* name);
        ModuleBuilder* DefineDynamicModule2(System::String* name, bool emitSymbolInfo);
        ModuleBuilder* DefineDynamicModule3(System::String* name, System::String* fileName);
        ModuleBuilder* DefineDynamicModule4(System::String* name, System::String* fileName, bool emitSymbolInfo);
        ModuleBuilder* DefineDynamicModule5(System::String* name, System::String* fileName, bool emitSymbolInfo, bool transient);
        System::Resources::IResourceWriter* DefineResource(System::String* name, System::String* description, System::String* fileName);
        System::Resources::IResourceWriter* DefineResource2(System::String* name, System::String* description, System::String* fileName, System::Reflection::ResourceAttributes attribute);
        void AddUnmanagedResource(System::Resources::Win32Resource* res);
        void DefineUnmanagedResource(cli::array<unsigned char>* resource);
        void DefineUnmanagedResource2(System::String* resourceFileName);
        void DefineVersionInfoResource();
        void DefineVersionInfoResource2(System::String* product, System::String* productVersion, System::String* company, System::String* copyright, System::String* trademark);
        void DefineVersionInfoResourceImpl(System::String* fileName);
        ModuleBuilder* GetDynamicModule(System::String* name);
        virtual cli::array<System::Type*>* GetExportedTypes_4dc21035aef13039() override;
        virtual System::IO::FileStream* GetFile_321baf5b87b86022(System::String* name) override;
        virtual cli::array<System::IO::FileStream*>* GetFiles_4b160752c34b70d5(bool getResourceModules) override;
        virtual cli::array<System::Reflection::Module*>* GetModulesInternal_ea568dcc02539ffb() override;
        virtual cli::array<System::Type*>* GetTypes_7d5d1df2c0939ee2(bool exportedOnly) override;
        virtual System::Reflection::ManifestResourceInfo* GetManifestResourceInfo_2cc36efdd5a68bdc(System::String* resourceName) override;
        virtual cli::array<System::String*>* GetManifestResourceNames_d63b24d819c7a44d() override;
        virtual System::IO::Stream* GetManifestResourceStream_b395b331908084e(System::String* name) override;
        virtual System::IO::Stream* GetManifestResourceStream_6ad572412eedcffd(System::Type* type, System::String* name) override;
        virtual System::Reflection::Module* GetManifestModule_e233b7576740b3d7() override;
        void Save(System::String* assemblyFileName, System::Reflection::PortableExecutableKinds portableExecutableKind, System::Reflection::ImageFileMachine imageFileMachine);
        void Save2(System::String* assemblyFileName);
        void SetEntryPoint(System::Reflection::MethodInfo* entryMethod);
        void SetEntryPoint2(System::Reflection::MethodInfo* entryMethod, PEFileKinds fileKind);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        System::Exception* not_supported();
        void check_name_and_filename(System::String* name, System::String* fileName, bool fileNeedsToExists);
        System::String* create_assembly_version(System::String* version);
        System::String* GetCultureString(System::String* str);
        virtual System::Reflection::AssemblyName* UnprotectedGetName_b11b135b2412c023() override;
        System::Type* MakeGenericType(System::Type* gtd, cli::array<System::Type*>* typeArguments);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Type* GetType_30e9b2dcc4956479(System::String* name, bool throwOnError, bool ignoreCase) override;
        virtual System::Reflection::Module* GetModule_d3e09c815c6ebd46(System::String* name) override;
        virtual cli::array<System::Reflection::Module*>* GetModules_1ce70abfc6e0d050(bool getResourceModules) override;
        virtual System::Reflection::AssemblyName* GetName_7bcd94721bb29265(bool copiedName) override;
        virtual cli::array<System::Reflection::AssemblyName*>* GetReferencedAssemblies_c967ce8a0efd4c58() override;
        virtual cli::array<System::Reflection::Module*>* GetLoadedModules_db6b585bebc1ac2e(bool getResourceModules) override;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_995bfc41ec1f61b8(System::Globalization::CultureInfo* culture) override;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_22d0b12d929a333c(System::Globalization::CultureInfo* culture, System::Version* version) override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool IsDefined_42f87feac494b032(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_887544480e7ebe63(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_30a143c7dfd48919(System::Type* attributeType, bool inherit) override;
        virtual System::String* get_CodeBase_5e12949b795c9d90() override;
        virtual System::Reflection::MethodInfo* get_EntryPoint_63c1ef73cc6df57c() override;
        virtual System::String* get_Location_3a7779d7eb72fa50() override;
        virtual System::String* get_ImageRuntimeVersion_3e077bddac126c9() override;
        virtual bool get_ReflectionOnly_b2af717d1dca672() override;
        bool get_IsSave();
        bool get_IsRun();
        System::String* get_AssemblyDir();
        bool get_IsModuleOnly();
        bool set_IsModuleOnly(bool value);
        virtual System::Reflection::Module* get_ManifestModule_238a73903fb58278() override;
        virtual bool get_GlobalAssemblyCache_db80d4f5ee2824e7() override;
        virtual bool get_IsDynamic_a494841e91ae4bbb() override;
        virtual System::String* get_FullName_abd52da7f47cce07() override;
        
        virtual cli::array<System::Type*>* GetExportedTypes_ee0adeac46d6ab34() override;
        virtual System::IO::FileStream* GetFile_6615c487c2ac205(System::String* name) override;
        virtual cli::array<System::IO::FileStream*>* GetFiles_83c5197d3be9ba99(bool getResourceModules) override;
        virtual System::Reflection::ManifestResourceInfo* GetManifestResourceInfo_bcc15dc0035eec0a(System::String* resourceName) override;
        virtual cli::array<System::String*>* GetManifestResourceNames_a76da541e39a6687() override;
        virtual System::IO::Stream* GetManifestResourceStream_c4c4dd7ea9b411f6(System::String* name) override;
        virtual System::IO::Stream* GetManifestResourceStream_20b4219e40c67fdc(System::Type* type, System::String* name) override;
        virtual void GetIDsOfNames_716ecff340e1bcb1(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_8f3e600b1a4df338(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_b1477651be42f933(uint32_t pcTInfo) override;
        virtual void Invoke_6b5294c027a9dacb(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Type* GetType_4f7329f347090d49(System::String* name, bool throwOnError, bool ignoreCase) override;
        virtual System::Reflection::Module* GetModule_a7906997a13617a7(System::String* name) override;
        virtual cli::array<System::Reflection::Module*>* GetModules_70286f2f0a1cfacc(bool getResourceModules) override;
        virtual System::Reflection::AssemblyName* GetName_7ef5b4b80c448759(bool copiedName) override;
        virtual cli::array<System::Reflection::AssemblyName*>* GetReferencedAssemblies_1e24baa3c5838f22() override;
        virtual cli::array<System::Reflection::Module*>* GetLoadedModules_f8ba3198d02efd9f(bool getResourceModules) override;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_ba2feb006a3fcaa4(System::Globalization::CultureInfo* culture) override;
        virtual System::Reflection::Assembly* GetSatelliteAssembly_f069f89f4969cda7(System::Globalization::CultureInfo* culture, System::Version* version) override;
        virtual bool Equals_56ec287b8d40063b(System::Object* obj) override;
        virtual int32_t GetHashCode_20a08aead0d6820a() override;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
        virtual System::String* get_CodeBase_dc45d01428f64731() override;
        virtual System::Reflection::MethodInfo* get_EntryPoint_2f6c2f38d51e8a4a() override;
        virtual System::String* get_Location_b64a656d361bdd61() override;
        virtual bool get_GlobalAssemblyCache_dace09e2d2af9909() override;
        virtual System::String* get_FullName_f0e20ee2bbdaa1a9() override;
    };
    
    
    struct MANAGED_API ConstructorBuilder : public virtual System::Reflection::ConstructorInfo, public virtual System::Runtime::InteropServices::_ConstructorBuilder{
        System::RuntimeMethodHandle mhandle;
        ILGenerator* ilgen;
        cli::array<System::Type*>* parameters;
        System::Reflection::MethodAttributes attrs;
        System::Reflection::MethodImplAttributes iattrs;
        int32_t table_idx;
        System::Reflection::CallingConventions call_conv;
        TypeBuilder* type;
        cli::array<ParameterBuilder*>* pinfo;
        cli::array<CustomAttributeBuilder*>* cattrs;
        bool init_locals;
        cli::array<cli::array<System::Type*>*>* paramModReq;
        cli::array<cli::array<System::Type*>*>* paramModOpt;
        cli::array<RefEmitPermissionSet>* permissions;
        
        void constructor(TypeBuilder* tb, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt);
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        cli::array<System::Reflection::ParameterInfo*>* GetParametersInternal();
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Type* GetParameterType_f80ea4ad68a899fb(int32_t pos) override;
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Object* Invoke_d9ede2dfc2f2dd62(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset);
        ParameterBuilder* DefineParameter(int32_t iSequence, System::Reflection::ParameterAttributes attributes, System::String* strParamName);
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        ILGenerator* GetILGenerator();
        ILGenerator* GetILGenerator2(int32_t streamSize);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        void SetImplementationFlags(System::Reflection::MethodImplAttributes attributes);
        System::Reflection::Module* GetModule();
        MethodToken GetToken();
        void SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void fixup();
        void GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter);
        virtual int32_t get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc) override;
        void RejectIfCreated();
        System::Exception* not_supported();
        System::Exception* not_after_created();
        System::Exception* not_created();
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Reflection::CallingConventions get_CallingConvention_309cf574b58a053a() override;
        bool get_InitLocals();
        bool set_InitLocals(bool value);
        TypeBuilder* get_TypeBuilder();
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual System::Reflection::MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        System::Type* get_ReturnType();
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        System::String* get_Signature();
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        
        virtual System::String* ToString_a95e215a60192892() override;
        virtual void GetIDsOfNames_a94971402772136c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_daa5d56ccfb3f499(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_2bceeff5d59a252e(uint32_t pcTInfo) override;
        virtual void Invoke_9c9bca8549c0c755(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Reflection::CallingConventions get_CallingConvention_a50132e872765544() override;
    };
    
    
    struct MANAGED_API ConstructorOnTypeBuilderInst : public virtual System::Reflection::ConstructorInfo{
        System::Reflection::MonoGenericClass* instantiation;
        System::Reflection::ConstructorInfo* cb;
        
        void constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::ConstructorInfo* cb);
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958() override;
        virtual System::Object* Invoke_d9ede2dfc2f2dd62(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual int32_t get_MetadataToken_85fbeea46e971f25() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual System::Reflection::MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Reflection::CallingConventions get_CallingConvention_309cf574b58a053a() override;
        virtual bool get_ContainsGenericParameters_113614fa92731376() override;
        virtual bool get_IsGenericMethodDefinition_cce889be2a806b0f() override;
        virtual bool get_IsGenericMethod_7e509e51546ea990() override;
        
    };
    
    
    struct MANAGED_API CustomAttributeBuilder : public virtual System::Object, public virtual System::Runtime::InteropServices::_CustomAttributeBuilder{
        System::Reflection::ConstructorInfo* ctor;
        cli::array<unsigned char>* data;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map7;
        
        void constructor(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* cdata);
        void constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs);
        void constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues);
        void constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues);
        void constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues);
        static cli::array<unsigned char>* GetBlob(System::Reflection::Assembly* asmb, System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues);
        bool IsValidType(System::Type* t);
        bool IsValidParam(System::Object* o, System::Type* paramType);
        static bool IsValidValue(System::Type* type, System::Object* value);
        void Initialize(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues);
        static int32_t decode_len(cli::array<unsigned char>* data, int32_t pos, int32_t rpos);
        static System::String* string_from_bytes(cli::array<unsigned char>* data, int32_t pos, int32_t len);
        System::String* string_arg();
        static UnmanagedMarshal* get_umarshal(CustomAttributeBuilder* customBuilder, bool is_field);
        static System::Type* elementTypeToType(int32_t elementType);
        static System::Object* decode_cattr_value(System::Type* t, cli::array<unsigned char>* data, int32_t pos, int32_t rpos);
        static CustomAttributeInfo decode_cattr(CustomAttributeBuilder* customBuilder);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        static cli::array<System::Reflection::ParameterInfo*>* GetParameters(System::Reflection::ConstructorInfo* ctor);
        System::Reflection::ConstructorInfo* get_Ctor();
        cli::array<unsigned char>* get_Data();
        
        virtual void GetIDsOfNames_c21c44540ffdbb5f(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_2c3ebc106b1684a4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_4a41fb8f79c152d6(uint32_t pcTInfo) override;
        virtual void Invoke_25a09bf1f54f831c(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API ArrayType : public virtual DerivedType{
        int32_t rank;
        
        void constructor(System::Type* elementType, int32_t rank);
        int32_t GetEffectiveRank();
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual int32_t GetArrayRank_fccf91da5e4acf4f() override;
        virtual System::Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual System::String* FormatName_c623ebab7e1e1aea(System::String* elementName) override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        
    };
    
    
    struct MANAGED_API ByRefType : public virtual DerivedType{
        
        void constructor(System::Type* elementType);
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual System::String* FormatName_c623ebab7e1e1aea(System::String* elementName) override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        
    };
    
    
    struct MANAGED_API PointerType : public virtual DerivedType{
        
        void constructor(System::Type* elementType);
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual System::String* FormatName_c623ebab7e1e1aea(System::String* elementName) override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        
    };
    
    
    struct MANAGED_API DynamicILInfo : public virtual System::Object{
        DynamicMethod* method;
        
        void constructor();
        void constructor(DynamicMethod* method);
        int32_t GetTokenFor(cli::array<unsigned char>* signature);
        int32_t GetTokenFor2(DynamicMethod* method);
        int32_t GetTokenFor3(System::RuntimeFieldHandle field);
        int32_t GetTokenFor4(System::RuntimeMethodHandle method);
        int32_t GetTokenFor5(System::RuntimeTypeHandle type);
        int32_t GetTokenFor6(System::String* literal);
        int32_t GetTokenFor7(System::RuntimeMethodHandle method, System::RuntimeTypeHandle contextType);
        int32_t GetTokenFor8(System::RuntimeFieldHandle field, System::RuntimeTypeHandle contextType);
        void SetCode(cli::array<unsigned char>* code, int32_t maxStackSize);
        void SetCode2(unsigned char* code, int32_t codeSize, int32_t maxStackSize);
        void SetExceptions(cli::array<unsigned char>* exceptions);
        void SetExceptions2(unsigned char* exceptions, int32_t exceptionsSize);
        void SetLocalSignature(cli::array<unsigned char>* localSignature);
        void SetLocalSignature2(unsigned char* localSignature, int32_t signatureSize);
        DynamicMethod* get_DynamicMethod();
        
    };
    
    
    struct MANAGED_API AnonHostModuleHolder : public virtual System::Object{
        static System::Reflection::Module* anon_host_module;
        
        AnonHostModuleHolder();
        static void static_constructor();
        void constructor();
        static System::Reflection::Module* get_AnonHostModule();
        
    };
    
    
    struct MANAGED_API DynamicMethod : public virtual System::Reflection::MethodInfo{
        System::RuntimeMethodHandle mhandle;
        System::String* name;
        System::Type* returnType;
        cli::array<System::Type*>* parameters;
        System::Reflection::MethodAttributes attributes;
        System::Reflection::CallingConventions callingConvention;
        System::Reflection::Module* module;
        bool skipVisibility;
        bool init_locals;
        ILGenerator* ilgen;
        int32_t nrefs;
        cli::array<System::Object*>* refs;
        void* referenced_by;
        System::Type* owner;
        System::Delegate* deleg;
        System::Reflection::MonoMethod* method;
        cli::array<ParameterBuilder*>* pinfo;
        bool creating;
        DynamicILInfo* il_info;
        
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m);
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner);
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m, bool skipVisibility);
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, bool skipVisibility);
        void constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, bool skipVisibility);
        void constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m, bool skipVisibility);
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        void constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, bool restrictedSkipVisibility);
        void constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, System::Reflection::Module* m, bool skipVisibility, bool anonHosted);
        void create_dynamic_method(DynamicMethod* m);
        void CreateDynMethod();
        System::Delegate* CreateDelegate(System::Type* delegateType);
        System::Delegate* CreateDelegate2(System::Type* delegateType, System::Object* target);
        ParameterBuilder* DefineParameter(int32_t position, System::Reflection::ParameterAttributes attributes, System::String* parameterName);
        virtual System::Reflection::MethodInfo* GetBaseDefinition_b00937f21f1a7556() override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        DynamicILInfo* GetDynamicILInfo();
        ILGenerator* GetILGenerator();
        ILGenerator* GetILGenerator2(int32_t streamSize);
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Type* GetParameterType_f80ea4ad68a899fb(int32_t pos) override;
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void RejectIfCreated();
        int32_t AddRef(System::Object* reference);
        virtual System::Reflection::MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Reflection::CallingConventions get_CallingConvention_309cf574b58a053a() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        bool get_InitLocals();
        bool set_InitLocals(bool value);
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Reflection::ParameterInfo* get_ReturnParameter_d8c8b72c8a40767c() override;
        virtual System::Type* get_ReturnType_832339e848f448fe() override;
        virtual System::Reflection::ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() override;
        
    };
    
    
    struct MANAGED_API DynamicMethodTokenGenerator : public virtual System::Object, public virtual TokenGenerator{
        DynamicMethod* m;
        
        void constructor(DynamicMethod* m);
        int32_t GetToken(System::String* str);
        int32_t GetToken2(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types);
        int32_t GetToken3(System::Reflection::MemberInfo* member, bool create_open_instance);
        int32_t GetToken4(SignatureHelper* helper);
        
        virtual int32_t GetToken_25c90de716173dc6(System::String* str) override;
        virtual int32_t GetToken_9da014b90fcfd506(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) override;
        virtual int32_t GetToken_10bcc90da5b44782(System::Reflection::MemberInfo* member, bool create_open_instance) override;
        virtual int32_t GetToken_dc01c561a484101(SignatureHelper* helper) override;
    };
    
    
    struct MANAGED_API EnumBuilder : public virtual System::Type, public virtual System::Runtime::InteropServices::_EnumBuilder{
        TypeBuilder* _tb;
        FieldBuilder* _underlyingField;
        System::Type* _underlyingType;
        
        void constructor(ModuleBuilder* mb, System::String* name, System::Reflection::TypeAttributes visibility, System::Type* underlyingType);
        TypeBuilder* GetTypeBuilder();
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        System::Type* CreateType();
        virtual System::Type* GetEnumUnderlyingType_54ea3579073894ef() override;
        void setup_enum_type(System::Type* t);
        FieldBuilder* DefineLiteral(System::String* literalName, System::Object* literalValue);
        virtual System::Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual System::Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual System::Reflection::EventInfo* GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_e6858c959b77de38() override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) override;
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsValueTypeImpl_fe1651255927f3c6() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        System::Exception* CreateNotSupportedException();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        TypeToken get_TypeToken();
        FieldBuilder* get_UnderlyingField();
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_1787f024dc60b66d() override;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_1dcbd2012c18f488(System::Type* interfaceType) override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_aba72a46394724d6(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) override;
        virtual void GetIDsOfNames_c589a61053617268(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_4569c5bef9234cda(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_6ad7237d71a849b0(uint32_t pcTInfo) override;
        virtual void Invoke_bb691d3276b024bf(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Type* get_DeclaringType_57e85ec7caa4a7e9() override;
        virtual System::Reflection::Module* get_Module_e878d08348938612() override;
        virtual System::Type* get_ReflectedType_338a78c0f78949() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a660506a2c0cc3d5() override;
    };
    
    
    struct MANAGED_API EventBuilder : public virtual System::Object, public virtual System::Runtime::InteropServices::_EventBuilder{
        System::String* name;
        System::Type* type;
        TypeBuilder* typeb;
        cli::array<CustomAttributeBuilder*>* cattrs;
        MethodBuilder* add_method;
        MethodBuilder* remove_method;
        MethodBuilder* raise_method;
        cli::array<MethodBuilder*>* other_methods;
        System::Reflection::EventAttributes attrs;
        int32_t table_idx;
        
        void constructor(TypeBuilder* tb, System::String* eventName, System::Reflection::EventAttributes eventAttrs, System::Type* eventType);
        int32_t get_next_table_index(System::Object* obj, int32_t table, bool inc);
        void AddOtherMethod(MethodBuilder* mdBuilder);
        EventToken GetEventToken();
        void SetAddOnMethod(MethodBuilder* mdBuilder);
        void SetRaiseMethod(MethodBuilder* mdBuilder);
        void SetRemoveOnMethod(MethodBuilder* mdBuilder);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        void RejectIfCreated();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        
        virtual void GetIDsOfNames_3050f219d9ee6281(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_c88e6f1eebfb78c2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_f810c10738bdafb7(uint32_t pcTInfo) override;
        virtual void Invoke_8b71d77ae75751d1(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API EventOnTypeBuilderInst : public virtual System::Reflection::EventInfo{
        System::Reflection::MonoGenericClass* instantiation;
        EventBuilder* event_builder;
        System::Reflection::EventInfo* event_info;
        
        void constructor(System::Reflection::MonoGenericClass* instantiation, EventBuilder* evt);
        void constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::EventInfo* evt);
        virtual System::Reflection::MethodInfo* GetAddMethod_e6ed2f5f0e24f59f(bool nonPublic) override;
        virtual System::Reflection::MethodInfo* GetRaiseMethod_da2f94f17ce18705(bool nonPublic) override;
        virtual System::Reflection::MethodInfo* GetRemoveMethod_2709ba07e73fded4(bool nonPublic) override;
        virtual cli::array<System::Reflection::MethodInfo*>* GetOtherMethods_cea105c0bef756da(bool nonPublic) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::EventAttributes get_Attributes_3412d62533ff880() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        
    };
    
    
    struct MANAGED_API FieldBuilder : public virtual System::Reflection::FieldInfo, public virtual System::Runtime::InteropServices::_FieldBuilder{
        System::Reflection::FieldAttributes attrs;
        System::Type* type;
        System::String* name;
        System::Object* def_value;
        int32_t offset;
        int32_t table_idx;
        TypeBuilder* typeb;
        cli::array<unsigned char>* rva_data;
        cli::array<CustomAttributeBuilder*>* cattrs;
        UnmanagedMarshal* marshal_info;
        System::RuntimeFieldHandle handle;
        cli::array<System::Type*>* modReq;
        cli::array<System::Type*>* modOpt;
        
        void constructor(TypeBuilder* tb, System::String* fieldName, System::Type* type, System::Reflection::FieldAttributes attributes, cli::array<System::Type*>* modReq, cli::array<System::Type*>* modOpt);
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        FieldToken GetToken();
        virtual System::Object* GetValue_57ad13b528e8b8a5(System::Object* obj) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual int32_t GetFieldOffset_309c846c3e72bf1() override;
        void SetRVAData(cli::array<unsigned char>* data);
        void SetConstant(System::Object* defaultValue);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        void SetMarshal(UnmanagedMarshal* unmanagedMarshal);
        void SetOffset(int32_t iOffset);
        virtual void SetValue_b73df766c23f1507(System::Object* obj, System::Object* val, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) override;
        System::Exception* CreateNotSupportedException();
        void RejectIfCreated();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Reflection::FieldAttributes get_Attributes_ecc2fe2071b9c047() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::RuntimeFieldHandle get_FieldHandle_43fbd13b33ef15a8() override;
        virtual System::Type* get_FieldType_1dab4079098d7fff() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual UnmanagedMarshal* get_UMarshal_dd8c1dc6c2728d2() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        
        virtual void GetIDsOfNames_4cc89c7b2b2c1221(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_9a7463b590b674bf(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_a35a410b1df51e31(uint32_t pcTInfo) override;
        virtual void Invoke_b525b37e6ef7a0c4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API FieldOnTypeBuilderInst : public virtual System::Reflection::FieldInfo{
        System::Reflection::MonoGenericClass* instantiation;
        System::Reflection::FieldInfo* fb;
        
        void constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::FieldInfo* fb);
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Object* GetValue_57ad13b528e8b8a5(System::Object* obj) override;
        virtual void SetValue_b73df766c23f1507(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Reflection::FieldAttributes get_Attributes_ecc2fe2071b9c047() override;
        virtual System::RuntimeFieldHandle get_FieldHandle_43fbd13b33ef15a8() override;
        virtual int32_t get_MetadataToken_85fbeea46e971f25() override;
        virtual System::Type* get_FieldType_1dab4079098d7fff() override;
        
    };
    
    
    struct MANAGED_API GenericTypeParameterBuilder : public virtual System::Type{
        TypeBuilder* tbuilder;
        MethodBuilder* mbuilder;
        System::String* name;
        int32_t index;
        System::Type* base_type;
        cli::array<System::Type*>* iface_constraints;
        cli::array<CustomAttributeBuilder*>* cattrs;
        System::Reflection::GenericParameterAttributes attrs;
        
        void constructor(TypeBuilder* tbuilder, MethodBuilder* mbuilder, System::String* name, int32_t index);
        void SetBaseTypeConstraint(System::Type* baseTypeConstraint);
        void SetInterfaceConstraints(cli::array<System::Type*>* interfaceConstraints);
        void SetGenericParameterAttributes(System::Reflection::GenericParameterAttributes genericParameterAttributes);
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        void initialize();
        virtual bool IsSubclassOf_5d7dbe0215a30fda(System::Type* c) override;
        virtual System::Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        virtual System::Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::EventInfo* GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_e6858c959b77de38() override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual bool IsAssignableFrom_e3aa32d778e63a90(System::Type* c) override;
        virtual bool IsInstanceOfType_bd709d8c55b4333d(System::Object* o) override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsValueTypeImpl_fe1651255927f3c6() override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) override;
        virtual cli::array<System::Type*>* GetGenericArguments_a7fb476275cfe9a3() override;
        virtual System::Type* GetGenericTypeDefinition_15f8fc7813e8e8bf() override;
        virtual cli::array<System::Type*>* GetGenericParameterConstraints_d29c24f34391020e() override;
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        System::Exception* not_supported();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        virtual System::Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        virtual bool get_ContainsGenericParameters_19598881dd690ad3() override;
        virtual bool get_IsGenericParameter_2a17c4bf67798b07() override;
        virtual bool get_IsGenericType_4db8ddd5b97f3c14() override;
        virtual bool get_IsGenericTypeDefinition_8008dd501dc43926() override;
        virtual System::Reflection::GenericParameterAttributes get_GenericParameterAttributes_b31b8b8f1d79d815() override;
        virtual int32_t get_GenericParameterPosition_ae331bf96a7667b1() override;
        virtual System::Reflection::MethodBase* get_DeclaringMethod_6dc070d2040335e5() override;
        
    };
    
    
    struct MANAGED_API ILGenerator : public virtual System::Object, public virtual System::Runtime::InteropServices::_ILGenerator{
        static constexpr int32_t defaultFixupSize = 4;
        static constexpr int32_t defaultLabelsSize = 4;
        static constexpr int32_t defaultExceptionStackSize = 2;
        static System::Type* void_type;
        cli::array<unsigned char>* code;
        int32_t code_len;
        int32_t max_stack;
        int32_t cur_stack;
        cli::array<LocalBuilder*>* locals;
        cli::array<ILExceptionInfo>* ex_handlers;
        int32_t num_token_fixups;
        cli::array<ILTokenInfo>* token_fixups;
        cli::array<LabelData>* labels;
        int32_t num_labels;
        cli::array<LabelFixup>* fixups;
        int32_t num_fixups;
        System::Reflection::Module* module;
        int32_t cur_block;
        System::Collections::Stack* open_blocks;
        TokenGenerator* token_gen;
        System::Collections::ArrayList* sequencePointLists;
        SequencePointList* currentSequence;
        
        ILGenerator();
        void constructor(System::Reflection::Module* m, TokenGenerator* token_gen, int32_t size);
        static void static_constructor();
        void add_token_fixup(System::Reflection::MemberInfo* mi);
        void make_room(int32_t nbytes);
        void emit_int(int32_t val);
        void ll_emit(OpCode opcode);
        static int32_t target_len(OpCode opcode);
        void InternalEndClause();
        virtual void BeginCatchBlock_c99c7900faa3b08e(System::Type* exceptionType);
        virtual void BeginExceptFilterBlock_78cb68f04d478d49();
        virtual Label BeginExceptionBlock_d0660d08575b0ae();
        virtual void BeginFaultBlock_1408996e97e58d9c();
        virtual void BeginFinallyBlock_80b3bef7febeda28();
        virtual void BeginScope_b349d109cd173c8();
        virtual LocalBuilder* DeclareLocal_977dbdcc1bcbd0a3(System::Type* localType);
        virtual LocalBuilder* DeclareLocal_8cef1978f0893173(System::Type* localType, bool pinned);
        virtual Label DefineLabel_bf30b86c6e4f712c();
        virtual void Emit_6b1c52a4d677ebc8(OpCode opcode);
        virtual void Emit_fa7de15651e33487(OpCode opcode, unsigned char arg);
        virtual void Emit_9658065e57c01583(OpCode opcode, System::Reflection::ConstructorInfo* con);
        virtual void Emit_d2f12feb50e1a114(OpCode opcode, double arg);
        virtual void Emit_65b6e011d91f7643(OpCode opcode, System::Reflection::FieldInfo* field);
        virtual void Emit_cb6fd018a49b2f91(OpCode opcode, int16_t arg);
        virtual void Emit_174696548609067b(OpCode opcode, int32_t arg);
        virtual void Emit_1d01f04e3cc9d3e5(OpCode opcode, int64_t arg);
        virtual void Emit_fae713cfda427cd3(OpCode opcode, Label label);
        virtual void Emit_5a7469bf6627bae4(OpCode opcode, cli::array<Label>* labels);
        virtual void Emit_9541ccf03936bee1(OpCode opcode, LocalBuilder* local);
        virtual void Emit_6293070285694c81(OpCode opcode, System::Reflection::MethodInfo* meth);
        void Emit13(OpCode opcode, System::Reflection::MethodInfo* method, int32_t token);
        void Emit14(OpCode opcode, signed char arg);
        virtual void Emit_501d0c0f17fa00d3(OpCode opcode, SignatureHelper* signature);
        virtual void Emit_9d8c8c5d517bfaa9(OpCode opcode, float arg);
        virtual void Emit_47ae0eb6bb66716(OpCode opcode, System::String* str);
        virtual void Emit_911e8244dc15d49c(OpCode opcode, System::Type* cls);
        virtual void EmitCall_4e16584a7443cbeb(OpCode opcode, System::Reflection::MethodInfo* methodInfo, cli::array<System::Type*>* optionalParameterTypes);
        virtual void EmitCalli_d0342cddffc4a170(OpCode opcode, System::Runtime::InteropServices::CallingConvention unmanagedCallConv, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        virtual void EmitCalli_dda2d412e31971af(OpCode opcode, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, cli::array<System::Type*>* optionalParameterTypes);
        virtual void EmitWriteLine_ca501ebc600dafbf(System::Reflection::FieldInfo* fld);
        virtual void EmitWriteLine_6006512ac1bc4e0b(LocalBuilder* localBuilder);
        virtual void EmitWriteLine_4c533e5500da46e1(System::String* value);
        virtual void EndExceptionBlock_1d7974e4f3c4a9a7();
        virtual void EndScope_4fc89405c36472c2();
        virtual void MarkLabel_f204005ffcc00ecd(Label loc);
        virtual void MarkSequencePoint_8ce4c0fd4823f2f(System::Diagnostics::SymbolStore::ISymbolDocumentWriter* document, int32_t startLine, int32_t startColumn, int32_t endLine, int32_t endColumn);
        void GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter);
        virtual void ThrowException_e4e2b031cb70afbc(System::Type* excType);
        virtual void UsingNamespace_2c806a8b1a6457e9(System::String* usingNamespace);
        void label_fixup();
        void SetCode(cli::array<unsigned char>* code, int32_t max_stack);
        void SetCode2(unsigned char* code, int32_t code_size, int32_t max_stack);
        static int32_t Mono_GetCurrentOffset(ILGenerator* ig);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        bool get_HasDebugInfo();
        TokenGenerator* get_TokenGenerator();
        virtual int32_t get_ILOffset_a7e0ed1bc16093d6();
        
        virtual void GetIDsOfNames_2ab91765d99b9239(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_6d549fcfb1b28dbc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_2a10ec9331579a6b(uint32_t pcTInfo) override;
        virtual void Invoke_94872a016b6b5770(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API SequencePointList : public virtual System::Object{
        static constexpr int32_t arrayGrow = 10;
        System::Diagnostics::SymbolStore::ISymbolDocumentWriter* doc;
        cli::array<SequencePoint>* points;
        int32_t count;
        
        void constructor(System::Diagnostics::SymbolStore::ISymbolDocumentWriter* doc);
        cli::array<int32_t>* GetOffsets();
        cli::array<int32_t>* GetLines();
        cli::array<int32_t>* GetColumns();
        cli::array<int32_t>* GetEndLines();
        cli::array<int32_t>* GetEndColumns();
        void AddSequencePoint(int32_t offset, int32_t line, int32_t col, int32_t endLine, int32_t endCol);
        System::Diagnostics::SymbolStore::ISymbolDocumentWriter* get_Document();
        int32_t get_StartLine();
        int32_t get_EndLine();
        int32_t get_StartColumn();
        int32_t get_EndColumn();
        
    };
    
    
    struct MANAGED_API LocalBuilder : public virtual System::Reflection::LocalVariableInfo, public virtual System::Runtime::InteropServices::_LocalBuilder{
        System::String* name;
        ILGenerator* ilgen;
        int32_t startOffset;
        int32_t endOffset;
        
        void constructor(System::Type* t, ILGenerator* ilgen);
        void SetLocalSymInfo(System::String* name, int32_t startOffset, int32_t endOffset);
        void SetLocalSymInfo2(System::String* name);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Type* get_LocalType_6f444539e4836b2c() override;
        virtual bool get_IsPinned_494a31d10daaf415() override;
        virtual int32_t get_LocalIndex_5862e4748cbc9231() override;
        System::String* get_Name();
        int32_t get_StartOffset();
        int32_t get_EndOffset();
        
        virtual void GetIDsOfNames_d2e6179bbbf6f7d1(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_735b3565b064b15(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_9a28c2b9adf9b672(uint32_t pcTInfo) override;
        virtual void Invoke_a07e8a441e6d5bd0(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API MethodBuilder : public virtual System::Reflection::MethodInfo, public virtual System::Runtime::InteropServices::_MethodBuilder{
        System::RuntimeMethodHandle mhandle;
        System::Type* rtype;
        cli::array<System::Type*>* parameters;
        System::Reflection::MethodAttributes attrs;
        System::Reflection::MethodImplAttributes iattrs;
        System::String* name;
        int32_t table_idx;
        cli::array<unsigned char>* code;
        ILGenerator* ilgen;
        TypeBuilder* type;
        cli::array<ParameterBuilder*>* pinfo;
        cli::array<CustomAttributeBuilder*>* cattrs;
        System::Reflection::MethodInfo* override_method;
        System::String* pi_dll;
        System::String* pi_entry;
        System::Runtime::InteropServices::CharSet charset;
        uint32_t extra_flags;
        System::Runtime::InteropServices::CallingConvention native_cc;
        System::Reflection::CallingConventions call_conv;
        bool init_locals;
        void* generic_container;
        cli::array<GenericTypeParameterBuilder*>* generic_params;
        cli::array<System::Type*>* returnModReq;
        cli::array<System::Type*>* returnModOpt;
        cli::array<cli::array<System::Type*>*>* paramModReq;
        cli::array<cli::array<System::Type*>*>* paramModOpt;
        cli::array<RefEmitPermissionSet>* permissions;
        
        void constructor(TypeBuilder* tb, System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt);
        void constructor(TypeBuilder* tb, System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt, System::String* dllName, System::String* entryName, System::Runtime::InteropServices::CallingConvention nativeCConv, System::Runtime::InteropServices::CharSet nativeCharset);
        MethodToken GetToken();
        virtual System::Reflection::MethodInfo* GetBaseDefinition_b00937f21f1a7556() override;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Type* GetParameterType_f80ea4ad68a899fb(int32_t pos) override;
        System::Reflection::Module* GetModule();
        void CreateMethodBody(cli::array<unsigned char>* il, int32_t count);
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        ILGenerator* GetILGenerator();
        ILGenerator* GetILGenerator2(int32_t size);
        ParameterBuilder* DefineParameter(int32_t position, System::Reflection::ParameterAttributes attributes, System::String* strParamName);
        void check_override();
        void fixup();
        void GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        void SetImplementationFlags(System::Reflection::MethodImplAttributes attributes);
        void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset);
        void SetMarshal(UnmanagedMarshal* unmanagedMarshal);
        void SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc) override;
        void set_override(System::Reflection::MethodInfo* mdecl);
        void RejectIfCreated();
        System::Exception* NotSupported();
        virtual System::Reflection::MethodInfo* MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* typeArguments) override;
        virtual System::Reflection::MethodInfo* GetGenericMethodDefinition_298ff0fcf1d6e37f() override;
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958() override;
        cli::array<GenericTypeParameterBuilder*>* DefineGenericParameters(cli::array<System::String*>* names);
        void SetReturnType(System::Type* returnType);
        void SetParameters(cli::array<System::Type*>* parameterTypes);
        void SetSignature(System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers);
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke3(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual bool get_ContainsGenericParameters_113614fa92731376() override;
        bool get_InitLocals();
        bool set_InitLocals(bool value);
        TypeBuilder* get_TypeBuilder();
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual System::Type* get_ReturnType_832339e848f448fe() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Reflection::MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Reflection::ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() override;
        virtual System::Reflection::CallingConventions get_CallingConvention_309cf574b58a053a() override;
        System::String* get_Signature();
        void set_BestFitMapping(bool value);
        void set_ThrowOnUnmappableChar(bool value);
        void set_ExactSpelling(bool value);
        void set_SetLastError(bool value);
        virtual bool get_IsGenericMethodDefinition_cce889be2a806b0f() override;
        virtual bool get_IsGenericMethod_7e509e51546ea990() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::Reflection::ParameterInfo* get_ReturnParameter_d8c8b72c8a40767c() override;
        
        virtual System::String* ToString_344d714047f59070() override;
        virtual bool Equals_2e806c000b792995(System::Object* obj) override;
        virtual int32_t GetHashCode_2ee4600b266274f0() override;
        virtual void GetIDsOfNames_c81e466ceb37a395(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_29cbebb5e5c35fed(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_f9f8d039bab656aa(uint32_t pcTInfo) override;
        virtual void Invoke_2c80ebce31979f5d(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Type* get_ReturnType_4452cb3548281551() override;
        virtual System::Reflection::CallingConventions get_CallingConvention_1d365159f80ff2b() override;
    };
    
    
    struct MANAGED_API MethodOnTypeBuilderInst : public virtual System::Reflection::MethodInfo{
        System::Type* instantiation;
        System::Reflection::MethodInfo* base_method;
        cli::array<System::Type*>* method_arguments;
        System::Reflection::MethodInfo* generic_method_definition;
        
        void constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::MethodInfo* base_method);
        void constructor(MethodOnTypeBuilderInst* gmd, cli::array<System::Type*>* typeArguments);
        void constructor(System::Reflection::MethodInfo* method, cli::array<System::Type*>* typeArguments);
        static System::Reflection::MethodInfo* ExtractBaseMethod(System::Reflection::MethodInfo* info);
        cli::array<System::Type*>* GetTypeArgs();
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Reflection::MethodImplAttributes GetMethodImplementationFlags_34d93dba8c4849e8() override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetParameters_9d17bcb549474c9() override;
        virtual int32_t GetParameterCount_ac86b3a4965d967a() override;
        virtual System::Object* Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) override;
        virtual System::Reflection::MethodInfo* MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* methodInstantiation) override;
        virtual cli::array<System::Type*>* GetGenericArguments_77cf5f406b341958() override;
        virtual System::Reflection::MethodInfo* GetGenericMethodDefinition_298ff0fcf1d6e37f() override;
        virtual System::Reflection::MethodInfo* GetBaseDefinition_b00937f21f1a7556() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Type* get_ReturnType_832339e848f448fe() override;
        virtual int32_t get_MetadataToken_85fbeea46e971f25() override;
        virtual System::RuntimeMethodHandle get_MethodHandle_a92ba3e25e0a5ec8() override;
        virtual System::Reflection::MethodAttributes get_Attributes_b3976e6a55c088be() override;
        virtual System::Reflection::CallingConventions get_CallingConvention_309cf574b58a053a() override;
        virtual bool get_ContainsGenericParameters_113614fa92731376() override;
        virtual bool get_IsGenericMethodDefinition_cce889be2a806b0f() override;
        virtual bool get_IsGenericMethod_7e509e51546ea990() override;
        virtual System::Reflection::ICustomAttributeProvider* get_ReturnTypeCustomAttributes_da3feb150ffa13fb() override;
        
    };
    
    
    struct MANAGED_API MethodRental : public virtual System::Object, public virtual System::Runtime::InteropServices::_MethodRental{
        static constexpr int32_t JitImmediate = 1;
        static constexpr int32_t JitOnDemand = 0;
        
        void constructor();
        static void SwapMethodBody(System::Type* cls, int32_t methodtoken, void* rgIL, int32_t methodSize, int32_t flags);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        
        virtual void GetIDsOfNames_f32788164aaaacff(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_d336c5839cab41d4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_5f816dc6d67e1185(uint32_t pcTInfo) override;
        virtual void Invoke_16bf00b9457164c(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API ModuleBuilder : public virtual System::Reflection::Module, public virtual System::Runtime::InteropServices::_ModuleBuilder{
        void* dynamic_image;
        int32_t num_types;
        cli::array<TypeBuilder*>* types;
        cli::array<CustomAttributeBuilder*>* cattrs;
        cli::array<unsigned char>* guid;
        int32_t table_idx;
        AssemblyBuilder* assemblyb;
        cli::array<MethodBuilder*>* global_methods;
        cli::array<FieldBuilder*>* global_fields;
        bool is_main;
        cli::array<MonoResource>* resources;
        TypeBuilder* global_type;
        System::Type* global_type_created;
        System::Collections::Hashtable* name_cache;
        System::Collections::Generic::Dictionary<System::String*, int32_t>* us_string_cache;
        cli::array<int32_t>* table_indexes;
        bool transient;
        ModuleBuilderTokenGenerator* token_gen;
        System::Collections::Hashtable* resource_writers;
        System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter;
        static cli::array<char16_t>* type_modifiers;
        
        ModuleBuilder();
        void constructor(AssemblyBuilder* assb, System::String* name, System::String* fullyqname, bool emitSymbolInfo, bool transient);
        static void static_constructor();
        static void basic_init(ModuleBuilder* ab);
        static void set_wrappers_type(ModuleBuilder* mb, System::Type* ab);
        bool IsTransient();
        void CreateGlobalFunctions();
        FieldBuilder* DefineInitializedData(System::String* name, cli::array<unsigned char>* data, System::Reflection::FieldAttributes attributes);
        FieldBuilder* DefineUninitializedData(System::String* name, int32_t size, System::Reflection::FieldAttributes attributes);
        void addGlobalMethod(MethodBuilder* mb);
        MethodBuilder* DefineGlobalMethod(System::String* name, System::Reflection::MethodAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        MethodBuilder* DefineGlobalMethod2(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        MethodBuilder* DefineGlobalMethod3(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers);
        MethodBuilder* DefinePInvokeMethod(System::String* name, System::String* dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);
        MethodBuilder* DefinePInvokeMethod2(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);
        TypeBuilder* DefineType(System::String* name);
        TypeBuilder* DefineType2(System::String* name, System::Reflection::TypeAttributes attr);
        TypeBuilder* DefineType3(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent);
        void AddType(TypeBuilder* tb);
        TypeBuilder* DefineType4(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packingSize, int32_t typesize);
        void RegisterTypeName(TypeBuilder* tb, System::String* name);
        TypeBuilder* GetRegisteredType(System::String* name);
        TypeBuilder* DefineType5(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces);
        TypeBuilder* DefineType6(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, int32_t typesize);
        TypeBuilder* DefineType7(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packsize);
        TypeBuilder* DefineType8(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packingSize, int32_t typesize);
        System::Reflection::MethodInfo* GetArrayMethod(System::Type* arrayClass, System::String* methodName, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        EnumBuilder* DefineEnum(System::String* name, System::Reflection::TypeAttributes visibility, System::Type* underlyingType);
        virtual System::Type* GetType_a66b4e15451215(System::String* className) override;
        virtual System::Type* GetType_2d1dcb4032b0487e(System::String* className, bool ignoreCase) override;
        TypeBuilder* search_in_array(cli::array<TypeBuilder*>* arr, int32_t validElementsInArray, System::String* className);
        TypeBuilder* search_nested_in_array(cli::array<TypeBuilder*>* arr, int32_t validElementsInArray, System::String* className);
        static System::Type* create_modified_type(TypeBuilder* tb, System::String* modifiers);
        TypeBuilder* GetMaybeNested(TypeBuilder* t, System::String* className);
        virtual System::Type* GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase) override;
        int32_t get_next_table_index(System::Object* obj, int32_t table, bool inc);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        System::Diagnostics::SymbolStore::ISymbolWriter* GetSymWriter();
        System::Diagnostics::SymbolStore::ISymbolDocumentWriter* DefineDocument(System::String* url, System::Guid language, System::Guid languageVendor, System::Guid documentType);
        virtual cli::array<System::Type*>* GetTypes_a0a49ca31fb27210() override;
        System::Resources::IResourceWriter* DefineResource(System::String* name, System::String* description, System::Reflection::ResourceAttributes attribute);
        System::Resources::IResourceWriter* DefineResource2(System::String* name, System::String* description);
        void DefineUnmanagedResource(cli::array<unsigned char>* resource);
        void DefineUnmanagedResource2(System::String* resourceFileName);
        void DefineManifestResource(System::String* name, System::IO::Stream* stream, System::Reflection::ResourceAttributes attribute);
        void SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data);
        void SetUserEntryPoint(System::Reflection::MethodInfo* entryPoint);
        MethodToken GetMethodToken(System::Reflection::MethodInfo* method);
        MethodToken GetArrayMethodToken(System::Type* arrayClass, System::String* methodName, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        MethodToken GetConstructorToken(System::Reflection::ConstructorInfo* con);
        FieldToken GetFieldToken(System::Reflection::FieldInfo* field);
        SignatureToken GetSignatureToken(cli::array<unsigned char>* sigBytes, int32_t sigLength);
        SignatureToken GetSignatureToken2(SignatureHelper* sigHelper);
        StringToken GetStringConstant(System::String* str);
        TypeToken GetTypeToken(System::Type* type);
        TypeToken GetTypeToken2(System::String* name);
        static int32_t getUSIndex(ModuleBuilder* mb, System::String* str);
        static int32_t getToken(ModuleBuilder* mb, System::Object* obj, bool create_open_instance);
        static int32_t getMethodToken(ModuleBuilder* mb, System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types);
        int32_t GetToken(System::String* str);
        int32_t GetToken2(System::Reflection::MemberInfo* member);
        int32_t GetToken3(System::Reflection::MemberInfo* member, bool create_open_instance);
        int32_t GetToken4(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types);
        int32_t GetToken5(SignatureHelper* helper);
        void RegisterToken(System::Object* obj, int32_t token);
        TokenGenerator* GetTokenGenerator();
        static void build_metadata(ModuleBuilder* mb);
        void WriteToFile(void* handle);
        void Save();
        void CreateGlobalType();
        virtual System::Guid GetModuleVersionId_c8f7394bf9778713() override;
        static System::Guid Mono_GetGuid2(ModuleBuilder* mb);
        void GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount2(uint32_t pcTInfo);
        void Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual bool IsResource_27dec1ebb40006c6() override;
        virtual System::Reflection::MethodInfo* GetMethodImpl_6896a740547de21d(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual System::Reflection::FieldInfo* ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual System::Reflection::MemberInfo* ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual System::Reflection::MethodBase* ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual System::String* ResolveString_f0f214b35440d5e7(int32_t metadataToken) override;
        virtual cli::array<unsigned char>* ResolveSignature_a46b44b280a2cd11(int32_t metadataToken) override;
        virtual System::Type* ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_60f12c5b82d89770(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::FieldInfo* GetField_41336984e4f8fc62(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_676a5dd50d936280(System::Reflection::BindingFlags bindingFlags) override;
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_df7587a505f60ad1(System::Reflection::BindingFlags bindingFlags) override;
        virtual System::String* get_FullyQualifiedName_ae33b8f6fc78fb8f() override;
        System::String* get_FileName();
        void set_IsMain(bool value);
        virtual System::Reflection::Assembly* get_Assembly_dbea84123403c0aa() override;
        virtual System::String* get_Name_51eff21286003cfa() override;
        virtual System::String* get_ScopeName_da7d7aa6d0cd103f() override;
        virtual System::Guid get_ModuleVersionId_d7f4c95bdb0ad1b2() override;
        virtual int32_t get_MetadataToken_a9fc5f43a9908cd0() override;
        
        virtual void GetIDsOfNames_b5eeb00633ee180d(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_6b82fa62633497dc(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_919dffef8bc20d32(uint32_t pcTInfo) override;
        virtual void Invoke_4a627a0727f5913(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual bool IsDefined_3200a5511fa7cc68(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_c6789c4338e26d2b(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_a458b60110eb1adc(System::Type* attributeType, bool inherit) override;
    };
    
    
    struct MANAGED_API ModuleBuilderTokenGenerator : public virtual System::Object, public virtual TokenGenerator{
        ModuleBuilder* mb;
        
        void constructor(ModuleBuilder* mb);
        int32_t GetToken(System::String* str);
        int32_t GetToken2(System::Reflection::MemberInfo* member, bool create_open_instance);
        int32_t GetToken3(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types);
        int32_t GetToken4(SignatureHelper* helper);
        
        virtual int32_t GetToken_25c90de716173dc6(System::String* str) override;
        virtual int32_t GetToken_10bcc90da5b44782(System::Reflection::MemberInfo* member, bool create_open_instance) override;
        virtual int32_t GetToken_9da014b90fcfd506(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) override;
        virtual int32_t GetToken_dc01c561a484101(SignatureHelper* helper) override;
    };
    
    
    struct MANAGED_API OpCodeNames : public virtual System::Object{
        static cli::array<System::String*>* names;
        
        OpCodeNames();
        void constructor();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API OpCodes : public virtual System::Object{
        static OpCode Nop;
        static OpCode Break;
        static OpCode Ldarg_0;
        static OpCode Ldarg_1;
        static OpCode Ldarg_2;
        static OpCode Ldarg_3;
        static OpCode Ldloc_0;
        static OpCode Ldloc_1;
        static OpCode Ldloc_2;
        static OpCode Ldloc_3;
        static OpCode Stloc_0;
        static OpCode Stloc_1;
        static OpCode Stloc_2;
        static OpCode Stloc_3;
        static OpCode Ldarg_S;
        static OpCode Ldarga_S;
        static OpCode Starg_S;
        static OpCode Ldloc_S;
        static OpCode Ldloca_S;
        static OpCode Stloc_S;
        static OpCode Ldnull;
        static OpCode Ldc_I4_M1;
        static OpCode Ldc_I4_0;
        static OpCode Ldc_I4_1;
        static OpCode Ldc_I4_2;
        static OpCode Ldc_I4_3;
        static OpCode Ldc_I4_4;
        static OpCode Ldc_I4_5;
        static OpCode Ldc_I4_6;
        static OpCode Ldc_I4_7;
        static OpCode Ldc_I4_8;
        static OpCode Ldc_I4_S;
        static OpCode Ldc_I4;
        static OpCode Ldc_I8;
        static OpCode Ldc_R4;
        static OpCode Ldc_R8;
        static OpCode Dup;
        static OpCode Pop;
        static OpCode Jmp;
        static OpCode Call;
        static OpCode Calli;
        static OpCode Ret;
        static OpCode Br_S;
        static OpCode Brfalse_S;
        static OpCode Brtrue_S;
        static OpCode Beq_S;
        static OpCode Bge_S;
        static OpCode Bgt_S;
        static OpCode Ble_S;
        static OpCode Blt_S;
        static OpCode Bne_Un_S;
        static OpCode Bge_Un_S;
        static OpCode Bgt_Un_S;
        static OpCode Ble_Un_S;
        static OpCode Blt_Un_S;
        static OpCode Br;
        static OpCode Brfalse;
        static OpCode Brtrue;
        static OpCode Beq;
        static OpCode Bge;
        static OpCode Bgt;
        static OpCode Ble;
        static OpCode Blt;
        static OpCode Bne_Un;
        static OpCode Bge_Un;
        static OpCode Bgt_Un;
        static OpCode Ble_Un;
        static OpCode Blt_Un;
        static OpCode Switch;
        static OpCode Ldind_I1;
        static OpCode Ldind_U1;
        static OpCode Ldind_I2;
        static OpCode Ldind_U2;
        static OpCode Ldind_I4;
        static OpCode Ldind_U4;
        static OpCode Ldind_I8;
        static OpCode Ldind_I;
        static OpCode Ldind_R4;
        static OpCode Ldind_R8;
        static OpCode Ldind_Ref;
        static OpCode Stind_Ref;
        static OpCode Stind_I1;
        static OpCode Stind_I2;
        static OpCode Stind_I4;
        static OpCode Stind_I8;
        static OpCode Stind_R4;
        static OpCode Stind_R8;
        static OpCode Add;
        static OpCode Sub;
        static OpCode Mul;
        static OpCode Div;
        static OpCode Div_Un;
        static OpCode Rem;
        static OpCode Rem_Un;
        static OpCode And;
        static OpCode Or;
        static OpCode Xor;
        static OpCode Shl;
        static OpCode Shr;
        static OpCode Shr_Un;
        static OpCode Neg;
        static OpCode Not;
        static OpCode Conv_I1;
        static OpCode Conv_I2;
        static OpCode Conv_I4;
        static OpCode Conv_I8;
        static OpCode Conv_R4;
        static OpCode Conv_R8;
        static OpCode Conv_U4;
        static OpCode Conv_U8;
        static OpCode Callvirt;
        static OpCode Cpobj;
        static OpCode Ldobj;
        static OpCode Ldstr;
        static OpCode Newobj;
        static OpCode Castclass;
        static OpCode Isinst;
        static OpCode Conv_R_Un;
        static OpCode Unbox;
        static OpCode Throw;
        static OpCode Ldfld;
        static OpCode Ldflda;
        static OpCode Stfld;
        static OpCode Ldsfld;
        static OpCode Ldsflda;
        static OpCode Stsfld;
        static OpCode Stobj;
        static OpCode Conv_Ovf_I1_Un;
        static OpCode Conv_Ovf_I2_Un;
        static OpCode Conv_Ovf_I4_Un;
        static OpCode Conv_Ovf_I8_Un;
        static OpCode Conv_Ovf_U1_Un;
        static OpCode Conv_Ovf_U2_Un;
        static OpCode Conv_Ovf_U4_Un;
        static OpCode Conv_Ovf_U8_Un;
        static OpCode Conv_Ovf_I_Un;
        static OpCode Conv_Ovf_U_Un;
        static OpCode Box;
        static OpCode Newarr;
        static OpCode Ldlen;
        static OpCode Ldelema;
        static OpCode Ldelem_I1;
        static OpCode Ldelem_U1;
        static OpCode Ldelem_I2;
        static OpCode Ldelem_U2;
        static OpCode Ldelem_I4;
        static OpCode Ldelem_U4;
        static OpCode Ldelem_I8;
        static OpCode Ldelem_I;
        static OpCode Ldelem_R4;
        static OpCode Ldelem_R8;
        static OpCode Ldelem_Ref;
        static OpCode Stelem_I;
        static OpCode Stelem_I1;
        static OpCode Stelem_I2;
        static OpCode Stelem_I4;
        static OpCode Stelem_I8;
        static OpCode Stelem_R4;
        static OpCode Stelem_R8;
        static OpCode Stelem_Ref;
        static OpCode Ldelem;
        static OpCode Stelem;
        static OpCode Unbox_Any;
        static OpCode Conv_Ovf_I1;
        static OpCode Conv_Ovf_U1;
        static OpCode Conv_Ovf_I2;
        static OpCode Conv_Ovf_U2;
        static OpCode Conv_Ovf_I4;
        static OpCode Conv_Ovf_U4;
        static OpCode Conv_Ovf_I8;
        static OpCode Conv_Ovf_U8;
        static OpCode Refanyval;
        static OpCode Ckfinite;
        static OpCode Mkrefany;
        static OpCode Ldtoken;
        static OpCode Conv_U2;
        static OpCode Conv_U1;
        static OpCode Conv_I;
        static OpCode Conv_Ovf_I;
        static OpCode Conv_Ovf_U;
        static OpCode Add_Ovf;
        static OpCode Add_Ovf_Un;
        static OpCode Mul_Ovf;
        static OpCode Mul_Ovf_Un;
        static OpCode Sub_Ovf;
        static OpCode Sub_Ovf_Un;
        static OpCode Endfinally;
        static OpCode Leave;
        static OpCode Leave_S;
        static OpCode Stind_I;
        static OpCode Conv_U;
        static OpCode Prefix7;
        static OpCode Prefix6;
        static OpCode Prefix5;
        static OpCode Prefix4;
        static OpCode Prefix3;
        static OpCode Prefix2;
        static OpCode Prefix1;
        static OpCode Prefixref;
        static OpCode Arglist;
        static OpCode Ceq;
        static OpCode Cgt;
        static OpCode Cgt_Un;
        static OpCode Clt;
        static OpCode Clt_Un;
        static OpCode Ldftn;
        static OpCode Ldvirtftn;
        static OpCode Ldarg;
        static OpCode Ldarga;
        static OpCode Starg;
        static OpCode Ldloc;
        static OpCode Ldloca;
        static OpCode Stloc;
        static OpCode Localloc;
        static OpCode Endfilter;
        static OpCode Unaligned;
        static OpCode Volatile;
        static OpCode Tailcall;
        static OpCode Initobj;
        static OpCode Constrained;
        static OpCode Cpblk;
        static OpCode Initblk;
        static OpCode Rethrow;
        static OpCode Sizeof;
        static OpCode Refanytype;
        static OpCode Readonly;
        
        OpCodes();
        void constructor();
        static void static_constructor();
        static bool TakesSingleByteArgument(OpCode inst);
        
    };
    
    
    struct MANAGED_API ParameterBuilder : public virtual System::Object, public virtual System::Runtime::InteropServices::_ParameterBuilder{
        System::Reflection::MethodBase* methodb;
        System::String* name;
        cli::array<CustomAttributeBuilder*>* cattrs;
        UnmanagedMarshal* marshal_info;
        System::Reflection::ParameterAttributes attrs;
        int32_t position;
        int32_t table_idx;
        System::Object* def_value;
        
        void constructor(System::Reflection::MethodBase* mb, int32_t pos, System::Reflection::ParameterAttributes attributes, System::String* strParamName);
        virtual ParameterToken GetToken_51569337479a3604();
        virtual void SetConstant_9d13067d82b82d9e(System::Object* defaultValue);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        virtual void SetMarshal_d3c677d0cc1ab892(UnmanagedMarshal* unmanagedMarshal);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual int32_t get_Attributes_37cd73d6903dd16e();
        bool get_IsIn();
        bool get_IsOut();
        bool get_IsOptional();
        virtual System::String* get_Name_bea4eaf90a09d50f();
        virtual int32_t get_Position_3671554786d5564d();
        
        virtual void GetIDsOfNames_8d906f6d37441d7c(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_dc79acc00c7841a(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_ca9ef6243f77d10e(uint32_t pcTInfo) override;
        virtual void Invoke_ee3a08d633f41d32(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API PropertyBuilder : public virtual System::Reflection::PropertyInfo, public virtual System::Runtime::InteropServices::_PropertyBuilder{
        System::Reflection::PropertyAttributes attrs;
        System::String* name;
        System::Type* type;
        cli::array<System::Type*>* parameters;
        cli::array<CustomAttributeBuilder*>* cattrs;
        System::Object* def_value;
        MethodBuilder* set_method;
        MethodBuilder* get_method;
        int32_t table_idx;
        TypeBuilder* typeb;
        cli::array<System::Type*>* returnModReq;
        cli::array<System::Type*>* returnModOpt;
        cli::array<cli::array<System::Type*>*>* paramModReq;
        cli::array<cli::array<System::Type*>*>* paramModOpt;
        System::Reflection::CallingConventions callingConvention;
        
        void constructor(TypeBuilder* tb, System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt);
        void AddOtherMethod(MethodBuilder* mdBuilder);
        virtual cli::array<System::Reflection::MethodInfo*>* GetAccessors_9a7eb6d477c42a6d(bool nonPublic) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::MethodInfo* GetGetMethod_598f563fd3755017(bool nonPublic) override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetIndexParameters_66437e9b713ac629() override;
        virtual System::Reflection::MethodInfo* GetSetMethod_8896cb22c4f8d900(bool nonPublic) override;
        virtual System::Object* GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index) override;
        virtual System::Object* GetValue_e428a2cef74e332d(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        void SetConstant(System::Object* defaultValue);
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        void SetGetMethod(MethodBuilder* mdBuilder);
        void SetSetMethod(MethodBuilder* mdBuilder);
        virtual void SetValue_1695ad6de909516e(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) override;
        virtual void SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        System::Exception* not_supported();
        virtual System::Reflection::PropertyAttributes get_Attributes_44d275d722218b81() override;
        virtual bool get_CanRead_f4dae9b567f6ce33() override;
        virtual bool get_CanWrite_a9c71933951c9826() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        PropertyToken get_PropertyToken();
        virtual System::Type* get_PropertyType_68b4b04678fe4f8a() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        
        virtual System::Object* GetValue_2c0ea8f469169d57(System::Object* obj, cli::array<System::Object*>* index) override;
        virtual void SetValue_42dc5b3a16b3868c(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) override;
        virtual void GetIDsOfNames_faa2940ec0c854b6(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_7f36c44ea722d64(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_64e3fad5407a69b0(uint32_t pcTInfo) override;
        virtual void Invoke_eb1f540198acef11(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API PropertyOnTypeBuilderInst : public virtual System::Reflection::PropertyInfo{
        System::Reflection::MonoGenericClass* instantiation;
        System::Reflection::PropertyInfo* prop;
        
        void constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::PropertyInfo* prop);
        virtual cli::array<System::Reflection::MethodInfo*>* GetAccessors_9a7eb6d477c42a6d(bool nonPublic) override;
        virtual System::Reflection::MethodInfo* GetGetMethod_598f563fd3755017(bool nonPublic) override;
        virtual cli::array<System::Reflection::ParameterInfo*>* GetIndexParameters_66437e9b713ac629() override;
        virtual System::Reflection::MethodInfo* GetSetMethod_8896cb22c4f8d900(bool nonPublic) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::Object* GetValue_e428a2cef74e332d(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual void SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        virtual System::Reflection::PropertyAttributes get_Attributes_44d275d722218b81() override;
        virtual bool get_CanRead_f4dae9b567f6ce33() override;
        virtual bool get_CanWrite_a9c71933951c9826() override;
        virtual System::Type* get_PropertyType_68b4b04678fe4f8a() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        
    };
    
    
    struct MANAGED_API SignatureHelper : public virtual System::Object, public virtual System::Runtime::InteropServices::_SignatureHelper{
        ModuleBuilder* module;
        cli::array<System::Type*>* arguments;
        SignatureHelperType type;
        System::Type* returnType;
        System::Reflection::CallingConventions callConv;
        System::Runtime::InteropServices::CallingConvention unmanagedCallConv;
        cli::array<cli::array<System::Type*>*>* modreqs;
        cli::array<cli::array<System::Type*>*>* modopts;
        
        void constructor(ModuleBuilder* module, SignatureHelperType type);
        static SignatureHelper* GetFieldSigHelper(System::Reflection::Module* mod);
        static SignatureHelper* GetLocalVarSigHelper(System::Reflection::Module* mod);
        static SignatureHelper* GetLocalVarSigHelper2();
        static SignatureHelper* GetMethodSigHelper(System::Reflection::CallingConventions callingConvention, System::Type* returnType);
        static SignatureHelper* GetMethodSigHelper2(System::Runtime::InteropServices::CallingConvention unmanagedCallingConvention, System::Type* returnType);
        static SignatureHelper* GetMethodSigHelper3(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Type* returnType);
        static SignatureHelper* GetMethodSigHelper4(System::Reflection::Module* mod, System::Runtime::InteropServices::CallingConvention unmanagedCallConv, System::Type* returnType);
        static SignatureHelper* GetMethodSigHelper5(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        static SignatureHelper* GetPropertySigHelper(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        static SignatureHelper* GetPropertySigHelper2(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers);
        static SignatureHelper* GetPropertySigHelper3(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers);
        static int32_t AppendArray(cli::array<System::Type*>* array, System::Type* t);
        static void AppendArrayAt(cli::array<cli::array<System::Type*>*>* array, cli::array<System::Type*>* t, int32_t pos);
        static void ValidateParameterModifiers(System::String* name, cli::array<System::Type*>* parameter_modifiers);
        static void ValidateCustomModifier(int32_t n, cli::array<cli::array<System::Type*>*>* custom_modifiers, System::String* name);
        static System::Exception* MissingFeature();
        void AddArguments(cli::array<System::Type*>* arguments, cli::array<cli::array<System::Type*>*>* requiredCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalCustomModifiers);
        void AddArgument(System::Type* argument, bool pinned);
        void AddArgument2(System::Type* argument, cli::array<System::Type*>* requiredCustomModifiers, cli::array<System::Type*>* optionalCustomModifiers);
        void AddArgument3(System::Type* clsArgument);
        void AddSentinel();
        static bool CompareOK(cli::array<cli::array<System::Type*>*>* one, cli::array<cli::array<System::Type*>*>* two);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        cli::array<unsigned char>* get_signature_local();
        cli::array<unsigned char>* get_signature_field();
        cli::array<unsigned char>* GetSignature();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        static SignatureHelper* GetMethodSigHelper6(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Runtime::InteropServices::CallingConvention unmanagedCallingConvention, System::Type* returnType, cli::array<System::Type*>* parameters);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        
        virtual void GetIDsOfNames_63d5038940a76397(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_65f52795e9f5dec4(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_3492155c34a71e8a(uint32_t pcTInfo) override;
        virtual void Invoke_2f7d24d0932ca178(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API TypeBuilder : public virtual System::Type, public virtual System::Runtime::InteropServices::_TypeBuilder{
        static constexpr int32_t UnspecifiedTypeSize = 0;
        System::String* tname;
        System::String* nspace;
        System::Type* parent;
        System::Type* nesting_type;
        cli::array<System::Type*>* interfaces;
        int32_t num_methods;
        cli::array<MethodBuilder*>* methods;
        cli::array<ConstructorBuilder*>* ctors;
        cli::array<PropertyBuilder*>* properties;
        int32_t num_fields;
        cli::array<FieldBuilder*>* fields;
        cli::array<EventBuilder*>* events;
        cli::array<CustomAttributeBuilder*>* cattrs;
        cli::array<TypeBuilder*>* subtypes;
        System::Reflection::TypeAttributes attrs;
        int32_t table_idx;
        ModuleBuilder* pmodule;
        int32_t class_size;
        PackingSize packing_size;
        void* generic_container;
        cli::array<GenericTypeParameterBuilder*>* generic_params;
        cli::array<RefEmitPermissionSet>* permissions;
        System::Type* created;
        System::String* fullname;
        bool createTypeCalled;
        System::Type* underlying_type;
        
        void constructor(ModuleBuilder* mb, System::Reflection::TypeAttributes attr, int32_t table_idx);
        void constructor(ModuleBuilder* mb, System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packing_size, int32_t type_size, System::Type* nesting_type);
        virtual System::Reflection::TypeAttributes GetAttributeFlagsImpl_ea77781598cb234a() override;
        void setup_internal_class(TypeBuilder* tb);
        void create_internal_class(TypeBuilder* tb);
        void setup_generic_class();
        void create_generic_class();
        System::Reflection::EventInfo* get_event_info(EventBuilder* eb);
        virtual bool IsSubclassOf_5d7dbe0215a30fda(System::Type* c) override;
        System::String* GetFullName();
        void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset);
        void AddInterfaceImplementation(System::Type* interfaceType);
        virtual System::Reflection::ConstructorInfo* GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual bool IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_b790992b66049291(bool inherit) override;
        virtual cli::array<System::Object*>* GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) override;
        TypeBuilder* DefineNestedType(System::String* name);
        TypeBuilder* DefineNestedType2(System::String* name, System::Reflection::TypeAttributes attr);
        TypeBuilder* DefineNestedType3(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent);
        TypeBuilder* DefineNestedType4(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packSize, int32_t typeSize);
        TypeBuilder* DefineNestedType5(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces);
        TypeBuilder* DefineNestedType6(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, int32_t typeSize);
        TypeBuilder* DefineNestedType7(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packSize);
        ConstructorBuilder* DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes);
        ConstructorBuilder* DefineConstructor2(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalCustomModifiers);
        ConstructorBuilder* DefineDefaultConstructor(System::Reflection::MethodAttributes attributes);
        void append_method(MethodBuilder* mb);
        MethodBuilder* DefineMethod(System::String* name, System::Reflection::MethodAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        MethodBuilder* DefineMethod2(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        MethodBuilder* DefineMethod3(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers);
        MethodBuilder* DefinePInvokeMethod(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);
        MethodBuilder* DefinePInvokeMethod2(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);
        MethodBuilder* DefinePInvokeMethod3(System::String* name, System::String* dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);
        MethodBuilder* DefineMethod4(System::String* name, System::Reflection::MethodAttributes attributes);
        MethodBuilder* DefineMethod5(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention);
        void DefineMethodOverride(System::Reflection::MethodInfo* methodInfoBody, System::Reflection::MethodInfo* methodInfoDeclaration);
        FieldBuilder* DefineField(System::String* fieldName, System::Type* type, System::Reflection::FieldAttributes attributes);
        FieldBuilder* DefineField2(System::String* fieldName, System::Type* type, cli::array<System::Type*>* requiredCustomModifiers, cli::array<System::Type*>* optionalCustomModifiers, System::Reflection::FieldAttributes attributes);
        PropertyBuilder* DefineProperty(System::String* name, System::Reflection::PropertyAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        PropertyBuilder* DefineProperty2(System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes);
        PropertyBuilder* DefineProperty3(System::String* name, System::Reflection::PropertyAttributes attributes, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers);
        PropertyBuilder* DefineProperty4(System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers);
        ConstructorBuilder* DefineTypeInitializer();
        System::Type* create_runtime_class(TypeBuilder* tb);
        bool is_nested_in(System::Type* t);
        bool has_ctor_method();
        System::Type* CreateType();
        void GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter);
        virtual cli::array<System::Reflection::ConstructorInfo*>* GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) override;
        cli::array<System::Reflection::ConstructorInfo*>* GetConstructorsInternal(System::Reflection::BindingFlags bindingAttr);
        virtual System::Type* GetElementType_ab5070dbbfe66f5f() override;
        virtual System::Reflection::EventInfo* GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_e6858c959b77de38() override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) override;
        cli::array<System::Reflection::EventInfo*>* GetEvents_internal(System::Reflection::BindingFlags bindingAttr);
        virtual System::Reflection::FieldInfo* GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::FieldInfo*>* GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Type* GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) override;
        virtual cli::array<System::Type*>* GetInterfaces_52a89380e2c4a725() override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) override;
        cli::array<System::Reflection::MethodInfo*>* GetMethodsByName(System::String* name, System::Reflection::BindingFlags bindingAttr, bool ignoreCase, System::Type* reflected_type);
        virtual cli::array<System::Reflection::MethodInfo*>* GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::MethodInfo* GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual System::Type* GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Type*>* GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) override;
        virtual cli::array<System::Reflection::PropertyInfo*>* GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::PropertyInfo* GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) override;
        virtual bool HasElementTypeImpl_36e3ca23a6e8185() override;
        virtual System::Object* InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) override;
        virtual bool IsArrayImpl_cf15f782d0773ffd() override;
        virtual bool IsByRefImpl_a1c403acfb80fd15() override;
        virtual bool IsCOMObjectImpl_27dfb5d026264856() override;
        virtual bool IsPointerImpl_86e7f94717f8b1ea() override;
        virtual bool IsPrimitiveImpl_b5951f74b8c48703() override;
        virtual bool IsValueTypeImpl_fe1651255927f3c6() override;
        virtual System::Type* MakeArrayType_9ec2b26036f00b30() override;
        virtual System::Type* MakeArrayType_b5bc09824bbbb104(int32_t rank) override;
        virtual System::Type* MakeByRefType_fc54947a1bb074be() override;
        virtual System::Type* MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) override;
        virtual System::Type* MakePointerType_f23f3b9330ac63da() override;
        void SetCustomAttribute(CustomAttributeBuilder* customBuilder);
        void SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute);
        EventBuilder* DefineEvent(System::String* name, System::Reflection::EventAttributes attributes, System::Type* eventtype);
        FieldBuilder* DefineInitializedData(System::String* name, cli::array<unsigned char>* data, System::Reflection::FieldAttributes attributes);
        FieldBuilder* DefineUninitializedData(System::String* name, int32_t size, System::Reflection::FieldAttributes attributes);
        void SetParent(System::Type* parent);
        int32_t get_next_table_index(System::Object* obj, int32_t table, bool inc);
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) override;
        virtual System::Type* InternalResolve_ba2e81f73f0d7994() override;
        System::Exception* not_supported();
        void check_not_created();
        void check_created();
        void check_name(System::String* argName, System::String* name);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual bool IsAssignableFrom_e3aa32d778e63a90(System::Type* c) override;
        bool IsAssignableTo(System::Type* c);
        bool IsCreated();
        virtual cli::array<System::Type*>* GetGenericArguments_a7fb476275cfe9a3() override;
        virtual System::Type* GetGenericTypeDefinition_15f8fc7813e8e8bf() override;
        cli::array<GenericTypeParameterBuilder*>* DefineGenericParameters(cli::array<System::String*>* names);
        static System::Reflection::ConstructorInfo* GetConstructor5(System::Type* type, System::Reflection::ConstructorInfo* constructor_);
        static bool IsValidGetMethodType(System::Type* type);
        static System::Reflection::MethodInfo* GetMethod8(System::Type* type, System::Reflection::MethodInfo* method);
        static System::Reflection::FieldInfo* GetField5(System::Type* type, System::Reflection::FieldInfo* field);
        System::TypeCode GetTypeCodeInternal2();
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        virtual System::Reflection::Assembly* get_Assembly_3aae0acbf2a6d696() override;
        virtual System::String* get_AssemblyQualifiedName_cea373c2171bd483() override;
        virtual System::Type* get_BaseType_6a0646ae880055f6() override;
        virtual System::Type* get_DeclaringType_6121cd6a84393166() override;
        virtual System::Type* get_UnderlyingSystemType_9ccb7bb8385521f6() override;
        virtual System::String* get_FullName_7e8fa72ba225e1a4() override;
        virtual System::Guid get_GUID_bdb6b630c3237a21() override;
        virtual System::Reflection::Module* get_Module_ea7d65dc88202263() override;
        virtual System::String* get_Name_50fad5fa936c3ae2() override;
        virtual System::String* get_Namespace_cb4ed37007083e7f() override;
        PackingSize get_PackingSize();
        int32_t get_Size();
        virtual System::Type* get_ReflectedType_bf4971c0f442b9dc() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a14995fa9102936b() override;
        TypeToken get_TypeToken();
        bool get_is_created();
        virtual bool get_ContainsGenericParameters_19598881dd690ad3() override;
        virtual bool get_IsGenericParameter_2a17c4bf67798b07() override;
        virtual System::Reflection::GenericParameterAttributes get_GenericParameterAttributes_b31b8b8f1d79d815() override;
        virtual bool get_IsGenericTypeDefinition_8008dd501dc43926() override;
        virtual bool get_IsGenericType_4db8ddd5b97f3c14() override;
        virtual int32_t get_GenericParameterPosition_ae331bf96a7667b1() override;
        virtual System::Reflection::MethodBase* get_DeclaringMethod_6dc070d2040335e5() override;
        
        virtual bool IsSubclassOf_875608a6f6bc1b50(System::Type* c) override;
        virtual cli::array<System::Reflection::EventInfo*>* GetEvents_1787f024dc60b66d() override;
        virtual cli::array<System::Reflection::MemberInfo*>* GetMember_aba72a46394724d6(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) override;
        virtual System::Reflection::InterfaceMapping GetInterfaceMap_1dcbd2012c18f488(System::Type* interfaceType) override;
        virtual System::String* ToString_7ae6b85e974ee75a() override;
        virtual bool IsAssignableFrom_9a1536c9f0047a78(System::Type* c) override;
        virtual void GetIDsOfNames_def76ee942c4824f(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_a55b188a8c4e4ae1(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_bfdd8b57afa1b5e3(uint32_t pcTInfo) override;
        virtual void Invoke_6ea95a7f5e37a6db(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
        virtual System::Type* get_DeclaringType_57e85ec7caa4a7e9() override;
        virtual System::Reflection::Module* get_Module_e878d08348938612() override;
        virtual System::Type* get_ReflectedType_338a78c0f78949() override;
        virtual System::RuntimeTypeHandle get_TypeHandle_a660506a2c0cc3d5() override;
    };
    
    
    struct MANAGED_API UnmanagedMarshal : public virtual System::Object{
        int32_t count;
        System::Runtime::InteropServices::UnmanagedType t;
        System::Runtime::InteropServices::UnmanagedType tbase;
        System::String* guid;
        System::String* mcookie;
        System::String* marshaltype;
        System::Type* marshaltyperef;
        int32_t param_num;
        bool has_size;
        
        void constructor(System::Runtime::InteropServices::UnmanagedType maint, int32_t cnt);
        void constructor(System::Runtime::InteropServices::UnmanagedType maint, System::Runtime::InteropServices::UnmanagedType elemt);
        static UnmanagedMarshal* DefineByValArray(int32_t elemCount);
        static UnmanagedMarshal* DefineByValTStr(int32_t elemCount);
        static UnmanagedMarshal* DefineLPArray(System::Runtime::InteropServices::UnmanagedType elemType);
        static UnmanagedMarshal* DefineSafeArray(System::Runtime::InteropServices::UnmanagedType elemType);
        static UnmanagedMarshal* DefineUnmanagedMarshal(System::Runtime::InteropServices::UnmanagedType unmanagedType);
        static UnmanagedMarshal* DefineCustom(System::Type* typeref, System::String* cookie, System::String* mtype, System::Guid id);
        static UnmanagedMarshal* DefineLPArrayInternal(System::Runtime::InteropServices::UnmanagedType elemType, int32_t sizeConst, int32_t sizeParamIndex);
        System::Runtime::InteropServices::MarshalAsAttribute* ToMarshalAsAttribute();
        System::Runtime::InteropServices::UnmanagedType get_BaseType();
        int32_t get_ElementCount();
        System::Runtime::InteropServices::UnmanagedType get_GetUnmanagedType();
        System::Guid get_IIDGuid();
        
    };
    
}}}
namespace System { namespace Resources {
    
    struct MANAGED_API MissingManifestResourceException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* inner);
        
    };
    
    
    struct MANAGED_API MissingSatelliteAssemblyException : public virtual System::SystemException{
        System::String* culture;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::String* cultureName);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* inner);
        System::String* get_CultureName();
        
    };
    
    
    struct MANAGED_API NeutralResourcesLanguageAttribute : public virtual System::Attribute{
        System::String* culture;
        UltimateResourceFallbackLocation loc;
        
        void constructor(System::String* cultureName);
        void constructor(System::String* cultureName, UltimateResourceFallbackLocation location);
        System::String* get_CultureName();
        UltimateResourceFallbackLocation get_Location();
        
    };
    
    
    struct MANAGED_API ResourceManager : public virtual System::Object{
        static System::Object* thisLock;
        static System::Collections::Hashtable* ResourceCache;
        static System::Collections::Hashtable* NonExistent;
        static int32_t HeaderVersionNumber;
        static int32_t MagicNumber;
        System::String* BaseNameField;
        System::Reflection::Assembly* MainAssembly;
        System::Collections::Hashtable* ResourceSets;
        bool ignoreCase;
        System::Type* resourceSource;
        System::Type* resourceSetType;
        System::String* resourceDir;
        System::Globalization::CultureInfo* neutral_culture;
        UltimateResourceFallbackLocation fallbackLocation;
        
        ResourceManager();
        void constructor();
        void constructor(System::Type* resourceSource);
        void constructor(System::String* baseName, System::Reflection::Assembly* assembly);
        void constructor(System::String* baseName, System::Reflection::Assembly* assembly, System::Type* usingResourceSet);
        void constructor(System::String* baseName, System::String* resourceDir, System::Type* usingResourceSet);
        static void static_constructor();
        static System::Collections::Hashtable* GetResourceSets(System::Reflection::Assembly* assembly, System::String* basename);
        System::Type* CheckResourceSetType(System::Type* usingResourceSet, bool verifyType);
        static ResourceManager* CreateFileBasedResourceManager(System::String* baseName, System::String* resourceDir, System::Type* usingResourceSet);
        virtual System::Object* GetObject_16db62815fa4733(System::String* name);
        virtual System::Object* GetObject_53175f9d9b315c79(System::String* name, System::Globalization::CultureInfo* culture);
        virtual ResourceSet* GetResourceSet_4e1e9eff5ce476ff(System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents);
        virtual System::String* GetString_95bba2b194faa7a4(System::String* name);
        virtual System::String* GetString_3af0f7fcaae152bd(System::String* name, System::Globalization::CultureInfo* culture);
        virtual System::String* GetResourceFileName_202d27086a3c543f(System::Globalization::CultureInfo* culture);
        System::String* GetResourceFilePath(System::Globalization::CultureInfo* culture);
        System::IO::Stream* GetManifestResourceStreamNoCase(System::Reflection::Assembly* ass, System::String* fn);
        System::IO::UnmanagedMemoryStream* GetStream(System::String* name);
        System::IO::UnmanagedMemoryStream* GetStream2(System::String* name, System::Globalization::CultureInfo* culture);
        virtual ResourceSet* InternalGetResourceSet_344f5edc45d300ea(System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents);
        virtual void ReleaseAllResources_573e34f7a4ef7eb8();
        static System::Globalization::CultureInfo* GetNeutralResourcesLanguage(System::Reflection::Assembly* a);
        static System::Version* GetSatelliteContractVersion(System::Reflection::Assembly* a);
        MissingManifestResourceException* AssemblyResourceMissing(System::String* fileName);
        System::String* GetManifestResourceName(System::String* fn);
        virtual System::String* get_BaseName_a8e0203402ec7972();
        virtual bool get_IgnoreCase_5f0cb8373ce10f99();
        virtual bool set_IgnoreCase_7f19d1f9cb717654(bool value);
        virtual System::Type* get_ResourceSetType_4d7f35a8beac6509();
        UltimateResourceFallbackLocation get_FallbackLocation();
        UltimateResourceFallbackLocation set_FallbackLocation(UltimateResourceFallbackLocation value);
        
    };
    
    
    struct MANAGED_API ResourceEnumerator : public virtual System::Object, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        ResourceReader* reader;
        int32_t index;
        bool finished;
        
        void constructor(ResourceReader* readerToEnumerate);
        bool MoveNext();
        void Reset();
        void FillCache();
        int32_t get_Index();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        System::IO::UnmanagedMemoryStream* get_ValueAsStream();
        System::Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API ResourceReader : public virtual System::Object, public virtual IResourceReader, public virtual System::Collections::IEnumerable, public virtual System::IDisposable{
        System::IO::BinaryReader* reader;
        System::Object* readerLock;
        System::Runtime::Serialization::IFormatter* formatter;
        int32_t resourceCount;
        int32_t typeCount;
        cli::array<System::String*>* typeNames;
        cli::array<int32_t>* hashes;
        cli::array<ResourceInfo>* infos;
        int32_t dataSectionOffset;
        int64_t nameSectionOffset;
        int32_t resource_ver;
        cli::array<ResourceCacheItem>* cache;
        System::Object* cache_lock;
        
        void constructor(System::IO::Stream* stream);
        void constructor(System::String* fileName);
        void ReadHeaders();
        void CreateResourceInfo(int64_t position, ResourceInfo info);
        int32_t Read7BitEncodedInt();
        System::Object* ReadValueVer2(int32_t type_index);
        System::Object* ReadValueVer1(System::Type* type);
        System::Object* ReadNonPredefinedValue(System::Type* exp_type);
        void LoadResourceValues(cli::array<ResourceCacheItem>* store);
        System::IO::UnmanagedMemoryStream* ResourceValueAsStream(System::String* name, int32_t index);
        void Close();
        void Dispose();
        System::Collections::IDictionaryEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        void GetResourceData(System::String* resourceName, System::String* resourceType, cli::array<unsigned char>* resourceData);
        void GetResourceDataAt(int32_t index, System::String* resourceType, cli::array<unsigned char>* data);
        void Dispose2(bool disposing);
        
        virtual void Close_9051b9e2cc8ad458() override;
        virtual void Dispose_95cb2516542c2f97() override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_5461f24f4ddc9df4() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
    };
    
    
    struct MANAGED_API TypeByNameObject : public virtual System::Object{
        System::String* TypeName;
        cli::array<unsigned char>* Value;
        
        void constructor(System::String* typeName, cli::array<unsigned char>* value);
        
    };
    
    
    struct MANAGED_API StreamWrapper : public virtual System::Object{
        bool CloseAfterWrite;
        System::IO::Stream* Stream2;
        
        void constructor(System::IO::Stream* stream, bool closeAfterWrite);
        
    };
    
    
    struct MANAGED_API ResourceWriter : public virtual System::Object, public virtual IResourceWriter, public virtual System::IDisposable{
        System::Collections::SortedList* resources;
        System::IO::Stream* stream;
        System::Func2<System::Type*, System::String*>* type_name_converter;
        
        void constructor(System::IO::Stream* stream);
        void constructor(System::String* fileName);
        void AddResource(System::String* name, cli::array<unsigned char>* value);
        void AddResource2(System::String* name, System::Object* value);
        void AddResource3(System::String* name, System::String* value);
        void AddResource4(System::String* name, System::IO::Stream* value);
        void AddResource5(System::String* name, System::IO::Stream* value, bool closeAfterWrite);
        void Close();
        void Dispose();
        void Dispose2(bool disposing);
        void AddResourceData(System::String* name, System::String* typeName, cli::array<unsigned char>* serializedData);
        void Generate();
        cli::array<unsigned char>* ReadStream(System::IO::Stream* stream);
        int32_t GetHash(System::String* name);
        void Write7BitEncodedInt(System::IO::BinaryWriter* writer, int32_t value);
        System::Func2<System::Type*, System::String*>* get_TypeNameConverter();
        System::Func2<System::Type*, System::String*>* set_TypeNameConverter(System::Func2<System::Type*, System::String*>* value);
        System::IO::Stream* get_Stream();
        
        virtual void AddResource_9538446dc281eb76(System::String* name, cli::array<unsigned char>* value) override;
        virtual void AddResource_4d7d112bfae77d9f(System::String* name, System::Object* value) override;
        virtual void AddResource_84237ae847b43967(System::String* name, System::String* value) override;
        virtual void Close_b9951e614539ebeb() override;
        virtual void Dispose_95cb2516542c2f97() override;
        virtual void Generate_fe5750179d21610b() override;
    };
    
    
    struct MANAGED_API RuntimeResourceSet : public virtual ResourceSet{
        
        void constructor(System::IO::UnmanagedMemoryStream* stream);
        void constructor(System::IO::Stream* stream);
        void constructor(System::String* fileName);
        virtual System::Object* GetObject_2d3d6866d6caab0d(System::String* name) override;
        virtual System::Object* GetObject_7df952fd6236c0e7(System::String* name, bool ignoreCase) override;
        System::Object* CloneDisposableObjectIfPossible(System::Object* value);
        
    };
    
    
    struct MANAGED_API SatelliteContractVersionAttribute : public virtual System::Attribute{
        System::Version* ver;
        
        void constructor(System::String* version);
        System::String* get_Version();
        
    };
    
    
    struct MANAGED_API NameOrId : public virtual System::Object{
        System::String* name;
        int32_t id;
        
        void constructor(System::String* name);
        void constructor(int32_t id);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        bool get_IsName();
        System::String* get_Name();
        int32_t get_Id();
        
    };
    
    
    struct MANAGED_API Win32EncodedResource : public virtual Win32Resource{
        cli::array<unsigned char>* data;
        
        void constructor(NameOrId* type, NameOrId* name, int32_t language, cli::array<unsigned char>* data);
        virtual void WriteTo_c67bbc499a650118(System::IO::Stream* s) override;
        cli::array<unsigned char>* get_Data();
        
    };
    
    
    struct MANAGED_API Win32IconResource : public virtual Win32Resource{
        ICONDIRENTRY* icon;
        
        void constructor(int32_t id, int32_t language, ICONDIRENTRY* icon);
        virtual void WriteTo_c67bbc499a650118(System::IO::Stream* s) override;
        ICONDIRENTRY* get_Icon();
        
    };
    
    
    struct MANAGED_API Win32GroupIconResource : public virtual Win32Resource{
        cli::array<Win32IconResource*>* icons;
        
        void constructor(int32_t id, int32_t language, cli::array<Win32IconResource*>* icons);
        virtual void WriteTo_c67bbc499a650118(System::IO::Stream* s) override;
        
    };
    
    
    struct MANAGED_API Win32VersionResource : public virtual Win32Resource{
        cli::array<System::String*>* WellKnownProperties;
        int64_t signature;
        int32_t struct_version;
        int64_t file_version;
        int64_t product_version;
        int32_t file_flags_mask;
        int32_t file_flags;
        int32_t file_os;
        int32_t file_type;
        int32_t file_subtype;
        int64_t file_date;
        int32_t file_lang;
        int32_t file_codepage;
        System::Collections::Hashtable* properties;
        
        void constructor(int32_t id, int32_t language, bool compilercontext);
        void emit_padding(System::IO::BinaryWriter* w);
        void patch_length(System::IO::BinaryWriter* w, int64_t len_pos);
        virtual void WriteTo_c67bbc499a650118(System::IO::Stream* ms) override;
        System::String* get_Version();
        System::String* set_Version(System::String* value);
        virtual void set_Item_c65fe9b5aa0293fb(System::String* key, System::String* value);
        virtual System::String* get_Comments_292a2e978b345fe8();
        virtual System::String* set_Comments_ba80af877239af8f(System::String* value);
        virtual System::String* get_CompanyName_dd0c7cfed6274d96();
        virtual System::String* set_CompanyName_75df1ff63122ba96(System::String* value);
        virtual System::String* get_LegalCopyright_fea3ac5c287f097d();
        virtual System::String* set_LegalCopyright_72dcc52259fa2266(System::String* value);
        virtual System::String* get_LegalTrademarks_63d2e4cf760a358b();
        virtual System::String* set_LegalTrademarks_f4351a90b4de437a(System::String* value);
        virtual System::String* get_OriginalFilename_4f17e8e26471b340();
        virtual System::String* set_OriginalFilename_6fc219c4b034e23f(System::String* value);
        virtual System::String* get_ProductName_245742f70be2370a();
        virtual System::String* set_ProductName_8e2f958b8d465792(System::String* value);
        virtual System::String* get_ProductVersion_2c081e9139be1270();
        virtual System::String* set_ProductVersion_79ce0dccd0359143(System::String* value);
        virtual System::String* get_InternalName_f5d50e34ee4b7308();
        virtual System::String* set_InternalName_cc60ad1d2c83711f(System::String* value);
        virtual System::String* get_FileDescription_97d108b9e8a25444();
        virtual System::String* set_FileDescription_54aa53809e1edc34(System::String* value);
        virtual int32_t get_FileLanguage_42be7a80077fad4e();
        virtual int32_t set_FileLanguage_c5e46a38112121c2(int32_t value);
        virtual System::String* get_FileVersion_90a7ebf29c1ef843();
        virtual System::String* set_FileVersion_9572d918259eff23(System::String* value);
        
    };
    
    
    struct MANAGED_API Win32ResFileReader : public virtual System::Object{
        System::IO::Stream* res_file;
        
        void constructor(System::IO::Stream* s);
        int32_t read_int16();
        int32_t read_int32();
        bool read_padding();
        NameOrId* read_ordinal();
        System::Collections::ICollection* ReadResources();
        
    };
    
    
    struct MANAGED_API ICONDIRENTRY : public virtual System::Object{
        unsigned char bWidth;
        unsigned char bHeight;
        unsigned char bColorCount;
        unsigned char bReserved;
        int16_t wPlanes;
        int16_t wBitCount;
        int32_t dwBytesInRes;
        int32_t dwImageOffset;
        cli::array<unsigned char>* image;
        
        void constructor();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API Win32IconFileReader : public virtual System::Object{
        System::IO::Stream* iconFile;
        
        void constructor(System::IO::Stream* s);
        cli::array<ICONDIRENTRY*>* ReadIcons();
        
    };
    
}}
namespace System { namespace Runtime {
    
    struct MANAGED_API AssemblyTargetedPatchBandAttribute : public virtual System::Attribute{
        System::String* _TargetedPatchBand_k__BackingField;
        
        void constructor(System::String* targetedPatchBand);
        System::String* get_TargetedPatchBand();
        System::String* set_TargetedPatchBand(System::String* value);
        
    };
    
    
    struct MANAGED_API GCSettings : public virtual System::Object{
        
        static bool get_IsServerGC();
        static GCLatencyMode get_LatencyMode();
        static GCLatencyMode set_LatencyMode(GCLatencyMode value);
        
    };
    
    
    struct MANAGED_API MemoryFailPoint : public virtual ConstrainedExecution::CriticalFinalizerObject, public virtual System::IDisposable{
        
        void constructor(int32_t sizeInMegabytes);
        virtual void Finalize_eca42609ee3410cd();
        void Dispose();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API TargetedPatchingOptOutAttribute : public virtual System::Attribute{
        System::String* reason;
        
        void constructor(System::String* reason);
        System::String* get_Reason();
        
    };
    
}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    struct MANAGED_API AccessedThroughPropertyAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* propertyName);
        System::String* get_PropertyName();
        
    };
    
    
    struct MANAGED_API CallConvCdecl : public virtual System::Object{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CallConvFastcall : public virtual System::Object{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CallConvStdcall : public virtual System::Object{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CallConvThiscall : public virtual System::Object{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CompilationRelaxationsAttribute : public virtual System::Attribute{
        int32_t relax;
        
        void constructor(int32_t relaxations);
        void constructor(CompilationRelaxations relaxations);
        int32_t get_CompilationRelaxations();
        
    };
    
    
    struct MANAGED_API CompilerGeneratedAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CompilerGlobalScopeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CompilerMarshalOverride : public virtual System::Object{
        
        
    };
    
    
    template<class TKey, class TValue> struct MANAGED_API ConditionalWeakTable : public virtual System::Object{
        static constexpr int32_t INITIAL_SIZE = 13;
        static constexpr float LOAD_FACTOR = 0.7f;
        cli::array<Ephemeron>* data;
        System::Object* _lock;
        int32_t size;
        static CreateValueCallback<TKey, TValue>* __f__am_cache0;
        
        void constructor();
        void Rehash();
        void Add(TKey key, TValue value);
        bool Remove(TKey key);
        bool TryGetValue(TKey key, TValue value);
        TValue GetOrCreateValue(TKey key);
        TValue GetValue(TKey key, CreateValueCallback<TKey, TValue>* createValueCallback);
        static TValue _GetOrCreateValue_m__10(TKey k);
        
    };
    
    
    struct MANAGED_API DateTimeConstantAttribute : public virtual CustomConstantAttribute{
        int64_t ticks;
        
        void constructor(int64_t ticks);
        int64_t get_Ticks();
        virtual System::Object* get_Value_2eb981927c501f0e() override;
        
    };
    
    
    struct MANAGED_API DecimalConstantAttribute : public virtual System::Attribute{
        unsigned char scale;
        bool sign;
        int32_t hi;
        int32_t mid;
        int32_t low;
        
        void constructor(unsigned char scale, unsigned char sign, uint32_t hi, uint32_t mid, uint32_t low);
        void constructor(unsigned char scale, unsigned char sign, int32_t hi, int32_t mid, int32_t low);
        System::Decimal get_Value();
        
    };
    
    
    struct MANAGED_API DefaultDependencyAttribute : public virtual System::Attribute{
        LoadHint hint;
        
        void constructor(LoadHint loadHintArgument);
        LoadHint get_LoadHint();
        
    };
    
    
    struct MANAGED_API DependencyAttribute : public virtual System::Attribute{
        System::String* dependentAssembly;
        LoadHint hint;
        
        void constructor(System::String* dependentAssemblyArgument, LoadHint loadHintArgument);
        System::String* get_DependentAssembly();
        LoadHint get_LoadHint();
        
    };
    
    
    struct MANAGED_API DiscardableAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API FixedAddressValueTypeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API FixedBufferAttribute : public virtual System::Attribute{
        System::Type* elementType;
        int32_t length;
        
        void constructor(System::Type* elementType, int32_t length);
        System::Type* get_ElementType();
        int32_t get_Length();
        
    };
    
    
    struct MANAGED_API HasCopySemanticsAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API IDispatchConstantAttribute : public virtual CustomConstantAttribute{
        
        void constructor();
        virtual System::Object* get_Value_2eb981927c501f0e() override;
        
    };
    
    
    struct MANAGED_API IndexerNameAttribute : public virtual System::Attribute{
        
        void constructor(System::String* indexerName);
        
    };
    
    
    struct MANAGED_API InternalsVisibleToAttribute : public virtual System::Attribute{
        System::String* assemblyName;
        bool all_visible;
        
        void constructor(System::String* assemblyName);
        System::String* get_AssemblyName();
        bool get_AllInternalsVisible();
        bool set_AllInternalsVisible(bool value);
        
    };
    
    
    struct MANAGED_API IsBoxed : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsByValue : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsConst : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsCopyConstructed : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsExplicitlyDereferenced : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsImplicitlyDereferenced : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsJitIntrinsic : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsLong : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsPinned : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsSignUnspecifiedByte : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsUdtReturn : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IsVolatile : public virtual System::Object{
        
        
    };
    
    
    struct MANAGED_API IUnknownConstantAttribute : public virtual CustomConstantAttribute{
        
        void constructor();
        virtual System::Object* get_Value_2eb981927c501f0e() override;
        
    };
    
    
    struct MANAGED_API MethodImplAttribute : public virtual System::Attribute{
        MethodImplOptions _val;
        MethodCodeType MethodCodeType2;
        
        void constructor();
        void constructor(int16_t value);
        void constructor(MethodImplOptions methodImplOptions);
        MethodImplOptions get_Value();
        
    };
    
    
    struct MANAGED_API NativeCppClassAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ReferenceAssemblyAttribute : public virtual System::Attribute{
        System::String* description;
        
        void constructor();
        void constructor(System::String* description);
        System::String* get_Description();
        
    };
    
    
    struct MANAGED_API RequiredAttributeAttribute : public virtual System::Attribute{
        
        void constructor(System::Type* requiredContract);
        System::Type* get_RequiredContract();
        
    };
    
    
    struct MANAGED_API RuntimeCompatibilityAttribute : public virtual System::Attribute{
        bool wrap_non_exception_throws;
        
        void constructor();
        bool get_WrapNonExceptionThrows();
        bool set_WrapNonExceptionThrows(bool value);
        
    };
    
    
    struct MANAGED_API RuntimeHelpers : public virtual System::Object{
        
        static void InitializeArray(System::Array* array, void* fldHandle);
        static void InitializeArray2(System::Array* array, System::RuntimeFieldHandle fldHandle);
        static int32_t GetHashCode2(System::Object* o);
        static bool Equals3(System::Object* o1, System::Object* o2) /*new*/;
        static System::Object* GetObjectValue(System::Object* obj);
        static void RunClassConstructor(void* type);
        static void RunClassConstructor2(System::RuntimeTypeHandle type);
        static bool SufficientExecutionStack();
        static void EnsureSufficientExecutionStack();
        static void ExecuteCodeWithGuaranteedCleanup(TryCode* code, CleanupCode* backoutCode, System::Object* userData);
        static void PrepareConstrainedRegions();
        static void PrepareConstrainedRegionsNoOP();
        static void ProbeForSufficientStack();
        static void PrepareDelegate(System::Delegate* d);
        static void PrepareMethod(System::RuntimeMethodHandle method);
        static void PrepareMethod2(System::RuntimeMethodHandle method, cli::array<System::RuntimeTypeHandle>* instantiation);
        static void RunModuleConstructor(System::ModuleHandle module);
        static void RunModuleConstructor2(void* module);
        static int32_t get_OffsetToStringData();
        
    };
    
    
    struct MANAGED_API RuntimeWrappedException : public virtual System::Exception{
        System::Object* wrapped_exception;
        
        void constructor();
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        System::Object* get_WrappedException();
        
    };
    
    
    struct MANAGED_API ScopelessEnumAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SpecialNameAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API StringFreezingAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SuppressIldasmAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API TypeForwardedFromAttribute : public virtual System::Attribute{
        System::String* name;
        
        void constructor(System::String* assemblyFullName);
        System::String* get_AssemblyFullName();
        
    };
    
    
    struct MANAGED_API TypeForwardedToAttribute : public virtual System::Attribute{
        System::Type* destination;
        
        void constructor(System::Type* destination);
        System::Type* get_Destination();
        
    };
    
    
    struct MANAGED_API UnsafeValueTypeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    struct MANAGED_API PrePrepareMethodAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ReliabilityContractAttribute : public virtual System::Attribute{
        Consistency consistency;
        Cer cer;
        
        void constructor(Consistency consistencyGuarantee, Cer cer);
        Cer get_Cer();
        Consistency get_ConsistencyGuarantee();
        
    };
    
}}}
namespace System { namespace Runtime { namespace ExceptionServices {
    
    struct MANAGED_API FirstChanceExceptionEventArgs : public virtual System::EventArgs{
        System::Exception* exception;
        
        void constructor(System::Exception* exception);
        System::Exception* get_Exception();
        
    };
    
    
    struct MANAGED_API HandleProcessCorruptedStateExceptionsAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
}}}
namespace System { namespace Runtime { namespace Hosting {
    
    struct MANAGED_API ActivationArguments : public virtual System::Object{
        System::ActivationContext* _context;
        System::ApplicationIdentity* _identity;
        cli::array<System::String*>* _data;
        
        void constructor(System::ActivationContext* activationData);
        void constructor(System::ApplicationIdentity* applicationIdentity);
        void constructor(System::ActivationContext* activationContext, cli::array<System::String*>* activationData);
        void constructor(System::ApplicationIdentity* applicationIdentity, cli::array<System::String*>* activationData);
        System::ActivationContext* get_ActivationContext();
        cli::array<System::String*>* get_ActivationData();
        System::ApplicationIdentity* get_ApplicationIdentity();
        
    };
    
    
    struct MANAGED_API ApplicationActivator : public virtual System::Object{
        
        void constructor();
        virtual System::Runtime::Remoting::ObjectHandle* CreateInstance_d66a04a92dbbae30(System::ActivationContext* activationContext);
        virtual System::Runtime::Remoting::ObjectHandle* CreateInstance_ea4c9b1e73214c4b(System::ActivationContext* activationContext, cli::array<System::String*>* activationCustomData);
        static System::Runtime::Remoting::ObjectHandle* CreateInstanceHelper(System::AppDomainSetup* adSetup);
        
    };
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    struct MANAGED_API AllowReversePInvokeCallsAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API AutomationProxyAttribute : public virtual System::Attribute{
        bool val;
        
        void constructor(bool val);
        bool get_Value();
        
    };
    
    
    struct MANAGED_API BestFitMappingAttribute : public virtual System::Attribute{
        bool bfm;
        bool ThrowOnUnmappableChar;
        
        void constructor(bool BestFitMapping);
        bool get_BestFitMapping();
        
    };
    
    
    struct MANAGED_API BStrWrapper : public virtual System::Object{
        System::String* _value;
        
        void constructor(System::String* value);
        System::String* get_WrappedObject();
        
    };
    
    
    struct MANAGED_API ClassInterfaceAttribute : public virtual System::Attribute{
        ClassInterfaceType ciType;
        
        void constructor(int16_t classInterfaceType);
        void constructor(ClassInterfaceType classInterfaceType);
        ClassInterfaceType get_Value();
        
    };
    
    
    struct MANAGED_API CoClassAttribute : public virtual System::Attribute{
        System::Type* klass;
        
        void constructor(System::Type* coClass);
        System::Type* get_CoClass();
        
    };
    
    
    struct MANAGED_API ComAliasNameAttribute : public virtual System::Attribute{
        System::String* val;
        
        void constructor(System::String* alias);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API ComCompatibleVersionAttribute : public virtual System::Attribute{
        int32_t major;
        int32_t minor;
        int32_t build;
        int32_t revision;
        
        void constructor(int32_t major, int32_t minor, int32_t build, int32_t revision);
        int32_t get_MajorVersion();
        int32_t get_MinorVersion();
        int32_t get_BuildNumber();
        int32_t get_RevisionNumber();
        
    };
    
    
    struct MANAGED_API ComConversionLossAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ComDefaultInterfaceAttribute : public virtual System::Attribute{
        System::Type* _type;
        
        void constructor(System::Type* defaultInterface);
        System::Type* get_Value();
        
    };
    
    
    struct MANAGED_API ComEventInterfaceAttribute : public virtual System::Attribute{
        System::Type* si;
        System::Type* ep;
        
        void constructor(System::Type* SourceInterface, System::Type* EventProvider);
        System::Type* get_EventProvider();
        System::Type* get_SourceInterface();
        
    };
    
    
    struct MANAGED_API COMException : public virtual ExternalException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* message, int32_t errorCode);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API ComImportAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ComRegisterFunctionAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ComSourceInterfacesAttribute : public virtual System::Attribute{
        System::String* internalValue;
        
        void constructor(System::String* sourceInterfaces);
        void constructor(System::Type* sourceInterface);
        void constructor(System::Type* sourceInterface1, System::Type* sourceInterface2);
        void constructor(System::Type* sourceInterface1, System::Type* sourceInterface2, System::Type* sourceInterface3);
        void constructor(System::Type* sourceInterface1, System::Type* sourceInterface2, System::Type* sourceInterface3, System::Type* sourceInterface4);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API ComUnregisterFunctionAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ComVisibleAttribute : public virtual System::Attribute{
        bool Visible;
        
        void constructor(bool visibility);
        bool get_Value();
        
    };
    
    
    struct MANAGED_API CurrencyWrapper : public virtual System::Object{
        System::Decimal currency;
        
        void constructor(System::Decimal obj);
        void constructor(System::Object* obj);
        System::Decimal get_WrappedObject();
        
    };
    
    
    struct MANAGED_API DefaultCharSetAttribute : public virtual System::Attribute{
        CharSet _set;
        
        void constructor(CharSet charSet);
        CharSet get_CharSet();
        
    };
    
    
    struct MANAGED_API DispatchWrapper : public virtual System::Object{
        System::Object* wrappedObject;
        
        void constructor(System::Object* obj);
        System::Object* get_WrappedObject();
        
    };
    
    
    struct MANAGED_API DispIdAttribute : public virtual System::Attribute{
        int32_t id;
        
        void constructor(int32_t dispId);
        int32_t get_Value();
        
    };
    
    
    struct MANAGED_API DllImportAttribute : public virtual System::Attribute{
        CallingConvention CallingConvention2;
        CharSet CharSet2;
        System::String* Dll;
        System::String* EntryPoint;
        bool ExactSpelling;
        bool PreserveSig;
        bool SetLastError;
        bool BestFitMapping;
        bool ThrowOnUnmappableChar;
        
        void constructor(System::String* dllName);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API ErrorWrapper : public virtual System::Object{
        int32_t errorCode;
        
        void constructor(System::Exception* e);
        void constructor(int32_t errorCode);
        void constructor(System::Object* errorCode);
        int32_t get_ErrorCode();
        
    };
    
    
    struct MANAGED_API ExtensibleClassFactory : public virtual System::Object{
        static System::Collections::Hashtable* hashtable;
        
        ExtensibleClassFactory();
        static void static_constructor();
        void constructor();
        static ObjectCreationDelegate* GetObjectCreationCallback(System::Type* t);
        static void RegisterObjectCreationCallback(ObjectCreationDelegate* callback);
        
    };
    
    
    struct MANAGED_API FieldOffsetAttribute : public virtual System::Attribute{
        int32_t val;
        
        void constructor(int32_t offset);
        int32_t get_Value();
        
    };
    
    
    struct MANAGED_API GuidAttribute : public virtual System::Attribute{
        System::String* guidValue;
        
        void constructor(System::String* guid);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API IDispatchImplAttribute : public virtual System::Attribute{
        IDispatchImplType Impl;
        
        void constructor(IDispatchImplType implType);
        void constructor(int16_t implType);
        IDispatchImplType get_Value();
        
    };
    
    
    struct MANAGED_API ImportedFromTypeLibAttribute : public virtual System::Attribute{
        System::String* TlbFile;
        
        void constructor(System::String* tlbFile);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API InAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API InterfaceTypeAttribute : public virtual System::Attribute{
        ComInterfaceType intType;
        
        void constructor(ComInterfaceType interfaceType);
        void constructor(int16_t interfaceType);
        ComInterfaceType get_Value();
        
    };
    
    
    struct MANAGED_API InvalidComObjectException : public virtual System::SystemException{
        static constexpr int32_t ErrorCode = -2146233049;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API InvalidOleVariantTypeException : public virtual System::SystemException{
        static constexpr int32_t ErrorCode = -2146233039;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API LCIDConversionAttribute : public virtual System::Attribute{
        int32_t id;
        
        void constructor(int32_t lcid);
        int32_t get_Value();
        
    };
    
    
    struct MANAGED_API Marshal : public virtual System::Object{
        static int32_t SystemMaxDBCSCharSize;
        static int32_t SystemDefaultCharSize;
        
        Marshal();
        static void static_constructor();
        static int32_t AddRefInternal(void* pUnk);
        static int32_t AddRef(void* pUnk);
        static void* AllocCoTaskMem(int32_t cb);
        static void* AllocHGlobal(void* cb);
        static void* AllocHGlobal2(int32_t cb);
        static System::Object* BindToMoniker(System::String* monikerName);
        static void ChangeWrapperHandleStrength(System::Object* otp, bool fIsWeak);
        static void copy_to_unmanaged(System::Array* source, int32_t startIndex, void* destination, int32_t length);
        static void copy_from_unmanaged(void* source, int32_t startIndex, System::Array* destination, int32_t length);
        static void Copy(cli::array<unsigned char>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy2(cli::array<char16_t>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy3(cli::array<int16_t>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy4(cli::array<int32_t>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy5(cli::array<int64_t>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy6(cli::array<float>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy7(cli::array<double>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy8(cli::array<void*>* source, int32_t startIndex, void* destination, int32_t length);
        static void Copy9(void* source, cli::array<unsigned char>* destination, int32_t startIndex, int32_t length);
        static void Copy10(void* source, cli::array<char16_t>* destination, int32_t startIndex, int32_t length);
        static void Copy11(void* source, cli::array<int16_t>* destination, int32_t startIndex, int32_t length);
        static void Copy12(void* source, cli::array<int32_t>* destination, int32_t startIndex, int32_t length);
        static void Copy13(void* source, cli::array<int64_t>* destination, int32_t startIndex, int32_t length);
        static void Copy14(void* source, cli::array<float>* destination, int32_t startIndex, int32_t length);
        static void Copy15(void* source, cli::array<double>* destination, int32_t startIndex, int32_t length);
        static void Copy16(void* source, cli::array<void*>* destination, int32_t startIndex, int32_t length);
        static void* CreateAggregatedObject(void* pOuter, System::Object* o);
        static System::Object* CreateWrapperOfType(System::Object* o, System::Type* t);
        static void DestroyStructure(void* ptr, System::Type* structuretype);
        static void FreeBSTR(void* ptr);
        static void FreeCoTaskMem(void* ptr);
        static void FreeHGlobal(void* hglobal);
        static void ClearBSTR(void* ptr);
        static void ZeroFreeBSTR(void* s);
        static void ClearAnsi(void* ptr);
        static void ClearUnicode(void* ptr);
        static void ZeroFreeCoTaskMemAnsi(void* s);
        static void ZeroFreeCoTaskMemUnicode(void* s);
        static void ZeroFreeGlobalAllocAnsi(void* s);
        static void ZeroFreeGlobalAllocUnicode(void* s);
        static System::Guid GenerateGuidForType(System::Type* type);
        static System::String* GenerateProgIdForType(System::Type* type);
        static System::Object* GetActiveObject(System::String* progID);
        static void* GetCCW(System::Object* o, System::Type* T);
        static void* GetComInterfaceForObjectInternal(System::Object* o, System::Type* T);
        static void* GetComInterfaceForObject(System::Object* o, System::Type* T);
        static void* GetComInterfaceForObjectInContext(System::Object* o, System::Type* t);
        static System::Object* GetComObjectData(System::Object* obj, System::Object* key);
        static int32_t GetComSlotForMethodInfoInternal(System::Reflection::MemberInfo* m);
        static int32_t GetComSlotForMethodInfo(System::Reflection::MemberInfo* m);
        static int32_t GetEndComSlot(System::Type* t);
        static int32_t GetExceptionCode();
        static void* GetExceptionPointers();
        static void* GetHINSTANCE(System::Reflection::Module* m);
        static int32_t GetHRForException(System::Exception* e);
        static int32_t GetHRForLastWin32Error();
        static void* GetIDispatchForObjectInternal(System::Object* o);
        static void* GetIDispatchForObject(System::Object* o);
        static void* GetIDispatchForObjectInContext(System::Object* o);
        static void* GetITypeInfoForType(System::Type* t);
        static void* GetIUnknownForObjectInternal(System::Object* o);
        static void* GetIUnknownForObject(System::Object* o);
        static void* GetIUnknownForObjectInContext(System::Object* o);
        static void* GetManagedThunkForUnmanagedMethodPtr(void* pfnMethodToWrap, void* pbSignature, int32_t cbSignature);
        static System::Reflection::MemberInfo* GetMethodInfoForComSlot(System::Type* t, int32_t slot, ComMemberType memberType);
        static void GetNativeVariantForObject(System::Object* obj, void* pDstNativeVariant);
        static System::Object* GetObjectForCCW(void* pUnk);
        static System::Object* GetObjectForIUnknown(void* pUnk);
        static System::Object* GetObjectForNativeVariant(void* pSrcNativeVariant);
        static cli::array<System::Object*>* GetObjectsForNativeVariants(void* aSrcNativeVariant, int32_t cVars);
        static int32_t GetStartComSlot(System::Type* t);
        static System::Threading::Thread* GetThreadFromFiberCookie(int32_t cookie);
        static System::Object* GetTypedObjectForIUnknown(void* pUnk, System::Type* t);
        static System::Type* GetTypeForITypeInfo(void* piTypeInfo);
        static System::String* GetTypeInfoName(UCOMITypeInfo* pTI);
        static System::String* GetTypeInfoName2(ComTypes::ITypeInfo* typeInfo);
        static System::Guid GetTypeLibGuid(UCOMITypeLib* pTLB);
        static System::Guid GetTypeLibGuid2(ComTypes::ITypeLib* typelib);
        static System::Guid GetTypeLibGuidForAssembly(System::Reflection::Assembly* asm_);
        static int32_t GetTypeLibLcid(UCOMITypeLib* pTLB);
        static int32_t GetTypeLibLcid2(ComTypes::ITypeLib* typelib);
        static System::String* GetTypeLibName(UCOMITypeLib* pTLB);
        static System::String* GetTypeLibName2(ComTypes::ITypeLib* typelib);
        static void GetTypeLibVersionForAssembly(System::Reflection::Assembly* inputAssembly, int32_t majorVersion, int32_t minorVersion);
        static System::Object* GetUniqueObjectForIUnknown(void* unknown);
        static void* GetUnmanagedThunkForManagedMethodPtr(void* pfnMethodToWrap, void* pbSignature, int32_t cbSignature);
        static bool IsComObject(System::Object* o);
        static bool IsTypeVisibleFromCom(System::Type* t);
        static int32_t NumParamBytes(System::Reflection::MethodInfo* m);
        static int32_t GetLastWin32Error();
        static void* OffsetOf(System::Type* t, System::String* fieldName);
        static void Prelink(System::Reflection::MethodInfo* m);
        static void PrelinkAll(System::Type* c);
        static System::String* PtrToStringAnsi(void* ptr);
        static System::String* PtrToStringAnsi2(void* ptr, int32_t len);
        static System::String* PtrToStringAuto(void* ptr);
        static System::String* PtrToStringAuto2(void* ptr, int32_t len);
        static System::String* PtrToStringUni(void* ptr);
        static System::String* PtrToStringUni2(void* ptr, int32_t len);
        static System::String* PtrToStringBSTR(void* ptr);
        static void PtrToStructure(void* ptr, System::Object* structure);
        static System::Object* PtrToStructure2(void* ptr, System::Type* structureType);
        static int32_t QueryInterfaceInternal(void* pUnk, System::Guid iid, void* ppv);
        static int32_t QueryInterface(void* pUnk, System::Guid iid, void* ppv);
        static unsigned char ReadByte(void* ptr);
        static unsigned char ReadByte2(void* ptr, int32_t ofs);
        static unsigned char ReadByte3(System::Object* ptr, int32_t ofs);
        static int16_t ReadInt16(void* ptr);
        static int16_t ReadInt162(void* ptr, int32_t ofs);
        static int16_t ReadInt163(System::Object* ptr, int32_t ofs);
        static int32_t ReadInt32(void* ptr);
        static int32_t ReadInt322(void* ptr, int32_t ofs);
        static int32_t ReadInt323(System::Object* ptr, int32_t ofs);
        static int64_t ReadInt64(void* ptr);
        static int64_t ReadInt642(void* ptr, int32_t ofs);
        static int64_t ReadInt643(System::Object* ptr, int32_t ofs);
        static void* ReadIntPtr(void* ptr);
        static void* ReadIntPtr2(void* ptr, int32_t ofs);
        static void* ReadIntPtr3(System::Object* ptr, int32_t ofs);
        static void* ReAllocCoTaskMem(void* pv, int32_t cb);
        static void* ReAllocHGlobal(void* pv, void* cb);
        static int32_t ReleaseInternal(void* pUnk);
        static int32_t Release(void* pUnk);
        static int32_t ReleaseComObjectInternal(System::Object* co);
        static int32_t ReleaseComObject(System::Object* o);
        static void ReleaseThreadCache();
        static bool SetComObjectData(System::Object* obj, System::Object* key, System::Object* data);
        static int32_t SizeOf(System::Object* structure);
        static int32_t SizeOf2(System::Type* t);
        static void* StringToBSTR(System::String* s);
        static void* StringToCoTaskMemAnsi(System::String* s);
        static void* StringToCoTaskMemAuto(System::String* s);
        static void* StringToCoTaskMemUni(System::String* s);
        static void* StringToHGlobalAnsi(System::String* s);
        static void* StringToHGlobalAuto(System::String* s);
        static void* StringToHGlobalUni(System::String* s);
        static void* SecureStringToBSTR(System::Security::SecureString* s);
        static void* SecureStringToCoTaskMemAnsi(System::Security::SecureString* s);
        static void* SecureStringToCoTaskMemUnicode(System::Security::SecureString* s);
        static void* SecureStringToGlobalAllocAnsi(System::Security::SecureString* s);
        static void* SecureStringToGlobalAllocUnicode(System::Security::SecureString* s);
        static void StructureToPtr(System::Object* structure, void* ptr, bool fDeleteOld);
        static void ThrowExceptionForHR(int32_t errorCode);
        static void ThrowExceptionForHR2(int32_t errorCode, void* errorInfo);
        static void* UnsafeAddrOfPinnedArrayElement(System::Array* arr, int32_t index);
        static void WriteByte(void* ptr, unsigned char val);
        static void WriteByte2(void* ptr, int32_t ofs, unsigned char val);
        static void WriteByte3(System::Object* ptr, int32_t ofs, unsigned char val);
        static void WriteInt16(void* ptr, int16_t val);
        static void WriteInt162(void* ptr, int32_t ofs, int16_t val);
        static void WriteInt163(System::Object* ptr, int32_t ofs, int16_t val);
        static void WriteInt164(void* ptr, char16_t val);
        static void WriteInt165(void* ptr, int32_t ofs, char16_t val);
        static void WriteInt166(System::Object* ptr, int32_t ofs, char16_t val);
        static void WriteInt32(void* ptr, int32_t val);
        static void WriteInt322(void* ptr, int32_t ofs, int32_t val);
        static void WriteInt323(System::Object* ptr, int32_t ofs, int32_t val);
        static void WriteInt64(void* ptr, int64_t val);
        static void WriteInt642(void* ptr, int32_t ofs, int64_t val);
        static void WriteInt643(System::Object* ptr, int32_t ofs, int64_t val);
        static void WriteIntPtr(void* ptr, void* val);
        static void WriteIntPtr2(void* ptr, int32_t ofs, void* val);
        static void WriteIntPtr3(System::Object* ptr, int32_t ofs, void* val);
        static System::Exception* GetExceptionForHR(int32_t errorCode);
        static System::Exception* GetExceptionForHR2(int32_t errorCode, void* errorInfo);
        static int32_t FinalReleaseComObject(System::Object* o);
        static System::Delegate* GetDelegateForFunctionPointerInternal(void* ptr, System::Type* t);
        static System::Delegate* GetDelegateForFunctionPointer(void* ptr, System::Type* t);
        static void* GetFunctionPointerForDelegateInternal(System::Delegate* d);
        static void* GetFunctionPointerForDelegate(System::Delegate* d);
        
    };
    
    
    struct MANAGED_API MarshalAsAttribute : public virtual System::Attribute{
        UnmanagedType utype;
        UnmanagedType ArraySubType;
        System::String* MarshalCookie;
        System::String* MarshalType;
        System::Type* MarshalTypeRef;
        VarEnum SafeArraySubType;
        int32_t SizeConst;
        int16_t SizeParamIndex;
        System::Type* SafeArrayUserDefinedSubType;
        int32_t IidParameterIndex;
        
        void constructor(int16_t unmanagedType);
        void constructor(UnmanagedType unmanagedType);
        UnmanagedType get_Value();
        
    };
    
    
    struct MANAGED_API MarshalDirectiveException : public virtual System::SystemException{
        static constexpr int32_t ErrorCode = -2146233035;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API OptionalAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OutAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API PreserveSigAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API PrimaryInteropAssemblyAttribute : public virtual System::Attribute{
        int32_t major;
        int32_t minor;
        
        void constructor(int32_t major, int32_t minor);
        int32_t get_MajorVersion();
        int32_t get_MinorVersion();
        
    };
    
    
    struct MANAGED_API ProgIdAttribute : public virtual System::Attribute{
        System::String* pid;
        
        void constructor(System::String* progId);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API RegistrationServices : public virtual System::Object, public virtual IRegistrationServices{
        
        void constructor();
        virtual System::Guid GetManagedCategoryGuid_38cd596c2f9eb851();
        virtual System::String* GetProgIdForType_22a055997192433f(System::Type* type);
        virtual cli::array<System::Type*>* GetRegistrableTypesInAssembly_f4832afc86edb77b(System::Reflection::Assembly* assembly);
        virtual bool RegisterAssembly_4649f445e61234bc(System::Reflection::Assembly* assembly, AssemblyRegistrationFlags flags);
        virtual void RegisterTypeForComClients_aa8d2fcc118d895b(System::Type* type, System::Guid g);
        virtual bool TypeRepresentsComType_d8c47394bee95d97(System::Type* type);
        virtual bool TypeRequiresRegistration_1fc479ac880dcd46(System::Type* type);
        virtual bool UnregisterAssembly_5b40456f5b95206b(System::Reflection::Assembly* assembly);
        virtual int32_t RegisterTypeForComClients_d667f0f86863aff1(System::Type* type, RegistrationClassContext classContext, RegistrationConnectionType flags);
        virtual void UnregisterTypeForComClients_226371171b836bed(int32_t cookie);
        
        virtual System::Guid GetManagedCategoryGuid_8927f525ca26383a() override;
        virtual System::String* GetProgIdForType_13a54d045ed226a9(System::Type* type) override;
        virtual cli::array<System::Type*>* GetRegistrableTypesInAssembly_9e06182253e9c8f4(System::Reflection::Assembly* assembly) override;
        virtual bool RegisterAssembly_e4a461988cb7fb93(System::Reflection::Assembly* assembly, AssemblyRegistrationFlags flags) override;
        virtual void RegisterTypeForComClients_3563ef6caa412442(System::Type* type, System::Guid g) override;
        virtual bool TypeRepresentsComType_def149588555fd9c(System::Type* type) override;
        virtual bool TypeRequiresRegistration_f80e9ffb5f2fed68(System::Type* type) override;
        virtual bool UnregisterAssembly_1073a3de66ae5fb6(System::Reflection::Assembly* assembly) override;
    };
    
    
    struct MANAGED_API RuntimeEnvironment : public virtual System::Object{
        
        void constructor();
        static bool FromGlobalAccessCache(System::Reflection::Assembly* a);
        static System::String* GetRuntimeDirectory();
        static System::String* GetSystemVersion();
        static System::String* get_SystemConfigurationFile();
        
    };
    
    
    struct MANAGED_API SafeArrayRankMismatchException : public virtual System::SystemException{
        static constexpr int32_t ErrorCode = -2146233032;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API SafeArrayTypeMismatchException : public virtual System::SystemException{
        static constexpr int32_t ErrorCode = -2146233037;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API SafeBuffer : public virtual Microsoft::Win32::SafeHandles::SafeHandleZeroOrMinusOneIsInvalid{
        uint64_t byte_length;
        unsigned char* last_byte;
        bool inited;
        
        void constructor(bool ownsHandle);
        void Initialize(uint64_t numBytes);
        void Initialize2(uint32_t numElements, uint32_t sizeOfEachElement);
        template<class T>
        void Initialize_1(uint32_t numElements);
        void AcquirePointer(unsigned char* pointer);
        void ReleasePointer();
        template<class T>
        T Read_1(uint64_t byteOffset);
        template<class T>
        void ReadArray_1(uint64_t byteOffset, cli::array<T>* array, int32_t index, int32_t count);
        template<class T>
        void Write_1(uint64_t byteOffset, T value);
        template<class T>
        void WriteArray_1(uint64_t byteOffset, cli::array<T>* array, int32_t index, int32_t count);
        uint64_t get_ByteLength();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SEHException : public virtual ExternalException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual bool CanResume_59eba1a7d056940e();
        
    };
    
    
    struct MANAGED_API SetWin32ContextInIDispatchAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API StructLayoutAttribute : public virtual System::Attribute{
        CharSet CharSet2;
        int32_t Pack;
        int32_t Size;
        LayoutKind lkind;
        
        void constructor(int16_t layoutKind);
        void constructor(LayoutKind layoutKind);
        LayoutKind get_Value();
        
    };
    
    
    struct MANAGED_API TypeIdentifierAttribute : public virtual System::Attribute{
        System::String* scope;
        System::String* identifier;
        
        void constructor();
        void constructor(System::String* scope, System::String* identifier);
        System::String* get_Scope();
        System::String* get_Identifier();
        
    };
    
    
    struct MANAGED_API TypeLibConverter : public virtual System::Object, public virtual ITypeLibConverter{
        
        void constructor();
        System::Object* ConvertAssemblyToTypeLib(System::Reflection::Assembly* assembly, System::String* strTypeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink* notifySink);
        System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly(System::Object* typeLib, System::String* asmFileName, int32_t flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, bool unsafeInterfaces);
        System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly2(System::Object* typeLib, System::String* asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, System::String* asmNamespace, System::Version* asmVersion);
        bool GetPrimaryInteropAssembly(System::Guid g, int32_t major, int32_t minor, int32_t lcid, System::String* asmName, System::String* asmCodeBase);
        
        virtual System::Object* ConvertAssemblyToTypeLib_390df3378aae48c(System::Reflection::Assembly* assembly, System::String* strTypeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink* notifySink) override;
        virtual System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly_5e8aed5d722abc3e(System::Object* typeLib, System::String* asmFileName, int32_t flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, bool unsafeInterfaces) override;
        virtual System::Reflection::Emit::AssemblyBuilder* ConvertTypeLibToAssembly_30894f5fe1326176(System::Object* typeLib, System::String* asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, System::String* asmNamespace, System::Version* asmVersion) override;
        virtual bool GetPrimaryInteropAssembly_2c8039286792eafc(System::Guid g, int32_t major, int32_t minor, int32_t lcid, System::String* asmName, System::String* asmCodeBase) override;
    };
    
    
    struct MANAGED_API TypeLibFuncAttribute : public virtual System::Attribute{
        TypeLibFuncFlags flags;
        
        void constructor(int16_t flags);
        void constructor(TypeLibFuncFlags flags);
        TypeLibFuncFlags get_Value();
        
    };
    
    
    struct MANAGED_API TypeLibImportClassAttribute : public virtual System::Attribute{
        System::String* _importClass;
        
        void constructor(System::Type* importClass);
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API TypeLibTypeAttribute : public virtual System::Attribute{
        TypeLibTypeFlags flags;
        
        void constructor(int16_t flags);
        void constructor(TypeLibTypeFlags flags);
        TypeLibTypeFlags get_Value();
        
    };
    
    
    struct MANAGED_API TypeLibVarAttribute : public virtual System::Attribute{
        TypeLibVarFlags flags;
        
        void constructor(int16_t flags);
        void constructor(TypeLibVarFlags flags);
        TypeLibVarFlags get_Value();
        
    };
    
    
    struct MANAGED_API TypeLibVersionAttribute : public virtual System::Attribute{
        int32_t major;
        int32_t minor;
        
        void constructor(int32_t major, int32_t minor);
        int32_t get_MajorVersion();
        int32_t get_MinorVersion();
        
    };
    
    
    struct MANAGED_API UnknownWrapper : public virtual System::Object{
        System::Object* InternalObject;
        
        void constructor(System::Object* obj);
        System::Object* get_WrappedObject();
        
    };
    
    
    struct MANAGED_API UnmanagedFunctionPointerAttribute : public virtual System::Attribute{
        CallingConvention call_conv;
        CharSet CharSet2;
        bool SetLastError;
        bool BestFitMapping;
        bool ThrowOnUnmappableChar;
        
        void constructor(CallingConvention callingConvention);
        CallingConvention get_CallingConvention();
        
    };
    
    
    struct MANAGED_API VariantWrapper : public virtual System::Object{
        System::Object* _wrappedObject;
        
        void constructor(System::Object* obj);
        System::Object* get_WrappedObject();
        
    };
    
}}}
namespace System { namespace Runtime { namespace Reliability {
    
    struct MANAGED_API PrePrepareMethodAttribute2 : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ReliabilityContractAttribute2 : public virtual System::Attribute{
        Consistency2 consistency;
        CER cer;
        
        void constructor();
        void constructor(Consistency2 consistency, CER cer);
        CER get_CER();
        CER set_CER(CER value);
        Consistency2 get_ConsistencyGuarantee();
        Consistency2 set_ConsistencyGuarantee(Consistency2 value);
        
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    struct MANAGED_API ActivatedClientTypeEntry : public virtual TypeEntry{
        System::String* applicationUrl;
        System::Type* obj_type;
        
        void constructor(System::Type* type, System::String* appUrl);
        void constructor(System::String* typeName, System::String* assemblyName, System::String* appUrl);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_ApplicationUrl();
        cli::array<Contexts::IContextAttribute*>* get_ContextAttributes();
        cli::array<Contexts::IContextAttribute*>* set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value);
        System::Type* get_ObjectType();
        
    };
    
    
    struct MANAGED_API ActivatedServiceTypeEntry : public virtual TypeEntry{
        System::Type* obj_type;
        
        void constructor(System::Type* type);
        void constructor(System::String* typeName, System::String* assemblyName);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<Contexts::IContextAttribute*>* get_ContextAttributes();
        cli::array<Contexts::IContextAttribute*>* set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value);
        System::Type* get_ObjectType();
        
    };
    
    
    struct MANAGED_API EnvoyInfo : public virtual System::Object, public virtual IEnvoyInfo{
        Messaging::IMessageSink* envoySinks;
        
        void constructor(Messaging::IMessageSink* sinks);
        Messaging::IMessageSink* get_EnvoySinks();
        Messaging::IMessageSink* set_EnvoySinks(Messaging::IMessageSink* value);
        
        virtual Messaging::IMessageSink* get_EnvoySinks_1c0ed1452ceaf245() override;
        virtual Messaging::IMessageSink* set_EnvoySinks_8e6de85a9061c891(Messaging::IMessageSink* value) override;
    };
    
    
    struct MANAGED_API ClientIdentity : public virtual Identity{
        System::WeakReference* _proxyReference;
        
        void constructor(System::String* objectUri, ObjRef* objRef);
        virtual ObjRef* CreateObjRef_366556653a47f288(System::Type* requestedType) override;
        System::MarshalByRefObject* get_ClientProxy();
        System::MarshalByRefObject* set_ClientProxy(System::MarshalByRefObject* value);
        System::String* get_TargetUri();
        
    };
    
    
    struct MANAGED_API InternalRemotingServices : public virtual System::Object{
        static System::Collections::Hashtable* _soapAttributes;
        
        InternalRemotingServices();
        void constructor();
        static void static_constructor();
        static void DebugOutChnl(System::String* s);
        static Metadata::SoapAttribute* GetCachedSoapAttribute(System::Object* reflectionObject);
        static void RemotingAssert(bool condition, System::String* message);
        static void RemotingTrace(cli::array<System::Object*>* messages);
        static void SetServerIdentity(Messaging::MethodCall* m, System::Object* srvID);
        
    };
    
    
    struct MANAGED_API ObjectHandle : public virtual System::MarshalByRefObject, public virtual IObjectHandle{
        System::Object* _wrapped;
        
        void constructor(System::Object* o);
        virtual System::Object* InitializeLifetimeService_8f02e9c96ffbe30f() override;
        System::Object* Unwrap();
        
        virtual System::Object* Unwrap_c10aed64a454bc6f() override;
    };
    
    
    struct MANAGED_API ObjRef : public virtual System::Object, public virtual System::Runtime::Serialization::IObjectReference, public virtual System::Runtime::Serialization::ISerializable{
        IChannelInfo* channel_info;
        System::String* uri;
        IRemotingTypeInfo* typeInfo;
        IEnvoyInfo* envoyInfo;
        int32_t flags;
        System::Type* _serverType;
        static int32_t MarshalledObjectRef;
        static int32_t WellKnowObjectRef;
        
        ObjRef();
        void constructor();
        void constructor(System::String* typeName, System::String* uri, IChannelInfo* cinfo);
        void constructor(ObjRef* o, bool unmarshalAsProxy);
        void constructor(System::MarshalByRefObject* o, System::Type* requestedType);
        void constructor(System::Type* type, System::String* url, System::Object* remoteChannelData);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        bool IsPossibleToCAD();
        virtual void GetObjectData_ee660fdbddbfb758(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Object* GetRealObject_95f064ae72c47655(System::Runtime::Serialization::StreamingContext context);
        bool IsFromThisAppDomain();
        bool IsFromThisProcess();
        void UpdateChannelInfo();
        bool get_IsReferenceToWellKnow();
        virtual IChannelInfo* get_ChannelInfo_9ec11d234d0cc35e();
        virtual IChannelInfo* set_ChannelInfo_b0d7316238ca0615(IChannelInfo* value);
        virtual IEnvoyInfo* get_EnvoyInfo_a6cfdc6b1409eef0();
        virtual IEnvoyInfo* set_EnvoyInfo_4f39d454ae79e3bf(IEnvoyInfo* value);
        virtual IRemotingTypeInfo* get_TypeInfo_b4ea890a0c9f26cd();
        virtual IRemotingTypeInfo* set_TypeInfo_9fa39a26a11d5ac0(IRemotingTypeInfo* value);
        virtual System::String* get_URI_8a7d9b91992639ed();
        virtual System::String* set_URI_6a4837f1e4931068(System::String* value);
        System::Type* get_ServerType();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API RemotingConfiguration : public virtual System::Object{
        static System::String* applicationID;
        static System::String* applicationName;
        static System::String* processGuid;
        static bool defaultConfigRead;
        static bool defaultDelayedConfigRead;
        static System::String* _errorMode;
        static System::Collections::Hashtable* wellKnownClientEntries;
        static System::Collections::Hashtable* activatedClientEntries;
        static System::Collections::Hashtable* wellKnownServiceEntries;
        static System::Collections::Hashtable* activatedServiceEntries;
        static System::Collections::Hashtable* channelTemplates;
        static System::Collections::Hashtable* clientProviderTemplates;
        static System::Collections::Hashtable* serverProviderTemplates;
        
        RemotingConfiguration();
        static void static_constructor();
        static void Configure(System::String* filename, bool ensureSecurity);
        static void Configure2(System::String* filename);
        static void ReadConfigFile(System::String* filename);
        static void LoadDefaultDelayedChannels();
        static cli::array<ActivatedClientTypeEntry*>* GetRegisteredActivatedClientTypes();
        static cli::array<ActivatedServiceTypeEntry*>* GetRegisteredActivatedServiceTypes();
        static cli::array<WellKnownClientTypeEntry*>* GetRegisteredWellKnownClientTypes();
        static cli::array<WellKnownServiceTypeEntry*>* GetRegisteredWellKnownServiceTypes();
        static bool IsActivationAllowed(System::Type* svrType);
        static ActivatedClientTypeEntry* IsRemotelyActivatedClientType(System::Type* svrType);
        static ActivatedClientTypeEntry* IsRemotelyActivatedClientType2(System::String* typeName, System::String* assemblyName);
        static WellKnownClientTypeEntry* IsWellKnownClientType(System::Type* svrType);
        static WellKnownClientTypeEntry* IsWellKnownClientType2(System::String* typeName, System::String* assemblyName);
        static void RegisterActivatedClientType(ActivatedClientTypeEntry* entry);
        static void RegisterActivatedClientType2(System::Type* type, System::String* appUrl);
        static void RegisterActivatedServiceType(ActivatedServiceTypeEntry* entry);
        static void RegisterActivatedServiceType2(System::Type* type);
        static void RegisterWellKnownClientType(System::Type* type, System::String* objectUrl);
        static void RegisterWellKnownClientType2(WellKnownClientTypeEntry* entry);
        static void RegisterWellKnownServiceType(System::Type* type, System::String* objectUri, WellKnownObjectMode mode);
        static void RegisterWellKnownServiceType2(WellKnownServiceTypeEntry* entry);
        static void RegisterChannelTemplate(ChannelData* channel);
        static void RegisterClientProviderTemplate(ProviderData* prov);
        static void RegisterServerProviderTemplate(ProviderData* prov);
        static void RegisterChannels(System::Collections::ArrayList* channels, bool onlyDelayed);
        static void RegisterTypes(System::Collections::ArrayList* types);
        static bool CustomErrorsEnabled(bool isLocalRequest);
        static void SetCustomErrorsMode(System::String* mode);
        static System::String* get_ApplicationId();
        static System::String* get_ApplicationName();
        static System::String* set_ApplicationName(System::String* value);
        static CustomErrorsModes get_CustomErrorsMode();
        static CustomErrorsModes set_CustomErrorsMode(CustomErrorsModes value);
        static System::String* get_ProcessId();
        
    };
    
    
    struct MANAGED_API ConfigHandler : public virtual System::Object, public virtual Mono::Xml::IContentHandler{
        System::Collections::ArrayList* typeEntries;
        System::Collections::ArrayList* channelInstances;
        ChannelData* currentChannel;
        System::Collections::Stack* currentProviderData;
        System::String* currentClientUrl;
        System::String* appName;
        System::String* currentXmlPath;
        bool onlyDelayedChannels;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map8;
        
        void constructor(bool onlyDelayedChannels);
        void ValidatePath(System::String* element, cli::array<System::String*>* paths);
        bool CheckPath(System::String* path);
        void OnStartParsing(Mono::Xml::SmallXmlParser* parser);
        void OnProcessingInstruction(System::String* name, System::String* text);
        void OnIgnorableWhitespace(System::String* s);
        void OnStartElement(System::String* name, Mono::Xml::IAttrList* attrs);
        void ParseElement(System::String* name, Mono::Xml::IAttrList* attrs);
        void OnEndElement(System::String* name);
        void ReadCustomProviderData(System::String* name, Mono::Xml::IAttrList* attrs);
        void ReadLifetine(Mono::Xml::IAttrList* attrs);
        System::TimeSpan ParseTime(System::String* s);
        void ReadChannel(Mono::Xml::IAttrList* attrs, bool isTemplate);
        ProviderData* ReadProvider(System::String* name, Mono::Xml::IAttrList* attrs, bool isTemplate);
        void ReadClientActivated(Mono::Xml::IAttrList* attrs);
        void ReadServiceActivated(Mono::Xml::IAttrList* attrs);
        void ReadClientWellKnown(Mono::Xml::IAttrList* attrs);
        void ReadServiceWellKnown(Mono::Xml::IAttrList* attrs);
        void ReadInteropXml(Mono::Xml::IAttrList* attrs, bool isElement);
        void ReadPreload(Mono::Xml::IAttrList* attrs);
        System::String* GetNotNull(Mono::Xml::IAttrList* attrs, System::String* name);
        System::String* ExtractAssembly(System::String* type);
        void OnChars(System::String* ch);
        void OnEndParsing(Mono::Xml::SmallXmlParser* parser);
        
        virtual void OnStartParsing_60c119bf90baa608(Mono::Xml::SmallXmlParser* parser) override;
        virtual void OnProcessingInstruction_eeedb82cbfe7ab40(System::String* name, System::String* text) override;
        virtual void OnIgnorableWhitespace_39f85fe38215782c(System::String* s) override;
        virtual void OnStartElement_431a5ecd1484562f(System::String* name, Mono::Xml::IAttrList* attrs) override;
        virtual void OnEndElement_47dd703957202fcd(System::String* name) override;
        virtual void OnChars_23545ef97e4c205b(System::String* ch) override;
        virtual void OnEndParsing_ddf0252ce1c74235(Mono::Xml::SmallXmlParser* parser) override;
    };
    
    
    struct MANAGED_API ChannelData : public virtual System::Object{
        System::String* Ref;
        System::String* Type2;
        System::String* Id;
        System::String* DelayLoadAsClientChannel;
        System::Collections::ArrayList* _serverProviders;
        System::Collections::ArrayList* _clientProviders;
        System::Collections::Hashtable* _customProperties;
        
        void constructor();
        void CopyFrom(ChannelData* other);
        System::Collections::ArrayList* get_ServerProviders();
        System::Collections::ArrayList* get_ClientProviders();
        System::Collections::Hashtable* get_CustomProperties();
        
    };
    
    
    struct MANAGED_API FormatterData : public virtual ProviderData{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API CACD : public virtual System::Object{
        System::Object* d;
        System::Object* c;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API RemotingServices : public virtual System::Object{
        static constexpr System::Reflection::BindingFlags methodBindings = (System::Reflection::BindingFlags)52L;
        static System::Collections::Hashtable* uri_hash;
        static System::Runtime::Serialization::Formatters::Binary::BinaryFormatter* _serializationFormatter;
        static System::Runtime::Serialization::Formatters::Binary::BinaryFormatter* _deserializationFormatter;
        static System::String* app_id;
        static System::Object* app_id_lock;
        static int32_t next_id;
        static System::Reflection::MethodInfo* FieldSetterMethod;
        static System::Reflection::MethodInfo* FieldGetterMethod;
        
        RemotingServices();
        static void static_constructor();
        static System::Object* InternalExecute(System::Reflection::MethodBase* method, System::Object* obj, cli::array<System::Object*>* parameters, cli::array<System::Object*>* out_args);
        static System::Reflection::MethodBase* GetVirtualMethod(System::Type* type, System::Reflection::MethodBase* method);
        static bool IsTransparentProxy(System::Object* proxy);
        static Messaging::IMethodReturnMessage* InternalExecuteMessage(System::MarshalByRefObject* target, Messaging::IMethodCallMessage* reqMsg);
        static Messaging::IMethodReturnMessage* ExecuteMessage(System::MarshalByRefObject* target, Messaging::IMethodCallMessage* reqMsg);
        static System::Object* Connect(System::Type* classToProxy, System::String* url);
        static System::Object* Connect2(System::Type* classToProxy, System::String* url, System::Object* data);
        static bool Disconnect(System::MarshalByRefObject* obj);
        static System::Type* GetServerTypeForUri(System::String* URI);
        static System::String* GetObjectUri(System::MarshalByRefObject* obj);
        static System::Object* Unmarshal(ObjRef* objectRef);
        static System::Object* Unmarshal2(ObjRef* objectRef, bool fRefine);
        static ObjRef* Marshal2(System::MarshalByRefObject* Obj);
        static ObjRef* Marshal3(System::MarshalByRefObject* Obj, System::String* URI);
        static ObjRef* Marshal4(System::MarshalByRefObject* Obj, System::String* ObjURI, System::Type* RequestedType);
        static System::String* NewUri();
        static Proxies::RealProxy* GetRealProxy(System::Object* proxy);
        static System::Reflection::MethodBase* GetMethodBaseFromMethodMessage(Messaging::IMethodMessage* msg);
        static System::Reflection::MethodBase* GetMethodBaseFromName(System::Type* type, System::String* methodName, cli::array<System::Type*>* signature);
        static System::Reflection::MethodBase* FindInterfaceMethod(System::Type* type, System::String* methodName, cli::array<System::Type*>* signature);
        static void GetObjectData(System::Object* obj, System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static ObjRef* GetObjRefForProxy(System::MarshalByRefObject* obj);
        static System::Object* GetLifetimeService(System::MarshalByRefObject* obj);
        static Messaging::IMessageSink* GetEnvoyChainForProxy(System::MarshalByRefObject* obj);
        static void LogRemotingStage(int32_t stage);
        static System::String* GetSessionIdForMethodMessage(Messaging::IMethodMessage* msg);
        static bool IsMethodOverloaded(Messaging::IMethodMessage* msg);
        static bool IsObjectOutOfAppDomain(System::Object* tp);
        static bool IsObjectOutOfContext(System::Object* tp);
        static bool IsOneWay(System::Reflection::MethodBase* method);
        static bool IsAsyncMessage(Messaging::IMessage* msg);
        static void SetObjectUriForMarshal(System::MarshalByRefObject* obj, System::String* uri);
        static System::Object* CreateClientProxy(ActivatedClientTypeEntry* entry, cli::array<System::Object*>* activationAttributes);
        static System::Object* CreateClientProxy2(System::Type* objectType, System::String* url, cli::array<System::Object*>* activationAttributes);
        static System::Object* CreateClientProxy3(WellKnownClientTypeEntry* entry);
        static System::Object* CreateClientProxyForContextBound(System::Type* type, cli::array<System::Object*>* activationAttributes);
        static System::Object* CreateClientProxyForComInterop(System::Type* type);
        static Identity* GetIdentityForUri(System::String* uri);
        static System::String* RemoveAppNameFromUri(System::String* uri);
        static Identity* GetObjectIdentity(System::MarshalByRefObject* obj);
        static ClientIdentity* GetOrCreateClientIdentity(ObjRef* objRef, System::Type* proxyType, System::Object* clientProxy);
        static Messaging::IMessageSink* GetClientChannelSinkChain(System::String* url, System::Object* channelData, System::String* objectUri);
        static ClientActivatedIdentity* CreateContextBoundObjectIdentity(System::Type* objectType);
        static ClientActivatedIdentity* CreateClientActivatedServerIdentity(System::MarshalByRefObject* realObject, System::Type* objectType, System::String* objectUri);
        static ServerIdentity* CreateWellKnownServerIdentity(System::Type* objectType, System::String* objectUri, WellKnownObjectMode mode);
        static void RegisterServerIdentity(ServerIdentity* identity);
        static System::Object* GetProxyForRemoteObject(ObjRef* objref, System::Type* classToProxy);
        static System::Object* GetRemoteObject(ObjRef* objRef, System::Type* proxyType);
        static System::Object* GetServerObject(System::String* uri);
        static cli::array<unsigned char>* SerializeCallData(System::Object* obj);
        static System::Object* DeserializeCallData(cli::array<unsigned char>* array);
        static cli::array<unsigned char>* SerializeExceptionData(System::Exception* ex);
        static System::Object* GetDomainProxy(System::AppDomain* domain);
        static void RegisterInternalChannels();
        static void DisposeIdentity(Identity* ident);
        static Identity* GetMessageTargetIdentity(Messaging::IMessage* msg);
        static void SetMessageTargetIdentity(Messaging::IMessage* msg, Identity* ident);
        static bool UpdateOutArgObject(System::Reflection::ParameterInfo* pi, System::Object* local, System::Object* remote);
        static System::String* GetNormalizedUri(System::String* uri);
        
    };
    
    
    struct MANAGED_API RemotingTimeoutException : public virtual RemotingException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* InnerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ServerException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* InnerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ClientActivatedIdentity : public virtual ServerIdentity{
        System::MarshalByRefObject* _targetThis;
        
        void constructor(System::String* objectUri, System::Type* objectType);
        System::MarshalByRefObject* GetServerObject();
        System::MarshalByRefObject* GetClientProxy();
        void SetClientProxy(System::MarshalByRefObject* obj);
        virtual void OnLifetimeExpired_e5bffd3f0ee9cda2() override;
        virtual Messaging::IMessage* SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) override;
        virtual Messaging::IMessageCtrl* AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) override;
        
    };
    
    
    struct MANAGED_API SingletonIdentity : public virtual ServerIdentity{
        
        void constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType);
        System::MarshalByRefObject* GetServerObject();
        virtual Messaging::IMessage* SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) override;
        virtual Messaging::IMessageCtrl* AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) override;
        
    };
    
    
    struct MANAGED_API SingleCallIdentity : public virtual ServerIdentity{
        
        void constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType);
        virtual Messaging::IMessage* SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) override;
        virtual Messaging::IMessageCtrl* AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) override;
        
    };
    
    
    struct MANAGED_API DisposerReplySink : public virtual System::Object, public virtual Messaging::IMessageSink{
        Messaging::IMessageSink* _next;
        System::IDisposable* _disposable;
        
        void constructor(Messaging::IMessageSink* next, System::IDisposable* disposable);
        Messaging::IMessage* SyncProcessMessage(Messaging::IMessage* msg);
        Messaging::IMessageCtrl* AsyncProcessMessage(Messaging::IMessage* msg, Messaging::IMessageSink* replySink);
        Messaging::IMessageSink* get_NextSink();
        
        virtual Messaging::IMessage* SyncProcessMessage_d4949581639d4872(Messaging::IMessage* msg) override;
        virtual Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) override;
        virtual Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API TypeInfo : public virtual System::Object{
        System::Collections::Hashtable* Attributes;
        System::Collections::Hashtable* Elements;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SoapServices : public virtual System::Object{
        static System::Collections::Hashtable* _xmlTypes;
        static System::Collections::Hashtable* _xmlElements;
        static System::Collections::Hashtable* _soapActions;
        static System::Collections::Hashtable* _soapActionsMethods;
        static System::Collections::Hashtable* _typeInfos;
        
        SoapServices();
        void constructor();
        static void static_constructor();
        static System::String* CodeXmlNamespaceForClrTypeNamespace(System::String* typeNamespace, System::String* assemblyName);
        static bool DecodeXmlNamespaceForClrTypeNamespace(System::String* inNamespace, System::String* typeNamespace, System::String* assemblyName);
        static void GetInteropFieldTypeAndNameFromXmlAttribute(System::Type* containingType, System::String* xmlAttribute, System::String* xmlNamespace, System::Type* type, System::String* name);
        static void GetInteropFieldTypeAndNameFromXmlElement(System::Type* containingType, System::String* xmlElement, System::String* xmlNamespace, System::Type* type, System::String* name);
        static void GetInteropFieldInfo(System::Collections::Hashtable* fields, System::String* xmlName, System::String* xmlNamespace, System::Type* type, System::String* name);
        static System::String* GetNameKey(System::String* name, System::String* namspace);
        static System::Type* GetInteropTypeFromXmlElement(System::String* xmlElement, System::String* xmlNamespace);
        static System::Type* GetInteropTypeFromXmlType(System::String* xmlType, System::String* xmlTypeNamespace);
        static System::String* GetAssemblyName(System::Reflection::MethodBase* mb);
        static System::String* GetSoapActionFromMethodBase(System::Reflection::MethodBase* mb);
        static bool GetTypeAndMethodNameFromSoapAction(System::String* soapAction, System::String* typeName, System::String* methodName);
        static bool GetXmlElementForInteropType(System::Type* type, System::String* xmlElement, System::String* xmlNamespace);
        static System::String* GetXmlNamespaceForMethodCall(System::Reflection::MethodBase* mb);
        static System::String* GetXmlNamespaceForMethodResponse(System::Reflection::MethodBase* mb);
        static bool GetXmlTypeForInteropType(System::Type* type, System::String* xmlType, System::String* xmlTypeNamespace);
        static bool IsClrTypeNamespace(System::String* namespaceString);
        static bool IsSoapActionValidForMethodBase(System::String* soapAction, System::Reflection::MethodBase* mb);
        static void PreLoad(System::Reflection::Assembly* assembly);
        static void PreLoad2(System::Type* type);
        static void RegisterInteropXmlElement(System::String* xmlElement, System::String* xmlNamespace, System::Type* type);
        static void RegisterInteropXmlType(System::String* xmlType, System::String* xmlTypeNamespace, System::Type* type);
        static void RegisterSoapActionForMethodBase(System::Reflection::MethodBase* mb);
        static System::String* InternalGetSoapAction(System::Reflection::MethodBase* mb);
        static void RegisterSoapActionForMethodBase2(System::Reflection::MethodBase* mb, System::String* soapAction);
        static System::String* EncodeNs(System::String* ns);
        static System::String* DecodeNs(System::String* ns);
        static System::String* get_XmlNsForClrType();
        static System::String* get_XmlNsForClrTypeWithAssembly();
        static System::String* get_XmlNsForClrTypeWithNs();
        static System::String* get_XmlNsForClrTypeWithNsAndAssembly();
        
    };
    
    
    struct MANAGED_API TypeInfo2 : public virtual System::Object, public virtual IRemotingTypeInfo{
        System::String* serverType;
        cli::array<System::String*>* serverHierarchy;
        cli::array<System::String*>* interfacesImplemented;
        
        void constructor(System::Type* type);
        bool CanCastTo(System::Type* fromType, System::Object* o);
        System::String* get_TypeName();
        System::String* set_TypeName(System::String* value);
        
        virtual bool CanCastTo_7f8304fa142c3271(System::Type* fromType, System::Object* o) override;
        virtual System::String* get_TypeName_e368785a4c79e626() override;
        virtual System::String* set_TypeName_d3657f810af9c065(System::String* value) override;
    };
    
    
    struct MANAGED_API WellKnownClientTypeEntry : public virtual TypeEntry{
        System::Type* obj_type;
        System::String* obj_url;
        System::String* app_url;
        
        void constructor(System::Type* type, System::String* objectUrl);
        void constructor(System::String* typeName, System::String* assemblyName, System::String* objectUrl);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_ApplicationUrl();
        System::String* set_ApplicationUrl(System::String* value);
        System::Type* get_ObjectType();
        System::String* get_ObjectUrl();
        
    };
    
    
    struct MANAGED_API WellKnownServiceTypeEntry : public virtual TypeEntry{
        System::Type* obj_type;
        System::String* obj_uri;
        WellKnownObjectMode obj_mode;
        
        void constructor(System::Type* type, System::String* objectUri, WellKnownObjectMode mode);
        void constructor(System::String* typeName, System::String* assemblyName, System::String* objectUri, WellKnownObjectMode mode);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<Contexts::IContextAttribute*>* get_ContextAttributes();
        cli::array<Contexts::IContextAttribute*>* set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value);
        WellKnownObjectMode get_Mode();
        System::Type* get_ObjectType();
        System::String* get_ObjectUri();
        
    };
    
    
    struct MANAGED_API ChannelInfo : public virtual System::Object, public virtual IChannelInfo{
        cli::array<System::Object*>* channelData;
        
        void constructor();
        void constructor(System::Object* remoteChannelData);
        cli::array<System::Object*>* get_ChannelData();
        cli::array<System::Object*>* set_ChannelData(cli::array<System::Object*>* value);
        
        virtual cli::array<System::Object*>* get_ChannelData_a0d7a480581057f3() override;
        virtual cli::array<System::Object*>* set_ChannelData_bfc7444492100e65(cli::array<System::Object*>* value) override;
    };
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    struct MANAGED_API ActivationServices : public virtual System::Object{
        static IActivator* _constructionActivator;
        
        void constructor();
        static System::Runtime::Remoting::Messaging::IMessage* Activate(System::Runtime::Remoting::Proxies::RemotingProxy* proxy, System::Runtime::Remoting::Messaging::ConstructionCall* ctorCall);
        static System::Runtime::Remoting::Messaging::IMessage* RemoteActivate(IConstructionCallMessage* ctorCall);
        static System::Object* CreateProxyFromAttributes(System::Type* type, cli::array<System::Object*>* activationAttributes);
        static System::Runtime::Remoting::Messaging::ConstructionCall* CreateConstructionCall(System::Type* type, System::String* activationUrl, cli::array<System::Object*>* activationAttributes);
        static System::Runtime::Remoting::Messaging::IMessage* CreateInstanceFromMessage(IConstructionCallMessage* ctorCall);
        static System::Object* CreateProxyForType(System::Type* type);
        static System::Object* AllocateUninitializedClassInstance(System::Type* type);
        static void EnableProxyActivation(System::Type* type, bool enable);
        static IActivator* get_ConstructionActivator();
        
    };
    
    
    struct MANAGED_API AppDomainLevelActivator : public virtual System::Object, public virtual IActivator{
        System::String* _activationUrl;
        IActivator* _next;
        
        void constructor(System::String* activationUrl, IActivator* next);
        IConstructionReturnMessage* Activate(IConstructionCallMessage* ctorCall);
        ActivatorLevel get_Level();
        IActivator* get_NextActivator();
        IActivator* set_NextActivator(IActivator* value);
        
        virtual IConstructionReturnMessage* Activate_49ae602ff2f2ec37(IConstructionCallMessage* ctorCall) override;
        virtual ActivatorLevel get_Level_ca7e6f0a04053a94() override;
        virtual IActivator* get_NextActivator_d6b0fab3e3c1398b() override;
        virtual IActivator* set_NextActivator_d4b9338a5d7c4775(IActivator* value) override;
    };
    
    
    struct MANAGED_API ConstructionLevelActivator : public virtual System::Object, public virtual IActivator{
        
        void constructor();
        IConstructionReturnMessage* Activate(IConstructionCallMessage* msg);
        ActivatorLevel get_Level();
        IActivator* get_NextActivator();
        IActivator* set_NextActivator(IActivator* value);
        
        virtual IConstructionReturnMessage* Activate_49ae602ff2f2ec37(IConstructionCallMessage* msg) override;
        virtual ActivatorLevel get_Level_ca7e6f0a04053a94() override;
        virtual IActivator* get_NextActivator_d6b0fab3e3c1398b() override;
        virtual IActivator* set_NextActivator_d4b9338a5d7c4775(IActivator* value) override;
    };
    
    
    struct MANAGED_API ContextLevelActivator : public virtual System::Object, public virtual IActivator{
        IActivator* m_NextActivator;
        
        void constructor(IActivator* next);
        IConstructionReturnMessage* Activate(IConstructionCallMessage* ctorCall);
        ActivatorLevel get_Level();
        IActivator* get_NextActivator();
        IActivator* set_NextActivator(IActivator* value);
        
        virtual IConstructionReturnMessage* Activate_49ae602ff2f2ec37(IConstructionCallMessage* ctorCall) override;
        virtual ActivatorLevel get_Level_ca7e6f0a04053a94() override;
        virtual IActivator* get_NextActivator_d6b0fab3e3c1398b() override;
        virtual IActivator* set_NextActivator_d4b9338a5d7c4775(IActivator* value) override;
    };
    
    
    struct MANAGED_API RemoteActivationAttribute : public virtual System::Attribute, public virtual System::Runtime::Remoting::Contexts::IContextAttribute{
        System::Collections::IList* _contextProperties;
        
        void constructor();
        void constructor(System::Collections::IList* contextProperties);
        bool IsContextOK(System::Runtime::Remoting::Contexts::Context2* ctx, IConstructionCallMessage* ctor);
        void GetPropertiesForNewContext(IConstructionCallMessage* ctor);
        
        virtual bool IsContextOK_c0cd4400710cc315(System::Runtime::Remoting::Contexts::Context2* ctx, IConstructionCallMessage* ctor) override;
        virtual void GetPropertiesForNewContext_98ae344cb00933c3(IConstructionCallMessage* ctor) override;
    };
    
    
    struct MANAGED_API RemoteActivator : public virtual System::MarshalByRefObject, public virtual IActivator{
        
        void constructor();
        IConstructionReturnMessage* Activate(IConstructionCallMessage* msg);
        virtual System::Object* InitializeLifetimeService_8f02e9c96ffbe30f() override;
        ActivatorLevel get_Level();
        IActivator* get_NextActivator();
        IActivator* set_NextActivator(IActivator* value);
        
        virtual IConstructionReturnMessage* Activate_49ae602ff2f2ec37(IConstructionCallMessage* msg) override;
        virtual ActivatorLevel get_Level_ca7e6f0a04053a94() override;
        virtual IActivator* get_NextActivator_d6b0fab3e3c1398b() override;
        virtual IActivator* set_NextActivator_d4b9338a5d7c4775(IActivator* value) override;
    };
    
    
    struct MANAGED_API UrlAttribute : public virtual System::Runtime::Remoting::Contexts::ContextAttribute{
        System::String* url;
        
        void constructor(System::String* callsiteURL);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual void GetPropertiesForNewContext_f6e9f6568c456816(IConstructionCallMessage* ctorMsg) override;
        virtual bool IsContextOK_7837aaab12d993b6(System::Runtime::Remoting::Contexts::Context2* ctx, IConstructionCallMessage* msg) override;
        System::String* get_UrlValue();
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    struct MANAGED_API AggregateDictionary : public virtual System::Object, public virtual System::Collections::IDictionary, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        cli::array<System::Collections::IDictionary*>* dictionaries;
        System::Collections::ArrayList* _values;
        System::Collections::ArrayList* _keys;
        
        void constructor(cli::array<System::Collections::IDictionary*>* dics);
        void Add(System::Object* key, System::Object* value);
        void Clear();
        bool Contains(System::Object* ob);
        System::Collections::IDictionaryEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        void Remove(System::Object* ob);
        void CopyTo(System::Array* array, int32_t index);
        bool get_IsFixedSize();
        bool get_IsReadOnly();
        System::Object* get_Item(System::Object* key);
        System::Object* set_Item(System::Object* key, System::Object* value);
        System::Collections::ICollection* get_Keys();
        System::Collections::ICollection* get_Values();
        int32_t get_Count();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        
        virtual void Add_642542cf7a4cae38(System::Object* key, System::Object* value) override;
        virtual void Clear_23091c63869f817f() override;
        virtual bool Contains_32eba6643fe7ee4b(System::Object* ob) override;
        virtual System::Collections::IDictionaryEnumerator* GetEnumerator_40657fcb15842551() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual void Remove_f212b96e00d6aaed(System::Object* ob) override;
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual bool get_IsFixedSize_9b77ca904d42a211() override;
        virtual bool get_IsReadOnly_faaa94fe854aaa5f() override;
        virtual System::Object* get_Item_95688dd349c069c0(System::Object* key) override;
        virtual System::Object* set_Item_a0c4aaef01cc13c2(System::Object* key, System::Object* value) override;
        virtual System::Collections::ICollection* get_Keys_d809cadac60b140a() override;
        virtual System::Collections::ICollection* get_Values_ef6ae5cda2bdcf40() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API AggregateEnumerator : public virtual System::Object, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        cli::array<System::Collections::IDictionary*>* dictionaries;
        int32_t pos;
        System::Collections::IDictionaryEnumerator* currente;
        
        void constructor(cli::array<System::Collections::IDictionary*>* dics);
        bool MoveNext();
        void Reset();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        System::Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API BaseChannelSinkWithProperties : public virtual BaseChannelObjectWithProperties{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API BaseChannelWithProperties : public virtual BaseChannelObjectWithProperties{
        IChannelSinkBase* SinksWithProperties;
        
        void constructor();
        virtual System::Collections::IDictionary* get_Properties_ebd08d2ecde34832() override;
        
    };
    
    
    struct MANAGED_API ChannelDataStore : public virtual System::Object, public virtual IChannelDataStore{
        cli::array<System::String*>* _channelURIs;
        cli::array<System::Collections::DictionaryEntry>* _extraData;
        
        void constructor(cli::array<System::String*>* channelURIs);
        cli::array<System::String*>* get_ChannelUris();
        cli::array<System::String*>* set_ChannelUris(cli::array<System::String*>* value);
        System::Object* get_Item(System::Object* key);
        System::Object* set_Item(System::Object* key, System::Object* value);
        
        virtual cli::array<System::String*>* get_ChannelUris_ea291fabcbfe8aaa() override;
        virtual System::Object* get_Item_e760c8b72e46bb27(System::Object* key) override;
        virtual System::Object* set_Item_1ecebca6bd3e41cb(System::Object* key, System::Object* value) override;
    };
    
    
    struct MANAGED_API ChannelServices : public virtual System::Object{
        static System::Collections::ArrayList* registeredChannels;
        static System::Collections::ArrayList* delayedClientChannels;
        static System::Runtime::Remoting::Contexts::CrossContextChannel* _crossContextSink;
        static System::String* CrossContextUrl;
        static System::Collections::IList* oldStartModeTypes;
        
        ChannelServices();
        void constructor();
        static void static_constructor();
        static System::Runtime::Remoting::Messaging::IMessageSink* CreateClientChannelSinkChain(System::String* url, System::Object* remoteChannelData, System::String* objectUri);
        static System::Runtime::Remoting::Messaging::IMessageSink* CreateClientChannelSinkChain2(IChannelSender* sender, System::String* url, cli::array<System::Object*>* channelDataArray, System::String* objectUri);
        static IServerChannelSink* CreateServerChannelSinkChain(IServerChannelSinkProvider* provider, IChannelReceiver* channel);
        static ServerProcessing DispatchMessage(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessage* replyMsg);
        static IChannel* GetChannel(System::String* name);
        static System::Collections::IDictionary* GetChannelSinkProperties(System::Object* obj);
        static cli::array<System::String*>* GetUrlsForObject(System::MarshalByRefObject* obj);
        static void RegisterChannel(IChannel* chnl);
        static void RegisterChannel2(IChannel* chnl, bool ensureSecurity);
        static void RegisterChannelConfig(System::Runtime::Remoting::ChannelData* channel);
        static System::Object* CreateProvider(System::Runtime::Remoting::ProviderData* prov);
        static System::Runtime::Remoting::Messaging::IMessage* SyncDispatchMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        static System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncDispatchMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        static System::Runtime::Remoting::Messaging::ReturnMessage* CheckIncomingMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        static System::Runtime::Remoting::Messaging::IMessage* CheckReturnMessage(System::Runtime::Remoting::Messaging::IMessage* callMsg, System::Runtime::Remoting::Messaging::IMessage* retMsg);
        static bool IsLocalCall(System::Runtime::Remoting::Messaging::IMessage* callMsg);
        static void UnregisterChannel(IChannel* chnl);
        static cli::array<System::Object*>* GetCurrentChannelInfo();
        static System::Runtime::Remoting::Contexts::CrossContextChannel* get_CrossContextChannel();
        static cli::array<IChannel*>* get_RegisteredChannels();
        
    };
    
    
    struct MANAGED_API ExceptionFilterSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _next;
        System::Runtime::Remoting::Messaging::IMessage* _call;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessage* call, System::Runtime::Remoting::Messaging::IMessageSink* next);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ChanelSinkStackEntry : public virtual System::Object{
        IChannelSinkBase* Sink;
        System::Object* State;
        ChanelSinkStackEntry* Next;
        
        void constructor(IChannelSinkBase* sink, System::Object* state, ChanelSinkStackEntry* next);
        
    };
    
    
    struct MANAGED_API ClientChannelSinkStack : public virtual System::Object, public virtual IClientChannelSinkStack, public virtual IClientResponseChannelSinkStack{
        System::Runtime::Remoting::Messaging::IMessageSink* _replySink;
        ChanelSinkStackEntry* _sinkStack;
        
        void constructor();
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        void AsyncProcessResponse(ITransportHeaders* headers, System::IO::Stream* stream);
        void DispatchException(System::Exception* e);
        void DispatchReplyMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Object* Pop(IClientChannelSink* sink);
        void Push(IClientChannelSink* sink, System::Object* state);
        
        virtual void AsyncProcessResponse_d672fc10cee61823(ITransportHeaders* headers, System::IO::Stream* stream) override;
        virtual void DispatchException_7c329149bbfd27eb(System::Exception* e) override;
        virtual void DispatchReplyMessage_3379ae4985e4327c(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Object* Pop_4550bb7de7b65554(IClientChannelSink* sink) override;
        virtual void Push_47f6a51bfc8d8965(IClientChannelSink* sink, System::Object* state) override;
    };
    
    
    struct MANAGED_API CrossAppDomainData : public virtual System::Object{
        System::Object* _ContextID;
        int32_t _DomainID;
        System::String* _processGuid;
        
        void constructor(int32_t domainId);
        int32_t get_DomainID();
        System::String* get_ProcessID();
        
    };
    
    
    struct MANAGED_API CrossAppDomainChannel : public virtual System::Object, public virtual IChannel, public virtual IChannelSender, public virtual IChannelReceiver{
        static /*constexpr*/ System::String* _strName() { return _T("MONOCAD"); }
        static System::Object* s_lock;
        
        CrossAppDomainChannel();
        void constructor();
        static void static_constructor();
        static void RegisterCrossAppDomainChannel();
        System::String* Parse(System::String* url, System::String* objectURI);
        virtual cli::array<System::String*>* GetUrlsForUri_d686284f037feab3(System::String* objectURI);
        virtual void StartListening_facefd345f0460a1(System::Object* data);
        virtual void StopListening_baaf88d837ccab5c(System::Object* data);
        virtual System::Runtime::Remoting::Messaging::IMessageSink* CreateMessageSink_16a9a5ea63020929(System::String* url, System::Object* data, System::String* uri);
        virtual System::String* get_ChannelName_377a03c7204ade87();
        virtual int32_t get_ChannelPriority_6555198b7b654a77();
        virtual System::Object* get_ChannelData_c2e668c6c3bac5a2();
        
        virtual System::String* Parse_f03b6e6bc4217a25(System::String* url, System::String* objectURI) override;
        virtual cli::array<System::String*>* GetUrlsForUri_3e77808f3d9020c7(System::String* objectURI) override;
        virtual void StartListening_a568e860f5c12098(System::Object* data) override;
        virtual void StopListening_77f3993d6f40946f(System::Object* data) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* CreateMessageSink_66e723ef8344d1c9(System::String* url, System::Object* data, System::String* uri) override;
        virtual System::String* get_ChannelName_92306725eef18163() override;
        virtual int32_t get_ChannelPriority_b96d903fee110f5d() override;
        virtual System::Object* get_ChannelData_bd2f3a6812b5fc88() override;
    };
    
    
    struct MANAGED_API CrossAppDomainSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        static System::Collections::Hashtable* s_sinks;
        static System::Reflection::MethodInfo* processMessageMethod;
        int32_t _domainID;
        
        CrossAppDomainSink();
        void constructor(int32_t domainID);
        static void static_constructor();
        static CrossAppDomainSink* GetSink(int32_t domainID);
        static ProcessMessageRes ProcessMessageInDomain(cli::array<unsigned char>* arrRequest, System::Runtime::Remoting::Messaging::CADMethodCallMessage* cadMsg);
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_68a690daafdab562(System::Runtime::Remoting::Messaging::IMessage* msgRequest);
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_6cb8c8ebc3c3ec7c(System::Runtime::Remoting::Messaging::IMessage* reqMsg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        void SendAsyncMessage(System::Object* data);
        void _AsyncProcessMessage_m__11(System::Object* data);
        int32_t get_TargetDomainId();
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msgRequest) override;
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* reqMsg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API CADSerializer : public virtual System::Object{
        
        void constructor();
        static System::Runtime::Remoting::Messaging::IMessage* DeserializeMessage(System::IO::MemoryStream* mem, System::Runtime::Remoting::Messaging::IMethodCallMessage* msg);
        static System::IO::MemoryStream* SerializeMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        static System::IO::MemoryStream* SerializeObject(System::Object* obj);
        static System::Object* DeserializeObject(System::IO::MemoryStream* mem);
        
    };
    
    
    struct MANAGED_API AsyncRequest : public virtual System::Object{
        System::Runtime::Remoting::Messaging::IMessageSink* ReplySink;
        System::Runtime::Remoting::Messaging::IMessage* MsgRequest;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessage* msgRequest, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        
    };
    
    
    struct MANAGED_API ServerChannelSinkStack : public virtual System::Object, public virtual IServerChannelSinkStack, public virtual IServerResponseChannelSinkStack{
        ChanelSinkStackEntry* _sinkStack;
        
        void constructor();
        System::IO::Stream* GetResponseStream(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers);
        System::Object* Pop(IServerChannelSink* sink);
        void Push(IServerChannelSink* sink, System::Object* state);
        void ServerCallback(System::IAsyncResult* ar);
        void Store(IServerChannelSink* sink, System::Object* state);
        void StoreAndDispatch(IServerChannelSink* sink, System::Object* state);
        void AsyncProcessResponse(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream);
        
        virtual System::IO::Stream* GetResponseStream_e19a69cdcfbe6e70(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) override;
        virtual System::Object* Pop_86e374140ce04b4a(IServerChannelSink* sink) override;
        virtual void Push_4e4c6597fd9aae15(IServerChannelSink* sink, System::Object* state) override;
        virtual void ServerCallback_997eeaf298842004(System::IAsyncResult* ar) override;
        virtual void Store_1327911ba6e60262(IServerChannelSink* sink, System::Object* state) override;
        virtual void StoreAndDispatch_ecff62ebd0a78b8c(IServerChannelSink* sink, System::Object* state) override;
        virtual void AsyncProcessResponse_49e84a50b456f300(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) override;
    };
    
    
    struct MANAGED_API ServerDispatchSink : public virtual System::Object, public virtual IServerChannelSink, public virtual IChannelSinkBase{
        
        void constructor();
        void AsyncProcessResponse(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream);
        System::IO::Stream* GetResponseStream(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers);
        ServerProcessing ProcessMessage(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* requestMsg, ITransportHeaders* requestHeaders, System::IO::Stream* requestStream, System::Runtime::Remoting::Messaging::IMessage* responseMsg, ITransportHeaders* responseHeaders, System::IO::Stream* responseStream);
        IServerChannelSink* get_NextChannelSink();
        System::Collections::IDictionary* get_Properties();
        
        virtual void AsyncProcessResponse_de8d5b38a27d9262(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) override;
        virtual System::IO::Stream* GetResponseStream_226ecebab7f1ae4a(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) override;
        virtual ServerProcessing ProcessMessage_f903a2d50825660b(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* requestMsg, ITransportHeaders* requestHeaders, System::IO::Stream* requestStream, System::Runtime::Remoting::Messaging::IMessage* responseMsg, ITransportHeaders* responseHeaders, System::IO::Stream* responseStream) override;
        virtual IServerChannelSink* get_NextChannelSink_6e269c53e50789c7() override;
        virtual System::Collections::IDictionary* get_Properties_381d7d7a86286003() override;
    };
    
    
    struct MANAGED_API ServerDispatchSinkProvider : public virtual System::Object, public virtual IServerFormatterSinkProvider, public virtual IServerChannelSinkProvider{
        
        void constructor();
        void constructor(System::Collections::IDictionary* properties, System::Collections::ICollection* providerData);
        IServerChannelSink* CreateSink(IChannelReceiver* channel);
        void GetChannelData(IChannelDataStore* channelData);
        IServerChannelSinkProvider* get_Next();
        IServerChannelSinkProvider* set_Next(IServerChannelSinkProvider* value);
        
        virtual IServerChannelSink* CreateSink_393aa9e6f3a19f60(IChannelReceiver* channel) override;
        virtual void GetChannelData_ddcc0792026c6379(IChannelDataStore* channelData) override;
        virtual IServerChannelSinkProvider* get_Next_c6272a298f936a9f() override;
        virtual IServerChannelSinkProvider* set_Next_3f72cebde871a137(IServerChannelSinkProvider* value) override;
    };
    
    
    struct MANAGED_API SinkProviderData : public virtual System::Object{
        System::String* sinkName;
        System::Collections::ArrayList* children;
        System::Collections::Hashtable* properties;
        
        void constructor(System::String* name);
        System::Collections::IList* get_Children();
        System::String* get_Name();
        System::Collections::IDictionary* get_Properties();
        
    };
    
    
    struct MANAGED_API TransportHeaders : public virtual System::Object, public virtual ITransportHeaders{
        System::Collections::Hashtable* hash_table;
        
        void constructor();
        System::Collections::IEnumerator* GetEnumerator();
        System::Object* get_Item(System::Object* key);
        System::Object* set_Item(System::Object* key, System::Object* value);
        
        virtual System::Collections::IEnumerator* GetEnumerator_3a76a2c7ca35933f() override;
        virtual System::Object* get_Item_720a0b389493f59a(System::Object* key) override;
        virtual System::Object* set_Item_6a9ed7422eb40f13(System::Object* key, System::Object* value) override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    struct MANAGED_API NamedSlots : public virtual System::Object{
        static System::Collections::Hashtable* namedSlots;
        
        NamedSlots();
        void constructor();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API Context2 : public virtual System::Object{
        int32_t domain_id;
        int32_t context_id;
        void* static_data;
        static System::Runtime::Remoting::Messaging::IMessageSink* default_server_context_sink;
        System::Runtime::Remoting::Messaging::IMessageSink* server_context_sink_chain;
        System::Runtime::Remoting::Messaging::IMessageSink* client_context_sink_chain;
        cli::array<System::Object*>* datastore;
        System::Collections::ArrayList* context_properties;
        static int32_t global_count;
        static DynamicPropertyCollection* global_dynamic_properties;
        DynamicPropertyCollection* context_dynamic_properties;
        ContextCallbackObject* callback_object;
        
        void constructor();
        virtual void Finalize_9a8cc920d2323ecd();
        static bool RegisterDynamicProperty(IDynamicProperty* prop, System::ContextBoundObject* obj, Context2* ctx);
        static bool UnregisterDynamicProperty(System::String* name, System::ContextBoundObject* obj, Context2* ctx);
        static DynamicPropertyCollection* GetDynamicPropertyCollection(System::ContextBoundObject* obj, Context2* ctx);
        static void NotifyGlobalDynamicSinks(bool start, System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async);
        void NotifyDynamicSinks(bool start, System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async);
        virtual IContextProperty* GetProperty_4fcc5db656115bfb(System::String* name);
        virtual void SetProperty_e3b9245b49551e88(IContextProperty* prop);
        virtual void Freeze_20d1b360c90a99cc();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Runtime::Remoting::Messaging::IMessageSink* GetServerContextSinkChain();
        System::Runtime::Remoting::Messaging::IMessageSink* GetClientContextSinkChain();
        System::Runtime::Remoting::Messaging::IMessageSink* CreateServerObjectSinkChain(System::MarshalByRefObject* obj, bool forceInternalExecute);
        System::Runtime::Remoting::Messaging::IMessageSink* CreateEnvoySink(System::MarshalByRefObject* serverObject);
        static Context2* SwitchToContext(Context2* newContext);
        static Context2* CreateNewContext(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg);
        void DoCallBack(CrossContextDelegate* deleg);
        static System::LocalDataStoreSlot* AllocateDataSlot();
        static System::LocalDataStoreSlot* AllocateNamedDataSlot(System::String* name);
        static void FreeNamedDataSlot(System::String* name);
        static System::Object* GetData(System::LocalDataStoreSlot* slot);
        static System::LocalDataStoreSlot* GetNamedDataSlot(System::String* name);
        static void SetData(System::LocalDataStoreSlot* slot, System::Object* data);
        static Context2* get_DefaultContext();
        virtual int32_t get_ContextID_1646acb3c19d2905();
        virtual cli::array<IContextProperty*>* get_ContextProperties_df38ac590badff26();
        bool get_IsDefaultContext();
        bool get_NeedsContextSink();
        static bool get_HasGlobalDynamicSinks();
        bool get_HasDynamicSinks();
        bool get_HasExitSinks();
        
    };
    
    
    struct MANAGED_API DynamicPropertyReg : public virtual System::Object{
        IDynamicProperty* Property;
        IDynamicMessageSink* Sink;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API DynamicPropertyCollection : public virtual System::Object{
        System::Collections::ArrayList* _properties;
        
        void constructor();
        bool RegisterDynamicProperty(IDynamicProperty* prop);
        bool UnregisterDynamicProperty(System::String* name);
        void NotifyMessage(bool start, System::Runtime::Remoting::Messaging::IMessage* msg, bool client_site, bool async);
        int32_t FindProperty(System::String* name);
        bool get_HasProperties();
        
    };
    
    
    struct MANAGED_API ContextCallbackObject : public virtual System::ContextBoundObject{
        
        void constructor();
        void DoCallBack(CrossContextDelegate* deleg);
        
    };
    
    
    struct MANAGED_API ContextProperty : public virtual System::Object{
        System::String* name;
        System::Object* prop;
        
        void constructor(System::String* name, System::Object* prop);
        virtual System::String* get_Name_2ba79a9cf6b71356();
        virtual System::Object* get_Property_558321cc59c3cc5a();
        
    };
    
    
    struct MANAGED_API ContextRestoreSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _next;
        Context2* _context;
        System::Runtime::Remoting::Messaging::IMessage* _call;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, Context2* context, System::Runtime::Remoting::Messaging::IMessage* call);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API CrossContextChannel : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        
        void constructor();
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API SynchronizationAttribute : public virtual ContextAttribute, public virtual IContributeClientContextSink, public virtual IContributeServerContextSink{
        static constexpr int32_t NOT_SUPPORTED = 1;
        static constexpr int32_t SUPPORTED = 2;
        static constexpr int32_t REQUIRED = 4;
        static constexpr int32_t REQUIRES_NEW = 8;
        bool _bReEntrant;
        int32_t _flavor;
        bool _locked;
        int32_t _lockCount;
        System::Threading::Mutex* _mutex;
        System::Threading::Thread* _ownerThread;
        
        void constructor();
        void constructor(bool reEntrant);
        void constructor(int32_t flag);
        void constructor(int32_t flag, bool reEntrant);
        void AcquireLock();
        void ReleaseLock();
        virtual void GetPropertiesForNewContext_f6e9f6568c456816(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetClientContextSink_d46a0dc375cfe814(System::Runtime::Remoting::Messaging::IMessageSink* nextSink);
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetServerContextSink_b934956cce20f850(System::Runtime::Remoting::Messaging::IMessageSink* nextSink);
        virtual bool IsContextOK_7837aaab12d993b6(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) override;
        static void ExitContext();
        static void EnterContext();
        virtual bool get_IsReEntrant_8241801b08a6a7ac();
        virtual bool get_Locked_379a90f1fd786988();
        virtual bool set_Locked_3a9c4762984d3c2b(bool value);
        
        virtual void GetPropertiesForNewContext_98ae344cb00933c3(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetClientContextSink_4901bfa17250fabc(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* GetServerContextSink_1f6bff576bbda(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) override;
        virtual bool IsContextOK_c0cd4400710cc315(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) override;
    };
    
    
    struct MANAGED_API SynchronizedClientContextSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _next;
        SynchronizationAttribute* _att;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API SynchronizedServerContextSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _next;
        SynchronizationAttribute* _att;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API SynchronizedContextReplySink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _next;
        bool _newLock;
        SynchronizationAttribute* _att;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att, bool newLock);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    struct MANAGED_API ClientSponsor : public virtual System::MarshalByRefObject, public virtual ISponsor{
        System::TimeSpan renewal_time;
        System::Collections::Hashtable* registered_objects;
        
        void constructor();
        void constructor(System::TimeSpan renewalTime);
        virtual void Finalize_f66f0993c93af244();
        void Close();
        virtual System::Object* InitializeLifetimeService_8f02e9c96ffbe30f() override;
        bool Register(System::MarshalByRefObject* obj);
        System::TimeSpan Renewal(ILease* lease);
        void Unregister(System::MarshalByRefObject* obj);
        System::TimeSpan get_RenewalTime();
        System::TimeSpan set_RenewalTime(System::TimeSpan value);
        
        virtual System::TimeSpan Renewal_eed03694f8483857(ILease* lease) override;
    };
    
    
    struct MANAGED_API Lease : public virtual System::MarshalByRefObject, public virtual ILease{
        System::DateTime _leaseExpireTime;
        LeaseState _currentState;
        System::TimeSpan _initialLeaseTime;
        System::TimeSpan _renewOnCallTime;
        System::TimeSpan _sponsorshipTimeout;
        System::Collections::ArrayList* _sponsors;
        System::Collections::Queue* _renewingSponsors;
        RenewalDelegate* _renewalDelegate;
        
        void constructor();
        void Activate();
        void Register(ISponsor* obj);
        void Register2(ISponsor* obj, System::TimeSpan renewalTime);
        System::TimeSpan Renew(System::TimeSpan renewalTime);
        void Unregister(ISponsor* obj);
        void UpdateState();
        void CheckNextSponsor();
        void ProcessSponsorResponse(System::Object* state, bool timedOut);
        System::TimeSpan get_CurrentLeaseTime();
        LeaseState get_CurrentState();
        System::TimeSpan get_InitialLeaseTime();
        System::TimeSpan set_InitialLeaseTime(System::TimeSpan value);
        System::TimeSpan get_RenewOnCallTime();
        System::TimeSpan set_RenewOnCallTime(System::TimeSpan value);
        System::TimeSpan get_SponsorshipTimeout();
        System::TimeSpan set_SponsorshipTimeout(System::TimeSpan value);
        
        virtual void Register_29cd33cb094da73(ISponsor* obj) override;
        virtual void Register_a287b3a68d0f3c8a(ISponsor* obj, System::TimeSpan renewalTime) override;
        virtual System::TimeSpan Renew_ac41c9e01b454d0a(System::TimeSpan renewalTime) override;
        virtual void Unregister_8ceee2c7f59bf148(ISponsor* obj) override;
        virtual System::TimeSpan get_CurrentLeaseTime_495da45221ea9c91() override;
        virtual LeaseState get_CurrentState_c1fd61e427ff7162() override;
        virtual System::TimeSpan get_InitialLeaseTime_aa84660515c07bca() override;
        virtual System::TimeSpan set_InitialLeaseTime_ba2e7f8774a51a3f(System::TimeSpan value) override;
        virtual System::TimeSpan get_RenewOnCallTime_d513f7649eedc4() override;
        virtual System::TimeSpan set_RenewOnCallTime_ed741ebcdf794d2f(System::TimeSpan value) override;
        virtual System::TimeSpan get_SponsorshipTimeout_21865f97c16cd67d() override;
        virtual System::TimeSpan set_SponsorshipTimeout_43c4b2fd11e77e17(System::TimeSpan value) override;
    };
    
    
    struct MANAGED_API LeaseManager : public virtual System::Object{
        System::Collections::ArrayList* _objects;
        System::Threading::Timer* _timer;
        
        void constructor();
        void SetPollTime(System::TimeSpan timeSpan);
        void TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity);
        void StopTrackingLifetime(System::Runtime::Remoting::ServerIdentity* identity);
        void StartManager();
        void StopManager();
        void ManageLeases(System::Object* state);
        
    };
    
    
    struct MANAGED_API LeaseSink : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IMessageSink{
        System::Runtime::Remoting::Messaging::IMessageSink* _nextSink;
        
        void constructor(System::Runtime::Remoting::Messaging::IMessageSink* nextSink);
        System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink);
        void RenewLease(System::Runtime::Remoting::Messaging::IMessage* msg);
        System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink();
        
        virtual System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage_d4949581639d4872(System::Runtime::Remoting::Messaging::IMessage* msg) override;
        virtual System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) override;
        virtual System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API LifetimeServices : public virtual System::Object{
        static System::TimeSpan _leaseManagerPollTime;
        static System::TimeSpan _leaseTime;
        static System::TimeSpan _renewOnCallTime;
        static System::TimeSpan _sponsorshipTimeout;
        static LeaseManager* _leaseManager;
        
        LifetimeServices();
        static void static_constructor();
        void constructor();
        static void TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity);
        static void StopTrackingLifetime(System::Runtime::Remoting::ServerIdentity* identity);
        static System::TimeSpan get_LeaseManagerPollTime();
        static System::TimeSpan set_LeaseManagerPollTime(System::TimeSpan value);
        static System::TimeSpan get_LeaseTime();
        static System::TimeSpan set_LeaseTime(System::TimeSpan value);
        static System::TimeSpan get_RenewOnCallTime();
        static System::TimeSpan set_RenewOnCallTime(System::TimeSpan value);
        static System::TimeSpan get_SponsorshipTimeout();
        static System::TimeSpan set_SponsorshipTimeout(System::TimeSpan value);
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    struct MANAGED_API ArgInfo : public virtual System::Object{
        cli::array<int32_t>* _paramMap;
        int32_t _inoutArgCount;
        System::Reflection::MethodBase* _method;
        
        void constructor(System::Reflection::MethodBase* method, ArgInfoType type);
        int32_t GetInOutArgIndex(int32_t inoutArgNum);
        virtual System::String* GetInOutArgName_2fa2ff0ffc15d79f(int32_t index);
        int32_t GetInOutArgCount();
        cli::array<System::Object*>* GetInOutArgs(cli::array<System::Object*>* args);
        
    };
    
    
    struct MANAGED_API AsyncResult : public virtual System::Object, public virtual System::IAsyncResult, public virtual IMessageSink{
        System::Object* async_state;
        System::Threading::WaitHandle* handle;
        System::Object* async_delegate;
        void* data;
        System::Object* object_data;
        bool sync_completed;
        bool completed;
        bool endinvoke_called;
        System::Object* async_callback;
        System::Threading::ExecutionContext* current;
        System::Threading::ExecutionContext* original;
        int64_t add_time;
        MonoMethodMessage* call_message;
        IMessageCtrl* message_ctrl;
        IMessage* reply_message;
        
        void constructor();
        void constructor(System::Threading::WaitCallback* cb, System::Object* state, bool capture_context);
        virtual IMessageCtrl* AsyncProcessMessage_a01f2a1b514d028d(IMessage* msg, IMessageSink* replySink);
        virtual IMessage* GetReplyMessage_b937f2fda6203181();
        virtual void SetMessageCtrl_499f519e6c83af7c(IMessageCtrl* mc);
        void SetCompletedSynchronously(bool completed);
        IMessage* EndInvoke();
        virtual IMessage* SyncProcessMessage_3a1c0f460fa2243a(IMessage* msg);
        virtual System::Object* get_AsyncState_aad5ef5e6cedee67();
        virtual System::Threading::WaitHandle* get_AsyncWaitHandle_f4b3f8abdd4ea96a();
        virtual bool get_CompletedSynchronously_86fab18081573bcb();
        virtual bool get_IsCompleted_6b14984a80e30c47();
        bool get_EndInvokeCalled();
        bool set_EndInvokeCalled(bool value);
        virtual System::Object* get_AsyncDelegate_eba6a70b3de54142();
        IMessageSink* get_NextSink();
        MonoMethodMessage* get_CallMessage();
        MonoMethodMessage* set_CallMessage(MonoMethodMessage* value);
        
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual System::Object* get_AsyncState_edfadcd905632437() override;
        virtual System::Threading::WaitHandle* get_AsyncWaitHandle_7620505c49d113f3() override;
        virtual bool get_CompletedSynchronously_2176ca6518f7b5dc() override;
        virtual bool get_IsCompleted_908b07d70649b7ff() override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API CADArgHolder : public virtual System::Object{
        int32_t index;
        
        void constructor(int32_t i);
        
    };
    
    
    struct MANAGED_API CADObjRef : public virtual System::Object{
        System::Runtime::Remoting::ObjRef* objref;
        int32_t SourceDomain;
        
        void constructor(System::Runtime::Remoting::ObjRef* o, int32_t sourceDomain);
        System::String* get_TypeName();
        System::String* get_URI();
        
    };
    
    
    struct MANAGED_API CADMethodCallMessage : public virtual CADMessageBase{
        System::String* _uri;
        System::RuntimeMethodHandle MethodHandle;
        System::String* FullTypeName;
        
        void constructor(IMethodCallMessage* callMsg);
        static CADMethodCallMessage* Create(IMessage* callMsg);
        System::Collections::ArrayList* GetArguments();
        cli::array<System::Object*>* GetArgs(System::Collections::ArrayList* args);
        static cli::array<System::Type*>* GetSignature(System::Reflection::MethodBase* methodBase, bool load);
        System::Reflection::MethodBase* GetMethod();
        System::String* get_Uri();
        int32_t get_PropertiesCount();
        
    };
    
    
    struct MANAGED_API CADMethodReturnMessage : public virtual CADMessageBase{
        System::Object* _returnValue;
        CADArgHolder* _exception;
        
        void constructor(IMethodReturnMessage* retMsg);
        static CADMethodReturnMessage* Create(IMessage* callMsg);
        System::Collections::ArrayList* GetArguments();
        cli::array<System::Object*>* GetArgs(System::Collections::ArrayList* args);
        System::Object* GetReturnValue(System::Collections::ArrayList* args);
        System::Exception* GetException(System::Collections::ArrayList* args);
        int32_t get_PropertiesCount();
        
    };
    
    
    struct MANAGED_API CallContext : public virtual System::Object{
        static cli::array<Header*>* Headers;
        static System::Collections::Hashtable* datastore;
        static System::Object* hostContext;
        
        void constructor();
        static void FreeNamedDataSlot(System::String* name);
        static System::Object* GetData(System::String* name);
        static void SetData(System::String* name, System::Object* data);
        static System::Object* LogicalGetData(System::String* name);
        static void LogicalSetData(System::String* name, System::Object* data);
        static cli::array<Header*>* GetHeaders();
        static void SetHeaders(cli::array<Header*>* headers);
        static LogicalCallContext* CreateLogicalCallContext(bool createEmpty);
        static System::Object* SetCurrentCallContext(LogicalCallContext* ctx);
        static void UpdateCurrentCallContext(LogicalCallContext* ctx);
        static void RestoreCallContext(System::Object* oldContext);
        static System::Object* get_HostContext();
        static System::Object* set_HostContext(System::Object* value);
        static System::Collections::Hashtable* get_Datastore();
        
    };
    
    
    struct MANAGED_API ClientContextTerminatorSink : public virtual System::Object, public virtual IMessageSink{
        System::Runtime::Remoting::Contexts::Context2* _context;
        
        void constructor(System::Runtime::Remoting::Contexts::Context2* ctx);
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ClientContextReplySink : public virtual System::Object, public virtual IMessageSink{
        IMessageSink* _replySink;
        System::Runtime::Remoting::Contexts::Context2* _context;
        
        void constructor(System::Runtime::Remoting::Contexts::Context2* ctx, IMessageSink* replySink);
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ConstructionCall : public virtual MethodCall, public virtual System::Runtime::Remoting::Activation::IConstructionCallMessage{
        System::Runtime::Remoting::Activation::IActivator* _activator;
        cli::array<System::Object*>* _activationAttributes;
        System::Collections::IList* _contextProperties;
        System::Type* _activationType;
        System::String* _activationTypeName;
        bool _isContextOk;
        System::Runtime::Remoting::Proxies::RemotingProxy* _sourceProxy;
        
        void constructor(IMessage* m);
        void constructor(System::Type* type);
        void constructor(cli::array<Header*>* headers);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void InitDictionary_dbfe50419d0adffb() override;
        void SetActivationAttributes(cli::array<System::Object*>* attributes);
        virtual void InitMethodProperty_cd5bad7ed64a6b8e(System::String* key, System::Object* value) override;
        virtual void GetObjectData_972cb159043c8ab0(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        bool get_IsContextOk();
        bool set_IsContextOk(bool value);
        System::Type* get_ActivationType();
        System::String* get_ActivationTypeName();
        System::Runtime::Remoting::Activation::IActivator* get_Activator();
        System::Runtime::Remoting::Activation::IActivator* set_Activator(System::Runtime::Remoting::Activation::IActivator* value);
        cli::array<System::Object*>* get_CallSiteActivationAttributes();
        System::Collections::IList* get_ContextProperties();
        virtual System::Collections::IDictionary* get_Properties_c453f36b3f043bdc() override;
        System::Runtime::Remoting::Proxies::RemotingProxy* get_SourceProxy();
        System::Runtime::Remoting::Proxies::RemotingProxy* set_SourceProxy(System::Runtime::Remoting::Proxies::RemotingProxy* value);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Type* get_ActivationType_84a662e1d53c6b9a() override;
        virtual System::String* get_ActivationTypeName_1af5753a691619eb() override;
        virtual System::Runtime::Remoting::Activation::IActivator* get_Activator_e0d47498ed580034() override;
        virtual System::Runtime::Remoting::Activation::IActivator* set_Activator_f69a6bba41c9ebf3(System::Runtime::Remoting::Activation::IActivator* value) override;
        virtual cli::array<System::Object*>* get_CallSiteActivationAttributes_87621fd6aed1643f() override;
        virtual System::Collections::IList* get_ContextProperties_6d65d78ae4ed4d3() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t argNum) override;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t index) override;
        virtual int32_t get_InArgCount_cb2e74281a598234() override;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() override;
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
    };
    
    
    struct MANAGED_API ConstructionCallDictionary : public virtual MethodDictionary{
        static cli::array<System::String*>* InternalKeys;
        
        ConstructionCallDictionary();
        void constructor(System::Runtime::Remoting::Activation::IConstructionCallMessage* message);
        static void static_constructor();
        virtual System::Object* GetMethodProperty_4070f877cd8723cd(System::String* key) override;
        virtual void SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) override;
        
    };
    
    
    struct MANAGED_API ConstructionResponse : public virtual MethodResponse, public virtual System::Runtime::Remoting::Activation::IConstructionReturnMessage{
        
        void constructor(cli::array<Header*>* h, IMethodCallMessage* mcm);
        void constructor(System::Object* resultObject, LogicalCallContext* callCtx, IMethodCallMessage* msg);
        void constructor(System::Exception* e, IMethodCallMessage* msg);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::Collections::IDictionary* get_Properties_42e9af5b3d4ade59() override;
        
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t argNum) override;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t index) override;
        virtual System::Exception* get_Exception_f355b7f547514947() override;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() override;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() override;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() override;
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
    };
    
    
    struct MANAGED_API EnvoyTerminatorSink : public virtual System::Object, public virtual IMessageSink{
        static EnvoyTerminatorSink* Instance;
        
        EnvoyTerminatorSink();
        void constructor();
        static void static_constructor();
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ErrorMessage : public virtual System::Object, public virtual IMethodCallMessage, public virtual IMethodMessage, public virtual IMessage{
        System::String* _uri;
        
        void constructor();
        System::Object* GetArg(int32_t arg_num);
        System::String* GetArgName(int32_t arg_num);
        System::String* GetInArgName(int32_t index);
        System::Object* GetInArg(int32_t argNum);
        int32_t get_ArgCount();
        cli::array<System::Object*>* get_Args();
        bool get_HasVarArgs();
        System::Reflection::MethodBase* get_MethodBase();
        System::String* get_MethodName();
        System::Object* get_MethodSignature();
        virtual System::Collections::IDictionary* get_Properties_e96fc16c3b175f50();
        System::String* get_TypeName();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        int32_t get_InArgCount();
        cli::array<System::Object*>* get_InArgs();
        LogicalCallContext* get_LogicalCallContext();
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t arg_num) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t arg_num) override;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t index) override;
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t argNum) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
        virtual int32_t get_InArgCount_cb2e74281a598234() override;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
    };
    
    
    struct MANAGED_API Header : public virtual System::Object{
        System::String* HeaderNamespace;
        bool MustUnderstand;
        System::String* Name2;
        System::Object* Value;
        
        void constructor(System::String* _Name, System::Object* _Value);
        void constructor(System::String* _Name, System::Object* _Value, bool _MustUnderstand);
        void constructor(System::String* _Name, System::Object* _Value, bool _MustUnderstand, System::String* _HeaderNamespace);
        
    };
    
    
    struct MANAGED_API LogicalCallContext : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::ICloneable{
        System::Collections::Hashtable* _data;
        CallContextRemotingData* _remotingData;
        
        void constructor();
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void FreeNamedDataSlot(System::String* name);
        System::Object* GetData(System::String* name);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void SetData(System::String* name, System::Object* data);
        System::Object* Clone();
        bool get_HasInfo();
        System::Collections::Hashtable* get_Datastore();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API CallContextRemotingData : public virtual System::Object, public virtual System::ICloneable{
        System::String* _logicalCallID;
        
        void constructor();
        System::Object* Clone();
        System::String* get_LogicalCallID();
        System::String* set_LogicalCallID(System::String* value);
        
        virtual System::Object* Clone_d5efb96d327809c8() override;
    };
    
    
    struct MANAGED_API DictionaryWrapper : public virtual MethodCallDictionary{
        System::Collections::IDictionary* _wrappedDictionary;
        static cli::array<System::String*>* _keys;
        
        DictionaryWrapper();
        void constructor(IMethodMessage* message, System::Collections::IDictionary* wrappedDictionary);
        static void static_constructor();
        virtual System::Collections::IDictionary* AllocInternalProperties_ac55c475ad3bbe92() override;
        virtual void SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) override;
        virtual System::Object* GetMethodProperty_4070f877cd8723cd(System::String* key) override;
        
    };
    
    
    struct MANAGED_API MethodCallMessageWrapper : public virtual InternalMessageWrapper, public virtual IMethodCallMessage, public virtual IMethodMessage, public virtual IMessage{
        cli::array<System::Object*>* _args;
        ArgInfo* _inArgInfo;
        DictionaryWrapper* _properties;
        
        void constructor(IMethodCallMessage* msg);
        virtual System::Object* GetArg_1f9d01a7e6a18550(int32_t argNum);
        virtual System::String* GetArgName_bc718af36a33c0c1(int32_t index);
        virtual System::Object* GetInArg_5630004eabcafb5b(int32_t argNum);
        virtual System::String* GetInArgName_c4a055b5e097804f(int32_t index);
        virtual int32_t get_ArgCount_bdf2e5e89f94e4c();
        virtual cli::array<System::Object*>* get_Args_2ff00dd9adf0aac();
        virtual cli::array<System::Object*>* set_Args_fcf69d08e0afb2c9(cli::array<System::Object*>* value);
        virtual bool get_HasVarArgs_d495f2ebd8875cd6();
        virtual int32_t get_InArgCount_e2a9ce7753c03b43();
        virtual cli::array<System::Object*>* get_InArgs_5f027e6743eedd22();
        virtual LogicalCallContext* get_LogicalCallContext_9cf8fb9aa5344653();
        virtual System::Reflection::MethodBase* get_MethodBase_53947153fd1c478();
        virtual System::String* get_MethodName_afa3ecbf1d1fd47e();
        virtual System::Object* get_MethodSignature_eb88f90a35806f25();
        virtual System::Collections::IDictionary* get_Properties_238987309ecc3b13();
        virtual System::String* get_TypeName_f0575dd68a53967();
        virtual System::String* get_Uri_5eaefe698d6d5cd6();
        virtual System::String* set_Uri_c9ab632d286b11d1(System::String* value);
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t argNum) override;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t index) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual int32_t get_InArgCount_cb2e74281a598234() override;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
    };
    
    
    struct MANAGED_API DictionaryEnumerator : public virtual System::Object, public virtual System::Collections::IDictionaryEnumerator, public virtual System::Collections::IEnumerator{
        MethodDictionary* _methodDictionary;
        System::Collections::IDictionaryEnumerator* _hashtableEnum;
        int32_t _posMethod;
        
        void constructor(MethodDictionary* methodDictionary);
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        System::Collections::DictionaryEntry get_Entry();
        System::Object* get_Key();
        System::Object* get_Value();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
        virtual System::Collections::DictionaryEntry get_Entry_7d036eca1ef8d5f4() override;
        virtual System::Object* get_Key_ed7954531cb20258() override;
        virtual System::Object* get_Value_889e0f410f0d67ef() override;
    };
    
    
    struct MANAGED_API DictionaryWrapper2 : public virtual MethodReturnDictionary{
        System::Collections::IDictionary* _wrappedDictionary;
        static cli::array<System::String*>* _keys;
        
        DictionaryWrapper2();
        void constructor(IMethodReturnMessage* message, System::Collections::IDictionary* wrappedDictionary);
        static void static_constructor();
        virtual System::Collections::IDictionary* AllocInternalProperties_ac55c475ad3bbe92() override;
        virtual void SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) override;
        virtual System::Object* GetMethodProperty_4070f877cd8723cd(System::String* key) override;
        
    };
    
    
    struct MANAGED_API MethodReturnMessageWrapper : public virtual InternalMessageWrapper, public virtual IMethodReturnMessage, public virtual IMethodMessage, public virtual IMessage{
        cli::array<System::Object*>* _args;
        ArgInfo* _outArgInfo;
        DictionaryWrapper2* _properties;
        System::Exception* _exception;
        System::Object* _return;
        
        void constructor(IMethodReturnMessage* msg);
        virtual System::Object* GetArg_99407870c0a11bde(int32_t argNum);
        virtual System::String* GetArgName_e73597c4d5d9642b(int32_t index);
        virtual System::Object* GetOutArg_574514e67d145e3b(int32_t argNum);
        virtual System::String* GetOutArgName_d257e979435a25c2(int32_t index);
        virtual int32_t get_ArgCount_a9845951d951911d();
        virtual cli::array<System::Object*>* get_Args_32591b6b0d32b695();
        virtual cli::array<System::Object*>* set_Args_828fd48351c501cb(cli::array<System::Object*>* value);
        virtual System::Exception* get_Exception_532b585a2ea6623e();
        virtual System::Exception* set_Exception_b8feb59941b7766b(System::Exception* value);
        virtual bool get_HasVarArgs_b72c87182c49e83d();
        virtual LogicalCallContext* get_LogicalCallContext_ea80d780b51c3cd9();
        virtual System::Reflection::MethodBase* get_MethodBase_61a9a4b8069a5514();
        virtual System::String* get_MethodName_f2186ba17c86255e();
        virtual System::Object* get_MethodSignature_5c18eb338cb7d4b0();
        virtual int32_t get_OutArgCount_e027a0d935f171bf();
        virtual cli::array<System::Object*>* get_OutArgs_fa7599485c150173();
        virtual System::Collections::IDictionary* get_Properties_892057f5a1f5b6d4();
        virtual System::Object* get_ReturnValue_90df0be5d7725988();
        virtual System::Object* set_ReturnValue_b3b84d412385e777(System::Object* value);
        virtual System::String* get_TypeName_f3750a15f7d822c3();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t argNum) override;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t index) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual System::Exception* get_Exception_f355b7f547514947() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() override;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
    };
    
    
    struct MANAGED_API MonoMethodMessage : public virtual System::Object, public virtual IMethodCallMessage, public virtual IMethodReturnMessage, public virtual IInternalMessage, public virtual IMethodMessage, public virtual IMessage{
        System::Reflection::MonoMethod* method;
        cli::array<System::Object*>* args;
        cli::array<System::String*>* names;
        cli::array<unsigned char>* arg_types;
        LogicalCallContext* ctx;
        System::Object* rval;
        System::Exception* exc;
        AsyncResult* asyncResult;
        CallType call_type;
        System::String* uri;
        MethodCallDictionary* properties;
        cli::array<System::Type*>* methodSignature;
        System::Runtime::Remoting::Identity* identity;
        
        void constructor(System::Reflection::MethodBase* method, cli::array<System::Object*>* out_args);
        void constructor(System::Type* type, System::String* method_name, cli::array<System::Object*>* in_args);
        void InitMessage(System::Reflection::MonoMethod* method, cli::array<System::Object*>* out_args);
        System::Object* GetArg(int32_t arg_num);
        System::String* GetArgName(int32_t arg_num);
        System::Object* GetInArg(int32_t arg_num);
        System::String* GetInArgName(int32_t arg_num);
        System::Object* GetOutArg(int32_t arg_num);
        System::String* GetOutArgName(int32_t arg_num);
        bool NeedsOutProcessing(int32_t outCount);
        System::Collections::IDictionary* get_Properties();
        int32_t get_ArgCount();
        cli::array<System::Object*>* get_Args();
        bool get_HasVarArgs();
        LogicalCallContext* get_LogicalCallContext();
        LogicalCallContext* set_LogicalCallContext(LogicalCallContext* value);
        System::Reflection::MethodBase* get_MethodBase();
        System::String* get_MethodName();
        System::Object* get_MethodSignature();
        System::String* get_TypeName();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        int32_t get_InArgCount();
        cli::array<System::Object*>* get_InArgs();
        System::Exception* get_Exception();
        int32_t get_OutArgCount();
        cli::array<System::Object*>* get_OutArgs();
        System::Object* get_ReturnValue();
        System::Runtime::Remoting::Identity* get_TargetIdentity();
        System::Runtime::Remoting::Identity* set_TargetIdentity(System::Runtime::Remoting::Identity* value);
        bool get_IsAsync();
        AsyncResult* get_AsyncResult();
        CallType get_CallType();
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t arg_num) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t arg_num) override;
        virtual System::Object* GetInArg_1fc884e43e06ea98(int32_t arg_num) override;
        virtual System::String* GetInArgName_602a2e2cf6d07514(int32_t arg_num) override;
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t arg_num) override;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t arg_num) override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
        virtual System::String* get_Uri_39a650ec2a69ead0() override;
        virtual System::String* set_Uri_96dc10f55685ba70(System::String* value) override;
        virtual int32_t get_InArgCount_cb2e74281a598234() override;
        virtual cli::array<System::Object*>* get_InArgs_f63ad3f1c81c6020() override;
        virtual System::Exception* get_Exception_f355b7f547514947() override;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() override;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() override;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() override;
        virtual System::Runtime::Remoting::Identity* get_TargetIdentity_462ebd8041156d75() override;
        virtual System::Runtime::Remoting::Identity* set_TargetIdentity_8fbc4984471e7e77(System::Runtime::Remoting::Identity* value) override;
    };
    
    
    struct MANAGED_API OneWayAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API RemotingSurrogate : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializationSurrogate{
        
        void constructor();
        virtual void GetObjectData_ea2423204af32b20(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc);
        virtual System::Object* SetObjectData_e0569319b2d26b8b(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector);
        
        virtual void GetObjectData_fb9d539912329654(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) override;
        virtual System::Object* SetObjectData_3af7d8e77dbcc1d2(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector) override;
    };
    
    
    struct MANAGED_API ObjRefSurrogate : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializationSurrogate{
        
        void constructor();
        virtual void GetObjectData_df250ced87a9c363(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc);
        virtual System::Object* SetObjectData_bce92449b9ba77d2(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector);
        
        virtual void GetObjectData_fb9d539912329654(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) override;
        virtual System::Object* SetObjectData_3af7d8e77dbcc1d2(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector) override;
    };
    
    
    struct MANAGED_API RemotingSurrogateSelector : public virtual System::Object, public virtual System::Runtime::Serialization::ISurrogateSelector{
        static System::Type* s_cachedTypeObjRef;
        static ObjRefSurrogate* _objRefSurrogate;
        static RemotingSurrogate* _objRemotingSurrogate;
        System::Object* _rootObj;
        MessageSurrogateFilter* _filter;
        System::Runtime::Serialization::ISurrogateSelector* _next;
        
        RemotingSurrogateSelector();
        void constructor();
        static void static_constructor();
        virtual void ChainSelector_31362a36d95c626c(System::Runtime::Serialization::ISurrogateSelector* selector);
        virtual System::Runtime::Serialization::ISurrogateSelector* GetNextSelector_857a1e27cf1e9a83();
        System::Object* GetRootObject();
        virtual System::Runtime::Serialization::ISerializationSurrogate* GetSurrogate_43b010380df30464(System::Type* type, System::Runtime::Serialization::StreamingContext context, System::Runtime::Serialization::ISurrogateSelector* ssout);
        void SetRootObject(System::Object* obj);
        virtual void UseSoapFormat_6ab660c147135491();
        MessageSurrogateFilter* get_Filter();
        MessageSurrogateFilter* set_Filter(MessageSurrogateFilter* value);
        
        virtual void ChainSelector_b4bf6e9847cd4bb0(System::Runtime::Serialization::ISurrogateSelector* selector) override;
        virtual System::Runtime::Serialization::ISurrogateSelector* GetNextSelector_f0732f882be06ccb() override;
        virtual System::Runtime::Serialization::ISerializationSurrogate* GetSurrogate_9d3ffd4061f81ca8(System::Type* type, System::Runtime::Serialization::StreamingContext context, System::Runtime::Serialization::ISurrogateSelector* ssout) override;
    };
    
    
    struct MANAGED_API ReturnMessage : public virtual System::Object, public virtual IMethodReturnMessage, public virtual IMethodMessage, public virtual IMessage, public virtual IInternalMessage{
        cli::array<System::Object*>* _outArgs;
        cli::array<System::Object*>* _args;
        LogicalCallContext* _callCtx;
        System::Object* _returnValue;
        System::String* _uri;
        System::Exception* _exception;
        System::Reflection::MethodBase* _methodBase;
        System::String* _methodName;
        cli::array<System::Type*>* _methodSignature;
        System::String* _typeName;
        MethodReturnDictionary* _properties;
        System::Runtime::Remoting::Identity* _targetIdentity;
        ArgInfo* _inArgInfo;
        
        void constructor(System::Object* ret, cli::array<System::Object*>* outArgs, int32_t outArgsCount, LogicalCallContext* callCtx, IMethodCallMessage* mcm);
        void constructor(System::Exception* e, IMethodCallMessage* mcm);
        System::Object* GetArg(int32_t argNum);
        System::String* GetArgName(int32_t index);
        System::Object* GetOutArg(int32_t argNum);
        System::String* GetOutArgName(int32_t index);
        int32_t get_ArgCount();
        cli::array<System::Object*>* get_Args();
        bool get_HasVarArgs();
        LogicalCallContext* get_LogicalCallContext();
        System::Reflection::MethodBase* get_MethodBase();
        System::String* get_MethodName();
        System::Object* get_MethodSignature();
        virtual System::Collections::IDictionary* get_Properties_74f84dd6944b322b();
        System::String* get_TypeName();
        System::String* get_Uri();
        System::String* set_Uri(System::String* value);
        System::String* get_Uri2();
        System::String* set_Uri2(System::String* value);
        System::Exception* get_Exception();
        int32_t get_OutArgCount();
        cli::array<System::Object*>* get_OutArgs();
        virtual System::Object* get_ReturnValue_248109c7ac83a397();
        System::Runtime::Remoting::Identity* get_TargetIdentity();
        System::Runtime::Remoting::Identity* set_TargetIdentity(System::Runtime::Remoting::Identity* value);
        
        virtual System::Object* GetArg_b08c2cf8a17399d(int32_t argNum) override;
        virtual System::String* GetArgName_fe0b5c1914782402(int32_t index) override;
        virtual System::Object* GetOutArg_abbed15c9b7ee2b5(int32_t argNum) override;
        virtual System::String* GetOutArgName_e9e9f1a7b6d2a002(int32_t index) override;
        virtual int32_t get_ArgCount_c4a9c359c4fe1d8e() override;
        virtual cli::array<System::Object*>* get_Args_1b1b87289e375adf() override;
        virtual bool get_HasVarArgs_554adf133c756bdc() override;
        virtual LogicalCallContext* get_LogicalCallContext_a19aeadfaffa89b7() override;
        virtual System::Reflection::MethodBase* get_MethodBase_be82dccd2d92b9f6() override;
        virtual System::String* get_MethodName_f32f67fc5b4be3b1() override;
        virtual System::Object* get_MethodSignature_a58bc01e7b3e43ec() override;
        virtual System::Collections::IDictionary* get_Properties_d88088440249f163() override;
        virtual System::String* get_TypeName_2c092df7327c2af5() override;
        virtual System::String* get_Uri_a772cc17d83f8740() override;
        virtual System::String* get_Uri_39a650ec2a69ead0() override;
        virtual System::String* set_Uri_96dc10f55685ba70(System::String* value) override;
        virtual System::Exception* get_Exception_f355b7f547514947() override;
        virtual int32_t get_OutArgCount_9615a7b9f4b303a6() override;
        virtual cli::array<System::Object*>* get_OutArgs_4ed1102750ba8a44() override;
        virtual System::Object* get_ReturnValue_5e8804a33ce4fa71() override;
        virtual System::Runtime::Remoting::Identity* get_TargetIdentity_462ebd8041156d75() override;
        virtual System::Runtime::Remoting::Identity* set_TargetIdentity_8fbc4984471e7e77(System::Runtime::Remoting::Identity* value) override;
    };
    
    
    struct MANAGED_API ServerContextTerminatorSink : public virtual System::Object, public virtual IMessageSink{
        
        void constructor();
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ServerObjectTerminatorSink : public virtual System::Object, public virtual IMessageSink{
        IMessageSink* _nextSink;
        
        void constructor(IMessageSink* nextSink);
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API ServerObjectReplySink : public virtual System::Object, public virtual IMessageSink{
        IMessageSink* _replySink;
        System::Runtime::Remoting::ServerIdentity* _identity;
        
        void constructor(System::Runtime::Remoting::ServerIdentity* identity, IMessageSink* replySink);
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
    
    struct MANAGED_API StackBuilderSink : public virtual System::Object, public virtual IMessageSink{
        System::MarshalByRefObject* _target;
        System::Runtime::Remoting::Proxies::RealProxy* _rp;
        
        void constructor(System::MarshalByRefObject* obj, bool forceInternalExecute);
        IMessage* SyncProcessMessage(IMessage* msg);
        IMessageCtrl* AsyncProcessMessage(IMessage* msg, IMessageSink* replySink);
        void ExecuteAsyncMessage(System::Object* ob);
        void CheckParameters(IMessage* msg);
        void _AsyncProcessMessage_m__12(System::Object* data);
        IMessageSink* get_NextSink();
        
        virtual IMessage* SyncProcessMessage_d4949581639d4872(IMessage* msg) override;
        virtual IMessageCtrl* AsyncProcessMessage_3d553dfedc95e36f(IMessage* msg, IMessageSink* replySink) override;
        virtual IMessageSink* get_NextSink_e70f5bac1f0d1245() override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    struct MANAGED_API SoapFieldAttribute : public virtual SoapAttribute{
        int32_t _order;
        System::String* _elementName;
        bool _isElement;
        
        void constructor();
        bool IsInteropXmlElement();
        virtual void SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) override;
        int32_t get_Order();
        int32_t set_Order(int32_t value);
        System::String* get_XmlElementName();
        System::String* set_XmlElementName(System::String* value);
        
    };
    
    
    struct MANAGED_API SoapMethodAttribute : public virtual SoapAttribute{
        System::String* _responseElement;
        System::String* _responseNamespace;
        System::String* _returnElement;
        System::String* _soapAction;
        bool _useAttribute2;
        System::String* _namespace;
        
        void constructor();
        virtual void SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) override;
        System::String* get_ResponseXmlElementName();
        System::String* set_ResponseXmlElementName(System::String* value);
        System::String* get_ResponseXmlNamespace();
        System::String* set_ResponseXmlNamespace(System::String* value);
        System::String* get_ReturnXmlElementName();
        System::String* set_ReturnXmlElementName(System::String* value);
        System::String* get_SoapAction();
        System::String* set_SoapAction(System::String* value);
        virtual bool get_UseAttribute_8c48997d109215be() override;
        virtual bool set_UseAttribute_58a33ce933bb0a6a(bool value) override;
        virtual System::String* get_XmlNamespace_85ad94434edc23f3() override;
        virtual System::String* set_XmlNamespace_4b7c52cb770bdec0(System::String* value) override;
        
    };
    
    
    struct MANAGED_API SoapParameterAttribute : public virtual SoapAttribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SoapTypeAttribute : public virtual SoapAttribute{
        SoapOption _soapOption;
        bool _useAttribute2;
        System::String* _xmlElementName;
        XmlFieldOrderOption _xmlFieldOrder;
        System::String* _xmlNamespace;
        System::String* _xmlTypeName;
        System::String* _xmlTypeNamespace;
        bool _isType;
        bool _isElement;
        
        void constructor();
        virtual void SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) override;
        SoapOption get_SoapOptions();
        SoapOption set_SoapOptions(SoapOption value);
        virtual bool get_UseAttribute_8c48997d109215be() override;
        virtual bool set_UseAttribute_58a33ce933bb0a6a(bool value) override;
        System::String* get_XmlElementName();
        System::String* set_XmlElementName(System::String* value);
        XmlFieldOrderOption get_XmlFieldOrder();
        XmlFieldOrderOption set_XmlFieldOrder(XmlFieldOrderOption value);
        virtual System::String* get_XmlNamespace_85ad94434edc23f3() override;
        virtual System::String* set_XmlNamespace_4b7c52cb770bdec0(System::String* value) override;
        System::String* get_XmlTypeName();
        System::String* set_XmlTypeName(System::String* value);
        System::String* get_XmlTypeNamespace();
        System::String* set_XmlTypeNamespace(System::String* value);
        bool get_IsInteropXmlElement();
        bool get_IsInteropXmlType();
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    struct MANAGED_API SoapAnyUri : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapAnyUri* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapBase64Binary : public virtual System::Object, public virtual ISoapXsd{
        cli::array<unsigned char>* _value;
        
        void constructor();
        void constructor(cli::array<unsigned char>* value);
        System::String* GetXsdType();
        static SoapBase64Binary* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<unsigned char>* get_Value();
        cli::array<unsigned char>* set_Value(cli::array<unsigned char>* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapDate : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        int32_t _sign;
        System::DateTime _value;
        
        SoapDate();
        void constructor();
        void constructor(System::DateTime value);
        void constructor(System::DateTime value, int32_t sign);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapDate* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t get_Sign();
        int32_t set_Sign(int32_t value);
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapDateTime : public virtual System::Object{
        static cli::array<System::String*>* _datetimeFormats;
        
        SoapDateTime();
        void constructor();
        static void static_constructor();
        static System::DateTime Parse(System::String* value);
        static System::String* ToString2(System::DateTime value);
        static System::String* get_XsdType();
        
    };
    
    
    struct MANAGED_API SoapDay : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        System::DateTime _value;
        
        SoapDay();
        void constructor();
        void constructor(System::DateTime value);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapDay* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapDuration : public virtual System::Object{
        
        void constructor();
        static System::TimeSpan Parse(System::String* value);
        static System::String* ToString2(System::TimeSpan timeSpan);
        static System::String* get_XsdType();
        
    };
    
    
    struct MANAGED_API SoapEntities : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapEntities* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapEntity : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapEntity* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapHelper : public virtual System::Object{
        
        void constructor();
        static System::Exception* GetException(ISoapXsd* type, System::String* msg);
        static System::String* Normalize(System::String* s);
        
    };
    
    
    struct MANAGED_API SoapHexBinary : public virtual System::Object, public virtual ISoapXsd{
        cli::array<unsigned char>* _value;
        System::Text::StringBuilder* sb;
        
        void constructor();
        void constructor(cli::array<unsigned char>* value);
        System::String* GetXsdType();
        static SoapHexBinary* Parse(System::String* value);
        static cli::array<unsigned char>* FromBinHexString(System::String* value);
        static unsigned char FromHex(char16_t hexDigit, System::String* value);
        static System::Exception* CreateInvalidValueException(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<unsigned char>* get_Value();
        cli::array<unsigned char>* set_Value(cli::array<unsigned char>* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapId : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapId* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapIdref : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapIdref* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapIdrefs : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapIdrefs* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapInteger : public virtual System::Object, public virtual ISoapXsd{
        System::Decimal _value;
        
        void constructor();
        void constructor(System::Decimal value);
        System::String* GetXsdType();
        static SoapInteger* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Decimal get_Value();
        System::Decimal set_Value(System::Decimal value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapLanguage : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapLanguage* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapMonth : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        System::DateTime _value;
        
        SoapMonth();
        void constructor();
        void constructor(System::DateTime value);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapMonth* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapMonthDay : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        System::DateTime _value;
        
        SoapMonthDay();
        void constructor();
        void constructor(System::DateTime value);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapMonthDay* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapName : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapName* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNcName : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapNcName* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNegativeInteger : public virtual System::Object, public virtual ISoapXsd{
        System::Decimal _value;
        
        void constructor();
        void constructor(System::Decimal value);
        System::String* GetXsdType();
        static SoapNegativeInteger* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Decimal get_Value();
        System::Decimal set_Value(System::Decimal value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNmtoken : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapNmtoken* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNmtokens : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapNmtokens* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNonNegativeInteger : public virtual System::Object, public virtual ISoapXsd{
        System::Decimal _value;
        
        void constructor();
        void constructor(System::Decimal value);
        System::String* GetXsdType();
        static SoapNonNegativeInteger* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Decimal get_Value();
        System::Decimal set_Value(System::Decimal value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNonPositiveInteger : public virtual System::Object, public virtual ISoapXsd{
        System::Decimal _value;
        
        void constructor();
        void constructor(System::Decimal value);
        System::String* GetXsdType();
        static SoapNonPositiveInteger* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Decimal get_Value();
        System::Decimal set_Value(System::Decimal value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNormalizedString : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapNormalizedString* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapNotation : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapNotation* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapPositiveInteger : public virtual System::Object, public virtual ISoapXsd{
        System::Decimal _value;
        
        void constructor();
        void constructor(System::Decimal value);
        System::String* GetXsdType();
        static SoapPositiveInteger* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Decimal get_Value();
        System::Decimal set_Value(System::Decimal value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapQName : public virtual System::Object, public virtual ISoapXsd{
        System::String* _name;
        System::String* _key;
        System::String* _namespace;
        
        void constructor();
        void constructor(System::String* value);
        void constructor(System::String* key, System::String* name);
        void constructor(System::String* key, System::String* name, System::String* namespaceValue);
        System::String* GetXsdType();
        static SoapQName* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Key();
        System::String* set_Key(System::String* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::String* get_Namespace();
        System::String* set_Namespace(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapTime : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        System::DateTime _value;
        
        SoapTime();
        void constructor();
        void constructor(System::DateTime value);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapTime* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapToken : public virtual System::Object, public virtual ISoapXsd{
        System::String* _value;
        
        void constructor();
        void constructor(System::String* value);
        System::String* GetXsdType();
        static SoapToken* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* get_Value();
        System::String* set_Value(System::String* value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapYear : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        int32_t _sign;
        System::DateTime _value;
        
        SoapYear();
        void constructor();
        void constructor(System::DateTime value);
        void constructor(System::DateTime value, int32_t sign);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapYear* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t get_Sign();
        int32_t set_Sign(int32_t value);
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
    
    struct MANAGED_API SoapYearMonth : public virtual System::Object, public virtual ISoapXsd{
        static cli::array<System::String*>* _datetimeFormats;
        int32_t _sign;
        System::DateTime _value;
        
        SoapYearMonth();
        void constructor();
        void constructor(System::DateTime value);
        void constructor(System::DateTime value, int32_t sign);
        static void static_constructor();
        System::String* GetXsdType();
        static SoapYearMonth* Parse(System::String* value);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t get_Sign();
        int32_t set_Sign(int32_t value);
        System::DateTime get_Value();
        System::DateTime set_Value(System::DateTime value);
        static System::String* get_XsdType();
        
        virtual System::String* GetXsdType_206f3057f651893() override;
    };
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    struct MANAGED_API ProxyAttribute : public virtual System::Attribute, public virtual System::Runtime::Remoting::Contexts::IContextAttribute{
        
        void constructor();
        virtual System::MarshalByRefObject* CreateInstance_6e6df9b8c871915d(System::Type* serverType);
        virtual RealProxy* CreateProxy_c28b5b5fd853f316(System::Runtime::Remoting::ObjRef* objRef, System::Type* serverType, System::Object* serverObject, System::Runtime::Remoting::Contexts::Context2* serverContext);
        void GetPropertiesForNewContext(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg);
        bool IsContextOK(System::Runtime::Remoting::Contexts::Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg);
        
        virtual void GetPropertiesForNewContext_98ae344cb00933c3(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) override;
        virtual bool IsContextOK_c0cd4400710cc315(System::Runtime::Remoting::Contexts::Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) override;
    };
    
    
    struct MANAGED_API TransparentProxy : public virtual System::Object{
        RealProxy* _rp;
        void* _class;
        bool _custom_type_info;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API RemotingProxy : public virtual RealProxy, public virtual System::Runtime::Remoting::IRemotingTypeInfo{
        static System::Reflection::MethodInfo* _cache_GetTypeMethod;
        static System::Reflection::MethodInfo* _cache_GetHashCodeMethod;
        System::Runtime::Remoting::Messaging::IMessageSink* _sink;
        bool _hasEnvoySink;
        System::Runtime::Remoting::Messaging::ConstructionCall* _ctorCall;
        
        RemotingProxy();
        void constructor(System::Type* type, System::Runtime::Remoting::ClientIdentity* identity);
        void constructor(System::Type* type, System::String* activationUrl, cli::array<System::Object*>* activationAttributes);
        static void static_constructor();
        virtual void Finalize_5961447c233155c3();
        virtual System::Runtime::Remoting::Messaging::IMessage* Invoke_fb5532e107d73b9f(System::Runtime::Remoting::Messaging::IMessage* request) override;
        void AttachIdentity(System::Runtime::Remoting::Identity* identity);
        System::Runtime::Remoting::Messaging::IMessage* ActivateRemoteObject(System::Runtime::Remoting::Messaging::IMethodMessage* request);
        bool CanCastTo(System::Type* fromType, System::Object* o);
        System::String* get_TypeName();
        System::String* set_TypeName(System::String* value);
        
        virtual bool CanCastTo_7f8304fa142c3271(System::Type* fromType, System::Object* o) override;
        virtual System::String* get_TypeName_e368785a4c79e626() override;
        virtual System::String* set_TypeName_d3657f810af9c065(System::String* value) override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Services {
    
    struct MANAGED_API EnterpriseServicesHelper : public virtual System::Object{
        
        void constructor();
        static System::Runtime::Remoting::Activation::IConstructionReturnMessage* CreateConstructionReturnMessage(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg, System::MarshalByRefObject* retObj);
        static void SwitchWrappers(System::Runtime::Remoting::Proxies::RealProxy* oldcp, System::Runtime::Remoting::Proxies::RealProxy* newcp);
        static System::Object* WrapIUnknownWithComObject(void* punk);
        
    };
    
    
    struct MANAGED_API TrackingServices : public virtual System::Object{
        static System::Collections::ArrayList* _handlers;
        
        TrackingServices();
        void constructor();
        static void static_constructor();
        static void RegisterTrackingHandler(ITrackingHandler* handler);
        static void UnregisterTrackingHandler(ITrackingHandler* handler);
        static void NotifyMarshaledObject(System::Object* obj, System::Runtime::Remoting::ObjRef* or_);
        static void NotifyUnmarshaledObject(System::Object* obj, System::Runtime::Remoting::ObjRef* or_);
        static void NotifyDisconnectedObject(System::Object* obj);
        static cli::array<ITrackingHandler*>* get_RegisteredHandlers();
        
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    struct MANAGED_API Formatter : public virtual System::Object, public virtual IFormatter{
        ObjectIDGenerator* m_idGenerator;
        System::Collections::Queue* m_objectQueue;
        
        void constructor();
        virtual System::Object* Deserialize_e1bd73439c8677d8(System::IO::Stream* serializationStream) = 0;
        virtual System::Object* GetNext_81d698aac4ae997b(int64_t objID);
        virtual int64_t Schedule_be01b9fe5d92c7b7(System::Object* obj);
        virtual void Serialize_bd505a344058dedf(System::IO::Stream* serializationStream, System::Object* graph) = 0;
        virtual void WriteArray_1bfa17798f77fd9c(System::Object* obj, System::String* name, System::Type* memberType) = 0;
        virtual void WriteBoolean_8b6c70663f893129(bool val, System::String* name) = 0;
        virtual void WriteByte_4b9a22d4a686f571(unsigned char val, System::String* name) = 0;
        virtual void WriteChar_bba6a768980832f7(char16_t val, System::String* name) = 0;
        virtual void WriteDateTime_17de72084426fac(System::DateTime val, System::String* name) = 0;
        virtual void WriteDecimal_b94a57f1f1c07224(System::Decimal val, System::String* name) = 0;
        virtual void WriteDouble_ed0b92fefaf74a4b(double val, System::String* name) = 0;
        virtual void WriteInt16_bbda1b582ff1f1a2(int16_t val, System::String* name) = 0;
        virtual void WriteInt32_b0922922d320af13(int32_t val, System::String* name) = 0;
        virtual void WriteInt64_17dff47c9cceb888(int64_t val, System::String* name) = 0;
        virtual void WriteMember_2d75970901d619ca(System::String* memberName, System::Object* data);
        virtual void WriteObjectRef_5ae5a548d9d521fb(System::Object* obj, System::String* name, System::Type* memberType) = 0;
        virtual void WriteSByte_f744ada73c34c179(signed char val, System::String* name) = 0;
        virtual void WriteSingle_649ece78a46827d4(float val, System::String* name) = 0;
        virtual void WriteTimeSpan_88afeb0ca2568f78(System::TimeSpan val, System::String* name) = 0;
        virtual void WriteUInt16_c9e18a3ce4fd4110(uint16_t val, System::String* name) = 0;
        virtual void WriteUInt32_e7945c0ff469d4cb(uint32_t val, System::String* name) = 0;
        virtual void WriteUInt64_790b7f7e0cea0b37(uint64_t val, System::String* name) = 0;
        virtual void WriteValueType_f5265cc8ce35ac3e(System::Object* obj, System::String* name, System::Type* memberType) = 0;
        virtual SerializationBinder* get_Binder_b052343f946ec6d1() = 0;
        virtual SerializationBinder* set_Binder_af0ecbbfe2ab147(SerializationBinder* value) = 0;
        virtual StreamingContext get_Context_60e3c3df669fd39c() = 0;
        virtual StreamingContext set_Context_2074917beb6b2079(StreamingContext value) = 0;
        virtual ISurrogateSelector* get_SurrogateSelector_6cacd6acd3c44209() = 0;
        virtual ISurrogateSelector* set_SurrogateSelector_7c1d3951a9fbe8a3(ISurrogateSelector* value) = 0;
        
        virtual System::Object* Deserialize_19aeb6df512c35cb(System::IO::Stream* serializationStream) override;
        virtual void Serialize_617c75444546bb4e(System::IO::Stream* serializationStream, System::Object* graph) override;
        virtual SerializationBinder* get_Binder_215d8b515173b805() override;
        virtual SerializationBinder* set_Binder_175460eb6e1d50d5(SerializationBinder* value) override;
        virtual StreamingContext get_Context_dcb6fe59b19e8322() override;
        virtual StreamingContext set_Context_c7b1865dbad539b2(StreamingContext value) override;
        virtual ISurrogateSelector* get_SurrogateSelector_7fa2a47b11b30ba1() override;
        virtual ISurrogateSelector* set_SurrogateSelector_671af517157aed76(ISurrogateSelector* value) override;
    };
    
    
    struct MANAGED_API FormatterConverter : public virtual System::Object, public virtual IFormatterConverter{
        
        void constructor();
        System::Object* Convert2(System::Object* value, System::Type* type);
        System::Object* Convert3(System::Object* value, System::TypeCode typeCode);
        bool ToBoolean(System::Object* value);
        unsigned char ToByte(System::Object* value);
        char16_t ToChar(System::Object* value);
        System::DateTime ToDateTime(System::Object* value);
        System::Decimal ToDecimal(System::Object* value);
        double ToDouble(System::Object* value);
        int16_t ToInt16(System::Object* value);
        int32_t ToInt32(System::Object* value);
        int64_t ToInt64(System::Object* value);
        float ToSingle(System::Object* value);
        System::String* ToString2(System::Object* value);
        signed char ToSByte(System::Object* value);
        uint16_t ToUInt16(System::Object* value);
        uint32_t ToUInt32(System::Object* value);
        uint64_t ToUInt64(System::Object* value);
        
        virtual System::Object* Convert_f36db21f5899e115(System::Object* value, System::Type* type) override;
        virtual System::Object* Convert_fd69ce9fde44c7c9(System::Object* value, System::TypeCode typeCode) override;
        virtual bool ToBoolean_f78384850964024e(System::Object* value) override;
        virtual unsigned char ToByte_b08e1092296aced(System::Object* value) override;
        virtual char16_t ToChar_a90c87eb392f5c6b(System::Object* value) override;
        virtual System::DateTime ToDateTime_db18bc4d36988ffe(System::Object* value) override;
        virtual System::Decimal ToDecimal_91c52c2b2c34226d(System::Object* value) override;
        virtual double ToDouble_c26b3a04c5b5c6c3(System::Object* value) override;
        virtual int16_t ToInt16_4c5e98cc2a24107a(System::Object* value) override;
        virtual int32_t ToInt32_70f32a0ca9af7aec(System::Object* value) override;
        virtual int64_t ToInt64_f60f3bd2c6d66487(System::Object* value) override;
        virtual float ToSingle_85c5ebe23a43ef7b(System::Object* value) override;
        virtual System::String* ToString_60d64e3cd2e84237(System::Object* value) override;
        virtual signed char ToSByte_f5271c6436d3339a(System::Object* value) override;
        virtual uint16_t ToUInt16_66a4df810f9b2648(System::Object* value) override;
        virtual uint32_t ToUInt32_c19d156d0b0e4179(System::Object* value) override;
        virtual uint64_t ToUInt64_30dc7f167b1e482a(System::Object* value) override;
    };
    
    
    struct MANAGED_API FormatterServices : public virtual System::Object{
        static constexpr System::Reflection::BindingFlags fieldFlags = (System::Reflection::BindingFlags)54L;
        
        void constructor();
        static cli::array<System::Object*>* GetObjectData(System::Object* obj, cli::array<System::Reflection::MemberInfo*>* members);
        static cli::array<System::Reflection::MemberInfo*>* GetSerializableMembers(System::Type* type);
        static cli::array<System::Reflection::MemberInfo*>* GetSerializableMembers2(System::Type* type, StreamingContext context);
        static void GetFields(System::Type* reflectedType, System::Type* type, System::Collections::ArrayList* fields);
        static System::Type* GetTypeFromAssembly(System::Reflection::Assembly* assem, System::String* name);
        static System::Object* GetUninitializedObject(System::Type* type);
        static System::Object* PopulateObjectMembers(System::Object* obj, cli::array<System::Reflection::MemberInfo*>* members, cli::array<System::Object*>* data);
        static void CheckTypeSecurity(System::Type* t, Formatters::TypeFilterLevel securityLevel);
        static void CheckNotAssignable(System::Type* basetype, System::Type* type);
        static System::Object* GetSafeUninitializedObject(System::Type* type);
        static ISerializationSurrogate* GetSurrogateForCyclicalReference(ISerializationSurrogate* innerSurrogate);
        
    };
    
    
    struct MANAGED_API InstanceComparer : public virtual System::Object, public virtual System::Collections::IComparer, public virtual System::Collections::IHashCodeProvider{
        
        void constructor();
        int32_t Compare(System::Object* o1, System::Object* o2);
        int32_t GetHashCode2(System::Object* o);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* o1, System::Object* o2) override;
        virtual int32_t GetHashCode_5d8a358493971efd(System::Object* o) override;
    };
    
    
    struct MANAGED_API ObjectIDGenerator : public virtual System::Object{
        System::Collections::Hashtable* table;
        int64_t current;
        static InstanceComparer* comparer;
        
        ObjectIDGenerator();
        void constructor();
        static void static_constructor();
        virtual int64_t GetId_7b41c26f34516460(System::Object* obj, bool firstTime);
        virtual int64_t HasId_ceb8f0299f3fc05e(System::Object* obj, bool firstTime);
        int64_t get_NextId();
        
    };
    
    
    struct MANAGED_API ObjectManager : public virtual System::Object{
        ObjectRecord* _objectRecordChain;
        ObjectRecord* _lastObjectRecord;
        System::Collections::ArrayList* _deserializedRecords;
        System::Collections::ArrayList* _onDeserializedCallbackRecords;
        System::Collections::Hashtable* _objectRecords;
        bool _finalFixup;
        ISurrogateSelector* _selector;
        StreamingContext _context;
        int32_t _registeredObjectsCount;
        
        void constructor(ISurrogateSelector* selector, StreamingContext context);
        virtual void DoFixups_43f8ccf522b38380();
        ObjectRecord* GetObjectRecord(int64_t objectID);
        virtual System::Object* GetObject_105bbaf6c08155a0(int64_t objectID);
        virtual void RaiseDeserializationEvent_961dfed24077401c();
        void RaiseOnDeserializingEvent(System::Object* obj);
        void RaiseOnDeserializedEvent(System::Object* obj);
        void AddFixup(BaseFixupRecord* record);
        virtual void RecordArrayElementFixup_154a9d9baa6f6255(int64_t arrayToBeFixed, int32_t index, int64_t objectRequired);
        virtual void RecordArrayElementFixup_a03659609dc4b607(int64_t arrayToBeFixed, cli::array<int32_t>* indices, int64_t objectRequired);
        virtual void RecordDelayedFixup_ad8512da90dd9d43(int64_t objectToBeFixed, System::String* memberName, int64_t objectRequired);
        virtual void RecordFixup_59534355c6ae7b0a(int64_t objectToBeFixed, System::Reflection::MemberInfo* member, int64_t objectRequired);
        void RegisterObjectInternal(System::Object* obj, ObjectRecord* record);
        virtual void RegisterObject_2f369e6518224836(System::Object* obj, int64_t objectID);
        void RegisterObject2(System::Object* obj, int64_t objectID, SerializationInfo* info);
        void RegisterObject3(System::Object* obj, int64_t objectID, SerializationInfo* info, int64_t idOfContainingObj, System::Reflection::MemberInfo* member);
        void RegisterObject4(System::Object* obj, int64_t objectID, SerializationInfo* info, int64_t idOfContainingObj, System::Reflection::MemberInfo* member, cli::array<int32_t>* arrayIndex);
        
    };
    
    
    struct MANAGED_API ArrayFixupRecord : public virtual BaseFixupRecord{
        int32_t _index;
        
        void constructor(ObjectRecord* objectToBeFixed, int32_t index, ObjectRecord* objectRequired);
        virtual void FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) override;
        
    };
    
    
    struct MANAGED_API MultiArrayFixupRecord : public virtual BaseFixupRecord{
        cli::array<int32_t>* _indices;
        
        void constructor(ObjectRecord* objectToBeFixed, cli::array<int32_t>* indices, ObjectRecord* objectRequired);
        virtual void FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) override;
        
    };
    
    
    struct MANAGED_API FixupRecord : public virtual BaseFixupRecord{
        System::Reflection::MemberInfo* _member;
        
        void constructor(ObjectRecord* objectToBeFixed, System::Reflection::MemberInfo* member, ObjectRecord* objectRequired);
        virtual void FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) override;
        
    };
    
    
    struct MANAGED_API DelayedFixupRecord : public virtual BaseFixupRecord{
        System::String* _memberName;
        
        void constructor(ObjectRecord* objectToBeFixed, System::String* memberName, ObjectRecord* objectRequired);
        virtual void FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) override;
        
    };
    
    
    struct MANAGED_API ObjectRecord : public virtual System::Object{
        ObjectRecordStatus Status;
        System::Object* OriginalObject;
        System::Object* ObjectInstance;
        int64_t ObjectID;
        SerializationInfo* Info;
        int64_t IdOfContainingObj;
        ISerializationSurrogate* Surrogate;
        ISurrogateSelector* SurrogateSelector2;
        System::Reflection::MemberInfo* Member;
        cli::array<int32_t>* ArrayIndex;
        BaseFixupRecord* FixupChainAsContainer;
        BaseFixupRecord* FixupChainAsRequired;
        ObjectRecord* Next;
        
        void constructor();
        void SetMemberValue(ObjectManager* manager, System::Reflection::MemberInfo* member, System::Object* value);
        void SetArrayValue(ObjectManager* manager, System::Object* value, cli::array<int32_t>* indices);
        void SetMemberValue2(ObjectManager* manager, System::String* memberName, System::Object* value);
        bool DoFixups(bool asContainer, ObjectManager* manager, bool strict);
        void RemoveFixup(BaseFixupRecord* fixupToRemove, bool asContainer);
        void UnchainFixup(BaseFixupRecord* fixup, BaseFixupRecord* prevFixup, bool asContainer);
        void ChainFixup(BaseFixupRecord* fixup, bool asContainer);
        bool LoadData(ObjectManager* manager, ISurrogateSelector* selector, StreamingContext context);
        bool get_IsInstanceReady();
        bool get_IsUnsolvedObjectReference();
        bool get_IsRegistered();
        bool get_HasPendingFixups();
        
    };
    
    
    struct MANAGED_API OnDeserializedAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OnDeserializingAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OnSerializedAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OnSerializingAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API OptionalFieldAttribute : public virtual System::Attribute{
        int32_t version_added;
        
        void constructor();
        int32_t get_VersionAdded();
        int32_t set_VersionAdded(int32_t value);
        
    };
    
    
    struct MANAGED_API SafeSerializationEventArgs : public virtual System::EventArgs{
        
        void constructor();
        void AddSerializedState(ISafeSerializationData* serializedState);
        StreamingContext get_StreamingContext();
        
    };
    
    
    struct MANAGED_API SerializationBinder : public virtual System::Object{
        
        void constructor();
        virtual System::Type* BindToType_88315b8448960e94(System::String* assemblyName, System::String* typeName) = 0;
        virtual void BindToName_4f5e7ffbf04d37a1(System::Type* serializedType, System::String* assemblyName, System::String* typeName);
        
    };
    
    
    struct MANAGED_API SerializationCallbacks : public virtual System::Object{
        static constexpr System::Reflection::BindingFlags DefaultBindingFlags = (System::Reflection::BindingFlags)54L;
        System::Collections::ArrayList* onSerializingList;
        System::Collections::ArrayList* onSerializedList;
        System::Collections::ArrayList* onDeserializingList;
        System::Collections::ArrayList* onDeserializedList;
        static System::Collections::Hashtable* cache;
        static System::Object* cache_lock;
        
        SerializationCallbacks();
        void constructor(System::Type* type);
        static void static_constructor();
        static System::Collections::ArrayList* GetMethodsByAttribute(System::Type* type, System::Type* attr);
        static void Invoke(System::Collections::ArrayList* list, System::Object* target, StreamingContext context);
        void RaiseOnSerializing(System::Object* target, StreamingContext contex);
        void RaiseOnSerialized(System::Object* target, StreamingContext contex);
        void RaiseOnDeserializing(System::Object* target, StreamingContext contex);
        void RaiseOnDeserialized(System::Object* target, StreamingContext contex);
        static SerializationCallbacks* GetSerializationCallbacks(System::Type* t);
        bool get_HasSerializingCallbacks();
        bool get_HasSerializedCallbacks();
        bool get_HasDeserializingCallbacks();
        bool get_HasDeserializedCallbacks();
        
    };
    
    
    struct MANAGED_API SerializationException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(SerializationInfo* info, StreamingContext context);
        
    };
    
    
    struct MANAGED_API SerializationInfo : public virtual System::Object{
        System::Collections::Hashtable* serialized;
        System::Collections::ArrayList* values;
        System::String* assemblyName;
        System::String* fullTypeName;
        System::Type* objectType;
        bool isAssemblyNameSetExplicit;
        bool isFullTypeNameSetExplicit;
        IFormatterConverter* converter;
        
        void constructor(System::Type* type);
        void constructor(System::Type* type, cli::array<SerializationEntry>* data);
        void constructor(System::Type* type, IFormatterConverter* converter);
        void AddValue(System::String* name, System::Object* value, System::Type* type);
        System::Object* GetValue(System::String* name, System::Type* type);
        bool HasKey(System::String* name);
        void SetType(System::Type* type);
        SerializationInfoEnumerator* GetEnumerator();
        void AddValue2(System::String* name, int16_t value);
        void AddValue3(System::String* name, uint16_t value);
        void AddValue4(System::String* name, int32_t value);
        void AddValue5(System::String* name, unsigned char value);
        void AddValue6(System::String* name, bool value);
        void AddValue7(System::String* name, char16_t value);
        void AddValue8(System::String* name, signed char value);
        void AddValue9(System::String* name, double value);
        void AddValue10(System::String* name, System::Decimal value);
        void AddValue11(System::String* name, System::DateTime value);
        void AddValue12(System::String* name, float value);
        void AddValue13(System::String* name, uint32_t value);
        void AddValue14(System::String* name, int64_t value);
        void AddValue15(System::String* name, uint64_t value);
        void AddValue16(System::String* name, System::Object* value);
        bool GetBoolean(System::String* name);
        unsigned char GetByte(System::String* name);
        char16_t GetChar(System::String* name);
        System::DateTime GetDateTime(System::String* name);
        System::Decimal GetDecimal(System::String* name);
        double GetDouble(System::String* name);
        int16_t GetInt16(System::String* name);
        int32_t GetInt32(System::String* name);
        int64_t GetInt64(System::String* name);
        signed char GetSByte(System::String* name);
        float GetSingle(System::String* name);
        System::String* GetString(System::String* name);
        uint16_t GetUInt16(System::String* name);
        uint32_t GetUInt32(System::String* name);
        uint64_t GetUInt64(System::String* name);
        cli::array<SerializationEntry>* get_entries();
        System::String* get_AssemblyName();
        System::String* set_AssemblyName(System::String* value);
        System::String* get_FullTypeName();
        System::String* set_FullTypeName(System::String* value);
        int32_t get_MemberCount();
        bool get_IsAssemblyNameSetExplicit();
        bool get_IsFullTypeNameSetExplicit();
        System::Type* get_ObjectType();
        
    };
    
    
    struct MANAGED_API SerializationInfoEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        System::Collections::IEnumerator* enumerator;
        
        void constructor(System::Collections::ArrayList* list);
        bool MoveNext();
        void Reset();
        SerializationEntry get_Current();
        System::Object* get_Current2();
        System::String* get_Name();
        System::Type* get_ObjectType();
        System::Object* get_Value();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API HashHelper : public virtual System::Object, public virtual System::Collections::IHashCodeProvider, public virtual System::Collections::IComparer{
        static System::Object* NonNullObject;
        static HashHelper* Instance;
        
        HashHelper();
        void constructor();
        static void static_constructor();
        int32_t GetHashCode2(System::Object* obj);
        int32_t Compare(System::Object* x, System::Object* y);
        
        virtual int32_t GetHashCode_5d8a358493971efd(System::Object* obj) override;
        virtual int32_t Compare_451fd276747b629d(System::Object* x, System::Object* y) override;
    };
    
    
    struct MANAGED_API SerializationObjectManager : public virtual System::Object{
        StreamingContext context;
        System::Collections::Hashtable* seen;
        CallbackHandler* callbacks;
        
        void constructor(StreamingContext context);
        void RegisterObject(System::Object* obj);
        void RaiseOnSerializedEvent();
        void add_callbacks(CallbackHandler* value);
        void remove_callbacks(CallbackHandler* value);
        
    };
    
    
    struct MANAGED_API SurrogateSelector : public virtual System::Object, public virtual ISurrogateSelector{
        System::Collections::Hashtable* Surrogates;
        ISurrogateSelector* nextSelector;
        
        void constructor();
        virtual void AddSurrogate_8a63f7a607a16bfd(System::Type* type, StreamingContext context, ISerializationSurrogate* surrogate);
        virtual void ChainSelector_2005e7a460c04cd7(ISurrogateSelector* selector);
        virtual ISurrogateSelector* GetNextSelector_69e5cfddbf651b28();
        virtual ISerializationSurrogate* GetSurrogate_7d9c3bc2abb037e8(System::Type* type, StreamingContext context, ISurrogateSelector* selector);
        virtual void RemoveSurrogate_692282881d782b59(System::Type* type, StreamingContext context);
        
        virtual void ChainSelector_b4bf6e9847cd4bb0(ISurrogateSelector* selector) override;
        virtual ISurrogateSelector* GetNextSelector_f0732f882be06ccb() override;
        virtual ISerializationSurrogate* GetSurrogate_9d3ffd4061f81ca8(System::Type* type, StreamingContext context, ISurrogateSelector* selector) override;
    };
    
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    struct MANAGED_API InternalRM : public virtual System::Object{
        
        void constructor();
        static void InfoSoap(cli::array<System::Object*>* messages);
        static bool SoapCheckEnabled();
        
    };
    
    
    struct MANAGED_API InternalST : public virtual System::Object{
        
        void constructor();
        static void InfoSoap(cli::array<System::Object*>* messages);
        static System::Reflection::Assembly* LoadAssemblyFromString(System::String* assemblyString);
        static void SerializationSetValue(System::Reflection::FieldInfo* fi, System::Object* target, System::Object* value);
        static void Soap(cli::array<System::Object*>* messages);
        static void SoapAssert(bool condition, System::String* message);
        static bool SoapCheckEnabled();
        
    };
    
    
    struct MANAGED_API ServerFault : public virtual System::Object{
        System::String* exceptionType;
        System::String* message;
        System::String* stackTrace;
        System::Exception* exception;
        
        void constructor(System::String* exceptionType, System::String* message, System::String* stackTrace);
        System::String* get_ExceptionType();
        System::String* set_ExceptionType(System::String* value);
        System::String* get_ExceptionMessage();
        System::String* set_ExceptionMessage(System::String* value);
        System::String* get_StackTrace();
        System::String* set_StackTrace(System::String* value);
        
    };
    
    
    struct MANAGED_API SoapFault : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        System::String* code;
        System::String* actor;
        System::String* faultString;
        System::Object* detail;
        
        void constructor();
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* faultCode, System::String* faultString, System::String* faultActor, ServerFault* serverFault);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* get_Detail();
        System::Object* set_Detail(System::Object* value);
        System::String* get_FaultActor();
        System::String* set_FaultActor(System::String* value);
        System::String* get_FaultCode();
        System::String* set_FaultCode(System::String* value);
        System::String* get_FaultString();
        System::String* set_FaultString(System::String* value);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API SoapMessage : public virtual System::Object, public virtual ISoapMessage{
        cli::array<System::Runtime::Remoting::Messaging::Header*>* headers;
        System::String* methodName;
        cli::array<System::String*>* paramNames;
        cli::array<System::Type*>* paramTypes;
        cli::array<System::Object*>* paramValues;
        System::String* xmlNameSpace;
        
        void constructor();
        cli::array<System::Runtime::Remoting::Messaging::Header*>* get_Headers();
        cli::array<System::Runtime::Remoting::Messaging::Header*>* set_Headers(cli::array<System::Runtime::Remoting::Messaging::Header*>* value);
        System::String* get_MethodName();
        System::String* set_MethodName(System::String* value);
        cli::array<System::String*>* get_ParamNames();
        cli::array<System::String*>* set_ParamNames(cli::array<System::String*>* value);
        cli::array<System::Type*>* get_ParamTypes();
        cli::array<System::Type*>* set_ParamTypes(cli::array<System::Type*>* value);
        cli::array<System::Object*>* get_ParamValues();
        cli::array<System::Object*>* set_ParamValues(cli::array<System::Object*>* value);
        System::String* get_XmlNameSpace();
        System::String* set_XmlNameSpace(System::String* value);
        
        virtual cli::array<System::Runtime::Remoting::Messaging::Header*>* get_Headers_96b7bb51a0261db9() override;
        virtual cli::array<System::Runtime::Remoting::Messaging::Header*>* set_Headers_96978db47415955e(cli::array<System::Runtime::Remoting::Messaging::Header*>* value) override;
        virtual System::String* get_MethodName_28298dbe5631c29a() override;
        virtual System::String* set_MethodName_17a43f56cb082426(System::String* value) override;
        virtual cli::array<System::String*>* get_ParamNames_5982ddec287d0ab5() override;
        virtual cli::array<System::String*>* set_ParamNames_ba43c410fccdd7e0(cli::array<System::String*>* value) override;
        virtual cli::array<System::Type*>* get_ParamTypes_dfa28901a900c9e6() override;
        virtual cli::array<System::Type*>* set_ParamTypes_e393ddee8f239cb8(cli::array<System::Type*>* value) override;
        virtual cli::array<System::Object*>* get_ParamValues_a628ac3701d143a3() override;
        virtual cli::array<System::Object*>* set_ParamValues_393afb0f84c346e9(cli::array<System::Object*>* value) override;
        virtual System::String* get_XmlNameSpace_3b8ec03f5216958() override;
        virtual System::String* set_XmlNameSpace_6e306b61b433828(System::String* value) override;
    };
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    struct MANAGED_API BinaryCommon : public virtual System::Object{
        static cli::array<unsigned char>* BinaryHeader;
        static cli::array<System::Type*>* _typeCodesToType;
        static cli::array<unsigned char>* _typeCodeMap;
        static bool UseReflectionSerialization;
        
        BinaryCommon();
        static void static_constructor();
        void constructor();
        static bool IsPrimitive(System::Type* type);
        static unsigned char GetTypeCode(System::Type* type);
        static System::Type* GetTypeFromCode(int32_t code);
        static void CheckSerializable(System::Type* type, System::Runtime::Serialization::ISurrogateSelector* selector, System::Runtime::Serialization::StreamingContext context);
        static void SwapBytes(cli::array<unsigned char>* byteArray, int32_t size, int32_t dataSize);
        
    };
    
    
    struct MANAGED_API BinaryFormatter : public virtual System::Object, public virtual System::Runtime::Remoting::Messaging::IRemotingFormatter, public virtual System::Runtime::Serialization::IFormatter{
        System::Runtime::Serialization::Formatters::FormatterAssemblyStyle assembly_format;
        System::Runtime::Serialization::SerializationBinder* binder;
        System::Runtime::Serialization::StreamingContext context;
        System::Runtime::Serialization::ISurrogateSelector* surrogate_selector;
        System::Runtime::Serialization::Formatters::FormatterTypeStyle type_format;
        System::Runtime::Serialization::Formatters::TypeFilterLevel filter_level;
        static System::Runtime::Serialization::ISurrogateSelector* _DefaultSurrogateSelector_k__BackingField;
        
        void constructor();
        void constructor(System::Runtime::Serialization::ISurrogateSelector* selector, System::Runtime::Serialization::StreamingContext context);
        System::Object* Deserialize(System::IO::Stream* serializationStream);
        System::Object* Deserialize2(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler);
        System::Object* NoCheckDeserialize(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler);
        System::Object* DeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage);
        System::Object* NoCheckDeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage);
        void Serialize(System::IO::Stream* serializationStream, System::Object* graph);
        void Serialize2(System::IO::Stream* serializationStream, System::Object* graph, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers);
        System::Object* UnsafeDeserialize(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler);
        System::Object* UnsafeDeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage);
        void WriteBinaryHeader(System::IO::BinaryWriter* writer, bool hasHeaders);
        void ReadBinaryHeader(System::IO::BinaryReader* reader, bool hasHeaders);
        static System::Runtime::Serialization::ISurrogateSelector* get_DefaultSurrogateSelector();
        static System::Runtime::Serialization::ISurrogateSelector* set_DefaultSurrogateSelector(System::Runtime::Serialization::ISurrogateSelector* value);
        System::Runtime::Serialization::Formatters::FormatterAssemblyStyle get_AssemblyFormat();
        System::Runtime::Serialization::Formatters::FormatterAssemblyStyle set_AssemblyFormat(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle value);
        System::Runtime::Serialization::SerializationBinder* get_Binder();
        System::Runtime::Serialization::SerializationBinder* set_Binder(System::Runtime::Serialization::SerializationBinder* value);
        System::Runtime::Serialization::StreamingContext get_Context();
        System::Runtime::Serialization::StreamingContext set_Context(System::Runtime::Serialization::StreamingContext value);
        System::Runtime::Serialization::ISurrogateSelector* get_SurrogateSelector();
        System::Runtime::Serialization::ISurrogateSelector* set_SurrogateSelector(System::Runtime::Serialization::ISurrogateSelector* value);
        System::Runtime::Serialization::Formatters::FormatterTypeStyle get_TypeFormat();
        System::Runtime::Serialization::Formatters::FormatterTypeStyle set_TypeFormat(System::Runtime::Serialization::Formatters::FormatterTypeStyle value);
        System::Runtime::Serialization::Formatters::TypeFilterLevel get_FilterLevel();
        System::Runtime::Serialization::Formatters::TypeFilterLevel set_FilterLevel(System::Runtime::Serialization::Formatters::TypeFilterLevel value);
        
        virtual System::Object* Deserialize_19aeb6df512c35cb(System::IO::Stream* serializationStream) override;
        virtual System::Object* Deserialize_25413fb95ff81880(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler) override;
        virtual void Serialize_617c75444546bb4e(System::IO::Stream* serializationStream, System::Object* graph) override;
        virtual void Serialize_b2dd80326413fce6(System::IO::Stream* serializationStream, System::Object* graph, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers) override;
        virtual System::Runtime::Serialization::SerializationBinder* get_Binder_215d8b515173b805() override;
        virtual System::Runtime::Serialization::SerializationBinder* set_Binder_175460eb6e1d50d5(System::Runtime::Serialization::SerializationBinder* value) override;
        virtual System::Runtime::Serialization::StreamingContext get_Context_dcb6fe59b19e8322() override;
        virtual System::Runtime::Serialization::StreamingContext set_Context_c7b1865dbad539b2(System::Runtime::Serialization::StreamingContext value) override;
        virtual System::Runtime::Serialization::ISurrogateSelector* get_SurrogateSelector_7fa2a47b11b30ba1() override;
        virtual System::Runtime::Serialization::ISurrogateSelector* set_SurrogateSelector_671af517157aed76(System::Runtime::Serialization::ISurrogateSelector* value) override;
    };
    
    
    struct MANAGED_API CodeGenerator : public virtual System::Object{
        static System::Object* monitor;
        static System::Reflection::Emit::ModuleBuilder* _module;
        
        CodeGenerator();
        static void static_constructor();
        void constructor();
        static System::Type* GenerateMetadataType(System::Type* type, System::Runtime::Serialization::StreamingContext context);
        static System::Type* GenerateMetadataTypeInternal(System::Type* type, System::Runtime::Serialization::StreamingContext context);
        static void LoadFromPtr(System::Reflection::Emit::ILGenerator* ig, System::Type* t);
        static void EmitWriteTypeSpec(System::Reflection::Emit::ILGenerator* gen, System::Type* type, System::String* member);
        static void EmitLoadTypeAssembly(System::Reflection::Emit::ILGenerator* gen, System::Type* type, System::String* member);
        static void EmitWrite(System::Reflection::Emit::ILGenerator* gen, System::Type* type);
        static void EmitWritePrimitiveValue(System::Reflection::Emit::ILGenerator* gen, System::Type* type);
        static System::Type* EnumToUnderlying(System::Type* t);
        
    };
    
    
    struct MANAGED_API MessageFormatter : public virtual System::Object{
        
        void constructor();
        static void WriteMethodCall(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers, BinaryFormatter* formatter);
        static void WriteMethodResponse(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers, BinaryFormatter* formatter);
        static System::Object* ReadMethodCall(System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, BinaryFormatter* formatter);
        static System::Object* ReadMethodCall2(BinaryElement elem, System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, BinaryFormatter* formatter);
        static System::Object* ReadMethodResponse(System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage, BinaryFormatter* formatter);
        static System::Object* ReadMethodResponse2(BinaryElement elem, System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage, BinaryFormatter* formatter);
        static bool AllTypesArePrimitive(cli::array<System::Object*>* objects);
        static bool IsMethodPrimitive(System::Type* type);
        static cli::array<System::Object*>* GetExtraProperties(System::Collections::IDictionary* properties, cli::array<System::String*>* internalKeys);
        static bool IsInternalKey(System::String* key, cli::array<System::String*>* internalKeys);
        
    };
    
    
    struct MANAGED_API TypeMetadata : public virtual System::Object{
        System::Type* Type2;
        cli::array<System::Type*>* MemberTypes2;
        cli::array<System::String*>* MemberNames;
        cli::array<System::Reflection::MemberInfo*>* MemberInfos;
        int32_t FieldCount;
        bool NeedsSerializationInfo;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ArrayNullFiller : public virtual System::Object{
        int32_t NullCount;
        
        void constructor(int32_t count);
        
    };
    
    
    struct MANAGED_API ObjectReader : public virtual System::Object{
        System::Runtime::Serialization::ISurrogateSelector* _surrogateSelector;
        System::Runtime::Serialization::StreamingContext _context;
        System::Runtime::Serialization::SerializationBinder* _binder;
        System::Runtime::Serialization::Formatters::TypeFilterLevel _filterLevel;
        System::Runtime::Serialization::ObjectManager* _manager;
        System::Collections::Hashtable* _registeredAssemblies;
        System::Collections::Hashtable* _typeMetadataCache;
        System::Object* _lastObject;
        int64_t _lastObjectID;
        int64_t _rootObjectID;
        cli::array<unsigned char>* arrayBuffer;
        int32_t ArrayBufferLength;
        
        void constructor(BinaryFormatter* formatter);
        void ReadObjectGraph(System::IO::BinaryReader* reader, bool readHeaders, System::Object* result, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers);
        void ReadObjectGraph2(BinaryElement elem, System::IO::BinaryReader* reader, bool readHeaders, System::Object* result, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers);
        bool ReadNextObject(BinaryElement element, System::IO::BinaryReader* reader);
        bool ReadNextObject2(System::IO::BinaryReader* reader);
        void ReadObject(BinaryElement element, System::IO::BinaryReader* reader, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info);
        void ReadAssembly(System::IO::BinaryReader* reader);
        void ReadObjectInstance(System::IO::BinaryReader* reader, bool isRuntimeObject, bool hasTypeInfo, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info);
        void ReadRefTypeObjectInstance(System::IO::BinaryReader* reader, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info);
        void ReadObjectContent(System::IO::BinaryReader* reader, TypeMetadata* metadata, int64_t objectId, System::Object* objectInstance, System::Runtime::Serialization::SerializationInfo* info);
        void RegisterObject(int64_t objectId, System::Object* objectInstance, System::Runtime::Serialization::SerializationInfo* info, int64_t parentObjectId, System::Reflection::MemberInfo* parentObjectMemeber, cli::array<int32_t>* indices);
        void ReadStringIntance(System::IO::BinaryReader* reader, int64_t objectId, System::Object* value);
        void ReadGenericArray(System::IO::BinaryReader* reader, int64_t objectId, System::Object* val);
        System::Object* ReadBoxedPrimitiveTypeValue(System::IO::BinaryReader* reader);
        void ReadArrayOfPrimitiveType(System::IO::BinaryReader* reader, int64_t objectId, System::Object* val);
        void BlockRead(System::IO::BinaryReader* reader, System::Array* array, int32_t dataSize);
        void ReadArrayOfObject(System::IO::BinaryReader* reader, int64_t objectId, System::Object* array);
        void ReadArrayOfString(System::IO::BinaryReader* reader, int64_t objectId, System::Object* array);
        void ReadSimpleArray(System::IO::BinaryReader* reader, System::Type* elementType, int64_t objectId, System::Object* val);
        TypeMetadata* ReadTypeMetadata(System::IO::BinaryReader* reader, bool isRuntimeObject, bool hasTypeInfo);
        static bool IsGeneric(System::Reflection::MemberInfo* minfo);
        void ReadValue(System::IO::BinaryReader* reader, System::Object* parentObject, int64_t parentObjectId, System::Runtime::Serialization::SerializationInfo* info, System::Type* valueType, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, cli::array<int32_t>* indices);
        void SetObjectValue(System::Object* parentObject, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, System::Runtime::Serialization::SerializationInfo* info, System::Object* value, System::Type* valueType, cli::array<int32_t>* indices);
        void RecordFixup(int64_t parentObjectId, int64_t childObjectId, System::Object* parentObject, System::Runtime::Serialization::SerializationInfo* info, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, cli::array<int32_t>* indices);
        System::Type* GetDeserializationType(int64_t assemblyId, System::String* className);
        System::Type* GetDeserializationType2(int64_t assemblyId, System::String* className, bool throwOnError);
        System::Type* ReadType(System::IO::BinaryReader* reader, TypeTag code);
        System::Type* ReadType2(System::IO::BinaryReader* reader, TypeTag code, bool throwOnError);
        static System::Object* ReadPrimitiveTypeValue(System::IO::BinaryReader* reader, System::Type* type);
        System::Object* get_CurrentObject();
        
    };
    
    
    struct MANAGED_API SerializableTypeMetadata : public virtual TypeMetadata2{
        cli::array<System::Type*>* types;
        cli::array<System::String*>* names;
        
        void constructor(System::Type* itype, System::Runtime::Serialization::SerializationInfo* info);
        virtual bool IsCompatible_638da850e8ece74b(TypeMetadata2* other) override;
        virtual void WriteAssemblies_7d8a46adaa61eb93(ObjectWriter* ow, System::IO::BinaryWriter* writer) override;
        virtual void WriteTypeData_db79b0ed1d8b4a01(ObjectWriter* ow, System::IO::BinaryWriter* writer, bool writeTypes) override;
        virtual void WriteObjectData_10db42bcb37f8b90(ObjectWriter* ow, System::IO::BinaryWriter* writer, System::Object* data) override;
        virtual bool get_RequiresTypes_a63dc7473dcf7e12() override;
        
    };
    
    
    struct MANAGED_API MemberTypeMetadata : public virtual ClrTypeMetadata{
        cli::array<System::Reflection::MemberInfo*>* members;
        
        void constructor(System::Type* type, System::Runtime::Serialization::StreamingContext context);
        virtual void WriteAssemblies_7d8a46adaa61eb93(ObjectWriter* ow, System::IO::BinaryWriter* writer) override;
        virtual void WriteTypeData_db79b0ed1d8b4a01(ObjectWriter* ow, System::IO::BinaryWriter* writer, bool writeTypes) override;
        virtual void WriteObjectData_10db42bcb37f8b90(ObjectWriter* ow, System::IO::BinaryWriter* writer, System::Object* data) override;
        
    };
    
    
    struct MANAGED_API MetadataReference : public virtual System::Object{
        TypeMetadata2* Metadata;
        int64_t ObjectID;
        
        void constructor(TypeMetadata2* metadata, int64_t id);
        
    };
    
    
    struct MANAGED_API ObjectWriter : public virtual System::Object{
        System::Runtime::Serialization::ObjectIDGenerator* _idGenerator;
        System::Collections::Hashtable* _cachedMetadata;
        System::Collections::Queue* _pendingObjects;
        System::Collections::Hashtable* _assemblyCache;
        static System::Collections::Hashtable* _cachedTypes;
        static System::Reflection::Assembly* CorlibAssembly;
        static System::String* CorlibAssemblyName;
        System::Runtime::Serialization::ISurrogateSelector* _surrogateSelector;
        System::Runtime::Serialization::StreamingContext _context;
        System::Runtime::Serialization::Formatters::FormatterAssemblyStyle _assemblyFormat;
        System::Runtime::Serialization::Formatters::FormatterTypeStyle _typeFormat;
        System::Runtime::Serialization::SerializationBinder* _binder;
        cli::array<unsigned char>* arrayBuffer;
        int32_t ArrayBufferLength;
        System::Runtime::Serialization::SerializationObjectManager* _manager;
        
        ObjectWriter();
        void constructor(BinaryFormatter* formatter);
        static void static_constructor();
        void WriteObjectGraph(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers);
        void QueueObject(System::Object* obj);
        void WriteQueuedObjects(System::IO::BinaryWriter* writer);
        void WriteObjectInstance(System::IO::BinaryWriter* writer, System::Object* obj, bool isValueObject);
        static void WriteSerializationEnd(System::IO::BinaryWriter* writer);
        void WriteObject(System::IO::BinaryWriter* writer, int64_t id, System::Object* obj);
        void GetObjectData(System::Object* obj, TypeMetadata2* metadata, System::Object* data);
        TypeMetadata2* CreateMemberTypeMetadata(System::Type* type);
        void WriteArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array);
        void WriteGenericArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array);
        void WriteObjectArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array);
        void WriteStringArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array);
        void WritePrimitiveTypeArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array);
        void BlockWrite(System::IO::BinaryWriter* writer, System::Array* array, int32_t dataSize);
        void WriteSingleDimensionArrayElements(System::IO::BinaryWriter* writer, System::Array* array, System::Type* elementType);
        void WriteNullFiller(System::IO::BinaryWriter* writer, int32_t numNulls);
        void WriteObjectReference(System::IO::BinaryWriter* writer, int64_t id);
        void WriteValue(System::IO::BinaryWriter* writer, System::Type* valueType, System::Object* val);
        void WriteString(System::IO::BinaryWriter* writer, int64_t id, System::String* str);
        int32_t WriteAssembly(System::IO::BinaryWriter* writer, System::Reflection::Assembly* assembly);
        int32_t WriteAssemblyName(System::IO::BinaryWriter* writer, System::String* assembly);
        int32_t GetAssemblyId(System::Reflection::Assembly* assembly);
        int32_t GetAssemblyNameId(System::String* assembly);
        int32_t RegisterAssembly(System::String* assembly, bool firstTime);
        static void WritePrimitiveValue(System::IO::BinaryWriter* writer, System::Object* value);
        static void WriteTypeCode(System::IO::BinaryWriter* writer, System::Type* type);
        static TypeTag GetTypeTag(System::Type* type);
        void WriteTypeSpec(System::IO::BinaryWriter* writer, System::Type* type);
        
    };
    
}}}}}
namespace System { namespace Runtime { namespace Versioning {
    
    struct MANAGED_API ComponentGuaranteesAttribute : public virtual System::Attribute{
        ComponentGuaranteesOptions guarantees;
        
        void constructor(ComponentGuaranteesOptions guarantees);
        ComponentGuaranteesOptions get_Guarantees();
        
    };
    
    
    struct MANAGED_API ResourceConsumptionAttribute : public virtual System::Attribute{
        ResourceScope resource;
        ResourceScope consumption;
        
        void constructor(ResourceScope resourceScope);
        void constructor(ResourceScope resourceScope, ResourceScope consumptionScope);
        ResourceScope get_ConsumptionScope();
        ResourceScope get_ResourceScope();
        
    };
    
    
    struct MANAGED_API ResourceExposureAttribute : public virtual System::Attribute{
        ResourceScope exposure;
        
        void constructor(ResourceScope exposureLevel);
        ResourceScope get_ResourceExposureLevel();
        
    };
    
    
    struct MANAGED_API TargetFrameworkAttribute : public virtual System::Attribute{
        System::String* _FrameworkName_k__BackingField;
        System::String* _FrameworkDisplayName_k__BackingField;
        
        void constructor(System::String* frameworkName);
        System::String* get_FrameworkName();
        System::String* set_FrameworkName(System::String* value);
        System::String* get_FrameworkDisplayName();
        System::String* set_FrameworkDisplayName(System::String* value);
        
    };
    
    
    struct MANAGED_API VersioningHelper : public virtual System::Object{
        
        static int32_t GetDomainId();
        static int32_t GetProcessId();
        static System::String* SafeName(System::String* name, bool process, bool appdomain);
        static System::String* ConvertFromMachine(System::String* name, ResourceScope to, System::Type* type);
        static System::String* ConvertFromProcess(System::String* name, ResourceScope to, System::Type* type);
        static System::String* ConvertFromAppDomain(System::String* name, ResourceScope to, System::Type* type);
        static System::String* MakeVersionSafeName(System::String* name, ResourceScope from, ResourceScope to);
        static System::String* MakeVersionSafeName2(System::String* name, ResourceScope from, ResourceScope to, System::Type* type);
        
    };
    
}}}
namespace System { namespace Security {
    
    struct MANAGED_API AllowPartiallyTrustedCallersAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API HostProtectionException : public virtual System::SystemException{
        Permissions::HostProtectionResource _protected;
        Permissions::HostProtectionResource _demanded;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* e);
        void constructor(System::String* message, Permissions::HostProtectionResource protectedResources, Permissions::HostProtectionResource demandedResources);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        Permissions::HostProtectionResource get_DemandedResources();
        Permissions::HostProtectionResource get_ProtectedResources();
        
    };
    
    
    struct MANAGED_API HostSecurityManager : public virtual System::Object{
        
        void constructor();
        virtual Policy::ApplicationTrust* DetermineApplicationTrust_9c3480c5892df261(Policy::Evidence* applicationEvidence, Policy::Evidence* activatorEvidence, Policy::TrustManagerContext* context);
        virtual Policy::Evidence* ProvideAppDomainEvidence_f440e6aa53aa6cff(Policy::Evidence* inputEvidence);
        virtual Policy::Evidence* ProvideAssemblyEvidence_152b6b2161b9f01c(System::Reflection::Assembly* loadedAssembly, Policy::Evidence* inputEvidence);
        virtual PermissionSet* ResolvePolicy_3412fa76aada1919(Policy::Evidence* evidence);
        virtual Policy::PolicyLevel* get_DomainPolicy_4232e39de784c0b3();
        virtual HostSecurityManagerOptions get_Flags_b631cff0eaaa13d7();
        
    };
    
    
    struct MANAGED_API NamedPermissionSet : public virtual PermissionSet{
        System::String* name;
        System::String* description;
        
        void constructor();
        void constructor(System::String* name, PermissionSet* permSet);
        void constructor(System::String* name, Permissions::PermissionState state);
        void constructor(NamedPermissionSet* permSet);
        void constructor(System::String* name);
        virtual PermissionSet* Copy_cfeae72b3c523c4e() override;
        NamedPermissionSet* Copy3(System::String* name);
        virtual void FromXml_2ac858dba9ca352b(SecurityElement* et) override;
        virtual SecurityElement* ToXml_c2a66662101c88c3() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* get_Description();
        System::String* set_Description(System::String* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        
    };
    
    
    struct MANAGED_API PermissionBuilder : public virtual System::Object{
        static cli::array<System::Object*>* psNone;
        
        PermissionBuilder();
        static void static_constructor();
        static IPermission* Create(System::String* fullname, Permissions::PermissionState state);
        static IPermission* Create2(SecurityElement* se);
        static IPermission* Create3(System::String* fullname, SecurityElement* se);
        static IPermission* Create4(System::Type* type);
        static IPermission* CreatePermission(System::String* fullname, SecurityElement* se);
        
    };
    
    
    struct MANAGED_API PermissionSetCollection : public virtual System::Object, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        static System::String* tagName;
        System::Collections::IList* _list;
        
        PermissionSetCollection();
        void constructor();
        static void static_constructor();
        void Add(PermissionSet* permSet);
        PermissionSetCollection* Copy();
        void CopyTo(cli::array<PermissionSet*>* array, int32_t index);
        void CopyTo2(System::Array* array, int32_t index);
        void Demand();
        void FromXml(SecurityElement* el);
        System::Collections::IEnumerator* GetEnumerator();
        PermissionSet* GetSet(int32_t index);
        void RemoveSet(int32_t index);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        SecurityElement* ToXml();
        void DemandChoice();
        static PermissionSetCollection* CreateFromBinaryFormat(cli::array<unsigned char>* data);
        int32_t get_Count();
        bool get_IsSynchronized();
        System::Collections::IList* get_PermissionSets();
        System::Object* get_SyncRoot();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API SecureString : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject, public virtual System::IDisposable{
        static constexpr int32_t BlockSize = 16;
        static constexpr int32_t MaxSize = 65536;
        int32_t length;
        bool disposed;
        bool read_only;
        cli::array<unsigned char>* data;
        
        SecureString();
        static void static_constructor();
        void constructor();
        void constructor(char16_t* value, int32_t length);
        void AppendChar(char16_t c);
        void Clear();
        SecureString* Copy();
        void Dispose();
        void InsertAt(int32_t index, char16_t c);
        bool IsReadOnly();
        void MakeReadOnly();
        void RemoveAt(int32_t index);
        void SetAt(int32_t index, char16_t c);
        void Encrypt();
        void Decrypt();
        void Alloc(int32_t length, bool realloc);
        cli::array<unsigned char>* GetBuffer();
        int32_t get_Length();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SecurityContext : public virtual System::Object, public virtual System::IDisposable{
        bool _capture;
        void* _winid;
        System::Threading::CompressedStack* _stack;
        bool _suppressFlowWindowsIdentity;
        bool _suppressFlow;
        
        void constructor();
        void constructor(SecurityContext* sc);
        SecurityContext* CreateCopy();
        static SecurityContext* Capture();
        void Dispose();
        static bool IsFlowSuppressed();
        static bool IsWindowsIdentityFlowSuppressed();
        static void RestoreFlow();
        static void Run(SecurityContext* securityContext, System::Threading::ContextCallback* callback, System::Object* state);
        static System::Threading::AsyncFlowControl SuppressFlow();
        static System::Threading::AsyncFlowControl SuppressFlowWindowsIdentity();
        bool get_FlowSuppressed();
        bool set_FlowSuppressed(bool value);
        bool get_WindowsIdentityFlowSuppressed();
        bool set_WindowsIdentityFlowSuppressed(bool value);
        System::Threading::CompressedStack* get_CompressedStack();
        System::Threading::CompressedStack* set_CompressedStack(System::Threading::CompressedStack* value);
        void* get_IdentityToken();
        void* set_IdentityToken(void* value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SecurityCriticalAttribute : public virtual System::Attribute{
        SecurityCriticalScope _scope;
        
        void constructor();
        void constructor(SecurityCriticalScope scope);
        SecurityCriticalScope get_Scope();
        
    };
    
    
    struct MANAGED_API SecurityAttribute : public virtual System::Object{
        System::String* _name;
        System::String* _value;
        
        void constructor(System::String* name, System::String* value);
        System::String* get_Name();
        System::String* get_Value();
        
    };
    
    
    struct MANAGED_API SecurityElement : public virtual System::Object{
        System::String* text;
        System::String* tag;
        System::Collections::ArrayList* attributes;
        System::Collections::ArrayList* children;
        static cli::array<char16_t>* invalid_tag_chars;
        static cli::array<char16_t>* invalid_text_chars;
        static cli::array<char16_t>* invalid_attr_name_chars;
        static cli::array<char16_t>* invalid_attr_value_chars;
        static cli::array<char16_t>* invalid_chars;
        
        SecurityElement();
        void constructor(System::String* tag);
        void constructor(System::String* tag, System::String* text);
        void constructor(SecurityElement* se);
        static void static_constructor();
        void AddAttribute(System::String* name, System::String* value);
        void AddChild(SecurityElement* child);
        System::String* Attribute2(System::String* name);
        SecurityElement* Copy();
        bool Equal(SecurityElement* other);
        static System::String* Escape2(System::String* str);
        static System::String* Unescape(System::String* str);
        static SecurityElement* FromString(System::String* xml);
        static bool IsValidAttributeName(System::String* name);
        static bool IsValidAttributeValue(System::String* value);
        static bool IsValidTag(System::String* tag);
        static bool IsValidText(System::String* text);
        SecurityElement* SearchForChildByTag(System::String* tag);
        System::String* SearchForTextOfTag(System::String* tag);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        void ToXml(System::Text::StringBuilder* s, int32_t level);
        SecurityAttribute* GetAttribute(System::String* name);
        System::Collections::Hashtable* get_Attributes();
        System::Collections::Hashtable* set_Attributes(System::Collections::Hashtable* value);
        System::Collections::ArrayList* get_Children();
        System::Collections::ArrayList* set_Children(System::Collections::ArrayList* value);
        System::String* get_Tag();
        System::String* set_Tag(System::String* value);
        System::String* get_Text();
        System::String* set_Text(System::String* value);
        
    };
    
    
    struct MANAGED_API SecurityException : public virtual System::SystemException{
        System::String* permissionState;
        System::Type* permissionType;
        System::String* _granted;
        System::String* _refused;
        System::Object* _demanded;
        IPermission* _firstperm;
        System::Reflection::MethodInfo* _method;
        Policy::Evidence* _evidence;
        Permissions::SecurityAction _action;
        System::Object* _denyset;
        System::Object* _permitset;
        System::Reflection::AssemblyName* _assembly;
        System::String* _url;
        SecurityZone _zone;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* message, System::Type* type);
        void constructor(System::String* message, System::Type* type, System::String* state);
        void constructor(System::String* message, PermissionSet* granted, PermissionSet* refused);
        void constructor(System::String* message, System::Object* deny, System::Object* permitOnly, System::Reflection::MethodInfo* method, System::Object* demanded, IPermission* permThatFailed);
        void constructor(System::String* message, System::Reflection::AssemblyName* assemblyName, PermissionSet* grant, PermissionSet* refused, System::Reflection::MethodInfo* method, Permissions::SecurityAction action, System::Object* demanded, IPermission* permThatFailed, Policy::Evidence* evidence);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        Permissions::SecurityAction get_Action();
        Permissions::SecurityAction set_Action(Permissions::SecurityAction value);
        System::Object* get_DenySetInstance();
        System::Object* set_DenySetInstance(System::Object* value);
        System::Reflection::AssemblyName* get_FailedAssemblyInfo();
        System::Reflection::AssemblyName* set_FailedAssemblyInfo(System::Reflection::AssemblyName* value);
        System::Reflection::MethodInfo* get_Method();
        System::Reflection::MethodInfo* set_Method(System::Reflection::MethodInfo* value);
        System::Object* get_PermitOnlySetInstance();
        System::Object* set_PermitOnlySetInstance(System::Object* value);
        System::String* get_Url();
        System::String* set_Url(System::String* value);
        SecurityZone get_Zone();
        SecurityZone set_Zone(SecurityZone value);
        System::Object* get_Demanded();
        System::Object* set_Demanded(System::Object* value);
        IPermission* get_FirstPermissionThatFailed();
        IPermission* set_FirstPermissionThatFailed(IPermission* value);
        System::String* get_PermissionState();
        System::String* set_PermissionState(System::String* value);
        System::Type* get_PermissionType();
        System::Type* set_PermissionType(System::Type* value);
        System::String* get_GrantedSet();
        System::String* set_GrantedSet(System::String* value);
        System::String* get_RefusedSet();
        System::String* set_RefusedSet(System::String* value);
        
    };
    
    
    struct MANAGED_API RuntimeSecurityFrame : public virtual System::Object{
        System::AppDomain* domain;
        System::Reflection::MethodInfo* method;
        RuntimeDeclSecurityEntry assert;
        RuntimeDeclSecurityEntry deny;
        RuntimeDeclSecurityEntry permitonly;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SecurityManager : public virtual System::Object{
        static System::Object* _lockObject;
        static System::Collections::ArrayList* _hierarchy;
        static IPermission* _unmanagedCode;
        static System::Collections::Hashtable* _declsecCache;
        static Policy::PolicyLevel* _level;
        static Permissions::SecurityPermission* _execution;
        
        SecurityManager();
        static void static_constructor();
        static bool CheckElevatedPermissions();
        static void EnsureElevatedPermissions();
        static void GetZoneAndOrigin(System::Collections::ArrayList* zone, System::Collections::ArrayList* origin);
        static bool IsGranted(IPermission* perm);
        static bool IsGranted2(System::Reflection::Assembly* a, IPermission* perm);
        static IPermission* CheckPermissionSet(System::Reflection::Assembly* a, PermissionSet* ps, bool noncas);
        static IPermission* CheckPermissionSet2(System::AppDomain* ad, PermissionSet* ps);
        static Policy::PolicyLevel* LoadPolicyLevelFromFile(System::String* path, PolicyLevelType type);
        static Policy::PolicyLevel* LoadPolicyLevelFromString(System::String* str, PolicyLevelType type);
        static System::Collections::IEnumerator* PolicyHierarchy();
        static PermissionSet* ResolvePolicy(Policy::Evidence* evidence);
        static PermissionSet* ResolvePolicy2(cli::array<Policy::Evidence*>* evidences);
        static PermissionSet* ResolveSystemPolicy(Policy::Evidence* evidence);
        static PermissionSet* ResolvePolicy3(Policy::Evidence* evidence, PermissionSet* reqdPset, PermissionSet* optPset, PermissionSet* denyPset, PermissionSet* denied);
        static System::Collections::IEnumerator* ResolvePolicyGroups(Policy::Evidence* evidence);
        static void SavePolicy();
        static void SavePolicyLevel(Policy::PolicyLevel* level);
        static void InitializePolicyHierarchy();
        static bool ResolvePolicyLevel(PermissionSet* ps, Policy::PolicyLevel* pl, Policy::Evidence* evidence);
        static void ResolveIdentityPermissions(PermissionSet* ps, Policy::Evidence* evidence);
        static PermissionSet* Decode(void* permissions, int32_t length);
        static PermissionSet* Decode2(cli::array<unsigned char>* encodedPermissions);
        static bool GetLinkDemandSecurity(System::Reflection::MethodBase* method, RuntimeDeclSecurityActions* cdecl, RuntimeDeclSecurityActions* mdecl);
        static void ReflectedLinkDemandInvoke(System::Reflection::MethodBase* mb);
        static bool ReflectedLinkDemandQuery(System::Reflection::MethodBase* mb);
        static bool LinkDemand(System::Reflection::Assembly* a, RuntimeDeclSecurityActions* klass, RuntimeDeclSecurityActions* method);
        static bool LinkDemandFullTrust(System::Reflection::Assembly* a);
        static bool LinkDemandUnmanaged(System::Reflection::Assembly* a);
        static void LinkDemandSecurityException(int32_t securityViolation, void* methodHandle);
        static void InheritanceDemandSecurityException(int32_t securityViolation, System::Reflection::Assembly* a, System::Type* t, System::Reflection::MethodInfo* method);
        static void ThrowException(System::Exception* ex);
        static bool InheritanceDemand(System::AppDomain* ad, System::Reflection::Assembly* a, RuntimeDeclSecurityActions* actions);
        static void DemandUnmanaged();
        static void InternalDemand(void* permissions, int32_t length);
        static void InternalDemandChoice(void* permissions, int32_t length);
        static PermissionSet* GetStandardSandbox(Policy::Evidence* evidence);
        static bool CurrentThreadRequiresSecurityContextCapture();
        static bool get_CheckExecutionRights();
        static bool set_CheckExecutionRights(bool value);
        static bool get_SecurityEnabled();
        static bool set_SecurityEnabled(bool value);
        static System::Collections::IEnumerator* get_Hierarchy();
        static Policy::PolicyLevel* get_ResolvingPolicyLevel();
        static Policy::PolicyLevel* set_ResolvingPolicyLevel(Policy::PolicyLevel* value);
        static IPermission* get_UnmanagedCode();
        
    };
    
    
    struct MANAGED_API SecurityRulesAttribute : public virtual System::Attribute{
        SecurityRuleSet _RuleSet_k__BackingField;
        bool _SkipVerificationInFullTrust_k__BackingField;
        
        void constructor(SecurityRuleSet ruleSet);
        SecurityRuleSet get_RuleSet();
        SecurityRuleSet set_RuleSet(SecurityRuleSet value);
        bool get_SkipVerificationInFullTrust();
        bool set_SkipVerificationInFullTrust(bool value);
        
    };
    
    
    struct MANAGED_API SecuritySafeCriticalAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SecurityTransparentAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SecurityTreatAsSafeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API SuppressUnmanagedCodeSecurityAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API UnverifiableCodeAttribute : public virtual System::Attribute{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API VerificationException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API XmlSyntaxException : public virtual System::SystemException{
        
        void constructor();
        void constructor(int32_t lineNumber);
        void constructor(int32_t lineNumber, System::String* message);
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    struct MANAGED_API AceEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        GenericAcl* owner;
        int32_t current;
        
        void constructor(GenericAcl* owner);
        bool MoveNext();
        void Reset();
        GenericAce* get_Current();
        System::Object* get_Current2();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API AuthorizationRuleCollection : public virtual System::Collections::ReadOnlyCollectionBase{
        
        void constructor(cli::array<AuthorizationRule*>* rules);
        void CopyTo2(cli::array<AuthorizationRule*>* rules, int32_t index);
        AuthorizationRule* get_Item(int32_t index);
        
    };
    
    
    struct MANAGED_API CommonAce : public virtual QualifiedAce{
        
        void constructor(AceFlags flags, AceQualifier qualifier, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, bool isCallback, cli::array<unsigned char>* opaque);
        void constructor(AceType type, AceFlags flags, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, cli::array<unsigned char>* opaque);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        virtual void GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) override;
        static int32_t MaxOpaqueLength(bool isCallback);
        virtual System::String* GetSddlForm_9a01bbfdef8a4d87() override;
        static AceType ConvertType(AceQualifier qualifier, bool isCallback);
        virtual int32_t get_BinaryLength_9e9ea5e224e95c31() override;
        
    };
    
    
    struct MANAGED_API CommonSecurityDescriptor : public virtual GenericSecurityDescriptor{
        bool isContainer;
        bool isDS;
        ControlFlags flags;
        System::Security::Principal::SecurityIdentifier* owner;
        System::Security::Principal::SecurityIdentifier* group;
        SystemAcl* systemAcl;
        DiscretionaryAcl* discretionaryAcl;
        
        void constructor(bool isContainer, bool isDS, RawSecurityDescriptor* rawSecurityDescriptor);
        void constructor(bool isContainer, bool isDS, System::String* sddlForm);
        void constructor(bool isContainer, bool isDS, cli::array<unsigned char>* binaryForm, int32_t offset);
        void constructor(bool isContainer, bool isDS, ControlFlags flags, System::Security::Principal::SecurityIdentifier* owner, System::Security::Principal::SecurityIdentifier* group, SystemAcl* systemAcl, DiscretionaryAcl* discretionaryAcl);
        void PurgeAccessControl(System::Security::Principal::SecurityIdentifier* sid);
        void PurgeAudit(System::Security::Principal::SecurityIdentifier* sid);
        void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance);
        void SetSystemAclProtection(bool isProtected, bool preserveInheritance);
        virtual ControlFlags get_ControlFlags_5819543aa2ed7520() override;
        DiscretionaryAcl* get_DiscretionaryAcl();
        DiscretionaryAcl* set_DiscretionaryAcl(DiscretionaryAcl* value);
        virtual System::Security::Principal::SecurityIdentifier* get_Group_86703f8c66d04ea6() override;
        virtual System::Security::Principal::SecurityIdentifier* set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier* value) override;
        bool get_IsContainer();
        bool get_IsDiscretionaryAclCanonical();
        bool get_IsDS();
        bool get_IsSystemAclCanonical();
        virtual System::Security::Principal::SecurityIdentifier* get_Owner_fe0200e7078f0b90() override;
        virtual System::Security::Principal::SecurityIdentifier* set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier* value) override;
        SystemAcl* get_SystemAcl();
        SystemAcl* set_SystemAcl(SystemAcl* value);
        
    };
    
    
    struct MANAGED_API CompoundAce : public virtual KnownAce{
        CompoundAceType compound_ace_type;
        
        void constructor(AceFlags flags, int32_t accessMask, CompoundAceType compoundAceType, System::Security::Principal::SecurityIdentifier* sid);
        virtual void GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) override;
        virtual System::String* GetSddlForm_9a01bbfdef8a4d87() override;
        virtual int32_t get_BinaryLength_9e9ea5e224e95c31() override;
        CompoundAceType get_CompoundAceType();
        CompoundAceType set_CompoundAceType(CompoundAceType value);
        
    };
    
    
    struct MANAGED_API CryptoKeyAccessRule : public virtual AccessRule{
        CryptoKeyRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, CryptoKeyRights cryptoKeyRights, AccessControlType type);
        void constructor(System::String* identity, CryptoKeyRights cryptoKeyRights, AccessControlType type);
        CryptoKeyRights get_CryptoKeyRights();
        
    };
    
    
    struct MANAGED_API CryptoKeyAuditRule : public virtual AuditRule{
        CryptoKeyRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags);
        void constructor(System::String* identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags);
        CryptoKeyRights get_CryptoKeyRights();
        
    };
    
    
    struct MANAGED_API CryptoKeySecurity : public virtual NativeObjectSecurity{
        
        void constructor();
        void constructor(CommonSecurityDescriptor* securityDescriptor);
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) final;
        void AddAccessRule(CryptoKeyAccessRule* rule);
        bool RemoveAccessRule(CryptoKeyAccessRule* rule);
        void RemoveAccessRuleAll(CryptoKeyAccessRule* rule);
        void RemoveAccessRuleSpecific(CryptoKeyAccessRule* rule);
        void ResetAccessRule(CryptoKeyAccessRule* rule);
        void SetAccessRule(CryptoKeyAccessRule* rule);
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) final;
        void AddAuditRule(CryptoKeyAuditRule* rule);
        bool RemoveAuditRule(CryptoKeyAuditRule* rule);
        void RemoveAuditRuleAll(CryptoKeyAuditRule* rule);
        void RemoveAuditRuleSpecific(CryptoKeyAuditRule* rule);
        void SetAuditRule(CryptoKeyAuditRule* rule);
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API CustomAce : public virtual GenericAce{
        cli::array<unsigned char>* opaque;
        static int32_t MaxOpaqueLength;
        
        void constructor(AceType type, AceFlags flags, cli::array<unsigned char>* opaque);
        virtual void GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) override;
        cli::array<unsigned char>* GetOpaque();
        void SetOpaque(cli::array<unsigned char>* opaque);
        virtual System::String* GetSddlForm_9a01bbfdef8a4d87() override;
        virtual int32_t get_BinaryLength_9e9ea5e224e95c31() override;
        int32_t get_OpaqueLength();
        
    };
    
    
    struct MANAGED_API DirectoryObjectSecurity : public virtual ObjectSecurity{
        
        void constructor();
        void constructor(CommonSecurityDescriptor* securityDescriptor);
        virtual AccessRule* AccessRuleFactory_d3022bba09c70f96(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, System::Guid objectType, System::Guid inheritedObjectType);
        virtual AuditRule* AuditRuleFactory_55a31b54ea3f623(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, System::Guid objectType, System::Guid inheritedObjectType);
        AuthorizationRuleCollection* GetAccessRules(bool includeExplicit, bool includeInherited, System::Type* targetType);
        AuthorizationRuleCollection* GetAuditRules(bool includeExplicit, bool includeInherited, System::Type* targetType);
        void AddAccessRule(ObjectAccessRule* rule);
        void AddAuditRule(ObjectAuditRule* rule);
        virtual bool ModifyAccess_f072698aed397d6b(AccessControlModification modification, AccessRule* rule, bool modified) override;
        virtual bool ModifyAudit_f86f011c1cc059a7(AccessControlModification modification, AuditRule* rule, bool modified) override;
        bool RemoveAccessRule(ObjectAccessRule* rule);
        void RemoveAccessRuleAll(ObjectAccessRule* rule);
        void RemoveAccessRuleSpecific(ObjectAccessRule* rule);
        bool RemoveAuditRule(ObjectAuditRule* rule);
        void RemoveAuditRuleAll(ObjectAuditRule* rule);
        void RemoveAuditRuleSpecific(ObjectAuditRule* rule);
        void ResetAccessRule(ObjectAccessRule* rule);
        void SetAccessRule(ObjectAccessRule* rule);
        void SetAuditRule(ObjectAuditRule* rule);
        
    };
    
    
    struct MANAGED_API DirectorySecurity : public virtual FileSystemSecurity{
        
        void constructor();
        void constructor(System::String* name, AccessControlSections includeSections);
        
    };
    
    
    struct MANAGED_API DiscretionaryAcl : public virtual CommonAcl{
        
        void constructor(bool isContainer, bool isDS, int32_t capacity);
        void constructor(bool isContainer, bool isDS, RawAcl* rawAcl);
        void constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity);
        void AddAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void AddAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        bool RemoveAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        bool RemoveAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        void RemoveAccessSpecific(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void RemoveAccessSpecific2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        void SetAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void SetAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        
    };
    
    
    struct MANAGED_API EventWaitHandleAccessRule : public virtual AccessRule{
        EventWaitHandleRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, EventWaitHandleRights eventRights, AccessControlType type);
        void constructor(System::String* identity, EventWaitHandleRights eventRights, AccessControlType type);
        EventWaitHandleRights get_EventWaitHandleRights();
        
    };
    
    
    struct MANAGED_API EventWaitHandleAuditRule : public virtual AuditRule{
        EventWaitHandleRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, EventWaitHandleRights eventRights, AuditFlags flags);
        EventWaitHandleRights get_EventWaitHandleRights();
        
    };
    
    
    struct MANAGED_API EventWaitHandleSecurity : public virtual NativeObjectSecurity{
        
        void constructor();
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) override;
        void AddAccessRule(EventWaitHandleAccessRule* rule);
        bool RemoveAccessRule(EventWaitHandleAccessRule* rule);
        void RemoveAccessRuleAll(EventWaitHandleAccessRule* rule);
        void RemoveAccessRuleSpecific(EventWaitHandleAccessRule* rule);
        void ResetAccessRule(EventWaitHandleAccessRule* rule);
        void SetAccessRule(EventWaitHandleAccessRule* rule);
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) override;
        void AddAuditRule(EventWaitHandleAuditRule* rule);
        bool RemoveAuditRule(EventWaitHandleAuditRule* rule);
        void RemoveAuditRuleAll(EventWaitHandleAuditRule* rule);
        void RemoveAuditRuleSpecific(EventWaitHandleAuditRule* rule);
        void SetAuditRule(EventWaitHandleAuditRule* rule);
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API FileSecurity : public virtual FileSystemSecurity{
        
        void constructor();
        void constructor(System::String* fileName, AccessControlSections includeSections);
        
    };
    
    
    struct MANAGED_API FileSystemAccessRule : public virtual AccessRule{
        FileSystemRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, AccessControlType type);
        void constructor(System::String* identity, FileSystemRights fileSystemRights, AccessControlType type);
        void constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
        void constructor(System::String* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
        FileSystemRights get_FileSystemRights();
        
    };
    
    
    struct MANAGED_API FileSystemAuditRule : public virtual AuditRule{
        FileSystemRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, AuditFlags flags);
        void constructor(System::String* identity, FileSystemRights fileSystemRights, AuditFlags flags);
        void constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
        void constructor(System::String* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
        FileSystemRights get_FileSystemRights();
        
    };
    
    
    struct MANAGED_API MutexAccessRule : public virtual AccessRule{
        MutexRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, MutexRights eventRights, AccessControlType type);
        void constructor(System::String* identity, MutexRights eventRights, AccessControlType type);
        MutexRights get_MutexRights();
        
    };
    
    
    struct MANAGED_API MutexAuditRule : public virtual AuditRule{
        MutexRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, MutexRights eventRights, AuditFlags flags);
        MutexRights get_MutexRights();
        
    };
    
    
    struct MANAGED_API MutexSecurity : public virtual NativeObjectSecurity{
        
        void constructor();
        void constructor(System::String* name, AccessControlSections includeSections);
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) override;
        void AddAccessRule(MutexAccessRule* rule);
        bool RemoveAccessRule(MutexAccessRule* rule);
        void RemoveAccessRuleAll(MutexAccessRule* rule);
        void RemoveAccessRuleSpecific(MutexAccessRule* rule);
        void ResetAccessRule(MutexAccessRule* rule);
        void SetAccessRule(MutexAccessRule* rule);
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) override;
        void AddAuditRule(MutexAuditRule* rule);
        bool RemoveAuditRule(MutexAuditRule* rule);
        void RemoveAuditRuleAll(MutexAuditRule* rule);
        void RemoveAuditRuleSpecific(MutexAuditRule* rule);
        void SetAuditRule(MutexAuditRule* rule);
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API ObjectAccessRule : public virtual AccessRule{
        System::Guid object_type;
        System::Guid inherited_object_type;
        
        void constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, System::Guid objectType, System::Guid inheritedObjectType, AccessControlType type);
        System::Guid get_InheritedObjectType();
        ObjectAceFlags get_ObjectFlags();
        System::Guid get_ObjectType();
        
    };
    
    
    struct MANAGED_API ObjectAce : public virtual QualifiedAce{
        System::Guid object_ace_type;
        System::Guid inherited_object_type;
        ObjectAceFlags object_ace_flags;
        
        void constructor(AceFlags aceFlags, AceQualifier qualifier, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, ObjectAceFlags flags, System::Guid type, System::Guid inheritedType, bool isCallback, cli::array<unsigned char>* opaque);
        void constructor(AceType type, AceFlags flags, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, ObjectAceFlags objFlags, System::Guid objType, System::Guid inheritedType, cli::array<unsigned char>* opaque);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        virtual void GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) override;
        static int32_t MaxOpaqueLength(bool isCallback);
        virtual System::String* GetSddlForm_9a01bbfdef8a4d87() override;
        static AceType ConvertType(AceQualifier qualifier, bool isCallback);
        void WriteGuid(System::Guid val, cli::array<unsigned char>* buffer, int32_t offset);
        System::Guid ReadGuid(cli::array<unsigned char>* buffer, int32_t offset);
        virtual int32_t get_BinaryLength_9e9ea5e224e95c31() override;
        System::Guid get_InheritedObjectAceType();
        System::Guid set_InheritedObjectAceType(System::Guid value);
        ObjectAceFlags get_ObjectAceFlags();
        ObjectAceFlags set_ObjectAceFlags(ObjectAceFlags value);
        System::Guid get_ObjectAceType();
        System::Guid set_ObjectAceType(System::Guid value);
        
    };
    
    
    struct MANAGED_API ObjectAuditRule : public virtual AuditRule{
        System::Guid inherited_object_type;
        System::Guid object_type;
        
        void constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, System::Guid objectType, System::Guid inheritedObjectType, AuditFlags auditFlags);
        System::Guid get_InheritedObjectType();
        ObjectAceFlags get_ObjectFlags();
        System::Guid get_ObjectType();
        
    };
    
    
    template<class T> struct MANAGED_API ObjectSecurity2 : public virtual NativeObjectSecurity{
        
        void constructor();
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) override;
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) override;
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API PrivilegeNotHeldException : public virtual System::UnauthorizedAccessException{
        
        void constructor();
        void constructor(System::String* privilege);
        void constructor(System::String* privilege, System::Exception* inner);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        System::String* get_PrivilegeName();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API RawAcl : public virtual GenericAcl{
        unsigned char revision;
        System::Collections::Generic::List<GenericAce*>* list;
        
        void constructor(unsigned char revision, int32_t capacity);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        void constructor(unsigned char revision, System::Collections::Generic::List<GenericAce*>* aces);
        virtual void GetBinaryForm_f4afc682e7e10d18(cli::array<unsigned char>* binaryForm, int32_t offset) override;
        void InsertAce(int32_t index, GenericAce* ace);
        void RemoveAce(int32_t index);
        virtual System::String* GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) override;
        static RawAcl* ParseSddlForm(System::String* sddlForm, bool isDacl, ControlFlags sdFlags, int32_t pos);
        static void ParseFlags(System::String* sddlForm, bool isDacl, ControlFlags sdFlags, int32_t pos);
        void WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset);
        uint16_t ReadUShort(cli::array<unsigned char>* buffer, int32_t offset);
        virtual int32_t get_BinaryLength_4ea089e3a02d2299() override;
        virtual int32_t get_Count_5cd77c86ebcd1b2c() override;
        virtual GenericAce* get_Item_60d48735f5e5392f(int32_t index) override;
        virtual GenericAce* set_Item_bfb6c47e01525adb(int32_t index, GenericAce* value) override;
        virtual unsigned char get_Revision_d515f8407d8d1240() override;
        
    };
    
    
    struct MANAGED_API RawSecurityDescriptor : public virtual GenericSecurityDescriptor{
        ControlFlags control_flags;
        System::Security::Principal::SecurityIdentifier* owner_sid;
        System::Security::Principal::SecurityIdentifier* group_sid;
        RawAcl* system_acl;
        RawAcl* discretionary_acl;
        unsigned char resourcemgr_control;
        
        void constructor(System::String* sddlForm);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        void constructor(ControlFlags flags, System::Security::Principal::SecurityIdentifier* owner, System::Security::Principal::SecurityIdentifier* group, RawAcl* systemAcl, RawAcl* discretionaryAcl);
        void SetFlags(ControlFlags flags);
        void ParseSddl(System::String* sddlForm);
        uint16_t ReadUShort(cli::array<unsigned char>* buffer, int32_t offset);
        int32_t ReadInt(cli::array<unsigned char>* buffer, int32_t offset);
        virtual ControlFlags get_ControlFlags_5819543aa2ed7520() override;
        RawAcl* get_DiscretionaryAcl();
        RawAcl* set_DiscretionaryAcl(RawAcl* value);
        virtual System::Security::Principal::SecurityIdentifier* get_Group_86703f8c66d04ea6() override;
        virtual System::Security::Principal::SecurityIdentifier* set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier* value) override;
        virtual System::Security::Principal::SecurityIdentifier* get_Owner_fe0200e7078f0b90() override;
        virtual System::Security::Principal::SecurityIdentifier* set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier* value) override;
        unsigned char get_ResourceManagerControl();
        unsigned char set_ResourceManagerControl(unsigned char value);
        RawAcl* get_SystemAcl();
        RawAcl* set_SystemAcl(RawAcl* value);
        virtual GenericAcl* get_InternalDacl_5c63bd9d907ab726() override;
        virtual GenericAcl* get_InternalSacl_e5b16f647b074625() override;
        virtual unsigned char get_InternalReservedField_e823bda30612d306() override;
        
    };
    
    
    struct MANAGED_API RegistryAccessRule : public virtual AccessRule{
        RegistryRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, AccessControlType type);
        void constructor(System::String* identity, RegistryRights registryRights, AccessControlType type);
        void constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
        void constructor(System::String* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
        RegistryRights get_RegistryRights();
        
    };
    
    
    struct MANAGED_API RegistryAuditRule : public virtual AuditRule{
        RegistryRights rights;
        
        void constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
        void constructor(System::String* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
        RegistryRights get_RegistryRights();
        
    };
    
    
    struct MANAGED_API RegistrySecurity : public virtual NativeObjectSecurity{
        
        void constructor();
        virtual AccessRule* AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) override;
        void AddAccessRule(RegistryAccessRule* rule);
        void AddAuditRule(RegistryAuditRule* rule);
        virtual AuditRule* AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) override;
        bool RemoveAccessRule(RegistryAccessRule* rule);
        void RemoveAccessRuleAll(RegistryAccessRule* rule);
        void RemoveAccessRuleSpecific(RegistryAccessRule* rule);
        bool RemoveAuditRule(RegistryAuditRule* rule);
        void RemoveAuditRuleAll(RegistryAuditRule* rule);
        void RemoveAuditRuleSpecific(RegistryAuditRule* rule);
        void ResetAccessRule(RegistryAccessRule* rule);
        void SetAccessRule(RegistryAccessRule* rule);
        void SetAuditRule(RegistryAuditRule* rule);
        virtual System::Type* get_AccessRightType_1a84bfe4f6428b49() override;
        virtual System::Type* get_AccessRuleType_5fe73642cdc6c868() override;
        virtual System::Type* get_AuditRuleType_9f84e3023e989cd7() override;
        
    };
    
    
    struct MANAGED_API SddlAccessRight : public virtual System::Object{
        static cli::array<SddlAccessRight*>* rights;
        System::String* _Name_k__BackingField;
        int32_t _Value_k__BackingField;
        int32_t _ObjectType_k__BackingField;
        
        SddlAccessRight();
        void constructor();
        static void static_constructor();
        static SddlAccessRight* LookupByName(System::String* s);
        static cli::array<SddlAccessRight*>* Decompose(int32_t mask);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        int32_t get_Value();
        int32_t set_Value(int32_t value);
        int32_t get_ObjectType();
        int32_t set_ObjectType(int32_t value);
        
    };
    
    
    struct MANAGED_API SystemAcl : public virtual CommonAcl{
        
        void constructor(bool isContainer, bool isDS, int32_t capacity);
        void constructor(bool isContainer, bool isDS, RawAcl* rawAcl);
        void constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity);
        void AddAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void AddAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        bool RemoveAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        bool RemoveAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        void RemoveAuditSpecific(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void RemoveAuditSpecific2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        void SetAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
        void SetAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType);
        virtual System::String* GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) override;
        
    };
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    struct MANAGED_API Base64Constants : public virtual System::Object{
        static cli::array<unsigned char>* EncodeTable;
        static cli::array<unsigned char>* DecodeTable;
        
        Base64Constants();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API CryptoAPITransform : public virtual System::Object, public virtual ICryptoTransform, public virtual System::IDisposable{
        bool m_disposed;
        
        void constructor();
        void Dispose();
        void Clear();
        void Dispose2(bool disposing);
        int32_t TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        cli::array<unsigned char>* TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        void Reset();
        bool get_CanReuseTransform();
        bool get_CanTransformMultipleBlocks();
        int32_t get_InputBlockSize();
        void* get_KeyHandle();
        int32_t get_OutputBlockSize();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
    
    struct MANAGED_API CryptoHandler : public virtual System::Object, public virtual Mono::Xml::IContentHandler{
        System::Collections::Generic::IDictionary2<System::String*, System::Type*>* algorithms;
        System::Collections::Generic::IDictionary2<System::String*, System::String*>* oid;
        System::Collections::Generic::Dictionary<System::String*, System::String*>* names;
        System::Collections::Generic::Dictionary<System::String*, System::String*>* classnames;
        int32_t level;
        
        void constructor(System::Collections::Generic::IDictionary2<System::String*, System::Type*>* algorithms, System::Collections::Generic::IDictionary2<System::String*, System::String*>* oid);
        void OnStartParsing(Mono::Xml::SmallXmlParser* parser);
        void OnEndParsing(Mono::Xml::SmallXmlParser* parser);
        System::String* Get(Mono::Xml::IAttrList* attrs, System::String* name);
        void OnStartElement(System::String* name, Mono::Xml::IAttrList* attrs);
        void OnEndElement(System::String* name);
        void OnProcessingInstruction(System::String* name, System::String* text);
        void OnChars(System::String* text);
        void OnIgnorableWhitespace(System::String* text);
        
        virtual void OnStartParsing_60c119bf90baa608(Mono::Xml::SmallXmlParser* parser) override;
        virtual void OnEndParsing_ddf0252ce1c74235(Mono::Xml::SmallXmlParser* parser) override;
        virtual void OnStartElement_431a5ecd1484562f(System::String* name, Mono::Xml::IAttrList* attrs) override;
        virtual void OnEndElement_47dd703957202fcd(System::String* name) override;
        virtual void OnProcessingInstruction_eeedb82cbfe7ab40(System::String* name, System::String* text) override;
        virtual void OnChars_23545ef97e4c205b(System::String* text) override;
        virtual void OnIgnorableWhitespace_39f85fe38215782c(System::String* text) override;
    };
    
    
    struct MANAGED_API CryptoConfig : public virtual System::Object{
        static /*constexpr*/ System::String* defaultNamespace() { return _T("System.Security.Cryptography."); }
        static /*constexpr*/ System::String* defaultC14N() { return _T("System.Security.Cryptography.Xml.XmlDsigC14NTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultC14NWithComments() { return _T("System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultBase64() { return _T("System.Security.Cryptography.Xml.XmlDsigBase64Transform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultXPath() { return _T("System.Security.Cryptography.Xml.XmlDsigXPathTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultXslt() { return _T("System.Security.Cryptography.Xml.XmlDsigXsltTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultEnveloped() { return _T("System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultXmlDecryption() { return _T("System.Security.Cryptography.Xml.XmlDecryptionTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultExcC14N() { return _T("System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultExcC14NWithComments() { return _T("System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultX509Data() { return _T("System.Security.Cryptography.Xml.KeyInfoX509Data, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultKeyName() { return _T("System.Security.Cryptography.Xml.KeyInfoName, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultKeyValueDSA() { return _T("System.Security.Cryptography.Xml.DSAKeyValue, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultKeyValueRSA() { return _T("System.Security.Cryptography.Xml.RSAKeyValue, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* defaultRetrievalMethod() { return _T("System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* managedSHA1() { return _T("System.Security.Cryptography.SHA1Managed"); }
        static /*constexpr*/ System::String* oidSHA1() { return _T("1.3.14.3.2.26"); }
        static /*constexpr*/ System::String* oidMD5() { return _T("1.2.840.113549.2.5"); }
        static /*constexpr*/ System::String* oidSHA256() { return _T("2.16.840.1.101.3.4.2.1"); }
        static /*constexpr*/ System::String* oidSHA384() { return _T("2.16.840.1.101.3.4.2.2"); }
        static /*constexpr*/ System::String* oidSHA512() { return _T("2.16.840.1.101.3.4.2.3"); }
        static /*constexpr*/ System::String* oidRIPEMD160() { return _T("1.3.36.3.2.1"); }
        static /*constexpr*/ System::String* oidDES() { return _T("1.3.14.3.2.7"); }
        static /*constexpr*/ System::String* oid3DES() { return _T("1.2.840.113549.3.7"); }
        static /*constexpr*/ System::String* oidRC2() { return _T("1.2.840.113549.3.2"); }
        static /*constexpr*/ System::String* oid3DESKeyWrap() { return _T("1.2.840.113549.1.9.16.3.6"); }
        static /*constexpr*/ System::String* nameSHA1() { return _T("System.Security.Cryptography.SHA1CryptoServiceProvider"); }
        static /*constexpr*/ System::String* nameSHA1a() { return _T("SHA"); }
        static /*constexpr*/ System::String* nameSHA1b() { return _T("SHA1"); }
        static /*constexpr*/ System::String* nameSHA1c() { return _T("System.Security.Cryptography.SHA1"); }
        static /*constexpr*/ System::String* nameSHA1d() { return _T("System.Security.Cryptography.HashAlgorithm"); }
        static /*constexpr*/ System::String* nameMD5() { return _T("System.Security.Cryptography.MD5CryptoServiceProvider"); }
        static /*constexpr*/ System::String* nameMD5a() { return _T("MD5"); }
        static /*constexpr*/ System::String* nameMD5b() { return _T("System.Security.Cryptography.MD5"); }
        static /*constexpr*/ System::String* nameSHA256() { return _T("System.Security.Cryptography.SHA256Managed"); }
        static /*constexpr*/ System::String* nameSHA256a() { return _T("SHA256"); }
        static /*constexpr*/ System::String* nameSHA256b() { return _T("SHA-256"); }
        static /*constexpr*/ System::String* nameSHA256c() { return _T("System.Security.Cryptography.SHA256"); }
        static /*constexpr*/ System::String* nameSHA384() { return _T("System.Security.Cryptography.SHA384Managed"); }
        static /*constexpr*/ System::String* nameSHA384a() { return _T("SHA384"); }
        static /*constexpr*/ System::String* nameSHA384b() { return _T("SHA-384"); }
        static /*constexpr*/ System::String* nameSHA384c() { return _T("System.Security.Cryptography.SHA384"); }
        static /*constexpr*/ System::String* nameSHA512() { return _T("System.Security.Cryptography.SHA512Managed"); }
        static /*constexpr*/ System::String* nameSHA512a() { return _T("SHA512"); }
        static /*constexpr*/ System::String* nameSHA512b() { return _T("SHA-512"); }
        static /*constexpr*/ System::String* nameSHA512c() { return _T("System.Security.Cryptography.SHA512"); }
        static /*constexpr*/ System::String* nameRSAa() { return _T("RSA"); }
        static /*constexpr*/ System::String* nameRSAb() { return _T("System.Security.Cryptography.RSA"); }
        static /*constexpr*/ System::String* nameRSAc() { return _T("System.Security.Cryptography.AsymmetricAlgorithm"); }
        static /*constexpr*/ System::String* nameDSAa() { return _T("DSA"); }
        static /*constexpr*/ System::String* nameDSAb() { return _T("System.Security.Cryptography.DSA"); }
        static /*constexpr*/ System::String* nameDESa() { return _T("DES"); }
        static /*constexpr*/ System::String* nameDESb() { return _T("System.Security.Cryptography.DES"); }
        static /*constexpr*/ System::String* name3DESa() { return _T("3DES"); }
        static /*constexpr*/ System::String* name3DESb() { return _T("TripleDES"); }
        static /*constexpr*/ System::String* name3DESc() { return _T("Triple DES"); }
        static /*constexpr*/ System::String* name3DESd() { return _T("System.Security.Cryptography.TripleDES"); }
        static /*constexpr*/ System::String* nameRC2a() { return _T("RC2"); }
        static /*constexpr*/ System::String* nameRC2b() { return _T("System.Security.Cryptography.RC2"); }
        static /*constexpr*/ System::String* nameAESa() { return _T("Rijndael"); }
        static /*constexpr*/ System::String* nameAESb() { return _T("System.Security.Cryptography.Rijndael"); }
        static /*constexpr*/ System::String* nameAESc() { return _T("System.Security.Cryptography.SymmetricAlgorithm"); }
        static /*constexpr*/ System::String* nameRNGa() { return _T("RandomNumberGenerator"); }
        static /*constexpr*/ System::String* nameRNGb() { return _T("System.Security.Cryptography.RandomNumberGenerator"); }
        static /*constexpr*/ System::String* nameKeyHasha() { return _T("System.Security.Cryptography.KeyedHashAlgorithm"); }
        static /*constexpr*/ System::String* nameHMACSHA1a() { return _T("HMACSHA1"); }
        static /*constexpr*/ System::String* nameHMACSHA1b() { return _T("System.Security.Cryptography.HMACSHA1"); }
        static /*constexpr*/ System::String* nameMAC3DESa() { return _T("MACTripleDES"); }
        static /*constexpr*/ System::String* nameMAC3DESb() { return _T("System.Security.Cryptography.MACTripleDES"); }
        static /*constexpr*/ System::String* name3DESKeyWrap() { return _T("TripleDESKeyWrap"); }
        static /*constexpr*/ System::String* nameRIPEMD160() { return _T("System.Security.Cryptography.RIPEMD160Managed"); }
        static /*constexpr*/ System::String* nameRIPEMD160a() { return _T("RIPEMD160"); }
        static /*constexpr*/ System::String* nameRIPEMD160b() { return _T("RIPEMD-160"); }
        static /*constexpr*/ System::String* nameRIPEMD160c() { return _T("System.Security.Cryptography.RIPEMD160"); }
        static /*constexpr*/ System::String* nameHMACb() { return _T("System.Security.Cryptography.HMAC"); }
        static /*constexpr*/ System::String* nameHMACMD5a() { return _T("HMACMD5"); }
        static /*constexpr*/ System::String* nameHMACMD5b() { return _T("System.Security.Cryptography.HMACMD5"); }
        static /*constexpr*/ System::String* nameHMACRIPEMD160a() { return _T("HMACRIPEMD160"); }
        static /*constexpr*/ System::String* nameHMACRIPEMD160b() { return _T("System.Security.Cryptography.HMACRIPEMD160"); }
        static /*constexpr*/ System::String* nameHMACSHA256a() { return _T("HMACSHA256"); }
        static /*constexpr*/ System::String* nameHMACSHA256b() { return _T("System.Security.Cryptography.HMACSHA256"); }
        static /*constexpr*/ System::String* nameHMACSHA384a() { return _T("HMACSHA384"); }
        static /*constexpr*/ System::String* nameHMACSHA384b() { return _T("System.Security.Cryptography.HMACSHA384"); }
        static /*constexpr*/ System::String* nameHMACSHA512a() { return _T("HMACSHA512"); }
        static /*constexpr*/ System::String* nameHMACSHA512b() { return _T("System.Security.Cryptography.HMACSHA512"); }
        static /*constexpr*/ System::String* urlXmlDsig() { return _T("http://www.w3.org/2000/09/xmldsig#"); }
        static /*constexpr*/ System::String* urlDSASHA1() { return _T("http://www.w3.org/2000/09/xmldsig#dsa-sha1"); }
        static /*constexpr*/ System::String* urlRSASHA1() { return _T("http://www.w3.org/2000/09/xmldsig#rsa-sha1"); }
        static /*constexpr*/ System::String* urlSHA1() { return _T("http://www.w3.org/2000/09/xmldsig#sha1"); }
        static /*constexpr*/ System::String* urlC14N() { return _T("http://www.w3.org/TR/2001/REC-xml-c14n-20010315"); }
        static /*constexpr*/ System::String* urlC14NWithComments() { return _T("http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"); }
        static /*constexpr*/ System::String* urlBase64() { return _T("http://www.w3.org/2000/09/xmldsig#base64"); }
        static /*constexpr*/ System::String* urlXPath() { return _T("http://www.w3.org/TR/1999/REC-xpath-19991116"); }
        static /*constexpr*/ System::String* urlXslt() { return _T("http://www.w3.org/TR/1999/REC-xslt-19991116"); }
        static /*constexpr*/ System::String* urlEnveloped() { return _T("http://www.w3.org/2000/09/xmldsig#enveloped-signature"); }
        static /*constexpr*/ System::String* urlXmlDecryption() { return _T("http://www.w3.org/2002/07/decrypt#XML"); }
        static /*constexpr*/ System::String* urlExcC14NWithComments() { return _T("http://www.w3.org/2001/10/xml-exc-c14n#WithComments"); }
        static /*constexpr*/ System::String* urlExcC14N() { return _T("http://www.w3.org/2001/10/xml-exc-c14n#"); }
        static /*constexpr*/ System::String* urlSHA256() { return _T("http://www.w3.org/2001/04/xmlenc#sha256"); }
        static /*constexpr*/ System::String* urlSHA512() { return _T("http://www.w3.org/2001/04/xmlenc#sha512"); }
        static /*constexpr*/ System::String* urlHMACSHA256() { return _T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"); }
        static /*constexpr*/ System::String* urlHMACSHA384() { return _T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha384"); }
        static /*constexpr*/ System::String* urlHMACSHA512() { return _T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha512"); }
        static /*constexpr*/ System::String* urlHMACRIPEMD160() { return _T("http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160"); }
        static /*constexpr*/ System::String* urlX509Data() { return _T("http://www.w3.org/2000/09/xmldsig# X509Data"); }
        static /*constexpr*/ System::String* urlKeyName() { return _T("http://www.w3.org/2000/09/xmldsig# KeyName"); }
        static /*constexpr*/ System::String* urlKeyValueDSA() { return _T("http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue"); }
        static /*constexpr*/ System::String* urlKeyValueRSA() { return _T("http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue"); }
        static /*constexpr*/ System::String* urlRetrievalMethod() { return _T("http://www.w3.org/2000/09/xmldsig# RetrievalMethod"); }
        static /*constexpr*/ System::String* oidX509SubjectKeyIdentifier() { return _T("2.5.29.14"); }
        static /*constexpr*/ System::String* oidX509KeyUsage() { return _T("2.5.29.15"); }
        static /*constexpr*/ System::String* oidX509BasicConstraints() { return _T("2.5.29.19"); }
        static /*constexpr*/ System::String* oidX509EnhancedKeyUsage() { return _T("2.5.29.37"); }
        static /*constexpr*/ System::String* nameX509SubjectKeyIdentifier() { return _T("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameX509KeyUsage() { return _T("System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameX509BasicConstraints() { return _T("System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameX509EnhancedKeyUsage() { return _T("System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameX509Chain() { return _T("X509Chain"); }
        static /*constexpr*/ System::String* defaultX509Chain() { return _T("System.Security.Cryptography.X509Certificates.X509Chain, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* system_core_assembly() { return _T(", System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameAES_1() { return _T("AES"); }
        static /*constexpr*/ System::String* nameAES_2() { return _T("System.Security.Cryptography.AesCryptoServiceProvider"); }
        static /*constexpr*/ System::String* defaultAES_1() { return _T("System.Security.Cryptography.AesCryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameAESManaged_1() { return _T("AesManaged"); }
        static /*constexpr*/ System::String* nameAESManaged_2() { return _T("System.Security.Cryptography.AesManaged"); }
        static /*constexpr*/ System::String* defaultAESManaged() { return _T("System.Security.Cryptography.AesManaged, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameECDiffieHellman_1() { return _T("ECDH"); }
        static /*constexpr*/ System::String* nameECDiffieHellman_2() { return _T("ECDiffieHellman"); }
        static /*constexpr*/ System::String* nameECDiffieHellman_3() { return _T("ECDiffieHellmanCng"); }
        static /*constexpr*/ System::String* nameECDiffieHellman_4() { return _T("System.Security.Cryptography.ECDiffieHellmanCng"); }
        static /*constexpr*/ System::String* defaultECDiffieHellman() { return _T("System.Security.Cryptography.ECDiffieHellmanCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameECDsa_1() { return _T("ECDsa"); }
        static /*constexpr*/ System::String* nameECDsa_2() { return _T("ECDsaCng"); }
        static /*constexpr*/ System::String* nameECDsa_3() { return _T("System.Security.Cryptography.ECDsaCng"); }
        static /*constexpr*/ System::String* defaultECDsa() { return _T("System.Security.Cryptography.ECDsaCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA1Cng() { return _T("System.Security.Cryptography.SHA1Cng"); }
        static /*constexpr*/ System::String* defaultSHA1Cng() { return _T("System.Security.Cryptography.SHA1Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA256Cng() { return _T("System.Security.Cryptography.SHA256Cng"); }
        static /*constexpr*/ System::String* defaultSHA256Cng() { return _T("System.Security.Cryptography.SHA256Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA256Provider() { return _T("System.Security.Cryptography.SHA256CryptoServiceProvider"); }
        static /*constexpr*/ System::String* defaultSHA256Provider() { return _T("System.Security.Cryptography.SHA256CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA384Cng() { return _T("System.Security.Cryptography.SHA384Cng"); }
        static /*constexpr*/ System::String* defaultSHA384Cng() { return _T("System.Security.Cryptography.SHA384Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA384Provider() { return _T("System.Security.Cryptography.SHA384CryptoServiceProvider"); }
        static /*constexpr*/ System::String* defaultSHA384Provider() { return _T("System.Security.Cryptography.SHA384CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA512Cng() { return _T("System.Security.Cryptography.SHA512Cng"); }
        static /*constexpr*/ System::String* defaultSHA512Cng() { return _T("System.Security.Cryptography.SHA512Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* nameSHA512Provider() { return _T("System.Security.Cryptography.SHA512CryptoServiceProvider"); }
        static /*constexpr*/ System::String* defaultSHA512Provider() { return _T("System.Security.Cryptography.SHA512CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static System::Object* lockObject;
        static System::Collections::Generic::Dictionary<System::String*, System::Type*>* algorithms;
        static System::Collections::Generic::Dictionary<System::String*, System::String*>* unresolved_algorithms;
        static System::Collections::Generic::Dictionary<System::String*, System::String*>* oids;
        static System::Type* defaultSHA1;
        static System::Type* defaultMD5;
        static System::Type* defaultSHA256;
        static System::Type* defaultSHA384;
        static System::Type* defaultSHA512;
        static System::Type* defaultRSA;
        static System::Type* defaultDSA;
        static System::Type* defaultDES;
        static System::Type* default3DES;
        static System::Type* defaultRC2;
        static System::Type* defaultAES;
        static System::Type* defaultRNG;
        static System::Type* defaultHMAC;
        static System::Type* defaultMAC3DES;
        static System::Type* defaultDSASigDesc;
        static System::Type* defaultRSASigDesc;
        static System::Type* defaultRIPEMD160;
        static System::Type* defaultHMACMD5;
        static System::Type* defaultHMACRIPEMD160;
        static System::Type* defaultHMACSHA256;
        static System::Type* defaultHMACSHA384;
        static System::Type* defaultHMACSHA512;
        
        CryptoConfig();
        static void static_constructor();
        void constructor();
        static void Initialize();
        static void LoadConfig(System::String* filename, System::Collections::Generic::IDictionary2<System::String*, System::Type*>* algorithms, System::Collections::Generic::IDictionary2<System::String*, System::String*>* oid);
        static System::Object* CreateFromName(System::String* name);
        static System::Object* CreateFromName2(System::String* name, cli::array<System::Object*>* args);
        static System::String* MapNameToOID(System::String* name);
        static void AddAlgorithm(System::Type* algorithm, cli::array<System::String*>* names);
        static void AddOID(System::String* oid, cli::array<System::String*>* names);
        static cli::array<unsigned char>* EncodeOID(System::String* str);
        static cli::array<unsigned char>* EncodeLongNumber(int64_t x);
        static bool get_AllowOnlyFipsAlgorithms();
        
    };
    
    
    struct MANAGED_API CryptographicUnexpectedOperationException : public virtual CryptographicException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* format, System::String* insert);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API CryptoStream : public virtual System::IO::Stream{
        System::IO::Stream* _stream;
        ICryptoTransform* _transform;
        CryptoStreamMode _mode;
        cli::array<unsigned char>* _currentBlock;
        bool _disposed;
        bool _flushedFinalBlock;
        int32_t _partialCount;
        bool _endOfStream;
        cli::array<unsigned char>* _waitingBlock;
        int32_t _waitingCount;
        cli::array<unsigned char>* _transformedBlock;
        int32_t _transformedPos;
        int32_t _transformedCount;
        cli::array<unsigned char>* _workingBlock;
        int32_t _workingCount;
        
        void constructor(System::IO::Stream* stream, ICryptoTransform* transform, CryptoStreamMode mode);
        virtual void Finalize_2dcb8da4e954a525();
        void Clear();
        virtual int32_t Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) override;
        virtual void Flush_132821400030c993() override;
        void FlushFinalBlock();
        virtual int64_t Seek_df5b3eadfe9adf31(int64_t offset, System::IO::SeekOrigin origin) override;
        virtual void SetLength_18d421048f3d4df5(int64_t value) override;
        virtual void Dispose_b215be19126499b0(bool disposing) override;
        virtual bool get_CanRead_50a10d564be8aaa2() override;
        virtual bool get_CanSeek_8c8861ce02c6bdeb() override;
        virtual bool get_CanWrite_c8955eadfc77124c() override;
        virtual int64_t get_Length_ddb8b0d061db5350() override;
        virtual int64_t get_Position_5e75d5c458401f13() override;
        virtual int64_t set_Position_cfe1def757785ad(int64_t value) override;
        bool get_HasFlushedFinalBlock();
        
    };
    
    
    struct MANAGED_API CspKeyContainerInfo : public virtual System::Object{
        CspParameters* _params;
        bool _random;
        
        void constructor(CspParameters* parameters);
        bool get_Accessible();
        System::Security::AccessControl::CryptoKeySecurity* get_CryptoKeySecurity();
        bool get_Exportable();
        bool get_HardwareDevice();
        System::String* get_KeyContainerName();
        KeyNumber get_KeyNumber();
        bool get_MachineKeyStore();
        bool get_Protected();
        System::String* get_ProviderName();
        int32_t get_ProviderType();
        bool get_RandomlyGenerated();
        bool get_Removable();
        System::String* get_UniqueKeyContainerName();
        
    };
    
    
    struct MANAGED_API CspParameters : public virtual System::Object{
        CspProviderFlags _Flags;
        System::String* KeyContainerName;
        int32_t KeyNumber2;
        System::String* ProviderName;
        int32_t ProviderType;
        System::Security::SecureString* _password;
        void* _windowHandle;
        
        void constructor();
        void constructor(int32_t dwTypeIn);
        void constructor(int32_t dwTypeIn, System::String* strProviderNameIn);
        void constructor(int32_t dwTypeIn, System::String* strProviderNameIn, System::String* strContainerNameIn);
        void constructor(int32_t providerType, System::String* providerName, System::String* keyContainerName, System::Security::AccessControl::CryptoKeySecurity* cryptoKeySecurity, void* parentWindowHandle);
        void constructor(int32_t providerType, System::String* providerName, System::String* keyContainerName, System::Security::AccessControl::CryptoKeySecurity* cryptoKeySecurity, System::Security::SecureString* keyPassword);
        void constructor(CspParameters* parameters);
        CspProviderFlags get_Flags();
        CspProviderFlags set_Flags(CspProviderFlags value);
        System::Security::AccessControl::CryptoKeySecurity* get_CryptoKeySecurity();
        System::Security::AccessControl::CryptoKeySecurity* set_CryptoKeySecurity(System::Security::AccessControl::CryptoKeySecurity* value);
        System::Security::SecureString* get_KeyPassword();
        System::Security::SecureString* set_KeyPassword(System::Security::SecureString* value);
        void* get_ParentWindowHandle();
        void* set_ParentWindowHandle(void* value);
        
    };
    
    
    struct MANAGED_API DESTransform : public virtual Mono::Security::Cryptography::SymmetricTransform{
        static int32_t KEY_BIT_SIZE;
        static int32_t KEY_BYTE_SIZE;
        static int32_t BLOCK_BIT_SIZE;
        static int32_t BLOCK_BYTE_SIZE;
        cli::array<unsigned char>* keySchedule;
        cli::array<unsigned char>* byteBuff;
        cli::array<uint32_t>* dwordBuff;
        static cli::array<uint32_t>* spBoxes;
        static cli::array<unsigned char>* PC1;
        static cli::array<unsigned char>* leftRotTotal;
        static cli::array<unsigned char>* PC2;
        static cli::array<uint32_t>* ipTab;
        static cli::array<uint32_t>* fpTab;
        
        DESTransform();
        void constructor(SymmetricAlgorithm* symmAlgo, bool encryption, cli::array<unsigned char>* key, cli::array<unsigned char>* iv);
        static void static_constructor();
        uint32_t CipherFunct(uint32_t r, int32_t n);
        static void Permutation(cli::array<unsigned char>* input, cli::array<unsigned char>* output, cli::array<uint32_t>* permTab, bool preSwap);
        static void BSwap(cli::array<unsigned char>* byteBuff);
        void SetKey(cli::array<unsigned char>* key);
        void ProcessBlock(cli::array<unsigned char>* input, cli::array<unsigned char>* output);
        virtual void ECB_94d714c69347f447(cli::array<unsigned char>* input, cli::array<unsigned char>* output) override;
        static cli::array<unsigned char>* GetStrongKey();
        
    };
    
    
    struct MANAGED_API DESCryptoServiceProvider : public virtual DES{
        
        void constructor();
        virtual ICryptoTransform* CreateDecryptor_80e9c787d56cc5d1(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual ICryptoTransform* CreateEncryptor_5ed1e69e3ba0a86a(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual void GenerateIV_df3473e2513c2b00() override;
        virtual void GenerateKey_a6a62018358dfc76() override;
        
    };
    
    
    struct MANAGED_API DSACryptoServiceProvider : public virtual DSA, public virtual ICspAsymmetricAlgorithm{
        static constexpr int32_t PROV_DSS_DH = 13;
        Mono::Security::Cryptography::KeyPairPersistence* store;
        bool persistKey;
        bool persisted;
        bool privateKeyExportable;
        bool m_disposed;
        Mono::Security::Cryptography::DSAManaged* dsa;
        static bool useMachineKeyStore;
        
        DSACryptoServiceProvider();
        void constructor();
        void constructor(CspParameters* parameters);
        void constructor(int32_t dwKeySize);
        void constructor(int32_t dwKeySize, CspParameters* parameters);
        static void static_constructor();
        virtual void Finalize_bd77f2b481781f93();
        virtual DSAParameters ExportParameters_c041d0915f31506(bool includePrivateParameters) override;
        virtual void ImportParameters_42bffe0948290f21(DSAParameters parameters) override;
        virtual cli::array<unsigned char>* CreateSignature_9fa6bb91f702a4df(cli::array<unsigned char>* rgbHash) override;
        cli::array<unsigned char>* SignData(cli::array<unsigned char>* buffer);
        cli::array<unsigned char>* SignData2(cli::array<unsigned char>* buffer, int32_t offset, int32_t count);
        cli::array<unsigned char>* SignData3(System::IO::Stream* inputStream);
        cli::array<unsigned char>* SignHash(cli::array<unsigned char>* rgbHash, System::String* str);
        bool VerifyData(cli::array<unsigned char>* rgbData, cli::array<unsigned char>* rgbSignature);
        bool VerifyHash(cli::array<unsigned char>* rgbHash, System::String* str, cli::array<unsigned char>* rgbSignature);
        virtual bool VerifySignature_a25545e0d63f0901(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) override;
        virtual void Dispose_2369c0ba816a26e4(bool disposing) override;
        void OnKeyGenerated(System::Object* sender, System::EventArgs* e);
        cli::array<unsigned char>* ExportCspBlob(bool includePrivateParameters);
        void ImportCspBlob(cli::array<unsigned char>* keyBlob);
        virtual System::String* get_KeyExchangeAlgorithm_e4956689b1767b62() override;
        virtual int32_t get_KeySize_6bd474632c551ac() override;
        bool get_PersistKeyInCsp();
        bool set_PersistKeyInCsp(bool value);
        bool get_PublicOnly();
        virtual System::String* get_SignatureAlgorithm_94f2ebe82aebde31() override;
        static bool get_UseMachineKeyStore();
        static bool set_UseMachineKeyStore(bool value);
        CspKeyContainerInfo* get_CspKeyContainerInfo();
        
        virtual cli::array<unsigned char>* ExportCspBlob_9a31ab9dad32d592(bool includePrivateParameters) override;
        virtual void ImportCspBlob_4dc0b4a93c0b22fd(cli::array<unsigned char>* keyBlob) override;
        virtual CspKeyContainerInfo* get_CspKeyContainerInfo_e0b6cc9127ecfec0() override;
    };
    
    
    struct MANAGED_API DSASignatureDeformatter : public virtual AsymmetricSignatureDeformatter{
        DSA* dsa;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual void SetHashAlgorithm_5a7fb9c08aaf7ac9(System::String* strName) override;
        virtual void SetKey_d453955f9571ca18(AsymmetricAlgorithm* key) override;
        virtual bool VerifySignature_ecf649797288645c(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) override;
        
    };
    
    
    struct MANAGED_API DSASignatureFormatter : public virtual AsymmetricSignatureFormatter{
        DSA* dsa;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* CreateSignature_119f8aceb75b0d2(cli::array<unsigned char>* rgbHash) override;
        virtual void SetHashAlgorithm_9029a89c4cb706ce(System::String* strName) override;
        virtual void SetKey_1b1967336b333b5c(AsymmetricAlgorithm* key) override;
        
    };
    
    
    struct MANAGED_API FromBase64Transform : public virtual System::Object, public virtual ICryptoTransform, public virtual System::IDisposable{
        static constexpr unsigned char TerminatorByte = 61;
        FromBase64TransformMode mode;
        cli::array<unsigned char>* accumulator;
        int32_t accPtr;
        bool m_disposed;
        cli::array<unsigned char>* lookupTable;
        
        void constructor();
        void constructor(FromBase64TransformMode whitespaces);
        virtual void Finalize_a1463e6a115c6ea6();
        void Clear();
        void Dispose();
        virtual void Dispose_c94b8ed911b70760(bool disposing);
        unsigned char lookup(unsigned char input);
        int32_t ProcessBlock(cli::array<unsigned char>* output, int32_t offset);
        void CheckInputParameters(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        int32_t TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        cli::array<unsigned char>* TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        bool get_CanTransformMultipleBlocks();
        virtual bool get_CanReuseTransform_8fc1dde1dff87aad();
        int32_t get_InputBlockSize();
        int32_t get_OutputBlockSize();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
    
    struct MANAGED_API HMACMD5 : public virtual HMAC{
        
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        
    };
    
    
    struct MANAGED_API HMACRIPEMD160 : public virtual HMAC{
        
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        
    };
    
    
    struct MANAGED_API HMACSHA1 : public virtual HMAC{
        
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        void constructor(cli::array<unsigned char>* key, bool useManagedSha1);
        
    };
    
    
    struct MANAGED_API HMACSHA256 : public virtual HMAC{
        
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        
    };
    
    
    struct MANAGED_API HMACSHA384 : public virtual HMAC{
        static bool legacy_mode;
        bool legacy;
        
        HMACSHA384();
        static void static_constructor();
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        bool get_ProduceLegacyHmacValues();
        bool set_ProduceLegacyHmacValues(bool value);
        
    };
    
    
    struct MANAGED_API HMACSHA512 : public virtual HMAC{
        static bool legacy_mode;
        bool legacy;
        
        HMACSHA512();
        static void static_constructor();
        void constructor();
        void constructor(cli::array<unsigned char>* key);
        bool get_ProduceLegacyHmacValues();
        bool set_ProduceLegacyHmacValues(bool value);
        
    };
    
    
    struct MANAGED_API KeySizes : public virtual System::Object{
        int32_t _maxSize;
        int32_t _minSize;
        int32_t _skipSize;
        
        void constructor(int32_t minSize, int32_t maxSize, int32_t skipSize);
        bool IsLegal(int32_t keySize);
        static bool IsLegalKeySize(cli::array<KeySizes*>* legalKeys, int32_t size);
        int32_t get_MaxSize();
        int32_t get_MinSize();
        int32_t get_SkipSize();
        
    };
    
    
    struct MANAGED_API MACTripleDES : public virtual KeyedHashAlgorithm{
        TripleDES* tdes;
        Mono::Security::Cryptography::MACAlgorithm* mac;
        bool m_disposed;
        
        void constructor();
        void constructor(cli::array<unsigned char>* rgbKey);
        void constructor(System::String* strTripleDES, cli::array<unsigned char>* rgbKey);
        virtual void Finalize_e2d491b8234f80a8();
        void Setup(System::String* strTripleDES, cli::array<unsigned char>* rgbKey);
        virtual void Dispose_66239c1dbe6eca10(bool disposing) override;
        virtual void Initialize_4bdfe3e821ea432() override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgbData, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        PaddingMode get_Padding();
        PaddingMode set_Padding(PaddingMode value);
        
    };
    
    
    struct MANAGED_API MD5CryptoServiceProvider : public virtual MD5{
        static constexpr int32_t BLOCK_SIZE_BYTES = 64;
        cli::array<uint32_t>* _H;
        cli::array<uint32_t>* buff;
        uint64_t count;
        cli::array<unsigned char>* _ProcessingBuffer;
        int32_t _ProcessingBufferCount;
        static cli::array<uint32_t>* K;
        
        MD5CryptoServiceProvider();
        void constructor();
        static void static_constructor();
        virtual void Finalize_6f64855bf1dfddf4();
        virtual void Dispose_66239c1dbe6eca10(bool disposing) override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        virtual void Initialize_4bdfe3e821ea432() override;
        void ProcessBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset);
        void ProcessFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        void AddLength(uint64_t length, cli::array<unsigned char>* buffer, int32_t position);
        
    };
    
    
    struct MANAGED_API PasswordDeriveBytes : public virtual DeriveBytes2{
        System::String* HashNameValue;
        cli::array<unsigned char>* SaltValue;
        int32_t IterationsValue;
        HashAlgorithm* hash;
        int32_t state;
        cli::array<unsigned char>* password;
        cli::array<unsigned char>* initial;
        cli::array<unsigned char>* output;
        int32_t position;
        int32_t hashnumber;
        
        void constructor(System::String* strPassword, cli::array<unsigned char>* rgbSalt);
        void constructor(System::String* strPassword, cli::array<unsigned char>* rgbSalt, CspParameters* cspParams);
        void constructor(System::String* strPassword, cli::array<unsigned char>* rgbSalt, System::String* strHashName, int32_t iterations);
        void constructor(System::String* strPassword, cli::array<unsigned char>* rgbSalt, System::String* strHashName, int32_t iterations, CspParameters* cspParams);
        void constructor(cli::array<unsigned char>* password, cli::array<unsigned char>* salt);
        void constructor(cli::array<unsigned char>* password, cli::array<unsigned char>* salt, CspParameters* cspParams);
        void constructor(cli::array<unsigned char>* password, cli::array<unsigned char>* salt, System::String* hashName, int32_t iterations);
        void constructor(cli::array<unsigned char>* password, cli::array<unsigned char>* salt, System::String* hashName, int32_t iterations, CspParameters* cspParams);
        virtual void Finalize_9e228aaafe1da17f();
        virtual void Dispose_803fca5f32415300(bool disposing) override;
        void Prepare(System::String* strPassword, cli::array<unsigned char>* rgbSalt, System::String* strHashName, int32_t iterations);
        void Prepare2(cli::array<unsigned char>* password, cli::array<unsigned char>* rgbSalt, System::String* strHashName, int32_t iterations);
        cli::array<unsigned char>* CryptDeriveKey(System::String* algname, System::String* alghashname, int32_t keySize, cli::array<unsigned char>* rgbIV);
        virtual cli::array<unsigned char>* GetBytes_ad106635b376b402(int32_t cb) override;
        virtual void Reset_638e8b09d94d54e4() override;
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        int32_t get_IterationCount();
        int32_t set_IterationCount(int32_t value);
        cli::array<unsigned char>* get_Salt();
        cli::array<unsigned char>* set_Salt(cli::array<unsigned char>* value);
        
    };
    
    
    struct MANAGED_API PKCS1MaskGenerationMethod : public virtual MaskGenerationMethod{
        System::String* hashName;
        
        void constructor();
        virtual cli::array<unsigned char>* GenerateMask_234a8635eaf4eb53(cli::array<unsigned char>* rgbSeed, int32_t cbReturn) override;
        System::String* get_HashName();
        System::String* set_HashName(System::String* value);
        
    };
    
    
    struct MANAGED_API RC2CryptoServiceProvider : public virtual RC2{
        bool _useSalt;
        
        void constructor();
        virtual ICryptoTransform* CreateDecryptor_80e9c787d56cc5d1(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual ICryptoTransform* CreateEncryptor_5ed1e69e3ba0a86a(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual void GenerateIV_df3473e2513c2b00() override;
        virtual void GenerateKey_a6a62018358dfc76() override;
        virtual int32_t get_EffectiveKeySize_5d48beb267b8d37a() override;
        virtual int32_t set_EffectiveKeySize_724f57ed7427a770(int32_t value) override;
        bool get_UseSalt();
        bool set_UseSalt(bool value);
        
    };
    
    
    struct MANAGED_API RC2Transform : public virtual Mono::Security::Cryptography::SymmetricTransform{
        uint16_t R0;
        cli::array<uint16_t>* K;
        int32_t j;
        static cli::array<unsigned char>* pitable;
        uint16_t R1;
        uint16_t R2;
        uint16_t R3;
        
        RC2Transform();
        void constructor(RC2* rc2Algo, bool encryption, cli::array<unsigned char>* key, cli::array<unsigned char>* iv);
        static void static_constructor();
        virtual void ECB_94d714c69347f447(cli::array<unsigned char>* input, cli::array<unsigned char>* output) override;
        
    };
    
    
    struct MANAGED_API Rfc2898DeriveBytes : public virtual DeriveBytes2{
        static constexpr int32_t defaultIterations = 1000;
        int32_t _iteration;
        cli::array<unsigned char>* _salt;
        HMACSHA1* _hmac;
        cli::array<unsigned char>* _buffer;
        int32_t _pos;
        int32_t _f;
        
        void constructor(System::String* password, cli::array<unsigned char>* salt);
        void constructor(System::String* password, cli::array<unsigned char>* salt, int32_t iterations);
        void constructor(cli::array<unsigned char>* password, cli::array<unsigned char>* salt, int32_t iterations);
        void constructor(System::String* password, int32_t saltSize);
        void constructor(System::String* password, int32_t saltSize, int32_t iterations);
        cli::array<unsigned char>* F(cli::array<unsigned char>* s, int32_t c, int32_t i);
        virtual cli::array<unsigned char>* GetBytes_ad106635b376b402(int32_t cb) override;
        virtual void Reset_638e8b09d94d54e4() override;
        virtual void Dispose_803fca5f32415300(bool disposing) override;
        int32_t get_IterationCount();
        int32_t set_IterationCount(int32_t value);
        cli::array<unsigned char>* get_Salt();
        cli::array<unsigned char>* set_Salt(cli::array<unsigned char>* value);
        
    };
    
    
    struct MANAGED_API RijndaelManaged : public virtual Rijndael{
        
        void constructor();
        virtual void GenerateIV_df3473e2513c2b00() override;
        virtual void GenerateKey_a6a62018358dfc76() override;
        virtual ICryptoTransform* CreateDecryptor_80e9c787d56cc5d1(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual ICryptoTransform* CreateEncryptor_5ed1e69e3ba0a86a(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        
    };
    
    
    struct MANAGED_API RijndaelTransform : public virtual Mono::Security::Cryptography::SymmetricTransform{
        cli::array<uint32_t>* expandedKey;
        int32_t Nb;
        int32_t Nk;
        int32_t Nr;
        static cli::array<uint32_t>* Rcon;
        static cli::array<unsigned char>* SBox;
        static cli::array<unsigned char>* iSBox;
        static cli::array<uint32_t>* T0;
        static cli::array<uint32_t>* T1;
        static cli::array<uint32_t>* T2;
        static cli::array<uint32_t>* T3;
        static cli::array<uint32_t>* iT0;
        static cli::array<uint32_t>* iT1;
        static cli::array<uint32_t>* iT2;
        static cli::array<uint32_t>* iT3;
        
        RijndaelTransform();
        void constructor(Rijndael* algo, bool encryption, cli::array<unsigned char>* key, cli::array<unsigned char>* iv);
        static void static_constructor();
        void Clear();
        virtual void ECB_94d714c69347f447(cli::array<unsigned char>* input, cli::array<unsigned char>* output) override;
        uint32_t SubByte(uint32_t a);
        void Encrypt128(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        void Encrypt192(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        void Encrypt256(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        void Decrypt128(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        void Decrypt192(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        void Decrypt256(cli::array<unsigned char>* indata, cli::array<unsigned char>* outdata, cli::array<uint32_t>* ekey);
        
    };
    
    
    struct MANAGED_API RijndaelManagedTransform : public virtual System::Object, public virtual ICryptoTransform, public virtual System::IDisposable{
        RijndaelTransform* _st;
        int32_t _bs;
        
        void constructor(Rijndael* algo, bool encryption, cli::array<unsigned char>* key, cli::array<unsigned char>* iv);
        void Clear();
        void Reset();
        void Dispose();
        int32_t TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        cli::array<unsigned char>* TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        int32_t get_BlockSizeValue();
        bool get_CanTransformMultipleBlocks();
        bool get_CanReuseTransform();
        int32_t get_InputBlockSize();
        int32_t get_OutputBlockSize();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
    
    struct MANAGED_API RIPEMD160Managed : public virtual RIPEMD160{
        static constexpr int32_t BLOCK_SIZE_BYTES = 64;
        cli::array<unsigned char>* _ProcessingBuffer;
        cli::array<uint32_t>* _X;
        cli::array<uint32_t>* _HashValue;
        uint64_t _Length;
        int32_t _ProcessingBufferCount;
        
        void constructor();
        virtual void Finalize_57f0d4252ca69bc();
        virtual void Initialize_4bdfe3e821ea432() override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        void ProcessBlock(cli::array<unsigned char>* buffer, int32_t offset);
        void Compress();
        void CompressFinal(uint64_t length);
        uint32_t ROL(uint32_t x, int32_t n);
        uint32_t F(uint32_t x, uint32_t y, uint32_t z);
        uint32_t G(uint32_t x, uint32_t y, uint32_t z);
        uint32_t H(uint32_t x, uint32_t y, uint32_t z);
        uint32_t I(uint32_t x, uint32_t y, uint32_t z);
        uint32_t J(uint32_t x, uint32_t y, uint32_t z);
        void FF(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void GG(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void HH(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void II(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void JJ(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void FFF(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void GGG(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void HHH(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void III(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        void JJJ(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t e, uint32_t x, int32_t s);
        
    };
    
    
    struct MANAGED_API RNGCryptoServiceProvider : public virtual RandomNumberGenerator{
        static System::Object* _lock;
        void* _handle;
        
        RNGCryptoServiceProvider();
        static void static_constructor();
        void constructor();
        void constructor(cli::array<unsigned char>* rgb);
        void constructor(CspParameters* cspParams);
        void constructor(System::String* str);
        virtual void Finalize_99656142092ef5a3();
        void Check();
        static bool RngOpen();
        static void* RngInitialize(cli::array<unsigned char>* seed);
        static void* RngGetBytes(void* handle, cli::array<unsigned char>* data);
        static void RngClose(void* handle);
        virtual void GetBytes_bf6c3bc1baf70dfd(cli::array<unsigned char>* data) override;
        virtual void GetNonZeroBytes_eb33fce7e843c67b(cli::array<unsigned char>* data) override;
        virtual void Dispose_322058ebc1ad4f39(bool disposing) override;
        
    };
    
    
    struct MANAGED_API RSACryptoServiceProvider : public virtual RSA, public virtual ICspAsymmetricAlgorithm{
        static constexpr int32_t PROV_RSA_FULL = 1;
        Mono::Security::Cryptography::KeyPairPersistence* store;
        bool persistKey;
        bool persisted;
        bool privateKeyExportable;
        bool m_disposed;
        Mono::Security::Cryptography::RSAManaged* rsa;
        static bool useMachineKeyStore;
        
        RSACryptoServiceProvider();
        void constructor();
        void constructor(CspParameters* parameters);
        void constructor(int32_t dwKeySize);
        void constructor(int32_t dwKeySize, CspParameters* parameters);
        static void static_constructor();
        virtual void Finalize_5e9ea80be174b9c6();
        void Common(int32_t dwKeySize, CspParameters* p);
        cli::array<unsigned char>* Decrypt(cli::array<unsigned char>* rgb, bool fOAEP);
        virtual cli::array<unsigned char>* DecryptValue_e0f03fff133976bf(cli::array<unsigned char>* rgb) override;
        cli::array<unsigned char>* Encrypt(cli::array<unsigned char>* rgb, bool fOAEP);
        virtual cli::array<unsigned char>* EncryptValue_16a44acec74209ed(cli::array<unsigned char>* rgb) override;
        virtual RSAParameters ExportParameters_f406cf113d936197(bool includePrivateParameters) override;
        virtual void ImportParameters_43620ad65e380dd(RSAParameters parameters) override;
        HashAlgorithm* GetHash(System::Object* halg);
        cli::array<unsigned char>* SignData(cli::array<unsigned char>* buffer, System::Object* halg);
        cli::array<unsigned char>* SignData2(System::IO::Stream* inputStream, System::Object* halg);
        cli::array<unsigned char>* SignData3(cli::array<unsigned char>* buffer, int32_t offset, int32_t count, System::Object* halg);
        System::String* GetHashNameFromOID(System::String* oid);
        cli::array<unsigned char>* SignHash(cli::array<unsigned char>* rgbHash, System::String* str);
        bool VerifyData(cli::array<unsigned char>* buffer, System::Object* halg, cli::array<unsigned char>* signature);
        bool VerifyHash(cli::array<unsigned char>* rgbHash, System::String* str, cli::array<unsigned char>* rgbSignature);
        virtual void Dispose_2369c0ba816a26e4(bool disposing) override;
        void OnKeyGenerated(System::Object* sender, System::EventArgs* e);
        cli::array<unsigned char>* ExportCspBlob(bool includePrivateParameters);
        void ImportCspBlob(cli::array<unsigned char>* keyBlob);
        static bool get_UseMachineKeyStore();
        static bool set_UseMachineKeyStore(bool value);
        virtual System::String* get_KeyExchangeAlgorithm_e4956689b1767b62() override;
        virtual int32_t get_KeySize_6bd474632c551ac() override;
        bool get_PersistKeyInCsp();
        bool set_PersistKeyInCsp(bool value);
        bool get_PublicOnly();
        virtual System::String* get_SignatureAlgorithm_94f2ebe82aebde31() override;
        CspKeyContainerInfo* get_CspKeyContainerInfo();
        
        virtual cli::array<unsigned char>* ExportCspBlob_9a31ab9dad32d592(bool includePrivateParameters) override;
        virtual void ImportCspBlob_4dc0b4a93c0b22fd(cli::array<unsigned char>* keyBlob) override;
        virtual CspKeyContainerInfo* get_CspKeyContainerInfo_e0b6cc9127ecfec0() override;
    };
    
    
    struct MANAGED_API RSAOAEPKeyExchangeDeformatter : public virtual AsymmetricKeyExchangeDeformatter{
        RSA* rsa;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* DecryptKeyExchange_a085cba75fa7b7e8(cli::array<unsigned char>* rgbData) override;
        virtual void SetKey_bd4b3e1db375026(AsymmetricAlgorithm* key) override;
        virtual System::String* get_Parameters_24dbb412163f248d() override;
        virtual System::String* set_Parameters_f734d1cc05a7e81b(System::String* value) override;
        
    };
    
    
    struct MANAGED_API RSAOAEPKeyExchangeFormatter : public virtual AsymmetricKeyExchangeFormatter{
        RSA* rsa;
        RandomNumberGenerator* random;
        cli::array<unsigned char>* param;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* CreateKeyExchange_57ddeacaf3382dd4(cli::array<unsigned char>* rgbData) override;
        virtual cli::array<unsigned char>* CreateKeyExchange_d7106f3b8416be39(cli::array<unsigned char>* rgbData, System::Type* symAlgType) override;
        virtual void SetKey_4186746ff8b83ffd(AsymmetricAlgorithm* key) override;
        cli::array<unsigned char>* get_Parameter();
        cli::array<unsigned char>* set_Parameter(cli::array<unsigned char>* value);
        virtual System::String* get_Parameters_c99e16816ae9e82d() override;
        RandomNumberGenerator* get_Rng();
        RandomNumberGenerator* set_Rng(RandomNumberGenerator* value);
        
    };
    
    
    struct MANAGED_API RSAPKCS1KeyExchangeDeformatter : public virtual AsymmetricKeyExchangeDeformatter{
        RSA* rsa;
        RandomNumberGenerator* random;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* DecryptKeyExchange_a085cba75fa7b7e8(cli::array<unsigned char>* rgbIn) override;
        virtual void SetKey_bd4b3e1db375026(AsymmetricAlgorithm* key) override;
        virtual System::String* get_Parameters_24dbb412163f248d() override;
        virtual System::String* set_Parameters_f734d1cc05a7e81b(System::String* value) override;
        RandomNumberGenerator* get_RNG();
        RandomNumberGenerator* set_RNG(RandomNumberGenerator* value);
        
    };
    
    
    struct MANAGED_API RSAPKCS1KeyExchangeFormatter : public virtual AsymmetricKeyExchangeFormatter{
        RSA* rsa;
        RandomNumberGenerator* random;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* CreateKeyExchange_57ddeacaf3382dd4(cli::array<unsigned char>* rgbData) override;
        virtual cli::array<unsigned char>* CreateKeyExchange_d7106f3b8416be39(cli::array<unsigned char>* rgbData, System::Type* symAlgType) override;
        void SetRSAKey(AsymmetricAlgorithm* key);
        virtual void SetKey_4186746ff8b83ffd(AsymmetricAlgorithm* key) override;
        RandomNumberGenerator* get_Rng();
        RandomNumberGenerator* set_Rng(RandomNumberGenerator* value);
        virtual System::String* get_Parameters_c99e16816ae9e82d() override;
        
    };
    
    
    struct MANAGED_API RSAPKCS1SignatureDeformatter : public virtual AsymmetricSignatureDeformatter{
        RSA* rsa;
        System::String* hashName;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual void SetHashAlgorithm_5a7fb9c08aaf7ac9(System::String* strName) override;
        virtual void SetKey_d453955f9571ca18(AsymmetricAlgorithm* key) override;
        virtual bool VerifySignature_ecf649797288645c(cli::array<unsigned char>* rgbHash, cli::array<unsigned char>* rgbSignature) override;
        
    };
    
    
    struct MANAGED_API RSAPKCS1SignatureFormatter : public virtual AsymmetricSignatureFormatter{
        RSA* rsa;
        HashAlgorithm* hash;
        
        void constructor();
        void constructor(AsymmetricAlgorithm* key);
        virtual cli::array<unsigned char>* CreateSignature_119f8aceb75b0d2(cli::array<unsigned char>* rgbHash) override;
        virtual void SetHashAlgorithm_9029a89c4cb706ce(System::String* strName) override;
        virtual void SetKey_1b1967336b333b5c(AsymmetricAlgorithm* key) override;
        
    };
    
    
    struct MANAGED_API SHA1Internal : public virtual System::Object{
        static constexpr int32_t BLOCK_SIZE_BYTES = 64;
        cli::array<uint32_t>* _H;
        uint64_t count;
        cli::array<unsigned char>* _ProcessingBuffer;
        int32_t _ProcessingBufferCount;
        cli::array<uint32_t>* buff;
        
        void constructor();
        void HashCore(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize);
        cli::array<unsigned char>* HashFinal();
        void Initialize();
        void ProcessBlock(cli::array<unsigned char>* inputBuffer, uint32_t inputOffset);
        static void InitialiseBuff(cli::array<uint32_t>* buff, cli::array<unsigned char>* input, uint32_t inputOffset);
        static void FillBuff(cli::array<uint32_t>* buff);
        void ProcessFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        void AddLength(uint64_t length, cli::array<unsigned char>* buffer, int32_t position);
        
    };
    
    
    struct MANAGED_API SHA1CryptoServiceProvider : public virtual SHA1{
        SHA1Internal* sha;
        
        void constructor();
        virtual void Finalize_62c720bdfe815947();
        virtual void Dispose_66239c1dbe6eca10(bool disposing) override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        virtual void Initialize_4bdfe3e821ea432() override;
        
    };
    
    
    struct MANAGED_API SHA1Managed : public virtual SHA1{
        SHA1Internal* sha;
        
        void constructor();
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        virtual void Initialize_4bdfe3e821ea432() override;
        
    };
    
    
    struct MANAGED_API SHA256Managed : public virtual SHA256{
        static constexpr int32_t BLOCK_SIZE_BYTES = 64;
        cli::array<uint32_t>* _H;
        uint64_t count;
        cli::array<unsigned char>* _ProcessingBuffer;
        int32_t _ProcessingBufferCount;
        cli::array<uint32_t>* buff;
        
        void constructor();
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        virtual void Initialize_4bdfe3e821ea432() override;
        void ProcessBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset);
        void ProcessFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        void AddLength(uint64_t length, cli::array<unsigned char>* buffer, int32_t position);
        
    };
    
    
    struct MANAGED_API SHA384Managed : public virtual SHA384{
        cli::array<unsigned char>* xBuf;
        int32_t xBufOff;
        uint64_t byteCount1;
        uint64_t byteCount2;
        uint64_t H1;
        cli::array<uint64_t>* W;
        int32_t wOff;
        uint64_t H2;
        uint64_t H3;
        uint64_t H4;
        uint64_t H5;
        uint64_t H6;
        uint64_t H7;
        uint64_t H8;
        
        void constructor();
        void Initialize(bool reuse);
        virtual void Initialize_4bdfe3e821ea432() override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        void update(unsigned char input);
        void processWord(cli::array<unsigned char>* input, int32_t inOff);
        void unpackWord(uint64_t word, cli::array<unsigned char>* output, int32_t outOff);
        void adjustByteCounts();
        void processLength(uint64_t lowW, uint64_t hiW);
        void processBlock();
        
    };
    
    
    struct MANAGED_API SHA512Managed : public virtual SHA512{
        cli::array<unsigned char>* xBuf;
        int32_t xBufOff;
        uint64_t byteCount1;
        uint64_t byteCount2;
        uint64_t H1;
        cli::array<uint64_t>* W;
        int32_t wOff;
        uint64_t H2;
        uint64_t H3;
        uint64_t H4;
        uint64_t H5;
        uint64_t H6;
        uint64_t H7;
        uint64_t H8;
        
        void constructor();
        void Initialize(bool reuse);
        virtual void Initialize_4bdfe3e821ea432() override;
        virtual void HashCore_8c4be9c0eca56be6(cli::array<unsigned char>* rgb, int32_t ibStart, int32_t cbSize) override;
        virtual cli::array<unsigned char>* HashFinal_58940e7c7f2519b1() override;
        void update(unsigned char input);
        void processWord(cli::array<unsigned char>* input, int32_t inOff);
        void unpackWord(uint64_t word, cli::array<unsigned char>* output, int32_t outOff);
        void adjustByteCounts();
        void processLength(uint64_t lowW, uint64_t hiW);
        void processBlock();
        uint64_t rotateRight(uint64_t x, int32_t n);
        uint64_t Ch(uint64_t x, uint64_t y, uint64_t z);
        uint64_t Maj(uint64_t x, uint64_t y, uint64_t z);
        uint64_t Sum0(uint64_t x);
        uint64_t Sum1(uint64_t x);
        uint64_t Sigma0(uint64_t x);
        uint64_t Sigma1(uint64_t x);
        
    };
    
    
    struct MANAGED_API SHAConstants : public virtual System::Object{
        static cli::array<uint32_t>* K1;
        static cli::array<uint64_t>* K2;
        
        SHAConstants();
        static void static_constructor();
        
    };
    
    
    struct MANAGED_API DSASignatureDescription : public virtual SignatureDescription{
        
        void constructor();
        
    };
    
    
    struct MANAGED_API RSAPKCS1SHA1SignatureDescription : public virtual SignatureDescription{
        
        void constructor();
        virtual AsymmetricSignatureDeformatter* CreateDeformatter_8eb8daaf249d6ff0(AsymmetricAlgorithm* key) override;
        
    };
    
    
    struct MANAGED_API ToBase64Transform : public virtual System::Object, public virtual ICryptoTransform, public virtual System::IDisposable{
        static constexpr int32_t inputBlockSize = 3;
        static constexpr int32_t outputBlockSize = 4;
        bool m_disposed;
        
        void constructor();
        virtual void Finalize_ab7e804173f971c();
        void Clear();
        void Dispose();
        virtual void Dispose_1cc14386475cd361(bool disposing);
        int32_t TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        static void InternalTransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset);
        cli::array<unsigned char>* TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        static cli::array<unsigned char>* InternalTransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount);
        bool get_CanTransformMultipleBlocks();
        virtual bool get_CanReuseTransform_ab8331e898b19c7c();
        int32_t get_InputBlockSize();
        int32_t get_OutputBlockSize();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual int32_t TransformBlock_66947c2464acaa4b(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) override;
        virtual cli::array<unsigned char>* TransformFinalBlock_24eabce3605cc4ff(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) override;
        virtual bool get_CanTransformMultipleBlocks_711dcde861c62b70() override;
        virtual bool get_CanReuseTransform_a8f6dfeea811518b() override;
        virtual int32_t get_InputBlockSize_96223a4af50041fd() override;
        virtual int32_t get_OutputBlockSize_970895ff24f2d445() override;
    };
    
    
    struct MANAGED_API TripleDESCryptoServiceProvider : public virtual TripleDES{
        
        void constructor();
        virtual void GenerateIV_df3473e2513c2b00() override;
        virtual void GenerateKey_a6a62018358dfc76() override;
        virtual ICryptoTransform* CreateDecryptor_80e9c787d56cc5d1(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        virtual ICryptoTransform* CreateEncryptor_5ed1e69e3ba0a86a(cli::array<unsigned char>* rgbKey, cli::array<unsigned char>* rgbIV) override;
        
    };
    
    
    struct MANAGED_API TripleDESTransform : public virtual Mono::Security::Cryptography::SymmetricTransform{
        DESTransform* E1;
        DESTransform* D2;
        DESTransform* E3;
        DESTransform* D1;
        DESTransform* E2;
        DESTransform* D3;
        
        void constructor(TripleDES* algo, bool encryption, cli::array<unsigned char>* key, cli::array<unsigned char>* iv);
        virtual void ECB_94d714c69347f447(cli::array<unsigned char>* input, cli::array<unsigned char>* output) override;
        static cli::array<unsigned char>* GetStrongKey();
        
    };
    
}}}
namespace System { namespace Security { namespace Cryptography { namespace X509Certificates {
    
    struct MANAGED_API X509Certificate2 : public virtual System::Object, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual System::Runtime::Serialization::ISerializable{
        Mono::Security::X509::X509Certificate* x509;
        bool hideDates;
        cli::array<unsigned char>* cachedCertificateHash;
        System::String* issuer_name;
        System::String* subject_name;
        
        void constructor(cli::array<unsigned char>* data, bool dates);
        void constructor(cli::array<unsigned char>* data);
        void constructor(void* handle);
        void constructor(X509Certificate2* cert);
        void constructor();
        void constructor(cli::array<unsigned char>* rawData, System::String* password);
        void constructor(cli::array<unsigned char>* rawData, System::Security::SecureString* password);
        void constructor(cli::array<unsigned char>* rawData, System::String* password, X509KeyStorageFlags keyStorageFlags);
        void constructor(cli::array<unsigned char>* rawData, System::Security::SecureString* password, X509KeyStorageFlags keyStorageFlags);
        void constructor(System::String* fileName);
        void constructor(System::String* fileName, System::String* password);
        void constructor(System::String* fileName, System::Security::SecureString* password);
        void constructor(System::String* fileName, System::String* password, X509KeyStorageFlags keyStorageFlags);
        void constructor(System::String* fileName, System::Security::SecureString* password, X509KeyStorageFlags keyStorageFlags);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::String* tostr(cli::array<unsigned char>* data);
        static X509Certificate2* CreateFromCertFile(System::String* filename);
        static X509Certificate2* CreateFromSignedFile(System::String* filename);
        void InitFromHandle(void* handle);
        virtual bool Equals_4ee033c835248c9d(X509Certificate2* other);
        virtual cli::array<unsigned char>* GetCertHash_6e5c891031851f85();
        virtual System::String* GetCertHashString_6f21abd347a44d33();
        virtual System::String* GetEffectiveDateString_a7d11e3256f7e438();
        virtual System::String* GetExpirationDateString_bfe4aedffdbc9727();
        virtual System::String* GetFormat_9d02941013991518();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* GetIssuerName_b07b655a589baba();
        virtual System::String* GetKeyAlgorithm_bc8b5dfe7d8b4e74();
        virtual cli::array<unsigned char>* GetKeyAlgorithmParameters_e877a3b6d57d563e();
        virtual System::String* GetKeyAlgorithmParametersString_8c98fdf4c4c5b8c9();
        virtual System::String* GetName_27e249535074211f();
        virtual cli::array<unsigned char>* GetPublicKey_dfa105cbfdc38326();
        virtual System::String* GetPublicKeyString_883dde0135cf6f31();
        virtual cli::array<unsigned char>* GetRawCertData_ac3e339ae8bdb569();
        virtual System::String* GetRawCertDataString_9b5d755fdca2c386();
        virtual cli::array<unsigned char>* GetSerialNumber_30200c16d792461f();
        virtual System::String* GetSerialNumberString_e8d5e8bf0d47fe1c();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual System::String* ToString_15fae504dac2a2c0(bool fVerbose);
        static cli::array<unsigned char>* Load(System::String* fileName);
        static System::String* FormatDate(System::DateTime date);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual cli::array<unsigned char>* Export_abe12b767ba3c001(X509ContentType contentType);
        virtual cli::array<unsigned char>* Export_5306d1a57883d7c1(X509ContentType contentType, System::String* password);
        virtual cli::array<unsigned char>* Export_feb9d7cd54387416(X509ContentType contentType, System::Security::SecureString* password);
        cli::array<unsigned char>* Export4(X509ContentType contentType, cli::array<unsigned char>* password);
        virtual void Import_77a5439bc691b240(cli::array<unsigned char>* rawData);
        virtual void Import_8704c488ef852461(cli::array<unsigned char>* rawData, System::String* password, X509KeyStorageFlags keyStorageFlags);
        virtual void Import_49d225ed0ddfc5ed(cli::array<unsigned char>* rawData, System::Security::SecureString* password, X509KeyStorageFlags keyStorageFlags);
        virtual void Import_b500b50331e43dd3(System::String* fileName);
        virtual void Import_f6c9177991fa38c4(System::String* fileName, System::String* password, X509KeyStorageFlags keyStorageFlags);
        virtual void Import_32240950aa38999e(System::String* fileName, System::Security::SecureString* password, X509KeyStorageFlags keyStorageFlags);
        void OnDeserialization(System::Object* sender);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual void Reset_82cf81433177234a();
        System::String* get_Issuer();
        System::String* get_Subject();
        void* get_Handle();
        
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
}}}}
namespace System { namespace Security { namespace Permissions {
    
    struct MANAGED_API EnvironmentPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        PermissionState _state;
        System::Collections::ArrayList* readList;
        System::Collections::ArrayList* writeList;
        
        void constructor(PermissionState state);
        void constructor(EnvironmentPermissionAccess flag, System::String* pathList);
        void AddPathList(EnvironmentPermissionAccess flag, System::String* pathList);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        System::String* GetPathList(EnvironmentPermissionAccess flag);
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        void SetPathList(EnvironmentPermissionAccess flag, System::String* pathList);
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* other) override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        EnvironmentPermission* Cast(System::Security::IPermission* target);
        void ThrowInvalidFlag(EnvironmentPermissionAccess flag, bool context);
        System::String* GetPathList2(System::Collections::ArrayList* list);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* other) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API EnvironmentPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* read;
        System::String* write;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_All();
        System::String* set_All(System::String* value);
        System::String* get_Read();
        System::String* set_Read(System::String* value);
        System::String* get_Write();
        System::String* set_Write(System::String* value);
        
    };
    
    
    struct MANAGED_API FileDialogPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        FileDialogPermissionAccess _access;
        
        void constructor(PermissionState state);
        void constructor(FileDialogPermissionAccess access);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        FileDialogPermission* Cast(System::Security::IPermission* target);
        FileDialogPermissionAccess get_Access();
        FileDialogPermissionAccess set_Access(FileDialogPermissionAccess value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API FileDialogPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        bool canOpen;
        bool canSave;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        bool get_Open();
        bool set_Open(bool value);
        bool get_Save();
        bool set_Save(bool value);
        
    };
    
    
    struct MANAGED_API FileIOPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission, public virtual IUnrestrictedPermission{
        static constexpr int32_t version = 1;
        static cli::array<char16_t>* BadPathNameCharacters;
        static cli::array<char16_t>* BadFileNameCharacters;
        bool m_Unrestricted;
        FileIOPermissionAccess m_AllFilesAccess;
        FileIOPermissionAccess m_AllLocalFilesAccess;
        System::Collections::ArrayList* readList;
        System::Collections::ArrayList* writeList;
        System::Collections::ArrayList* appendList;
        System::Collections::ArrayList* pathList;
        
        FileIOPermission();
        static void static_constructor();
        void constructor(PermissionState state);
        void constructor(FileIOPermissionAccess access, System::String* path);
        void constructor(FileIOPermissionAccess access, cli::array<System::String*>* pathList);
        void constructor(FileIOPermissionAccess access, System::Security::AccessControl::AccessControlActions control, System::String* path);
        void constructor(FileIOPermissionAccess access, System::Security::AccessControl::AccessControlActions control, cli::array<System::String*>* pathList);
        void CreateLists();
        void AddPathList(FileIOPermissionAccess access, System::String* path);
        void AddPathList2(FileIOPermissionAccess access, cli::array<System::String*>* pathList);
        void AddPathInternal(FileIOPermissionAccess access, System::String* path);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        cli::array<System::String*>* GetPathList(FileIOPermissionAccess access);
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        void SetPathList(FileIOPermissionAccess access, System::String* path);
        void SetPathList2(FileIOPermissionAccess access, cli::array<System::String*>* pathList);
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* other) override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        static FileIOPermission* Cast(System::Security::IPermission* target);
        static void ThrowInvalidFlag(FileIOPermissionAccess access, bool context);
        static void ThrowIfInvalidPath(System::String* path);
        static void ThrowIfInvalidPath2(cli::array<System::String*>* paths);
        void Clear(FileIOPermissionAccess access);
        static bool KeyIsSubsetOf(System::Collections::IList* local, System::Collections::IList* target);
        static void UnionKeys(System::Collections::IList* list, cli::array<System::String*>* paths);
        static void IntersectKeys(System::Collections::IList* local, System::Collections::IList* target, System::Collections::IList* result);
        FileIOPermissionAccess get_AllFiles();
        FileIOPermissionAccess set_AllFiles(FileIOPermissionAccess value);
        FileIOPermissionAccess get_AllLocalFiles();
        FileIOPermissionAccess set_AllLocalFiles(FileIOPermissionAccess value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* other) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API FileIOPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* append;
        System::String* path;
        System::String* read;
        System::String* write;
        FileIOPermissionAccess allFiles;
        FileIOPermissionAccess allLocalFiles;
        System::String* changeAccessControl;
        System::String* viewAccessControl;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_All();
        System::String* set_All(System::String* value);
        System::String* get_Append();
        System::String* set_Append(System::String* value);
        System::String* get_PathDiscovery();
        System::String* set_PathDiscovery(System::String* value);
        System::String* get_Read();
        System::String* set_Read(System::String* value);
        System::String* get_Write();
        System::String* set_Write(System::String* value);
        FileIOPermissionAccess get_AllFiles();
        FileIOPermissionAccess set_AllFiles(FileIOPermissionAccess value);
        FileIOPermissionAccess get_AllLocalFiles();
        FileIOPermissionAccess set_AllLocalFiles(FileIOPermissionAccess value);
        System::String* get_ChangeAccessControl();
        System::String* set_ChangeAccessControl(System::String* value);
        System::String* get_ViewAccessControl();
        System::String* set_ViewAccessControl(System::String* value);
        System::String* get_ViewAndModify();
        System::String* set_ViewAndModify(System::String* value);
        
    };
    
    
    struct MANAGED_API GacIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        
        void constructor();
        void constructor(PermissionState state);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* securityElement) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        int32_t GetTokenIndex();
        GacIdentityPermission* Cast(System::Security::IPermission* target);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API GacIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        
    };
    
    
    struct MANAGED_API HostProtectionAttribute : public virtual CodeAccessSecurityAttribute{
        HostProtectionResource _resources;
        
        void constructor();
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        bool get_ExternalProcessMgmt();
        bool set_ExternalProcessMgmt(bool value);
        bool get_ExternalThreading();
        bool set_ExternalThreading(bool value);
        bool get_MayLeakOnAbort();
        bool set_MayLeakOnAbort(bool value);
        bool get_SecurityInfrastructure();
        bool set_SecurityInfrastructure(bool value);
        bool get_SelfAffectingProcessMgmt();
        bool set_SelfAffectingProcessMgmt(bool value);
        bool get_SelfAffectingThreading();
        bool set_SelfAffectingThreading(bool value);
        bool get_SharedState();
        bool set_SharedState(bool value);
        bool get_Synchronization();
        bool set_Synchronization(bool value);
        bool get_UI();
        bool set_UI(bool value);
        HostProtectionResource get_Resources();
        HostProtectionResource set_Resources(HostProtectionResource value);
        
    };
    
    
    struct MANAGED_API HostProtectionPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        HostProtectionResource _resources;
        
        void constructor(PermissionState state);
        void constructor(HostProtectionResource resources);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* e) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        bool IsUnrestricted2();
        int32_t GetTokenIndex();
        HostProtectionPermission* Cast(System::Security::IPermission* target);
        HostProtectionResource get_Resources();
        HostProtectionResource set_Resources(HostProtectionResource value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API IsolatedStorageFilePermission : public virtual IsolatedStoragePermission, public virtual IBuiltInPermission{
        
        void constructor(PermissionState state);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        int32_t GetTokenIndex();
        IsolatedStorageFilePermission* Cast(System::Security::IPermission* target);
        
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API IsolatedStorageFilePermissionAttribute : public virtual IsolatedStoragePermissionAttribute{
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        
    };
    
    
    struct MANAGED_API KeyContainerPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        KeyContainerPermissionAccessEntryCollection* _accessEntries;
        KeyContainerPermissionFlags _flags;
        
        void constructor(PermissionState state);
        void constructor(KeyContainerPermissionFlags flags);
        void constructor(KeyContainerPermissionFlags flags, cli::array<KeyContainerPermissionAccessEntry*>* accessList);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* securityElement) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        void SetFlags(KeyContainerPermissionFlags flags);
        KeyContainerPermission* Cast(System::Security::IPermission* target);
        KeyContainerPermissionAccessEntryCollection* get_AccessEntries();
        KeyContainerPermissionFlags get_Flags();
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API KeyContainerPermissionAccessEntry : public virtual System::Object{
        KeyContainerPermissionFlags _flags;
        System::String* _containerName;
        int32_t _spec;
        System::String* _store;
        System::String* _providerName;
        int32_t _type;
        
        void constructor(System::Security::Cryptography::CspParameters* parameters, KeyContainerPermissionFlags flags);
        void constructor(System::String* keyContainerName, KeyContainerPermissionFlags flags);
        void constructor(System::String* keyStore, System::String* providerName, int32_t providerType, System::String* keyContainerName, int32_t keySpec, KeyContainerPermissionFlags flags);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        KeyContainerPermissionFlags get_Flags();
        KeyContainerPermissionFlags set_Flags(KeyContainerPermissionFlags value);
        System::String* get_KeyContainerName();
        System::String* set_KeyContainerName(System::String* value);
        int32_t get_KeySpec();
        int32_t set_KeySpec(int32_t value);
        System::String* get_KeyStore();
        System::String* set_KeyStore(System::String* value);
        System::String* get_ProviderName();
        System::String* set_ProviderName(System::String* value);
        int32_t get_ProviderType();
        int32_t set_ProviderType(int32_t value);
        
    };
    
    
    struct MANAGED_API KeyContainerPermissionAccessEntryCollection : public virtual System::Object, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        System::Collections::ArrayList* _list;
        
        void constructor();
        void constructor(cli::array<KeyContainerPermissionAccessEntry*>* entries);
        int32_t Add(KeyContainerPermissionAccessEntry* accessEntry);
        void Clear();
        void CopyTo(cli::array<KeyContainerPermissionAccessEntry*>* array, int32_t index);
        void CopyTo2(System::Array* array, int32_t index);
        KeyContainerPermissionAccessEntryEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        int32_t IndexOf(KeyContainerPermissionAccessEntry* accessEntry);
        void Remove(KeyContainerPermissionAccessEntry* accessEntry);
        int32_t get_Count();
        bool get_IsSynchronized();
        KeyContainerPermissionAccessEntry* get_Item(int32_t index);
        System::Object* get_SyncRoot();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API KeyContainerPermissionAccessEntryEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        System::Collections::IEnumerator* e;
        
        void constructor(System::Collections::ArrayList* list);
        bool MoveNext();
        void Reset();
        KeyContainerPermissionAccessEntry* get_Current();
        System::Object* get_Current2();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API KeyContainerPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        KeyContainerPermissionFlags _flags;
        System::String* _containerName;
        int32_t _spec;
        System::String* _store;
        System::String* _providerName;
        int32_t _type;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        bool EmptyEntry();
        KeyContainerPermissionFlags get_Flags();
        KeyContainerPermissionFlags set_Flags(KeyContainerPermissionFlags value);
        System::String* get_KeyContainerName();
        System::String* set_KeyContainerName(System::String* value);
        int32_t get_KeySpec();
        int32_t set_KeySpec(int32_t value);
        System::String* get_KeyStore();
        System::String* set_KeyStore(System::String* value);
        System::String* get_ProviderName();
        System::String* set_ProviderName(System::String* value);
        int32_t get_ProviderType();
        int32_t set_ProviderType(int32_t value);
        
    };
    
    
    struct MANAGED_API PermissionSetAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* file;
        System::String* name;
        bool isUnicodeEncoded;
        System::String* xml;
        System::String* hex;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::Security::PermissionSet* CreateFromXml(System::String* xml);
        System::Security::PermissionSet* CreatePermissionSet();
        System::String* get_File();
        System::String* set_File(System::String* value);
        System::String* get_Hex();
        System::String* set_Hex(System::String* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        bool get_UnicodeEncoded();
        bool set_UnicodeEncoded(bool value);
        System::String* get_XML();
        System::String* set_XML(System::String* value);
        
    };
    
    
    struct MANAGED_API PrincipalInfo : public virtual System::Object{
        System::String* _name;
        System::String* _role;
        bool _isAuthenticated;
        
        void constructor(System::String* name, System::String* role, bool isAuthenticated);
        System::String* get_Name();
        System::String* get_Role();
        bool get_IsAuthenticated();
        
    };
    
    
    struct MANAGED_API PrincipalPermission : public virtual System::Object, public virtual System::Security::IPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission, public virtual System::Security::ISecurityEncodable{
        static constexpr int32_t version = 1;
        System::Collections::ArrayList* principals;
        
        void constructor(PermissionState state);
        void constructor(System::String* name, System::String* role);
        void constructor(System::String* name, System::String* role, bool isAuthenticated);
        void constructor(System::Collections::ArrayList* principals);
        System::Security::IPermission* Copy();
        void Demand();
        void FromXml(System::Security::SecurityElement* elem);
        System::Security::IPermission* Intersect(System::Security::IPermission* target);
        bool IsSubsetOf(System::Security::IPermission* target);
        bool IsUnrestricted();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::IPermission* Union(System::Security::IPermission* other);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        int32_t GetTokenIndex();
        PrincipalPermission* Cast(System::Security::IPermission* target);
        bool IsEmpty();
        int32_t CheckSecurityElement(System::Security::SecurityElement* se, System::String* parameterName, int32_t minimumVersion, int32_t maximumVersion);
        
        virtual System::Security::IPermission* Copy_e6fdf74d8dfaca72() override;
        virtual void Demand_6a8bc305f8dfa903() override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* elem) override;
        virtual System::Security::IPermission* Intersect_593562530728a967(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_1923c54e11db177f(System::Security::IPermission* target) override;
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* other) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API PrincipalPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        bool authenticated;
        System::String* name;
        System::String* role;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        bool get_Authenticated();
        bool set_Authenticated(bool value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::String* get_Role();
        System::String* set_Role(System::String* value);
        
    };
    
    
    struct MANAGED_API PublisherIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        System::Security::Cryptography::X509Certificates::X509Certificate2* x509;
        
        void constructor(PermissionState state);
        void constructor(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        PublisherIdentityPermission* Cast(System::Security::IPermission* target);
        System::Security::Cryptography::X509Certificates::X509Certificate2* get_Certificate();
        System::Security::Cryptography::X509Certificates::X509Certificate2* set_Certificate(System::Security::Cryptography::X509Certificates::X509Certificate2* value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API PublisherIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* certFile;
        System::String* signedFile;
        System::String* x509data;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_CertFile();
        System::String* set_CertFile(System::String* value);
        System::String* get_SignedFile();
        System::String* set_SignedFile(System::String* value);
        System::String* get_X509Certificate();
        System::String* set_X509Certificate(System::String* value);
        
    };
    
    
    struct MANAGED_API ReflectionPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        ReflectionPermissionFlag flags;
        
        void constructor(PermissionState state);
        void constructor(ReflectionPermissionFlag flag);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* other) override;
        int32_t GetTokenIndex();
        ReflectionPermission* Cast(System::Security::IPermission* target);
        ReflectionPermissionFlag get_Flags();
        ReflectionPermissionFlag set_Flags(ReflectionPermissionFlag value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* other) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API ReflectionPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        ReflectionPermissionFlag flags;
        bool memberAccess;
        bool reflectionEmit;
        bool typeInfo;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        ReflectionPermissionFlag get_Flags();
        ReflectionPermissionFlag set_Flags(ReflectionPermissionFlag value);
        bool get_MemberAccess();
        bool set_MemberAccess(bool value);
        bool get_ReflectionEmit();
        bool set_ReflectionEmit(bool value);
        bool get_RestrictedMemberAccess();
        bool set_RestrictedMemberAccess(bool value);
        bool get_TypeInformation();
        bool set_TypeInformation(bool value);
        
    };
    
    
    struct MANAGED_API RegistryPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        PermissionState _state;
        System::Collections::ArrayList* createList;
        System::Collections::ArrayList* readList;
        System::Collections::ArrayList* writeList;
        
        void constructor(PermissionState state);
        void constructor(RegistryPermissionAccess access, System::String* pathList);
        void constructor(RegistryPermissionAccess access, System::Security::AccessControl::AccessControlActions control, System::String* pathList);
        void AddPathList(RegistryPermissionAccess access, System::String* pathList);
        void AddPathList2(RegistryPermissionAccess access, System::Security::AccessControl::AccessControlActions control, System::String* pathList);
        System::String* GetPathList(RegistryPermissionAccess access);
        void SetPathList(RegistryPermissionAccess access, System::String* pathList);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* other) override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        RegistryPermission* Cast(System::Security::IPermission* target);
        void ThrowInvalidFlag(RegistryPermissionAccess flag, bool context);
        System::String* GetPathList2(System::Collections::ArrayList* list);
        bool KeyIsSubsetOf(System::Collections::IList* local, System::Collections::IList* target);
        void AddWithUnionKey(System::Collections::IList* list, System::String* pathList);
        void IntersectKeys(System::Collections::IList* local, System::Collections::IList* target, System::Collections::IList* result);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* other) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API RegistryPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* create;
        System::String* read;
        System::String* write;
        System::String* changeAccessControl;
        System::String* viewAccessControl;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_All();
        System::String* set_All(System::String* value);
        System::String* get_Create();
        System::String* set_Create(System::String* value);
        System::String* get_Read();
        System::String* set_Read(System::String* value);
        System::String* get_Write();
        System::String* set_Write(System::String* value);
        System::String* get_ChangeAccessControl();
        System::String* set_ChangeAccessControl(System::String* value);
        System::String* get_ViewAccessControl();
        System::String* set_ViewAccessControl(System::String* value);
        System::String* get_ViewAndModify();
        System::String* set_ViewAndModify(System::String* value);
        
    };
    
    
    struct MANAGED_API SecurityPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        SecurityPermissionFlag flags;
        
        void constructor(PermissionState state);
        void constructor(SecurityPermissionFlag flag);
        bool IsUnrestricted2();
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        SecurityPermission* Cast(System::Security::IPermission* target);
        SecurityPermissionFlag get_Flags();
        SecurityPermissionFlag set_Flags(SecurityPermissionFlag value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API SecurityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        SecurityPermissionFlag m_Flags;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        bool get_Assertion();
        bool set_Assertion(bool value);
        bool get_BindingRedirects();
        bool set_BindingRedirects(bool value);
        bool get_ControlAppDomain();
        bool set_ControlAppDomain(bool value);
        bool get_ControlDomainPolicy();
        bool set_ControlDomainPolicy(bool value);
        bool get_ControlEvidence();
        bool set_ControlEvidence(bool value);
        bool get_ControlPolicy();
        bool set_ControlPolicy(bool value);
        bool get_ControlPrincipal();
        bool set_ControlPrincipal(bool value);
        bool get_ControlThread();
        bool set_ControlThread(bool value);
        bool get_Execution();
        bool set_Execution(bool value);
        bool get_Infrastructure();
        bool set_Infrastructure(bool value);
        bool get_RemotingConfiguration();
        bool set_RemotingConfiguration(bool value);
        bool get_SerializationFormatter();
        bool set_SerializationFormatter(bool value);
        bool get_SkipVerification();
        bool set_SkipVerification(bool value);
        bool get_UnmanagedCode();
        bool set_UnmanagedCode(bool value);
        SecurityPermissionFlag get_Flags();
        SecurityPermissionFlag set_Flags(SecurityPermissionFlag value);
        
    };
    
    
    struct MANAGED_API SiteIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        System::String* _site;
        static cli::array<bool>* valid;
        
        SiteIdentityPermission();
        void constructor(PermissionState state);
        void constructor(System::String* site);
        static void static_constructor();
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        SiteIdentityPermission* Cast(System::Security::IPermission* target);
        bool IsValid(System::String* s);
        bool Match(System::String* target);
        System::String* get_Site();
        System::String* set_Site(System::String* value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API SiteIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* site;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_Site();
        System::String* set_Site(System::String* value);
        
    };
    
    
    struct MANAGED_API StrongNameIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        static System::Version* defaultVersion;
        PermissionState _state;
        System::Collections::ArrayList* _list;
        
        StrongNameIdentityPermission();
        void constructor(PermissionState state);
        void constructor(StrongNamePublicKeyBlob* blob, System::String* name, System::Version* version);
        void constructor(StrongNameIdentityPermission* snip);
        static void static_constructor();
        void ResetToDefault();
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* e) override;
        SNIP FromSecurityElement(System::Security::SecurityElement* se);
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        void ToSecurityElement(System::Security::SecurityElement* se, SNIP snip);
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        bool IsUnrestricted2();
        bool Contains(SNIP snip);
        bool IsEmpty(SNIP snip);
        bool IsEmpty2();
        StrongNameIdentityPermission* Cast(System::Security::IPermission* target);
        bool Match(System::String* target);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        StrongNamePublicKeyBlob* get_PublicKey();
        StrongNamePublicKeyBlob* set_PublicKey(StrongNamePublicKeyBlob* value);
        System::Version* get_Version();
        System::Version* set_Version(System::Version* value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API StrongNameIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* name;
        System::String* key;
        System::String* version;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::String* get_PublicKey();
        System::String* set_PublicKey(System::String* value);
        System::String* get_Version();
        System::String* set_Version(System::String* value);
        
    };
    
    
    struct MANAGED_API StrongNamePublicKeyBlob : public virtual System::Object{
        cli::array<unsigned char>* pubkey;
        
        void constructor(cli::array<unsigned char>* publicKey);
        static StrongNamePublicKeyBlob* FromString(System::String* s);
        static unsigned char CharToByte(char16_t c);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        
    };
    
    
    struct MANAGED_API UIPermission : public virtual System::Security::CodeAccessPermission, public virtual IUnrestrictedPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        UIPermissionWindow _window;
        UIPermissionClipboard _clipboard;
        
        void constructor(PermissionState state);
        void constructor(UIPermissionClipboard clipboardFlag);
        void constructor(UIPermissionWindow windowFlag);
        void constructor(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        bool IsUnrestricted2();
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c);
        UIPermission* Cast(System::Security::IPermission* target);
        UIPermissionClipboard get_Clipboard();
        UIPermissionClipboard set_Clipboard(UIPermissionClipboard value);
        UIPermissionWindow get_Window();
        UIPermissionWindow set_Window(UIPermissionWindow value);
        
        virtual bool IsUnrestricted_c7d55a1eabc43262() override;
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API UIPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        UIPermissionClipboard clipboard;
        UIPermissionWindow window;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        UIPermissionClipboard get_Clipboard();
        UIPermissionClipboard set_Clipboard(UIPermissionClipboard value);
        UIPermissionWindow get_Window();
        UIPermissionWindow set_Window(UIPermissionWindow value);
        
    };
    
    
    struct MANAGED_API UrlIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        System::String* url;
        
        void constructor(PermissionState state);
        void constructor(System::String* site);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        int32_t GetTokenIndex();
        bool IsEmpty();
        UrlIdentityPermission* Cast(System::Security::IPermission* target);
        bool Match(System::String* target);
        System::String* get_Url();
        System::String* set_Url(System::String* value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API UrlIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::String* url;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::String* get_Url();
        System::String* set_Url(System::String* value);
        
    };
    
    
    struct MANAGED_API ZoneIdentityPermission : public virtual System::Security::CodeAccessPermission, public virtual IBuiltInPermission{
        static constexpr int32_t version = 1;
        System::Security::SecurityZone zone;
        
        void constructor(PermissionState state);
        void constructor(System::Security::SecurityZone zone);
        virtual System::Security::IPermission* Copy_d1e925db301dc53f() override;
        virtual bool IsSubsetOf_76947f8575c4d81(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Union_b0ddcab6cb9c8441(System::Security::IPermission* target) override;
        virtual System::Security::IPermission* Intersect_7dbf5aef702b16af(System::Security::IPermission* target) override;
        virtual void FromXml_ec3b425a66b43072(System::Security::SecurityElement* esd) override;
        virtual System::Security::SecurityElement* ToXml_9ee4cd8af8e8f747() override;
        int32_t GetTokenIndex();
        ZoneIdentityPermission* Cast(System::Security::IPermission* target);
        System::Security::SecurityZone get_SecurityZone();
        System::Security::SecurityZone set_SecurityZone(System::Security::SecurityZone value);
        
        virtual System::Security::IPermission* Union_ecfa27115d58cb44(System::Security::IPermission* target) override;
        virtual int32_t GetTokenIndex_3e653e1a6127921() override;
    };
    
    
    struct MANAGED_API ZoneIdentityPermissionAttribute : public virtual CodeAccessSecurityAttribute{
        System::Security::SecurityZone zone;
        
        void constructor(SecurityAction action);
        virtual System::Security::IPermission* CreatePermission_cae8413caba48c05() override;
        System::Security::SecurityZone get_Zone();
        System::Security::SecurityZone set_Zone(System::Security::SecurityZone value);
        
    };
    
}}}
namespace System { namespace Security { namespace Policy {
    
    struct MANAGED_API AllMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API ApplicationDefaultCodeGroup : public virtual CodeGroup{
        
        void constructor(IMembershipCondition* membershipCondition);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        
    };
    
    
    struct MANAGED_API ApplicationDirectory : public virtual System::Object, public virtual IBuiltInEvidence{
        System::String* directory;
        
        void constructor(System::String* name);
        System::Object* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        void ThrowOnInvalid(System::String* appdir);
        System::String* get_Directory();
        
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API ApplicationDirectoryMembershipCondition : public virtual System::Object, public virtual IConstantMembershipCondition, public virtual IMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API ApplicationMembershipCondition : public virtual System::Object, public virtual IConstantMembershipCondition, public virtual IMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        bool _lookAtDir;
        
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API ApplicationSecurityInfo : public virtual System::Object{
        Evidence* _evidence;
        System::ApplicationId* _appid;
        System::Security::PermissionSet* _defaultSet;
        System::ApplicationId* _deployid;
        
        void constructor(System::ActivationContext* activationContext);
        Evidence* get_ApplicationEvidence();
        Evidence* set_ApplicationEvidence(Evidence* value);
        System::ApplicationId* get_ApplicationId();
        System::ApplicationId* set_ApplicationId(System::ApplicationId* value);
        System::Security::PermissionSet* get_DefaultRequestSet();
        System::Security::PermissionSet* set_DefaultRequestSet(System::Security::PermissionSet* value);
        System::ApplicationId* get_DeploymentId();
        System::ApplicationId* set_DeploymentId(System::ApplicationId* value);
        
    };
    
    
    struct MANAGED_API ApplicationSecurityManager : public virtual System::Object{
        static IApplicationTrustManager* _appTrustManager;
        static ApplicationTrustCollection* _userAppTrusts;
        
        static bool DetermineApplicationTrust(System::ActivationContext* activationContext, TrustManagerContext* context);
        static IApplicationTrustManager* get_ApplicationTrustManager();
        static ApplicationTrustCollection* get_UserApplicationTrusts();
        
    };
    
    
    struct MANAGED_API ApplicationSecurityManagerCodeGroup : public virtual CodeGroup{
        
        void constructor(IMembershipCondition* membershipCondition);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        
    };
    
    
    struct MANAGED_API ApplicationTrust : public virtual System::Object, public virtual System::Security::ISecurityEncodable{
        System::ApplicationIdentity* _appid;
        PolicyStatement* _defaultPolicy;
        System::Object* _xtranfo;
        bool _trustrun;
        bool _persist;
        System::Collections::Generic::IList2<StrongName2*>* fullTrustAssemblies;
        
        void constructor();
        void constructor(System::ApplicationIdentity* applicationIdentity);
        void constructor(System::Security::PermissionSet* defaultGrantSet, System::Collections::Generic::IEnumerable2<StrongName2*>* fullTrustAssemblies);
        void FromXml(System::Security::SecurityElement* element);
        System::Security::SecurityElement* ToXml();
        PolicyStatement* GetDefaultGrantSet();
        System::ApplicationIdentity* get_ApplicationIdentity();
        System::ApplicationIdentity* set_ApplicationIdentity(System::ApplicationIdentity* value);
        PolicyStatement* get_DefaultGrantSet();
        PolicyStatement* set_DefaultGrantSet(PolicyStatement* value);
        System::Object* get_ExtraInfo();
        System::Object* set_ExtraInfo(System::Object* value);
        bool get_IsApplicationTrustedToRun();
        bool set_IsApplicationTrustedToRun(bool value);
        bool get_Persist();
        bool set_Persist(bool value);
        System::Collections::Generic::IList2<StrongName2*>* get_FullTrustAssemblies();
        
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* element) override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
    };
    
    
    struct MANAGED_API ApplicationTrustCollection : public virtual System::Object, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        System::Collections::ArrayList* _list;
        
        void constructor();
        int32_t Add(ApplicationTrust* trust);
        void AddRange(cli::array<ApplicationTrust*>* trusts);
        void AddRange2(ApplicationTrustCollection* trusts);
        void Clear();
        void CopyTo(cli::array<ApplicationTrust*>* array, int32_t index);
        void CopyTo2(System::Array* array, int32_t index);
        ApplicationTrustCollection* Find(System::ApplicationIdentity* applicationIdentity, ApplicationVersionMatch versionMatch);
        ApplicationTrustEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        void Remove(ApplicationTrust* trust);
        void Remove2(System::ApplicationIdentity* applicationIdentity, ApplicationVersionMatch versionMatch);
        void RemoveRange(cli::array<ApplicationTrust*>* trusts);
        void RemoveRange2(ApplicationTrustCollection* trusts);
        void RemoveAllInstances(ApplicationTrust* trust);
        int32_t get_Count();
        bool get_IsSynchronized();
        System::Object* get_SyncRoot();
        ApplicationTrust* get_Item(int32_t index);
        ApplicationTrust* get_Item2(System::String* appFullName);
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API ApplicationTrustEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        System::Collections::IEnumerator* e;
        
        void constructor(ApplicationTrustCollection* collection);
        bool MoveNext();
        void Reset();
        ApplicationTrust* get_Current();
        System::Object* get_Current2();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API CodeConnectAccess : public virtual System::Object{
        static System::String* AnyScheme;
        static int32_t DefaultPort;
        static int32_t OriginPort;
        static System::String* OriginScheme;
        System::String* _scheme;
        int32_t _port;
        
        CodeConnectAccess();
        void constructor(System::String* allowScheme, int32_t allowPort);
        static void static_constructor();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static CodeConnectAccess* CreateAnySchemeAccess(int32_t allowPort);
        static CodeConnectAccess* CreateOriginSchemeAccess(int32_t allowPort);
        int32_t get_Port();
        System::String* get_Scheme();
        
    };
    
    
    struct MANAGED_API ReservedNames : public virtual System::Object{
        static /*constexpr*/ System::String* FullTrust() { return _T("FullTrust"); }
        static /*constexpr*/ System::String* LocalIntranet() { return _T("LocalIntranet"); }
        static /*constexpr*/ System::String* Internet() { return _T("Internet"); }
        static /*constexpr*/ System::String* SkipVerification() { return _T("SkipVerification"); }
        static /*constexpr*/ System::String* Execution() { return _T("Execution"); }
        static /*constexpr*/ System::String* Nothing() { return _T("Nothing"); }
        static /*constexpr*/ System::String* Everything() { return _T("Everything"); }
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_mapF;
        
        static bool IsReserved(System::String* name);
        
    };
    
    
    struct MANAGED_API DefaultPolicies : public virtual System::Object{
        static /*constexpr*/ System::String* DnsPermissionClass() { return _T("System.Net.DnsPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* EventLogPermissionClass() { return _T("System.Diagnostics.EventLogPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* PrintingPermissionClass() { return _T("System.Drawing.Printing.PrintingPermission, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* SocketPermissionClass() { return _T("System.Net.SocketPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* WebPermissionClass() { return _T("System.Net.WebPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* PerformanceCounterPermissionClass() { return _T("System.Diagnostics.PerformanceCounterPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* DirectoryServicesPermissionClass() { return _T("System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* MessageQueuePermissionClass() { return _T("System.Messaging.MessageQueuePermission, System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* ServiceControllerPermissionClass() { return _T("System.ServiceProcess.ServiceControllerPermission, System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); }
        static /*constexpr*/ System::String* OleDbPermissionClass() { return _T("System.Data.OleDb.OleDbPermission, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static /*constexpr*/ System::String* SqlClientPermissionClass() { return _T("System.Data.SqlClient.SqlClientPermission, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); }
        static System::Version* _fxVersion;
        static cli::array<unsigned char>* _ecmaKey;
        static System::Security::Permissions::StrongNamePublicKeyBlob* _ecma;
        static cli::array<unsigned char>* _msFinalKey;
        static System::Security::Permissions::StrongNamePublicKeyBlob* _msFinal;
        static System::Security::NamedPermissionSet* _fullTrust;
        static System::Security::NamedPermissionSet* _localIntranet;
        static System::Security::NamedPermissionSet* _internet;
        static System::Security::NamedPermissionSet* _skipVerification;
        static System::Security::NamedPermissionSet* _execution;
        static System::Security::NamedPermissionSet* _nothing;
        static System::Security::NamedPermissionSet* _everything;
        static System::Collections::Generic::Dictionary<System::String*, int32_t>* __f__switch_map10;
        
        DefaultPolicies();
        static void static_constructor();
        static System::Security::PermissionSet* GetSpecialPermissionSet(System::String* name);
        static StrongNameMembershipCondition* FullTrustMembership(System::String* name, Key key);
        static System::Security::NamedPermissionSet* BuildFullTrust();
        static System::Security::NamedPermissionSet* BuildLocalIntranet();
        static System::Security::NamedPermissionSet* BuildInternet();
        static System::Security::NamedPermissionSet* BuildSkipVerification();
        static System::Security::NamedPermissionSet* BuildExecution();
        static System::Security::NamedPermissionSet* BuildNothing();
        static System::Security::NamedPermissionSet* BuildEverything();
        static System::Security::SecurityElement* PrintingPermission(System::String* level);
        static System::Security::PermissionSet* get_FullTrust();
        static System::Security::PermissionSet* get_LocalIntranet();
        static System::Security::PermissionSet* get_Internet();
        static System::Security::PermissionSet* get_SkipVerification();
        static System::Security::PermissionSet* get_Execution();
        static System::Security::PermissionSet* get_Nothing();
        static System::Security::PermissionSet* get_Everything();
        
    };
    
    
    struct MANAGED_API DomainApplicationMembershipCondition : public virtual System::Object, public virtual IConstantMembershipCondition, public virtual IMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API EvidenceEnumerator : public virtual System::Object, public virtual System::Collections::IEnumerator{
        System::Collections::IEnumerator* currentEnum;
        System::Collections::IEnumerator* hostEnum;
        System::Collections::IEnumerator* assemblyEnum;
        
        void constructor(System::Collections::IEnumerator* hostenum, System::Collections::IEnumerator* assemblyenum);
        bool MoveNext();
        void Reset();
        System::Object* get_Current();
        
        virtual bool MoveNext_4e78e145935f5417() override;
        virtual void Reset_bcd82381eed41868() override;
        virtual System::Object* get_Current_8eca9b3da02b123a() override;
    };
    
    
    struct MANAGED_API Evidence : public virtual System::Object, public virtual System::Collections::ICollection, public virtual System::Collections::IEnumerable{
        bool _locked;
        System::Collections::ArrayList* hostEvidenceList;
        System::Collections::ArrayList* assemblyEvidenceList;
        int32_t _hashCode;
        
        void constructor();
        void constructor(Evidence* evidence);
        void constructor(cli::array<System::Object*>* hostEvidence, cli::array<System::Object*>* assemblyEvidence);
        void AddAssembly(System::Object* id);
        void AddHost(System::Object* id);
        void Clear();
        void CopyTo(System::Array* array, int32_t index);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        System::Collections::IEnumerator* GetEnumerator();
        System::Collections::IEnumerator* GetAssemblyEnumerator();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::Collections::IEnumerator* GetHostEnumerator();
        void Merge(Evidence* evidence);
        void RemoveType(System::Type* t);
        static bool IsAuthenticodePresent(System::Reflection::Assembly* a);
        static Evidence* GetDefaultHostEvidence(System::Reflection::Assembly* a);
        int32_t get_Count();
        bool get_IsReadOnly();
        bool get_IsSynchronized();
        bool get_Locked();
        bool set_Locked(bool value);
        System::Object* get_SyncRoot();
        System::Collections::ArrayList* get_HostEvidenceList();
        System::Collections::ArrayList* get_AssemblyEvidenceList();
        
        virtual void CopyTo_7065a6e3cf6a140(System::Array* array, int32_t index) override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual int32_t get_Count_8f254f3dd8e2403() override;
        virtual bool get_IsSynchronized_20926e7dabc53dbf() override;
        virtual System::Object* get_SyncRoot_257108f45cc89e19() override;
    };
    
    
    struct MANAGED_API FileCodeGroup : public virtual CodeGroup{
        System::Security::Permissions::FileIOPermissionAccess m_access;
        
        void constructor(IMembershipCondition* membershipCondition, System::Security::Permissions::FileIOPermissionAccess access);
        void constructor(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual void ParseXml_ecb12c827959aa39(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual void CreateXml_14eb36ca74574a81(System::Security::SecurityElement* element, PolicyLevel* level) override;
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        virtual System::String* get_AttributeString_f768971bd5bbaf63() override;
        virtual System::String* get_PermissionSetName_4d6dd01cf3ccc2f3() override;
        
    };
    
    
    struct MANAGED_API FirstMatchCodeGroup : public virtual CodeGroup{
        
        void constructor(IMembershipCondition* membershipCondition, PolicyStatement* policy);
        void constructor(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        FirstMatchCodeGroup* CopyNoChildren();
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        
    };
    
    
    struct MANAGED_API GacInstalled : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        
        void constructor();
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API GacMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API Hash : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual IBuiltInEvidence{
        System::Reflection::Assembly* assembly;
        cli::array<unsigned char>* data;
        cli::array<unsigned char>* _md5;
        cli::array<unsigned char>* _sha1;
        
        void constructor(System::Reflection::Assembly* assembly);
        void constructor();
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        cli::array<unsigned char>* GenerateHash(System::Security::Cryptography::HashAlgorithm* hashAlg);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        cli::array<unsigned char>* GetData();
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        static Hash* CreateMD5(cli::array<unsigned char>* md5);
        static Hash* CreateSHA1(cli::array<unsigned char>* sha1);
        cli::array<unsigned char>* get_MD5();
        cli::array<unsigned char>* get_SHA1();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API HashMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        System::Security::Cryptography::HashAlgorithm* hash_algorithm;
        cli::array<unsigned char>* hash_value;
        
        void constructor();
        void constructor(System::Security::Cryptography::HashAlgorithm* hashAlg, cli::array<unsigned char>* value);
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        bool Compare(cli::array<unsigned char>* expected, cli::array<unsigned char>* actual);
        void OnDeserialization(System::Object* sender);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Security::Cryptography::HashAlgorithm* get_HashAlgorithm();
        System::Security::Cryptography::HashAlgorithm* set_HashAlgorithm(System::Security::Cryptography::HashAlgorithm* value);
        cli::array<unsigned char>* get_HashValue();
        cli::array<unsigned char>* set_HashValue(cli::array<unsigned char>* value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MembershipConditionHelper : public virtual System::Object{
        static System::String* XmlTag;
        
        MembershipConditionHelper();
        void constructor();
        static void static_constructor();
        static int32_t CheckSecurityElement(System::Security::SecurityElement* se, System::String* parameterName, int32_t minimumVersion, int32_t maximumVersion);
        static System::Security::SecurityElement* Element2(System::Type* type, int32_t version);
        
    };
    
    
    struct MANAGED_API MonoTrustManager : public virtual System::Object, public virtual IApplicationTrustManager, public virtual System::Security::ISecurityEncodable{
        static /*constexpr*/ System::String* tag() { return _T("IApplicationTrustManager"); }
        
        void constructor();
        ApplicationTrust* DetermineApplicationTrust(System::ActivationContext* activationContext, TrustManagerContext* context);
        void FromXml(System::Security::SecurityElement* e);
        System::Security::SecurityElement* ToXml();
        
        virtual ApplicationTrust* DetermineApplicationTrust_29a1102f04ee3483(System::ActivationContext* activationContext, TrustManagerContext* context) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
    };
    
    
    struct MANAGED_API NetCodeGroup : public virtual CodeGroup{
        static System::String* AbsentOriginScheme;
        static System::String* AnyOtherOriginScheme;
        System::Collections::Hashtable* _rules;
        int32_t _hashcode;
        
        NetCodeGroup();
        void constructor(IMembershipCondition* membershipCondition);
        void constructor(System::Security::SecurityElement* e, PolicyLevel* level);
        static void static_constructor();
        void AddConnectAccess(System::String* originScheme, CodeConnectAccess* connectAccess);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        bool Equals(cli::array<CodeConnectAccess*>* rules1, cli::array<CodeConnectAccess*>* rules2);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        cli::array<System::Collections::DictionaryEntry>* GetConnectAccessRules();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        void ResetConnectAccess();
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        virtual void CreateXml_14eb36ca74574a81(System::Security::SecurityElement* element, PolicyLevel* level) override;
        virtual void ParseXml_ecb12c827959aa39(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* get_AttributeString_f768971bd5bbaf63() override;
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        virtual System::String* get_PermissionSetName_4d6dd01cf3ccc2f3() override;
        
    };
    
    
    struct MANAGED_API PermissionRequestEvidence : public virtual System::Object, public virtual IBuiltInEvidence{
        System::Security::PermissionSet* requested;
        System::Security::PermissionSet* optional;
        System::Security::PermissionSet* denied;
        
        void constructor(System::Security::PermissionSet* request, System::Security::PermissionSet* optional, System::Security::PermissionSet* denied);
        PermissionRequestEvidence* Copy();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        System::Security::PermissionSet* get_DeniedPermissions();
        System::Security::PermissionSet* get_OptionalPermissions();
        System::Security::PermissionSet* get_RequestedPermissions();
        
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API PolicyException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* exception);
        
        virtual bool Equals_8745d1c324afa9f2(System::Object* obj) override;
        virtual System::Exception* GetBaseException_253c3eebfe2fed4a() override;
        virtual int32_t GetHashCode_3274e1baccc4f8d1() override;
        virtual void GetObjectData_cacfaf455dbef0a5(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Type* GetType_74b1e7e5e0897ded() override;
        virtual System::String* ToString_118e365de8f6791a() override;
        virtual System::String* get_HelpLink_c746e07ff3b23b1d() override;
        virtual System::String* set_HelpLink_c6d532780c9a4ffa(System::String* value) override;
        virtual System::Exception* get_InnerException_fee5e87d6404fbbb() override;
        virtual System::String* get_Message_236e49c6b265ab9b() override;
        virtual System::String* get_Source_1ad0ababbacddeca() override;
        virtual System::String* set_Source_593b7183e562d37d(System::String* value) override;
        virtual System::String* get_StackTrace_eedb0499938735b7() override;
        virtual System::Reflection::MethodBase* get_TargetSite_d5a44210796e0db() override;
    };
    
    
    struct MANAGED_API PolicyLevel : public virtual System::Object{
        System::String* label;
        CodeGroup* root_code_group;
        System::Collections::ArrayList* full_trust_assemblies;
        System::Collections::ArrayList* named_permission_sets;
        System::String* _location;
        System::Security::PolicyLevelType _type;
        System::Collections::Hashtable* fullNames;
        System::Security::SecurityElement* xml;
        
        void constructor(System::String* label, System::Security::PolicyLevelType type);
        void LoadFromFile(System::String* filename);
        void LoadFromString(System::String* xml);
        System::Security::SecurityElement* FromString(System::String* xml);
        void AddFullTrustAssembly(StrongName2* sn);
        void AddFullTrustAssembly2(StrongNameMembershipCondition* snMC);
        void AddNamedPermissionSet(System::Security::NamedPermissionSet* permSet);
        System::Security::NamedPermissionSet* ChangeNamedPermissionSet(System::String* name, System::Security::PermissionSet* pSet);
        static PolicyLevel* CreateAppDomainLevel();
        void FromXml(System::Security::SecurityElement* e);
        System::Security::NamedPermissionSet* GetNamedPermissionSet(System::String* name);
        void Recover();
        void RemoveFullTrustAssembly(StrongName2* sn);
        void RemoveFullTrustAssembly2(StrongNameMembershipCondition* snMC);
        System::Security::NamedPermissionSet* RemoveNamedPermissionSet(System::Security::NamedPermissionSet* permSet);
        System::Security::NamedPermissionSet* RemoveNamedPermissionSet2(System::String* name);
        void Reset();
        PolicyStatement* Resolve(Evidence* evidence);
        CodeGroup* ResolveMatchingCodeGroups(Evidence* evidence);
        System::Security::SecurityElement* ToXml();
        void Save();
        void CreateDefaultLevel(System::Security::PolicyLevelType type);
        void CreateDefaultFullTrustAssemblies();
        void CreateDefaultNamedPermissionSets();
        System::String* ResolveClassName(System::String* className);
        bool IsFullTrustAssembly(System::Reflection::Assembly* a);
        System::Collections::IList* get_FullTrustAssemblies();
        System::String* get_Label();
        System::Collections::IList* get_NamedPermissionSets();
        CodeGroup* get_RootCodeGroup();
        CodeGroup* set_RootCodeGroup(CodeGroup* value);
        System::String* get_StoreLocation();
        System::Security::PolicyLevelType get_Type();
        
    };
    
    
    struct MANAGED_API PolicyStatement : public virtual System::Object, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        System::Security::PermissionSet* perms;
        PolicyStatementAttribute attrs;
        
        void constructor(System::Security::PermissionSet* permSet);
        void constructor(System::Security::PermissionSet* permSet, PolicyStatementAttribute attributes);
        PolicyStatement* Copy();
        void FromXml(System::Security::SecurityElement* et);
        void FromXml2(System::Security::SecurityElement* et, PolicyLevel* level);
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* obj) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static PolicyStatement* Empty();
        System::Security::PermissionSet* get_PermissionSet();
        System::Security::PermissionSet* set_PermissionSet(System::Security::PermissionSet* value);
        PolicyStatementAttribute get_Attributes();
        PolicyStatementAttribute set_Attributes(PolicyStatementAttribute value);
        System::String* get_AttributeString();
        
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* et) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* et, PolicyLevel* level) override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API ProvideAssemblyEvidenceEventArgs : public virtual System::EventArgs{
        System::Reflection::Assembly* _assembly;
        Evidence* _evidence;
        
        void constructor(System::Reflection::Assembly* a, Evidence* e);
        System::Reflection::Assembly* get_Assembly();
        Evidence* get_Evidence();
        
    };
    
    
    struct MANAGED_API Publisher : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        System::Security::Cryptography::X509Certificates::X509Certificate2* m_cert;
        
        void constructor(System::Security::Cryptography::X509Certificates::X509Certificate2* cert);
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        System::Security::Cryptography::X509Certificates::X509Certificate2* get_Certificate();
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API PublisherMembershipCondition : public virtual System::Object, public virtual IConstantMembershipCondition, public virtual IMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        System::Security::Cryptography::X509Certificates::X509Certificate2* x509;
        
        void constructor();
        void constructor(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        System::Security::Cryptography::X509Certificates::X509Certificate2* get_Certificate();
        System::Security::Cryptography::X509Certificates::X509Certificate2* set_Certificate(System::Security::Cryptography::X509Certificates::X509Certificate2* value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API Site : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        System::String* origin_site;
        
        void constructor(System::String* name);
        static Site* CreateFromUrl(System::String* url);
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        static bool IsValid(System::String* name);
        static System::String* UrlToSite(System::String* url);
        System::String* get_Name();
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API SiteMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        System::String* _site;
        
        void constructor();
        void constructor(System::String* site);
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        System::String* get_Site();
        System::String* set_Site(System::String* value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API StrongName2 : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        System::Security::Permissions::StrongNamePublicKeyBlob* publickey;
        System::String* name;
        System::Version* version;
        
        void constructor(System::Security::Permissions::StrongNamePublicKeyBlob* blob, System::String* name, System::Version* version);
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        System::String* get_Name();
        System::Security::Permissions::StrongNamePublicKeyBlob* get_PublicKey();
        System::Version* get_Version();
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API StrongNameMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        System::Security::Permissions::StrongNamePublicKeyBlob* blob;
        System::String* name;
        System::Version* assemblyVersion;
        
        void constructor(System::Security::Permissions::StrongNamePublicKeyBlob* blob, System::String* name, System::Version* version);
        void constructor(System::Security::SecurityElement* e);
        void constructor();
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::Version* get_Version();
        System::Version* set_Version(System::Version* value);
        System::Security::Permissions::StrongNamePublicKeyBlob* get_PublicKey();
        System::Security::Permissions::StrongNamePublicKeyBlob* set_PublicKey(System::Security::Permissions::StrongNamePublicKeyBlob* value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API TrustLicenseIssuer : public virtual System::Object{
        System::String* _title;
        System::Security::Cryptography::RSA* _publicKey;
        
        void constructor();
        void constructor(System::Security::Cryptography::RSA* publicKey, System::String* title);
        System::Security::Cryptography::RSA* get_PublicKey();
        System::Security::Cryptography::RSA* set_PublicKey(System::Security::Cryptography::RSA* value);
        System::String* get_Title();
        System::String* set_Title(System::String* value);
        
    };
    
    
    struct MANAGED_API TrustManagerContext : public virtual System::Object{
        bool _ignorePersistedDecision;
        bool _noPrompt;
        bool _keepAlive;
        bool _persist;
        System::ApplicationIdentity* _previousId;
        TrustManagerUIContext _ui;
        
        void constructor();
        void constructor(TrustManagerUIContext uiContext);
        virtual bool get_IgnorePersistedDecision_ac287477dbd7b15c();
        virtual bool set_IgnorePersistedDecision_6774da57ae62d885(bool value);
        virtual bool get_KeepAlive_8b80a28a931faee3();
        virtual bool set_KeepAlive_998c74dfe70b61b(bool value);
        virtual bool get_NoPrompt_201c71f0fbe15709();
        virtual bool set_NoPrompt_a4bf8c1182f6743d(bool value);
        virtual bool get_Persist_e503d8537a698c();
        virtual bool set_Persist_34aecb54a156d805(bool value);
        virtual System::ApplicationIdentity* get_PreviousApplicationIdentity_659da1b437ccd279();
        virtual System::ApplicationIdentity* set_PreviousApplicationIdentity_a573268ad8ac0348(System::ApplicationIdentity* value);
        virtual TrustManagerUIContext get_UIContext_fec8450af2ad7333();
        virtual TrustManagerUIContext set_UIContext_1e686c213cbee48f(TrustManagerUIContext value);
        
    };
    
    
    struct MANAGED_API TrustManagerZoneConfig : public virtual System::Object{
        System::String* _defaultName;
        PromptingLevel _prompt;
        
        void constructor();
        void constructor(System::String* defaultPermissionSetName, PromptingLevel promptingLevel);
        System::String* get_DefaultPermissionSetName();
        System::String* set_DefaultPermissionSetName(System::String* value);
        PromptingLevel get_Prompt();
        PromptingLevel set_Prompt(PromptingLevel value);
        
    };
    
    
    struct MANAGED_API UnionCodeGroup : public virtual CodeGroup{
        
        void constructor(IMembershipCondition* membershipCondition, PolicyStatement* policy);
        void constructor(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual CodeGroup* Copy_7fdc78f7390869fe() override;
        CodeGroup* Copy3(bool childs);
        virtual PolicyStatement* Resolve_e0385e713d5ae5af(Evidence* evidence) override;
        virtual CodeGroup* ResolveMatchingCodeGroups_908cc5caa682e9f4(Evidence* evidence) override;
        virtual System::String* get_MergeLogic_cd001da1f3850530() override;
        
    };
    
    
    struct MANAGED_API Url : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        System::String* origin_url;
        
        void constructor(System::String* name);
        void constructor(System::String* name, bool validated);
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        System::String* Prepare(System::String* url);
        System::String* get_Value();
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API UrlMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        Url* url;
        System::String* userUrl;
        
        void constructor(System::String* url);
        void constructor(Url* url, System::String* userUrl);
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        void CheckUrl(System::String* url);
        System::String* get_Url();
        System::String* set_Url(System::String* value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
    
    struct MANAGED_API Zone : public virtual System::Object, public virtual IIdentityPermissionFactory, public virtual IBuiltInEvidence{
        System::Security::SecurityZone zone;
        
        void constructor(System::Security::SecurityZone zone);
        System::Object* Copy();
        System::Security::IPermission* CreateIdentityPermission(Evidence* evidence);
        static Zone* CreateFromUrl(System::String* url);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        int32_t GetRequiredSize(bool verbose);
        int32_t InitFromBuffer(cli::array<char16_t>* buffer, int32_t position);
        int32_t OutputToBuffer(cli::array<char16_t>* buffer, int32_t position, bool verbose);
        System::Security::SecurityZone get_SecurityZone();
        
        virtual System::Security::IPermission* CreateIdentityPermission_889b07b8aadbac79(Evidence* evidence) override;
        virtual int32_t GetRequiredSize_d6a347da59603f2e(bool verbose) override;
        virtual int32_t InitFromBuffer_c92c70723ded1d45(cli::array<char16_t>* buffer, int32_t position) override;
        virtual int32_t OutputToBuffer_c67224525da6df65(cli::array<char16_t>* buffer, int32_t position, bool verbose) override;
    };
    
    
    struct MANAGED_API ZoneMembershipCondition : public virtual System::Object, public virtual IMembershipCondition, public virtual IConstantMembershipCondition, public virtual System::Security::ISecurityEncodable, public virtual System::Security::ISecurityPolicyEncodable{
        int32_t version;
        System::Security::SecurityZone zone;
        
        void constructor();
        void constructor(System::Security::SecurityZone zone);
        bool Check(Evidence* evidence);
        IMembershipCondition* Copy();
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        void FromXml(System::Security::SecurityElement* e);
        void FromXml2(System::Security::SecurityElement* e, PolicyLevel* level);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::Security::SecurityElement* ToXml();
        System::Security::SecurityElement* ToXml2(PolicyLevel* level);
        System::Security::SecurityZone get_SecurityZone();
        System::Security::SecurityZone set_SecurityZone(System::Security::SecurityZone value);
        
        virtual bool Check_40359438a47300d0(Evidence* evidence) override;
        virtual IMembershipCondition* Copy_44d120d5c8a6f573() override;
        virtual bool Equals_4b738171fe6c9984(System::Object* o) override;
        virtual void FromXml_1053a148f0375461(System::Security::SecurityElement* e) override;
        virtual void FromXml_d33f37a1ca3b24b6(System::Security::SecurityElement* e, PolicyLevel* level) override;
        virtual System::String* ToString_427da0d8da742df9() override;
        virtual System::Security::SecurityElement* ToXml_4868e697107d327() override;
        virtual System::Security::SecurityElement* ToXml_7ef261149cc39102(PolicyLevel* level) override;
    };
    
}}}
namespace System { namespace Security { namespace Principal {
    
    struct MANAGED_API GenericIdentity : public virtual System::Object, public virtual IIdentity{
        System::String* m_name;
        System::String* m_type;
        
        void constructor(System::String* name, System::String* type);
        void constructor(System::String* name);
        virtual System::String* get_AuthenticationType_cb7e4615cad01a4c();
        virtual System::String* get_Name_e32680458218f597();
        virtual bool get_IsAuthenticated_d3ad26d9503a0e79();
        
        virtual System::String* get_AuthenticationType_fde3461ee63fdcbc() override;
        virtual System::String* get_Name_b724867acffa5fcd() override;
        virtual bool get_IsAuthenticated_3494858dba7d3668() override;
    };
    
    
    struct MANAGED_API GenericPrincipal : public virtual System::Object, public virtual IPrincipal{
        IIdentity* m_identity;
        cli::array<System::String*>* m_roles;
        
        void constructor(IIdentity* identity, cli::array<System::String*>* roles);
        virtual bool IsInRole_230762285381dcaa(System::String* role);
        cli::array<System::String*>* get_Roles();
        virtual IIdentity* get_Identity_ace87d10090e7749();
        
        virtual bool IsInRole_3999c98ebfe5d242(System::String* role) override;
        virtual IIdentity* get_Identity_8451efd6a7a604b6() override;
    };
    
    
    struct MANAGED_API IdentityNotMappedException : public virtual System::SystemException{
        IdentityReferenceCollection* _coll;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* inner);
        virtual void GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) override;
        IdentityReferenceCollection* get_UnmappedIdentities();
        
    };
    
    
    struct MANAGED_API IdentityReferenceCollection : public virtual System::Object, public virtual System::Collections::IEnumerable, public virtual System::Collections::Generic::ICollection2<IdentityReference*>, public virtual System::Collections::Generic::IEnumerable2<IdentityReference*>{
        System::Collections::ArrayList* _list;
        
        void constructor();
        void constructor(int32_t capacity);
        void Add(IdentityReference* identity);
        void Clear();
        bool Contains(IdentityReference* identity);
        void CopyTo(cli::array<IdentityReference*>* array, int32_t offset);
        System::Collections::Generic::IEnumerator2<IdentityReference*>* GetEnumerator();
        System::Collections::IEnumerator* GetEnumerator2();
        bool Remove(IdentityReference* identity);
        IdentityReferenceCollection* Translate(System::Type* targetType);
        IdentityReferenceCollection* Translate2(System::Type* targetType, bool forceSuccess);
        int32_t get_Count();
        bool get_IsReadOnly();
        IdentityReference* get_Item(int32_t index);
        IdentityReference* set_Item(int32_t index, IdentityReference* value);
        
        virtual void Add_a6fc54bc2aa3c029(IdentityReference* identity) override;
        virtual void Clear_16ef3c35b14f77a2() override;
        virtual bool Contains_ca946a648e63e62e(IdentityReference* identity) override;
        virtual void CopyTo_e6884c04285bc976(cli::array<IdentityReference*>* array, int32_t offset) override;
        virtual System::Collections::Generic::IEnumerator2<IdentityReference*>* GetEnumerator_ad4887f30f9e4c5() override;
        virtual System::Collections::IEnumerator* GetEnumerator_674ad93a972a4d67() override;
        virtual bool Remove_67948971902d0cce(IdentityReference* identity) override;
        virtual int32_t get_Count_a9c25d5c244affb9() override;
        virtual bool get_IsReadOnly_9569eb0bb1daa9b5() override;
    };
    
    
    struct MANAGED_API NTAccount : public virtual IdentityReference{
        System::String* _value;
        
        void constructor(System::String* name);
        void constructor(System::String* domainName, System::String* accountName);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool IsValidTargetType_23b55042c769999c(System::Type* targetType) override;
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual IdentityReference* Translate_1920497c56851819(System::Type* targetType) override;
        static bool op_Equality2(NTAccount* left, NTAccount* right);
        static bool op_Inequality2(NTAccount* left, NTAccount* right);
        virtual System::String* get_Value_31a6ad648afbd5f5() override;
        
    };
    
    
    struct MANAGED_API SecurityIdentifier : public virtual IdentityReference, public virtual System::IComparable2<SecurityIdentifier*>{
        cli::array<unsigned char>* buffer;
        static int32_t MaxBinaryLength;
        static int32_t MinBinaryLength;
        
        SecurityIdentifier();
        void constructor(System::String* sddlForm);
        void constructor(cli::array<unsigned char>* binaryForm, int32_t offset);
        void constructor(void* binaryForm);
        void constructor(WellKnownSidType sidType, SecurityIdentifier* domainSid);
        static void static_constructor();
        int32_t CompareTo(SecurityIdentifier* sid);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* o) override;
        bool Equals2(SecurityIdentifier* sid);
        void GetBinaryForm(cli::array<unsigned char>* binaryForm, int32_t offset);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        bool IsAccountSid();
        bool IsEqualDomainSid(SecurityIdentifier* sid);
        virtual bool IsValidTargetType_23b55042c769999c(System::Type* targetType) override;
        bool IsWellKnown(WellKnownSidType type);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        virtual IdentityReference* Translate_1920497c56851819(System::Type* targetType) override;
        System::String* GetSddlForm();
        static SecurityIdentifier* ParseSddlForm(System::String* sddlForm, int32_t pos);
        static cli::array<unsigned char>* ParseSddlForm2(System::String* sddlForm);
        static bool TryParseAuthority(System::String* s, uint64_t result);
        static bool TryParseSubAuthority(System::String* s, uint32_t result);
        static bool op_Equality2(SecurityIdentifier* left, SecurityIdentifier* right);
        static bool op_Inequality2(SecurityIdentifier* left, SecurityIdentifier* right);
        SecurityIdentifier* get_AccountDomainSid();
        int32_t get_BinaryLength();
        virtual System::String* get_Value_31a6ad648afbd5f5() override;
        
        virtual int32_t CompareTo_8a8b7d6c83beb422(SecurityIdentifier* sid) override;
    };
    
    
    struct MANAGED_API WellKnownAccount : public virtual System::Object{
        static cli::array<WellKnownAccount*>* accounts;
        WellKnownSidType _WellKnownValue_k__BackingField;
        bool _IsAbsolute_k__BackingField;
        System::String* _Sid_k__BackingField;
        System::String* _Rid_k__BackingField;
        System::String* _Name_k__BackingField;
        System::String* _SddlForm_k__BackingField;
        
        WellKnownAccount();
        void constructor();
        static void static_constructor();
        static WellKnownAccount* LookupByType(WellKnownSidType sidType);
        static WellKnownAccount* LookupBySid(System::String* s);
        static WellKnownAccount* LookupByName(System::String* s);
        static WellKnownAccount* LookupBySddlForm(System::String* s);
        WellKnownSidType get_WellKnownValue();
        WellKnownSidType set_WellKnownValue(WellKnownSidType value);
        bool get_IsAbsolute();
        bool set_IsAbsolute(bool value);
        System::String* get_Sid();
        System::String* set_Sid(System::String* value);
        System::String* get_Rid();
        System::String* set_Rid(System::String* value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        System::String* get_SddlForm();
        System::String* set_SddlForm(System::String* value);
        
    };
    
    
    struct MANAGED_API WindowsIdentity : public virtual System::Object, public virtual IIdentity, public virtual System::Runtime::Serialization::IDeserializationCallback, public virtual System::Runtime::Serialization::ISerializable, public virtual System::IDisposable{
        void* _token;
        System::String* _type;
        WindowsAccountType _account;
        bool _authenticated;
        System::String* _name;
        System::Runtime::Serialization::SerializationInfo* _info;
        static void* invalidWindows;
        
        WindowsIdentity();
        void constructor(void* userToken);
        void constructor(void* userToken, System::String* type);
        void constructor(void* userToken, System::String* type, WindowsAccountType acctType);
        void constructor(void* userToken, System::String* type, WindowsAccountType acctType, bool isAuthenticated);
        void constructor(System::String* sUserPrincipalName);
        void constructor(System::String* sUserPrincipalName, System::String* type);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static void static_constructor();
        void Dispose();
        virtual void Dispose_371d69f9ad650889(bool disposing);
        static WindowsIdentity* GetAnonymous();
        static WindowsIdentity* GetCurrent();
        static WindowsIdentity* GetCurrent2(bool ifImpersonating);
        static WindowsIdentity* GetCurrent3(TokenAccessLevels desiredAccess);
        virtual WindowsImpersonationContext* Impersonate_6e3f7806e2e3da82();
        static WindowsImpersonationContext* Impersonate2(void* userToken);
        void OnDeserialization(System::Object* sender);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void SetToken(void* token);
        static cli::array<System::String*>* _GetRoles(void* token);
        static void* GetCurrentToken();
        static System::String* GetTokenName(void* token);
        static void* GetUserToken(System::String* username);
        System::String* get_AuthenticationType();
        virtual bool get_IsAnonymous_a88327c93e2e8960();
        virtual bool get_IsAuthenticated_f18be2c360fd9fab();
        virtual bool get_IsGuest_36eb50762265599a();
        virtual bool get_IsSystem_ea722274c76a3e42();
        virtual System::String* get_Name_4712160195308583();
        virtual void* get_Token_75610dbb3e1b5765();
        IdentityReferenceCollection* get_Groups();
        TokenImpersonationLevel get_ImpersonationLevel();
        SecurityIdentifier* get_Owner();
        SecurityIdentifier* get_User();
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual void OnDeserialization_e9ecfecba8df9754(System::Object* sender) override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::String* get_AuthenticationType_fde3461ee63fdcbc() override;
        virtual bool get_IsAuthenticated_3494858dba7d3668() override;
        virtual System::String* get_Name_b724867acffa5fcd() override;
    };
    
    
    struct MANAGED_API WindowsImpersonationContext : public virtual System::Object, public virtual System::IDisposable{
        void* _token;
        bool undo;
        
        void constructor(void* token);
        void Dispose();
        virtual void Dispose_db07c4242fc9c1(bool disposing);
        void Undo();
        static bool CloseToken(void* token);
        static void* DuplicateToken(void* token);
        static bool SetCurrentToken(void* token);
        static bool RevertToSelf();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API WindowsPrincipal : public virtual System::Object, public virtual IPrincipal{
        WindowsIdentity* _identity;
        cli::array<System::String*>* m_roles;
        
        void constructor(WindowsIdentity* ntIdentity);
        virtual bool IsInRole_484b079e7834aa5(int32_t rid);
        virtual bool IsInRole_60b2cbc4fd38dbd6(System::String* role);
        virtual bool IsInRole_cb88710a835f582f(WindowsBuiltInRole role);
        virtual bool IsInRole_2e2c1703bdd079f0(SecurityIdentifier* sid);
        static bool IsMemberOfGroupId(void* user, void* group);
        static bool IsMemberOfGroupName(void* user, System::String* group);
        virtual IIdentity* get_Identity_d9c071c6a431dde4();
        void* get_Token();
        
        virtual bool IsInRole_3999c98ebfe5d242(System::String* role) override;
        virtual IIdentity* get_Identity_8451efd6a7a604b6() override;
    };
    
}}}
namespace System { namespace Text {
    
    struct MANAGED_API ASCIIEncoding : public virtual Encoding{
        static constexpr int32_t ASCII_CODE_PAGE = 20127;
        
        void constructor();
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* chars) override;
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        int32_t GetBytes8(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        int32_t GetBytes10(System::String* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        int32_t InternalGetBytes(char16_t* chars, int32_t charLength, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        int32_t GetChars6(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex, DecoderFallbackBuffer* buffer);
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount) override;
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount) override;
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount) override;
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count) override;
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count) override;
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5() override;
        virtual Encoder* GetEncoder_c3a25b0b739d51c8() override;
        virtual bool get_IsSingleByte_35caa6a029e2b816() override;
        
    };
    
    
    struct MANAGED_API Decoder : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        Encoding* encoding;
        Decoder2* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API CodePageEncoding : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        int32_t codePage;
        bool isReadOnly;
        EncoderFallback* encoderFallback;
        DecoderFallback* decoderFallback;
        Encoding* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API DecoderExceptionFallback : public virtual DecoderFallback{
        
        void constructor();
        virtual DecoderFallbackBuffer* CreateFallbackBuffer_dad5db136d065044() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t get_MaxCharCount_4c0c8ac224d22848() override;
        
    };
    
    
    struct MANAGED_API DecoderExceptionFallbackBuffer : public virtual DecoderFallbackBuffer{
        
        void constructor();
        virtual bool Fallback_1ea6d9bfef1f4bac(cli::array<unsigned char>* bytesUnknown, int32_t index) override;
        virtual char16_t GetNextChar_7967ec44cca772f9() override;
        virtual bool MovePrevious_c3549fdac1194a1d() override;
        virtual int32_t get_Remaining_b256701c9c2b0bc4() override;
        
    };
    
    
    struct MANAGED_API DecoderFallbackException : public virtual System::ArgumentException{
        cli::array<unsigned char>* bytes_unknown;
        int32_t index;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::String* message, cli::array<unsigned char>* bytesUnknown, int32_t index);
        cli::array<unsigned char>* get_BytesUnknown();
        int32_t get_Index();
        
    };
    
    
    struct MANAGED_API DecoderReplacementFallback : public virtual DecoderFallback{
        System::String* replacement;
        
        void constructor();
        void constructor(System::String* replacement);
        virtual DecoderFallbackBuffer* CreateFallbackBuffer_dad5db136d065044() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* get_DefaultString();
        virtual int32_t get_MaxCharCount_4c0c8ac224d22848() override;
        
    };
    
    
    struct MANAGED_API DecoderReplacementFallbackBuffer : public virtual DecoderFallbackBuffer{
        bool fallback_assigned;
        int32_t current;
        System::String* replacement;
        
        void constructor(DecoderReplacementFallback* fallback);
        virtual bool Fallback_1ea6d9bfef1f4bac(cli::array<unsigned char>* bytesUnknown, int32_t index) override;
        virtual char16_t GetNextChar_7967ec44cca772f9() override;
        virtual bool MovePrevious_c3549fdac1194a1d() override;
        virtual void Reset_dc5d0be891187587() override;
        virtual int32_t get_Remaining_b256701c9c2b0bc4() override;
        
    };
    
    
    struct MANAGED_API EncoderExceptionFallback : public virtual EncoderFallback{
        
        void constructor();
        virtual EncoderFallbackBuffer* CreateFallbackBuffer_a579589a4ca0924f() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t get_MaxCharCount_d3886d08d9f851fe() override;
        
    };
    
    
    struct MANAGED_API EncoderExceptionFallbackBuffer : public virtual EncoderFallbackBuffer{
        
        void constructor();
        virtual bool Fallback_2e254195ffd348dc(char16_t charUnknown, int32_t index) override;
        virtual bool Fallback_571cd731a6ea7558(char16_t charUnknownHigh, char16_t charUnknownLow, int32_t index) override;
        virtual char16_t GetNextChar_84e759436123fac0() override;
        virtual bool MovePrevious_a841421c2eaf80e7() override;
        virtual int32_t get_Remaining_dd4149ac6c4a9379() override;
        
    };
    
    
    struct MANAGED_API EncoderFallbackException : public virtual System::ArgumentException{
        char16_t char_unknown;
        int32_t index;
        char16_t char_unknown_high;
        char16_t char_unknown_low;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(char16_t charUnknown, int32_t index);
        void constructor(char16_t charUnknownHigh, char16_t charUnknownLow, int32_t index);
        bool IsUnknownSurrogate();
        char16_t get_CharUnknown();
        char16_t get_CharUnknownHigh();
        char16_t get_CharUnknownLow();
        int32_t get_Index();
        
    };
    
    
    struct MANAGED_API EncoderReplacementFallback : public virtual EncoderFallback{
        System::String* replacement;
        
        void constructor();
        void constructor(System::String* replacement);
        virtual EncoderFallbackBuffer* CreateFallbackBuffer_a579589a4ca0924f() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        System::String* get_DefaultString();
        virtual int32_t get_MaxCharCount_d3886d08d9f851fe() override;
        
    };
    
    
    struct MANAGED_API EncoderReplacementFallbackBuffer : public virtual EncoderFallbackBuffer{
        System::String* replacement;
        int32_t current;
        bool fallback_assigned;
        
        void constructor(EncoderReplacementFallback* fallback);
        virtual bool Fallback_2e254195ffd348dc(char16_t charUnknown, int32_t index) override;
        virtual bool Fallback_571cd731a6ea7558(char16_t charUnknownHigh, char16_t charUnknownLow, int32_t index) override;
        bool Fallback5(int32_t index);
        virtual char16_t GetNextChar_84e759436123fac0() override;
        virtual bool MovePrevious_a841421c2eaf80e7() override;
        virtual void Reset_e8feb6df1bde1a59() override;
        virtual int32_t get_Remaining_dd4149ac6c4a9379() override;
        
    };
    
    
    struct MANAGED_API ForwardingDecoder : public virtual Decoder2{
        Encoding* encoding;
        
        void constructor(Encoding* enc);
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        
    };
    
    
    struct MANAGED_API ForwardingEncoder : public virtual Encoder{
        Encoding* encoding;
        
        void constructor(Encoding* enc);
        virtual int32_t GetByteCount_85f1385779510289(cli::array<char16_t>* chars, int32_t index, int32_t count, bool flush) override;
        virtual int32_t GetBytes_ac22a3cfd526ffd3(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteCount, bool flush) override;
        
    };
    
    
    struct MANAGED_API EncodingInfo : public virtual System::Object{
        int32_t codepage;
        Encoding* encoding;
        
        void constructor(int32_t cp);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        Encoding* GetEncoding();
        int32_t get_CodePage();
        System::String* get_DisplayName();
        System::String* get_Name();
        
    };
    
    
    struct MANAGED_API Latin1Encoding : public virtual Encoding{
        static constexpr int32_t ISOLATIN_CODE_PAGE = 28591;
        
        void constructor();
        virtual bool IsAlwaysNormalized_3d9dd6497a77d101(NormalizationForm form) override;
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* s) override;
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        int32_t GetBytes8(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        int32_t GetBytes10(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        int32_t InternalGetBytes(char16_t* chars, int32_t charLength, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallbackBuffer* buffer, cli::array<char16_t>* fallback_chars);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual System::String* GetString_12d22365648431d7(cli::array<unsigned char>* bytes) override;
        virtual bool get_IsSingleByte_35caa6a029e2b816() override;
        virtual System::String* get_BodyName_4e100a97a0424038() override;
        virtual System::String* get_EncodingName_cceb96db74b2252b() override;
        virtual System::String* get_HeaderName_905c2b4b7e3e3c75() override;
        virtual bool get_IsBrowserDisplay_52cbc4f0fcb00858() override;
        virtual bool get_IsBrowserSave_1e19416373d08662() override;
        virtual bool get_IsMailNewsDisplay_53d46b3981a20587() override;
        virtual bool get_IsMailNewsSave_217a4ecd1696aff8() override;
        virtual System::String* get_WebName_baa3e40df8ce4d3e() override;
        
    };
    
    
    struct MANAGED_API MLangEncoder : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        Encoding* encoding;
        Encoder* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MLangDecoder : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        Encoding* encoding;
        Decoder2* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API MLangCodePageEncoding : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        int32_t codePage;
        bool isReadOnly;
        EncoderFallback* encoderFallback;
        DecoderFallback* decoderFallback;
        Encoding* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API StringBuilder : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        static constexpr int32_t constDefaultCapacity = 16;
        int32_t _length;
        System::String* _str;
        System::String* _cached_str;
        int32_t _maxCapacity;
        
        void constructor(System::String* value, int32_t startIndex, int32_t length, int32_t capacity);
        void constructor(System::String* value, int32_t startIndex, int32_t length, int32_t capacity, int32_t maxCapacity);
        void constructor();
        void constructor(int32_t capacity);
        void constructor(int32_t capacity, int32_t maxCapacity);
        void constructor(System::String* value);
        void constructor(System::String* value, int32_t capacity);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        virtual System::String* ToString_1636a0751cb9ac11() override;
        System::String* ToString3(int32_t startIndex, int32_t length);
        int32_t EnsureCapacity(int32_t capacity);
        bool Equals3(StringBuilder* sb);
        StringBuilder* Remove(int32_t startIndex, int32_t length);
        StringBuilder* Replace(char16_t oldChar, char16_t newChar);
        StringBuilder* Replace2(char16_t oldChar, char16_t newChar, int32_t startIndex, int32_t count);
        StringBuilder* Replace3(System::String* oldValue, System::String* newValue);
        StringBuilder* Replace4(System::String* oldValue, System::String* newValue, int32_t startIndex, int32_t count);
        StringBuilder* Append(cli::array<char16_t>* value);
        StringBuilder* Append2(System::String* value);
        StringBuilder* Append3(bool value);
        StringBuilder* Append4(unsigned char value);
        StringBuilder* Append5(System::Decimal value);
        StringBuilder* Append6(double value);
        StringBuilder* Append7(int16_t value);
        StringBuilder* Append8(int32_t value);
        StringBuilder* Append9(int64_t value);
        StringBuilder* Append10(System::Object* value);
        StringBuilder* Append11(signed char value);
        StringBuilder* Append12(float value);
        StringBuilder* Append13(uint16_t value);
        StringBuilder* Append14(uint32_t value);
        StringBuilder* Append15(uint64_t value);
        StringBuilder* Append16(char16_t value);
        StringBuilder* Append17(char16_t value, int32_t repeatCount);
        StringBuilder* Append18(cli::array<char16_t>* value, int32_t startIndex, int32_t charCount);
        StringBuilder* Append19(System::String* value, int32_t startIndex, int32_t count);
        StringBuilder* Clear();
        StringBuilder* AppendLine();
        StringBuilder* AppendLine2(System::String* value);
        StringBuilder* AppendFormat(System::String* format, cli::array<System::Object*>* args);
        StringBuilder* AppendFormat2(System::IFormatProvider* provider, System::String* format, cli::array<System::Object*>* args);
        StringBuilder* AppendFormat3(System::String* format, System::Object* arg0);
        StringBuilder* AppendFormat4(System::String* format, System::Object* arg0, System::Object* arg1);
        StringBuilder* AppendFormat5(System::String* format, System::Object* arg0, System::Object* arg1, System::Object* arg2);
        StringBuilder* Insert(int32_t index, cli::array<char16_t>* value);
        StringBuilder* Insert2(int32_t index, System::String* value);
        StringBuilder* Insert3(int32_t index, bool value);
        StringBuilder* Insert4(int32_t index, unsigned char value);
        StringBuilder* Insert5(int32_t index, char16_t value);
        StringBuilder* Insert6(int32_t index, System::Decimal value);
        StringBuilder* Insert7(int32_t index, double value);
        StringBuilder* Insert8(int32_t index, int16_t value);
        StringBuilder* Insert9(int32_t index, int32_t value);
        StringBuilder* Insert10(int32_t index, int64_t value);
        StringBuilder* Insert11(int32_t index, System::Object* value);
        StringBuilder* Insert12(int32_t index, signed char value);
        StringBuilder* Insert13(int32_t index, float value);
        StringBuilder* Insert14(int32_t index, uint16_t value);
        StringBuilder* Insert15(int32_t index, uint32_t value);
        StringBuilder* Insert16(int32_t index, uint64_t value);
        StringBuilder* Insert17(int32_t index, System::String* value, int32_t count);
        StringBuilder* Insert18(int32_t index, cli::array<char16_t>* value, int32_t startIndex, int32_t charCount);
        void InternalEnsureCapacity(int32_t size);
        void CopyTo(int32_t sourceIndex, cli::array<char16_t>* destination, int32_t destinationIndex, int32_t count);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        int32_t get_MaxCapacity();
        int32_t get_Capacity();
        int32_t set_Capacity(int32_t value);
        int32_t get_Length();
        int32_t set_Length(int32_t value);
        char16_t get_Chars(int32_t index);
        char16_t set_Chars(int32_t index, char16_t value);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API SurrogateEncoder : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::Runtime::Serialization::IObjectReference{
        Encoding* encoding;
        Encoder* realObject;
        
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        System::Object* GetRealObject(System::Runtime::Serialization::StreamingContext context);
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
        virtual System::Object* GetRealObject_692566897a6926e4(System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API UnicodeDecoder : public virtual Decoder2{
        bool bigEndian;
        int32_t leftOverByte;
        
        void constructor(bool bigEndian);
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        
    };
    
    
    struct MANAGED_API UnicodeEncoding : public virtual Encoding{
        static constexpr int32_t UNICODE_CODE_PAGE = 1200;
        static constexpr int32_t BIG_UNICODE_CODE_PAGE = 1201;
        static constexpr int32_t CharSize = 2;
        bool bigEndian;
        bool byteOrderMark;
        
        void constructor();
        void constructor(bool bigEndian, bool byteOrderMark);
        void constructor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* s) override;
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count) override;
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount) override;
        int32_t GetBytesInternal(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count) override;
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        int32_t GetCharsInternal(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount);
        virtual Encoder* GetEncoder_c3a25b0b739d51c8() override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5() override;
        virtual cli::array<unsigned char>* GetPreamble_15ff85f00c460f87() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static void CopyChars(unsigned char* src, unsigned char* dest, int32_t count, bool bigEndian);
        
    };
    
    
    struct MANAGED_API UTF32Decoder : public virtual Decoder2{
        bool bigEndian;
        int32_t leftOverByte;
        int32_t leftOverLength;
        
        void constructor(bool bigEndian);
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        
    };
    
    
    struct MANAGED_API UTF32Encoding : public virtual Encoding{
        static constexpr int32_t UTF32_CODE_PAGE = 12000;
        static constexpr int32_t BIG_UTF32_CODE_PAGE = 12001;
        bool bigEndian;
        bool byteOrderMark;
        
        void constructor();
        void constructor(bool bigEndian, bool byteOrderMark);
        void constructor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5() override;
        virtual cli::array<unsigned char>* GetPreamble_15ff85f00c460f87() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count) override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* s) override;
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount) override;
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count) override;
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual Encoder* GetEncoder_c3a25b0b739d51c8() override;
        
    };
    
    
    struct MANAGED_API UTF7Decoder : public virtual Decoder2{
        int32_t leftOver;
        
        void constructor();
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        
    };
    
    
    struct MANAGED_API UTF7Encoder : public virtual Encoder{
        bool allowOptionals;
        int32_t leftOver;
        bool isInShifted;
        
        void constructor(bool allowOptionals);
        virtual int32_t GetByteCount_85f1385779510289(cli::array<char16_t>* chars, int32_t index, int32_t count, bool flush) override;
        virtual int32_t GetBytes_ac22a3cfd526ffd3(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, bool flush) override;
        
    };
    
    
    struct MANAGED_API UTF7Encoding : public virtual Encoding{
        static constexpr int32_t UTF7_CODE_PAGE = 65000;
        static /*constexpr*/ System::String* base64Chars() { return _T("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"); }
        bool allowOptionals;
        static cli::array<unsigned char>* encodingRules;
        static cli::array<signed char>* base64Values;
        
        UTF7Encoding();
        void constructor();
        void constructor(bool allowOptionals);
        static void static_constructor();
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        static int32_t InternalGetByteCount(cli::array<char16_t>* chars, int32_t index, int32_t count, bool flush, int32_t leftOver, bool isInShifted, bool allowOptionals);
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        static int32_t InternalGetBytes(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, bool flush, int32_t leftOver, bool isInShifted, bool allowOptionals);
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        static int32_t InternalGetCharCount(cli::array<unsigned char>* bytes, int32_t index, int32_t count, int32_t leftOver);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        static int32_t InternalGetChars(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex, int32_t leftOver);
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5() override;
        virtual Encoder* GetEncoder_c3a25b0b739d51c8() override;
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count) override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* s) override;
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount) override;
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count) override;
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        
    };
    
    
    struct MANAGED_API UTF8Decoder : public virtual Decoder2{
        uint32_t leftOverBits;
        uint32_t leftOverCount;
        
        void constructor(DecoderFallback* fallback);
        virtual int32_t GetCharCount_32dfa16feccdb25d(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetChars_beecc497fe0b7526(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        
    };
    
    
    struct MANAGED_API UTF8Encoder : public virtual Encoder{
        char16_t leftOverForCount;
        char16_t leftOverForConv;
        
        void constructor(EncoderFallback* fallback, bool emitIdentifier);
        virtual int32_t GetByteCount_85f1385779510289(cli::array<char16_t>* chars, int32_t index, int32_t count, bool flush) override;
        virtual int32_t GetBytes_ac22a3cfd526ffd3(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, bool flush) override;
        virtual int32_t GetByteCount_addb240243fed46d(char16_t* chars, int32_t count, bool flush) override;
        virtual int32_t GetBytes_4985ee639a8a9b65(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount, bool flush) override;
        
    };
    
    
    struct MANAGED_API UTF8Encoding : public virtual Encoding{
        static constexpr int32_t UTF8_CODE_PAGE = 65001;
        bool emitIdentifier;
        
        void constructor();
        void constructor(bool encoderShouldEmitUTF8Identifier);
        void constructor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
        static int32_t InternalGetByteCount(cli::array<char16_t>* chars, int32_t index, int32_t count, EncoderFallback* fallback, char16_t leftOver, bool flush);
        static int32_t InternalGetByteCount2(char16_t* chars, int32_t count, EncoderFallback* fallback, char16_t leftOver, bool flush);
        static cli::array<char16_t>* GetFallbackChars(char16_t* chars, char16_t* start, EncoderFallback* fallback, EncoderFallbackBuffer* buffer);
        virtual int32_t GetByteCount_7494b18116693a5e(cli::array<char16_t>* chars, int32_t index, int32_t count) override;
        virtual int32_t GetByteCount_aec9823bd32c6735(char16_t* chars, int32_t count) override;
        static int32_t InternalGetBytes(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex, EncoderFallback* fallback, EncoderFallbackBuffer* buffer, char16_t leftOver, bool flush);
        static int32_t InternalGetBytes2(char16_t* chars, int32_t count, unsigned char* bytes, int32_t bcount, EncoderFallback* fallback, EncoderFallbackBuffer* buffer, char16_t leftOver, bool flush);
        virtual int32_t GetBytes_90650b3cf924e5e2(cli::array<char16_t>* chars, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetBytes_3384066dd8b91ed8(System::String* s, int32_t charIndex, int32_t charCount, cli::array<unsigned char>* bytes, int32_t byteIndex) override;
        virtual int32_t GetBytes_9b94592fd1d1a5af(char16_t* chars, int32_t charCount, unsigned char* bytes, int32_t byteCount) override;
        static int32_t InternalGetCharCount(cli::array<unsigned char>* bytes, int32_t index, int32_t count, uint32_t leftOverBits, uint32_t leftOverCount, System::Object* provider, DecoderFallbackBuffer* fallbackBuffer, cli::array<unsigned char>* bufferArg, bool flush);
        static int32_t InternalGetCharCount2(unsigned char* bytes, int32_t count, uint32_t leftOverBits, uint32_t leftOverCount, System::Object* provider, DecoderFallbackBuffer* fallbackBuffer, cli::array<unsigned char>* bufferArg, bool flush);
        static int32_t Fallback(System::Object* provider, DecoderFallbackBuffer* buffer, cli::array<unsigned char>* bufferArg, unsigned char* bytes, int64_t index, uint32_t size);
        static void Fallback2(System::Object* provider, DecoderFallbackBuffer* buffer, cli::array<unsigned char>* bufferArg, unsigned char* bytes, int64_t byteIndex, uint32_t size, char16_t* chars, int32_t charIndex);
        virtual int32_t GetCharCount_aa33a7717b095c8e(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        virtual int32_t GetCharCount_4e601cea7c3f10cd(unsigned char* bytes, int32_t count) override;
        static int32_t InternalGetChars(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex, uint32_t leftOverBits, uint32_t leftOverCount, System::Object* provider, DecoderFallbackBuffer* fallbackBuffer, cli::array<unsigned char>* bufferArg, bool flush);
        static int32_t InternalGetChars2(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount, uint32_t leftOverBits, uint32_t leftOverCount, System::Object* provider, DecoderFallbackBuffer* fallbackBuffer, cli::array<unsigned char>* bufferArg, bool flush);
        virtual int32_t GetChars_d7b47e17fd0a13f2(cli::array<unsigned char>* bytes, int32_t byteIndex, int32_t byteCount, cli::array<char16_t>* chars, int32_t charIndex) override;
        virtual int32_t GetChars_8904b350d20e4ab8(unsigned char* bytes, int32_t byteCount, char16_t* chars, int32_t charCount) override;
        virtual int32_t GetMaxByteCount_5bd2cee34757a0d4(int32_t charCount) override;
        virtual int32_t GetMaxCharCount_4eba560ac1240518(int32_t byteCount) override;
        virtual Decoder2* GetDecoder_380c5e0c575e9cb5() override;
        virtual Encoder* GetEncoder_c3a25b0b739d51c8() override;
        virtual cli::array<unsigned char>* GetPreamble_15ff85f00c460f87() override;
        virtual bool Equals_ed975d2f4a7d193e(System::Object* value) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        virtual int32_t GetByteCount_d98cd1485dc2ee98(System::String* chars) override;
        virtual System::String* GetString_39f4843197ddbe92(cli::array<unsigned char>* bytes, int32_t index, int32_t count) override;
        
    };
    
}}
namespace System { namespace Threading {
    
    struct MANAGED_API AbandonedMutexException : public virtual System::SystemException{
        Mutex* mutex;
        int32_t mutex_index;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(int32_t location, WaitHandle* handle);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* inner);
        void constructor(System::String* message, int32_t location, WaitHandle* handle);
        void constructor(System::String* message, System::Exception* inner, int32_t location, WaitHandle* handle);
        Mutex* get_Mutex();
        int32_t get_MutexIndex();
        
    };
    
    
    struct MANAGED_API AtomicBoolean : public virtual System::Object{
        static constexpr int32_t UnSet = 0;
        static constexpr int32_t Set = 1;
        int32_t flag;
        
        void constructor();
        bool CompareAndExchange(bool expected, bool newVal);
        static AtomicBoolean* FromValue(bool value);
        bool TrySet();
        bool TryRelaxedSet();
        bool Exchange(bool newVal);
        bool Equals3(AtomicBoolean* rhs);
        virtual bool Equals_ed975d2f4a7d193e(System::Object* rhs) override;
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        static bool op_Explicit(AtomicBoolean* rhs);
        static AtomicBoolean* op_Implicit(bool rhs);
        bool get_Value();
        bool set_Value(bool value);
        
    };
    
    
    struct MANAGED_API AutoResetEvent : public virtual EventWaitHandle{
        
        void constructor(bool initialState);
        
    };
    
    
    struct MANAGED_API CancellationTokenSource : public virtual System::Object, public virtual System::IDisposable{
        bool canceled;
        bool processed;
        bool disposed;
        int32_t currId;
        System::Collections::Generic::Dictionary<CancellationTokenRegistration, System::Action*>* callbacks;
        ManualResetEvent* handle;
        System::Object* syncRoot;
        static CancellationTokenSource* NoneSource;
        static CancellationTokenSource* CanceledSource;
        
        CancellationTokenSource();
        static void static_constructor();
        void constructor();
        void Cancel();
        void Cancel2(bool throwOnFirstException);
        static CancellationTokenSource* CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2);
        static CancellationTokenSource* CreateLinkedTokenSource2(cli::array<CancellationToken>* tokens);
        static int32_t CheckTimeout(System::TimeSpan delay);
        void CheckDisposed();
        void Dispose();
        void Dispose2(bool disposing);
        CancellationTokenRegistration Register(System::Action* callback, bool useSynchronizationContext);
        void RemoveCallback(CancellationTokenRegistration tokenReg);
        CancellationToken get_Token();
        bool get_IsCancellationRequested();
        WaitHandle* get_WaitHandle();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API CompressedStack : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable{
        System::Collections::ArrayList* _list;
        
        void constructor(int32_t length);
        void constructor(CompressedStack* cs);
        CompressedStack* CreateCopy();
        static CompressedStack* Capture();
        static CompressedStack* GetCompressedStack();
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static void Run(CompressedStack* compressedStack, ContextCallback* callback, System::Object* state);
        bool Equals3(CompressedStack* cs);
        bool IsEmpty();
        System::Collections::IList* get_List();
        
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API CountdownEvent : public virtual System::Object, public virtual System::IDisposable{
        int32_t initialCount;
        int32_t initial;
        ManualResetEventSlim* evt;
        
        void constructor(int32_t initialCount);
        bool Signal();
        bool Signal2(int32_t signalCount);
        void AddCount();
        void AddCount2(int32_t signalCount);
        bool TryAddCount();
        bool TryAddCount2(int32_t signalCount);
        bool ApplyOperation(int32_t num, int32_t newValue);
        void Wait();
        void Wait2(CancellationToken cancellationToken);
        bool Wait3(int32_t millisecondsTimeout);
        bool Wait4(System::TimeSpan timeout);
        bool Wait5(int32_t millisecondsTimeout, CancellationToken cancellationToken);
        bool Wait6(System::TimeSpan timeout, CancellationToken cancellationToken);
        void Reset();
        void Reset2(int32_t count);
        void Dispose();
        virtual void Dispose_dcb0f063dfdb5223(bool disposing);
        void CheckDisposed();
        int32_t get_CurrentCount();
        int32_t get_InitialCount();
        bool get_IsSet();
        WaitHandle* get_WaitHandle();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API ExecutionContext : public virtual System::Object, public virtual System::Runtime::Serialization::ISerializable, public virtual System::IDisposable{
        System::Security::SecurityContext* _sc;
        bool _suppressFlow;
        bool _capture;
        
        void constructor();
        void constructor(ExecutionContext* ec);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static ExecutionContext* Capture();
        ExecutionContext* CreateCopy();
        void Dispose();
        void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        static bool IsFlowSuppressed();
        static void RestoreFlow();
        static void Run(ExecutionContext* executionContext, ContextCallback* callback, System::Object* state);
        static AsyncFlowControl SuppressFlow();
        System::Security::SecurityContext* get_SecurityContext();
        System::Security::SecurityContext* set_SecurityContext(System::Security::SecurityContext* value);
        bool get_FlowSuppressed();
        bool set_FlowSuppressed(bool value);
        
        virtual void Dispose_95cb2516542c2f97() override;
        virtual void GetObjectData_11b895a112e04409(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) override;
    };
    
    
    struct MANAGED_API HostExecutionContext : public virtual System::Object{
        System::Object* _state;
        
        void constructor();
        void constructor(System::Object* state);
        virtual HostExecutionContext* CreateCopy_5e84bdc43bfd8024();
        System::Object* get_State();
        System::Object* set_State(System::Object* value);
        
    };
    
    
    struct MANAGED_API HostExecutionContextManager : public virtual System::Object{
        
        void constructor();
        virtual HostExecutionContext* Capture_fdab1ba018894683();
        virtual void Revert_3f40d56dc63ed70e(System::Object* previousState);
        virtual System::Object* SetHostExecutionContext_2a556375f18d95c8(HostExecutionContext* hostExecutionContext);
        
    };
    
    
    struct MANAGED_API Interlocked : public virtual System::Object{
        
        static int32_t CompareExchange(int32_t location1, int32_t value, int32_t comparand);
        static System::Object* CompareExchange2(System::Object* location1, System::Object* value, System::Object* comparand);
        static float CompareExchange3(float location1, float value, float comparand);
        static int32_t Decrement(int32_t location);
        static int64_t Decrement2(int64_t location);
        static int32_t Increment(int32_t location);
        static int64_t Increment2(int64_t location);
        static int32_t Exchange(int32_t location1, int32_t value);
        static System::Object* Exchange2(System::Object* location1, System::Object* value);
        static float Exchange3(float location1, float value);
        static int64_t CompareExchange4(int64_t location1, int64_t value, int64_t comparand);
        static void* CompareExchange5(void* location1, void* value, void* comparand);
        static double CompareExchange6(double location1, double value, double comparand);
        template<class T>
        static T CompareExchange_1(T location1, T value, T comparand);
        static int64_t Exchange4(int64_t location1, int64_t value);
        static void* Exchange5(void* location1, void* value);
        static double Exchange6(double location1, double value);
        template<class T>
        static T Exchange_1(T location1, T value);
        static int64_t Read(int64_t location);
        static int32_t Add(int32_t location1, int32_t value);
        static int64_t Add2(int64_t location1, int64_t value);
        
    };
    
    
    struct MANAGED_API LazyInitializer : public virtual System::Object{
        
        template<class T>
        static T EnsureInitialized_1(T target);
        template<class T>
        static T EnsureInitialized_12(T target, System::Func<T>* valueFactory);
        template<class T>
        static T EnsureInitialized_13(T target, bool initialized, System::Object* syncLock);
        template<class T>
        static T EnsureInitialized_14(T target, bool initialized, System::Object* syncLock, System::Func<T>* valueFactory);
        template<class T>
        static T GetDefaultCtorValue_1();
        
    };
    
    
    struct MANAGED_API LockQueue : public virtual System::Object{
        ReaderWriterLock* rwlock;
        int32_t lockCount;
        
        void constructor(ReaderWriterLock* rwlock);
        bool Wait(int32_t timeout);
        void Pulse();
        bool get_IsEmpty();
        
    };
    
    
    struct MANAGED_API LockRecursionException : public virtual System::Exception{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
    
    struct MANAGED_API ManualResetEvent : public virtual EventWaitHandle{
        
        void constructor(bool initialState);
        
    };
    
    
    struct MANAGED_API ManualResetEventSlim : public virtual System::Object, public virtual System::IDisposable{
        int32_t spinCount;
        ManualResetEvent* handle;
        AtomicBooleanValue disposed;
        bool used;
        bool set;
        
        void constructor();
        void constructor(bool initialState);
        void constructor(bool initialState, int32_t spinCount);
        void Reset();
        void Set();
        void Wait();
        bool Wait2(int32_t millisecondsTimeout);
        bool Wait3(System::TimeSpan timeout);
        void Wait4(CancellationToken cancellationToken);
        bool Wait5(int32_t millisecondsTimeout, CancellationToken cancellationToken);
        bool Wait6(System::TimeSpan timeout, CancellationToken cancellationToken);
        void Dispose();
        virtual void Dispose_4992834dce417895(bool disposing);
        void ThrowIfDisposed();
        static int32_t CheckTimeout(System::TimeSpan timeout);
        bool get_IsSet();
        int32_t get_SpinCount();
        WaitHandle* get_WaitHandle();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API Monitor : public virtual System::Object{
        
        static bool Monitor_try_enter(System::Object* obj, int32_t ms);
        static void Enter(System::Object* obj);
        static void Exit(System::Object* obj);
        static void Monitor_pulse(System::Object* obj);
        static bool Monitor_test_synchronised(System::Object* obj);
        static void Pulse(System::Object* obj);
        static void Monitor_pulse_all(System::Object* obj);
        static void PulseAll(System::Object* obj);
        static bool TryEnter(System::Object* obj);
        static bool TryEnter2(System::Object* obj, int32_t millisecondsTimeout);
        static bool TryEnter3(System::Object* obj, System::TimeSpan timeout);
        static bool Monitor_wait(System::Object* obj, int32_t ms);
        static bool Wait(System::Object* obj);
        static bool Wait2(System::Object* obj, int32_t millisecondsTimeout);
        static bool Wait3(System::Object* obj, System::TimeSpan timeout);
        static bool Wait4(System::Object* obj, int32_t millisecondsTimeout, bool exitContext);
        static bool Wait5(System::Object* obj, System::TimeSpan timeout, bool exitContext);
        static void try_enter_with_atomic_var(System::Object* obj, int32_t millisecondsTimeout, bool lockTaken);
        static void Enter2(System::Object* obj, bool lockTaken);
        static void TryEnter4(System::Object* obj, bool lockTaken);
        static void TryEnter5(System::Object* obj, System::TimeSpan timeout, bool lockTaken);
        static void TryEnter6(System::Object* obj, int32_t millisecondsTimeout, bool lockTaken);
        
    };
    
    
    struct MANAGED_API Mutex : public virtual WaitHandle{
        
        void constructor(void* handle);
        void constructor();
        void constructor(bool initiallyOwned);
        void constructor(bool initiallyOwned, System::String* name);
        void constructor(bool initiallyOwned, System::String* name, bool createdNew);
        void constructor(bool initiallyOwned, System::String* name, bool createdNew, System::Security::AccessControl::MutexSecurity* mutexSecurity);
        static void* CreateMutex_internal(bool initiallyOwned, System::String* name, bool created);
        static bool ReleaseMutex_internal(void* handle);
        static void* OpenMutex_internal(System::String* name, System::Security::AccessControl::MutexRights rights, System::IO::MonoIOError error);
        System::Security::AccessControl::MutexSecurity* GetAccessControl();
        static Mutex* OpenExisting(System::String* name);
        static Mutex* OpenExisting2(System::String* name, System::Security::AccessControl::MutexRights rights);
        void ReleaseMutex();
        void SetAccessControl(System::Security::AccessControl::MutexSecurity* mutexSecurity);
        
    };
    
    
    struct MANAGED_API NativeEventCalls : public virtual System::Object{
        
        static void* CreateEvent_internal(bool manual, bool initial, System::String* name, bool created);
        static bool SetEvent_internal(void* handle);
        static bool ResetEvent_internal(void* handle);
        static void CloseEvent_internal(void* handle);
        static void* OpenEvent_internal(System::String* name, System::Security::AccessControl::EventWaitHandleRights rights, System::IO::MonoIOError error);
        
    };
    
    
    struct MANAGED_API Overlapped : public virtual System::Object{
        System::IAsyncResult* ares;
        int32_t offsetL;
        int32_t offsetH;
        int32_t evt;
        void* evt_ptr;
        
        void constructor();
        void constructor(int32_t offsetLo, int32_t offsetHi, int32_t hEvent, System::IAsyncResult* ar);
        void constructor(int32_t offsetLo, int32_t offsetHi, void* hEvent, System::IAsyncResult* ar);
        static void Free(NativeOverlapped* nativeOverlappedPtr);
        static Overlapped* Unpack(NativeOverlapped* nativeOverlappedPtr);
        NativeOverlapped* Pack(IOCompletionCallback* iocb);
        NativeOverlapped* Pack2(IOCompletionCallback* iocb, System::Object* userData);
        NativeOverlapped* UnsafePack(IOCompletionCallback* iocb);
        NativeOverlapped* UnsafePack2(IOCompletionCallback* iocb, System::Object* userData);
        System::IAsyncResult* get_AsyncResult();
        System::IAsyncResult* set_AsyncResult(System::IAsyncResult* value);
        int32_t get_EventHandle();
        int32_t set_EventHandle(int32_t value);
        void* get_EventHandleIntPtr();
        void* set_EventHandleIntPtr(void* value);
        int32_t get_OffsetHigh();
        int32_t set_OffsetHigh(int32_t value);
        int32_t get_OffsetLow();
        int32_t set_OffsetLow(int32_t value);
        
    };
    
    
    struct MANAGED_API ReaderWriterLock : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject{
        int32_t seq_num;
        int32_t state;
        int32_t readers;
        int32_t writer_lock_owner;
        LockQueue* writer_queue;
        System::Collections::Hashtable* reader_locks;
        
        void constructor();
        virtual void Finalize_59e583210c385b65();
        void AcquireReaderLock(int32_t millisecondsTimeout);
        void AcquireReaderLock2(int32_t millisecondsTimeout, int32_t initialLockCount);
        void AcquireReaderLock3(System::TimeSpan timeout);
        void AcquireWriterLock(int32_t millisecondsTimeout);
        void AcquireWriterLock2(int32_t millisecondsTimeout, int32_t initialLockCount);
        void AcquireWriterLock3(System::TimeSpan timeout);
        bool AnyWritersSince(int32_t seqNum);
        void DowngradeFromWriterLock(LockCookie lockCookie);
        LockCookie ReleaseLock();
        void ReleaseReaderLock();
        void ReleaseReaderLock2(int32_t currentCount, int32_t releaseCount);
        void ReleaseWriterLock();
        void ReleaseWriterLock2(int32_t releaseCount);
        void RestoreLock(LockCookie lockCookie);
        LockCookie UpgradeToWriterLock(int32_t millisecondsTimeout);
        LockCookie UpgradeToWriterLock2(System::TimeSpan timeout);
        LockCookie GetLockCookie();
        bool HasWriterLock();
        int32_t CheckTimeout(System::TimeSpan timeout);
        bool get_IsReaderLockHeld();
        bool get_IsWriterLockHeld();
        int32_t get_WriterSeqNum();
        
    };
    
    
    struct MANAGED_API RegisteredWaitHandle : public virtual System::MarshalByRefObject{
        WaitHandle* _waitObject;
        WaitOrTimerCallback* _callback;
        System::Object* _state;
        WaitHandle* _finalEvent;
        ManualResetEvent* _cancelEvent;
        System::TimeSpan _timeout;
        int32_t _callsInProcess;
        bool _executeOnlyOnce;
        bool _unregistered;
        
        void constructor(WaitHandle* waitObject, WaitOrTimerCallback* callback, System::Object* state, System::TimeSpan timeout, bool executeOnlyOnce);
        void Wait(System::Object* state);
        void DoCallBack(System::Object* timedOut);
        bool Unregister(WaitHandle* waitObject);
        
    };
    
    
    struct MANAGED_API SemaphoreSlim : public virtual System::Object, public virtual System::IDisposable{
        static constexpr int32_t spinCount = 10;
        static constexpr int32_t deepSleepTime = 20;
        int32_t maxCount;
        int32_t currCount;
        bool isDisposed;
        EventWaitHandle* handle;
        
        void constructor(int32_t initialCount);
        void constructor(int32_t initialCount, int32_t maxCount);
        void Dispose();
        virtual void Dispose_18dec4eb40ad27f4(bool disposing);
        void CheckState();
        int32_t Release();
        int32_t Release2(int32_t releaseCount);
        void Wait();
        bool Wait2(System::TimeSpan timeout);
        bool Wait3(int32_t millisecondsTimeout);
        void Wait4(CancellationToken cancellationToken);
        bool Wait5(System::TimeSpan timeout, CancellationToken cancellationToken);
        bool Wait6(int32_t millisecondsTimeout, CancellationToken cancellationToken);
        int32_t get_CurrentCount();
        WaitHandle* get_AvailableWaitHandle();
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API SynchronizationContext : public virtual System::Object{
        bool notification_required;
        static SynchronizationContext* currentContext;
        
        void constructor();
        void constructor(SynchronizationContext* context);
        virtual SynchronizationContext* CreateCopy_8cf89e84ec039a51();
        bool IsWaitNotificationRequired();
        virtual void OperationCompleted_45bda522c5c8b62a();
        virtual void OperationStarted_eb38d0f4c1e6dd09();
        virtual void Post_3eaec456ea854a8e(SendOrPostCallback* d, System::Object* state);
        virtual void Send_14bb59dd079cf544(SendOrPostCallback* d, System::Object* state);
        static void SetSynchronizationContext(SynchronizationContext* syncContext);
        void SetWaitNotificationRequired();
        virtual int32_t Wait_c11b2e78ab73d755(cli::array<void*>* waitHandles, bool waitAll, int32_t millisecondsTimeout);
        static int32_t WaitHelper(cli::array<void*>* waitHandles, bool waitAll, int32_t millisecondsTimeout);
        static SynchronizationContext* get_Current();
        
    };
    
    
    struct MANAGED_API SynchronizationLockException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API InternalThread : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject{
        int32_t lock_thread_id;
        void* system_thread_handle;
        System::Object* cached_culture_info;
        void* unused0;
        bool threadpool_thread;
        void* name;
        int32_t name_len;
        ThreadState state;
        System::Object* abort_exc;
        int32_t abort_state_handle;
        int64_t thread_id;
        void* start_notify;
        void* stack_ptr;
        void* static_data;
        void* jit_data;
        void* runtime_thread_info;
        System::Object* current_appcontext;
        int32_t stack_size;
        void* appdomain_refs;
        int32_t interruption_requested;
        void* suspend_event;
        void* suspended_event;
        void* resume_event;
        void* synch_cs;
        bool thread_dump_requested;
        void* end_stack;
        bool thread_interrupt_requested;
        unsigned char apartment_state;
        int32_t critical_region_level;
        int32_t small_id;
        void* manage_callback;
        System::Object* pending_exception;
        ExecutionContext* ec_to_set;
        void* interrupt_on_stop;
        void* unused3;
        void* unused4;
        void* unused5;
        int32_t managed_id;
        cli::array<unsigned char>* _serialized_principal;
        int32_t _serialized_principal_version;
        
        void constructor();
        virtual void Finalize_d22478c1137552d();
        void Thread_free_internal(void* handle);
        
    };
    
    
    struct MANAGED_API Thread : public virtual System::Runtime::ConstrainedExecution::CriticalFinalizerObject, public virtual System::Runtime::InteropServices::_Thread{
        InternalThread* internal_thread;
        System::Object* start_obj;
        ExecutionContext* ec_to_set;
        System::Security::Principal::IPrincipal* principal;
        int32_t principal_version;
        System::Globalization::CultureInfo* current_culture;
        System::Globalization::CultureInfo* current_ui_culture;
        static cli::array<System::Object*>* local_slots;
        static Thread* current_thread;
        static ExecutionContext* _ec;
        System::MulticastDelegate* threadstart;
        static System::Collections::Hashtable* datastorehash;
        static System::Object* datastore_lock;
        
        Thread();
        void constructor(ThreadStart* start);
        void constructor(InternalThread* it);
        void constructor(ThreadStart* start, int32_t maxStackSize);
        void constructor(ParameterizedThreadStart* start);
        void constructor(ParameterizedThreadStart* start, int32_t maxStackSize);
        static void static_constructor();
        void ConstructInternalThread();
        static cli::array<unsigned char>* ByteArrayToRootDomain(cli::array<unsigned char>* arr);
        static cli::array<unsigned char>* ByteArrayToCurrentDomain(cli::array<unsigned char>* arr);
        static void DeserializePrincipal(Thread* th);
        static void SerializePrincipal(Thread* th, System::Security::Principal::IPrincipal* value);
        static InternalThread* CurrentInternalThread_internal();
        static uint32_t AllocTlsData(System::Type* type);
        static void DestroyTlsData(uint32_t offset);
        static void InitDataStoreHash();
        static System::LocalDataStoreSlot* AllocateNamedDataSlot(System::String* name);
        static void FreeNamedDataSlot(System::String* name);
        static System::LocalDataStoreSlot* AllocateDataSlot();
        static System::Object* GetData(System::LocalDataStoreSlot* slot);
        static void SetData(System::LocalDataStoreSlot* slot, System::Object* data);
        static void FreeLocalSlotValues(int32_t slot, bool thread_local_);
        static System::LocalDataStoreSlot* GetNamedDataSlot(System::String* name);
        static System::AppDomain* GetDomain();
        static int32_t GetDomainID();
        static void ResetAbort_internal();
        static void ResetAbort();
        static bool Yield();
        static void Sleep_internal(int32_t ms);
        static void Sleep(int32_t millisecondsTimeout);
        static void Sleep2(System::TimeSpan timeout);
        void* Thread_internal(System::MulticastDelegate* start);
        static System::String* GetName_internal(InternalThread* thread);
        static void SetName_internal(InternalThread* thread, System::String* name);
        static void Abort_internal(InternalThread* thread, System::Object* stateInfo);
        void Abort();
        void Abort2(System::Object* stateInfo);
        System::Object* GetAbortExceptionState();
        static void Interrupt_internal(InternalThread* thread);
        void Interrupt();
        static bool Join_internal(InternalThread* thread, int32_t ms, void* handle);
        void Join();
        bool Join2(int32_t millisecondsTimeout);
        bool Join3(System::TimeSpan timeout);
        static void MemoryBarrier();
        void Resume_internal();
        void Resume();
        static void SpinWait_nop();
        static void SpinWait2(int32_t iterations);
        void StartInternal();
        void Start();
        static void Suspend_internal(InternalThread* thread);
        void Suspend();
        static void SetState(InternalThread* thread, ThreadState set);
        static void ClrState(InternalThread* thread, ThreadState clr);
        static ThreadState GetState(InternalThread* thread);
        static unsigned char VolatileRead(unsigned char address);
        static double VolatileRead2(double address);
        static int16_t VolatileRead3(int16_t address);
        static int32_t VolatileRead4(int32_t address);
        static int64_t VolatileRead5(int64_t address);
        static void* VolatileRead6(void* address);
        static System::Object* VolatileRead7(System::Object* address);
        static signed char VolatileRead8(signed char address);
        static float VolatileRead9(float address);
        static uint16_t VolatileRead10(uint16_t address);
        static uint32_t VolatileRead11(uint32_t address);
        static uint64_t VolatileRead12(uint64_t address);
        static void* VolatileRead13(void* address);
        static void VolatileWrite(unsigned char address, unsigned char value);
        static void VolatileWrite2(double address, double value);
        static void VolatileWrite3(int16_t address, int16_t value);
        static void VolatileWrite4(int32_t address, int32_t value);
        static void VolatileWrite5(int64_t address, int64_t value);
        static void VolatileWrite6(void* address, void* value);
        static void VolatileWrite7(System::Object* address, System::Object* value);
        static void VolatileWrite8(signed char address, signed char value);
        static void VolatileWrite9(float address, float value);
        static void VolatileWrite10(uint16_t address, uint16_t value);
        static void VolatileWrite11(uint32_t address, uint32_t value);
        static void VolatileWrite12(uint64_t address, uint64_t value);
        static void VolatileWrite13(void* address, void* value);
        static int32_t CheckStackSize(int32_t maxStackSize);
        static void BeginCriticalRegion();
        static void EndCriticalRegion();
        static void BeginThreadAffinity();
        static void EndThreadAffinity();
        ApartmentState GetApartmentState();
        void SetApartmentState(ApartmentState state);
        bool TrySetApartmentState(ApartmentState state);
        virtual int32_t GetHashCode_6648aef0f235ee6c() override;
        void Start2(System::Object* parameter);
        CompressedStack* GetCompressedStack();
        void SetCompressedStack(CompressedStack* stack);
        void GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId);
        void GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo);
        void GetTypeInfoCount(uint32_t pcTInfo);
        void Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr);
        InternalThread* get_Internal();
        static System::Runtime::Remoting::Contexts::Context2* get_CurrentContext();
        static System::Security::Principal::IPrincipal* get_CurrentPrincipal();
        static System::Security::Principal::IPrincipal* set_CurrentPrincipal(System::Security::Principal::IPrincipal* value);
        static Thread* get_CurrentThread();
        static int32_t get_CurrentThreadId();
        ApartmentState get_ApartmentState();
        ApartmentState set_ApartmentState(ApartmentState value);
        System::Globalization::CultureInfo* get_CurrentCulture();
        System::Globalization::CultureInfo* set_CurrentCulture(System::Globalization::CultureInfo* value);
        System::Globalization::CultureInfo* get_CurrentUICulture();
        System::Globalization::CultureInfo* set_CurrentUICulture(System::Globalization::CultureInfo* value);
        bool get_IsThreadPoolThread();
        bool get_IsThreadPoolThreadInternal();
        bool set_IsThreadPoolThreadInternal(bool value);
        bool get_IsAlive();
        bool get_IsBackground();
        bool set_IsBackground(bool value);
        System::String* get_Name();
        System::String* set_Name(System::String* value);
        ThreadPriority get_Priority();
        ThreadPriority set_Priority(ThreadPriority value);
        ThreadState get_ThreadState();
        ExecutionContext* get_ExecutionContext();
        int32_t get_ManagedThreadId();
        
        virtual void GetIDsOfNames_bfbc2a83417e35a7(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) override;
        virtual void GetTypeInfo_a6b1b13433ae4421(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) override;
        virtual void GetTypeInfoCount_6bfe4438aac4352c(uint32_t pcTInfo) override;
        virtual void Invoke_961292518f6793ed(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) override;
    };
    
    
    struct MANAGED_API ThreadAbortException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext sc);
        System::Object* get_ExceptionState();
        
    };
    
    
    struct MANAGED_API ThreadInterruptedException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    template<class T> struct MANAGED_API ThreadLocal : public virtual System::Object, public virtual System::IDisposable{
        System::Func<T>* valueFactory;
        uint32_t tls_offset;
        TlsDatum<T> tlsdata;
        
        void constructor();
        void constructor(System::Func<T>* valueFactory);
        virtual void Finalize_d47ac0db6df49686();
        void Dispose();
        virtual void Dispose_e82b644b032f809e(bool disposing);
        T GetSlowPath();
        virtual System::String* ToString_1636a0751cb9ac11() override;
        bool get_IsValueCreated();
        T get_Value();
        T set_Value(T value);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API ThreadPool : public virtual System::Object{
        
        static bool BindHandle(void* osHandle);
        static bool BindHandle2(System::Runtime::InteropServices::SafeHandle* osHandle);
        static void GetAvailableThreads(int32_t workerThreads, int32_t completionPortThreads);
        static void GetMaxThreads(int32_t workerThreads, int32_t completionPortThreads);
        static void GetMinThreads(int32_t workerThreads, int32_t completionPortThreads);
        static bool SetMinThreads(int32_t workerThreads, int32_t completionPortThreads);
        static bool SetMaxThreads(int32_t workerThreads, int32_t completionPortThreads);
        static bool QueueUserWorkItem(WaitCallback* callBack);
        static bool QueueUserWorkItem2(WaitCallback* callBack, System::Object* state);
        static void pool_queue(System::Runtime::Remoting::Messaging::AsyncResult* ares);
        static RegisteredWaitHandle* RegisterWaitForSingleObject(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, int32_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        static RegisteredWaitHandle* RegisterWaitForSingleObject2(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, int64_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        static RegisteredWaitHandle* RegisterWaitForSingleObject3(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, System::TimeSpan timeout, bool executeOnlyOnce);
        static RegisteredWaitHandle* RegisterWaitForSingleObject4(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, uint32_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        static bool UnsafeQueueNativeOverlapped(NativeOverlapped* overlapped);
        static bool UnsafeQueueUserWorkItem(WaitCallback* callBack, System::Object* state);
        static RegisteredWaitHandle* UnsafeRegisterWaitForSingleObject(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, int32_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        static RegisteredWaitHandle* UnsafeRegisterWaitForSingleObject2(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, int64_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        static RegisteredWaitHandle* UnsafeRegisterWaitForSingleObject3(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, System::TimeSpan timeout, bool executeOnlyOnce);
        static RegisteredWaitHandle* UnsafeRegisterWaitForSingleObject4(WaitHandle* waitObject, WaitOrTimerCallback* callBack, System::Object* state, uint32_t millisecondsTimeOutInterval, bool executeOnlyOnce);
        
    };
    
    
    struct MANAGED_API ThreadStartException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API ThreadStateException : public virtual System::SystemException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    struct MANAGED_API Timeout : public virtual System::Object{
        static constexpr int32_t Infinite = -1;
        
        
    };
    
    
    struct MANAGED_API TimerComparer : public virtual System::Object, public virtual System::Collections::IComparer{
        
        void constructor();
        int32_t Compare(System::Object* x, System::Object* y);
        
        virtual int32_t Compare_451fd276747b629d(System::Object* x, System::Object* y) override;
    };
    
    
    struct MANAGED_API Scheduler : public virtual System::Object{
        static Scheduler* instance;
        System::Collections::SortedList* list;
        ManualResetEvent* changed;
        static WaitCallback* TimerCaller;
        
        Scheduler();
        static void static_constructor();
        void constructor();
        void Remove(Timer* timer);
        void Change(Timer* timer, int64_t new_next_run);
        int32_t FindByDueTime(int64_t nr);
        void Add(Timer* timer);
        int32_t InternalRemove(Timer* timer);
        static void TimerCB(System::Object* o);
        void SchedulerThread();
        void ShrinkIfNeeded(System::Collections::ArrayList* list, int32_t initial);
        static Scheduler* get_Instance();
        
    };
    
    
    struct MANAGED_API Timer : public virtual System::MarshalByRefObject, public virtual System::IDisposable{
        static constexpr int64_t MaxValue = 4294967294L;
        static Scheduler* scheduler;
        TimerCallback* callback;
        System::Object* state;
        int64_t due_time_ms;
        int64_t period_ms;
        int64_t next_run;
        bool disposed;
        
        Timer();
        void constructor(TimerCallback* callback, System::Object* state, int32_t dueTime, int32_t period);
        void constructor(TimerCallback* callback, System::Object* state, int64_t dueTime, int64_t period);
        void constructor(TimerCallback* callback, System::Object* state, System::TimeSpan dueTime, System::TimeSpan period);
        void constructor(TimerCallback* callback, System::Object* state, uint32_t dueTime, uint32_t period);
        void constructor(TimerCallback* callback);
        static void static_constructor();
        void Init(TimerCallback* callback, System::Object* state, int64_t dueTime, int64_t period);
        bool Change(int32_t dueTime, int32_t period);
        bool Change2(System::TimeSpan dueTime, System::TimeSpan period);
        bool Change3(uint32_t dueTime, uint32_t period);
        void Dispose();
        bool Change4(int64_t dueTime, int64_t period);
        bool Change5(int64_t dueTime, int64_t period, bool first);
        bool Dispose2(WaitHandle* notifyObject);
        
        virtual void Dispose_95cb2516542c2f97() override;
    };
    
    
    struct MANAGED_API WaitHandleCannotBeOpenedException : public virtual System::ApplicationException{
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        
    };
    
}}
namespace System { namespace Threading { namespace Tasks {
    
    template<class T> struct MANAGED_API CyclicDeque : public virtual System::Object, public virtual IConcurrentDeque<T>{
        static constexpr int32_t BaseSize = 11;
        int64_t bottom;
        int64_t top;
        int64_t upperBound;
        CircularArray<T>* array;
        
        void constructor();
        void PushBottom(T obj);
        PopResult PopBottom(T obj);
        PopResult PopTop(T obj);
        System::Collections::Generic::IEnumerable2<T>* GetEnumerable();
        
        virtual void PushBottom_67d204615af76330(T obj) override;
        virtual PopResult PopBottom_550cfc022701ac6c(T obj) override;
        virtual PopResult PopTop_6ebc020e341f5b55(T obj) override;
        virtual System::Collections::Generic::IEnumerable2<T>* GetEnumerable_8d3bea811daa044d() override;
    };
    
    
    template<class T> struct MANAGED_API CircularArray : public virtual System::Object{
        int32_t baseSize;
        int32_t size;
        cli::array<T>* segment;
        
        void constructor(int32_t baseSize);
        CircularArray<T>* Grow(int64_t bottom, int64_t top);
        System::Collections::Generic::IEnumerable2<T>* GetEnumerable(int64_t bottom, int64_t top);
        System::Collections::Generic::IEnumerable2<T>* RealGetEnumerable(cli::array<T>* slice, int64_t bottom, int64_t realTop, int64_t initialTop);
        int64_t get_Size();
        T get_Item(int64_t index);
        T set_Item(int64_t index, T value);
        
    };
    
    
    struct MANAGED_API ManualEventSlot : public virtual System::Object, public virtual IContinuation{
        System::Threading::ManualResetEventSlim* evt;
        
        void constructor(System::Threading::ManualResetEventSlim* evt);
        void Execute();
        
        virtual void Execute_e0ae61e6f450d11e() override;
    };
    
    
    struct MANAGED_API CountdownEventSlot : public virtual System::Object, public virtual IContinuation{
        System::Threading::CountdownEvent* evt;
        
        void constructor(System::Threading::CountdownEvent* evt);
        void Execute();
        
        virtual void Execute_e0ae61e6f450d11e() override;
    };
    
    
    struct MANAGED_API StealRange : public virtual System::Object{
        StealValue64 V64;
        
        void constructor(int32_t fromInclusive, int32_t i, int32_t step);
        
    };
    
    
    struct MANAGED_API Parallel : public virtual System::Object{
        static bool sixtyfour;
        static System::Func<System::Object*>* __f__am_cache0;
        static System::Action2<System::Object*>* __f__am_cache1;
        static System::Func<System::Object*>* __f__am_cache2;
        static System::Action2<System::Object*>* __f__am_cache3;
        
        Parallel();
        static void static_constructor();
        static int32_t GetBestWorkerNumber();
        static int32_t GetBestWorkerNumber2(TaskScheduler* scheduler);
        static int32_t GetBestWorkerNumber3(int32_t from, int32_t to, ParallelOptions* options, int32_t step);
        static void HandleExceptions(System::Collections::Generic::IEnumerable2<Task*>* tasks);
        static void HandleExceptions2(System::Collections::Generic::IEnumerable2<Task*>* tasks, ExternalInfos* infos);
        static void InitTasks(cli::array<Task*>* tasks, int32_t count, System::Action* action, ParallelOptions* options);
        static ParallelLoopResult For(int32_t fromInclusive, int32_t toExclusive, System::Action2<int32_t>* body);
        static ParallelLoopResult For2(int32_t fromInclusive, int32_t toExclusive, System::Action4<int32_t, ParallelLoopState*>* body);
        static ParallelLoopResult For3(int32_t fromInclusive, int32_t toExclusive, ParallelOptions* parallelOptions, System::Action2<int32_t>* body);
        static ParallelLoopResult For4(int32_t fromInclusive, int32_t toExclusive, ParallelOptions* parallelOptions, System::Action4<int32_t, ParallelLoopState*>* body);
        template<class TLocal>
        static ParallelLoopResult For_1(int32_t fromInclusive, int32_t toExclusive, System::Func<TLocal>* localInit, System::Func3<int32_t, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TLocal>
        static ParallelLoopResult For_12(int32_t fromInclusive, int32_t toExclusive, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func3<int32_t, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        static ParallelLoopResult For5(int64_t fromInclusive, int64_t toExclusive, System::Action2<int64_t>* body);
        static ParallelLoopResult For6(int64_t fromInclusive, int64_t toExclusive, System::Action4<int64_t, ParallelLoopState*>* body);
        static ParallelLoopResult For7(int64_t fromInclusive, int64_t toExclusive, ParallelOptions* parallelOptions, System::Action2<int64_t>* body);
        static ParallelLoopResult For8(int64_t fromInclusive, int64_t toExclusive, ParallelOptions* parallelOptions, System::Action4<int64_t, ParallelLoopState*>* body);
        template<class TLocal>
        static ParallelLoopResult For_13(int64_t fromInclusive, int64_t toExclusive, System::Func<TLocal>* localInit, System::Func3<int64_t, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TLocal>
        static ParallelLoopResult For_14(int64_t fromInclusive, int64_t toExclusive, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func3<int64_t, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_2(System::Func2<int32_t, System::Collections::Generic::IList2<System::Collections::Generic::IEnumerator2<TSource>*>*>* enumerable, ParallelOptions* options, System::Func<TLocal>* init, System::Func3<TSource, ParallelLoopState*, TLocal, TLocal>* action, System::Action2<TLocal>* destruct);
        template<class TSource>
        static ParallelLoopResult ForEach_1(System::Collections::Generic::IEnumerable2<TSource>* source, System::Action2<TSource>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_12(System::Collections::Generic::IEnumerable2<TSource>* source, System::Action4<TSource, ParallelLoopState*>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_13(System::Collections::Generic::IEnumerable2<TSource>* source, System::Action3<TSource, ParallelLoopState*, int64_t>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_14(System::Collections::Concurrent::Partitioner<TSource>* source, System::Action4<TSource, ParallelLoopState*>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_15(System::Collections::Concurrent::OrderablePartitioner<TSource>* source, System::Action3<TSource, ParallelLoopState*, int64_t>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_16(System::Collections::Concurrent::Partitioner<TSource>* source, System::Action2<TSource>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_17(System::Collections::Generic::IEnumerable2<TSource>* source, ParallelOptions* parallelOptions, System::Action2<TSource>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_18(System::Collections::Generic::IEnumerable2<TSource>* source, ParallelOptions* parallelOptions, System::Action4<TSource, ParallelLoopState*>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_19(System::Collections::Generic::IEnumerable2<TSource>* source, ParallelOptions* parallelOptions, System::Action3<TSource, ParallelLoopState*, int64_t>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_110(System::Collections::Concurrent::OrderablePartitioner<TSource>* source, ParallelOptions* parallelOptions, System::Action3<TSource, ParallelLoopState*, int64_t>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_111(System::Collections::Concurrent::Partitioner<TSource>* source, ParallelOptions* parallelOptions, System::Action2<TSource>* body);
        template<class TSource>
        static ParallelLoopResult ForEach_112(System::Collections::Concurrent::Partitioner<TSource>* source, ParallelOptions* parallelOptions, System::Action4<TSource, ParallelLoopState*>* body);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_22(System::Collections::Generic::IEnumerable2<TSource>* source, System::Func<TLocal>* localInit, System::Func3<TSource, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_23(System::Collections::Generic::IEnumerable2<TSource>* source, System::Func<TLocal>* localInit, System::Func5<TSource, ParallelLoopState*, int64_t, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_24(System::Collections::Concurrent::OrderablePartitioner<TSource>* source, System::Func<TLocal>* localInit, System::Func5<TSource, ParallelLoopState*, int64_t, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_25(System::Collections::Concurrent::Partitioner<TSource>* source, System::Func<TLocal>* localInit, System::Func3<TSource, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_26(System::Collections::Generic::IEnumerable2<TSource>* source, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func3<TSource, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_27(System::Collections::Generic::IEnumerable2<TSource>* source, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func5<TSource, ParallelLoopState*, int64_t, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_28(System::Collections::Concurrent::Partitioner<TSource>* source, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func3<TSource, ParallelLoopState*, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        template<class TSource, class TLocal>
        static ParallelLoopResult ForEach_29(System::Collections::Concurrent::OrderablePartitioner<TSource>* source, ParallelOptions* parallelOptions, System::Func<TLocal>* localInit, System::Func5<TSource, ParallelLoopState*, int64_t, TLocal, TLocal>* body, System::Action2<TLocal>* localFinally);
        static void Invoke(cli::array<System::Action*>* actions);
        static void Invoke2(ParallelOptions* parallelOptions, cli::array<System::Action*>* actions);
        static cli::array<Task*>* SpawnBestNumber(System::Action* action, System::Action* callback);
        static cli::array<Task*>* SpawnBestNumber2(System::Action* action, int32_t dop, System::Action* callback);
        static cli::array<Task*>* SpawnBestNumber3(System::Action* action, int32_t dop, bool wait, System::Action* callback);
        static System::Object* _For_m__17();
        static void _For_m__19(System::Object* _);
        static System::Object* _For_m__1C();
        static void _For_m__1E(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__20_1();
        template<class TSource>
        static void _ForEach_1_m__22_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__23_1();
        template<class TSource>
        static void _ForEach_1_m__25_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__26_1();
        template<class TSource>
        static void _ForEach_1_m__28_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__29_1();
        template<class TSource>
        static void _ForEach_1_m__2B_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__2C_1();
        template<class TSource>
        static void _ForEach_1_m__2E_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__2F_1();
        template<class TSource>
        static void _ForEach_1_m__31_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__32_1();
        template<class TSource>
        static void _ForEach_1_m__34_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__35_1();
        template<class TSource>
        static void _ForEach_1_m__37_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__38_1();
        template<class TSource>
        static void _ForEach_1_m__3A_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__3B_1();
        template<class TSource>
        static void _ForEach_1_m__3D_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__3E_1();
        template<class TSource>
        static void _ForEach_1_m__40_1(System::Object* _);
        template<class TSource>
        static System::Object* _ForEach_1_m__41_1();
        template<class TSource>
        static void _ForEach_1_m__43_1(System::Object* _);
        
    };
    
    
    struct MANAGED_API ExternalInfos : public virtual System::Object{
        bool IsStopped;
        System::Threading::AtomicBooleanValue IsBroken;
        bool IsExceptional;
        System::Nullable2<int64_t> LowestBreakIteration;
        
        void constructor();
        
    };
    
    
    struct MANAGED_API ParallelLoopState : public virtual System::Object{
        ExternalInfos* extInfos;
        int32_t _CurrentIteration_k__BackingField;
        
        void constructor(ExternalInfos* extInfos);
        void Break();
        void Stop();
        bool get_IsStopped();
        bool get_IsExceptional();
        System::Nullable2<int64_t> get_LowestBreakIteration();
        int32_t get_CurrentIteration();
        int32_t set_CurrentIteration(int32_t value);
        bool get_ShouldExitCurrentIteration();
        
    };
    
    
    struct MANAGED_API ParallelOptions : public virtual System::Object{
        static ParallelOptions* Default2;
        System::Threading::CancellationToken _CancellationToken_k__BackingField;
        int32_t _MaxDegreeOfParallelism_k__BackingField;
        TaskScheduler* _TaskScheduler_k__BackingField;
        
        ParallelOptions();
        void constructor();
        static void static_constructor();
        System::Threading::CancellationToken get_CancellationToken();
        System::Threading::CancellationToken set_CancellationToken(System::Threading::CancellationToken value);
        int32_t get_MaxDegreeOfParallelism();
        int32_t set_MaxDegreeOfParallelism(int32_t value);
        TaskScheduler* get_TaskScheduler();
        TaskScheduler* set_TaskScheduler(TaskScheduler* value);
        
    };
    
    
    template<class T> struct MANAGED_API SimpleConcurrentBag : public virtual System::Object{
        cli::array<IConcurrentDeque<T>*>* deques;
        bool unique;
        int32_t index;
        int32_t stealIndex;
        
        void constructor(int32_t num);
        int32_t GetNextIndex();
        bool TryTake(int32_t index, T value);
        bool TrySteal(int32_t index, T value);
        void Add(int32_t index, T value);
        
    };
    
    
    struct MANAGED_API SynchronizationContextScheduler : public virtual TaskScheduler{
        System::Threading::SynchronizationContext* ctx;
        System::Threading::SendOrPostCallback* callback;
        
        void constructor(System::Threading::SynchronizationContext* ctx);
        virtual void QueueTask_cbe2927cfadeb04c(Task* task) override;
        void TaskLaunchWrapper(System::Object* obj);
        virtual System::Collections::Generic::IEnumerable2<Task*>* GetScheduledTasks_1a3a2b32f93a346c() override;
        virtual bool TryDequeue_e11e522f718d830b(Task* task) override;
        virtual bool TryExecuteTaskInline_89cb38840fe95613(Task* task, bool taskWasPreviouslyQueued) override;
        virtual int32_t get_MaximumConcurrencyLevel_a56c57882f7ce248() override;
        
    };
    
    
    struct MANAGED_API EmptyTaskActionInvoker : public virtual TaskActionInvoker{
        
        void constructor();
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionInvoke : public virtual TaskActionInvoker{
        System::Action* action;
        
        void constructor(System::Action* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionObjectInvoke : public virtual TaskActionInvoker{
        System::Action2<System::Object*>* action;
        
        void constructor(System::Action2<System::Object*>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionTaskInvoke : public virtual TaskActionInvoker{
        System::Action2<Task*>* action;
        
        void constructor(System::Action2<Task*>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionTasksInvoke : public virtual TaskActionInvoker{
        System::Action2<cli::array<Task*>*>* action;
        cli::array<Task*>* tasks;
        
        void constructor(System::Action2<cli::array<Task*>*>* action, cli::array<Task*>* tasks);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionTaskObjectInvoke : public virtual TaskActionInvoker{
        System::Action4<Task*, System::Object*>* action;
        
        void constructor(System::Action4<Task*, System::Object*>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API ActionTaskObjectInvoke2 : public virtual TaskActionInvoker{
        System::Action4<Task2<TResult>*, System::Object*>* action;
        
        void constructor(System::Action4<Task2<TResult>*, System::Object*>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API ActionTaskInvoke2 : public virtual TaskActionInvoker{
        System::Action2<Task2<TResult>*>* action;
        
        void constructor(System::Action2<Task2<TResult>*>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API ActionTaskSelected : public virtual TaskActionInvoker{
        System::Action2<Task*>* action;
        cli::array<Task*>* tasks;
        
        void constructor(System::Action2<Task*>* action, cli::array<Task*>* tasks);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncInvoke : public virtual TaskActionInvoker{
        System::Func<TResult>* action;
        
        void constructor(System::Func<TResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncTaskInvoke : public virtual TaskActionInvoker{
        System::Func2<Task*, TResult>* action;
        
        void constructor(System::Func2<Task*, TResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncTasksInvoke : public virtual TaskActionInvoker{
        System::Func2<cli::array<Task*>*, TResult>* action;
        cli::array<Task*>* tasks;
        
        void constructor(System::Func2<cli::array<Task*>*, TResult>* action, cli::array<Task*>* tasks);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncTaskSelected : public virtual TaskActionInvoker{
        System::Func2<Task*, TResult>* action;
        cli::array<Task*>* tasks;
        
        void constructor(System::Func2<Task*, TResult>* action, cli::array<Task*>* tasks);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult, class TNewResult> struct MANAGED_API FuncTaskInvoke2 : public virtual TaskActionInvoker{
        System::Func2<Task2<TResult>*, TNewResult>* action;
        
        void constructor(System::Func2<Task2<TResult>*, TNewResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncObjectInvoke : public virtual TaskActionInvoker{
        System::Func2<System::Object*, TResult>* action;
        
        void constructor(System::Func2<System::Object*, TResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult> struct MANAGED_API FuncTaskObjectInvoke : public virtual TaskActionInvoker{
        System::Func4<Task*, System::Object*, TResult>* action;
        
        void constructor(System::Func4<Task*, System::Object*, TResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    template<class TResult, class TNewResult> struct MANAGED_API FuncTaskObjectInvoke2 : public virtual TaskActionInvoker{
        System::Func4<Task2<TResult>*, System::Object*, TNewResult>* action;
        
        void constructor(System::Func4<Task2<TResult>*, System::Object*, TNewResult>* action);
        virtual void Invoke_a5a01f61088bfd9f(Task* owner, System::Object* state, Task* context) override;
        virtual System::Delegate* get_Action_f151e6fb89195ccd() override;
        
    };
    
    
    struct MANAGED_API TaskCanceledException : public virtual System::OperationCanceledException{
        Task* task;
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::String* message, System::Exception* innerException);
        void constructor(Task* task);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        Task* get_Task();
        
    };
    
    
    template<class TResult> struct MANAGED_API TaskCompletionSource : public virtual System::Object{
        Task2<TResult>* source;
        
        void constructor();
        void constructor(System::Object* state);
        void constructor(TaskCreationOptions creationOptions);
        void constructor(System::Object* state, TaskCreationOptions creationOptions);
        void SetCanceled();
        void SetException(System::Exception* exception);
        void SetException2(System::Collections::Generic::IEnumerable2<System::Exception*>* exceptions);
        void SetResult(TResult result);
        static void ThrowInvalidException();
        bool TrySetCanceled();
        bool TrySetException(System::Exception* exception);
        bool TrySetException2(System::Collections::Generic::IEnumerable2<System::Exception*>* exceptions);
        bool TrySetResult(TResult result);
        Task2<TResult>* get_Task();
        
    };
    
    
    struct MANAGED_API TaskContinuation : public virtual System::Object, public virtual IContinuation{
        Task* task;
        TaskContinuationOptions continuationOptions;
        
        void constructor(Task* task, TaskContinuationOptions continuationOptions);
        bool ContinuationStatusCheck(TaskContinuationOptions kind);
        void Execute();
        
        virtual void Execute_e0ae61e6f450d11e() override;
    };
    
    
    struct MANAGED_API ActionContinuation : public virtual System::Object, public virtual IContinuation{
        System::Action* action;
        
        void constructor(System::Action* action);
        void Execute();
        
        virtual void Execute_e0ae61e6f450d11e() override;
    };
    
    
    struct MANAGED_API SynchronizationContextContinuation : public virtual System::Object, public virtual IContinuation{
        System::Action* action;
        System::Threading::SynchronizationContext* ctx;
        static System::Threading::SendOrPostCallback* __f__am_cache0;
        
        void constructor(System::Action* action, System::Threading::SynchronizationContext* ctx);
        void Execute();
        static void _Execute_m__47(System::Object* l);
        
        virtual void Execute_e0ae61e6f450d11e() override;
    };
    
    
    struct MANAGED_API TaskDebuggerView : public virtual System::Object{
        Task* task;
        
        void constructor(Task* task);
        System::Object* get_AsyncState();
        TaskCreationOptions get_CreationOptions();
        System::Exception* get_Exception();
        int32_t get_Id();
        System::String* get_Method();
        TaskStatus get_Status();
        
    };
    
    
    struct MANAGED_API TaskExceptionSlot : public virtual System::Object{
        System::AggregateException* Exception2;
        bool Observed;
        System::Collections::Concurrent::ConcurrentQueue<System::AggregateException*>* ChildExceptions;
        Task* parent;
        
        void constructor(Task* parent);
        virtual void Finalize_bfbd0b0759b29add();
        
    };
    
    
    struct MANAGED_API TaskFactory : public virtual System::Object{
        TaskScheduler* scheduler;
        TaskCreationOptions creationOptions;
        TaskContinuationOptions continuationOptions;
        System::Threading::CancellationToken cancellationToken;
        static System::Func2<System::Object*, int32_t>* __f__am_cache0;
        static System::Action2<System::Object*>* __f__am_cache1;
        
        void constructor();
        void constructor(System::Threading::CancellationToken cancellationToken);
        void constructor(TaskScheduler* scheduler);
        void constructor(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions);
        void constructor(System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        static void CheckContinuationOptions(TaskContinuationOptions continuationOptions);
        Task* StartNew(System::Action* action);
        Task* StartNew2(System::Action* action, System::Threading::CancellationToken cancellationToken);
        Task* StartNew3(System::Action* action, TaskCreationOptions creationOptions);
        Task* StartNew4(System::Action* action, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task* StartNew5(System::Action2<System::Object*>* action, System::Object* state);
        Task* StartNew6(System::Action2<System::Object*>* action, System::Object* state, System::Threading::CancellationToken cancellationToken);
        Task* StartNew7(System::Action2<System::Object*>* action, System::Object* state, TaskCreationOptions creationOptions);
        Task* StartNew8(System::Action2<System::Object*>* action, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* StartNew_1(System::Func<TResult>* function);
        template<class TResult>
        Task2<TResult>* StartNew_12(System::Func<TResult>* function, TaskCreationOptions creationOptions);
        template<class TResult>
        Task2<TResult>* StartNew_13(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken);
        template<class TResult>
        Task2<TResult>* StartNew_14(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* StartNew_15(System::Func2<System::Object*, TResult>* function, System::Object* state);
        template<class TResult>
        Task2<TResult>* StartNew_16(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken);
        template<class TResult>
        Task2<TResult>* StartNew_17(System::Func2<System::Object*, TResult>* function, System::Object* state, TaskCreationOptions creationOptions);
        template<class TResult>
        Task2<TResult>* StartNew_18(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task* ContinueWhenAny(cli::array<Task*>* tasks, System::Action2<Task*>* continuationAction);
        Task* ContinueWhenAny2(cli::array<Task*>* tasks, System::Action2<Task*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        Task* ContinueWhenAny3(cli::array<Task*>* tasks, System::Action2<Task*>* continuationAction, TaskContinuationOptions continuationOptions);
        Task* ContinueWhenAny4(cli::array<Task*>* tasks, System::Action2<Task*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult>
        Task* ContinueWhenAny_1(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<Task2<TAntecedentResult>*>* continuationAction);
        template<class TAntecedentResult>
        Task* ContinueWhenAny_12(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<Task2<TAntecedentResult>*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult>
        Task* ContinueWhenAny_13(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<Task2<TAntecedentResult>*>* continuationAction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult>
        Task* ContinueWhenAny_14(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<Task2<TAntecedentResult>*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* ContinueWhenAny_15(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction);
        template<class TResult>
        Task2<TResult>* ContinueWhenAny_16(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TResult>
        Task2<TResult>* ContinueWhenAny_17(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TResult>
        Task2<TResult>* ContinueWhenAny_18(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAny_2(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAny_22(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAny_23(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAny_24(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task* ContinueWhenAll(cli::array<Task*>* tasks, System::Action2<cli::array<Task*>*>* continuationAction);
        Task* ContinueWhenAll2(cli::array<Task*>* tasks, System::Action2<cli::array<Task*>*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        Task* ContinueWhenAll3(cli::array<Task*>* tasks, System::Action2<cli::array<Task*>*>* continuationAction, TaskContinuationOptions continuationOptions);
        Task* ContinueWhenAll4(cli::array<Task*>* tasks, System::Action2<cli::array<Task*>*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult>
        Task* ContinueWhenAll_1(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<cli::array<Task2<TAntecedentResult>*>*>* continuationAction);
        template<class TAntecedentResult>
        Task* ContinueWhenAll_12(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<cli::array<Task2<TAntecedentResult>*>*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult>
        Task* ContinueWhenAll_13(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<cli::array<Task2<TAntecedentResult>*>*>* continuationAction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult>
        Task* ContinueWhenAll_14(cli::array<Task2<TAntecedentResult>*>* tasks, System::Action2<cli::array<Task2<TAntecedentResult>*>*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* ContinueWhenAll_15(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction);
        template<class TResult>
        Task2<TResult>* ContinueWhenAll_16(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TResult>
        Task2<TResult>* ContinueWhenAll_17(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TResult>
        Task2<TResult>* ContinueWhenAll_18(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAll_2(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAll_22(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAll_23(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult, class TResult>
        Task2<TResult>* ContinueWhenAll_24(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task* FromAsync(System::IAsyncResult* asyncResult, System::Action2<System::IAsyncResult*>* endMethod);
        Task* FromAsync2(System::IAsyncResult* asyncResult, System::Action2<System::IAsyncResult*>* endMethod, TaskCreationOptions creationOptions);
        Task* FromAsync3(System::IAsyncResult* asyncResult, System::Action2<System::IAsyncResult*>* endMethod, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        template<class TResult>
        Task2<TResult>* FromAsync_1(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod);
        template<class TResult>
        Task2<TResult>* FromAsync_12(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod, TaskCreationOptions creationOptions);
        template<class TResult>
        Task2<TResult>* FromAsync_13(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task* FromAsync4(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, System::Object* state);
        Task* FromAsync5(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1>
        Task* FromAsync_14(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, System::Object* state);
        template<class TArg1>
        Task* FromAsync_15(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2>
        Task* FromAsync_2(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state);
        template<class TArg1, class TArg2>
        Task* FromAsync_22(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2, class TArg3>
        Task* FromAsync_3(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state);
        template<class TArg1, class TArg2, class TArg3>
        Task* FromAsync_32(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Action2<System::IAsyncResult*>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state, TaskCreationOptions creationOptions);
        template<class TResult>
        Task2<TResult>* FromAsync_16(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::Object* state);
        template<class TResult>
        Task2<TResult>* FromAsync_17(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TResult>
        Task2<TResult>* FromAsync_23(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, System::Object* state);
        template<class TArg1, class TResult>
        Task2<TResult>* FromAsync_24(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2, class TResult>
        Task2<TResult>* FromAsync_33(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state);
        template<class TArg1, class TArg2, class TResult>
        Task2<TResult>* FromAsync_34(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2, class TArg3, class TResult>
        Task2<TResult>* FromAsync_4(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state);
        template<class TArg1, class TArg2, class TArg3, class TResult>
        Task2<TResult>* FromAsync_42(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state, TaskCreationOptions creationOptions);
        TaskScheduler* GetScheduler();
        static int32_t _ContinueWhenAny_m__48(System::Object* l);
        template<class TResult>
        static int32_t _ContinueWhenAny_1_m__4A_1(System::Object* l);
        static void _ContinueWhenAll_m__4C(System::Object* l);
        template<class TResult>
        static void _ContinueWhenAll_1_m__4E_1(System::Object* l);
        TaskScheduler* get_Scheduler();
        TaskContinuationOptions get_ContinuationOptions();
        TaskCreationOptions get_CreationOptions();
        System::Threading::CancellationToken get_CancellationToken();
        
    };
    
    
    template<class TResult> struct MANAGED_API TaskFactory2 : public virtual System::Object{
        TaskScheduler* scheduler;
        TaskCreationOptions creationOptions;
        TaskContinuationOptions continuationOptions;
        System::Threading::CancellationToken cancellationToken;
        TaskFactory* parent;
        
        void constructor();
        void constructor(TaskScheduler* scheduler);
        void constructor(System::Threading::CancellationToken cancellationToken);
        void constructor(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions);
        void constructor(System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task2<TResult>* StartNew(System::Func<TResult>* function);
        Task2<TResult>* StartNew2(System::Func<TResult>* function, TaskCreationOptions creationOptions);
        Task2<TResult>* StartNew3(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken);
        Task2<TResult>* StartNew4(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task2<TResult>* StartNew5(System::Func2<System::Object*, TResult>* function, System::Object* state);
        Task2<TResult>* StartNew6(System::Func2<System::Object*, TResult>* function, System::Object* state, TaskCreationOptions creationOptions);
        Task2<TResult>* StartNew7(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken);
        Task2<TResult>* StartNew8(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task2<TResult>* ContinueWhenAny(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction);
        Task2<TResult>* ContinueWhenAny2(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        Task2<TResult>* ContinueWhenAny3(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        Task2<TResult>* ContinueWhenAny4(cli::array<Task*>* tasks, System::Func2<Task*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAny_1(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAny_12(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAny_13(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAny_14(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<Task2<TAntecedentResult>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task2<TResult>* ContinueWhenAll(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction);
        Task2<TResult>* ContinueWhenAll2(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        Task2<TResult>* ContinueWhenAll3(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        Task2<TResult>* ContinueWhenAll4(cli::array<Task*>* tasks, System::Func2<cli::array<Task*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAll_1(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAll_12(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAll_13(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TAntecedentResult>
        Task2<TResult>* ContinueWhenAll_14(cli::array<Task2<TAntecedentResult>*>* tasks, System::Func2<cli::array<Task2<TAntecedentResult>*>*, TResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        Task2<TResult>* FromAsync(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod);
        Task2<TResult>* FromAsync2(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod, TaskCreationOptions creationOptions);
        Task2<TResult>* FromAsync3(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        static Task2<TResult>* FromIAsyncResult(System::IAsyncResult* asyncResult, System::Func2<System::IAsyncResult*, TResult>* endMethod, TaskCreationOptions creationOptions, TaskScheduler* scheduler);
        Task2<TResult>* FromAsync4(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::Object* state);
        Task2<TResult>* FromAsync5(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::Object* state, TaskCreationOptions creationOptions);
        static Task2<TResult>* FromAsyncBeginEnd(System::Func4<System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1>
        Task2<TResult>* FromAsync_1(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, System::Object* state);
        template<class TArg1>
        Task2<TResult>* FromAsync_12(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1>
        static Task2<TResult>* FromAsyncBeginEnd_1(System::Func3<TArg1, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2>
        Task2<TResult>* FromAsync_2(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state);
        template<class TArg1, class TArg2>
        Task2<TResult>* FromAsync_22(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2>
        static Task2<TResult>* FromAsyncBeginEnd_2(System::Func5<TArg1, TArg2, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2, class TArg3>
        Task2<TResult>* FromAsync_3(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state);
        template<class TArg1, class TArg2, class TArg3>
        Task2<TResult>* FromAsync_32(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state, TaskCreationOptions creationOptions);
        template<class TArg1, class TArg2, class TArg3>
        static Task2<TResult>* FromAsyncBeginEnd_3(System::Func6<TArg1, TArg2, TArg3, System::AsyncCallback*, System::Object*, System::IAsyncResult*>* beginMethod, System::Func2<System::IAsyncResult*, TResult>* endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object* state, TaskCreationOptions creationOptions);
        TaskScheduler* GetScheduler();
        static void InnerInvoke(TaskCompletionSource<TResult>* tcs, System::Func2<System::IAsyncResult*, TResult>* endMethod, System::IAsyncResult* l);
        TaskScheduler* get_Scheduler();
        TaskContinuationOptions get_ContinuationOptions();
        TaskCreationOptions get_CreationOptions();
        System::Threading::CancellationToken get_CancellationToken();
        
    };
    
    
    struct MANAGED_API TaskSchedulerException : public virtual System::Exception{
        static /*constexpr*/ System::String* exceptionDefaultMessage() { return _T("An exception was thrown by a TaskScheduler"); }
        
        void constructor();
        void constructor(System::String* message);
        void constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
        void constructor(System::Exception* innerException);
        void constructor(System::String* message, System::Exception* innerException);
        
    };
    
    
    template<class TResult> struct MANAGED_API Task2 : public virtual Task{
        static TaskFactory2<TResult>* factory;
        TResult value;
        
        Task2();
        void constructor(System::Func<TResult>* function);
        void constructor(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken);
        void constructor(System::Func<TResult>* function, TaskCreationOptions creationOptions);
        void constructor(System::Func<TResult>* function, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions);
        void constructor(System::Func2<System::Object*, TResult>* function, System::Object* state);
        void constructor(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken);
        void constructor(System::Func2<System::Object*, TResult>* function, System::Object* state, TaskCreationOptions creationOptions);
        void constructor(System::Func2<System::Object*, TResult>* function, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions);
        void constructor(TaskActionInvoker* invoker, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, Task* parent);
        void constructor(TaskActionInvoker* invoker, System::Object* state, System::Threading::CancellationToken cancellationToken, TaskCreationOptions creationOptions, Task* parent, Task* contAncestor);
        static void static_constructor();
        Task* ContinueWith8(System::Action2<Task2<TResult>*>* continuationAction);
        Task* ContinueWith9(System::Action2<Task2<TResult>*>* continuationAction, TaskContinuationOptions continuationOptions);
        Task* ContinueWith10(System::Action2<Task2<TResult>*>* continuationAction, System::Threading::CancellationToken cancellationToken);
        Task* ContinueWith11(System::Action2<Task2<TResult>*>* continuationAction, TaskScheduler* scheduler);
        Task* ContinueWith12(System::Action2<Task2<TResult>*>* continuationAction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        template<class TNewResult>
        Task2<TNewResult>* ContinueWith_17(System::Func2<Task2<TResult>*, TNewResult>* continuationFunction);
        template<class TNewResult>
        Task2<TNewResult>* ContinueWith_18(System::Func2<Task2<TResult>*, TNewResult>* continuationFunction, System::Threading::CancellationToken cancellationToken);
        template<class TNewResult>
        Task2<TNewResult>* ContinueWith_19(System::Func2<Task2<TResult>*, TNewResult>* continuationFunction, TaskContinuationOptions continuationOptions);
        template<class TNewResult>
        Task2<TNewResult>* ContinueWith_110(System::Func2<Task2<TResult>*, TNewResult>* continuationFunction, TaskScheduler* scheduler);
        template<class TNewResult>
        Task2<TNewResult>* ContinueWith_111(System::Func2<Task2<TResult>*, TNewResult>* continuationFunction, System::Threading::CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler* scheduler);
        bool TrySetResult(TResult result);
        TResult get_Result();
        TResult set_Result(TResult value);
        System::String* get_ResultAsString();
        static TaskFactory2<TResult>* get_Factory2() /*new*/;
        
    };
    
    
    struct MANAGED_API TpScheduler : public virtual TaskScheduler{
        static System::Threading::WaitCallback* callback;
        
        TpScheduler();
        void constructor();
        static void static_constructor();
        virtual void QueueTask_cbe2927cfadeb04c(Task* task) override;
        static void TaskExecuterCallback(System::Object* obj);
        virtual System::Collections::Generic::IEnumerable2<Task*>* GetScheduledTasks_1a3a2b32f93a346c() override;
        virtual bool TryDequeue_e11e522f718d830b(Task* task) override;
        virtual bool TryExecuteTaskInline_89cb38840fe95613(Task* task, bool taskWasPreviouslyQueued) override;
        virtual int32_t get_MaximumConcurrencyLevel_a56c57882f7ce248() override;
        
    };
    
    
    struct MANAGED_API UnobservedTaskExceptionEventArgs : public virtual System::EventArgs{
        System::AggregateException* exception;
        bool wasObserved;
        
        void constructor(System::AggregateException* exception);
        void SetObserved();
        System::AggregateException* get_Exception();
        bool get_Observed();
        
    };
    
}}}



#include "cli.hpp"
#include "K:\projects\BachelorThesis.tar\build-environment/include/mscorlib.template.hpp"
