#include "stdafx_mscorlib.hpp"

namespace System { namespace Reflection {
    
    
    void AssemblyAlgorithmIdAttribute::constructor(System::Configuration::Assemblies::AssemblyHashAlgorithm algorithmId) {
        this->id = (uint32_t)((uint32_t)(int32_t)(algorithmId));
    }
    
    void AssemblyAlgorithmIdAttribute::constructor(uint32_t algorithmId) {
        this->id = algorithmId;
    }
    
    uint32_t AssemblyAlgorithmIdAttribute::get_AlgorithmId() {
        return this->id;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyCompanyAttribute::constructor(System::String* company) {
        this->name = company;
    }
    
    System::String* AssemblyCompanyAttribute::get_Company() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyConfigurationAttribute::constructor(System::String* configuration) {
        this->name = configuration;
    }
    
    System::String* AssemblyConfigurationAttribute::get_Configuration() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyCopyrightAttribute::constructor(System::String* copyright) {
        this->name = copyright;
    }
    
    System::String* AssemblyCopyrightAttribute::get_Copyright() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyCultureAttribute::constructor(System::String* culture) {
        this->name = culture;
    }
    
    System::String* AssemblyCultureAttribute::get_Culture() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyDefaultAliasAttribute::constructor(System::String* defaultAlias) {
        this->name = defaultAlias;
    }
    
    System::String* AssemblyDefaultAliasAttribute::get_DefaultAlias() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyDelaySignAttribute::constructor(bool delaySign) {
        this->delay = delaySign;
    }
    
    bool AssemblyDelaySignAttribute::get_DelaySign() {
        return this->delay;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyDescriptionAttribute::constructor(System::String* description) {
        this->name = description;
    }
    
    System::String* AssemblyDescriptionAttribute::get_Description() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyFileVersionAttribute::constructor(System::String* version) {
        if((version ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("version"));
        }
        this->name = version;
    }
    
    System::String* AssemblyFileVersionAttribute::get_Version() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyFlagsAttribute::constructor(uint32_t flags) {
        this->flags = flags;
    }
    
    void AssemblyFlagsAttribute::constructor(int32_t assemblyFlags) {
        this->flags = (uint32_t)assemblyFlags;
    }
    
    void AssemblyFlagsAttribute::constructor(AssemblyNameFlags assemblyFlags) {
        this->flags = (uint32_t)((uint32_t)(int32_t)(assemblyFlags));
    }
    
    uint32_t AssemblyFlagsAttribute::get_Flags() {
        return this->flags;
    }
    
    int32_t AssemblyFlagsAttribute::get_AssemblyFlags() {
        return (int32_t)this->flags;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyInformationalVersionAttribute::constructor(System::String* informationalVersion) {
        this->name = informationalVersion;
    }
    
    System::String* AssemblyInformationalVersionAttribute::get_InformationalVersion() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyKeyFileAttribute::constructor(System::String* keyFile) {
        this->name = keyFile;
    }
    
    System::String* AssemblyKeyFileAttribute::get_KeyFile() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyKeyNameAttribute::constructor(System::String* keyName) {
        this->name = keyName;
    }
    
    System::String* AssemblyKeyNameAttribute::get_KeyName() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyName::constructor() {
        this->versioncompat = System::Configuration::Assemblies::AssemblyVersionCompatibility::SameMachine;
    }
    
    void AssemblyName::constructor(System::String* assemblyName) {
        if((assemblyName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("assemblyName"));
        }
        if((assemblyName->get_Length() < 1)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("assemblyName cannot have zero length."));
        }
        if(!(ParseName(this, assemblyName))) 
        {
            throw cli::gcnew<System::IO::FileLoadException>(_T("The assembly name is invalid."));
        }
    }
    
    void AssemblyName::constructor(System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) {
        this->name = si->GetString(_T("_Name"));
        this->codebase = si->GetString(_T("_CodeBase"));
        this->version = cli::cast<System::Version*>(si->GetValue(_T("_Version"), cli::typeof<System::Type>::info));
        this->publicKey = cli::cast<cli::array<unsigned char>*>(si->GetValue(_T("_PublicKey"), cli::typeof<System::Type>::info));
        this->keyToken = cli::cast<cli::array<unsigned char>*>(si->GetValue(_T("_PublicKeyToken"), cli::typeof<System::Type>::info));
        this->hashalg = cli::unbox<System::Configuration::Assemblies::AssemblyHashAlgorithm>(si->GetValue(_T("_HashAlgorithm"), cli::typeof<System::Type>::info));
        this->keypair = cli::cast<StrongNameKeyPair*>(si->GetValue(_T("_StrongNameKeyPair"), cli::typeof<System::Type>::info));
        this->versioncompat = cli::unbox<System::Configuration::Assemblies::AssemblyVersionCompatibility>(si->GetValue(_T("_VersionCompatibility"), cli::typeof<System::Type>::info));
        this->flags = cli::unbox<AssemblyNameFlags>(si->GetValue(_T("_Flags"), cli::typeof<System::Type>::info));
        int32_t lcid = si->GetInt32(_T("_CultureInfo"));
        if((lcid != -1)) 
        {
            this->cultureinfo = cli::gcnew<System::Globalization::CultureInfo>(lcid);
        }
    }
    
    bool AssemblyName::ParseName(AssemblyName* aname, System::String* assemblyName) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* AssemblyName::ToString_1636a0751cb9ac11() {
        System::String *name = this->get_FullName();
        return (name != nullptr) ? name : System::Object::ToString_1636a0751cb9ac11();
    }
    
    cli::array<unsigned char>* AssemblyName::GetPublicKey() {
        return this->publicKey;
    }
    
    cli::array<unsigned char>* AssemblyName::GetPublicKeyToken() {
        if((this->keyToken != nullptr)) 
        {
            return this->keyToken;
        }
         else 
        {
            if((this->publicKey ==  nullptr)) 
            {
                return nullptr;
            }
             else 
            {
                if((this->publicKey->get_Length() ==  0)) 
                {
                    return (new cli::array<unsigned char>(0));
                }
                if(!(this->get_IsPublicKeyValid())) 
                {
                    throw cli::gcnew<System::Security::SecurityException>(_T("The public key is not valid."));
                }
                this->keyToken = ComputePublicKeyToken();
                return this->keyToken;
            }
        }
    }
    
    cli::array<unsigned char>* AssemblyName::InternalGetPublicKeyToken() {
        if((this->keyToken != nullptr)) 
        {
            return this->keyToken;
        }
        if((this->publicKey ==  nullptr)) 
        {
            return nullptr;
        }
        if((this->publicKey->get_Length() ==  0)) 
        {
            return (new cli::array<unsigned char>(0));
        }
        if(!(this->get_IsPublicKeyValid())) 
        {
            throw cli::gcnew<System::Security::SecurityException>(_T("The public key is not valid."));
        }
        return ComputePublicKeyToken();
    }
    
    cli::array<unsigned char>* AssemblyName::ComputePublicKeyToken() {
        System::Security::Cryptography::HashAlgorithm *ha = System::Security::Cryptography::SHA1::Create3();
        cli::array<unsigned char> *hash = ha->ComputeHash(this->publicKey);
        cli::array<unsigned char> *token = (new cli::array<unsigned char>(8));
        System::Array::Copy2(hash, (hash->get_Length() - 8), token, 0, 8);
        System::Array::Reverse2(token, 0, 8);
        return token;
    }
    
    bool AssemblyName::ReferenceMatchesDefinition(AssemblyName* reference, AssemblyName* definition) {
        if((reference ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("reference"));
        }
        if((definition ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("definition"));
        }
        if(System::String::op_Inequality(reference->get_Name(), definition->get_Name())) 
        {
            return false;
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyName::SetPublicKey(cli::array<unsigned char>* publicKey) {
        if((publicKey ==  nullptr)) 
        {
            (this->flags = (AssemblyNameFlags)(((int32_t)(this->flags) ^ 1)));
        }
         else 
        {
            (this->flags = (AssemblyNameFlags)(((int32_t)(this->flags) | 1)));
        }
        this->publicKey = publicKey;
    }
    
    void AssemblyName::SetPublicKeyToken(cli::array<unsigned char>* publicKeyToken) {
        this->keyToken = publicKeyToken;
    }
    
    void AssemblyName::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        if((info ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("info"));
        }
        info->AddValue16(_T("_Name"), this->name);
        info->AddValue16(_T("_PublicKey"), this->publicKey);
        info->AddValue16(_T("_PublicKeyToken"), this->keyToken);
        info->AddValue4(_T("_CultureInfo"), (this->cultureinfo != nullptr) ? this->cultureinfo->get_LCID_f4b9bc9d0bf0db86() : -1);
        info->AddValue16(_T("_CodeBase"), this->codebase);
        info->AddValue16(_T("_Version"), this->get_Version());
        info->AddValue16(_T("_HashAlgorithm"), cli::box(this->hashalg));
        info->AddValue16(_T("_HashAlgorithmForControl"), cli::box(System::Configuration::Assemblies::AssemblyHashAlgorithm::None));
        info->AddValue16(_T("_StrongNameKeyPair"), this->keypair);
        info->AddValue16(_T("_VersionCompatibility"), cli::box(this->versioncompat));
        info->AddValue16(_T("_Flags"), cli::box(this->flags));
        info->AddValue16(_T("_HashForControl"), nullptr);
    }
    
    System::Object* AssemblyName::Clone() {
        AssemblyName *an = cli::gcnew<AssemblyName>();
        an->name = this->name;
        an->codebase = this->codebase;
        an->major = this->major;
        an->minor = this->minor;
        an->build = this->build;
        an->revision = this->revision;
        an->version = this->version;
        an->cultureinfo = this->cultureinfo;
        an->flags = this->flags;
        an->hashalg = this->hashalg;
        an->keypair = this->keypair;
        an->publicKey = this->publicKey;
        an->keyToken = this->keyToken;
        an->versioncompat = this->versioncompat;
        return an;
    }
    
    void AssemblyName::OnDeserialization(System::Object* sender) {
        this->set_Version(this->version);
    }
    
    AssemblyName* AssemblyName::GetAssemblyName(System::String* assemblyFile) {
        if((assemblyFile ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("assemblyFile"));
        }
        AssemblyName *aname = cli::gcnew<AssemblyName>();
        Assembly::InternalGetAssemblyName(System::IO::Path::GetFullPath(assemblyFile), aname);
        return aname;
    }
    
    void AssemblyName::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyName::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyName::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyName::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    ProcessorArchitecture AssemblyName::get_ProcessorArchitecture() {
        return this->processor_architecture;
    }
    
    ProcessorArchitecture AssemblyName::set_ProcessorArchitecture(ProcessorArchitecture value) {
        this->processor_architecture = value;
        return get_ProcessorArchitecture();
    }
    
    System::String* AssemblyName::get_Name() {
        return this->name;
    }
    
    System::String* AssemblyName::set_Name(System::String* value) {
        this->name = value;
        return get_Name();
    }
    
    System::String* AssemblyName::get_CodeBase() {
        return this->codebase;
    }
    
    System::String* AssemblyName::set_CodeBase(System::String* value) {
        this->codebase = value;
        return get_CodeBase();
    }
    
    System::String* AssemblyName::get_EscapedCodeBase() {
        if((this->codebase ==  nullptr)) 
        {
            return nullptr;
        }
        return Mono::Security::Uri::EscapeString2(this->codebase, false, true, true);
    }
    
    System::Globalization::CultureInfo* AssemblyName::get_CultureInfo() {
        return this->cultureinfo;
    }
    
    System::Globalization::CultureInfo* AssemblyName::set_CultureInfo(System::Globalization::CultureInfo* value) {
        this->cultureinfo = value;
        return get_CultureInfo();
    }
    
    AssemblyNameFlags AssemblyName::get_Flags() {
        return this->flags;
    }
    
    AssemblyNameFlags AssemblyName::set_Flags(AssemblyNameFlags value) {
        this->flags = value;
        return get_Flags();
    }
    
    System::String* AssemblyName::get_FullName() {
        if((this->name ==  nullptr)) 
        {
            return System::String::Empty;
        }
        System::Text::StringBuilder *fname = cli::gcnew<System::Text::StringBuilder>();
        if(System::Char::IsWhiteSpace(this->name->get_Chars(0))) 
        {
            fname->Append2(cli::concat(_T("\""), this->name));
        }
         else 
        {
            fname->Append2(this->name);
        }
        if(System::Version::op_Inequality(this->get_Version(), nullptr)) 
        {
            fname->Append2(_T(", Version="));
            fname->Append2(this->get_Version()->ToString_1636a0751cb9ac11());
        }
        if((this->cultureinfo != nullptr)) 
        {
            fname->Append2(_T(", Culture="));
            if((this->cultureinfo->get_LCID_f4b9bc9d0bf0db86() ==  System::Globalization::CultureInfo::get_InvariantCulture()->get_LCID_f4b9bc9d0bf0db86())) 
            {
                fname->Append2(_T("neutral"));
            }
             else 
            {
                fname->Append2(this->cultureinfo->get_Name_7a59bd1b86cfacd3());
            }
        }
        cli::array<unsigned char> *pub_tok = InternalGetPublicKeyToken();
        if((pub_tok != nullptr)) 
        {
            if((pub_tok->get_Length() ==  0)) 
            {
                fname->Append2(_T(", PublicKeyToken=null"));
            }
             else 
            {
                fname->Append2(_T(", PublicKeyToken="));
                for(int32_t i = 0; (i < pub_tok->get_Length()); i++) {
                    fname->Append2(cli::import(pub_tok->at(i))->ToString3(_T("x2")));
                }
            }
        }
        if(((int32_t)(((int32_t)(this->get_Flags()) & 256)) != 0)) 
        {
            fname->Append2(_T(", Retargetable=Yes"));
        }
        return fname->ToString_1636a0751cb9ac11();
    }
    
    System::Configuration::Assemblies::AssemblyHashAlgorithm AssemblyName::get_HashAlgorithm() {
        return this->hashalg;
    }
    
    System::Configuration::Assemblies::AssemblyHashAlgorithm AssemblyName::set_HashAlgorithm(System::Configuration::Assemblies::AssemblyHashAlgorithm value) {
        this->hashalg = value;
        return get_HashAlgorithm();
    }
    
    StrongNameKeyPair* AssemblyName::get_KeyPair() {
        return this->keypair;
    }
    
    StrongNameKeyPair* AssemblyName::set_KeyPair(StrongNameKeyPair* value) {
        this->keypair = value;
        return get_KeyPair();
    }
    
    System::Version* AssemblyName::get_Version() {
        return this->version;
    }
    
    System::Version* AssemblyName::set_Version(System::Version* value) {
        this->version = value;
        if(System::Version::op_Equality(value, nullptr)) 
        {
            this->major = this->minor = this->build = this->revision = 0;
        }
         else 
        {
            this->major = value->get_Major();
            this->minor = value->get_Minor();
            this->build = value->get_Build();
            this->revision = value->get_Revision();
        }
        return get_Version();
    }
    
    System::Configuration::Assemblies::AssemblyVersionCompatibility AssemblyName::get_VersionCompatibility() {
        return this->versioncompat;
    }
    
    System::Configuration::Assemblies::AssemblyVersionCompatibility AssemblyName::set_VersionCompatibility(System::Configuration::Assemblies::AssemblyVersionCompatibility value) {
        this->versioncompat = value;
        return get_VersionCompatibility();
    }
    
    bool AssemblyName::get_IsPublicKeyValid() {
        if((this->publicKey->get_Length() ==  16)) 
        {
            int32_t i = 0;
            int32_t sum = 0;
            while((i < this->publicKey->get_Length())) (sum = sum + (int32_t)(this->publicKey->at(i++)));
            if((sum ==  4)) 
            {
                return true;
            }
        }
        switch(this->publicKey->at(0)) {
            case 0: case_1164: {
                if(((this->publicKey->get_Length() > 12) && ((int32_t)(this->publicKey->at(12)) ==  6))) 
                {
                    try {
                        Mono::Security::Cryptography::CryptoConvert::FromCapiPublicKeyBlob2(this->publicKey, 12);
                        return true;
                    }
                    catch(System::Security::Cryptography::CryptographicException*) {
                    }
                }
                break;
            }
            case 6: case_1165: {
                try {
                    Mono::Security::Cryptography::CryptoConvert::FromCapiPublicKeyBlob(this->publicKey);
                    return true;
                }
                catch(System::Security::Cryptography::CryptographicException*) {
                }
                break;
            }
            case 7: case_1166: {
                break;
            }
        }
        return false;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyNameProxy::constructor() {
    }
    
    AssemblyName* AssemblyNameProxy::GetAssemblyName(System::String* assemblyFile) {
        return AssemblyName::GetAssemblyName(assemblyFile);
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyProductAttribute::constructor(System::String* product) {
        this->name = product;
    }
    
    System::String* AssemblyProductAttribute::get_Product() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyTitleAttribute::constructor(System::String* title) {
        this->name = title;
    }
    
    System::String* AssemblyTitleAttribute::get_Title() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyTrademarkAttribute::constructor(System::String* trademark) {
        this->name = trademark;
    }
    
    System::String* AssemblyTrademarkAttribute::get_Trademark() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void AssemblyVersionAttribute::constructor(System::String* version) {
        this->name = version;
    }
    
    System::String* AssemblyVersionAttribute::get_Version() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void Default::constructor() {
    }
    
    FieldInfo* Default::BindToField_221370eceb50f96a(BindingFlags bindingAttr, cli::array<FieldInfo*>* match, System::Object* value, System::Globalization::CultureInfo* culture) {
        if((match ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("match"));
        }
        for(auto tmp_253 : match) {
            auto f = cli::cast<FieldInfo*>(tmp_253);
            {
                if(check_type(value->GetType(), f->get_FieldType_1dab4079098d7fff())) 
                {
                    return f;
                }
            }
        }
        return nullptr;
    }
    
    MethodBase* Default::BindToMethod_c4d067cd0e5ef7a(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* names, System::Object* state) {
        cli::array<System::Type*> *types;
        if((args ==  nullptr)) 
        {
            types = System::Type::EmptyTypes;
        }
         else 
        {
            types = (new cli::array<System::Type*>(args->get_Length()));
            for(int32_t i = 0; (i < args->get_Length()); ++i){
                if((args->at(i) != nullptr)) 
                {
                    types->at(i) = args->at(i)->GetType();
                }
            }
        }
        MethodBase *selected = nullptr;
        if((names != nullptr)) 
        {
            for(auto tmp_254 : match) {
                auto m = cli::cast<MethodBase*>(tmp_254);
                {
                    cli::array<ParameterInfo*> *parameters = m->GetParameters_9d17bcb549474c9();
                    int32_t i;
                    cli::array<System::Type*> *newTypes = cli::cast<cli::array<System::Type*>*>(cli::import(types)->Clone());
                    cli::array<ParameterModifier> *newModifiers = (modifiers != nullptr) ? cli::cast<cli::array<ParameterModifier>*>(cli::import(modifiers)->Clone()) : nullptr;
                    for(i = 0; (i < names->get_Length()); ++i){
                        int32_t nindex = -1;
                        for(int32_t j = 0; (j < parameters->get_Length()); ++j){
                            if(System::String::op_Equality(parameters->at(j)->get_Name_1ad7a68577256740(), names->at(i))) 
                            {
                                nindex = j;
                                break;
                            }
                        }
                        if((nindex ==  -1)) 
                        {
                            break;
                        }
                        if(((i < newTypes->get_Length()) && (nindex < types->get_Length()))) 
                        {
                            newTypes->at(i) = types->at(nindex);
                        }
                        if((((modifiers != nullptr) && (i < newModifiers->get_Length())) && (nindex < modifiers->get_Length()))) 
                        {
                            newModifiers->at(i) = modifiers->at(nindex);
                        }
                    }
                    if((i < names->get_Length())) 
                    {
                        continue;
                    }
                    selected = SelectMethod3(bindingAttr, (new cli::array<MethodBase*>({m})), newTypes, newModifiers, true);
                    if(MethodBase::op_Inequality2(selected, nullptr)) 
                    {
                        break;
                    }
                }
            }
        }
         else 
        {
            selected = SelectMethod3(bindingAttr, match, types, modifiers, true);
        }
        state = nullptr;
        if((MethodBase::op_Inequality2(selected, nullptr) && (names != nullptr))) 
        {
            ReorderParameters(names, args, selected);
        }
        if(MethodBase::op_Inequality2(selected, nullptr)) 
        {
            if((args ==  nullptr)) 
            {
                args = (new cli::array<System::Object*>(0));
            }
            AdjustArguments(selected, args);
        }
        return selected;
    }
    
    void Default::AdjustArguments(MethodBase* selected, cli::array<System::Object*>* args) {
        cli::array<ParameterInfo*> *parameters = selected->GetParameters_9d17bcb549474c9();
        int32_t parameters_length = parameters->get_Length();
        if((parameters_length ==  0)) 
        {
            return;
        }
        ParameterInfo *last_parameter = parameters->at((parameters->get_Length() - 1));
        System::Type *last_parameter_type = last_parameter->get_ParameterType_97c5fa09a0b988d();
        if(!(System::Attribute::IsDefined2(last_parameter, cli::typeof<System::Type>::info))) 
        {
            return;
        }
        int32_t args_length = args->get_Length();
        int32_t param_args_count = ((args_length + 1) - parameters_length);
        int32_t first_vararg_index = (args_length - param_args_count);
        if((first_vararg_index < args_length)) 
        {
            System::Object *first_vararg = args->at(first_vararg_index);
            if(((first_vararg != nullptr) && System::Type::op_Equality2(first_vararg->GetType(), last_parameter_type))) 
            {
                return;
            }
        }
        System::Array *params_args = System::Array::CreateInstance(last_parameter_type->GetElementType_ab5070dbbfe66f5f(), param_args_count);
        for(int32_t i = 0; (i < param_args_count); i++) {
            params_args->SetValue5(args->at((first_vararg_index + i)), i);
        }
        cli::array<System::Object*> *adjusted = (new cli::array<System::Object*>(parameters_length));
        System::Array::Copy(args, adjusted, (parameters_length - 1));
        adjusted->at((adjusted->get_Length() - 1)) = params_args;
        args = adjusted;
    }
    
    void Default::ReorderParameters(cli::array<System::String*>* names, cli::array<System::Object*>* args, MethodBase* selected) {
        cli::array<System::Object*> *newArgs = (new cli::array<System::Object*>(args->get_Length()));
        System::Array::Copy(args, newArgs, args->get_Length());
        cli::array<ParameterInfo*> *plist = selected->GetParameters_9d17bcb549474c9();
        for(int32_t n = 0; (n < names->get_Length()); n++)for(int32_t p = 0; (p < plist->get_Length()); p++){
            if(System::String::op_Equality(names->at(n), plist->at(p)->get_Name_1ad7a68577256740())) 
            {
                newArgs->at(p) = args->at(n);
                break;
            }
        }
        System::Array::Copy(newArgs, args, args->get_Length());
    }
    
    bool Default::IsArrayAssignable(System::Type* object_type, System::Type* target_type) {
        if((object_type->get_IsArray() && target_type->get_IsArray())) 
        {
            return IsArrayAssignable(object_type->GetElementType_ab5070dbbfe66f5f(), target_type->GetElementType_ab5070dbbfe66f5f());
        }
        if(target_type->IsAssignableFrom_e3aa32d778e63a90(object_type)) 
        {
            return true;
        }
        return false;
    }
    
    System::Object* Default::ChangeType_330506257d259909(System::Object* value, System::Type* type, System::Globalization::CultureInfo* culture) {
        if((value ==  nullptr)) 
        {
            return nullptr;
        }
        System::Type *vtype = value->GetType();
        if(type->get_IsByRef()) 
        {
            type = type->GetElementType_ab5070dbbfe66f5f();
        }
        if((System::Type::op_Equality2(vtype, type) || type->IsInstanceOfType_bd709d8c55b4333d(value))) 
        {
            return value;
        }
        if((vtype->get_IsArray() && type->get_IsArray())) 
        {
            if(IsArrayAssignable(vtype->GetElementType_ab5070dbbfe66f5f(), type->GetElementType_ab5070dbbfe66f5f())) 
            {
                return value;
            }
        }
        if(check_type(vtype, type)) 
        {
            if(type->get_IsEnum_bc85ea7b0a749db()) 
            {
                return System::Enum::ToObject5(type, value);
            }
            if(System::Type::op_Equality2(vtype, cli::typeof<System::Type>::info)) 
            {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    return cli::box((double)(cli::unbox<char16_t>(value)));
                }
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    return cli::box((float)(cli::unbox<char16_t>(value)));
                }
            }
            if((System::Type::op_Equality2(vtype, cli::typeof<System::Type>::info) && type->get_IsPointer())) 
            {
                return value;
            }
            return System::Convert::ChangeType(value, type);
        }
        return nullptr;
    }
    
    void Default::ReorderArgumentArray_b525b590b5921f82(cli::array<System::Object*>* args, System::Object* state) {
    }
    
    bool Default::check_type(System::Type* from, System::Type* to) {
        if(System::Type::op_Equality2(from, to)) 
        {
            return true;
        }
        if(System::Type::op_Equality2(from, nullptr)) 
        {
            return true;
        }
        if((to->get_IsByRef() != from->get_IsByRef())) 
        {
            return false;
        }
        if(to->get_IsInterface()) 
        {
            return to->IsAssignableFrom_e3aa32d778e63a90(from);
        }
        if(to->get_IsEnum_bc85ea7b0a749db()) 
        {
            to = System::Enum::GetUnderlyingType(to);
            if(System::Type::op_Equality2(from, to)) 
            {
                return true;
            }
        }
        if(((to->get_IsGenericType_4db8ddd5b97f3c14() && System::Type::op_Equality2(to->GetGenericTypeDefinition_15f8fc7813e8e8bf(), cli::typeof<System::Type>::info)) && System::Type::op_Equality2(to->GetGenericArguments_a7fb476275cfe9a3()->at(0), from))) 
        {
            return true;
        }
        System::TypeCode fromt = System::Type::GetTypeCode(from);
        System::TypeCode tot = System::Type::GetTypeCode(to);
        switch(fromt) {
            case System::TypeCode::Char2: case_1167: {
                switch(tot) {
                    case System::TypeCode::UInt162: case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1177: {
                        return true;
                    }
                }
                return System::Type::op_Equality2(to, cli::typeof<System::Type>::info);
            }
            case System::TypeCode::Byte2: case_1168: {
                switch(tot) {
                    case System::TypeCode::Char2: case System::TypeCode::UInt162: case System::TypeCode::Int162: case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1178: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::SByte2: case_1169: {
                switch(tot) {
                    case System::TypeCode::Int162: case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1179: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::UInt162: case_1170: {
                switch(tot) {
                    case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1180: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::Int162: case_1171: {
                switch(tot) {
                    case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1181: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::UInt322: case_1172: {
                switch(tot) {
                    case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1182: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::Int322: case_1173: {
                switch(tot) {
                    case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1183: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::UInt642: case System::TypeCode::Int642: case_1174: {
                switch(tot) {
                    case System::TypeCode::Single2: case System::TypeCode::Double2: case_1184: {
                        return true;
                    }
                }
                return (System::Type::op_Equality2(to, cli::typeof<System::Type>::info) || (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)));
            }
            case System::TypeCode::Single2: case_1175: {
                return (((int32_t)(tot) ==  14) || System::Type::op_Equality2(to, cli::typeof<System::Type>::info));
            }
            default: case_1176: {
                if((System::Type::op_Equality2(to, cli::typeof<System::Type>::info) && from->get_IsValueType())) 
                {
                    return true;
                }
                if((to->get_IsPointer() && System::Type::op_Equality2(from, cli::typeof<System::Type>::info))) 
                {
                    return true;
                }
                return to->IsAssignableFrom_e3aa32d778e63a90(from);
            }
        }
    }
    
    bool Default::check_arguments(cli::array<System::Type*>* types, cli::array<ParameterInfo*>* args, bool allowByRefMatch) {
        for(int32_t i = 0; (i < types->get_Length()); ++i){
            bool match = check_type(types->at(i), args->at(i)->get_ParameterType_97c5fa09a0b988d());
            if((!(match) && allowByRefMatch)) 
            {
                System::Type *param_type = args->at(i)->get_ParameterType_97c5fa09a0b988d();
                if(param_type->get_IsByRef()) 
                {
                    match = check_type(types->at(i), param_type->GetElementType_ab5070dbbfe66f5f());
                }
            }
            if(!(match)) 
            {
                return false;
            }
        }
        return true;
    }
    
    MethodBase* Default::SelectMethod_3e1ca0f0e362534f(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        return SelectMethod3(bindingAttr, match, types, modifiers, false);
    }
    
    MethodBase* Default::SelectMethod3(BindingFlags bindingAttr, cli::array<MethodBase*>* match, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers, bool allowByRefMatch) {
        MethodBase *m;
        int32_t i, j;
        if((match ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("match"));
        }
        MethodBase *exact_match = nullptr;
        for(i = 0; (i < match->get_Length()); ++i){
            m = match->at(i);
            cli::array<ParameterInfo*> *args = m->GetParameters_9d17bcb549474c9();
            if((args->get_Length() != types->get_Length())) 
            {
                continue;
            }
            for(j = 0; (j < types->get_Length()); ++j){
                if(System::Type::op_Inequality2(types->at(j), args->at(j)->get_ParameterType_97c5fa09a0b988d())) 
                {
                    break;
                }
            }
            if((j ==  types->get_Length())) 
            {
                if(MethodBase::op_Inequality2(exact_match, nullptr)) 
                {
                    exact_match = nullptr;
                    break;
                }
                 else 
                {
                    exact_match = m;
                }
            }
        }
        if(MethodBase::op_Inequality2(exact_match, nullptr)) 
        {
            return exact_match;
        }
        bool isdefParamArray = false;
        System::Type *elementType = nullptr;
        for(i = 0; (i < match->get_Length()); ++i){
            m = match->at(i);
            cli::array<ParameterInfo*> *args = m->GetParameters_9d17bcb549474c9();
            if((args->get_Length() > (types->get_Length() + 1))) 
            {
                continue;
            }
             else 
            {
                if((args->get_Length() ==  0)) 
                {
                    continue;
                }
            }
            isdefParamArray = System::Attribute::IsDefined2(args->at((args->get_Length() - 1)), cli::typeof<System::Type>::info);
            if(!(isdefParamArray)) 
            {
                continue;
            }
            elementType = args->at((args->get_Length() - 1))->get_ParameterType_97c5fa09a0b988d()->GetElementType_ab5070dbbfe66f5f();
            for(j = 0; (j < types->get_Length()); ++j){
                if(((j < (args->get_Length() - 1)) && System::Type::op_Inequality2(types->at(j), args->at(j)->get_ParameterType_97c5fa09a0b988d()))) 
                {
                    break;
                }
                 else 
                {
                    if(((j >= (args->get_Length() - 1)) && System::Type::op_Inequality2(types->at(j), elementType))) 
                    {
                        break;
                    }
                }
            }
            if((j ==  types->get_Length())) 
            {
                return m;
            }
        }
        if(((int32_t)(((int32_t)(bindingAttr) & 65536)) != 0)) 
        {
            return nullptr;
        }
        MethodBase *result = nullptr;
        for(i = 0; (i < match->get_Length()); ++i){
            m = match->at(i);
            cli::array<ParameterInfo*> *args = m->GetParameters_9d17bcb549474c9();
            if((args->get_Length() != types->get_Length())) 
            {
                continue;
            }
            if(!(check_arguments(types, args, allowByRefMatch))) 
            {
                continue;
            }
            if(MethodBase::op_Inequality2(result, nullptr)) 
            {
                result = GetBetterMethod(result, m, types);
            }
             else 
            {
                result = m;
            }
        }
        return result;
    }
    
    MethodBase* Default::GetBetterMethod(MethodBase* m1, MethodBase* m2, cli::array<System::Type*>* types) {
        cli::array<ParameterInfo*> *pl1 = m1->GetParameters_9d17bcb549474c9();
        cli::array<ParameterInfo*> *pl2 = m2->GetParameters_9d17bcb549474c9();
        int32_t prev = 0;
        for(int32_t i = 0; (i < pl1->get_Length()); i++){
            int32_t cmp = CompareCloserType(pl1->at(i)->get_ParameterType_97c5fa09a0b988d(), pl2->at(i)->get_ParameterType_97c5fa09a0b988d());
            if((((cmp != 0) && (prev != 0)) && (prev != cmp))) 
            {
                throw cli::gcnew<AmbiguousMatchException>();
            }
            if((cmp != 0)) 
            {
                prev = cmp;
            }
        }
        if((prev != 0)) 
        {
            return (prev > 0) ? m2 : m1;
        }
        System::Type *dt1 = m1->get_DeclaringType_6121cd6a84393166();
        System::Type *dt2 = m2->get_DeclaringType_6121cd6a84393166();
        if(System::Type::op_Inequality2(dt1, dt2)) 
        {
            if(dt1->IsSubclassOf_5d7dbe0215a30fda(dt2)) 
            {
                return m1;
            }
            if(dt2->IsSubclassOf_5d7dbe0215a30fda(dt1)) 
            {
                return m2;
            }
        }
        bool va1 = ((int32_t)(((int32_t)(m1->get_CallingConvention_309cf574b58a053a()) & 2)) != 0);
        bool va2 = ((int32_t)(((int32_t)(m2->get_CallingConvention_309cf574b58a053a()) & 2)) != 0);
        if((va1 && !(va2))) 
        {
            return m2;
        }
        if((va2 && !(va1))) 
        {
            return m1;
        }
        throw cli::gcnew<AmbiguousMatchException>();
    }
    
    int32_t Default::CompareCloserType(System::Type* t1, System::Type* t2) {
        if(System::Type::op_Equality2(t1, t2)) 
        {
            return 0;
        }
        if((t1->get_IsGenericParameter_2a17c4bf67798b07() && !(t2->get_IsGenericParameter_2a17c4bf67798b07()))) 
        {
            return 1;
        }
        if((!(t1->get_IsGenericParameter_2a17c4bf67798b07()) && t2->get_IsGenericParameter_2a17c4bf67798b07())) 
        {
            return -1;
        }
        if((t1->get_HasElementType() && t2->get_HasElementType())) 
        {
            return CompareCloserType(t1->GetElementType_ab5070dbbfe66f5f(), t2->GetElementType_ab5070dbbfe66f5f());
        }
        if(t1->IsSubclassOf_5d7dbe0215a30fda(t2)) 
        {
            return -1;
        }
        if(t2->IsSubclassOf_5d7dbe0215a30fda(t1)) 
        {
            return 1;
        }
        if((t1->get_IsInterface() && (System::Array::template IndexOf_1<System::Type*>(t2->GetInterfaces_52a89380e2c4a725(), t1) >= 0))) 
        {
            return 1;
        }
        if((t2->get_IsInterface() && (System::Array::template IndexOf_1<System::Type*>(t1->GetInterfaces_52a89380e2c4a725(), t2) >= 0))) 
        {
            return -1;
        }
        return 0;
    }
    
    PropertyInfo* Default::SelectProperty_d299ada322143a6(BindingFlags bindingAttr, cli::array<PropertyInfo*>* match, System::Type* returnType, cli::array<System::Type*>* indexes, cli::array<ParameterModifier>* modifiers) {
        if(((match ==  nullptr) || (match->get_Length() ==  0))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("No properties provided"), _T("match"));
        }
        bool haveRet = System::Type::op_Inequality2(returnType, nullptr);
        int32_t idxlen = (indexes != nullptr) ? indexes->get_Length() : -1;
        PropertyInfo *result = nullptr;
        int32_t i;
        int32_t best_score = 2147483646;
        int32_t fail_score = 2147483647;
        int32_t level = 0;
        for(i = (match->get_Length() - 1); (i >= 0); i--){
            PropertyInfo *p = match->at(i);
            cli::array<ParameterInfo*> *args = p->GetIndexParameters_66437e9b713ac629();
            if(((idxlen >= 0) && (idxlen != args->get_Length()))) 
            {
                continue;
            }
            if((haveRet && System::Type::op_Inequality2(p->get_PropertyType_68b4b04678fe4f8a(), returnType))) 
            {
                continue;
            }
            int32_t score = 2147483646;
            if((idxlen > 0)) 
            {
                score = check_arguments_with_score(indexes, args);
                if((score ==  -1)) 
                {
                    continue;
                }
            }
            int32_t new_level = Binder::GetDerivedLevel(p->get_DeclaringType_6121cd6a84393166());
            if(PropertyInfo::op_Inequality2(result, nullptr)) 
            {
                if((best_score < score)) 
                {
                    continue;
                }
                if((best_score ==  score)) 
                {
                    if((level ==  new_level)) 
                    {
                        fail_score = score;
                        continue;
                    }
                    if((level > new_level)) 
                    {
                        continue;
                    }
                }
            }
            result = p;
            best_score = score;
            level = new_level;
        }
        if((fail_score <= best_score)) 
        {
            throw cli::gcnew<AmbiguousMatchException>();
        }
        return result;
    }
    
    int32_t Default::check_arguments_with_score(cli::array<System::Type*>* types, cli::array<ParameterInfo*>* args) {
        int32_t worst = -1;
        for(int32_t i = 0; (i < types->get_Length()); ++i){
            int32_t res = check_type_with_score(types->at(i), args->at(i)->get_ParameterType_97c5fa09a0b988d());
            if((res ==  -1)) 
            {
                return -1;
            }
            if((worst < res)) 
            {
                worst = res;
            }
        }
        return worst;
    }
    
    int32_t Default::check_type_with_score(System::Type* from, System::Type* to) {
        if(System::Type::op_Equality2(from, nullptr)) 
        {
            return to->get_IsValueType() ? -1 : 0;
        }
        if(System::Type::op_Equality2(from, to)) 
        {
            return 0;
        }
        if(System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) 
        {
            return 4;
        }
        System::TypeCode fromt = System::Type::GetTypeCode(from);
        System::TypeCode tot = System::Type::GetTypeCode(to);
        switch(fromt) {
            case System::TypeCode::Char2: case_1185: {
                switch(tot) {
                    case System::TypeCode::UInt162: case_1195: {
                        return 0;
                    }
                    case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1196: {
                        return 2;
                    }
                }
                return -1;
            }
            case System::TypeCode::Byte2: case_1186: {
                switch(tot) {
                    case System::TypeCode::Char2: case System::TypeCode::UInt162: case System::TypeCode::Int162: case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1197: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::SByte2: case_1187: {
                switch(tot) {
                    case System::TypeCode::Int162: case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1198: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::UInt162: case_1188: {
                switch(tot) {
                    case System::TypeCode::UInt322: case System::TypeCode::Int322: case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1199: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::Int162: case_1189: {
                switch(tot) {
                    case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1200: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::UInt322: case_1190: {
                switch(tot) {
                    case System::TypeCode::UInt642: case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1201: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::Int322: case_1191: {
                switch(tot) {
                    case System::TypeCode::Int642: case System::TypeCode::Single2: case System::TypeCode::Double2: case_1202: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::UInt642: case System::TypeCode::Int642: case_1192: {
                switch(tot) {
                    case System::TypeCode::Single2: case System::TypeCode::Double2: case_1203: {
                        return 2;
                    }
                }
                return (from->get_IsEnum_bc85ea7b0a749db() && System::Type::op_Equality2(to, cli::typeof<System::Type>::info)) ? 1 : -1;
            }
            case System::TypeCode::Single2: case_1193: {
                return ((int32_t)(tot) ==  14) ? 2 : -1;
            }
            default: case_1194: {
                return to->IsAssignableFrom_e3aa32d778e63a90(from) ? 3 : -1;
            }
        }
    }
    
}}
namespace System { namespace Reflection {
    
    Binder*  Binder::default_binder;
    
    Binder::Binder()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void Binder::constructor() {
    }
    
    void Binder::static_constructor() {
    }
    
    bool Binder::ConvertArgs(Binder* binder, cli::array<System::Object*>* args, cli::array<ParameterInfo*>* pinfo, System::Globalization::CultureInfo* culture) {
        if((args ==  nullptr)) 
        {
            if((pinfo->get_Length() ==  0)) 
            {
                return true;
            }
             else 
            {
                throw cli::gcnew<TargetParameterCountException>();
            }
        }
        if((pinfo->get_Length() != args->get_Length())) 
        {
            throw cli::gcnew<TargetParameterCountException>();
        }
        for(int32_t i = 0; (i < args->get_Length()); ++i){
            System::Object *v = binder->ChangeType_330506257d259909(args->at(i), pinfo->at(i)->get_ParameterType_97c5fa09a0b988d(), culture);
            if(((v ==  nullptr) && (args->at(i) != nullptr))) 
            {
                return false;
            }
            args->at(i) = v;
        }
        return true;
    }
    
    int32_t Binder::GetDerivedLevel(System::Type* type) {
        System::Type *searchType = type;
        int32_t level = 1;
        while(System::Type::op_Inequality2(searchType->get_BaseType_6a0646ae880055f6(), nullptr)) {
            level++;
            searchType = searchType->get_BaseType_6a0646ae880055f6();
        }
        return level;
    }
    
    MethodBase* Binder::FindMostDerivedMatch(cli::array<MethodBase*>* match) {
        int32_t highLevel = 0;
        int32_t matchId = -1;
        int32_t count = match->get_Length();
        for(int32_t current = 0; (current < count); current++){
            MethodBase *m = match->at(current);
            int32_t level = GetDerivedLevel(m->get_DeclaringType_6121cd6a84393166());
            if((level ==  highLevel)) 
            {
                throw cli::gcnew<AmbiguousMatchException>();
            }
            if((matchId >= 0)) 
            {
                cli::array<ParameterInfo*> *p1 = m->GetParameters_9d17bcb549474c9();
                cli::array<ParameterInfo*> *p2 = match->at(matchId)->GetParameters_9d17bcb549474c9();
                bool equal = true;
                if((p1->get_Length() != p2->get_Length())) 
                {
                    equal = false;
                }
                 else 
                {
                    int32_t i;
                    for(i = 0; (i < p1->get_Length()); ++i){
                        if(System::Type::op_Inequality2(p1->at(i)->get_ParameterType_97c5fa09a0b988d(), p2->at(i)->get_ParameterType_97c5fa09a0b988d())) 
                        {
                            equal = false;
                            break;
                        }
                    }
                }
                if(!(equal)) 
                {
                    throw cli::gcnew<AmbiguousMatchException>();
                }
            }
            if((level > highLevel)) 
            {
                highLevel = level;
                matchId = current;
            }
        }
        return match->at(matchId);
    }
    
    Binder* Binder::get_DefaultBinder() {
        return default_binder;
    }
    
}}
namespace System { namespace Reflection {
    
    System::String*  ConstructorInfo::ConstructorName;
    System::String*  ConstructorInfo::TypeConstructorName;
    
    ConstructorInfo::ConstructorInfo()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ConstructorInfo::constructor() {
    }
    
    void ConstructorInfo::static_constructor() {
    }
    
    System::Object* ConstructorInfo::Invoke(cli::array<System::Object*>* parameters) {
        if((parameters ==  nullptr)) 
        {
            parameters = (new cli::array<System::Object*>(0));
        }
        return Invoke_d9ede2dfc2f2dd62(BindingFlags::CreateInstance, nullptr, parameters, nullptr);
    }
    
    void ConstructorInfo::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorInfo::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorInfo::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorInfo::Invoke6(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* ConstructorInfo::Invoke_2(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        return this->Invoke_ba5f4e14507fdb95(obj, invokeAttr, binder, parameters, culture);
    }
    
    System::Object* ConstructorInfo::Invoke_3(System::Object* obj, cli::array<System::Object*>* parameters) {
        return MethodBase::Invoke2(obj, parameters);
    }
    
    System::Object* ConstructorInfo::Invoke_4(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        return this->Invoke_d9ede2dfc2f2dd62(invokeAttr, binder, parameters, culture);
    }
    
    System::Object* ConstructorInfo::Invoke_5(cli::array<System::Object*>* parameters) {
        return this->Invoke(parameters);
    }
    
    bool ConstructorInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t ConstructorInfo::GetHashCode_6648aef0f235ee6c() {
        return MethodBase::GetHashCode_6648aef0f235ee6c();
    }
    
    bool ConstructorInfo::op_Equality(ConstructorInfo* left, ConstructorInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool ConstructorInfo::op_Inequality(ConstructorInfo* left, ConstructorInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    MemberTypes ConstructorInfo::get_MemberType_cd521d320810c98f() {
        return MemberTypes::Constructor;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void LazyCAttrData::constructor() {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void CustomAttributeData::constructor() {
    }
    
    void CustomAttributeData::constructor(ConstructorInfo* ctorInfo, Assembly* assembly, void* data, uint32_t data_length) {
        this->ctorInfo = ctorInfo;
        this->lazyData = cli::gcnew<LazyCAttrData>();
        this->lazyData->assembly = assembly;
        this->lazyData->data = data;
        this->lazyData->data_length = data_length;
    }
    
    void CustomAttributeData::ResolveArgumentsInternal(ConstructorInfo* ctor, Assembly* assembly, void* data, uint32_t data_length, cli::array<System::Object*>* ctorArgs, cli::array<System::Object*>* namedArgs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CustomAttributeData::ResolveArguments() {
        cli::array<System::Object*> *ctor_args, *named_args;
        if((this->lazyData ==  nullptr)) 
        {
            return;
        }
        ResolveArgumentsInternal(this->ctorInfo, this->lazyData->assembly, this->lazyData->data, this->lazyData->data_length, ctor_args, named_args);
        this->ctorArgs = System::Array::template AsReadOnly_1<CustomAttributeTypedArgument>((ctor_args != nullptr) ? UnboxValues_1<CustomAttributeTypedArgument>(ctor_args) : (new cli::array<CustomAttributeTypedArgument>(0)));
        this->namedArgs = System::Array::template AsReadOnly_1<CustomAttributeNamedArgument>((named_args != nullptr) ? UnboxValues_1<CustomAttributeNamedArgument>(named_args) : (new cli::array<CustomAttributeNamedArgument>(0)));
        this->lazyData = nullptr;
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* CustomAttributeData::GetCustomAttributes(Assembly* target) {
        return System::MonoCustomAttrs::GetCustomAttributesData(target);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* CustomAttributeData::GetCustomAttributes2(MemberInfo* target) {
        return System::MonoCustomAttrs::GetCustomAttributesData(target);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* CustomAttributeData::GetCustomAttributes3(Module* target) {
        return System::MonoCustomAttrs::GetCustomAttributesData(target);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* CustomAttributeData::GetCustomAttributes4(ParameterInfo* target) {
        return System::MonoCustomAttrs::GetCustomAttributesData(target);
    }
    
    System::String* CustomAttributeData::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>();
        sb->Append2(cli::concat(_T("["), this->ctorInfo->get_DeclaringType_6121cd6a84393166()->get_FullName_7e8fa72ba225e1a4()));
        for(int32_t i = 0; (i < this->ctorArgs->get_Count_a9c25d5c244affb9()); i++){
            sb->Append2(this->ctorArgs->get_Item_e6c1a54cb8f591e7(i)->ToString_1636a0751cb9ac11());
            if(((i + 1) < this->ctorArgs->get_Count_a9c25d5c244affb9())) 
            {
                sb->Append2(_T(", "));
            }
        }
        if((this->namedArgs->get_Count_a9c25d5c244affb9() > 0)) 
        {
            sb->Append2(_T(", "));
        }
        for(int32_t j = 0; (j < this->namedArgs->get_Count_a9c25d5c244affb9()); j++){
            sb->Append2(this->namedArgs->get_Item_e6c1a54cb8f591e7(j)->ToString_1636a0751cb9ac11());
            if(((j + 1) < this->namedArgs->get_Count_a9c25d5c244affb9())) 
            {
                sb->Append2(_T(", "));
            }
        }
        sb->AppendFormat(_T(")]"), (new cli::array<System::Object*>({})));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    bool CustomAttributeData::Equals_ed975d2f4a7d193e(System::Object* obj) {
        CustomAttributeData *other = cli::as<CustomAttributeData*>(obj);
        if(((((other ==  nullptr) || ConstructorInfo::op_Inequality(other->ctorInfo, this->ctorInfo)) || (other->ctorArgs->get_Count_a9c25d5c244affb9() != this->ctorArgs->get_Count_a9c25d5c244affb9())) || (other->namedArgs->get_Count_a9c25d5c244affb9() != this->namedArgs->get_Count_a9c25d5c244affb9()))) 
        {
            return false;
        }
        for(int32_t i = 0; (i < this->ctorArgs->get_Count_a9c25d5c244affb9()); i++) {
            if(this->ctorArgs->get_Item_e6c1a54cb8f591e7(i)->Equals_ed975d2f4a7d193e(cli::box(other->ctorArgs->get_Item_e6c1a54cb8f591e7(i)))) 
            {
                return false;
            }
        }
        for(int32_t i = 0; (i < this->namedArgs->get_Count_a9c25d5c244affb9()); i++){
            bool matched = false;
            for(int32_t j = 0; (j < other->namedArgs->get_Count_a9c25d5c244affb9()); j++) {
                if(this->namedArgs->get_Item_e6c1a54cb8f591e7(i)->Equals_ed975d2f4a7d193e(cli::box(other->namedArgs->get_Item_e6c1a54cb8f591e7(j)))) 
                {
                    matched = true;
                    break;
                }
            }
            if(!(matched)) 
            {
                return false;
            }
        }
        return true;
    }
    
    int32_t CustomAttributeData::GetHashCode_6648aef0f235ee6c() {
        int32_t ret = (this->ctorInfo->GetHashCode_6648aef0f235ee6c() << 16);
        for(int32_t i = 0; (i < this->ctorArgs->get_Count_a9c25d5c244affb9()); i++) {
            (ret = ret + (ret ^ ((7 + this->ctorArgs->get_Item_e6c1a54cb8f591e7(i)->GetHashCode_6648aef0f235ee6c()) << ((i * 4) & 31))));
        }
        for(int32_t i = 0; (i < this->namedArgs->get_Count_a9c25d5c244affb9()); i++) {
            (ret = ret + (this->namedArgs->get_Item_e6c1a54cb8f591e7(i)->GetHashCode_6648aef0f235ee6c() << 5));
        }
        return ret;
    }
    
    ConstructorInfo* CustomAttributeData::get_Constructor_f48295d050610964() {
        return this->ctorInfo;
    }
    
    System::Collections::Generic::IList2<CustomAttributeTypedArgument>* CustomAttributeData::get_ConstructorArguments_6b8ce4268fd7d5c5() {
        ResolveArguments();
        return this->ctorArgs;
    }
    
    System::Collections::Generic::IList2<CustomAttributeNamedArgument>* CustomAttributeData::get_NamedArguments_654067baca149b46() {
        ResolveArguments();
        return this->namedArgs;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void CustomAttributeFormatException::constructor() {
    }
    
    void CustomAttributeFormatException::constructor(System::String* message) {
    }
    
    void CustomAttributeFormatException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void CustomAttributeFormatException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void DefaultMemberAttribute::constructor(System::String* memberName) {
        this->member_name = memberName;
    }
    
    System::String* DefaultMemberAttribute::get_MemberName() {
        return this->member_name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void EventInfo::constructor() {
    }
    
    void EventInfo::AddEventHandler_ad88f4bed9d5ff3c(System::Object* target, System::Delegate* handler) {
        if((this->cached_add_event ==  nullptr)) 
        {
            MethodInfo *add = GetAddMethod();
            if(MethodInfo::op_Equality(add, nullptr)) 
            {
                throw cli::gcnew<System::InvalidOperationException>(_T("Cannot add a handler to an event that doesn\'t have a visible add method"));
            }
            if(add->get_DeclaringType_6121cd6a84393166()->get_IsValueType()) 
            {
                if(((target ==  nullptr) && !(add->get_IsStatic()))) 
                {
                    throw cli::gcnew<TargetException>(_T("Cannot add a handler to a non static event with a null target"));
                }
                add->Invoke2(target, (new cli::array<System::Object*>({handler})));
                return;
            }
            this->cached_add_event = CreateAddEventDelegate(add);
        }
        this->cached_add_event->Invoke(target, handler);
    }
    
    MethodInfo* EventInfo::GetAddMethod() {
        return GetAddMethod_e6ed2f5f0e24f59f(false);
    }
    
    MethodInfo* EventInfo::GetRaiseMethod() {
        return GetRaiseMethod_da2f94f17ce18705(false);
    }
    
    MethodInfo* EventInfo::GetRemoveMethod() {
        return GetRemoveMethod_2709ba07e73fded4(false);
    }
    
    cli::array<MethodInfo*>* EventInfo::GetOtherMethods_cea105c0bef756da(bool nonPublic) {
        return (new cli::array<MethodInfo*>(0));
    }
    
    cli::array<MethodInfo*>* EventInfo::GetOtherMethods2() {
        return GetOtherMethods_cea105c0bef756da(false);
    }
    
    void EventInfo::RemoveEventHandler_3607721c5f918cf8(System::Object* target, System::Delegate* handler) {
        MethodInfo *remove = GetRemoveMethod();
        if(MethodInfo::op_Equality(remove, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Cannot remove a handler to an event that doesn\'t have a visible remove method"));
        }
        remove->Invoke2(target, (new cli::array<System::Object*>({handler})));
    }
    
    bool EventInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t EventInfo::GetHashCode_6648aef0f235ee6c() {
        return MemberInfo::GetHashCode_6648aef0f235ee6c();
    }
    
    void EventInfo::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventInfo::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventInfo::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventInfo::Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AddEventAdapter* EventInfo::CreateAddEventDelegate(MethodInfo* method) {
        cli::array<System::Type*> *typeVector;
        System::Type *addHandlerType;
        System::Object *addHandlerDelegate;
        MethodInfo *adapterFrame;
        System::Type *addHandlerDelegateType;
        System::String *frameName;
        if(method->get_IsStatic()) 
        {
            typeVector = (new cli::array<System::Type*>({method->GetParameters_9d17bcb549474c9()->at(0)->get_ParameterType_97c5fa09a0b988d()}));
            addHandlerDelegateType = cli::typeof<System::Type>::info;
            frameName = _T("StaticAddEventAdapterFrame");
        }
         else 
        {
            typeVector = (new cli::array<System::Type*>({method->get_DeclaringType_6121cd6a84393166(), method->GetParameters_9d17bcb549474c9()->at(0)->get_ParameterType_97c5fa09a0b988d()}));
            addHandlerDelegateType = cli::typeof<System::Type>::info;
            frameName = _T("AddEventFrame");
        }
        addHandlerType = addHandlerDelegateType->MakeGenericType_da11ef776ac96678(typeVector);
        addHandlerDelegate = System::Delegate::CreateDelegate5(addHandlerType, method);
        adapterFrame = cli::typeof<System::Type>::info->GetMethod2(frameName, (BindingFlags)40L);
        adapterFrame = adapterFrame->MakeGenericMethod_6fb56e5d44bf2eff(typeVector);
        return cli::cast<AddEventAdapter*>(System::Delegate::CreateDelegate(cli::typeof<System::Type>::info, addHandlerDelegate, adapterFrame, true));
    }
    
    bool EventInfo::op_Equality2(EventInfo* left, EventInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool EventInfo::op_Inequality2(EventInfo* left, EventInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    System::Type* EventInfo::get_EventHandlerType_814bf5fc85dc0978() {
        cli::array<ParameterInfo*> *p;
        MethodInfo *add = GetAddMethod_e6ed2f5f0e24f59f(true);
        p = add->GetParameters_9d17bcb549474c9();
        if((p->get_Length() > 0)) 
        {
            System::Type *t = p->at(0)->get_ParameterType_97c5fa09a0b988d();
            return t;
        }
         else 
        {
            return nullptr;
        }
    }
    
    bool EventInfo::get_IsMulticast_acc4249946776471() {
        return true;
    }
    
    bool EventInfo::get_IsSpecialName() {
        return ((int32_t)(((int32_t)(this->get_Attributes_3412d62533ff880()) & 512)) != 0);
    }
    
    MemberTypes EventInfo::get_MemberType_cd521d320810c98f() {
        return MemberTypes::Event;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ExceptionHandlingClause::constructor() {
    }
    
    System::String* ExceptionHandlingClause::ToString_1636a0751cb9ac11() {
        System::String *ret = System::String::Format5(_T("Flags={0}, TryOffset={1}, TryLength={2}, HandlerOffset={3}, HandlerLength={4}"), (new cli::array<System::Object*>({cli::box(this->flags), cli::box(this->try_offset), cli::box(this->try_length), cli::box(this->handler_offset), cli::box(this->handler_length)})));
        if(System::Type::op_Inequality2(this->catch_type, nullptr)) 
        {
            ret = System::String::Format3(_T("{0}, CatchType={1}"), ret, this->catch_type);
        }
        if(((int32_t)(this->flags) ==  1)) 
        {
            ret = System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("{0}, FilterOffset={1}"), (new cli::array<System::Object*>({ret, cli::box(this->filter_offset)})));
        }
        return ret;
    }
    
    System::Type* ExceptionHandlingClause::get_CatchType_906b541dc686e788() {
        return this->catch_type;
    }
    
    int32_t ExceptionHandlingClause::get_FilterOffset_8e51714bf07ed863() {
        return this->filter_offset;
    }
    
    ExceptionHandlingClauseOptions ExceptionHandlingClause::get_Flags_e2fccf53c41ba67() {
        return this->flags;
    }
    
    int32_t ExceptionHandlingClause::get_HandlerLength_8ba710d232bc6b57() {
        return this->handler_length;
    }
    
    int32_t ExceptionHandlingClause::get_HandlerOffset_706653c7da65b0c4() {
        return this->handler_offset;
    }
    
    int32_t ExceptionHandlingClause::get_TryLength_a9b9254baf1d581b() {
        return this->try_length;
    }
    
    int32_t ExceptionHandlingClause::get_TryOffset_218c27aee658b662() {
        return this->try_offset;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void FieldInfo::constructor() {
    }
    
    void FieldInfo::SetValue2(System::Object* obj, System::Object* value) {
        SetValue_b73df766c23f1507(obj, value, BindingFlags::Default2, nullptr, nullptr);
    }
    
    FieldInfo* FieldInfo::internal_from_handle_type(void* field_handle, void* type_handle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    FieldInfo* FieldInfo::GetFieldFromHandle(System::RuntimeFieldHandle handle) {
        if(::System::IntPtr::op_Equality(handle->get_Value(), (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The handle is invalid."));
        }
        return internal_from_handle_type(handle->get_Value(), (*::System::IntPtr::Zero));
    }
    
    FieldInfo* FieldInfo::GetFieldFromHandle2(System::RuntimeFieldHandle handle, System::RuntimeTypeHandle declaringType) {
        if(::System::IntPtr::op_Equality(handle->get_Value(), (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The handle is invalid."));
        }
        FieldInfo *fi = internal_from_handle_type(handle->get_Value(), declaringType->get_Value());
        if(op_Equality2(fi, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The field handle and the type handle are incompatible."));
        }
        return fi;
    }
    
    int32_t FieldInfo::GetFieldOffset_309c846c3e72bf1() {
        throw cli::gcnew<System::SystemException>(_T("This method should not be called"));
    }
    
    System::Object* FieldInfo::GetValueDirect_fe94b812363b7da5(System::TypedReference obj) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldInfo::SetValueDirect_6c2dbfe9e649b416(System::TypedReference obj, System::Object* value) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    Emit::UnmanagedMarshal* FieldInfo::GetUnmanagedMarshal() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Object*>* FieldInfo::GetPseudoCustomAttributes() {
        int32_t count = 0;
        if(this->get_IsNotSerialized()) 
        {
            count++;
        }
        if(this->get_DeclaringType_6121cd6a84393166()->get_IsExplicitLayout()) 
        {
            count++;
        }
        Emit::UnmanagedMarshal *marshalAs = this->get_UMarshal_dd8c1dc6c2728d2();
        if((marshalAs != nullptr)) 
        {
            count++;
        }
        if((count ==  0)) 
        {
            return nullptr;
        }
        cli::array<System::Object*> *attrs = (new cli::array<System::Object*>(count));
        count = 0;
        if(this->get_IsNotSerialized()) 
        {
            attrs->at(count++) = cli::gcnew<System::NonSerializedAttribute>();
        }
        if(this->get_DeclaringType_6121cd6a84393166()->get_IsExplicitLayout()) 
        {
            attrs->at(count++) = cli::gcnew<System::Runtime::InteropServices::FieldOffsetAttribute>(GetFieldOffset_309c846c3e72bf1());
        }
        if((marshalAs != nullptr)) 
        {
            attrs->at(count++) = marshalAs->ToMarshalAsAttribute();
        }
        return attrs;
    }
    
    cli::array<System::Type*>* FieldInfo::GetTypeModifiers(bool optional) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Type*>* FieldInfo::GetOptionalCustomModifiers_f176d0d77551c108() {
        cli::array<System::Type*> *types = GetTypeModifiers(true);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    cli::array<System::Type*>* FieldInfo::GetRequiredCustomModifiers_66f99b4733e13865() {
        cli::array<System::Type*> *types = GetTypeModifiers(false);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    System::Object* FieldInfo::GetRawConstantValue_6b30cc96112d2961() {
        throw cli::gcnew<System::NotSupportedException>(_T("This non-CLS method is not implemented."));
    }
    
    bool FieldInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t FieldInfo::GetHashCode_6648aef0f235ee6c() {
        return MemberInfo::GetHashCode_6648aef0f235ee6c();
    }
    
    void FieldInfo::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldInfo::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldInfo::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldInfo::Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool FieldInfo::op_Equality2(FieldInfo* left, FieldInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool FieldInfo::op_Inequality2(FieldInfo* left, FieldInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    MemberTypes FieldInfo::get_MemberType_cd521d320810c98f() {
        return MemberTypes::Field;
    }
    
    bool FieldInfo::get_IsLiteral() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 64)) != 0);
    }
    
    bool FieldInfo::get_IsStatic() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 16)) != 0);
    }
    
    bool FieldInfo::get_IsInitOnly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 32)) != 0);
    }
    
    bool FieldInfo::get_IsPublic() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  6);
    }
    
    bool FieldInfo::get_IsPrivate() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  1);
    }
    
    bool FieldInfo::get_IsFamily() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  4);
    }
    
    bool FieldInfo::get_IsAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  3);
    }
    
    bool FieldInfo::get_IsFamilyAndAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  2);
    }
    
    bool FieldInfo::get_IsFamilyOrAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 7)) ==  5);
    }
    
    bool FieldInfo::get_IsPinvokeImpl() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 8192)) ==  8192);
    }
    
    bool FieldInfo::get_IsSpecialName() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 512)) ==  512);
    }
    
    bool FieldInfo::get_IsNotSerialized() {
        return ((int32_t)(((int32_t)(this->get_Attributes_ecc2fe2071b9c047()) & 128)) ==  128);
    }
    
    Emit::UnmanagedMarshal* FieldInfo::get_UMarshal_dd8c1dc6c2728d2() {
        return GetUnmanagedMarshal();
    }
    
    bool FieldInfo::get_IsSecurityCritical_d5bc9148633db2f2() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool FieldInfo::get_IsSecuritySafeCritical_ad2590022e00bce() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool FieldInfo::get_IsSecurityTransparent_33c3723407cb30a9() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void InvalidFilterCriteriaException::constructor() {
    }
    
    void InvalidFilterCriteriaException::constructor(System::String* message) {
    }
    
    void InvalidFilterCriteriaException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void InvalidFilterCriteriaException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void LocalVariableInfo::constructor() {
    }
    
    System::String* LocalVariableInfo::ToString_1636a0751cb9ac11() {
        if(this->is_pinned) 
        {
            return System::String::Format3(_T("{0} ({1}) (pinned)"), this->type, cli::box(this->position));
        }
         else 
        {
            return System::String::Format3(_T("{0} ({1})"), this->type, cli::box(this->position));
        }
    }
    
    bool LocalVariableInfo::get_IsPinned_494a31d10daaf415() {
        return this->is_pinned;
    }
    
    int32_t LocalVariableInfo::get_LocalIndex_5862e4748cbc9231() {
        return (int32_t)(this->position);
    }
    
    System::Type* LocalVariableInfo::get_LocalType_6f444539e4836b2c() {
        return this->type;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ManifestResourceInfo::constructor() {
    }
    
    void ManifestResourceInfo::constructor(Assembly* containingAssembly, System::String* containingFileName, ResourceLocation resourceLocation) {
        this->_assembly = containingAssembly;
        this->_filename = containingFileName;
        this->_location = resourceLocation;
    }
    
    System::String* ManifestResourceInfo::get_FileName_7c119b8b7cfba9b7() {
        return this->_filename;
    }
    
    Assembly* ManifestResourceInfo::get_ReferencedAssembly_2b9a0b794797dde5() {
        return this->_assembly;
    }
    
    ResourceLocation ManifestResourceInfo::get_ResourceLocation_4683f601004b7d5c() {
        return this->_location;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MemberInfo::constructor() {
    }
    
    bool MemberInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t MemberInfo::GetHashCode_6648aef0f235ee6c() {
        return System::Object::GetHashCode_6648aef0f235ee6c();
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MemberInfo::GetCustomAttributesData_8a5353617f57fb2() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MemberInfo::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MemberInfo::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MemberInfo::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MemberInfo::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MemberInfo::op_Equality(MemberInfo* left, MemberInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool MemberInfo::op_Inequality(MemberInfo* left, MemberInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    Module* MemberInfo::get_Module_ea7d65dc88202263() {
        return this->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263();
    }
    
    int32_t MemberInfo::get_MetadataToken_85fbeea46e971f25() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MemberInfoSerializationHolder::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx) {
        System::String *assemblyName;
        System::String *typeName;
        assemblyName = info->GetString(_T("AssemblyName"));
        typeName = info->GetString(_T("ClassName"));
        this->_memberName = info->GetString(_T("Name"));
        this->_memberSignature = info->GetString(_T("Signature"));
        this->_memberType = (MemberTypes)(info->GetInt32(_T("MemberType")));
        try {
            this->_genericArguments = nullptr;
        }
        catch(System::Runtime::Serialization::SerializationException*) {
        }
        Assembly *asm_ = Assembly::Load(assemblyName);
        this->_reflectedType = asm_->GetType_30e9b2dcc4956479(typeName, true, true);
    }
    
    void MemberInfoSerializationHolder::Serialize(System::Runtime::Serialization::SerializationInfo* info, System::String* name, System::Type* klass, System::String* signature, MemberTypes type) {
        Serialize2(info, name, klass, signature, type, nullptr);
    }
    
    void MemberInfoSerializationHolder::Serialize2(System::Runtime::Serialization::SerializationInfo* info, System::String* name, System::Type* klass, System::String* signature, MemberTypes type, cli::array<System::Type*>* genericArguments) {
        info->SetType(cli::typeof<System::Type>::info);
        info->AddValue(_T("AssemblyName"), klass->get_Module_ea7d65dc88202263()->get_Assembly_dbea84123403c0aa()->get_FullName_abd52da7f47cce07(), cli::typeof<System::Type>::info);
        info->AddValue(_T("ClassName"), klass->get_FullName_7e8fa72ba225e1a4(), cli::typeof<System::Type>::info);
        info->AddValue(_T("Name"), name, cli::typeof<System::Type>::info);
        info->AddValue(_T("Signature"), signature, cli::typeof<System::Type>::info);
        info->AddValue4(_T("MemberType"), (int32_t)(type));
        info->AddValue(_T("GenericArguments"), genericArguments, cli::typeof<System::Type>::info);
    }
    
    void MemberInfoSerializationHolder::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Object* MemberInfoSerializationHolder::GetRealObject(System::Runtime::Serialization::StreamingContext context) {
        switch(this->_memberType) {
            case MemberTypes::Constructor: case_1204: {
                cli::array<ConstructorInfo*> *ctors;
                ctors = this->_reflectedType->GetConstructors_736b6e990b94b352((BindingFlags)60L);
                for(int32_t i = 0; (i < ctors->get_Length()); i++) {
                    if(ctors->at(i)->ToString_1636a0751cb9ac11()->Equals5(this->_memberSignature)) 
                    {
                        return ctors->at(i);
                    }
                }
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Could not find constructor \'{0}\' in type \'{1}\'"), this->_memberSignature, this->_reflectedType));
            }
            case MemberTypes::Method: case_1205: {
                cli::array<MethodInfo*> *methods;
                methods = this->_reflectedType->GetMethods_c5b4e5d4877e6672((BindingFlags)60L);
                for(int32_t i = 0; (i < methods->get_Length()); i++) {
                    if(methods->at(i)->ToString_1636a0751cb9ac11()->Equals5(this->_memberSignature)) 
                    {
                        return methods->at(i);
                    }
                     else 
                    {
                        if((((this->_genericArguments != nullptr) && methods->at(i)->get_IsGenericMethod_7e509e51546ea990()) && (methods->at(i)->GetGenericArguments_77cf5f406b341958()->get_Length() ==  this->_genericArguments->get_Length()))) 
                        {
                            MethodInfo *mi = methods->at(i)->MakeGenericMethod_6fb56e5d44bf2eff(this->_genericArguments);
                            if(System::String::op_Equality(mi->ToString_1636a0751cb9ac11(), this->_memberSignature)) 
                            {
                                return mi;
                            }
                        }
                    }
                }
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Could not find method \'{0}\' in type \'{1}\'"), this->_memberSignature, this->_reflectedType));
            }
            case MemberTypes::Field: case_1206: {
                FieldInfo *fi = this->_reflectedType->GetField_fb08cba9d1a4bc84(this->_memberName, (BindingFlags)60L);
                if(FieldInfo::op_Inequality2(fi, nullptr)) 
                {
                    return fi;
                }
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Could not find field \'{0}\' in type \'{1}\'"), this->_memberName, this->_reflectedType));
            }
            case MemberTypes::Property: case_1207: {
                PropertyInfo *pi = this->_reflectedType->GetProperty2(this->_memberName, (BindingFlags)60L);
                if(PropertyInfo::op_Inequality2(pi, nullptr)) 
                {
                    return pi;
                }
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Could not find property \'{0}\' in type \'{1}\'"), this->_memberName, this->_reflectedType));
            }
            case MemberTypes::Event: case_1208: {
                EventInfo *ei = this->_reflectedType->GetEvent_7f053fa54114e387(this->_memberName, (BindingFlags)60L);
                if(EventInfo::op_Inequality2(ei, nullptr)) 
                {
                    return ei;
                }
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Could not find event \'{0}\' in type \'{1}\'"), this->_memberName, this->_reflectedType));
            }
            default: case_1209: {
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format2(_T("Unhandled MemberType {0}"), cli::box(this->_memberType)));
            }
        }
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MethodBase::constructor() {
    }
    
    MethodBase* MethodBase::GetCurrentMethod() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodBase* MethodBase::GetMethodFromHandleNoGenericCheck(System::RuntimeMethodHandle handle) {
        return GetMethodFromIntPtr(handle->get_Value(), (*::System::IntPtr::Zero));
    }
    
    MethodBase* MethodBase::GetMethodFromIntPtr(void* handle, void* declaringType) {
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The handle is invalid."));
        }
        MethodBase *res = GetMethodFromHandleInternalType(handle, declaringType);
        if(op_Equality2(res, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The handle is invalid."));
        }
        return res;
    }
    
    MethodBase* MethodBase::GetMethodFromHandle(System::RuntimeMethodHandle handle) {
        MethodBase *res = GetMethodFromIntPtr(handle->get_Value(), (*::System::IntPtr::Zero));
        System::Type *t = res->get_DeclaringType_6121cd6a84393166();
        if((t->get_IsGenericType_4db8ddd5b97f3c14() || t->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Cannot resolve method because it\'s declared in a generic class."));
        }
        return res;
    }
    
    MethodBase* MethodBase::GetMethodFromHandleInternalType(void* method_handle, void* type_handle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodBase* MethodBase::GetMethodFromHandle2(System::RuntimeMethodHandle handle, System::RuntimeTypeHandle declaringType) {
        return GetMethodFromIntPtr(handle->get_Value(), declaringType->get_Value());
    }
    
    int32_t MethodBase::GetParameterCount_ac86b3a4965d967a() {
        throw cli::gcnew<System::NotImplementedException>(_T("must be implemented"));
    }
    
    System::Type* MethodBase::GetParameterType_f80ea4ad68a899fb(int32_t pos) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MethodBase::Invoke2(System::Object* obj, cli::array<System::Object*>* parameters) {
        return Invoke_ba5f4e14507fdb95(obj, BindingFlags::Default2, nullptr, parameters, nullptr);
    }
    
    int32_t MethodBase::get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc) {
        if(cli::is<Emit::MethodBuilder>(this)) 
        {
            Emit::MethodBuilder *mb = cli::cast<Emit::MethodBuilder*>(this);
            return mb->get_next_table_index_635aee4f976b5bec(obj, table, inc);
        }
        if(cli::is<Emit::ConstructorBuilder>(this)) 
        {
            Emit::ConstructorBuilder *mb = cli::cast<Emit::ConstructorBuilder*>(this);
            return mb->get_next_table_index_635aee4f976b5bec(obj, table, inc);
        }
        throw cli::gcnew<System::Exception>(_T("Method is not a builder method"));
    }
    
    cli::array<System::Type*>* MethodBase::GetGenericArguments_77cf5f406b341958() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    MethodBody* MethodBase::GetMethodBodyInternal(void* handle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodBody* MethodBase::GetMethodBody(void* handle) {
        return GetMethodBodyInternal(handle);
    }
    
    MethodBody* MethodBase::GetMethodBody_3bb8bd5a6a55236() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MethodBase::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t MethodBase::GetHashCode_6648aef0f235ee6c() {
        return MemberInfo::GetHashCode_6648aef0f235ee6c();
    }
    
    void MethodBase::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBase::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBase::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBase::Invoke4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MethodBase::op_Equality2(MethodBase* left, MethodBase* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool MethodBase::op_Inequality2(MethodBase* left, MethodBase* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    CallingConventions MethodBase::get_CallingConvention_309cf574b58a053a() {
        return CallingConventions::Standard;
    }
    
    bool MethodBase::get_IsPublic() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  6);
    }
    
    bool MethodBase::get_IsPrivate() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  1);
    }
    
    bool MethodBase::get_IsFamily() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  4);
    }
    
    bool MethodBase::get_IsAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  3);
    }
    
    bool MethodBase::get_IsFamilyAndAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  2);
    }
    
    bool MethodBase::get_IsFamilyOrAssembly() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 7)) ==  5);
    }
    
    bool MethodBase::get_IsStatic() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 16)) != 0);
    }
    
    bool MethodBase::get_IsFinal() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 32)) != 0);
    }
    
    bool MethodBase::get_IsVirtual() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 64)) != 0);
    }
    
    bool MethodBase::get_IsHideBySig() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 128)) != 0);
    }
    
    bool MethodBase::get_IsAbstract() {
        return ((int32_t)(((int32_t)(this->get_Attributes_b3976e6a55c088be()) & 1024)) != 0);
    }
    
    bool MethodBase::get_IsSpecialName() {
        int32_t attr = (int32_t)(this->get_Attributes_b3976e6a55c088be());
        return ((attr & 2048) != 0);
    }
    
    bool MethodBase::get_IsConstructor() {
        int32_t attr = (int32_t)(this->get_Attributes_b3976e6a55c088be());
        return (((attr & 4096) != 0) && System::String::op_Equality(this->get_Name_50fad5fa936c3ae2(), _T(".ctor")));
    }
    
    bool MethodBase::get_ContainsGenericParameters_113614fa92731376() {
        return false;
    }
    
    bool MethodBase::get_IsGenericMethodDefinition_cce889be2a806b0f() {
        return false;
    }
    
    bool MethodBase::get_IsGenericMethod_7e509e51546ea990() {
        return false;
    }
    
    bool MethodBase::get_IsSecurityCritical_f808650a62bc3cba() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MethodBase::get_IsSecuritySafeCritical_e2b44dfd7778435c() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MethodBase::get_IsSecurityTransparent_6be23aacb2e166e7() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MethodBody::constructor() {
    }
    
    cli::array<unsigned char>* MethodBody::GetILAsByteArray_faacc6fe29adce28() {
        return this->il;
    }
    
    System::Collections::Generic::IList2<ExceptionHandlingClause*>* MethodBody::get_ExceptionHandlingClauses_b568c3bb39d3c6b2() {
        return System::Array::template AsReadOnly_1<ExceptionHandlingClause*>(this->clauses);
    }
    
    System::Collections::Generic::IList2<LocalVariableInfo*>* MethodBody::get_LocalVariables_f574283c2c35a6fa() {
        return System::Array::template AsReadOnly_1<LocalVariableInfo*>(this->locals);
    }
    
    bool MethodBody::get_InitLocals_b7e7a9ce43b221d() {
        return this->init_locals;
    }
    
    int32_t MethodBody::get_LocalSignatureMetadataToken_5f2668432362f162() {
        return this->sig_token;
    }
    
    int32_t MethodBody::get_MaxStackSize_dcf5f95899d588a4() {
        return this->max_stack;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MethodInfo::constructor() {
    }
    
    MethodInfo* MethodInfo::GetBaseMethod_15ff4b8595f9b09() {
        return this;
    }
    
    void MethodInfo::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodInfo::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodInfo::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodInfo::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodInfo* MethodInfo::GetGenericMethodDefinition_298ff0fcf1d6e37f() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    MethodInfo* MethodInfo::MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* typeArguments) {
        throw cli::gcnew<System::NotSupportedException>(this->GetType()->ToString_1636a0751cb9ac11());
    }
    
    cli::array<System::Type*>* MethodInfo::GetGenericArguments_77cf5f406b341958() {
        return System::Type::EmptyTypes;
    }
    
    bool MethodInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t MethodInfo::GetHashCode_6648aef0f235ee6c() {
        return MethodBase::GetHashCode_6648aef0f235ee6c();
    }
    
    bool MethodInfo::op_Equality(MethodInfo* left, MethodInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool MethodInfo::op_Inequality(MethodInfo* left, MethodInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    MemberTypes MethodInfo::get_MemberType_cd521d320810c98f() {
        return MemberTypes::Method;
    }
    
    System::Type* MethodInfo::get_ReturnType_832339e848f448fe() {
        return nullptr;
    }
    
    ParameterInfo* MethodInfo::get_ReturnParameter_d8c8b72c8a40767c() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    Missing*  Missing::Value;
    
    Missing::Missing()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void Missing::constructor() {
    }
    
    void Missing::static_constructor() {
    }
    
    void Missing::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Reflection {
    
    TypeFilter*  Module::FilterTypeName;
    TypeFilter*  Module::FilterTypeNameIgnoreCase;
    
    Module::Module()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void Module::static_constructor() {
        FilterTypeName = cli::bind(&Module::filter_by_type_name);
        FilterTypeNameIgnoreCase = cli::bind(&Module::filter_by_type_name_ignore_case);
    }
    
    void Module::constructor() {
    }
    
    int32_t Module::get_MetadataToken(Module* module) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Module::GetMDStreamVersion(void* module_handle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    FieldInfo* Module::GetField(System::String* name) {
        return GetField_41336984e4f8fc62(name, (BindingFlags)28L);
    }
    
    cli::array<FieldInfo*>* Module::GetFields() {
        return GetFields_676a5dd50d936280((BindingFlags)28L);
    }
    
    MethodInfo* Module::GetMethod(System::String* name) {
        return GetMethodImpl_6896a740547de21d(name, (BindingFlags)28L, nullptr, CallingConventions::Any, nullptr, nullptr);
    }
    
    MethodInfo* Module::GetMethod2(System::String* name, cli::array<System::Type*>* types) {
        if((types ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("types"));
        }
        return GetMethodImpl_6896a740547de21d(name, (BindingFlags)28L, nullptr, CallingConventions::Any, types, nullptr);
    }
    
    MethodInfo* Module::GetMethod3(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        if((types ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("types"));
        }
        return GetMethodImpl_6896a740547de21d(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<MethodInfo*>* Module::GetMethods() {
        return GetMethods_df7587a505f60ad1((BindingFlags)28L);
    }
    
    void Module::GetObjectData_e90fa704d41e9612(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        if((info ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("info"));
        }
        System::UnitySerializationHolder::GetModuleData(this, info, context);
    }
    
    System::Type* Module::GetType_a66b4e15451215(System::String* className) {
        return GetType_380f735f026ced66(className, false, false);
    }
    
    System::Type* Module::GetType_2d1dcb4032b0487e(System::String* className, bool ignoreCase) {
        return GetType_380f735f026ced66(className, false, ignoreCase);
    }
    
    cli::array<System::Type*>* Module::InternalGetTypes() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Module::ToString_1636a0751cb9ac11() {
        return this->name;
    }
    
    System::Exception* Module::resolve_token_exception(int32_t metadataToken, ResolveTokenError error, System::String* tokenType) {
        if(((int32_t)(error) ==  0)) 
        {
            return cli::gcnew<System::ArgumentOutOfRangeException>(_T("metadataToken"), System::String::Format3(_T("Token 0x{0:x} is not valid in the scope of module {1}"), cli::box(metadataToken), this->name));
        }
         else 
        {
            return cli::gcnew<System::ArgumentException>(System::String::Format4(_T("Token 0x{0:x} is not a valid {1} token in the scope of module {2}"), cli::box(metadataToken), tokenType, this->name), _T("metadataToken"));
        }
    }
    
    cli::array<void*>* Module::ptrs_from_types(cli::array<System::Type*>* types) {
        if((types ==  nullptr)) 
        {
            return nullptr;
        }
         else 
        {
            cli::array<void*> *res = (new cli::array<void*>(types->get_Length()));
            for(int32_t i = 0; (i < types->get_Length()); ++i){
                if(System::Type::op_Equality2(types->at(i), nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentException>();
                }
                res->at(i) = types->at(i)->get_TypeHandle_a14995fa9102936b()->get_Value();
            }
            return res;
        }
    }
    
    FieldInfo* Module::ResolveField(int32_t metadataToken) {
        return ResolveField_8b875538304b540d(metadataToken, nullptr, nullptr);
    }
    
    MemberInfo* Module::ResolveMember(int32_t metadataToken) {
        return ResolveMember_643acbf09c998474(metadataToken, nullptr, nullptr);
    }
    
    MethodBase* Module::ResolveMethod(int32_t metadataToken) {
        return ResolveMethod_b0428e4e3220e0df(metadataToken, nullptr, nullptr);
    }
    
    System::Type* Module::ResolveType(int32_t metadataToken) {
        return ResolveType_e1d373628d9d202a(metadataToken, nullptr, nullptr);
    }
    
    System::Type* Module::MonoDebugger_ResolveType(Module* module, int32_t token) {
        ResolveTokenError error;
        void *handle = ResolveTypeToken(module->_impl, token, nullptr, nullptr, error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            return nullptr;
        }
         else 
        {
            return System::Type::GetTypeFromHandle(cli::ctor<System::RuntimeTypeHandle>(handle));
        }
    }
    
    System::Guid Module::Mono_GetGuid(Module* module) {
        return module->GetModuleVersionId_c8f7394bf9778713();
    }
    
    System::Guid Module::GetModuleVersionId_c8f7394bf9778713() {
        return cli::ctor<System::Guid>(GetGuidInternal());
    }
    
    bool Module::filter_by_type_name(System::Type* m, System::Object* filterCriteria) {
        System::String *s = cli::cast<System::String*>(filterCriteria);
        if(s->EndsWith(_T("*"))) 
        {
            return m->get_Name_50fad5fa936c3ae2()->StartsWith(s->Substring2(0, (s->get_Length() - 1)));
        }
         else 
        {
            return System::String::op_Equality(m->get_Name_50fad5fa936c3ae2(), s);
        }
    }
    
    bool Module::filter_by_type_name_ignore_case(System::Type* m, System::Object* filterCriteria) {
        System::String *s = cli::cast<System::String*>(filterCriteria);
        if(s->EndsWith(_T("*"))) 
        {
            return m->get_Name_50fad5fa936c3ae2()->ToLower()->StartsWith(s->Substring2(0, (s->get_Length() - 1))->ToLower());
        }
         else 
        {
            return (System::String::Compare2(m->get_Name_50fad5fa936c3ae2(), s, true) ==  0);
        }
    }
    
    void* Module::GetHINSTANCE() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Module::GetGuidInternal() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* Module::GetGlobalType() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Module::ResolveTypeToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Module::ResolveMethodToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Module::ResolveFieldToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Module::ResolveStringToken(void* module, int32_t token, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MemberInfo* Module::ResolveMemberToken(void* module, int32_t token, cli::array<void*>* type_args, cli::array<void*>* method_args, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<unsigned char>* Module::ResolveSignature(void* module, int32_t metadataToken, ResolveTokenError error) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Module::GetPEKind(void* module, PortableExecutableKinds peKind, ImageFileMachine machine) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Module::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Module::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Module::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Module::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool Module::Equals_ed975d2f4a7d193e(System::Object* o) {
        return (o ==  cli::cast<System::Object*>(this));
    }
    
    int32_t Module::GetHashCode_6648aef0f235ee6c() {
        return System::Object::GetHashCode_6648aef0f235ee6c();
    }
    
    System::Exception* Module::CreateNIE() {
        return cli::gcnew<System::NotImplementedException>(_T("Derived classes must implement it"));
    }
    
    bool Module::IsResource_27dec1ebb40006c6() {
        throw CreateNIE();
    }
    
    cli::array<System::Type*>* Module::FindTypes_fd05c708caa859b8(TypeFilter* filter, System::Object* filterCriteria) {
        throw CreateNIE();
    }
    
    cli::array<System::Object*>* Module::GetCustomAttributes_60f12c5b82d89770(bool inherit) {
        throw CreateNIE();
    }
    
    cli::array<System::Object*>* Module::GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit) {
        throw CreateNIE();
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* Module::GetCustomAttributesData_efa981070afbf622() {
        throw CreateNIE();
    }
    
    FieldInfo* Module::GetField_41336984e4f8fc62(System::String* name, BindingFlags bindingAttr) {
        throw CreateNIE();
    }
    
    cli::array<FieldInfo*>* Module::GetFields_676a5dd50d936280(BindingFlags bindingFlags) {
        throw CreateNIE();
    }
    
    MethodInfo* Module::GetMethodImpl_6896a740547de21d(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        throw CreateNIE();
    }
    
    cli::array<MethodInfo*>* Module::GetMethods_df7587a505f60ad1(BindingFlags bindingFlags) {
        throw CreateNIE();
    }
    
    void Module::GetPEKind_7f6df4eff35de4ca(PortableExecutableKinds peKind, ImageFileMachine machine) {
        throw CreateNIE();
    }
    
    System::Type* Module::GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase) {
        throw CreateNIE();
    }
    
    bool Module::IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit) {
        throw CreateNIE();
    }
    
    FieldInfo* Module::ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        throw CreateNIE();
    }
    
    MemberInfo* Module::ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        throw CreateNIE();
    }
    
    MethodBase* Module::ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        throw CreateNIE();
    }
    
    cli::array<unsigned char>* Module::ResolveSignature_a46b44b280a2cd11(int32_t metadataToken) {
        throw CreateNIE();
    }
    
    System::String* Module::ResolveString_f0f214b35440d5e7(int32_t metadataToken) {
        throw CreateNIE();
    }
    
    System::Type* Module::ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        throw CreateNIE();
    }
    
    System::Security::Cryptography::X509Certificates::X509Certificate2* Module::GetSignerCertificate_9251eb29d4d8fa27() {
        throw CreateNIE();
    }
    
    cli::array<System::Type*>* Module::GetTypes_a0a49ca31fb27210() {
        throw CreateNIE();
    }
    
    bool Module::op_Equality(Module* left, Module* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool Module::op_Inequality(Module* left, Module* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    System::ModuleHandle Module::get_ModuleHandle() {
        return cli::ctor<System::ModuleHandle>(this->_impl);
    }
    
    System::Guid Module::get_MvId() {
        return GetModuleVersionId_c8f7394bf9778713();
    }
    
    Assembly* Module::get_Assembly_dbea84123403c0aa() {
        throw CreateNIE();
    }
    
    System::String* Module::get_Name_51eff21286003cfa() {
        throw CreateNIE();
    }
    
    System::String* Module::get_ScopeName_da7d7aa6d0cd103f() {
        throw CreateNIE();
    }
    
    int32_t Module::get_MDStreamVersion_8976919ee80930d7() {
        throw CreateNIE();
    }
    
    System::Guid Module::get_ModuleVersionId_d7f4c95bdb0ad1b2() {
        throw CreateNIE();
    }
    
    System::String* Module::get_FullyQualifiedName_ae33b8f6fc78fb8f() {
        throw CreateNIE();
    }
    
    int32_t Module::get_MetadataToken_a9fc5f43a9908cd0() {
        throw CreateNIE();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoAssembly::constructor() {
    }
    
    System::Type* MonoAssembly::GetType_30e9b2dcc4956479(System::String* name, bool throwOnError, bool ignoreCase) {
        System::Type *res;
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(name);
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("name"), _T("Name cannot be empty"));
        }
        res = Assembly::InternalGetType(nullptr, name, throwOnError, ignoreCase);
        return res;
    }
    
    Module* MonoAssembly::GetModule_d3e09c815c6ebd46(System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Name can\'t be empty"));
        }
        cli::array<Module*> *modules = Assembly::GetModules_1ce70abfc6e0d050(true);
        for(auto tmp_255 : modules) {
            auto module = cli::cast<Module*>(tmp_255);
            {
                if(System::String::op_Equality(module->get_ScopeName_da7d7aa6d0cd103f(), name)) 
                {
                    return module;
                }
            }
        }
        return nullptr;
    }
    
    cli::array<AssemblyName*>* MonoAssembly::GetReferencedAssemblies_c967ce8a0efd4c58() {
        return Assembly::GetReferencedAssemblies(this);
    }
    
    cli::array<Module*>* MonoAssembly::GetModules_1ce70abfc6e0d050(bool getResourceModules) {
        cli::array<Module*> *modules = Assembly::GetModulesInternal_ea568dcc02539ffb();
        if(!(getResourceModules)) 
        {
            System::Collections::Generic::List<Module*> *result = cli::gcnew<System::Collections::Generic::List<Module*>>(modules->get_Length());
            for(auto tmp_256 : modules) {
                auto m = cli::cast<Module*>(tmp_256);
                if(!(m->IsResource_27dec1ebb40006c6())) 
                {
                    result->Add(m);
                }
            }
            return result->ToArray();
        }
         else 
        {
            return modules;
        }
    }
    
    cli::array<Module*>* MonoAssembly::GetLoadedModules_db6b585bebc1ac2e(bool getResourceModules) {
        return Assembly::GetModules_1ce70abfc6e0d050(getResourceModules);
    }
    
    Assembly* MonoAssembly::GetSatelliteAssembly_995bfc41ec1f61b8(System::Globalization::CultureInfo* culture) {
        return Assembly::GetSatelliteAssembly(culture, nullptr, true);
    }
    
    Assembly* MonoAssembly::GetSatelliteAssembly_22d0b12d929a333c(System::Globalization::CultureInfo* culture, System::Version* version) {
        return Assembly::GetSatelliteAssembly(culture, version, true);
    }
    
    Module* MonoAssembly::get_ManifestModule_238a73903fb58278() {
        return Assembly::GetManifestModule_e233b7576740b3d7();
    }
    
    bool MonoAssembly::get_GlobalAssemblyCache_db80d4f5ee2824e7() {
        return Assembly::get_global_assembly_cache();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoEvent::constructor() {
    }
    
    MethodInfo* MonoEvent::GetAddMethod_e6ed2f5f0e24f59f(bool nonPublic) {
        MonoEventInfo info = MonoEventInfo::GetEventInfo(this);
        if((nonPublic || (MethodInfo::op_Inequality(info->add_method, nullptr) && info->add_method->get_IsPublic()))) 
        {
            return info->add_method;
        }
        return nullptr;
    }
    
    MethodInfo* MonoEvent::GetRaiseMethod_da2f94f17ce18705(bool nonPublic) {
        MonoEventInfo info = MonoEventInfo::GetEventInfo(this);
        if((nonPublic || (MethodInfo::op_Inequality(info->raise_method, nullptr) && info->raise_method->get_IsPublic()))) 
        {
            return info->raise_method;
        }
        return nullptr;
    }
    
    MethodInfo* MonoEvent::GetRemoveMethod_2709ba07e73fded4(bool nonPublic) {
        MonoEventInfo info = MonoEventInfo::GetEventInfo(this);
        if((nonPublic || (MethodInfo::op_Inequality(info->remove_method, nullptr) && info->remove_method->get_IsPublic()))) 
        {
            return info->remove_method;
        }
        return nullptr;
    }
    
    cli::array<MethodInfo*>* MonoEvent::GetOtherMethods_cea105c0bef756da(bool nonPublic) {
        MonoEventInfo info = MonoEventInfo::GetEventInfo(this);
        if(nonPublic) 
        {
            return info->other_methods;
        }
        int32_t num_public = 0;
        for(auto tmp_257 : info->other_methods) {
            auto m = cli::cast<MethodInfo*>(tmp_257);
            {
                if(m->get_IsPublic()) 
                {
                    num_public++;
                }
            }
        }
        if((num_public ==  info->other_methods->get_Length())) 
        {
            return info->other_methods;
        }
        cli::array<MethodInfo*> *res = (new cli::array<MethodInfo*>(num_public));
        num_public = 0;
        for(auto tmp_258 : info->other_methods) {
            auto m = cli::cast<MethodInfo*>(tmp_258);
            {
                if(m->get_IsPublic()) 
                {
                    res->at(num_public++) = m;
                }
            }
        }
        return res;
    }
    
    System::String* MonoEvent::ToString_1636a0751cb9ac11() {
        return cli::concat(this->get_EventHandlerType_814bf5fc85dc0978(), _T(" "));
    }
    
    bool MonoEvent::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* MonoEvent::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoEvent::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    void MonoEvent::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        MemberInfoSerializationHolder::Serialize(info, this->get_Name_50fad5fa936c3ae2(), this->get_ReflectedType_bf4971c0f442b9dc(), System::Object::ToString_1636a0751cb9ac11(), MemberTypes::Event);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoEvent::GetCustomAttributesData_8a5353617f57fb2() {
        return CustomAttributeData::GetCustomAttributes2(this);
    }
    
    EventAttributes MonoEvent::get_Attributes_3412d62533ff880() {
        return MonoEventInfo::GetEventInfo(this)->attrs;
    }
    
    System::Type* MonoEvent::get_DeclaringType_6121cd6a84393166() {
        return MonoEventInfo::GetEventInfo(this)->declaring_type;
    }
    
    System::Type* MonoEvent::get_ReflectedType_bf4971c0f442b9dc() {
        return MonoEventInfo::GetEventInfo(this)->reflected_type;
    }
    
    System::String* MonoEvent::get_Name_50fad5fa936c3ae2() {
        return MonoEventInfo::GetEventInfo(this)->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoField::constructor() {
    }
    
    System::Type* MonoField::ResolveType() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* MonoField::GetParentType(bool declaring) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MonoField::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* MonoField::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoField::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    int32_t MonoField::GetFieldOffset_309c846c3e72bf1() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MonoField::GetValueInternal(System::Object* obj) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MonoField::GetValue_57ad13b528e8b8a5(System::Object* obj) {
        if(!(this->get_IsStatic())) 
        {
            if((obj ==  nullptr)) 
            {
                throw cli::gcnew<TargetException>(_T("Non-static field requires a target"));
            }
            if(!(this->get_DeclaringType_6121cd6a84393166()->IsAssignableFrom_e3aa32d778e63a90(obj->GetType()))) 
            {
                throw cli::gcnew<System::ArgumentException>(System::String::Format4(_T("Field {0} defined on type {1} is not a field on the target object which is of type {2}."), this->get_Name_50fad5fa936c3ae2(), this->get_DeclaringType_6121cd6a84393166(), obj->GetType()), _T("obj"));
            }
        }
        if(!(this->get_IsLiteral())) 
        {
            CheckGeneric();
        }
        return GetValueInternal(obj);
    }
    
    System::String* MonoField::ToString_1636a0751cb9ac11() {
        return System::String::Format3(_T("{0} {1}"), this->get_FieldType_1dab4079098d7fff(), this->name);
    }
    
    void MonoField::SetValueInternal(FieldInfo* fi, System::Object* obj, System::Object* value) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MonoField::SetValue_b73df766c23f1507(System::Object* obj, System::Object* val, BindingFlags invokeAttr, Binder* binder, System::Globalization::CultureInfo* culture) {
        if(!(this->get_IsStatic())) 
        {
            if((obj ==  nullptr)) 
            {
                throw cli::gcnew<TargetException>(_T("Non-static field requires a target"));
            }
            if(!(this->get_DeclaringType_6121cd6a84393166()->IsAssignableFrom_e3aa32d778e63a90(obj->GetType()))) 
            {
                throw cli::gcnew<System::ArgumentException>(System::String::Format4(_T("Field {0} defined on type {1} is not a field on the target object which is of type {2}."), this->get_Name_50fad5fa936c3ae2(), this->get_DeclaringType_6121cd6a84393166(), obj->GetType()), _T("obj"));
            }
        }
        if(this->get_IsLiteral()) 
        {
            throw cli::gcnew<System::FieldAccessException>(_T("Cannot set a constant field"));
        }
        if((binder ==  nullptr)) 
        {
            binder = Binder::get_DefaultBinder();
        }
        CheckGeneric();
        if((val != nullptr)) 
        {
            System::Object *newVal;
            newVal = binder->ChangeType_330506257d259909(val, this->get_FieldType_1dab4079098d7fff(), culture);
            if((newVal ==  nullptr)) 
            {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Object type "), val->GetType(), _T(" cannot be converted to target type: "), this->get_FieldType_1dab4079098d7fff()), _T("val"));
            }
            val = newVal;
        }
        SetValueInternal(this, obj, val);
    }
    
    MonoField* MonoField::Clone(System::String* newName) {
        MonoField *field = cli::gcnew<MonoField>();
        field->name = newName;
        field->type = this->type;
        field->attrs = this->attrs;
        field->klass = this->klass;
        field->fhandle = this->fhandle;
        return field;
    }
    
    void MonoField::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        MemberInfoSerializationHolder::Serialize(info, this->get_Name_50fad5fa936c3ae2(), this->get_ReflectedType_bf4971c0f442b9dc(), System::Object::ToString_1636a0751cb9ac11(), MemberTypes::Field);
    }
    
    System::Object* MonoField::GetRawConstantValue_6b30cc96112d2961() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoField::GetCustomAttributesData_8a5353617f57fb2() {
        return CustomAttributeData::GetCustomAttributes2(this);
    }
    
    void MonoField::CheckGeneric() {
        if(this->get_DeclaringType_6121cd6a84393166()->get_ContainsGenericParameters_19598881dd690ad3()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Late bound operations cannot be performed on fields with types for which Type.ContainsGenericParameters is true."));
        }
    }
    
    FieldAttributes MonoField::get_Attributes_ecc2fe2071b9c047() {
        return this->attrs;
    }
    
    System::RuntimeFieldHandle MonoField::get_FieldHandle_43fbd13b33ef15a8() {
        return this->fhandle;
    }
    
    System::Type* MonoField::get_FieldType_1dab4079098d7fff() {
        if(System::Type::op_Equality2(this->type, nullptr)) 
        {
            this->type = ResolveType();
        }
        return this->type;
    }
    
    System::Type* MonoField::get_ReflectedType_bf4971c0f442b9dc() {
        return GetParentType(false);
    }
    
    System::Type* MonoField::get_DeclaringType_6121cd6a84393166() {
        return GetParentType(true);
    }
    
    System::String* MonoField::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoGenericClass::constructor() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    void MonoGenericClass::constructor(System::Type* tb, cli::array<System::Type*>* args) {
        this->generic_type = tb;
        this->type_arguments = args;
        if((cli::is<Emit::TypeBuilder>(tb) && !(cli::as<Emit::TypeBuilder*>(tb)->get_is_created()))) 
        {
            register_with_runtime(this);
        }
    }
    
    System::Type* MonoGenericClass::InternalResolve_ba2e81f73f0d7994() {
        System::Type *gtd = this->generic_type->InternalResolve_ba2e81f73f0d7994();
        cli::array<System::Type*> *args = (new cli::array<System::Type*>(this->type_arguments->get_Length()));
        for(int32_t i = 0; (i < this->type_arguments->get_Length()); ++i) {
            args->at(i) = this->type_arguments->at(i)->InternalResolve_ba2e81f73f0d7994();
        }
        return gtd->MakeGenericType_da11ef776ac96678(args);
    }
    
    void MonoGenericClass::initialize(cli::array<MethodInfo*>* methods, cli::array<ConstructorInfo*>* ctors, cli::array<FieldInfo*>* fields, cli::array<PropertyInfo*>* properties, cli::array<EventInfo*>* events) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MonoGenericClass::register_with_runtime(System::Type* type) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<EventInfo*>* MonoGenericClass::GetEventsFromGTD(BindingFlags flags) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            return this->generic_type->GetEvents_a960b087e4d67be2(flags);
        }
        return tb->GetEvents_internal(flags);
    }
    
    cli::array<ConstructorInfo*>* MonoGenericClass::GetConstructorsFromGTD(BindingFlags flags) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            return this->generic_type->GetConstructors_736b6e990b94b352(flags);
        }
        return tb->GetConstructorsInternal(flags);
    }
    
    cli::array<FieldInfo*>* MonoGenericClass::GetFieldsFromGTD(BindingFlags bf) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            return this->generic_type->GetFields_369be5ac49d99f8(bf);
        }
        cli::array<FieldInfo*> *res = (new cli::array<FieldInfo*>(tb->num_fields));
        if((tb->num_fields > 0)) 
        {
            System::Array::Copy(tb->fields, res, tb->num_fields);
        }
        return res;
    }
    
    cli::array<MethodInfo*>* MonoGenericClass::GetMethodsFromGTDWithHint(BindingFlags hint) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            return this->generic_type->GetMethods_c5b4e5d4877e6672(hint);
        }
        if((tb->num_methods ==  0)) 
        {
            return (new cli::array<MethodInfo*>(0));
        }
        cli::array<MethodInfo*> *res = (new cli::array<MethodInfo*>(tb->num_methods));
        System::Array::Copy2(tb->methods, 0, res, 0, tb->num_methods);
        return res;
    }
    
    cli::array<ConstructorInfo*>* MonoGenericClass::GetConstructorsFromGTDWithHint(BindingFlags hint) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            return this->generic_type->GetConstructors_736b6e990b94b352(hint);
        }
        if((tb->ctors ==  nullptr)) 
        {
            return (new cli::array<ConstructorInfo*>(0));
        }
        cli::array<ConstructorInfo*> *res = (new cli::array<ConstructorInfo*>(tb->ctors->get_Length()));
        cli::import(tb->ctors)->CopyTo(res, 0);
        return res;
    }
    
    System::Type* MonoGenericClass::PeelType(System::Type* t) {
        if(t->get_HasElementType()) 
        {
            return PeelType(t->GetElementType_ab5070dbbfe66f5f());
        }
        if((t->get_IsGenericType_4db8ddd5b97f3c14() && !(t->get_IsGenericParameter_2a17c4bf67798b07()))) 
        {
            return t->GetGenericTypeDefinition_15f8fc7813e8e8bf();
        }
        return t;
    }
    
    cli::array<PropertyInfo*>* MonoGenericClass::GetPropertiesInternal(System::Type* type, BindingFlags bf) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(type);
        if(System::Type::op_Inequality2(tb, nullptr)) 
        {
            return tb->properties->CovariantCast<PropertyInfo*>();
        }
        return type->GetProperties_9fb6c40e3662fdd7(bf);
    }
    
    cli::array<System::Type*>* MonoGenericClass::GetInterfacesFromGTD() {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Inequality2(tb, nullptr)) 
        {
            return tb->interfaces;
        }
        return this->generic_type->GetInterfaces_52a89380e2c4a725();
    }
    
    void MonoGenericClass::initialize2() {
        if(this->initialized) 
        {
            return;
        }
        MonoGenericClass *parent = cli::as<MonoGenericClass*>(GetParentType());
        if(System::Type::op_Inequality2(parent, nullptr)) 
        {
            parent->initialize2();
        }
        cli::array<EventInfo*> *events = GetEventsFromGTD((BindingFlags)62L);
        this->event_count = events->get_Length();
        initialize(this->generic_type->GetMethods_c5b4e5d4877e6672((BindingFlags)62L), GetConstructorsFromGTD((BindingFlags)62L), this->generic_type->GetFields_369be5ac49d99f8((BindingFlags)62L), this->generic_type->GetProperties_9fb6c40e3662fdd7((BindingFlags)62L), events);
        this->initialized = true;
    }
    
    System::Type* MonoGenericClass::GetParentType() {
        return InflateType(this->generic_type->get_BaseType_6a0646ae880055f6());
    }
    
    System::Type* MonoGenericClass::InflateType(System::Type* type) {
        return InflateType3(type, this->type_arguments, nullptr);
    }
    
    System::Type* MonoGenericClass::InflateType2(System::Type* type, cli::array<System::Type*>* method_args) {
        return InflateType3(type, this->type_arguments, method_args);
    }
    
    System::Type* MonoGenericClass::InflateType3(System::Type* type, cli::array<System::Type*>* type_args, cli::array<System::Type*>* method_args) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            return nullptr;
        }
        if((!(type->get_IsGenericParameter_2a17c4bf67798b07()) && !(type->get_ContainsGenericParameters_19598881dd690ad3()))) 
        {
            return type;
        }
        if(type->get_IsGenericParameter_2a17c4bf67798b07()) 
        {
            if(MethodBase::op_Equality2(type->get_DeclaringMethod_6dc070d2040335e5(), nullptr)) 
            {
                return (type_args ==  nullptr) ? type : type_args->at(type->get_GenericParameterPosition_ae331bf96a7667b1());
            }
            return (method_args ==  nullptr) ? type : method_args->at(type->get_GenericParameterPosition_ae331bf96a7667b1());
        }
        if(type->get_IsPointer()) 
        {
            return InflateType3(type->GetElementType_ab5070dbbfe66f5f(), type_args, method_args)->MakePointerType_f23f3b9330ac63da();
        }
        if(type->get_IsByRef()) 
        {
            return InflateType3(type->GetElementType_ab5070dbbfe66f5f(), type_args, method_args)->MakeByRefType_fc54947a1bb074be();
        }
        if(type->get_IsArray()) 
        {
            if((type->GetArrayRank_fccf91da5e4acf4f() > 1)) 
            {
                return InflateType3(type->GetElementType_ab5070dbbfe66f5f(), type_args, method_args)->MakeArrayType_b5bc09824bbbb104(type->GetArrayRank_fccf91da5e4acf4f());
            }
            if(type->ToString_1636a0751cb9ac11()->EndsWith3(_T("[*]"), System::StringComparison::Ordinal)) 
            {
                return InflateType3(type->GetElementType_ab5070dbbfe66f5f(), type_args, method_args)->MakeArrayType_b5bc09824bbbb104(1);
            }
            return InflateType3(type->GetElementType_ab5070dbbfe66f5f(), type_args, method_args)->MakeArrayType_9ec2b26036f00b30();
        }
        cli::array<System::Type*> *args = type->GetGenericArguments_a7fb476275cfe9a3();
        for(int32_t i = 0; (i < args->get_Length()); ++i) {
            args->at(i) = InflateType3(args->at(i), type_args, method_args);
        }
        System::Type *gtd = type->get_IsGenericTypeDefinition_8008dd501dc43926() ? type : type->GetGenericTypeDefinition_15f8fc7813e8e8bf();
        return gtd->MakeGenericType_da11ef776ac96678(args);
    }
    
    cli::array<System::Type*>* MonoGenericClass::GetInterfacesInternal() {
        cli::array<System::Type*> *ifaces = GetInterfacesFromGTD();
        if((ifaces ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        cli::array<System::Type*> *res = (new cli::array<System::Type*>(ifaces->get_Length()));
        for(int32_t i = 0; (i < res->get_Length()); ++i) {
            res->at(i) = InflateType(ifaces->at(i));
        }
        return res;
    }
    
    cli::array<System::Type*>* MonoGenericClass::GetInterfaces_52a89380e2c4a725() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MonoGenericClass::IsValueTypeImpl_fe1651255927f3c6() {
        return this->generic_type->get_IsValueType();
    }
    
    MethodInfo* MonoGenericClass::GetMethod_c725b8f4a943d5c8(MethodInfo* fromNoninstanciated) {
        initialize2();
        if((this->methods ==  nullptr)) 
        {
            this->methods = cli::gcnew<System::Collections::Hashtable>();
        }
        if(!(this->methods->ContainsKey_5de2e202a0290d76(fromNoninstanciated))) 
        {
            this->methods->set_Item_84c7e24d9caa09(fromNoninstanciated, cli::gcnew<Emit::MethodOnTypeBuilderInst>(this, fromNoninstanciated));
        }
        return cli::cast<MethodInfo*>(this->methods->get_Item_d75c6e706b965758(fromNoninstanciated));
    }
    
    ConstructorInfo* MonoGenericClass::GetConstructor_1dd1da77cc4fe364(ConstructorInfo* fromNoninstanciated) {
        initialize2();
        if((this->ctors ==  nullptr)) 
        {
            this->ctors = cli::gcnew<System::Collections::Hashtable>();
        }
        if(!(this->ctors->ContainsKey_5de2e202a0290d76(fromNoninstanciated))) 
        {
            this->ctors->set_Item_84c7e24d9caa09(fromNoninstanciated, cli::gcnew<Emit::ConstructorOnTypeBuilderInst>(this, fromNoninstanciated));
        }
        return cli::cast<ConstructorInfo*>(this->ctors->get_Item_d75c6e706b965758(fromNoninstanciated));
    }
    
    FieldInfo* MonoGenericClass::GetField_4da1f61e7e2a6f8c(FieldInfo* fromNoninstanciated) {
        initialize2();
        if((this->fields ==  nullptr)) 
        {
            this->fields = cli::gcnew<System::Collections::Hashtable>();
        }
        if(!(this->fields->ContainsKey_5de2e202a0290d76(fromNoninstanciated))) 
        {
            this->fields->set_Item_84c7e24d9caa09(fromNoninstanciated, cli::gcnew<Emit::FieldOnTypeBuilderInst>(this, fromNoninstanciated));
        }
        return cli::cast<FieldInfo*>(this->fields->get_Item_d75c6e706b965758(fromNoninstanciated));
    }
    
    cli::array<MethodInfo*>* MonoGenericClass::GetMethods_c5b4e5d4877e6672(BindingFlags bf) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<MethodInfo*>* MonoGenericClass::GetMethodsInternal(BindingFlags bf, MonoGenericClass* reftype) {
        if(System::Type::op_Inequality2(reftype, this)) 
        {
            (bf = (BindingFlags)(((int32_t)(bf) | 2)));
        }
        cli::array<MethodInfo*> *methods = GetMethodsFromGTDWithHint(bf);
        if((methods->get_Length() ==  0)) 
        {
            return (new cli::array<MethodInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        MethodAttributes mattrs;
        initialize2();
        for(int32_t i = 0; (i < methods->get_Length()); ++i){
            MethodInfo *c = methods->at(i);
            match = false;
            mattrs = c->get_Attributes_b3976e6a55c088be();
            if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
            {
                if(((int32_t)(((int32_t)(bf) & 16)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 32)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            match = false;
            if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
            {
                if(((int32_t)(((int32_t)(bf) & 8)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 4)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            if(c->get_DeclaringType_6121cd6a84393166()->get_IsGenericTypeDefinition_8008dd501dc43926()) 
            {
                c = Emit::TypeBuilder::GetMethod8(this, c);
            }
            l->Add_e6a92085999ce388(c);
        }
        cli::array<MethodInfo*> *result = (new cli::array<MethodInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<ConstructorInfo*>* MonoGenericClass::GetConstructors_736b6e990b94b352(BindingFlags bf) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<ConstructorInfo*>* MonoGenericClass::GetConstructorsInternal(BindingFlags bf, MonoGenericClass* reftype) {
        cli::array<ConstructorInfo*> *ctors = GetConstructorsFromGTDWithHint(bf);
        if(((ctors ==  nullptr) || (ctors->get_Length() ==  0))) 
        {
            return (new cli::array<ConstructorInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        MethodAttributes mattrs;
        initialize2();
        for(int32_t i = 0; (i < ctors->get_Length()); i++){
            ConstructorInfo *c = ctors->at(i);
            match = false;
            mattrs = c->get_Attributes_b3976e6a55c088be();
            if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
            {
                if(((int32_t)(((int32_t)(bf) & 16)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 32)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            match = false;
            if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
            {
                if(((int32_t)(((int32_t)(bf) & 8)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 4)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            l->Add_e6a92085999ce388(Emit::TypeBuilder::GetConstructor5(this, c));
        }
        cli::array<ConstructorInfo*> *result = (new cli::array<ConstructorInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<FieldInfo*>* MonoGenericClass::GetFields_369be5ac49d99f8(BindingFlags bf) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<FieldInfo*>* MonoGenericClass::GetFieldsInternal(BindingFlags bf, MonoGenericClass* reftype) {
        cli::array<FieldInfo*> *fields = GetFieldsFromGTD(bf);
        if((fields->get_Length() ==  0)) 
        {
            return (new cli::array<FieldInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        FieldAttributes fattrs;
        initialize2();
        for(int32_t i = 0; (i < fields->get_Length()); i++){
            FieldInfo *c = fields->at(i);
            match = false;
            fattrs = c->get_Attributes_ecc2fe2071b9c047();
            if(((int32_t)(((int32_t)(fattrs) & 7)) ==  6)) 
            {
                if(((int32_t)(((int32_t)(bf) & 16)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 32)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            match = false;
            if(((int32_t)(((int32_t)(fattrs) & 16)) != 0)) 
            {
                if(((int32_t)(((int32_t)(bf) & 8)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 4)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            l->Add_e6a92085999ce388(Emit::TypeBuilder::GetField5(this, c));
        }
        cli::array<FieldInfo*> *result = (new cli::array<FieldInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<PropertyInfo*>* MonoGenericClass::GetProperties_9fb6c40e3662fdd7(BindingFlags bf) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<PropertyInfo*>* MonoGenericClass::GetPropertiesInternal2(BindingFlags bf, MonoGenericClass* reftype) {
        cli::array<PropertyInfo*> *props = GetPropertiesInternal(this->generic_type, bf);
        if(((props ==  nullptr) || (props->get_Length() ==  0))) 
        {
            return (new cli::array<PropertyInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        MethodAttributes mattrs;
        MethodInfo *accessor;
        initialize2();
        for(auto tmp_259 : props) {
            auto pinfo = cli::cast<PropertyInfo*>(tmp_259);
            {
                match = false;
                accessor = pinfo->GetGetMethod_598f563fd3755017(true);
                if(MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    accessor = pinfo->GetSetMethod_8896cb22c4f8d900(true);
                }
                if(MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    continue;
                }
                mattrs = accessor->get_Attributes_b3976e6a55c088be();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bf) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bf) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bf) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bf) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(cli::gcnew<Emit::PropertyOnTypeBuilderInst>(reftype, pinfo));
            }
        }
        cli::array<PropertyInfo*> *result = (new cli::array<PropertyInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<EventInfo*>* MonoGenericClass::GetEvents_a960b087e4d67be2(BindingFlags bf) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<EventInfo*>* MonoGenericClass::GetEventsInternal(BindingFlags bf, MonoGenericClass* reftype) {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        if(System::Type::op_Equality2(tb, nullptr)) 
        {
            cli::array<EventInfo*> *res = this->generic_type->GetEvents_a960b087e4d67be2(bf);
            for(int32_t i = 0; (i < res->get_Length()); ++i) {
                res->at(i) = cli::gcnew<Emit::EventOnTypeBuilderInst>(this, res->at(i));
            }
            return res;
        }
        cli::array<Emit::EventBuilder*> *events = tb->events;
        if(((events ==  nullptr) || (events->get_Length() ==  0))) 
        {
            return (new cli::array<EventInfo*>(0));
        }
        initialize2();
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        MethodAttributes mattrs;
        MethodInfo *accessor;
        for(int32_t i = 0; (i < this->event_count); ++i){
            Emit::EventBuilder *ev = events->at(i);
            match = false;
            accessor = ev->add_method;
            if(MethodInfo::op_Equality(accessor, nullptr)) 
            {
                accessor = ev->remove_method;
            }
            if(MethodInfo::op_Equality(accessor, nullptr)) 
            {
                continue;
            }
            mattrs = accessor->get_Attributes_b3976e6a55c088be();
            if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
            {
                if(((int32_t)(((int32_t)(bf) & 16)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 32)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            match = false;
            if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
            {
                if(((int32_t)(((int32_t)(bf) & 8)) != 0)) 
                {
                    match = true;
                }
            }
             else 
            {
                if(((int32_t)(((int32_t)(bf) & 4)) != 0)) 
                {
                    match = true;
                }
            }
            if(!(match)) 
            {
                continue;
            }
            l->Add_e6a92085999ce388(cli::gcnew<Emit::EventOnTypeBuilderInst>(this, ev));
        }
        cli::array<EventInfo*> *result = (new cli::array<EventInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<System::Type*>* MonoGenericClass::GetNestedTypes_bb6ee40b0fa4052d(BindingFlags bf) {
        return this->generic_type->GetNestedTypes_bb6ee40b0fa4052d(bf);
    }
    
    bool MonoGenericClass::IsAssignableFrom_e3aa32d778e63a90(System::Type* c) {
        if(System::Type::op_Equality2(c, this)) 
        {
            return true;
        }
        cli::array<System::Type*> *interfaces = GetInterfacesInternal();
        if(c->get_IsInterface()) 
        {
            if((interfaces ==  nullptr)) 
            {
                return false;
            }
            for(auto tmp_260 : interfaces) {
                auto t = cli::cast<System::Type*>(tmp_260);
                if(c->IsAssignableFrom_e3aa32d778e63a90(t)) 
                {
                    return true;
                }
            }
            return false;
        }
        System::Type *parent = GetParentType();
        if(System::Type::op_Equality2(parent, nullptr)) 
        {
            return System::Type::op_Equality2(c, cli::typeof<System::Type>::info);
        }
         else 
        {
            return c->IsAssignableFrom_e3aa32d778e63a90(parent);
        }
    }
    
    System::String* MonoGenericClass::format_name(bool full_name, bool assembly_qualified) {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>(this->generic_type->get_FullName_7e8fa72ba225e1a4());
        sb->Append2(_T("["));
        for(int32_t i = 0; (i < this->type_arguments->get_Length()); ++i){
            if((i > 0)) 
            {
                sb->Append2(_T(","));
            }
            System::String *name;
            if(full_name) 
            {
                System::String *assemblyName = this->type_arguments->at(i)->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
                name = this->type_arguments->at(i)->get_FullName_7e8fa72ba225e1a4();
                if(((name != nullptr) && (assemblyName != nullptr))) 
                {
                    name = cli::concat(name, _T(", "));
                }
            }
             else 
            {
                name = this->type_arguments->at(i)->ToString_1636a0751cb9ac11();
            }
            if((name ==  nullptr)) 
            {
                return nullptr;
            }
            if(full_name) 
            {
                sb->Append2(_T("["));
            }
            sb->Append2(name);
            if(full_name) 
            {
                sb->Append2(_T("]"));
            }
        }
        sb->Append2(_T("]"));
        if(assembly_qualified) 
        {
            sb->Append2(_T(", "));
            sb->Append2(this->generic_type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
        }
        return sb->ToString_1636a0751cb9ac11();
    }
    
    System::String* MonoGenericClass::ToString_1636a0751cb9ac11() {
        return format_name(false, false);
    }
    
    System::Type* MonoGenericClass::GetGenericTypeDefinition_15f8fc7813e8e8bf() {
        return this->generic_type;
    }
    
    cli::array<System::Type*>* MonoGenericClass::GetGenericArguments_a7fb476275cfe9a3() {
        cli::array<System::Type*> *ret = (new cli::array<System::Type*>(this->type_arguments->get_Length()));
        cli::import(this->type_arguments)->CopyTo(ret, 0);
        return ret;
    }
    
    System::Type* MonoGenericClass::MakeArrayType_9ec2b26036f00b30() {
        return cli::gcnew<Emit::ArrayType>(this, 0);
    }
    
    System::Type* MonoGenericClass::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        if((rank < 1)) 
        {
            throw cli::gcnew<System::IndexOutOfRangeException>();
        }
        return cli::gcnew<Emit::ArrayType>(this, rank);
    }
    
    System::Type* MonoGenericClass::MakeByRefType_fc54947a1bb074be() {
        return cli::gcnew<Emit::ByRefType>(this);
    }
    
    System::Type* MonoGenericClass::MakePointerType_f23f3b9330ac63da() {
        return cli::gcnew<Emit::PointerType>(this);
    }
    
    System::Type* MonoGenericClass::GetElementType_ab5070dbbfe66f5f() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MonoGenericClass::HasElementTypeImpl_36e3ca23a6e8185() {
        return false;
    }
    
    bool MonoGenericClass::IsCOMObjectImpl_27dfb5d026264856() {
        return false;
    }
    
    bool MonoGenericClass::IsPrimitiveImpl_b5951f74b8c48703() {
        return false;
    }
    
    bool MonoGenericClass::IsArrayImpl_cf15f782d0773ffd() {
        return false;
    }
    
    bool MonoGenericClass::IsByRefImpl_a1c403acfb80fd15() {
        return false;
    }
    
    bool MonoGenericClass::IsPointerImpl_86e7f94717f8b1ea() {
        return false;
    }
    
    TypeAttributes MonoGenericClass::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->generic_type->get_Attributes();
    }
    
    System::Type* MonoGenericClass::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    EventInfo* MonoGenericClass::GetEvent_7f053fa54114e387(System::String* name, BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    FieldInfo* MonoGenericClass::GetField_fb08cba9d1a4bc84(System::String* name, BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<MemberInfo*>* MonoGenericClass::GetMembers_54432b0ff6e99174(BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* MonoGenericClass::GetNestedType_31962c16c0c85df9(System::String* name, BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Object* MonoGenericClass::InvokeMember_70c4601d847070a2(System::String* name, BindingFlags invokeAttr, Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    MethodInfo* MonoGenericClass::GetMethodImpl_1b221ab713bbcb85(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    PropertyInfo* MonoGenericClass::GetPropertyImpl_e2328b7ad87384ee(System::String* name, BindingFlags bindingAttr, Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    ConstructorInfo* MonoGenericClass::GetConstructorImpl_a21b5d13a475afe1(BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MonoGenericClass::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* MonoGenericClass::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* MonoGenericClass::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MonoGenericClass::get_IsCreated() {
        Emit::TypeBuilder *tb = cli::as<Emit::TypeBuilder*>(this->generic_type);
        return System::Type::op_Inequality2(tb, nullptr) ? tb->get_is_created() : true;
    }
    
    System::Type* MonoGenericClass::get_BaseType_6a0646ae880055f6() {
        System::Type *parent = GetParentType();
        return System::Type::op_Inequality2(parent, nullptr) ? parent : this->generic_type->get_BaseType_6a0646ae880055f6();
    }
    
    System::Type* MonoGenericClass::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        return this;
    }
    
    Assembly* MonoGenericClass::get_Assembly_3aae0acbf2a6d696() {
        return this->generic_type->get_Assembly_3aae0acbf2a6d696();
    }
    
    Module* MonoGenericClass::get_Module_ea7d65dc88202263() {
        return this->generic_type->get_Module_ea7d65dc88202263();
    }
    
    System::String* MonoGenericClass::get_Name_50fad5fa936c3ae2() {
        return this->generic_type->get_Name_50fad5fa936c3ae2();
    }
    
    System::String* MonoGenericClass::get_Namespace_cb4ed37007083e7f() {
        return this->generic_type->get_Namespace_cb4ed37007083e7f();
    }
    
    System::String* MonoGenericClass::get_FullName_7e8fa72ba225e1a4() {
        return format_name(true, false);
    }
    
    System::String* MonoGenericClass::get_AssemblyQualifiedName_cea373c2171bd483() {
        return format_name(true, true);
    }
    
    System::Guid MonoGenericClass::get_GUID_bdb6b630c3237a21() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MonoGenericClass::get_ContainsGenericParameters_19598881dd690ad3() {
        if(this->get_HasElementType()) 
        {
            return GetElementType_7c511ae38a3cf1dd()->get_ContainsGenericParameters_19598881dd690ad3();
        }
        for(auto tmp_261 : this->type_arguments) {
            auto t = cli::cast<System::Type*>(tmp_261);
            {
                if(t->get_ContainsGenericParameters_19598881dd690ad3()) 
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool MonoGenericClass::get_IsGenericTypeDefinition_8008dd501dc43926() {
        return false;
    }
    
    bool MonoGenericClass::get_IsGenericType_4db8ddd5b97f3c14() {
        return !(this->get_HasElementType());
    }
    
    System::Type* MonoGenericClass::get_DeclaringType_6121cd6a84393166() {
        return InflateType(this->generic_type->get_DeclaringType_6121cd6a84393166());
    }
    
    System::RuntimeTypeHandle MonoGenericClass::get_TypeHandle_a14995fa9102936b() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoGenericMethod::constructor() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Type* MonoGenericMethod::get_ReflectedType_bf4971c0f442b9dc() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoGenericCMethod::constructor() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Type* MonoGenericCMethod::get_ReflectedType_bf4971c0f442b9dc() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoMethod::constructor() {
    }
    
    void MonoMethod::constructor(System::RuntimeMethodHandle mhandle) {
        this->mhandle = mhandle->get_Value();
    }
    
    System::String* MonoMethod::get_name(MethodBase* method) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MonoMethod* MonoMethod::get_base_method(MonoMethod* method, bool definition) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodInfo* MonoMethod::GetBaseDefinition_b00937f21f1a7556() {
        return get_base_method(this, true);
    }
    
    MethodInfo* MonoMethod::GetBaseMethod_15ff4b8595f9b09() {
        return get_base_method(this, false);
    }
    
    MethodImplAttributes MonoMethod::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return MonoMethodInfo::GetMethodImplementationFlags(this->mhandle);
    }
    
    cli::array<ParameterInfo*>* MonoMethod::GetParameters_9d17bcb549474c9() {
        cli::array<ParameterInfo*> *src = MonoMethodInfo::GetParametersInfo(this->mhandle, this);
        cli::array<ParameterInfo*> *res = (new cli::array<ParameterInfo*>(src->get_Length()));
        cli::import(src)->CopyTo(res, 0);
        return res;
    }
    
    int32_t MonoMethod::GetParameterCount_ac86b3a4965d967a() {
        cli::array<ParameterInfo*> *pi = MonoMethodInfo::GetParametersInfo(this->mhandle, this);
        return (pi ==  nullptr) ? 0 : pi->get_Length();
    }
    
    System::Object* MonoMethod::InternalInvoke(System::Object* obj, cli::array<System::Object*>* parameters, System::Exception* exc) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MonoMethod::Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        if((binder ==  nullptr)) 
        {
            binder = Binder::get_DefaultBinder();
        }
        cli::array<ParameterInfo*> *pinfo = MonoMethodInfo::GetParametersInfo(this->mhandle, this);
        if((((parameters ==  nullptr) && (pinfo->get_Length() != 0)) || ((parameters != nullptr) && (parameters->get_Length() != pinfo->get_Length())))) 
        {
            throw cli::gcnew<TargetParameterCountException>(_T("parameters do not match signature"));
        }
        if(((int32_t)(((int32_t)(invokeAttr) & 65536)) ==  0)) 
        {
            if(!(Binder::ConvertArgs(binder, parameters, pinfo, culture))) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("failed to convert parameters"));
            }
        }
         else 
        {
            for(int32_t i = 0; (i < pinfo->get_Length()); i++) {
                if(System::Type::op_Inequality2(parameters->at(i)->GetType(), pinfo->at(i)->get_ParameterType_97c5fa09a0b988d())) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("parameters do not match signature"));
                }
            }
        }
        if(System::Security::SecurityManager::get_SecurityEnabled()) 
        {
            System::Security::SecurityManager::ReflectedLinkDemandInvoke(this);
        }
        if(this->get_ContainsGenericParameters_113614fa92731376()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Late bound operations cannot be performed on types or methods for which ContainsGenericParameters is true."));
        }
        System::Exception *exc;
        System::Object *o = nullptr;
        try {
            o = InternalInvoke(obj, parameters, exc);
        }
        catch(System::Threading::ThreadAbortException*) {
            throw ;
        }
        catch(System::Exception* e) {
            throw cli::gcnew<TargetInvocationException>(e);
        }
        if((exc != nullptr)) 
        {
            throw exc;
        }
        return o;
    }
    
    bool MonoMethod::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* MonoMethod::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoMethod::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    System::Runtime::InteropServices::DllImportAttribute* MonoMethod::GetDllImportAttribute(void* mhandle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Object*>* MonoMethod::GetPseudoCustomAttributes() {
        int32_t count = 0;
        MonoMethodInfo info = MonoMethodInfo::GetMethodInfo(this->mhandle);
        if(((int32_t)(((int32_t)(info->iattrs) & 128)) != 0)) 
        {
            count++;
        }
        if(((int32_t)(((int32_t)(info->attrs) & 8192)) != 0)) 
        {
            count++;
        }
        if((count ==  0)) 
        {
            return nullptr;
        }
        cli::array<System::Object*> *attrs = (new cli::array<System::Object*>(count));
        count = 0;
        if(((int32_t)(((int32_t)(info->iattrs) & 128)) != 0)) 
        {
            attrs->at(count++) = cli::gcnew<System::Runtime::InteropServices::PreserveSigAttribute>();
        }
        if(((int32_t)(((int32_t)(info->attrs) & 8192)) != 0)) 
        {
            System::Runtime::InteropServices::DllImportAttribute *attr = GetDllImportAttribute(this->mhandle);
            if(((int32_t)(((int32_t)(info->iattrs) & 128)) != 0)) 
            {
                attr->PreserveSig = true;
            }
            attrs->at(count++) = attr;
        }
        return attrs;
    }
    
    bool MonoMethod::ShouldPrintFullName(System::Type* type) {
        return (type->get_IsClass() && (!(type->get_IsPointer()) || (!(type->GetElementType_ab5070dbbfe66f5f()->get_IsPrimitive()) && !(type->GetElementType_ab5070dbbfe66f5f()->get_IsNested()))));
    }
    
    System::String* MonoMethod::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>();
        System::Type *retType = this->get_ReturnType_832339e848f448fe();
        if(ShouldPrintFullName(retType)) 
        {
            sb->Append2(retType->ToString_1636a0751cb9ac11());
        }
         else 
        {
            sb->Append2(retType->get_Name_50fad5fa936c3ae2());
        }
        sb->Append2(_T(" "));
        sb->Append2(this->get_Name_50fad5fa936c3ae2());
        if(this->get_IsGenericMethod_7e509e51546ea990()) 
        {
            cli::array<System::Type*> *gen_params = MethodBase::GetGenericArguments_77cf5f406b341958();
            sb->Append2(_T("["));
            for(int32_t j = 0; (j < gen_params->get_Length()); j++){
                if((j > 0)) 
                {
                    sb->Append2(_T(","));
                }
                sb->Append2(gen_params->at(j)->get_Name_50fad5fa936c3ae2());
            }
            sb->Append2(_T("]"));
        }
        sb->Append2(_T("("));
        cli::array<ParameterInfo*> *p = GetParameters_ab7269a35b115074();
        for(int32_t i = 0; (i < p->get_Length()); ++i){
            if((i > 0)) 
            {
                sb->Append2(_T(", "));
            }
            System::Type *pt = p->at(i)->get_ParameterType_97c5fa09a0b988d();
            bool byref = pt->get_IsByRef();
            if(byref) 
            {
                pt = pt->GetElementType_ab5070dbbfe66f5f();
            }
            if(ShouldPrintFullName(pt)) 
            {
                sb->Append2(pt->ToString_1636a0751cb9ac11());
            }
             else 
            {
                sb->Append2(pt->get_Name_50fad5fa936c3ae2());
            }
            if(byref) 
            {
                sb->Append2(_T(" ByRef"));
            }
        }
        if(((int32_t)(((int32_t)(this->get_CallingConvention_309cf574b58a053a()) & 2)) != 0)) 
        {
            if((p->get_Length() > 0)) 
            {
                sb->Append2(_T(", "));
            }
            sb->Append2(_T("..."));
        }
        sb->Append2(_T(")"));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    void MonoMethod::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        cli::array<System::Type*> *genericArguments = (this->get_IsGenericMethod_7e509e51546ea990() && !(this->get_IsGenericMethodDefinition_cce889be2a806b0f())) ? MethodBase::GetGenericArguments_77cf5f406b341958() : nullptr;
        MemberInfoSerializationHolder::Serialize2(info, this->get_Name_50fad5fa936c3ae2(), this->get_ReflectedType_bf4971c0f442b9dc(), System::Object::ToString_1636a0751cb9ac11(), MemberTypes::Method, genericArguments);
    }
    
    MethodInfo* MonoMethod::MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* methodInstantiation) {
        if((methodInstantiation ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("methodInstantiation"));
        }
        if(!(this->get_IsGenericMethodDefinition_cce889be2a806b0f())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("not a generic method definition"));
        }
        if((MethodBase::GetGenericArguments_77cf5f406b341958()->get_Length() != methodInstantiation->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Incorrect length"));
        }
        bool hasUserType = false;
        for(auto tmp_262 : methodInstantiation) {
            auto type = cli::cast<System::Type*>(tmp_262);
            {
                if(System::Type::op_Equality2(type, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>();
                }
                if(!(cli::is<System::MonoType>(type))) 
                {
                    hasUserType = true;
                }
            }
        }
        if(hasUserType) 
        {
            return cli::gcnew<Emit::MethodOnTypeBuilderInst>(this, methodInstantiation);
        }
        MethodInfo *ret = MakeGenericMethod_impl(methodInstantiation);
        if(MethodInfo::op_Equality(ret, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(_T("The method has {0} generic parameter(s) but {1} generic argument(s) were provided."), cli::box(MethodBase::GetGenericArguments_77cf5f406b341958()->get_Length()), cli::box(methodInstantiation->get_Length())));
        }
        return ret;
    }
    
    MethodInfo* MonoMethod::MakeGenericMethod_impl(cli::array<System::Type*>* types) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Type*>* MonoMethod::GetGenericArguments_77cf5f406b341958() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodInfo* MonoMethod::GetGenericMethodDefinition_impl() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodInfo* MonoMethod::GetGenericMethodDefinition_298ff0fcf1d6e37f() {
        MethodInfo *res = GetGenericMethodDefinition_impl();
        if(MethodInfo::op_Equality(res, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        return res;
    }
    
    MethodBody* MonoMethod::GetMethodBody_3bb8bd5a6a55236() {
        return MethodBase::GetMethodBody(this->mhandle);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoMethod::GetCustomAttributesData_8a5353617f57fb2() {
        return CustomAttributeData::GetCustomAttributes2(this);
    }
    
    ParameterInfo* MonoMethod::get_ReturnParameter_d8c8b72c8a40767c() {
        return MonoMethodInfo::GetReturnParameterInfo(this);
    }
    
    System::Type* MonoMethod::get_ReturnType_832339e848f448fe() {
        return MonoMethodInfo::GetReturnType(this->mhandle);
    }
    
    ICustomAttributeProvider* MonoMethod::get_ReturnTypeCustomAttributes_da3feb150ffa13fb() {
        return MonoMethodInfo::GetReturnParameterInfo(this);
    }
    
    System::RuntimeMethodHandle MonoMethod::get_MethodHandle_a92ba3e25e0a5ec8() {
        return cli::ctor<System::RuntimeMethodHandle>(this->mhandle);
    }
    
    MethodAttributes MonoMethod::get_Attributes_b3976e6a55c088be() {
        return MonoMethodInfo::GetAttributes(this->mhandle);
    }
    
    CallingConventions MonoMethod::get_CallingConvention_309cf574b58a053a() {
        return MonoMethodInfo::GetCallingConvention(this->mhandle);
    }
    
    System::Type* MonoMethod::get_ReflectedType_bf4971c0f442b9dc() {
        return this->reftype;
    }
    
    System::Type* MonoMethod::get_DeclaringType_6121cd6a84393166() {
        return MonoMethodInfo::GetDeclaringType(this->mhandle);
    }
    
    System::String* MonoMethod::get_Name_50fad5fa936c3ae2() {
        if((this->name != nullptr)) 
        {
            return this->name;
        }
        return get_name(this);
    }
    
    bool MonoMethod::get_IsGenericMethodDefinition_cce889be2a806b0f() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MonoMethod::get_IsGenericMethod_7e509e51546ea990() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MonoMethod::get_ContainsGenericParameters_113614fa92731376() {
        if(this->get_IsGenericMethod_7e509e51546ea990()) 
        {
            for(auto tmp_263 : MethodBase::GetGenericArguments_77cf5f406b341958()) {
                auto arg = cli::cast<System::Type*>(tmp_263);
                if(arg->get_ContainsGenericParameters_19598881dd690ad3()) 
                {
                    return true;
                }
            }
        }
        return this->get_DeclaringType_6121cd6a84393166()->get_ContainsGenericParameters_19598881dd690ad3();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoCMethod::constructor() {
    }
    
    MethodImplAttributes MonoCMethod::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return MonoMethodInfo::GetMethodImplementationFlags(this->mhandle);
    }
    
    cli::array<ParameterInfo*>* MonoCMethod::GetParameters_9d17bcb549474c9() {
        return MonoMethodInfo::GetParametersInfo(this->mhandle, this);
    }
    
    int32_t MonoCMethod::GetParameterCount_ac86b3a4965d967a() {
        cli::array<ParameterInfo*> *pi = MonoMethodInfo::GetParametersInfo(this->mhandle, this);
        return (pi ==  nullptr) ? 0 : pi->get_Length();
    }
    
    System::Object* MonoCMethod::InternalInvoke(System::Object* obj, cli::array<System::Object*>* parameters, System::Exception* exc) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MonoCMethod::Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        if((binder ==  nullptr)) 
        {
            binder = Binder::get_DefaultBinder();
        }
        cli::array<ParameterInfo*> *pinfo = GetParameters_ab7269a35b115074();
        if((((parameters ==  nullptr) && (pinfo->get_Length() != 0)) || ((parameters != nullptr) && (parameters->get_Length() != pinfo->get_Length())))) 
        {
            throw cli::gcnew<TargetParameterCountException>(_T("parameters do not match signature"));
        }
        if(((int32_t)(((int32_t)(invokeAttr) & 65536)) ==  0)) 
        {
            if(!(Binder::ConvertArgs(binder, parameters, pinfo, culture))) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("failed to convert parameters"));
            }
        }
         else 
        {
            for(int32_t i = 0; (i < pinfo->get_Length()); i++) {
                if(System::Type::op_Inequality2(parameters->at(i)->GetType(), pinfo->at(i)->get_ParameterType_97c5fa09a0b988d())) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("parameters do not match signature"));
                }
            }
        }
        if(System::Security::SecurityManager::get_SecurityEnabled()) 
        {
            System::Security::SecurityManager::ReflectedLinkDemandInvoke(this);
        }
        if(((obj ==  nullptr) && this->get_DeclaringType_6121cd6a84393166()->get_ContainsGenericParameters_19598881dd690ad3())) 
        {
            throw cli::gcnew<System::MemberAccessException>(cli::concat(_T("Cannot create an instance of "), this->get_DeclaringType_6121cd6a84393166()));
        }
        if((((int32_t)(((int32_t)(invokeAttr) & 512)) != 0) && this->get_DeclaringType_6121cd6a84393166()->get_IsAbstract())) 
        {
            throw cli::gcnew<System::MemberAccessException>(System::String::Format2(_T("Cannot create an instance of {0} because it is an abstract class"), this->get_DeclaringType_6121cd6a84393166()));
        }
        System::Exception *exc = nullptr;
        System::Object *o = nullptr;
        try {
            o = InternalInvoke(obj, parameters, exc);
        }
        catch(System::Exception* e) {
            throw cli::gcnew<TargetInvocationException>(e);
        }
        if((exc != nullptr)) 
        {
            throw exc;
        }
        return (obj ==  nullptr) ? o : nullptr;
    }
    
    System::Object* MonoCMethod::Invoke_d9ede2dfc2f2dd62(BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        return Invoke_26dd0cb2b98af8a7(nullptr, invokeAttr, binder, parameters, culture);
    }
    
    bool MonoCMethod::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* MonoCMethod::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoCMethod::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    MethodBody* MonoCMethod::GetMethodBody_3bb8bd5a6a55236() {
        return MethodBase::GetMethodBody(this->mhandle);
    }
    
    System::String* MonoCMethod::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>();
        sb->Append2(_T("Void "));
        sb->Append2(this->get_Name_50fad5fa936c3ae2());
        sb->Append2(_T("("));
        cli::array<ParameterInfo*> *p = GetParameters_ab7269a35b115074();
        for(int32_t i = 0; (i < p->get_Length()); ++i){
            if((i > 0)) 
            {
                sb->Append2(_T(", "));
            }
            sb->Append2(p->at(i)->get_ParameterType_97c5fa09a0b988d()->get_Name_50fad5fa936c3ae2());
        }
        if(((int32_t)(this->get_CallingConvention_309cf574b58a053a()) ==  3)) 
        {
            sb->Append2(_T(", ..."));
        }
        sb->Append2(_T(")"));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    void MonoCMethod::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        MemberInfoSerializationHolder::Serialize(info, this->get_Name_50fad5fa936c3ae2(), this->get_ReflectedType_bf4971c0f442b9dc(), System::Object::ToString_1636a0751cb9ac11(), MemberTypes::Constructor);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoCMethod::GetCustomAttributesData_8a5353617f57fb2() {
        return CustomAttributeData::GetCustomAttributes2(this);
    }
    
    System::RuntimeMethodHandle MonoCMethod::get_MethodHandle_a92ba3e25e0a5ec8() {
        return cli::ctor<System::RuntimeMethodHandle>(this->mhandle);
    }
    
    MethodAttributes MonoCMethod::get_Attributes_b3976e6a55c088be() {
        return MonoMethodInfo::GetAttributes(this->mhandle);
    }
    
    CallingConventions MonoCMethod::get_CallingConvention_309cf574b58a053a() {
        return MonoMethodInfo::GetCallingConvention(this->mhandle);
    }
    
    System::Type* MonoCMethod::get_ReflectedType_bf4971c0f442b9dc() {
        return this->reftype;
    }
    
    System::Type* MonoCMethod::get_DeclaringType_6121cd6a84393166() {
        return MonoMethodInfo::GetDeclaringType(this->mhandle);
    }
    
    System::String* MonoCMethod::get_Name_50fad5fa936c3ae2() {
        if((this->name != nullptr)) 
        {
            return this->name;
        }
        return MonoMethod::get_name(this);
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoModule::constructor() {
    }
    
    bool MonoModule::IsResource_27dec1ebb40006c6() {
        return this->is_resource;
    }
    
    cli::array<System::Type*>* MonoModule::FindTypes_fd05c708caa859b8(TypeFilter* filter, System::Object* filterCriteria) {
        System::Collections::Generic::List<System::Type*> *filtered = cli::gcnew<System::Collections::Generic::List<System::Type*>>();
        cli::array<System::Type*> *types = Module::GetTypes_a0a49ca31fb27210();
        for(auto tmp_264 : types) {
            auto t = cli::cast<System::Type*>(tmp_264);
            if(filter->Invoke(t, filterCriteria)) 
            {
                filtered->Add(t);
            }
        }
        return filtered->ToArray();
    }
    
    cli::array<System::Object*>* MonoModule::GetCustomAttributes_60f12c5b82d89770(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoModule::GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    FieldInfo* MonoModule::GetField_41336984e4f8fc62(System::String* name, BindingFlags bindingAttr) {
        if(Module::IsResource_27dec1ebb40006c6()) 
        {
            return nullptr;
        }
        System::Type *globalType = Module::GetGlobalType();
        return System::Type::op_Inequality2(globalType, nullptr) ? globalType->GetField_fb08cba9d1a4bc84(name, bindingAttr) : nullptr;
    }
    
    cli::array<FieldInfo*>* MonoModule::GetFields_676a5dd50d936280(BindingFlags bindingFlags) {
        if(Module::IsResource_27dec1ebb40006c6()) 
        {
            return (new cli::array<FieldInfo*>(0));
        }
        System::Type *globalType = Module::GetGlobalType();
        return System::Type::op_Inequality2(globalType, nullptr) ? globalType->GetFields_369be5ac49d99f8(bindingFlags) : (new cli::array<FieldInfo*>(0));
    }
    
    MethodInfo* MonoModule::GetMethodImpl_6896a740547de21d(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        if(Module::IsResource_27dec1ebb40006c6()) 
        {
            return nullptr;
        }
        System::Type *globalType = Module::GetGlobalType();
        if(System::Type::op_Equality2(globalType, nullptr)) 
        {
            return nullptr;
        }
        if((types ==  nullptr)) 
        {
            return globalType->GetMethod(name);
        }
        return globalType->GetMethod6(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<MethodInfo*>* MonoModule::GetMethods_df7587a505f60ad1(BindingFlags bindingFlags) {
        if(Module::IsResource_27dec1ebb40006c6()) 
        {
            return (new cli::array<MethodInfo*>(0));
        }
        System::Type *globalType = Module::GetGlobalType();
        return System::Type::op_Inequality2(globalType, nullptr) ? globalType->GetMethods_c5b4e5d4877e6672(bindingFlags) : (new cli::array<MethodInfo*>(0));
    }
    
    void MonoModule::GetPEKind_7f6df4eff35de4ca(PortableExecutableKinds peKind, ImageFileMachine machine) {
        this->get_ModuleHandle()->GetPEKind(peKind, machine);
    }
    
    System::Type* MonoModule::GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase) {
        if((className ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("className"));
        }
        if(System::String::op_Equality(className, System::String::Empty)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type name can\'t be empty"));
        }
        return this->assembly->InternalGetType(this, className, throwOnError, ignoreCase);
    }
    
    bool MonoModule::IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    FieldInfo* MonoModule::ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        ResolveTokenError error;
        void *handle = Module::ResolveFieldToken(this->_impl, metadataToken, Module::ptrs_from_types(genericTypeArguments), Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("Field"));
        }
         else 
        {
            return FieldInfo::GetFieldFromHandle(cli::ctor<System::RuntimeFieldHandle>(handle));
        }
    }
    
    MemberInfo* MonoModule::ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        ResolveTokenError error;
        MemberInfo *m = Module::ResolveMemberToken(this->_impl, metadataToken, Module::ptrs_from_types(genericTypeArguments), Module::ptrs_from_types(genericMethodArguments), error);
        if(MemberInfo::op_Equality(m, nullptr)) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("MemberInfo"));
        }
         else 
        {
            return m;
        }
    }
    
    MethodBase* MonoModule::ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        ResolveTokenError error;
        void *handle = Module::ResolveMethodToken(this->_impl, metadataToken, Module::ptrs_from_types(genericTypeArguments), Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("MethodBase"));
        }
         else 
        {
            return MethodBase::GetMethodFromHandleNoGenericCheck(cli::ctor<System::RuntimeMethodHandle>(handle));
        }
    }
    
    System::String* MonoModule::ResolveString_f0f214b35440d5e7(int32_t metadataToken) {
        ResolveTokenError error;
        System::String *s = Module::ResolveStringToken(this->_impl, metadataToken, error);
        if((s ==  nullptr)) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("string"));
        }
         else 
        {
            return s;
        }
    }
    
    System::Type* MonoModule::ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        ResolveTokenError error;
        void *handle = Module::ResolveTypeToken(this->_impl, metadataToken, Module::ptrs_from_types(genericTypeArguments), Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("Type"));
        }
         else 
        {
            return System::Type::GetTypeFromHandle(cli::ctor<System::RuntimeTypeHandle>(handle));
        }
    }
    
    cli::array<unsigned char>* MonoModule::ResolveSignature_a46b44b280a2cd11(int32_t metadataToken) {
        ResolveTokenError error;
        cli::array<unsigned char> *res = Module::ResolveSignature(this->_impl, metadataToken, error);
        if((res ==  nullptr)) 
        {
            throw Module::resolve_token_exception(metadataToken, error, _T("signature"));
        }
         else 
        {
            return res;
        }
    }
    
    System::Security::Cryptography::X509Certificates::X509Certificate2* MonoModule::GetSignerCertificate_9251eb29d4d8fa27() {
        try {
            return System::Security::Cryptography::X509Certificates::X509Certificate2::CreateFromSignedFile(this->assembly->get_Location_3a7779d7eb72fa50());
        }
        catch(...) {
            return nullptr;
        }
    }
    
    cli::array<System::Type*>* MonoModule::GetTypes_a0a49ca31fb27210() {
        return Module::InternalGetTypes();
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoModule::GetCustomAttributesData_efa981070afbf622() {
        return CustomAttributeData::GetCustomAttributes3(this);
    }
    
    Assembly* MonoModule::get_Assembly_dbea84123403c0aa() {
        return this->assembly;
    }
    
    System::String* MonoModule::get_Name_51eff21286003cfa() {
        return this->name;
    }
    
    System::String* MonoModule::get_ScopeName_da7d7aa6d0cd103f() {
        return this->scopename;
    }
    
    int32_t MonoModule::get_MDStreamVersion_8976919ee80930d7() {
        if(::System::IntPtr::op_Equality(this->_impl, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        return Module::GetMDStreamVersion(this->_impl);
    }
    
    System::Guid MonoModule::get_ModuleVersionId_d7f4c95bdb0ad1b2() {
        return Module::GetModuleVersionId_c8f7394bf9778713();
    }
    
    System::String* MonoModule::get_FullyQualifiedName_ae33b8f6fc78fb8f() {
        if(System::Security::SecurityManager::get_SecurityEnabled()) 
        {
            cli::gcnew<System::Security::Permissions::FileIOPermission>(System::Security::Permissions::FileIOPermissionAccess::PathDiscovery, this->fqname)->Demand();
        }
        return this->fqname;
    }
    
    int32_t MonoModule::get_MetadataToken_a9fc5f43a9908cd0() {
        return Module::get_MetadataToken(this);
    }
    
}}
namespace System { namespace Reflection {
    
    
    void MonoProperty::constructor() {
    }
    
    void MonoProperty::CachePropertyInfo(PInfo flags) {
        if(((int32_t)(((int32_t)(this->cached) & (int32_t)(flags))) != (int32_t)(flags))) 
        {
            MonoPropertyInfo::get_property_info(this, this->info, flags);
            (this->cached = (PInfo)(((int32_t)(this->cached) | (int32_t)(flags))));
        }
    }
    
    cli::array<MethodInfo*>* MonoProperty::GetAccessors_9a7eb6d477c42a6d(bool nonPublic) {
        int32_t nget = 0;
        int32_t nset = 0;
        CachePropertyInfo((PInfo)6L);
        if((MethodInfo::op_Inequality(this->info->set_method, nullptr) && (nonPublic || this->info->set_method->get_IsPublic()))) 
        {
            nset = 1;
        }
        if((MethodInfo::op_Inequality(this->info->get_method, nullptr) && (nonPublic || this->info->get_method->get_IsPublic()))) 
        {
            nget = 1;
        }
        cli::array<MethodInfo*> *res = (new cli::array<MethodInfo*>((nget + nset)));
        int32_t n = 0;
        if((nset != 0)) 
        {
            res->at(n++) = this->info->set_method;
        }
        if((nget != 0)) 
        {
            res->at(n++) = this->info->get_method;
        }
        return res;
    }
    
    MethodInfo* MonoProperty::GetGetMethod_598f563fd3755017(bool nonPublic) {
        CachePropertyInfo(PInfo::GetMethod);
        if((MethodInfo::op_Inequality(this->info->get_method, nullptr) && (nonPublic || this->info->get_method->get_IsPublic()))) 
        {
            return this->info->get_method;
        }
         else 
        {
            return nullptr;
        }
    }
    
    cli::array<ParameterInfo*>* MonoProperty::GetIndexParameters_66437e9b713ac629() {
        CachePropertyInfo((PInfo)6L);
        cli::array<ParameterInfo*> *res;
        if(MethodInfo::op_Inequality(this->info->get_method, nullptr)) 
        {
            res = this->info->get_method->GetParameters_9d17bcb549474c9();
        }
         else 
        {
            if(MethodInfo::op_Inequality(this->info->set_method, nullptr)) 
            {
                cli::array<ParameterInfo*> *src = this->info->set_method->GetParameters_9d17bcb549474c9();
                res = (new cli::array<ParameterInfo*>((src->get_Length() - 1)));
                System::Array::Copy(src, res, res->get_Length());
            }
             else 
            {
                return (new cli::array<ParameterInfo*>(0));
            }
        }
        for(int32_t i = 0; (i < res->get_Length()); ++i){
            ParameterInfo *pinfo = res->at(i);
            res->at(i) = cli::gcnew<ParameterInfo>(pinfo, this);
        }
        return res;
    }
    
    MethodInfo* MonoProperty::GetSetMethod_8896cb22c4f8d900(bool nonPublic) {
        CachePropertyInfo(PInfo::SetMethod);
        if((MethodInfo::op_Inequality(this->info->set_method, nullptr) && (nonPublic || this->info->set_method->get_IsPublic()))) 
        {
            return this->info->set_method;
        }
         else 
        {
            return nullptr;
        }
    }
    
    System::Object* MonoProperty::GetConstantValue_175a0b35c21225ba() {
        return MonoPropertyInfo::get_default_value(this);
    }
    
    System::Object* MonoProperty::GetRawConstantValue_dd88d19bf0ed90e4() {
        return MonoPropertyInfo::get_default_value(this);
    }
    
    bool MonoProperty::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, false);
    }
    
    cli::array<System::Object*>* MonoProperty::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, false);
    }
    
    cli::array<System::Object*>* MonoProperty::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, false);
    }
    
    GetterAdapter* MonoProperty::CreateGetterDelegate(MethodInfo* method) {
        cli::array<System::Type*> *typeVector;
        System::Type *getterType;
        System::Object *getterDelegate;
        MethodInfo *adapterFrame;
        System::Type *getterDelegateType;
        System::String *frameName;
        if(method->get_IsStatic()) 
        {
            typeVector = (new cli::array<System::Type*>({method->get_ReturnType_832339e848f448fe()}));
            getterDelegateType = cli::typeof<System::Type>::info;
            frameName = _T("StaticGetterAdapterFrame");
        }
         else 
        {
            typeVector = (new cli::array<System::Type*>({method->get_DeclaringType_6121cd6a84393166(), method->get_ReturnType_832339e848f448fe()}));
            getterDelegateType = cli::typeof<System::Type>::info;
            frameName = _T("GetterAdapterFrame");
        }
        getterType = getterDelegateType->MakeGenericType_da11ef776ac96678(typeVector);
        getterDelegate = System::Delegate::CreateDelegate5(getterType, method);
        adapterFrame = cli::typeof<System::Type>::info->GetMethod2(frameName, (BindingFlags)40L);
        adapterFrame = adapterFrame->MakeGenericMethod_6fb56e5d44bf2eff(typeVector);
        return cli::cast<GetterAdapter*>(System::Delegate::CreateDelegate(cli::typeof<System::Type>::info, getterDelegate, adapterFrame, true));
    }
    
    System::Object* MonoProperty::GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index) {
        if(((index ==  nullptr) || (index->get_Length() ==  0))) 
        {
            if((this->cached_getter ==  nullptr)) 
            {
                if(!(this->get_DeclaringType_6121cd6a84393166()->get_IsValueType())) 
                {
                    MethodInfo *method = GetGetMethod_6968d1fbf893caf2(true);
                    if(MethodInfo::op_Equality(method, nullptr)) 
                    {
                        throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Get Method not found for \'"), this->get_Name_50fad5fa936c3ae2()));
                    }
                    this->cached_getter = CreateGetterDelegate(method);
                    try {
                        return this->cached_getter->Invoke(obj);
                    }
                    catch(System::Exception* ex) {
                        throw cli::gcnew<TargetInvocationException>(ex);
                    }
                }
            }
             else 
            {
                try {
                    return this->cached_getter->Invoke(obj);
                }
                catch(System::Exception* ex) {
                    throw cli::gcnew<TargetInvocationException>(ex);
                }
            }
        }
        return GetValue_5c4287abeb0e7d6e(obj, BindingFlags::Default2, nullptr, index, nullptr);
    }
    
    System::Object* MonoProperty::GetValue_e428a2cef74e332d(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
        System::Object *ret = nullptr;
        MethodInfo *method = GetGetMethod_6968d1fbf893caf2(true);
        if(MethodInfo::op_Equality(method, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Get Method not found for \'"), this->get_Name_50fad5fa936c3ae2()));
        }
        try {
            if(((index ==  nullptr) || (index->get_Length() ==  0))) 
            {
                ret = method->Invoke_ba5f4e14507fdb95(obj, invokeAttr, binder, nullptr, culture);
            }
             else 
            {
                ret = method->Invoke_ba5f4e14507fdb95(obj, invokeAttr, binder, index, culture);
            }
        }
        catch(System::Security::SecurityException* se) {
            throw cli::gcnew<TargetInvocationException>(se);
        }
        return ret;
    }
    
    void MonoProperty::SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
        MethodInfo *method = GetSetMethod_bc66033ddce9efa0(true);
        if(MethodInfo::op_Equality(method, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Set Method not found for \'"), this->get_Name_50fad5fa936c3ae2()));
        }
        cli::array<System::Object*> *parms;
        if(((index ==  nullptr) || (index->get_Length() ==  0))) 
        {
            parms = (new cli::array<System::Object*>({value}));
        }
         else 
        {
            int32_t ilen = index->get_Length();
            parms = (new cli::array<System::Object*>((ilen + 1)));
            cli::import(index)->CopyTo(parms, 0);
            parms->at(ilen) = value;
        }
        method->Invoke_ba5f4e14507fdb95(obj, invokeAttr, binder, parms, culture);
    }
    
    System::String* MonoProperty::ToString_1636a0751cb9ac11() {
        return cli::concat(this->get_PropertyType_68b4b04678fe4f8a()->ToString_1636a0751cb9ac11(), _T(" "));
    }
    
    cli::array<System::Type*>* MonoProperty::GetOptionalCustomModifiers_f21d0b942de3b4e() {
        cli::array<System::Type*> *types = MonoPropertyInfo::GetTypeModifiers(this, true);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    cli::array<System::Type*>* MonoProperty::GetRequiredCustomModifiers_81237c6c21cb723() {
        cli::array<System::Type*> *types = MonoPropertyInfo::GetTypeModifiers(this, false);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    void MonoProperty::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        MemberInfoSerializationHolder::Serialize(info, this->get_Name_50fad5fa936c3ae2(), this->get_ReflectedType_bf4971c0f442b9dc(), System::Object::ToString_1636a0751cb9ac11(), MemberTypes::Property);
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* MonoProperty::GetCustomAttributesData_8a5353617f57fb2() {
        return CustomAttributeData::GetCustomAttributes2(this);
    }
    
    PropertyAttributes MonoProperty::get_Attributes_44d275d722218b81() {
        CachePropertyInfo(PInfo::Attributes);
        return this->info->attrs;
    }
    
    bool MonoProperty::get_CanRead_f4dae9b567f6ce33() {
        CachePropertyInfo(PInfo::GetMethod);
        return MethodInfo::op_Inequality(this->info->get_method, nullptr);
    }
    
    bool MonoProperty::get_CanWrite_a9c71933951c9826() {
        CachePropertyInfo(PInfo::SetMethod);
        return MethodInfo::op_Inequality(this->info->set_method, nullptr);
    }
    
    System::Type* MonoProperty::get_PropertyType_68b4b04678fe4f8a() {
        CachePropertyInfo((PInfo)6L);
        if(MethodInfo::op_Inequality(this->info->get_method, nullptr)) 
        {
            return this->info->get_method->get_ReturnType_832339e848f448fe();
        }
         else 
        {
            cli::array<ParameterInfo*> *parameters = this->info->set_method->GetParameters_9d17bcb549474c9();
            return parameters->at((parameters->get_Length() - 1))->get_ParameterType_97c5fa09a0b988d();
        }
    }
    
    System::Type* MonoProperty::get_ReflectedType_bf4971c0f442b9dc() {
        CachePropertyInfo(PInfo::ReflectedType);
        return this->info->parent;
    }
    
    System::Type* MonoProperty::get_DeclaringType_6121cd6a84393166() {
        CachePropertyInfo(PInfo::DeclaringType);
        return this->info->declaring_type;
    }
    
    System::String* MonoProperty::get_Name_50fad5fa936c3ae2() {
        CachePropertyInfo(PInfo::Name2);
        return this->info->name;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ObfuscateAssemblyAttribute::constructor(bool assemblyIsPrivate) {
        this->strip = true;
        this->is_private = assemblyIsPrivate;
    }
    
    bool ObfuscateAssemblyAttribute::get_AssemblyIsPrivate() {
        return this->is_private;
    }
    
    bool ObfuscateAssemblyAttribute::get_StripAfterObfuscation() {
        return this->strip;
    }
    
    bool ObfuscateAssemblyAttribute::set_StripAfterObfuscation(bool value) {
        this->strip = value;
        return get_StripAfterObfuscation();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ObfuscationAttribute::constructor() {
        this->exclude = true;
        this->strip = true;
        this->applyToMembers = true;
        this->feature = _T("all");
    }
    
    bool ObfuscationAttribute::get_Exclude() {
        return this->exclude;
    }
    
    bool ObfuscationAttribute::set_Exclude(bool value) {
        this->exclude = value;
        return get_Exclude();
    }
    
    bool ObfuscationAttribute::get_StripAfterObfuscation() {
        return this->strip;
    }
    
    bool ObfuscationAttribute::set_StripAfterObfuscation(bool value) {
        this->strip = value;
        return get_StripAfterObfuscation();
    }
    
    bool ObfuscationAttribute::get_ApplyToMembers() {
        return this->applyToMembers;
    }
    
    bool ObfuscationAttribute::set_ApplyToMembers(bool value) {
        this->applyToMembers = value;
        return get_ApplyToMembers();
    }
    
    System::String* ObfuscationAttribute::get_Feature() {
        return this->feature;
    }
    
    System::String* ObfuscationAttribute::set_Feature(System::String* value) {
        this->feature = value;
        return get_Feature();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ParameterInfo::constructor() {
    }
    
    void ParameterInfo::constructor(Emit::ParameterBuilder* pb, System::Type* type, MemberInfo* member, int32_t position) {
        this->ClassImpl = type;
        this->MemberImpl = member;
        if((pb != nullptr)) 
        {
            this->NameImpl = pb->get_Name_bea4eaf90a09d50f();
            this->PositionImpl = (pb->get_Position_3671554786d5564d() - 1);
            this->AttrsImpl = (ParameterAttributes)(pb->get_Attributes_37cd73d6903dd16e());
        }
         else 
        {
            this->NameImpl = nullptr;
            this->PositionImpl = (position - 1);
            this->AttrsImpl = ParameterAttributes::None;
        }
    }
    
    void ParameterInfo::constructor(ParameterInfo* pinfo, System::Type* type, MemberInfo* member, int32_t position) {
        this->ClassImpl = type;
        this->MemberImpl = member;
        if((pinfo != nullptr)) 
        {
            this->NameImpl = pinfo->get_Name_1ad7a68577256740();
            this->PositionImpl = (pinfo->get_Position_1e6976b43412375f() - 1);
            this->AttrsImpl = (ParameterAttributes)(pinfo->get_Attributes_450c629a82b88ec3());
        }
         else 
        {
            this->NameImpl = nullptr;
            this->PositionImpl = (position - 1);
            this->AttrsImpl = ParameterAttributes::None;
        }
    }
    
    void ParameterInfo::constructor(ParameterInfo* pinfo, MemberInfo* member) {
        this->ClassImpl = pinfo->get_ParameterType_97c5fa09a0b988d();
        this->MemberImpl = member;
        this->NameImpl = pinfo->get_Name_1ad7a68577256740();
        this->PositionImpl = pinfo->get_Position_1e6976b43412375f();
        this->AttrsImpl = pinfo->get_Attributes_450c629a82b88ec3();
    }
    
    void ParameterInfo::constructor(System::Type* type, MemberInfo* member, Emit::UnmanagedMarshal* marshalAs) {
        this->ClassImpl = type;
        this->MemberImpl = member;
        this->NameImpl = _T("");
        this->PositionImpl = -1;
        this->AttrsImpl = ParameterAttributes::Retval;
        this->marshalAs = marshalAs;
    }
    
    System::String* ParameterInfo::ToString_1636a0751cb9ac11() {
        System::Type *elementType = this->ClassImpl;
        while(elementType->get_HasElementType()) {
            elementType = elementType->GetElementType_ab5070dbbfe66f5f();
        }
        bool useShort = ((elementType->get_IsPrimitive() || System::Type::op_Equality2(this->ClassImpl, cli::typeof<System::Type>::info)) || System::String::op_Equality(this->ClassImpl->get_Namespace_cb4ed37007083e7f(), this->MemberImpl->get_DeclaringType_6121cd6a84393166()->get_Namespace_cb4ed37007083e7f()));
        System::String *result = useShort ? this->ClassImpl->get_Name_50fad5fa936c3ae2() : this->ClassImpl->get_FullName_7e8fa72ba225e1a4();
        if(!(this->get_IsRetval())) 
        {
            (result = cli::concat(result, cli::box(u' ')));
            (result = cli::concat(result, this->NameImpl));
        }
        return result;
    }
    
    int32_t ParameterInfo::GetMetadataToken() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Object*>* ParameterInfo::GetCustomAttributes_fa76a8481b122aa(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* ParameterInfo::GetCustomAttributes_1c88eb3824a80dfa(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    bool ParameterInfo::IsDefined_f77a22c7742d1e97(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* ParameterInfo::GetPseudoCustomAttributes() {
        int32_t count = 0;
        if(this->get_IsIn()) 
        {
            count++;
        }
        if(this->get_IsOut()) 
        {
            count++;
        }
        if(this->get_IsOptional()) 
        {
            count++;
        }
        if((this->marshalAs != nullptr)) 
        {
            count++;
        }
        if((count ==  0)) 
        {
            return nullptr;
        }
        cli::array<System::Object*> *attrs = (new cli::array<System::Object*>(count));
        count = 0;
        if(this->get_IsIn()) 
        {
            attrs->at(count++) = cli::gcnew<System::Runtime::InteropServices::InAttribute>();
        }
        if(this->get_IsOptional()) 
        {
            attrs->at(count++) = cli::gcnew<System::Runtime::InteropServices::OptionalAttribute>();
        }
        if(this->get_IsOut()) 
        {
            attrs->at(count++) = cli::gcnew<System::Runtime::InteropServices::OutAttribute>();
        }
        if((this->marshalAs != nullptr)) 
        {
            attrs->at(count++) = this->marshalAs->ToMarshalAsAttribute();
        }
        return attrs;
    }
    
    cli::array<System::Type*>* ParameterInfo::GetTypeModifiers(bool optional) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Type*>* ParameterInfo::GetOptionalCustomModifiers_52cfca5fa091f4a1() {
        cli::array<System::Type*> *types = GetTypeModifiers(true);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    cli::array<System::Type*>* ParameterInfo::GetRequiredCustomModifiers_36db32977af9cbab() {
        cli::array<System::Type*> *types = GetTypeModifiers(false);
        if((types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        return types;
    }
    
    System::Collections::Generic::IList2<CustomAttributeData*>* ParameterInfo::GetCustomAttributesData_a3b4a484000f0762() {
        return CustomAttributeData::GetCustomAttributes4(this);
    }
    
    void ParameterInfo::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterInfo::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterInfo::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterInfo::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* ParameterInfo::get_ParameterType_97c5fa09a0b988d() {
        return this->ClassImpl;
    }
    
    ParameterAttributes ParameterInfo::get_Attributes_450c629a82b88ec3() {
        return this->AttrsImpl;
    }
    
    System::Object* ParameterInfo::get_DefaultValue_3b49b70b95542e87() {
        if(System::Type::op_Equality2(this->ClassImpl, cli::typeof<System::Type>::info)) 
        {
            cli::array<System::Runtime::CompilerServices::DecimalConstantAttribute*> *attrs = cli::cast<cli::array<System::Runtime::CompilerServices::DecimalConstantAttribute*>*>(GetCustomAttributes_1c88eb3824a80dfa(cli::typeof<System::Type>::info, false));
            if((attrs->get_Length() > 0)) 
            {
                return cli::box(attrs->at(0)->get_Value());
            }
        }
         else 
        {
            if(System::Type::op_Equality2(this->ClassImpl, cli::typeof<System::Type>::info)) 
            {
                cli::array<System::Runtime::CompilerServices::DateTimeConstantAttribute*> *attrs = cli::cast<cli::array<System::Runtime::CompilerServices::DateTimeConstantAttribute*>*>(GetCustomAttributes_1c88eb3824a80dfa(cli::typeof<System::Type>::info, false));
                if((attrs->get_Length() > 0)) 
                {
                    return cli::box(cli::ctor<System::DateTime>(attrs->at(0)->get_Ticks()));
                }
            }
        }
        return this->DefaultValueImpl;
    }
    
    bool ParameterInfo::get_IsIn() {
        return ((int32_t)(((int32_t)(this->get_Attributes_450c629a82b88ec3()) & 1)) != 0);
    }
    
    bool ParameterInfo::get_IsLcid() {
        return ((int32_t)(((int32_t)(this->get_Attributes_450c629a82b88ec3()) & 4)) != 0);
    }
    
    bool ParameterInfo::get_IsOptional() {
        return ((int32_t)(((int32_t)(this->get_Attributes_450c629a82b88ec3()) & 16)) != 0);
    }
    
    bool ParameterInfo::get_IsOut() {
        return ((int32_t)(((int32_t)(this->get_Attributes_450c629a82b88ec3()) & 2)) != 0);
    }
    
    bool ParameterInfo::get_IsRetval() {
        return ((int32_t)(((int32_t)(this->get_Attributes_450c629a82b88ec3()) & 8)) != 0);
    }
    
    MemberInfo* ParameterInfo::get_Member_3718e63e31df2b4e() {
        return this->MemberImpl;
    }
    
    System::String* ParameterInfo::get_Name_1ad7a68577256740() {
        return this->NameImpl;
    }
    
    int32_t ParameterInfo::get_Position_1e6976b43412375f() {
        return this->PositionImpl;
    }
    
    int32_t ParameterInfo::get_MetadataToken_ce27622109f762fd() {
        if(cli::is<PropertyInfo>(this->MemberImpl)) 
        {
            PropertyInfo *prop = cli::cast<PropertyInfo*>(this->MemberImpl);
            MethodInfo *mi = prop->GetGetMethod_598f563fd3755017(true);
            if(MethodInfo::op_Equality(mi, nullptr)) 
            {
                mi = prop->GetSetMethod_8896cb22c4f8d900(true);
            }
            return mi->GetParameters_9d17bcb549474c9()->at(this->PositionImpl)->get_MetadataToken_ce27622109f762fd();
        }
         else 
        {
            if(cli::is<MethodBase>(this->MemberImpl)) 
            {
                return GetMetadataToken();
            }
        }
        throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Can\'t produce MetadataToken for member of type "), this->MemberImpl->GetType()));
    }
    
    System::Object* ParameterInfo::get_RawDefaultValue_e0f20165bb28839() {
        return this->get_DefaultValue_3b49b70b95542e87();
    }
    
}}
namespace System { namespace Reflection {
    
    
    void Pointer::constructor() {
    }
    
    System::Object* Pointer::Box(void* ptr, System::Type* type) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if(!(type->get_IsPointer())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("type"));
        }
        Pointer *res = cli::gcnew<Pointer>();
        res->data = ptr;
        res->type = type;
        return res;
    }
    
    void* Pointer::Unbox(System::Object* ptr) {
        Pointer *p = cli::as<Pointer*>(ptr);
        if((p ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("ptr"));
        }
        return p->data;
    }
    
    void Pointer::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        throw cli::gcnew<System::NotSupportedException>(_T("Pointer deserializatioon not supported."));
    }
    
}}
namespace System { namespace Reflection {
    
    
    void PropertyInfo::constructor() {
    }
    
    cli::array<MethodInfo*>* PropertyInfo::GetAccessors() {
        return GetAccessors_9a7eb6d477c42a6d(false);
    }
    
    MethodInfo* PropertyInfo::GetGetMethod() {
        return GetGetMethod_598f563fd3755017(false);
    }
    
    MethodInfo* PropertyInfo::GetSetMethod() {
        return GetSetMethod_8896cb22c4f8d900(false);
    }
    
    System::Object* PropertyInfo::GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index) {
        return GetValue_e428a2cef74e332d(obj, BindingFlags::Default2, nullptr, index, nullptr);
    }
    
    void PropertyInfo::SetValue_1695ad6de909516e(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) {
        SetValue_54b056b52d2524f7(obj, value, BindingFlags::Default2, nullptr, index, nullptr);
    }
    
    cli::array<System::Type*>* PropertyInfo::GetOptionalCustomModifiers_f21d0b942de3b4e() {
        return System::Type::EmptyTypes;
    }
    
    cli::array<System::Type*>* PropertyInfo::GetRequiredCustomModifiers_81237c6c21cb723() {
        return System::Type::EmptyTypes;
    }
    
    System::NotImplementedException* PropertyInfo::CreateNIE() {
        return cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* PropertyInfo::GetConstantValue_175a0b35c21225ba() {
        throw CreateNIE();
    }
    
    System::Object* PropertyInfo::GetRawConstantValue_dd88d19bf0ed90e4() {
        throw CreateNIE();
    }
    
    bool PropertyInfo::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return (obj ==  cli::cast<System::Object*>(this));
    }
    
    int32_t PropertyInfo::GetHashCode_6648aef0f235ee6c() {
        return MemberInfo::GetHashCode_6648aef0f235ee6c();
    }
    
    void PropertyInfo::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyInfo::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyInfo::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyInfo::Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool PropertyInfo::op_Equality2(PropertyInfo* left, PropertyInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return true;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return false;
        }
        return left->Equals_ed975d2f4a7d193e(right);
    }
    
    bool PropertyInfo::op_Inequality2(PropertyInfo* left, PropertyInfo* right) {
        if((cli::cast<System::Object*>(left) ==  cli::cast<System::Object*>(right))) 
        {
            return false;
        }
        if(((cli::cast<System::Object*>(left) ==  nullptr) ^ (cli::cast<System::Object*>(right) ==  nullptr))) 
        {
            return true;
        }
        return !(left->Equals_ed975d2f4a7d193e(right));
    }
    
    bool PropertyInfo::get_IsSpecialName() {
        return ((int32_t)(((int32_t)(this->get_Attributes_44d275d722218b81()) & 512)) != 0);
    }
    
    MemberTypes PropertyInfo::get_MemberType_cd521d320810c98f() {
        return MemberTypes::Property;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void ReflectionTypeLoadException::constructor(cli::array<System::Type*>* classes, cli::array<System::Exception*>* exceptions) {
        this->loaderExceptions = exceptions;
        this->types = classes;
    }
    
    void ReflectionTypeLoadException::constructor(cli::array<System::Type*>* classes, cli::array<System::Exception*>* exceptions, System::String* message) {
        this->loaderExceptions = exceptions;
        this->types = classes;
    }
    
    void ReflectionTypeLoadException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext sc) {
        this->types = cli::cast<cli::array<System::Type*>*>(info->GetValue(_T("Types"), cli::typeof<System::Type>::info));
        this->loaderExceptions = cli::cast<cli::array<System::Exception*>*>(info->GetValue(_T("Exceptions"), cli::typeof<System::Type>::info));
    }
    
    void ReflectionTypeLoadException::GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::SystemException::GetObjectData_bc9b88d7eb43b6d8(info, context);
        info->AddValue16(_T("Types"), this->types);
        info->AddValue16(_T("Exceptions"), this->loaderExceptions);
    }
    
    cli::array<System::Type*>* ReflectionTypeLoadException::get_Types() {
        return this->types;
    }
    
    cli::array<System::Exception*>* ReflectionTypeLoadException::get_LoaderExceptions() {
        return this->loaderExceptions;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void StrongNameKeyPair::constructor(cli::array<unsigned char>* keyPairArray) {
        if((keyPairArray ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("keyPairArray"));
        }
        LoadKey(keyPairArray);
        GetRSA();
    }
    
    void StrongNameKeyPair::constructor(System::IO::FileStream* keyPairFile) {
        if((keyPairFile ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("keyPairFile"));
        }
        cli::array<unsigned char> *input = (new cli::array<unsigned char>((int32_t)keyPairFile->get_Length_ddb8b0d061db5350()));
        keyPairFile->Read_c0d6dde3943b413e(input, 0, input->get_Length());
        LoadKey(input);
        GetRSA();
    }
    
    void StrongNameKeyPair::constructor(System::String* keyPairContainer) {
        if((keyPairContainer ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("keyPairContainer"));
        }
        this->_keyPairContainer = keyPairContainer;
        GetRSA();
    }
    
    void StrongNameKeyPair::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        this->_publicKey = cli::cast<cli::array<unsigned char>*>(info->GetValue(_T("_publicKey"), cli::typeof<System::Type>::info));
        this->_keyPairContainer = info->GetString(_T("_keyPairContainer"));
        this->_keyPairExported = info->GetBoolean(_T("_keyPairExported"));
        this->_keyPairArray = cli::cast<cli::array<unsigned char>*>(info->GetValue(_T("_keyPairArray"), cli::typeof<System::Type>::info));
    }
    
    void StrongNameKeyPair::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        info->AddValue(_T("_publicKey"), this->_publicKey, cli::typeof<System::Type>::info);
        info->AddValue16(_T("_keyPairContainer"), this->_keyPairContainer);
        info->AddValue6(_T("_keyPairExported"), this->_keyPairExported);
        info->AddValue(_T("_keyPairArray"), this->_keyPairArray, cli::typeof<System::Type>::info);
    }
    
    void StrongNameKeyPair::OnDeserialization(System::Object* sender) {
    }
    
    System::Security::Cryptography::RSA* StrongNameKeyPair::GetRSA() {
        if((this->_rsa != nullptr)) 
        {
            return this->_rsa;
        }
        if((this->_keyPairArray != nullptr)) 
        {
            try {
                this->_rsa = Mono::Security::Cryptography::CryptoConvert::FromCapiKeyBlob(this->_keyPairArray);
            }
            catch(...) {
                this->_keyPairArray = nullptr;
            }
        }
         else 
        {
            if((this->_keyPairContainer != nullptr)) 
            {
                System::Security::Cryptography::CspParameters *csp = cli::gcnew<System::Security::Cryptography::CspParameters>();
                csp->KeyContainerName = this->_keyPairContainer;
                this->_rsa = cli::gcnew<System::Security::Cryptography::RSACryptoServiceProvider>(csp);
            }
        }
        return this->_rsa;
    }
    
    void StrongNameKeyPair::LoadKey(cli::array<unsigned char>* key) {
        try {
            if((key->get_Length() ==  16)) 
            {
                int32_t i = 0;
                int32_t sum = 0;
                while((i < key->get_Length())) (sum = sum + (int32_t)(key->at(i++)));
                if((sum ==  4)) 
                {
                    this->_publicKey = cli::cast<cli::array<unsigned char>*>(cli::import(key)->Clone());
                }
            }
             else 
            {
                this->_keyPairArray = key;
            }
        }
        catch(...) {
        }
    }
    
    Mono::Security::StrongName* StrongNameKeyPair::StrongName3() {
        System::Security::Cryptography::RSA *rsa = GetRSA();
        if((rsa != nullptr)) 
        {
            return cli::gcnew<Mono::Security::StrongName>(rsa);
        }
        if((this->_publicKey != nullptr)) 
        {
            return cli::gcnew<Mono::Security::StrongName>(this->_publicKey);
        }
        return nullptr;
    }
    
    cli::array<unsigned char>* StrongNameKeyPair::get_PublicKey() {
        if((this->_publicKey ==  nullptr)) 
        {
            System::Security::Cryptography::RSA *rsa = GetRSA();
            if((rsa ==  nullptr)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("invalid keypair"));
            }
            cli::array<unsigned char> *blob = Mono::Security::Cryptography::CryptoConvert::ToCapiKeyBlob2(rsa, false);
            this->_publicKey = (new cli::array<unsigned char>((blob->get_Length() + 12)));
            this->_publicKey->at(0) = 0;
            this->_publicKey->at(1) = 36;
            this->_publicKey->at(2) = 0;
            this->_publicKey->at(3) = 0;
            this->_publicKey->at(4) = 4;
            this->_publicKey->at(5) = 128;
            this->_publicKey->at(6) = 0;
            this->_publicKey->at(7) = 0;
            int32_t lastPart = blob->get_Length();
            this->_publicKey->at(8) = (unsigned char)(lastPart % 256);
            this->_publicKey->at(9) = (unsigned char)(lastPart / 256);
            this->_publicKey->at(10) = 0;
            this->_publicKey->at(11) = 0;
            System::Buffer::BlockCopy(blob, 0, this->_publicKey, 12, blob->get_Length());
        }
        return this->_publicKey;
    }
    
}}
namespace System { namespace Reflection {
    
    
    void TargetException::constructor() {
    }
    
    void TargetException::constructor(System::String* message) {
    }
    
    void TargetException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void TargetException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void TargetInvocationException::constructor(System::Exception* inner) {
    }
    
    void TargetInvocationException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void TargetInvocationException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext sc) {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void TargetParameterCountException::constructor() {
    }
    
    void TargetParameterCountException::constructor(System::String* message) {
    }
    
    void TargetParameterCountException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void TargetParameterCountException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Reflection {
    
    
    void TypeDelegator::constructor() {
    }
    
    void TypeDelegator::constructor(System::Type* delegatingType) {
        if(System::Type::op_Equality2(delegatingType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("delegatingType must be non-null"));
        }
        this->typeImpl = delegatingType;
    }
    
    TypeAttributes TypeDelegator::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->typeImpl->get_Attributes();
    }
    
    ConstructorInfo* TypeDelegator::GetConstructorImpl_a21b5d13a475afe1(BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        return this->typeImpl->GetConstructor4(bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<ConstructorInfo*>* TypeDelegator::GetConstructors_736b6e990b94b352(BindingFlags bindingAttr) {
        return this->typeImpl->GetConstructors_736b6e990b94b352(bindingAttr);
    }
    
    cli::array<System::Object*>* TypeDelegator::GetCustomAttributes_b790992b66049291(bool inherit) {
        return this->typeImpl->GetCustomAttributes_b790992b66049291(inherit);
    }
    
    cli::array<System::Object*>* TypeDelegator::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return this->typeImpl->GetCustomAttributes_90419687cfa65ef7(attributeType, inherit);
    }
    
    System::Type* TypeDelegator::GetElementType_ab5070dbbfe66f5f() {
        return this->typeImpl->GetElementType_ab5070dbbfe66f5f();
    }
    
    EventInfo* TypeDelegator::GetEvent_7f053fa54114e387(System::String* name, BindingFlags bindingAttr) {
        return this->typeImpl->GetEvent_7f053fa54114e387(name, bindingAttr);
    }
    
    cli::array<EventInfo*>* TypeDelegator::GetEvents_e6858c959b77de38() {
        return GetEvents_3631c7eff1e31bf4(BindingFlags::Public);
    }
    
    cli::array<EventInfo*>* TypeDelegator::GetEvents_a960b087e4d67be2(BindingFlags bindingAttr) {
        return this->typeImpl->GetEvents_a960b087e4d67be2(bindingAttr);
    }
    
    FieldInfo* TypeDelegator::GetField_fb08cba9d1a4bc84(System::String* name, BindingFlags bindingAttr) {
        return this->typeImpl->GetField_fb08cba9d1a4bc84(name, bindingAttr);
    }
    
    cli::array<FieldInfo*>* TypeDelegator::GetFields_369be5ac49d99f8(BindingFlags bindingAttr) {
        return this->typeImpl->GetFields_369be5ac49d99f8(bindingAttr);
    }
    
    System::Type* TypeDelegator::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        return this->typeImpl->GetInterface_55c1d0ec3ece6104(name, ignoreCase);
    }
    
    InterfaceMapping TypeDelegator::GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) {
        return this->typeImpl->GetInterfaceMap_26193b1c1167fea4(interfaceType);
    }
    
    cli::array<System::Type*>* TypeDelegator::GetInterfaces_52a89380e2c4a725() {
        return this->typeImpl->GetInterfaces_52a89380e2c4a725();
    }
    
    cli::array<MemberInfo*>* TypeDelegator::GetMember_9c934e7384b805e1(System::String* name, MemberTypes type, BindingFlags bindingAttr) {
        return this->typeImpl->GetMember_9c934e7384b805e1(name, type, bindingAttr);
    }
    
    cli::array<MemberInfo*>* TypeDelegator::GetMembers_54432b0ff6e99174(BindingFlags bindingAttr) {
        return this->typeImpl->GetMembers_54432b0ff6e99174(bindingAttr);
    }
    
    MethodInfo* TypeDelegator::GetMethodImpl_1b221ab713bbcb85(System::String* name, BindingFlags bindingAttr, Binder* binder, CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        return this->typeImpl->GetMethodImplInternal(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<MethodInfo*>* TypeDelegator::GetMethods_c5b4e5d4877e6672(BindingFlags bindingAttr) {
        return this->typeImpl->GetMethods_c5b4e5d4877e6672(bindingAttr);
    }
    
    System::Type* TypeDelegator::GetNestedType_31962c16c0c85df9(System::String* name, BindingFlags bindingAttr) {
        return this->typeImpl->GetNestedType_31962c16c0c85df9(name, bindingAttr);
    }
    
    cli::array<System::Type*>* TypeDelegator::GetNestedTypes_bb6ee40b0fa4052d(BindingFlags bindingAttr) {
        return this->typeImpl->GetNestedTypes_bb6ee40b0fa4052d(bindingAttr);
    }
    
    cli::array<PropertyInfo*>* TypeDelegator::GetProperties_9fb6c40e3662fdd7(BindingFlags bindingAttr) {
        return this->typeImpl->GetProperties_9fb6c40e3662fdd7(bindingAttr);
    }
    
    PropertyInfo* TypeDelegator::GetPropertyImpl_e2328b7ad87384ee(System::String* name, BindingFlags bindingAttr, Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<ParameterModifier>* modifiers) {
        return this->typeImpl->GetPropertyImplInternal(name, bindingAttr, binder, returnType, types, modifiers);
    }
    
    bool TypeDelegator::HasElementTypeImpl_36e3ca23a6e8185() {
        return this->typeImpl->get_HasElementType();
    }
    
    System::Object* TypeDelegator::InvokeMember_70c4601d847070a2(System::String* name, BindingFlags invokeAttr, Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        return this->typeImpl->InvokeMember_70c4601d847070a2(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
    }
    
    bool TypeDelegator::IsArrayImpl_cf15f782d0773ffd() {
        return this->typeImpl->get_IsArray();
    }
    
    bool TypeDelegator::IsByRefImpl_a1c403acfb80fd15() {
        return this->typeImpl->get_IsByRef();
    }
    
    bool TypeDelegator::IsCOMObjectImpl_27dfb5d026264856() {
        return this->typeImpl->get_IsCOMObject();
    }
    
    bool TypeDelegator::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return this->typeImpl->IsDefined_91943a8ac363f11f(attributeType, inherit);
    }
    
    bool TypeDelegator::IsPointerImpl_86e7f94717f8b1ea() {
        return this->typeImpl->get_IsPointer();
    }
    
    bool TypeDelegator::IsPrimitiveImpl_b5951f74b8c48703() {
        return this->typeImpl->get_IsPrimitive();
    }
    
    bool TypeDelegator::IsValueTypeImpl_fe1651255927f3c6() {
        return this->typeImpl->get_IsValueType();
    }
    
    Assembly* TypeDelegator::get_Assembly_3aae0acbf2a6d696() {
        return this->typeImpl->get_Assembly_3aae0acbf2a6d696();
    }
    
    System::String* TypeDelegator::get_AssemblyQualifiedName_cea373c2171bd483() {
        return this->typeImpl->get_AssemblyQualifiedName_cea373c2171bd483();
    }
    
    System::Type* TypeDelegator::get_BaseType_6a0646ae880055f6() {
        return this->typeImpl->get_BaseType_6a0646ae880055f6();
    }
    
    System::String* TypeDelegator::get_FullName_7e8fa72ba225e1a4() {
        return this->typeImpl->get_FullName_7e8fa72ba225e1a4();
    }
    
    System::Guid TypeDelegator::get_GUID_bdb6b630c3237a21() {
        return this->typeImpl->get_GUID_bdb6b630c3237a21();
    }
    
    Module* TypeDelegator::get_Module_ea7d65dc88202263() {
        return this->typeImpl->get_Module_ea7d65dc88202263();
    }
    
    System::String* TypeDelegator::get_Name_50fad5fa936c3ae2() {
        return this->typeImpl->get_Name_50fad5fa936c3ae2();
    }
    
    System::String* TypeDelegator::get_Namespace_cb4ed37007083e7f() {
        return this->typeImpl->get_Namespace_cb4ed37007083e7f();
    }
    
    System::RuntimeTypeHandle TypeDelegator::get_TypeHandle_a14995fa9102936b() {
        return this->typeImpl->get_TypeHandle_a14995fa9102936b();
    }
    
    System::Type* TypeDelegator::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        return this->typeImpl->get_UnderlyingSystemType_9ccb7bb8385521f6();
    }
    
    int32_t TypeDelegator::get_MetadataToken_85fbeea46e971f25() {
        return this->typeImpl->get_MetadataToken_85fbeea46e971f25();
    }
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void GenericInstanceKey::constructor(System::Type* gtd, cli::array<System::Type*>* args) {
        this->gtd = gtd;
        this->args = args;
        this->hash_code = gtd->GetHashCode_6648aef0f235ee6c();
        for(int32_t i = 0; (i < args->get_Length()); ++i) {
            (this->hash_code = this->hash_code ^ args->at(i)->GetHashCode_6648aef0f235ee6c());
        }
    }
    
    bool GenericInstanceKey::IsBoundedVector(System::Type* type) {
        ArrayType *at = cli::as<ArrayType*>(type);
        if(System::Type::op_Inequality2(at, nullptr)) 
        {
            return (at->GetEffectiveRank() ==  1);
        }
        return type->ToString_1636a0751cb9ac11()->EndsWith3(_T("[*]"), System::StringComparison::Ordinal);
    }
    
    bool GenericInstanceKey::TypeEquals(System::Type* a, System::Type* b) {
        if(System::Type::op_Equality2(a, b)) 
        {
            return true;
        }
        if(a->get_HasElementType()) 
        {
            if(!(b->get_HasElementType())) 
            {
                return false;
            }
            if(!(TypeEquals(a->GetElementType_ab5070dbbfe66f5f(), b->GetElementType_ab5070dbbfe66f5f()))) 
            {
                return false;
            }
            if(a->get_IsArray()) 
            {
                if(!(b->get_IsArray())) 
                {
                    return false;
                }
                int32_t rank = a->GetArrayRank_fccf91da5e4acf4f();
                if((rank != b->GetArrayRank_fccf91da5e4acf4f())) 
                {
                    return false;
                }
                if(((rank ==  1) && (IsBoundedVector(a) != IsBoundedVector(b)))) 
                {
                    return false;
                }
            }
             else 
            {
                if(a->get_IsByRef()) 
                {
                    if(!(b->get_IsByRef())) 
                    {
                        return false;
                    }
                }
                 else 
                {
                    if(a->get_IsPointer()) 
                    {
                        if(!(b->get_IsPointer())) 
                        {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        if(a->get_IsGenericType_4db8ddd5b97f3c14()) 
        {
            if(!(b->get_IsGenericType_4db8ddd5b97f3c14())) 
            {
                return false;
            }
            if(a->get_IsGenericParameter_2a17c4bf67798b07()) 
            {
                return System::Type::op_Equality2(a, b);
            }
            if(a->get_IsGenericParameter_2a17c4bf67798b07()) 
            {
                return false;
            }
            if(a->get_IsGenericTypeDefinition_8008dd501dc43926()) 
            {
                if(!(b->get_IsGenericTypeDefinition_8008dd501dc43926())) 
                {
                    return false;
                }
            }
             else 
            {
                if(b->get_IsGenericTypeDefinition_8008dd501dc43926()) 
                {
                    return false;
                }
                if(!(TypeEquals(a->GetGenericTypeDefinition_15f8fc7813e8e8bf(), b->GetGenericTypeDefinition_15f8fc7813e8e8bf()))) 
                {
                    return false;
                }
                cli::array<System::Type*> *argsA = a->GetGenericArguments_a7fb476275cfe9a3();
                cli::array<System::Type*> *argsB = b->GetGenericArguments_a7fb476275cfe9a3();
                for(int32_t i = 0; (i < argsA->get_Length()); ++i){
                    if(!(TypeEquals(argsA->at(i), argsB->at(i)))) 
                    {
                        return false;
                    }
                }
            }
        }
        return System::Type::op_Equality2(a, b);
    }
    
    bool GenericInstanceKey::Equals_ed975d2f4a7d193e(System::Object* obj) {
        GenericInstanceKey *other = cli::as<GenericInstanceKey*>(obj);
        if((other ==  nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Inequality2(this->gtd, other->gtd)) 
        {
            return false;
        }
        for(int32_t i = 0; (i < this->args->get_Length()); ++i){
            System::Type *a = this->args->at(i);
            System::Type *b = other->args->at(i);
            if((System::Type::op_Inequality2(a, b) && !(a->Equals_f28141a5881cf9e3(b)))) 
            {
                return false;
            }
        }
        return true;
    }
    
    int32_t GenericInstanceKey::GetHashCode_6648aef0f235ee6c() {
        return this->hash_code;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void AssemblyBuilder::constructor(System::Reflection::AssemblyName* n, System::String* directory, AssemblyBuilderAccess access, bool corlib_internal) {
        if(((int32_t)(((int32_t)(access) & 2048)) != 0)) 
        {
            throw cli::gcnew<System::NotImplementedException>(_T("COMPILER_ACCESS is no longer supperted, use a newer mcs."));
        }
        if(!(System::Enum::IsDefined(cli::typeof<System::Type>::info, cli::box(access)))) 
        {
            throw cli::gcnew<System::ArgumentException>(System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("Argument value {0} is not valid."), (new cli::array<System::Object*>({cli::box((int32_t)(access))}))), _T("access"));
        }
        this->name = n->get_Name();
        this->access = (uint32_t)((uint32_t)(int32_t)(access));
        this->flags = (uint32_t)((uint32_t)(int32_t)(n->get_Flags()));
        if((this->get_IsSave() && ((directory ==  nullptr) || (directory->get_Length() ==  0)))) 
        {
            this->dir = System::IO::Directory::GetCurrentDirectory();
        }
         else 
        {
            this->dir = directory;
        }
        if((n->get_CultureInfo() != nullptr)) 
        {
            this->culture = n->get_CultureInfo()->get_Name_7a59bd1b86cfacd3();
            this->versioninfo_culture = n->get_CultureInfo()->get_Name_7a59bd1b86cfacd3();
        }
        System::Version *v = n->get_Version();
        if(System::Version::op_Inequality(v, nullptr)) 
        {
            this->version = v->ToString_1636a0751cb9ac11();
        }
        if((n->get_KeyPair() != nullptr)) 
        {
            this->sn = n->get_KeyPair()->StrongName3();
        }
         else 
        {
            cli::array<unsigned char> *pk = n->GetPublicKey();
            if(((pk != nullptr) && (pk->get_Length() > 0))) 
            {
                this->sn = cli::gcnew<Mono::Security::StrongName>(pk);
            }
        }
        if((this->sn != nullptr)) 
        {
            (this->flags = this->flags | 1U);
        }
        this->corlib_internal = corlib_internal;
        if((this->sn != nullptr)) 
        {
            this->pktoken = (new cli::array<unsigned char>((this->sn->get_PublicKeyToken()->get_Length() * 2)));
            int32_t pkti = 0;
            for(auto tmp_265 : this->sn->get_PublicKeyToken()) {
                auto pkb = cli::cast<unsigned char>(tmp_265);
                {
                    System::String *part = cli::import(pkb)->ToString3(_T("x2"));
                    this->pktoken->at(pkti++) = (unsigned char)part->get_Chars(0);
                    this->pktoken->at(pkti++) = (unsigned char)part->get_Chars(1);
                }
            }
        }
        basic_init(this);
    }
    
    void AssemblyBuilder::basic_init(AssemblyBuilder* ab) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyBuilder::AddResourceFile(System::String* name, System::String* fileName) {
        AddResourceFile2(name, fileName, System::Reflection::ResourceAttributes::Public);
    }
    
    void AssemblyBuilder::AddResourceFile2(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute) {
        AddResourceFile3(name, fileName, attribute, true);
    }
    
    void AssemblyBuilder::AddResourceFile3(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute, bool fileNeedsToExists) {
        check_name_and_filename(name, fileName, fileNeedsToExists);
        if((this->dir != nullptr)) 
        {
            fileName = System::IO::Path::Combine(this->dir, fileName);
        }
        if((this->resources != nullptr)) 
        {
            cli::array<MonoResource> *new_r = (new cli::array<MonoResource>((this->resources->get_Length() + 1)));
            System::Array::Copy(this->resources, new_r, this->resources->get_Length());
            this->resources = new_r;
        }
         else 
        {
            this->resources = (new cli::array<MonoResource>(1));
        }
        int32_t p = (this->resources->get_Length() - 1);
        this->resources->at(p)->name = name;
        this->resources->at(p)->filename = fileName;
        this->resources->at(p)->attrs = attribute;
    }
    
    void AssemblyBuilder::AddPermissionRequests(System::Security::PermissionSet* required, System::Security::PermissionSet* optional, System::Security::PermissionSet* refused) {
        if(this->created) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Assembly was already saved."));
        }
        this->_minimum = required;
        this->_optional = optional;
        this->_refuse = refused;
        if((required != nullptr)) 
        {
            this->permissions_minimum = (new cli::array<RefEmitPermissionSet>(1));
            this->permissions_minimum->at(0) = cli::ctor<RefEmitPermissionSet>(System::Security::Permissions::SecurityAction::RequestMinimum, required->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        }
        if((optional != nullptr)) 
        {
            this->permissions_optional = (new cli::array<RefEmitPermissionSet>(1));
            this->permissions_optional->at(0) = cli::ctor<RefEmitPermissionSet>(System::Security::Permissions::SecurityAction::RequestOptional, optional->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        }
        if((refused != nullptr)) 
        {
            this->permissions_refused = (new cli::array<RefEmitPermissionSet>(1));
            this->permissions_refused->at(0) = cli::ctor<RefEmitPermissionSet>(System::Security::Permissions::SecurityAction::RequestRefuse, refused->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        }
    }
    
    void AssemblyBuilder::EmbedResourceFile(System::String* name, System::String* fileName) {
        EmbedResourceFile2(name, fileName, System::Reflection::ResourceAttributes::Public);
    }
    
    void AssemblyBuilder::EmbedResourceFile2(System::String* name, System::String* fileName, System::Reflection::ResourceAttributes attribute) {
        if((this->resources != nullptr)) 
        {
            cli::array<MonoResource> *new_r = (new cli::array<MonoResource>((this->resources->get_Length() + 1)));
            System::Array::Copy(this->resources, new_r, this->resources->get_Length());
            this->resources = new_r;
        }
         else 
        {
            this->resources = (new cli::array<MonoResource>(1));
        }
        int32_t p = (this->resources->get_Length() - 1);
        this->resources->at(p)->name = name;
        this->resources->at(p)->attrs = attribute;
        try {
            System::IO::FileStream *s = cli::gcnew<System::IO::FileStream>(fileName, System::IO::FileMode::Open, System::IO::FileAccess::Read);
            int64_t len = s->get_Length_ddb8b0d061db5350();
            this->resources->at(p)->data = (new cli::array<unsigned char>((int32_t)len));
            s->Read_c0d6dde3943b413e(this->resources->at(p)->data, 0, (int32_t)len);
            s->Close_59c62ed53ef2a481();
        }
        catch(...) {
        }
    }
    
    ModuleBuilder* AssemblyBuilder::DefineDynamicModule(System::String* name) {
        return DefineDynamicModule5(name, name, false, true);
    }
    
    ModuleBuilder* AssemblyBuilder::DefineDynamicModule2(System::String* name, bool emitSymbolInfo) {
        return DefineDynamicModule5(name, name, emitSymbolInfo, true);
    }
    
    ModuleBuilder* AssemblyBuilder::DefineDynamicModule3(System::String* name, System::String* fileName) {
        return DefineDynamicModule5(name, fileName, false, false);
    }
    
    ModuleBuilder* AssemblyBuilder::DefineDynamicModule4(System::String* name, System::String* fileName, bool emitSymbolInfo) {
        return DefineDynamicModule5(name, fileName, emitSymbolInfo, false);
    }
    
    ModuleBuilder* AssemblyBuilder::DefineDynamicModule5(System::String* name, System::String* fileName, bool emitSymbolInfo, bool transient) {
        check_name_and_filename(name, fileName, false);
        if(!(transient)) 
        {
            if(System::String::op_Equality(System::IO::Path::GetExtension(fileName), System::String::Empty)) 
            {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Module file name \'"), fileName));
            }
            if(!(this->get_IsSave())) 
            {
                throw cli::gcnew<System::NotSupportedException>(_T("Persistable modules are not supported in a dynamic assembly created with AssemblyBuilderAccess.Run"));
            }
            if(this->created) 
            {
                throw cli::gcnew<System::InvalidOperationException>(_T("Assembly was already saved."));
            }
        }
        ModuleBuilder *r = cli::gcnew<ModuleBuilder>(this, name, fileName, emitSymbolInfo, transient);
        if(((this->modules != nullptr) && this->is_module_only)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("A module-only assembly can only contain one module."));
        }
        if((this->modules != nullptr)) 
        {
            cli::array<ModuleBuilder*> *new_modules = (new cli::array<ModuleBuilder*>((this->modules->get_Length() + 1)));
            System::Array::Copy(this->modules, new_modules, this->modules->get_Length());
            this->modules = new_modules;
        }
         else 
        {
            this->modules = (new cli::array<ModuleBuilder*>(1));
        }
        this->modules->at((this->modules->get_Length() - 1)) = r;
        return r;
    }
    
    System::Resources::IResourceWriter* AssemblyBuilder::DefineResource(System::String* name, System::String* description, System::String* fileName) {
        return DefineResource2(name, description, fileName, System::Reflection::ResourceAttributes::Public);
    }
    
    System::Resources::IResourceWriter* AssemblyBuilder::DefineResource2(System::String* name, System::String* description, System::String* fileName, System::Reflection::ResourceAttributes attribute) {
        System::Resources::IResourceWriter *writer;
        AddResourceFile3(name, fileName, attribute, false);
        writer = cli::gcnew<System::Resources::ResourceWriter>(fileName);
        if((this->resource_writers ==  nullptr)) 
        {
            this->resource_writers = cli::gcnew<System::Collections::ArrayList>();
        }
        this->resource_writers->Add_e6a92085999ce388(writer);
        return writer;
    }
    
    void AssemblyBuilder::AddUnmanagedResource(System::Resources::Win32Resource* res) {
        System::IO::MemoryStream *ms = cli::gcnew<System::IO::MemoryStream>();
        res->WriteTo_c67bbc499a650118(ms);
        if((this->win32_resources != nullptr)) 
        {
            cli::array<MonoWin32Resource> *new_res = (new cli::array<MonoWin32Resource>((this->win32_resources->get_Length() + 1)));
            System::Array::Copy(this->win32_resources, new_res, this->win32_resources->get_Length());
            this->win32_resources = new_res;
        }
         else 
        {
            this->win32_resources = (new cli::array<MonoWin32Resource>(1));
        }
        this->win32_resources->at((this->win32_resources->get_Length() - 1)) = cli::ctor<MonoWin32Resource>(res->get_Type()->get_Id(), res->get_Name()->get_Id(), res->get_Language(), ms->ToArray_ebf8bde16e9d2ad6());
    }
    
    void AssemblyBuilder::DefineUnmanagedResource(cli::array<unsigned char>* resource) {
        if((resource ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resource"));
        }
        if(((int32_t)(this->native_resource) != 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Native resource has already been defined."));
        }
        this->native_resource = NativeResourceType::Unmanaged;
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyBuilder::DefineUnmanagedResource2(System::String* resourceFileName) {
        if((resourceFileName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resourceFileName"));
        }
        if((resourceFileName->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("resourceFileName"));
        }
        if((!(System::IO::File::Exists(resourceFileName)) || System::IO::Directory::Exists(resourceFileName))) 
        {
            throw cli::gcnew<System::IO::FileNotFoundException>(cli::concat(_T("File \'"), resourceFileName));
        }
        if(((int32_t)(this->native_resource) != 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Native resource has already been defined."));
        }
        this->native_resource = NativeResourceType::Unmanaged;
        {
            /* USING - BLOCK */
            auto fs = cli::gcnew<System::IO::FileStream>(resourceFileName, System::IO::FileMode::Open, System::IO::FileAccess::Read);
            cli::using_guard{fs};
            System::Resources::Win32ResFileReader *reader = cli::gcnew<System::Resources::Win32ResFileReader>(fs);
            for(auto tmp_266 : reader->ReadResources()) {
                auto res = cli::cast<System::Resources::Win32EncodedResource*>(tmp_266);
                {
                    if((res->get_Name()->get_IsName() || res->get_Type()->get_IsName())) 
                    {
                        throw cli::gcnew<System::InvalidOperationException>(_T("resource files with named resources or non-default resource types are not supported."));
                    }
                    AddUnmanagedResource(res);
                }
            }
        }
    }
    
    void AssemblyBuilder::DefineVersionInfoResource() {
        if(((int32_t)(this->native_resource) != 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Native resource has already been defined."));
        }
        this->native_resource = NativeResourceType::Assembly2;
        this->version_res = cli::gcnew<System::Resources::Win32VersionResource>(1, 0, false);
    }
    
    void AssemblyBuilder::DefineVersionInfoResource2(System::String* product, System::String* productVersion, System::String* company, System::String* copyright, System::String* trademark) {
        if(((int32_t)(this->native_resource) != 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Native resource has already been defined."));
        }
        this->native_resource = NativeResourceType::Explicit;
        this->version_res = cli::gcnew<System::Resources::Win32VersionResource>(1, 0, false);
        this->version_res->set_ProductName_8e2f958b8d465792((product != nullptr) ? product : _T(" "));
        this->version_res->set_ProductVersion_79ce0dccd0359143((productVersion != nullptr) ? productVersion : _T(" "));
        this->version_res->set_CompanyName_75df1ff63122ba96((company != nullptr) ? company : _T(" "));
        this->version_res->set_LegalCopyright_72dcc52259fa2266((copyright != nullptr) ? copyright : _T(" "));
        this->version_res->set_LegalTrademarks_f4351a90b4de437a((trademark != nullptr) ? trademark : _T(" "));
    }
    
    void AssemblyBuilder::DefineVersionInfoResourceImpl(System::String* fileName) {
        if((this->versioninfo_culture != nullptr)) 
        {
            this->version_res->set_FileLanguage_c5e46a38112121c2(cli::gcnew<System::Globalization::CultureInfo>(this->versioninfo_culture)->get_LCID_f4b9bc9d0bf0db86());
        }
        this->version_res->set_Version((this->version ==  nullptr) ? _T("0.0.0.0") : this->version);
        if((this->cattrs != nullptr)) 
        {
            switch(this->native_resource) {
                case NativeResourceType::Assembly2: case_1210: {
                    for(auto tmp_267 : this->cattrs) {
                        auto cb = cli::cast<CustomAttributeBuilder*>(tmp_267);
                        {
                            System::String *attrname = cb->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
                            if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyProductAttribute"))) 
                            {
                                this->version_res->set_ProductName_8e2f958b8d465792(cb->string_arg());
                            }
                             else 
                            {
                                if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyCompanyAttribute"))) 
                                {
                                    this->version_res->set_CompanyName_75df1ff63122ba96(cb->string_arg());
                                }
                                 else 
                                {
                                    if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyCopyrightAttribute"))) 
                                    {
                                        this->version_res->set_LegalCopyright_72dcc52259fa2266(cb->string_arg());
                                    }
                                     else 
                                    {
                                        if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyTrademarkAttribute"))) 
                                        {
                                            this->version_res->set_LegalTrademarks_f4351a90b4de437a(cb->string_arg());
                                        }
                                         else 
                                        {
                                            if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyCultureAttribute"))) 
                                            {
                                                this->version_res->set_FileLanguage_c5e46a38112121c2(cli::gcnew<System::Globalization::CultureInfo>(cb->string_arg())->get_LCID_f4b9bc9d0bf0db86());
                                            }
                                             else 
                                            {
                                                if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyFileVersionAttribute"))) 
                                                {
                                                    this->version_res->set_FileVersion_9572d918259eff23(cb->string_arg());
                                                }
                                                 else 
                                                {
                                                    if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyInformationalVersionAttribute"))) 
                                                    {
                                                        this->version_res->set_ProductVersion_79ce0dccd0359143(cb->string_arg());
                                                    }
                                                     else 
                                                    {
                                                        if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyTitleAttribute"))) 
                                                        {
                                                            this->version_res->set_FileDescription_54aa53809e1edc34(cb->string_arg());
                                                        }
                                                         else 
                                                        {
                                                            if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyDescriptionAttribute"))) 
                                                            {
                                                                this->version_res->set_Comments_ba80af877239af8f(cb->string_arg());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                }
                case NativeResourceType::Explicit: case_1211: {
                    for(auto tmp_268 : this->cattrs) {
                        auto cb = cli::cast<CustomAttributeBuilder*>(tmp_268);
                        {
                            System::String *attrname = cb->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
                            if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyCultureAttribute"))) 
                            {
                                this->version_res->set_FileLanguage_c5e46a38112121c2(cli::gcnew<System::Globalization::CultureInfo>(cb->string_arg())->get_LCID_f4b9bc9d0bf0db86());
                            }
                             else 
                            {
                                if(System::String::op_Equality(attrname, _T("System.Reflection.AssemblyDescriptionAttribute"))) 
                                {
                                    this->version_res->set_Comments_ba80af877239af8f(cb->string_arg());
                                }
                            }
                        }
                    }
                    break;
                }
            }
        }
        this->version_res->set_OriginalFilename_6fc219c4b034e23f(fileName);
        this->version_res->set_InternalName_cc60ad1d2c83711f(System::IO::Path::GetFileNameWithoutExtension(fileName));
        AddUnmanagedResource(this->version_res);
    }
    
    ModuleBuilder* AssemblyBuilder::GetDynamicModule(System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Empty name is not legal."), _T("name"));
        }
        if((this->modules != nullptr)) 
        for(int32_t i = 0; (i < this->modules->get_Length()); ++i) {
            if(System::String::op_Equality(this->modules->at(i)->name, name)) 
            {
                return this->modules->at(i);
            }
        }
        return nullptr;
    }
    
    cli::array<System::Type*>* AssemblyBuilder::GetExportedTypes_4dc21035aef13039() {
        throw not_supported();
    }
    
    System::IO::FileStream* AssemblyBuilder::GetFile_321baf5b87b86022(System::String* name) {
        throw not_supported();
    }
    
    cli::array<System::IO::FileStream*>* AssemblyBuilder::GetFiles_4b160752c34b70d5(bool getResourceModules) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::Module*>* AssemblyBuilder::GetModulesInternal_ea568dcc02539ffb() {
        if((this->modules ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::Module*>(0));
        }
         else 
        {
            return cli::cast<cli::array<System::Reflection::Module*>*>(cli::import(this->modules)->Clone());
        }
    }
    
    cli::array<System::Type*>* AssemblyBuilder::GetTypes_7d5d1df2c0939ee2(bool exportedOnly) {
        cli::array<System::Type*> *res = nullptr;
        if((this->modules != nullptr)) 
        {
            for(int32_t i = 0; (i < this->modules->get_Length()); ++i){
                cli::array<System::Type*> *types = this->modules->at(i)->GetTypes_a0a49ca31fb27210();
                if((res ==  nullptr)) 
                {
                    res = types;
                }
                 else 
                {
                    cli::array<System::Type*> *tmp = (new cli::array<System::Type*>((res->get_Length() + types->get_Length())));
                    System::Array::Copy2(res, 0, tmp, 0, res->get_Length());
                    System::Array::Copy2(types, 0, tmp, res->get_Length(), types->get_Length());
                }
            }
        }
        if((this->loaded_modules != nullptr)) 
        {
            for(int32_t i = 0; (i < this->loaded_modules->get_Length()); ++i){
                cli::array<System::Type*> *types = this->loaded_modules->at(i)->GetTypes_a0a49ca31fb27210();
                if((res ==  nullptr)) 
                {
                    res = types;
                }
                 else 
                {
                    cli::array<System::Type*> *tmp = (new cli::array<System::Type*>((res->get_Length() + types->get_Length())));
                    System::Array::Copy2(res, 0, tmp, 0, res->get_Length());
                    System::Array::Copy2(types, 0, tmp, res->get_Length(), types->get_Length());
                }
            }
        }
        if((res != nullptr)) 
        {
            System::Collections::Generic::List<System::Exception*> *exceptions = nullptr;
            for(auto tmp_269 : res) {
                auto type = cli::cast<System::Type*>(tmp_269);
                {
                    if(cli::is<TypeBuilder>(type)) 
                    {
                        if((exceptions ==  nullptr)) 
                        {
                            exceptions = cli::gcnew<System::Collections::Generic::List<System::Exception*>>();
                        }
                        exceptions->Add(cli::gcnew<System::TypeLoadException>(System::String::Format2(_T("Type \'{0}\' is not finished"), type->get_FullName_7e8fa72ba225e1a4())));
                    }
                }
            }
            if((exceptions != nullptr)) 
            {
                throw cli::gcnew<System::Reflection::ReflectionTypeLoadException>((new cli::array<System::Type*>(exceptions->get_Count())), exceptions->ToArray());
            }
        }
        return (res ==  nullptr) ? System::Type::EmptyTypes : res;
    }
    
    System::Reflection::ManifestResourceInfo* AssemblyBuilder::GetManifestResourceInfo_2cc36efdd5a68bdc(System::String* resourceName) {
        throw not_supported();
    }
    
    cli::array<System::String*>* AssemblyBuilder::GetManifestResourceNames_d63b24d819c7a44d() {
        throw not_supported();
    }
    
    System::IO::Stream* AssemblyBuilder::GetManifestResourceStream_b395b331908084e(System::String* name) {
        throw not_supported();
    }
    
    System::IO::Stream* AssemblyBuilder::GetManifestResourceStream_6ad572412eedcffd(System::Type* type, System::String* name) {
        throw not_supported();
    }
    
    System::Reflection::Module* AssemblyBuilder::GetManifestModule_e233b7576740b3d7() {
        if(System::Reflection::Module::op_Equality(this->manifest_module, nullptr)) 
        {
            this->manifest_module = DefineDynamicModule(_T("Default Dynamic Module"));
        }
        return this->manifest_module;
    }
    
    void AssemblyBuilder::Save(System::String* assemblyFileName, System::Reflection::PortableExecutableKinds portableExecutableKind, System::Reflection::ImageFileMachine imageFileMachine) {
        this->peKind = portableExecutableKind;
        this->machine = imageFileMachine;
        if((((int32_t)(((int32_t)(this->peKind) & 4)) != 0) || ((int32_t)(((int32_t)(this->peKind) & 8)) != 0))) 
        {
            throw cli::gcnew<System::NotImplementedException>(cli::import(this->peKind)->ToString_1636a0751cb9ac11());
        }
        if((((int32_t)(this->machine) ==  512) || ((int32_t)(this->machine) ==  34404))) 
        {
            throw cli::gcnew<System::NotImplementedException>(cli::import(this->machine)->ToString_1636a0751cb9ac11());
        }
        if((this->resource_writers != nullptr)) 
        {
            for(auto tmp_270 : this->resource_writers) {
                auto writer = cli::cast<System::Resources::IResourceWriter*>(tmp_270);
                {
                    writer->Generate_fe5750179d21610b();
                    writer->Close_b9951e614539ebeb();
                }
            }
        }
        ModuleBuilder *mainModule = nullptr;
        if((this->modules != nullptr)) 
        {
            for(auto tmp_271 : this->modules) {
                auto module = cli::cast<ModuleBuilder*>(tmp_271);
                if(System::String::op_Equality(module->get_FullyQualifiedName_ae33b8f6fc78fb8f(), assemblyFileName)) 
                {
                    mainModule = module;
                }
            }
        }
        if(System::Reflection::Module::op_Equality(mainModule, nullptr)) 
        {
            mainModule = DefineDynamicModule3(_T("RefEmit_OnDiskManifestModule"), assemblyFileName);
        }
        if(!(this->is_module_only)) 
        {
            mainModule->set_IsMain(true);
        }
        if((System::Reflection::MethodInfo::op_Inequality(this->entry_point, nullptr) && System::Reflection::Module::op_Inequality(this->entry_point->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), mainModule))) 
        {
            cli::array<System::Type*> *paramTypes;
            if((this->entry_point->GetParameters_9d17bcb549474c9()->get_Length() ==  1)) 
            {
                paramTypes = (new cli::array<System::Type*>({cli::typeof<System::Type>::info}));
            }
             else 
            {
                paramTypes = System::Type::EmptyTypes;
            }
            MethodBuilder *mb = mainModule->DefineGlobalMethod(_T("__EntryPoint$"), System::Reflection::MethodAttributes::Static, this->entry_point->get_ReturnType_832339e848f448fe(), paramTypes);
            ILGenerator *ilgen = mb->GetILGenerator();
            if((paramTypes->get_Length() ==  1)) 
            {
                ilgen->Emit_6b1c52a4d677ebc8(OpCodes::Ldarg_0);
            }
            ilgen->Emit_6b1c52a4d677ebc8(OpCodes::Tailcall);
            ilgen->Emit_6293070285694c81(OpCodes::Call, this->entry_point);
            ilgen->Emit_6b1c52a4d677ebc8(OpCodes::Ret);
            this->entry_point = mb;
        }
        if((this->version_res != nullptr)) 
        {
            DefineVersionInfoResourceImpl(assemblyFileName);
        }
        if((this->sn != nullptr)) 
        {
            this->public_key = this->sn->get_PublicKey();
        }
        for(auto tmp_272 : this->modules) {
            auto module = cli::cast<ModuleBuilder*>(tmp_272);
            if(System::Reflection::Module::op_Inequality(module, mainModule)) 
            {
                module->Save();
            }
        }
        mainModule->Save();
        if(((this->sn != nullptr) && this->sn->get_CanSign())) 
        {
            this->sn->Sign2(System::IO::Path::Combine(this->get_AssemblyDir(), assemblyFileName));
        }
        this->created = true;
    }
    
    void AssemblyBuilder::Save2(System::String* assemblyFileName) {
        Save(assemblyFileName, System::Reflection::PortableExecutableKinds::ILOnly, System::Reflection::ImageFileMachine::I386);
    }
    
    void AssemblyBuilder::SetEntryPoint(System::Reflection::MethodInfo* entryMethod) {
        SetEntryPoint2(entryMethod, PEFileKinds::ConsoleApplication);
    }
    
    void AssemblyBuilder::SetEntryPoint2(System::Reflection::MethodInfo* entryMethod, PEFileKinds fileKind) {
        if(System::Reflection::MethodInfo::op_Equality(entryMethod, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("entryMethod"));
        }
        if(System::Reflection::Assembly::op_Inequality(entryMethod->get_DeclaringType_6121cd6a84393166()->get_Assembly_3aae0acbf2a6d696(), this)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Entry method is not defined in the same assembly."));
        }
        this->entry_point = entryMethod;
        this->pekind = fileKind;
    }
    
    void AssemblyBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void AssemblyBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if((binaryAttribute ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryAttribute"));
        }
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    System::Exception* AssemblyBuilder::not_supported() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    void AssemblyBuilder::check_name_and_filename(System::String* name, System::String* fileName, bool fileNeedsToExists) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((fileName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fileName"));
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Empty name is not legal."), _T("name"));
        }
        if((fileName->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Empty file name is not legal."), _T("fileName"));
        }
        if(System::String::op_Inequality(System::IO::Path::GetFileName(fileName), fileName)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("fileName \'"), fileName), _T("fileName"));
        }
        System::String *fullFileName = fileName;
        if((this->dir != nullptr)) 
        {
            fullFileName = System::IO::Path::Combine(this->dir, fileName);
        }
        if((fileNeedsToExists && !(System::IO::File::Exists(fullFileName)))) 
        {
            throw cli::gcnew<System::IO::FileNotFoundException>(cli::concat(_T("Could not find file \'"), fileName));
        }
        if((this->resources != nullptr)) 
        {
            for(int32_t i = 0; (i < this->resources->get_Length()); ++i){
                if(System::String::op_Equality(this->resources->at(i)->filename, fullFileName)) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Duplicate file name \'"), fileName));
                }
                if(System::String::op_Equality(this->resources->at(i)->name, name)) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Duplicate name \'"), name));
                }
            }
        }
        if((this->modules != nullptr)) 
        {
            for(int32_t i = 0; (i < this->modules->get_Length()); ++i){
                if((!(this->modules->at(i)->IsTransient()) && System::String::op_Equality(this->modules->at(i)->get_FileName(), fileName))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Duplicate file name \'"), fileName));
                }
                if(System::String::op_Equality(this->modules->at(i)->get_Name_51eff21286003cfa(), name)) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Duplicate name \'"), name));
                }
            }
        }
    }
    
    System::String* AssemblyBuilder::create_assembly_version(System::String* version) {
        cli::array<System::String*> *parts = version->Split((new cli::array<char16_t>({u'.'})));
        cli::array<int32_t> *ver = (new cli::array<int32_t>({0, 0, 0, 0}));
        if(((parts->get_Length() < 0) || (parts->get_Length() > 4))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("The version specified \'"), version));
        }
        for(int32_t i = 0; (i < parts->get_Length()); ++i){
            if(System::String::op_Equality(parts->at(i), _T("*"))) 
            {
                System::DateTime now = System::DateTime::get_Now();
                if((i ==  2)) 
                {
                    ver->at(2) = System::DateTime::op_Subtraction(now, cli::ctor<System::DateTime>(2000, 1, 1))->get_Days();
                    if((parts->get_Length() ==  3)) 
                    {
                        ver->at(3) = (((now->get_Second() + (now->get_Minute() * 60)) + (now->get_Hour() * 3600)) / 2);
                    }
                }
                 else 
                {
                    if((i ==  3)) 
                    {
                        ver->at(3) = (((now->get_Second() + (now->get_Minute() * 60)) + (now->get_Hour() * 3600)) / 2);
                    }
                     else 
                    {
                        throw cli::gcnew<System::ArgumentException>(cli::concat(_T("The version specified \'"), version));
                    }
                }
            }
             else 
            {
                try {
                    ver->at(i) = System::Int32::Parse5(parts->at(i));
                }
                catch(System::FormatException*) {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("The version specified \'"), version));
                }
            }
        }
        return cli::concat(cli::box(ver->at(0)), _T("."), cli::box(ver->at(1)), _T("."), cli::box(ver->at(2)), _T("."), cli::box(ver->at(3)));
    }
    
    System::String* AssemblyBuilder::GetCultureString(System::String* str) {
        return System::String::op_Equality(str, _T("neutral")) ? System::String::Empty : str;
    }
    
    System::Reflection::AssemblyName* AssemblyBuilder::UnprotectedGetName_b11b135b2412c023() {
        System::Reflection::AssemblyName *an = System::Reflection::Assembly::UnprotectedGetName_b11b135b2412c023();
        if((this->sn != nullptr)) 
        {
            an->SetPublicKey(this->sn->get_PublicKey());
            an->SetPublicKeyToken(this->sn->get_PublicKeyToken());
        }
        return an;
    }
    
    System::Type* AssemblyBuilder::MakeGenericType(System::Type* gtd, cli::array<System::Type*>* typeArguments) {
        return cli::gcnew<System::Reflection::MonoGenericClass>(gtd, typeArguments);
    }
    
    void AssemblyBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void AssemblyBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* AssemblyBuilder::GetType_30e9b2dcc4956479(System::String* name, bool throwOnError, bool ignoreCase) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(name);
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("name"), _T("Name cannot be empty"));
        }
        System::Type *res = System::Reflection::Assembly::InternalGetType(nullptr, name, throwOnError, ignoreCase);
        if(cli::is<TypeBuilder>(res)) 
        {
            if(throwOnError) 
            {
                throw cli::gcnew<System::TypeLoadException>(System::String::Format3(_T("Could not load type \'{0}\' from assembly \'{1}\'"), name, this->name));
            }
            return nullptr;
        }
        return res;
    }
    
    System::Reflection::Module* AssemblyBuilder::GetModule_d3e09c815c6ebd46(System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Name can\'t be empty"));
        }
        if((this->modules ==  nullptr)) 
        {
            return nullptr;
        }
        for(auto tmp_273 : this->modules) {
            auto module = cli::cast<System::Reflection::Module*>(tmp_273);
            {
                if(System::String::op_Equality(module->get_ScopeName_da7d7aa6d0cd103f(), name)) 
                {
                    return module;
                }
            }
        }
        return nullptr;
    }
    
    cli::array<System::Reflection::Module*>* AssemblyBuilder::GetModules_1ce70abfc6e0d050(bool getResourceModules) {
        cli::array<System::Reflection::Module*> *modules = System::Reflection::Assembly::GetModulesInternal_ea568dcc02539ffb();
        if(!(getResourceModules)) 
        {
            System::Collections::Generic::List<System::Reflection::Module*> *result = cli::gcnew<System::Collections::Generic::List<System::Reflection::Module*>>(modules->get_Length());
            for(auto tmp_274 : modules) {
                auto m = cli::cast<System::Reflection::Module*>(tmp_274);
                if(!(m->IsResource_27dec1ebb40006c6())) 
                {
                    result->Add(m);
                }
            }
            return result->ToArray();
        }
        return modules;
    }
    
    System::Reflection::AssemblyName* AssemblyBuilder::GetName_7bcd94721bb29265(bool copiedName) {
        return System::Reflection::Assembly::GetName_7bcd94721bb29265(copiedName);
    }
    
    cli::array<System::Reflection::AssemblyName*>* AssemblyBuilder::GetReferencedAssemblies_c967ce8a0efd4c58() {
        return System::Reflection::Assembly::GetReferencedAssemblies(this);
    }
    
    cli::array<System::Reflection::Module*>* AssemblyBuilder::GetLoadedModules_db6b585bebc1ac2e(bool getResourceModules) {
        return System::Reflection::Assembly::GetModules_1ce70abfc6e0d050(getResourceModules);
    }
    
    System::Reflection::Assembly* AssemblyBuilder::GetSatelliteAssembly_995bfc41ec1f61b8(System::Globalization::CultureInfo* culture) {
        return System::Reflection::Assembly::GetSatelliteAssembly(culture, nullptr, true);
    }
    
    System::Reflection::Assembly* AssemblyBuilder::GetSatelliteAssembly_22d0b12d929a333c(System::Globalization::CultureInfo* culture, System::Version* version) {
        return System::Reflection::Assembly::GetSatelliteAssembly(culture, version, true);
    }
    
    bool AssemblyBuilder::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return System::Reflection::Assembly::Equals_ed975d2f4a7d193e(obj);
    }
    
    int32_t AssemblyBuilder::GetHashCode_6648aef0f235ee6c() {
        return System::Reflection::Assembly::GetHashCode_6648aef0f235ee6c();
    }
    
    bool AssemblyBuilder::IsDefined_42f87feac494b032(System::Type* attributeType, bool inherit) {
        return System::Reflection::Assembly::IsDefined_42f87feac494b032(attributeType, inherit);
    }
    
    cli::array<System::Object*>* AssemblyBuilder::GetCustomAttributes_887544480e7ebe63(bool inherit) {
        return System::Reflection::Assembly::GetCustomAttributes_887544480e7ebe63(inherit);
    }
    
    cli::array<System::Object*>* AssemblyBuilder::GetCustomAttributes_30a143c7dfd48919(System::Type* attributeType, bool inherit) {
        return System::Reflection::Assembly::GetCustomAttributes_30a143c7dfd48919(attributeType, inherit);
    }
    
    System::String* AssemblyBuilder::get_CodeBase_5e12949b795c9d90() {
        throw not_supported();
    }
    
    System::Reflection::MethodInfo* AssemblyBuilder::get_EntryPoint_63c1ef73cc6df57c() {
        return this->entry_point;
    }
    
    System::String* AssemblyBuilder::get_Location_3a7779d7eb72fa50() {
        throw not_supported();
    }
    
    System::String* AssemblyBuilder::get_ImageRuntimeVersion_3e077bddac126c9() {
        return System::Reflection::Assembly::get_ImageRuntimeVersion_3e077bddac126c9();
    }
    
    bool AssemblyBuilder::get_ReflectionOnly_b2af717d1dca672() {
        return System::Reflection::Assembly::get_ReflectionOnly_b2af717d1dca672();
    }
    
    bool AssemblyBuilder::get_IsSave() {
        return (this->access != 1U);
    }
    
    bool AssemblyBuilder::get_IsRun() {
        return (((this->access ==  1U) || (this->access ==  3U)) || (this->access ==  9U));
    }
    
    System::String* AssemblyBuilder::get_AssemblyDir() {
        return this->dir;
    }
    
    bool AssemblyBuilder::get_IsModuleOnly() {
        return this->is_module_only;
    }
    
    bool AssemblyBuilder::set_IsModuleOnly(bool value) {
        this->is_module_only = value;
        return get_IsModuleOnly();
    }
    
    System::Reflection::Module* AssemblyBuilder::get_ManifestModule_238a73903fb58278() {
        return System::Reflection::Assembly::GetManifestModule_e233b7576740b3d7();
    }
    
    bool AssemblyBuilder::get_GlobalAssemblyCache_db80d4f5ee2824e7() {
        return false;
    }
    
    bool AssemblyBuilder::get_IsDynamic_a494841e91ae4bbb() {
        return true;
    }
    
    System::String* AssemblyBuilder::get_FullName_abd52da7f47cce07() {
        return System::Reflection::Assembly::get_FullName_abd52da7f47cce07();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ConstructorBuilder::constructor(TypeBuilder* tb, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt) {
        this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(((int32_t)(attributes) | 2048)) | 4096));
        this->call_conv = callingConvention;
        if((parameterTypes != nullptr)) 
        {
            for(int32_t i = 0; (i < parameterTypes->get_Length()); ++i) {
                if(System::Type::op_Equality2(parameterTypes->at(i), nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Elements of the parameterTypes array cannot be null"), _T("parameterTypes"));
                }
            }
            this->parameters = (new cli::array<System::Type*>(parameterTypes->get_Length()));
            System::Array::Copy(parameterTypes, this->parameters, parameterTypes->get_Length());
        }
        this->type = tb;
        this->paramModReq = paramModReq;
        this->paramModOpt = paramModOpt;
        this->table_idx = System::Reflection::MethodBase::get_next_table_index_635aee4f976b5bec(this, 6, true);
        cli::cast<ModuleBuilder*>(tb->get_Module_ea7d65dc88202263())->RegisterToken(this, GetToken()->get_Token());
    }
    
    System::Reflection::MethodImplAttributes ConstructorBuilder::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return this->iattrs;
    }
    
    cli::array<System::Reflection::ParameterInfo*>* ConstructorBuilder::GetParameters_9d17bcb549474c9() {
        if(!(this->type->get_is_created())) 
        {
            throw not_created();
        }
        return GetParametersInternal();
    }
    
    cli::array<System::Reflection::ParameterInfo*>* ConstructorBuilder::GetParametersInternal() {
        if((this->parameters ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::ParameterInfo*>(0));
        }
        cli::array<System::Reflection::ParameterInfo*> *retval = (new cli::array<System::Reflection::ParameterInfo*>(this->parameters->get_Length()));
        for(int32_t i = 0; (i < this->parameters->get_Length()); i++) {
            retval->at(i) = cli::gcnew<System::Reflection::ParameterInfo>((this->pinfo ==  nullptr) ? nullptr : this->pinfo->at((i + 1)), this->parameters->at(i), this, (i + 1));
        }
        return retval;
    }
    
    int32_t ConstructorBuilder::GetParameterCount_ac86b3a4965d967a() {
        if((this->parameters ==  nullptr)) 
        {
            return 0;
        }
        return this->parameters->get_Length();
    }
    
    System::Type* ConstructorBuilder::GetParameterType_f80ea4ad68a899fb(int32_t pos) {
        return this->parameters->at(pos);
    }
    
    System::Object* ConstructorBuilder::Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw not_supported();
    }
    
    System::Object* ConstructorBuilder::Invoke_d9ede2dfc2f2dd62(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw not_supported();
    }
    
    void ConstructorBuilder::AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset) {
        if((pset ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("pset"));
        }
        if(((((int32_t)(action) ==  8) || ((int32_t)(action) ==  9)) || ((int32_t)(action) ==  10))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("action"), _T("Request* values are not permitted"));
        }
        RejectIfCreated();
        if((this->permissions != nullptr)) 
        {
            for(auto tmp_275 : this->permissions) {
                auto set = cli::cast<RefEmitPermissionSet>(tmp_275);
                if(((int32_t)(set->action) ==  (int32_t)(action))) 
                {
                    throw cli::gcnew<System::InvalidOperationException>(_T("Multiple permission sets specified with the same SecurityAction."));
                }
            }
            cli::array<RefEmitPermissionSet> *new_array = (new cli::array<RefEmitPermissionSet>((this->permissions->get_Length() + 1)));
            cli::import(this->permissions)->CopyTo(new_array, 0);
            this->permissions = new_array;
        }
         else 
        {
            this->permissions = (new cli::array<RefEmitPermissionSet>(1));
        }
        this->permissions->at((this->permissions->get_Length() - 1)) = cli::ctor<RefEmitPermissionSet>(action, pset->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        (this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(this->attrs) | 16384)));
    }
    
    ParameterBuilder* ConstructorBuilder::DefineParameter(int32_t iSequence, System::Reflection::ParameterAttributes attributes, System::String* strParamName) {
        if(((iSequence < 1) || (iSequence > System::Reflection::MethodBase::GetParameterCount_ac86b3a4965d967a()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("iSequence"));
        }
        if(this->type->get_is_created()) 
        {
            throw not_after_created();
        }
        ParameterBuilder *pb = cli::gcnew<ParameterBuilder>(this, iSequence, attributes, strParamName);
        if((this->pinfo ==  nullptr)) 
        {
            this->pinfo = (new cli::array<ParameterBuilder*>((this->parameters->get_Length() + 1)));
        }
        this->pinfo->at(iSequence) = pb;
        return pb;
    }
    
    bool ConstructorBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    cli::array<System::Object*>* ConstructorBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw not_supported();
    }
    
    cli::array<System::Object*>* ConstructorBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    ILGenerator* ConstructorBuilder::GetILGenerator() {
        return GetILGenerator2(64);
    }
    
    ILGenerator* ConstructorBuilder::GetILGenerator2(int32_t streamSize) {
        if((this->ilgen != nullptr)) 
        {
            return this->ilgen;
        }
        this->ilgen = cli::gcnew<ILGenerator>(this->type->get_Module_ea7d65dc88202263(), cli::cast<ModuleBuilder*>(this->type->get_Module_ea7d65dc88202263())->GetTokenGenerator(), streamSize);
        return this->ilgen;
    }
    
    void ConstructorBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.CompilerServices.MethodImplAttribute"))) 
        {
            cli::array<unsigned char> *data = customBuilder->get_Data();
            int32_t impla;
            impla = (int32_t)(data->at(2));
            (impla = impla | ((int32_t)(data->at(3)) << 8));
            SetImplementationFlags((System::Reflection::MethodImplAttributes)(impla));
            return;
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void ConstructorBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if((binaryAttribute ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryAttribute"));
        }
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void ConstructorBuilder::SetImplementationFlags(System::Reflection::MethodImplAttributes attributes) {
        if(this->type->get_is_created()) 
        {
            throw not_after_created();
        }
        this->iattrs = attributes;
    }
    
    System::Reflection::Module* ConstructorBuilder::GetModule() {
        return this->type->get_Module_ea7d65dc88202263();
    }
    
    MethodToken ConstructorBuilder::GetToken() {
        return cli::ctor<MethodToken>((100663296 | this->table_idx));
    }
    
    void ConstructorBuilder::SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data) {
        if(this->type->get_is_created()) 
        {
            throw not_after_created();
        }
    }
    
    System::String* ConstructorBuilder::ToString_1636a0751cb9ac11() {
        return cli::concat(_T("ConstructorBuilder [\'"), this->type->get_Name_50fad5fa936c3ae2());
    }
    
    void ConstructorBuilder::fixup() {
        if((((int32_t)(((int32_t)(this->attrs) & 9216)) ==  0) && ((int32_t)(((int32_t)(this->iattrs) & 4099)) ==  0))) 
        {
            if(((this->ilgen ==  nullptr) || (this->ilgen->get_ILOffset_a7e0ed1bc16093d6() ==  0))) 
            {
                throw cli::gcnew<System::InvalidOperationException>(cli::concat(_T("Method \'"), this->get_Name_50fad5fa936c3ae2()));
            }
        }
        if((this->ilgen != nullptr)) 
        {
            this->ilgen->label_fixup();
        }
    }
    
    void ConstructorBuilder::GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter) {
        if(((this->ilgen != nullptr) && this->ilgen->get_HasDebugInfo())) 
        {
            System::Diagnostics::SymbolStore::SymbolToken token = cli::ctor<System::Diagnostics::SymbolStore::SymbolToken>(GetToken()->get_Token());
            symbolWriter->OpenMethod_8100d0fe13e57fbc(token);
            symbolWriter->SetSymAttribute_be44b9c427da3a77(token, _T("__name"), System::Text::Encoding::get_UTF8()->GetBytes_49806e8e98b1c1db(this->get_Name_50fad5fa936c3ae2()));
            this->ilgen->GenerateDebugInfo(symbolWriter);
            symbolWriter->CloseMethod_448561d76f46fdbe();
        }
    }
    
    int32_t ConstructorBuilder::get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc) {
        return this->type->get_next_table_index(obj, table, inc);
    }
    
    void ConstructorBuilder::RejectIfCreated() {
        if(this->type->get_is_created()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type definition of the method is complete."));
        }
    }
    
    System::Exception* ConstructorBuilder::not_supported() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    System::Exception* ConstructorBuilder::not_after_created() {
        return cli::gcnew<System::InvalidOperationException>(_T("Unable to change after type has been created."));
    }
    
    System::Exception* ConstructorBuilder::not_created() {
        return cli::gcnew<System::NotSupportedException>(_T("The type is not yet created."));
    }
    
    void ConstructorBuilder::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorBuilder::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorBuilder::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ConstructorBuilder::Invoke4(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::CallingConventions ConstructorBuilder::get_CallingConvention_309cf574b58a053a() {
        return this->call_conv;
    }
    
    bool ConstructorBuilder::get_InitLocals() {
        return this->init_locals;
    }
    
    bool ConstructorBuilder::set_InitLocals(bool value) {
        this->init_locals = value;
        return get_InitLocals();
    }
    
    TypeBuilder* ConstructorBuilder::get_TypeBuilder() {
        return this->type;
    }
    
    System::RuntimeMethodHandle ConstructorBuilder::get_MethodHandle_a92ba3e25e0a5ec8() {
        throw not_supported();
    }
    
    System::Reflection::MethodAttributes ConstructorBuilder::get_Attributes_b3976e6a55c088be() {
        return this->attrs;
    }
    
    System::Type* ConstructorBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->type;
    }
    
    System::Type* ConstructorBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->type;
    }
    
    System::Type* ConstructorBuilder::get_ReturnType() {
        return nullptr;
    }
    
    System::String* ConstructorBuilder::get_Name_50fad5fa936c3ae2() {
        return ((int32_t)(((int32_t)(this->attrs) & 16)) != 0) ? System::Reflection::ConstructorInfo::TypeConstructorName : System::Reflection::ConstructorInfo::ConstructorName;
    }
    
    System::String* ConstructorBuilder::get_Signature() {
        return _T("constructor signature");
    }
    
    System::Reflection::Module* ConstructorBuilder::get_Module_ea7d65dc88202263() {
        return System::Reflection::ConstructorInfo::get_Module_ea7d65dc88202263();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ConstructorOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::ConstructorInfo* cb) {
        this->instantiation = instantiation;
        this->cb = cb;
    }
    
    bool ConstructorOnTypeBuilderInst::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return this->cb->IsDefined_91943a8ac363f11f(attributeType, inherit);
    }
    
    cli::array<System::Object*>* ConstructorOnTypeBuilderInst::GetCustomAttributes_b790992b66049291(bool inherit) {
        return this->cb->GetCustomAttributes_b790992b66049291(inherit);
    }
    
    cli::array<System::Object*>* ConstructorOnTypeBuilderInst::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return this->cb->GetCustomAttributes_90419687cfa65ef7(attributeType, inherit);
    }
    
    System::Reflection::MethodImplAttributes ConstructorOnTypeBuilderInst::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return this->cb->GetMethodImplementationFlags_34d93dba8c4849e8();
    }
    
    cli::array<System::Reflection::ParameterInfo*>* ConstructorOnTypeBuilderInst::GetParameters_9d17bcb549474c9() {
        if(!(this->instantiation->get_IsCreated())) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        cli::array<System::Reflection::ParameterInfo*> *res;
        if(cli::is<ConstructorBuilder>(this->cb)) 
        {
            ConstructorBuilder *cbuilder = cli::cast<ConstructorBuilder*>(this->cb);
            res = (new cli::array<System::Reflection::ParameterInfo*>(cbuilder->parameters->get_Length()));
            for(int32_t i = 0; (i < cbuilder->parameters->get_Length()); i++){
                System::Type *type = this->instantiation->InflateType(cbuilder->parameters->at(i));
                res->at(i) = cli::gcnew<System::Reflection::ParameterInfo>((cbuilder->pinfo ==  nullptr) ? nullptr : cbuilder->pinfo->at(i), type, this, (i + 1));
            }
        }
         else 
        {
            cli::array<System::Reflection::ParameterInfo*> *parms = this->cb->GetParameters_9d17bcb549474c9();
            res = (new cli::array<System::Reflection::ParameterInfo*>(parms->get_Length()));
            for(int32_t i = 0; (i < parms->get_Length()); i++){
                System::Type *type = this->instantiation->InflateType(parms->at(i)->get_ParameterType_97c5fa09a0b988d());
                res->at(i) = cli::gcnew<System::Reflection::ParameterInfo>(parms->at(i), type, this, (i + 1));
            }
        }
        return res;
    }
    
    int32_t ConstructorOnTypeBuilderInst::GetParameterCount_ac86b3a4965d967a() {
        return this->cb->GetParameterCount_ac86b3a4965d967a();
    }
    
    System::Object* ConstructorOnTypeBuilderInst::Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        return this->cb->Invoke_ba5f4e14507fdb95(obj, invokeAttr, binder, parameters, culture);
    }
    
    cli::array<System::Type*>* ConstructorOnTypeBuilderInst::GetGenericArguments_77cf5f406b341958() {
        return this->cb->GetGenericArguments_77cf5f406b341958();
    }
    
    System::Object* ConstructorOnTypeBuilderInst::Invoke_d9ede2dfc2f2dd62(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Type* ConstructorOnTypeBuilderInst::get_DeclaringType_6121cd6a84393166() {
        return this->instantiation;
    }
    
    System::String* ConstructorOnTypeBuilderInst::get_Name_50fad5fa936c3ae2() {
        return this->cb->get_Name_50fad5fa936c3ae2();
    }
    
    System::Type* ConstructorOnTypeBuilderInst::get_ReflectedType_bf4971c0f442b9dc() {
        return this->instantiation;
    }
    
    int32_t ConstructorOnTypeBuilderInst::get_MetadataToken_85fbeea46e971f25() {
        return System::Reflection::ConstructorInfo::get_MetadataToken_85fbeea46e971f25();
    }
    
    System::RuntimeMethodHandle ConstructorOnTypeBuilderInst::get_MethodHandle_a92ba3e25e0a5ec8() {
        return this->cb->get_MethodHandle_a92ba3e25e0a5ec8();
    }
    
    System::Reflection::MethodAttributes ConstructorOnTypeBuilderInst::get_Attributes_b3976e6a55c088be() {
        return this->cb->get_Attributes_b3976e6a55c088be();
    }
    
    System::Reflection::CallingConventions ConstructorOnTypeBuilderInst::get_CallingConvention_309cf574b58a053a() {
        return this->cb->get_CallingConvention_309cf574b58a053a();
    }
    
    bool ConstructorOnTypeBuilderInst::get_ContainsGenericParameters_113614fa92731376() {
        return false;
    }
    
    bool ConstructorOnTypeBuilderInst::get_IsGenericMethodDefinition_cce889be2a806b0f() {
        return false;
    }
    
    bool ConstructorOnTypeBuilderInst::get_IsGenericMethod_7e509e51546ea990() {
        return false;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  CustomAttributeBuilder::__f__switch_map7;
    
    void CustomAttributeBuilder::constructor(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* cdata) {
        this->ctor = con;
        this->data = cli::cast<cli::array<unsigned char>*>(cli::import(cdata)->Clone());
    }
    
    void CustomAttributeBuilder::constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs) {
        Initialize(con, constructorArgs, (new cli::array<System::Reflection::PropertyInfo*>(0)), (new cli::array<System::Object*>(0)), (new cli::array<System::Reflection::FieldInfo*>(0)), (new cli::array<System::Object*>(0)));
    }
    
    void CustomAttributeBuilder::constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues) {
        Initialize(con, constructorArgs, (new cli::array<System::Reflection::PropertyInfo*>(0)), (new cli::array<System::Object*>(0)), namedFields, fieldValues);
    }
    
    void CustomAttributeBuilder::constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues) {
        Initialize(con, constructorArgs, namedProperties, propertyValues, (new cli::array<System::Reflection::FieldInfo*>(0)), (new cli::array<System::Object*>(0)));
    }
    
    void CustomAttributeBuilder::constructor(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues) {
        Initialize(con, constructorArgs, namedProperties, propertyValues, namedFields, fieldValues);
    }
    
    cli::array<unsigned char>* CustomAttributeBuilder::GetBlob(System::Reflection::Assembly* asmb, System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CustomAttributeBuilder::IsValidType(System::Type* t) {
        if((t->get_IsArray() && (t->GetArrayRank_fccf91da5e4acf4f() > 1))) 
        {
            return false;
        }
        if((cli::is<TypeBuilder>(t) && t->get_IsEnum_bc85ea7b0a749db())) 
        {
            System::Enum::GetUnderlyingType(t);
        }
        if((t->get_IsClass() && !(((((t->get_IsArray() || System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) || System::String::op_Equality(t->get_Assembly_3aae0acbf2a6d696()->GetName_7088a38b93d0dcc5()->get_Name(), _T("mscorlib")))))) 
        {
            return false;
        }
        if((t->get_IsValueType() && !(((t->get_IsPrimitive() || t->get_IsEnum_bc85ea7b0a749db()) || (cli::is<AssemblyBuilder>(t->get_Assembly_3aae0acbf2a6d696()) && System::String::op_Equality(t->get_Assembly_3aae0acbf2a6d696()->GetName_7088a38b93d0dcc5()->get_Name(), _T("mscorlib"))))))) 
        {
            return false;
        }
        return true;
    }
    
    bool CustomAttributeBuilder::IsValidParam(System::Object* o, System::Type* paramType) {
        System::Type *t = o->GetType();
        if(!(IsValidType(t))) 
        {
            return false;
        }
        if(System::Type::op_Equality2(paramType, cli::typeof<System::Type>::info)) 
        {
            if((t->get_IsArray() && (t->GetArrayRank_fccf91da5e4acf4f() ==  1))) 
            {
                return IsValidType(t->GetElementType_ab5070dbbfe66f5f());
            }
            if((((!(t->get_IsPrimitive()) && !(cli::typeof<System::Type>::info->IsAssignableFrom_e3aa32d778e63a90(t))) && System::Type::op_Inequality2(t, cli::typeof<System::Type>::info)) && !(t->get_IsEnum_bc85ea7b0a749db()))) 
            {
                return false;
            }
        }
        return true;
    }
    
    bool CustomAttributeBuilder::IsValidValue(System::Type* type, System::Object* value) {
        if((type->get_IsValueType() && (value ==  nullptr))) 
        {
            return false;
        }
        if((type->get_IsArray() && type->GetElementType_ab5070dbbfe66f5f()->get_IsValueType())) 
        {
            for(auto tmp_276 : cli::cast<System::Array*>(value)) {
                auto v = cli::cast<System::Object*>(tmp_276);
                {
                    if((v ==  nullptr)) 
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    void CustomAttributeBuilder::Initialize(System::Reflection::ConstructorInfo* con, cli::array<System::Object*>* constructorArgs, cli::array<System::Reflection::PropertyInfo*>* namedProperties, cli::array<System::Object*>* propertyValues, cli::array<System::Reflection::FieldInfo*>* namedFields, cli::array<System::Object*>* fieldValues) {
        this->ctor = con;
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if((constructorArgs ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("constructorArgs"));
        }
        if((namedProperties ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("namedProperties"));
        }
        if((propertyValues ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("propertyValues"));
        }
        if((namedFields ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("namedFields"));
        }
        if((fieldValues ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fieldValues"));
        }
        if((con->GetParameterCount_ac86b3a4965d967a() != constructorArgs->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Parameter count does not match passed in argument value count."));
        }
        if((namedProperties->get_Length() != propertyValues->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Array lengths must be the same."), _T("namedProperties, propertyValues"));
        }
        if((namedFields->get_Length() != fieldValues->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Array lengths must be the same."), _T("namedFields, fieldValues"));
        }
        if((((int32_t)(((int32_t)(con->get_Attributes_b3976e6a55c088be()) & 16)) ==  16) || ((int32_t)(((int32_t)(con->get_Attributes_b3976e6a55c088be()) & 7)) ==  1))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Cannot have private or static constructor."));
        }
        System::Type *atype = this->ctor->get_DeclaringType_6121cd6a84393166();
        int32_t i;
        i = 0;
        for(auto tmp_277 : namedFields) {
            auto fi = cli::cast<System::Reflection::FieldInfo*>(tmp_277);
            {
                System::Type *t = fi->get_DeclaringType_6121cd6a84393166();
                if(((System::Type::op_Inequality2(atype, t) && !(t->IsSubclassOf_5d7dbe0215a30fda(atype))) && !(atype->IsSubclassOf_5d7dbe0215a30fda(t)))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Field \'"), fi->get_Name_50fad5fa936c3ae2()));
                }
                if(!(IsValidType(fi->get_FieldType_1dab4079098d7fff()))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Field \'"), fi->get_Name_50fad5fa936c3ae2()));
                }
                if(!(IsValidValue(fi->get_FieldType_1dab4079098d7fff(), fieldValues->at(i)))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Field "), fi->get_Name_50fad5fa936c3ae2()));
                }
                if((fieldValues->at(i) != nullptr)) 
                {
                    if(((!(cli::is<TypeBuilder>(fi->get_FieldType_1dab4079098d7fff())) && !(fi->get_FieldType_1dab4079098d7fff()->get_IsEnum_bc85ea7b0a749db())) && !(fi->get_FieldType_1dab4079098d7fff()->IsInstanceOfType_bd709d8c55b4333d(fieldValues->at(i))))) 
                    {
                        if(!(fi->get_FieldType_1dab4079098d7fff()->get_IsArray())) 
                        {
                            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Value of field \'"), fi->get_Name_50fad5fa936c3ae2(), _T("\' does not match field type: "), fi->get_FieldType_1dab4079098d7fff()));
                        }
                    }
                }
                i++;
            }
        }
        i = 0;
        for(auto tmp_278 : namedProperties) {
            auto pi = cli::cast<System::Reflection::PropertyInfo*>(tmp_278);
            {
                if(!(pi->get_CanWrite_a9c71933951c9826())) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Property \'"), pi->get_Name_50fad5fa936c3ae2()));
                }
                System::Type *t = pi->get_DeclaringType_6121cd6a84393166();
                if(((System::Type::op_Inequality2(atype, t) && !(t->IsSubclassOf_5d7dbe0215a30fda(atype))) && !(atype->IsSubclassOf_5d7dbe0215a30fda(t)))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Property \'"), pi->get_Name_50fad5fa936c3ae2()));
                }
                if(!(IsValidType(pi->get_PropertyType_68b4b04678fe4f8a()))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Property \'"), pi->get_Name_50fad5fa936c3ae2()));
                }
                if(!(IsValidValue(pi->get_PropertyType_68b4b04678fe4f8a(), propertyValues->at(i)))) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Property "), pi->get_Name_50fad5fa936c3ae2()));
                }
                if((propertyValues->at(i) != nullptr)) 
                {
                    if(((!(cli::is<TypeBuilder>(pi->get_PropertyType_68b4b04678fe4f8a())) && !(pi->get_PropertyType_68b4b04678fe4f8a()->get_IsEnum_bc85ea7b0a749db())) && !(pi->get_PropertyType_68b4b04678fe4f8a()->IsInstanceOfType_bd709d8c55b4333d(propertyValues->at(i))))) 
                    {
                        if(!(pi->get_PropertyType_68b4b04678fe4f8a()->get_IsArray())) 
                        {
                            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Value of property \'"), pi->get_Name_50fad5fa936c3ae2(), _T("\' does not match property type: "), pi->get_PropertyType_68b4b04678fe4f8a(), _T(" -> "), propertyValues->at(i)));
                        }
                    }
                }
                i++;
            }
        }
        i = 0;
        for(auto tmp_279 : GetParameters(con)) {
            auto pi = cli::cast<System::Reflection::ParameterInfo*>(tmp_279);
            {
                if((pi != nullptr)) 
                {
                    System::Type *paramType = pi->get_ParameterType_97c5fa09a0b988d();
                    if(!(IsValidType(paramType))) 
                    {
                        throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Parameter "), cli::box(i)));
                    }
                    if(!(IsValidValue(paramType, constructorArgs->at(i)))) 
                    {
                        throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Parameter "), cli::box(i)));
                    }
                    if((constructorArgs->at(i) != nullptr)) 
                    {
                        if(((!(cli::is<TypeBuilder>(paramType)) && !(paramType->get_IsEnum_bc85ea7b0a749db())) && !(paramType->IsInstanceOfType_bd709d8c55b4333d(constructorArgs->at(i))))) 
                        {
                            if(!(paramType->get_IsArray())) 
                            {
                                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Value of argument "), cli::box(i), _T(" does not match parameter type: "), paramType, _T(" -> "), constructorArgs->at(i)));
                            }
                        }
                        if(!(IsValidParam(constructorArgs->at(i), paramType))) 
                        {
                            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Cannot emit a CustomAttribute with argument of type "), constructorArgs->at(i)->GetType()));
                        }
                    }
                }
                i++;
            }
        }
        this->data = GetBlob(atype->get_Assembly_3aae0acbf2a6d696(), con, constructorArgs, namedProperties, propertyValues, namedFields, fieldValues);
    }
    
    int32_t CustomAttributeBuilder::decode_len(cli::array<unsigned char>* data, int32_t pos, int32_t rpos) {
        int32_t len = 0;
        if((((int32_t)(data->at(pos)) & 128) ==  0)) 
        {
            len = (int32_t)(((int32_t)(data->at(pos++)) & 127));
        }
         else 
        {
            if((((int32_t)(data->at(pos)) & 64) ==  0)) 
            {
                len = ((((int32_t)(data->at(pos)) & 63) << 8) + (int32_t)(data->at((pos + 1))));
                (pos = pos + 2);
            }
             else 
            {
                len = ((((((int32_t)(data->at(pos)) & 31) << 24) + ((int32_t)(data->at((pos + 1))) << 16)) + ((int32_t)(data->at((pos + 2))) << 8)) + (int32_t)(data->at((pos + 3))));
                (pos = pos + 4);
            }
        }
        rpos = pos;
        return len;
    }
    
    System::String* CustomAttributeBuilder::string_from_bytes(cli::array<unsigned char>* data, int32_t pos, int32_t len) {
        return System::Text::Encoding::get_UTF8()->GetString_39f4843197ddbe92(data, pos, len);
    }
    
    System::String* CustomAttributeBuilder::string_arg() {
        int32_t pos = 2;
        int32_t len = decode_len(this->data, pos, pos);
        return string_from_bytes(this->data, pos, len);
    }
    
    UnmanagedMarshal* CustomAttributeBuilder::get_umarshal(CustomAttributeBuilder* customBuilder, bool is_field) {
        cli::array<unsigned char> *data = customBuilder->get_Data();
        System::Runtime::InteropServices::UnmanagedType subtype = (System::Runtime::InteropServices::UnmanagedType)80L;
        int32_t sizeConst = -1;
        int32_t sizeParamIndex = -1;
        bool hasSize = false;
        int32_t value;
        int32_t utype;
        System::String *marshalTypeName = nullptr;
        System::Type *marshalTypeRef = nullptr;
        System::String *marshalCookie = System::String::Empty;
        utype = (int32_t)(data->at(2));
        (utype = utype | ((int32_t)(data->at(3)) << 8));
        System::String *first_type_name = GetParameters(customBuilder->get_Ctor())->at(0)->get_ParameterType_97c5fa09a0b988d()->get_FullName_7e8fa72ba225e1a4();
        int32_t pos = 6;
        if(System::String::op_Equality(first_type_name, _T("System.Int16"))) 
        {
            pos = 4;
        }
        int32_t nnamed = (int32_t)(data->at(pos++));
        (nnamed = nnamed | ((int32_t)(data->at(pos++)) << 8));
        for(int32_t i = 0; (i < nnamed); ++i){
            int32_t paramType;
            pos++;
            paramType = (int32_t)(data->at(pos++));
            if((paramType ==  85)) 
            {
                int32_t len2 = decode_len(data, pos, pos);
                string_from_bytes(data, pos, len2);
                (pos = pos + len2);
            }
            int32_t len = decode_len(data, pos, pos);
            System::String *named_name = string_from_bytes(data, pos, len);
            (pos = pos + len);
            System::String* tmp_280 = named_name;
            ::System::Int32 tmp_281 = -1;
            if(::System::String::Equals3(tmp_280, _T("ArraySubType"))) tmp_281 = 0;
            if(::System::String::Equals3(tmp_280, _T("SizeConst"))) tmp_281 = 1;
            if(::System::String::Equals3(tmp_280, _T("SafeArraySubType"))) tmp_281 = 2;
            if(::System::String::Equals3(tmp_280, _T("IidParameterIndex"))) tmp_281 = 3;
            if(::System::String::Equals3(tmp_280, _T("SafeArrayUserDefinedSubType"))) tmp_281 = 4;
            if(::System::String::Equals3(tmp_280, _T("SizeParamIndex"))) tmp_281 = 5;
            if(::System::String::Equals3(tmp_280, _T("MarshalType"))) tmp_281 = 6;
            if(::System::String::Equals3(tmp_280, _T("MarshalTypeRef"))) tmp_281 = 7;
            if(::System::String::Equals3(tmp_280, _T("MarshalCookie"))) tmp_281 = 8;
            switch(tmp_281)
            {
                case 0: case_1212: 
                {
                    value = (int32_t)(data->at(pos++));
                    (value = value | ((int32_t)(data->at(pos++)) << 8));
                    (value = value | ((int32_t)(data->at(pos++)) << 16));
                    (value = value | ((int32_t)(data->at(pos++)) << 24));
                    subtype = (System::Runtime::InteropServices::UnmanagedType)(value);
                    break;
                }
                case 1: case_1213: 
                {
                    value = (int32_t)(data->at(pos++));
                    (value = value | ((int32_t)(data->at(pos++)) << 8));
                    (value = value | ((int32_t)(data->at(pos++)) << 16));
                    (value = value | ((int32_t)(data->at(pos++)) << 24));
                    sizeConst = value;
                    hasSize = true;
                    break;
                }
                case 2: case_1214: 
                {
                    value = (int32_t)(data->at(pos++));
                    (value = value | ((int32_t)(data->at(pos++)) << 8));
                    (value = value | ((int32_t)(data->at(pos++)) << 16));
                    (value = value | ((int32_t)(data->at(pos++)) << 24));
                    subtype = (System::Runtime::InteropServices::UnmanagedType)(value);
                    break;
                }
                case 3: case_1215: 
                {
                    (pos = pos + 4);
                    break;
                }
                case 4: case_1216: 
                {
                    len = decode_len(data, pos, pos);
                    string_from_bytes(data, pos, len);
                    (pos = pos + len);
                    break;
                }
                case 5: case_1217: 
                {
                    value = (int32_t)(data->at(pos++));
                    (value = value | ((int32_t)(data->at(pos++)) << 8));
                    sizeParamIndex = value;
                    hasSize = true;
                    break;
                }
                case 6: case_1218: 
                {
                    len = decode_len(data, pos, pos);
                    marshalTypeName = string_from_bytes(data, pos, len);
                    (pos = pos + len);
                    break;
                }
                case 7: case_1219: 
                {
                    len = decode_len(data, pos, pos);
                    marshalTypeName = string_from_bytes(data, pos, len);
                    marshalTypeRef = System::Type::GetType4(marshalTypeName);
                    (pos = pos + len);
                    break;
                }
                case 8: case_1220: 
                {
                    len = decode_len(data, pos, pos);
                    marshalCookie = string_from_bytes(data, pos, len);
                    (pos = pos + len);
                    break;
                }
                default: case_1221: 
                {
                    throw cli::gcnew<System::Exception>(cli::concat(_T("Unknown MarshalAsAttribute field: "), named_name));
                }
            }
        }
        switch((System::Runtime::InteropServices::UnmanagedType)(utype)) {
            case System::Runtime::InteropServices::UnmanagedType::LPArray: case_1222: {
                if(hasSize) 
                {
                    return UnmanagedMarshal::DefineLPArrayInternal(subtype, sizeConst, sizeParamIndex);
                }
                 else 
                {
                    return UnmanagedMarshal::DefineLPArray(subtype);
                }
            }
            case System::Runtime::InteropServices::UnmanagedType::SafeArray: case_1223: {
                return UnmanagedMarshal::DefineSafeArray(subtype);
            }
            case System::Runtime::InteropServices::UnmanagedType::ByValArray: case_1224: {
                if(!(is_field)) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Specified unmanaged type is only valid on fields"));
                }
                return UnmanagedMarshal::DefineByValArray(sizeConst);
            }
            case System::Runtime::InteropServices::UnmanagedType::ByValTStr: case_1225: {
                return UnmanagedMarshal::DefineByValTStr(sizeConst);
            }
            case System::Runtime::InteropServices::UnmanagedType::CustomMarshaler: case_1226: {
                return UnmanagedMarshal::DefineCustom(marshalTypeRef, marshalCookie, marshalTypeName, (*System::Guid::Empty));
            }
            default: case_1227: {
                return UnmanagedMarshal::DefineUnmanagedMarshal((System::Runtime::InteropServices::UnmanagedType)(utype));
            }
        }
    }
    
    System::Type* CustomAttributeBuilder::elementTypeToType(int32_t elementType) {
        switch(elementType) {
            case 2: case_1228: {
                return cli::typeof<System::Type>::info;
            }
            case 3: case_1229: {
                return cli::typeof<System::Type>::info;
            }
            case 4: case_1230: {
                return cli::typeof<System::Type>::info;
            }
            case 5: case_1231: {
                return cli::typeof<System::Type>::info;
            }
            case 6: case_1232: {
                return cli::typeof<System::Type>::info;
            }
            case 7: case_1233: {
                return cli::typeof<System::Type>::info;
            }
            case 8: case_1234: {
                return cli::typeof<System::Type>::info;
            }
            case 9: case_1235: {
                return cli::typeof<System::Type>::info;
            }
            case 10: case_1236: {
                return cli::typeof<System::Type>::info;
            }
            case 11: case_1237: {
                return cli::typeof<System::Type>::info;
            }
            case 12: case_1238: {
                return cli::typeof<System::Type>::info;
            }
            case 13: case_1239: {
                return cli::typeof<System::Type>::info;
            }
            case 14: case_1240: {
                return cli::typeof<System::Type>::info;
            }
            default: case_1241: {
                throw cli::gcnew<System::Exception>(cli::concat(_T("Unknown element type \'"), cli::box(elementType)));
            }
        }
    }
    
    System::Object* CustomAttributeBuilder::decode_cattr_value(System::Type* t, cli::array<unsigned char>* data, int32_t pos, int32_t rpos) {
        switch(System::Type::GetTypeCode(t)) {
            case System::TypeCode::String2: case_1242: {
                if(((int32_t)(data->at(pos)) ==  255)) 
                {
                    rpos = (pos + 1);
                    return nullptr;
                }
                int32_t len = decode_len(data, pos, pos);
                rpos = (pos + len);
                return string_from_bytes(data, pos, len);
            }
            case System::TypeCode::Int322: case_1243: {
                rpos = (pos + 4);
                return cli::box(((((int32_t)(data->at(pos)) + ((int32_t)(data->at((pos + 1))) << 8)) + ((int32_t)(data->at((pos + 2))) << 16)) + ((int32_t)(data->at((pos + 3))) << 24)));
            }
            case System::TypeCode::Boolean2: case_1244: {
                rpos = (pos + 1);
                return cli::box(((int32_t)(data->at(pos)) ==  0) ? false : true);
            }
            case System::TypeCode::Object2: case_1245: {
                int32_t subtype = (int32_t)(data->at(pos));
                (pos = pos + 1);
                if(((subtype >= 2) && (subtype <= 14))) 
                {
                    return decode_cattr_value(elementTypeToType(subtype), data, pos, rpos);
                }
                 else 
                {
                    throw cli::gcnew<System::Exception>(cli::concat(_T("Subtype \'"), cli::box(subtype)));
                }
            }
            default: case_1246: {
                throw cli::gcnew<System::Exception>(cli::concat(_T("FIXME: Type "), t));
            }
        }
    }
    
    CustomAttributeInfo CustomAttributeBuilder::decode_cattr(CustomAttributeBuilder* customBuilder) {
        cli::array<unsigned char> *data = customBuilder->get_Data();
        System::Reflection::ConstructorInfo *ctor = customBuilder->get_Ctor();
        int32_t pos = 0;
        CustomAttributeInfo info = cli::ctor<CustomAttributeInfo>();
        if((data->get_Length() < 2)) 
        {
            throw cli::gcnew<System::Exception>(cli::concat(_T("Custom attr length is only \'"), cli::box(data->get_Length())));
        }
        if((((int32_t)(data->at(0)) != 1) || ((int32_t)(data->at(1)) != 0))) 
        {
            throw cli::gcnew<System::Exception>(_T("Prolog invalid"));
        }
        pos = 2;
        cli::array<System::Reflection::ParameterInfo*> *pi = GetParameters(ctor);
        info->ctor = ctor;
        info->ctorArgs = (new cli::array<System::Object*>(pi->get_Length()));
        for(int32_t i = 0; (i < pi->get_Length()); ++i) {
            info->ctorArgs->at(i) = decode_cattr_value(pi->at(i)->get_ParameterType_97c5fa09a0b988d(), data, pos, pos);
        }
        int32_t num_named = ((int32_t)(data->at(pos)) + ((int32_t)(data->at((pos + 1))) * 256));
        (pos = pos + 2);
        info->namedParamNames = (new cli::array<System::String*>(num_named));
        info->namedParamValues = (new cli::array<System::Object*>(num_named));
        for(int32_t i = 0; (i < num_named); ++i){
            int32_t named_type = (int32_t)(data->at(pos++));
            int32_t data_type = (int32_t)(data->at(pos++));
            System::String *enum_type_name = nullptr;
            if((data_type ==  85)) 
            {
                int32_t len2 = decode_len(data, pos, pos);
                enum_type_name = string_from_bytes(data, pos, len2);
                (pos = pos + len2);
            }
            int32_t len = decode_len(data, pos, pos);
            System::String *name = string_from_bytes(data, pos, len);
            info->namedParamNames->at(i) = name;
            (pos = pos + len);
            if((named_type ==  83)) 
            {
                System::Reflection::FieldInfo *fi = ctor->get_DeclaringType_6121cd6a84393166()->GetField_fb08cba9d1a4bc84(name, (System::Reflection::BindingFlags)52L);
                if(System::Reflection::FieldInfo::op_Equality2(fi, nullptr)) 
                {
                    throw cli::gcnew<System::Exception>(cli::concat(_T("Custom attribute type \'"), ctor->get_DeclaringType_6121cd6a84393166(), _T("\' doesn\'t contain a field named \'"), name, _T("\'")));
                }
                System::Object *val = decode_cattr_value(fi->get_FieldType_1dab4079098d7fff(), data, pos, pos);
                if((enum_type_name != nullptr)) 
                {
                    System::Type *enumType = System::Type::GetType4(enum_type_name);
                    val = System::Enum::ToObject5(enumType, val);
                }
                info->namedParamValues->at(i) = val;
            }
             else 
            {
                throw cli::gcnew<System::Exception>(cli::concat(_T("Unknown named type: "), cli::box(named_type)));
            }
        }
        return info;
    }
    
    void CustomAttributeBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CustomAttributeBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CustomAttributeBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CustomAttributeBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Reflection::ParameterInfo*>* CustomAttributeBuilder::GetParameters(System::Reflection::ConstructorInfo* ctor) {
        ConstructorBuilder *cb = cli::as<ConstructorBuilder*>(ctor);
        if(System::Reflection::ConstructorInfo::op_Inequality(cb, nullptr)) 
        {
            return cb->GetParametersInternal();
        }
        return ctor->GetParameters_9d17bcb549474c9();
    }
    
    System::Reflection::ConstructorInfo* CustomAttributeBuilder::get_Ctor() {
        return this->ctor;
    }
    
    cli::array<unsigned char>* CustomAttributeBuilder::get_Data() {
        return this->data;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void DerivedType::constructor(System::Type* elementType) {
        this->elementType = elementType;
    }
    
    void DerivedType::create_unmanaged_type(System::Type* type) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* DerivedType::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Type*>* DerivedType::GetInterfaces_52a89380e2c4a725() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* DerivedType::GetElementType_ab5070dbbfe66f5f() {
        return this->elementType;
    }
    
    System::Reflection::EventInfo* DerivedType::GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::EventInfo*>* DerivedType::GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::FieldInfo* DerivedType::GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::FieldInfo*>* DerivedType::GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::MemberInfo*>* DerivedType::GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::MethodInfo* DerivedType::GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::MethodInfo*>* DerivedType::GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* DerivedType::GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Type*>* DerivedType::GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::PropertyInfo*>* DerivedType::GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::PropertyInfo* DerivedType::GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::ConstructorInfo* DerivedType::GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::TypeAttributes DerivedType::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->elementType->get_Attributes();
    }
    
    bool DerivedType::HasElementTypeImpl_36e3ca23a6e8185() {
        return true;
    }
    
    bool DerivedType::IsArrayImpl_cf15f782d0773ffd() {
        return false;
    }
    
    bool DerivedType::IsByRefImpl_a1c403acfb80fd15() {
        return false;
    }
    
    bool DerivedType::IsCOMObjectImpl_27dfb5d026264856() {
        return false;
    }
    
    bool DerivedType::IsPointerImpl_86e7f94717f8b1ea() {
        return false;
    }
    
    bool DerivedType::IsPrimitiveImpl_b5951f74b8c48703() {
        return false;
    }
    
    cli::array<System::Reflection::ConstructorInfo*>* DerivedType::GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Object* DerivedType::InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::InterfaceMapping DerivedType::GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool DerivedType::IsInstanceOfType_bd709d8c55b4333d(System::Object* o) {
        return false;
    }
    
    bool DerivedType::IsAssignableFrom_e3aa32d778e63a90(System::Type* c) {
        return false;
    }
    
    System::Type* DerivedType::MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* DerivedType::MakeArrayType_9ec2b26036f00b30() {
        return cli::gcnew<ArrayType>(this, 0);
    }
    
    System::Type* DerivedType::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        if((rank < 1)) 
        {
            throw cli::gcnew<System::IndexOutOfRangeException>();
        }
        return cli::gcnew<ArrayType>(this, rank);
    }
    
    System::Type* DerivedType::MakeByRefType_fc54947a1bb074be() {
        return cli::gcnew<ByRefType>(this);
    }
    
    System::Type* DerivedType::MakePointerType_f23f3b9330ac63da() {
        return cli::gcnew<PointerType>(this);
    }
    
    System::String* DerivedType::ToString_1636a0751cb9ac11() {
        return FormatName_c623ebab7e1e1aea(this->elementType->ToString_1636a0751cb9ac11());
    }
    
    bool DerivedType::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* DerivedType::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* DerivedType::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool DerivedType::get_ContainsGenericParameters_19598881dd690ad3() {
        return this->elementType->get_ContainsGenericParameters_19598881dd690ad3();
    }
    
    System::Reflection::GenericParameterAttributes DerivedType::get_GenericParameterAttributes_b31b8b8f1d79d815() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Runtime::InteropServices::StructLayoutAttribute* DerivedType::get_StructLayoutAttribute_c8846f98114193d0() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::Assembly* DerivedType::get_Assembly_3aae0acbf2a6d696() {
        return this->elementType->get_Assembly_3aae0acbf2a6d696();
    }
    
    System::String* DerivedType::get_AssemblyQualifiedName_cea373c2171bd483() {
        System::String *fullName = FormatName_c623ebab7e1e1aea(this->elementType->get_FullName_7e8fa72ba225e1a4());
        if((fullName ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::concat(fullName, _T(", "));
    }
    
    System::String* DerivedType::get_FullName_7e8fa72ba225e1a4() {
        return FormatName_c623ebab7e1e1aea(this->elementType->get_FullName_7e8fa72ba225e1a4());
    }
    
    System::String* DerivedType::get_Name_50fad5fa936c3ae2() {
        return FormatName_c623ebab7e1e1aea(this->elementType->get_Name_50fad5fa936c3ae2());
    }
    
    System::Guid DerivedType::get_GUID_bdb6b630c3237a21() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::Module* DerivedType::get_Module_ea7d65dc88202263() {
        return this->elementType->get_Module_ea7d65dc88202263();
    }
    
    System::String* DerivedType::get_Namespace_cb4ed37007083e7f() {
        return this->elementType->get_Namespace_cb4ed37007083e7f();
    }
    
    System::RuntimeTypeHandle DerivedType::get_TypeHandle_a14995fa9102936b() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* DerivedType::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        create_unmanaged_type(this);
        return this;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ArrayType::constructor(System::Type* elementType, int32_t rank) {
        this->rank = rank;
    }
    
    int32_t ArrayType::GetEffectiveRank() {
        return this->rank;
    }
    
    System::Type* ArrayType::InternalResolve_ba2e81f73f0d7994() {
        System::Type *et = this->elementType->InternalResolve_ba2e81f73f0d7994();
        if((this->rank ==  0)) 
        {
            return et->MakeArrayType_9ec2b26036f00b30();
        }
        return et->MakeArrayType_b5bc09824bbbb104(this->rank);
    }
    
    bool ArrayType::IsArrayImpl_cf15f782d0773ffd() {
        return true;
    }
    
    int32_t ArrayType::GetArrayRank_fccf91da5e4acf4f() {
        return (this->rank ==  0) ? 1 : this->rank;
    }
    
    System::Reflection::TypeAttributes ArrayType::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->elementType->get_Attributes();
    }
    
    System::String* ArrayType::FormatName_c623ebab7e1e1aea(System::String* elementName) {
        if((elementName ==  nullptr)) 
        {
            return nullptr;
        }
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>(elementName);
        sb->Append2(_T("["));
        for(int32_t i = 1; (i < this->rank); ++i) {
            sb->Append2(_T(","));
        }
        if((this->rank ==  1)) 
        {
            sb->Append2(_T("*"));
        }
        sb->Append2(_T("]"));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    System::Type* ArrayType::get_BaseType_6a0646ae880055f6() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ByRefType::constructor(System::Type* elementType) {
    }
    
    System::Type* ByRefType::InternalResolve_ba2e81f73f0d7994() {
        return this->elementType->InternalResolve_ba2e81f73f0d7994()->MakeByRefType_fc54947a1bb074be();
    }
    
    bool ByRefType::IsByRefImpl_a1c403acfb80fd15() {
        return true;
    }
    
    System::String* ByRefType::FormatName_c623ebab7e1e1aea(System::String* elementName) {
        if((elementName ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::concat(elementName, _T("&"));
    }
    
    System::Type* ByRefType::MakeArrayType_9ec2b26036f00b30() {
        throw cli::gcnew<System::ArgumentException>(_T("Cannot create an array type of a byref type"));
    }
    
    System::Type* ByRefType::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        throw cli::gcnew<System::ArgumentException>(_T("Cannot create an array type of a byref type"));
    }
    
    System::Type* ByRefType::MakeByRefType_fc54947a1bb074be() {
        throw cli::gcnew<System::ArgumentException>(_T("Cannot create a byref type of an already byref type"));
    }
    
    System::Type* ByRefType::MakePointerType_f23f3b9330ac63da() {
        throw cli::gcnew<System::ArgumentException>(_T("Cannot create a pointer type of a byref type"));
    }
    
    System::Type* ByRefType::get_BaseType_6a0646ae880055f6() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void PointerType::constructor(System::Type* elementType) {
    }
    
    System::Type* PointerType::InternalResolve_ba2e81f73f0d7994() {
        return this->elementType->InternalResolve_ba2e81f73f0d7994()->MakePointerType_f23f3b9330ac63da();
    }
    
    bool PointerType::IsPointerImpl_86e7f94717f8b1ea() {
        return true;
    }
    
    System::String* PointerType::FormatName_c623ebab7e1e1aea(System::String* elementName) {
        if((elementName ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::concat(elementName, _T("*"));
    }
    
    System::Type* PointerType::get_BaseType_6a0646ae880055f6() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void DynamicILInfo::constructor() {
    }
    
    void DynamicILInfo::constructor(DynamicMethod* method) {
        this->method = method;
    }
    
    int32_t DynamicILInfo::GetTokenFor(cli::array<unsigned char>* signature) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t DynamicILInfo::GetTokenFor2(DynamicMethod* method) {
        return this->method->GetILGenerator()->get_TokenGenerator()->GetToken_10bcc90da5b44782(method, false);
    }
    
    int32_t DynamicILInfo::GetTokenFor3(System::RuntimeFieldHandle field) {
        return this->method->GetILGenerator()->get_TokenGenerator()->GetToken_10bcc90da5b44782(System::Reflection::FieldInfo::GetFieldFromHandle(field), false);
    }
    
    int32_t DynamicILInfo::GetTokenFor4(System::RuntimeMethodHandle method) {
        System::Reflection::MethodInfo *mi = cli::cast<System::Reflection::MethodInfo*>(System::Reflection::MethodBase::GetMethodFromHandle(method));
        return this->method->GetILGenerator()->get_TokenGenerator()->GetToken_10bcc90da5b44782(mi, false);
    }
    
    int32_t DynamicILInfo::GetTokenFor5(System::RuntimeTypeHandle type) {
        System::Type *t = System::Type::GetTypeFromHandle(type);
        return this->method->GetILGenerator()->get_TokenGenerator()->GetToken_10bcc90da5b44782(t, false);
    }
    
    int32_t DynamicILInfo::GetTokenFor6(System::String* literal) {
        return this->method->GetILGenerator()->get_TokenGenerator()->GetToken_25c90de716173dc6(literal);
    }
    
    int32_t DynamicILInfo::GetTokenFor7(System::RuntimeMethodHandle method, System::RuntimeTypeHandle contextType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t DynamicILInfo::GetTokenFor8(System::RuntimeFieldHandle field, System::RuntimeTypeHandle contextType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DynamicILInfo::SetCode(cli::array<unsigned char>* code, int32_t maxStackSize) {
        if((code ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("code"));
        }
        this->method->GetILGenerator()->SetCode(code, maxStackSize);
    }
    
    void DynamicILInfo::SetCode2(unsigned char* code, int32_t codeSize, int32_t maxStackSize) {
        if((code ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("code"));
        }
        this->method->GetILGenerator()->SetCode2(code, codeSize, maxStackSize);
    }
    
    void DynamicILInfo::SetExceptions(cli::array<unsigned char>* exceptions) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DynamicILInfo::SetExceptions2(unsigned char* exceptions, int32_t exceptionsSize) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DynamicILInfo::SetLocalSignature(cli::array<unsigned char>* localSignature) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DynamicILInfo::SetLocalSignature2(unsigned char* localSignature, int32_t signatureSize) {
        cli::array<unsigned char> *b = (new cli::array<unsigned char>(signatureSize));
        for(int32_t i = 0; (i < signatureSize); ++i) {
            b->at(i) = (*(localSignature + i));
        }
    }
    
    DynamicMethod* DynamicILInfo::get_DynamicMethod() {
        return this->method;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    System::Reflection::Module*  AnonHostModuleHolder::anon_host_module;
    
    AnonHostModuleHolder::AnonHostModuleHolder()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void AnonHostModuleHolder::static_constructor() {
        System::Reflection::AssemblyName *aname = cli::gcnew<System::Reflection::AssemblyName>();
        aname->set_Name(_T("Anonymously Hosted DynamicMethods Assembly"));
        AssemblyBuilder *ab = System::AppDomain::get_CurrentDomain()->DefineDynamicAssembly(aname, AssemblyBuilderAccess::Run);
        anon_host_module = ab->GetManifestModule_e233b7576740b3d7();
    }
    
    void AnonHostModuleHolder::constructor() {
    }
    
    System::Reflection::Module* AnonHostModuleHolder::get_AnonHostModule() {
        return anon_host_module;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m, bool skipVisibility) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, bool skipVisibility) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, bool skipVisibility) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Reflection::Module* m, bool skipVisibility) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Type* returnType, cli::array<System::Type*>* parameterTypes, bool restrictedSkipVisibility) {
    }
    
    void DynamicMethod::constructor(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Type* owner, System::Reflection::Module* m, bool skipVisibility, bool anonHosted) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(System::Type::op_Equality2(returnType, nullptr)) 
        {
            returnType = cli::typeof<System::Type>::info;
        }
        if((System::Reflection::Module::op_Equality(m, nullptr) && !(anonHosted))) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("m"));
        }
        if(returnType->get_IsByRef()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Return type can\'t be a byref type"), _T("returnType"));
        }
        if((parameterTypes != nullptr)) 
        {
            for(int32_t i = 0; (i < parameterTypes->get_Length()); ++i) {
                if(System::Type::op_Equality2(parameterTypes->at(i), nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Parameter "), cli::box(i)), _T("parameterTypes"));
                }
            }
        }
        if(System::Reflection::Module::op_Equality(m, nullptr)) 
        {
            m = AnonHostModuleHolder::get_AnonHostModule();
        }
        this->name = name;
        this->attributes = (System::Reflection::MethodAttributes)(((int32_t)(attributes) | 16));
        this->callingConvention = callingConvention;
        this->returnType = returnType;
        this->parameters = parameterTypes;
        this->owner = owner;
        this->module = m;
        this->skipVisibility = skipVisibility;
    }
    
    void DynamicMethod::create_dynamic_method(DynamicMethod* m) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DynamicMethod::CreateDynMethod() {
        if(::System::IntPtr::op_Equality(this->mhandle->get_Value(), (*::System::IntPtr::Zero))) 
        {
            if(((this->ilgen ==  nullptr) || (this->ilgen->get_ILOffset_a7e0ed1bc16093d6() ==  0))) 
            {
                throw cli::gcnew<System::InvalidOperationException>(cli::concat(_T("Method \'"), this->name));
            }
            this->ilgen->label_fixup();
            {
                cli::finally_guard([&]() {
                    this->creating = false;
                });
                this->creating = true;
                if((this->refs != nullptr)) 
                {
                    for(int32_t i = 0; (i < this->refs->get_Length()); ++i){
                        if(cli::is<DynamicMethod>(this->refs->at(i))) 
                        {
                            DynamicMethod *m = cli::cast<DynamicMethod*>(this->refs->at(i));
                            if(!(m->creating)) 
                            {
                                m->CreateDynMethod();
                            }
                        }
                    }
                }
            }
            create_dynamic_method(this);
        }
    }
    
    System::Delegate* DynamicMethod::CreateDelegate(System::Type* delegateType) {
        if(System::Type::op_Equality2(delegateType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("delegateType"));
        }
        if((this->deleg != nullptr)) 
        {
            return this->deleg;
        }
        CreateDynMethod();
        this->deleg = System::Delegate::CreateDelegate5(delegateType, this);
        return this->deleg;
    }
    
    System::Delegate* DynamicMethod::CreateDelegate2(System::Type* delegateType, System::Object* target) {
        if(System::Type::op_Equality2(delegateType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("delegateType"));
        }
        CreateDynMethod();
        return System::Delegate::CreateDelegate3(delegateType, target, this);
    }
    
    ParameterBuilder* DynamicMethod::DefineParameter(int32_t position, System::Reflection::ParameterAttributes attributes, System::String* parameterName) {
        if(((position < 0) || (position > this->parameters->get_Length()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("position"));
        }
        RejectIfCreated();
        ParameterBuilder *pb = cli::gcnew<ParameterBuilder>(this, position, attributes, parameterName);
        if((this->pinfo ==  nullptr)) 
        {
            this->pinfo = (new cli::array<ParameterBuilder*>((this->parameters->get_Length() + 1)));
        }
        this->pinfo->at(position) = pb;
        return pb;
    }
    
    System::Reflection::MethodInfo* DynamicMethod::GetBaseDefinition_b00937f21f1a7556() {
        return this;
    }
    
    cli::array<System::Object*>* DynamicMethod::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Object*>* DynamicMethod::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    DynamicILInfo* DynamicMethod::GetDynamicILInfo() {
        if((this->il_info ==  nullptr)) 
        {
            this->il_info = cli::gcnew<DynamicILInfo>(this);
        }
        return this->il_info;
    }
    
    ILGenerator* DynamicMethod::GetILGenerator() {
        return GetILGenerator2(64);
    }
    
    ILGenerator* DynamicMethod::GetILGenerator2(int32_t streamSize) {
        if((((int32_t)(((int32_t)(GetMethodImplementationFlags_814f2d9055c5e3f0()) & 3)) != 0) || ((int32_t)(((int32_t)(GetMethodImplementationFlags_814f2d9055c5e3f0()) & 4)) != 0))) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Method body should not exist."));
        }
        if((this->ilgen != nullptr)) 
        {
            return this->ilgen;
        }
        this->ilgen = cli::gcnew<ILGenerator>(this->get_Module_ea7d65dc88202263(), cli::gcnew<DynamicMethodTokenGenerator>(this), streamSize);
        return this->ilgen;
    }
    
    System::Reflection::MethodImplAttributes DynamicMethod::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return System::Reflection::MethodImplAttributes::IL;
    }
    
    cli::array<System::Reflection::ParameterInfo*>* DynamicMethod::GetParameters_9d17bcb549474c9() {
        if((this->parameters ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::ParameterInfo*>(0));
        }
        cli::array<System::Reflection::ParameterInfo*> *retval = (new cli::array<System::Reflection::ParameterInfo*>(this->parameters->get_Length()));
        for(int32_t i = 0; (i < this->parameters->get_Length()); i++){
            retval->at(i) = cli::gcnew<System::Reflection::ParameterInfo>((this->pinfo ==  nullptr) ? nullptr : this->pinfo->at((i + 1)), this->parameters->at(i), this, (i + 1));
        }
        return retval;
    }
    
    int32_t DynamicMethod::GetParameterCount_ac86b3a4965d967a() {
        return (this->parameters ==  nullptr) ? 0 : this->parameters->get_Length();
    }
    
    System::Type* DynamicMethod::GetParameterType_f80ea4ad68a899fb(int32_t pos) {
        return this->parameters->at(pos);
    }
    
    System::Object* DynamicMethod::Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        try {
            CreateDynMethod();
            if(System::Reflection::MethodInfo::op_Equality(this->method, nullptr)) 
            {
                this->method = cli::gcnew<System::Reflection::MonoMethod>(this->mhandle);
            }
            return this->method->Invoke2(obj, parameters);
        }
        catch(System::MethodAccessException* mae) {
            throw cli::gcnew<System::Reflection::TargetInvocationException>(_T("Method cannot be invoked."), mae);
        }
    }
    
    bool DynamicMethod::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* DynamicMethod::ToString_1636a0751cb9ac11() {
        System::String *parms = System::String::Empty;
        cli::array<System::Reflection::ParameterInfo*> *p = GetParameters_ab7269a35b115074();
        for(int32_t i = 0; (i < p->get_Length()); ++i){
            if((i > 0)) 
            {
                parms = cli::concat(parms, _T(", "));
            }
            parms = cli::concat(parms, p->at(i)->get_ParameterType_97c5fa09a0b988d()->get_Name_50fad5fa936c3ae2());
        }
        return cli::concat(this->get_ReturnType_832339e848f448fe()->get_Name_50fad5fa936c3ae2(), _T(" "), this->get_Name_50fad5fa936c3ae2(), _T("("), parms, _T(")"));
    }
    
    void DynamicMethod::RejectIfCreated() {
        if(::System::IntPtr::op_Inequality(this->mhandle->get_Value(), (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type definition of the method is complete."));
        }
    }
    
    int32_t DynamicMethod::AddRef(System::Object* reference) {
        if((this->refs ==  nullptr)) 
        {
            this->refs = (new cli::array<System::Object*>(4));
        }
        if((this->nrefs >= (this->refs->get_Length() - 1))) 
        {
            cli::array<System::Object*> *new_refs = (new cli::array<System::Object*>((this->refs->get_Length() * 2)));
            System::Array::Copy(this->refs, new_refs, this->refs->get_Length());
            this->refs = new_refs;
        }
        this->refs->at(this->nrefs) = reference;
        this->refs->at((this->nrefs + 1)) = nullptr;
        (this->nrefs = this->nrefs + 2);
        return (this->nrefs - 1);
    }
    
    System::Reflection::MethodAttributes DynamicMethod::get_Attributes_b3976e6a55c088be() {
        return this->attributes;
    }
    
    System::Reflection::CallingConventions DynamicMethod::get_CallingConvention_309cf574b58a053a() {
        return this->callingConvention;
    }
    
    System::Type* DynamicMethod::get_DeclaringType_6121cd6a84393166() {
        return nullptr;
    }
    
    bool DynamicMethod::get_InitLocals() {
        return this->init_locals;
    }
    
    bool DynamicMethod::set_InitLocals(bool value) {
        this->init_locals = value;
        return get_InitLocals();
    }
    
    System::RuntimeMethodHandle DynamicMethod::get_MethodHandle_a92ba3e25e0a5ec8() {
        return this->mhandle;
    }
    
    System::Reflection::Module* DynamicMethod::get_Module_ea7d65dc88202263() {
        return this->module;
    }
    
    System::String* DynamicMethod::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
    System::Type* DynamicMethod::get_ReflectedType_bf4971c0f442b9dc() {
        return nullptr;
    }
    
    System::Reflection::ParameterInfo* DynamicMethod::get_ReturnParameter_d8c8b72c8a40767c() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* DynamicMethod::get_ReturnType_832339e848f448fe() {
        return this->returnType;
    }
    
    System::Reflection::ICustomAttributeProvider* DynamicMethod::get_ReturnTypeCustomAttributes_da3feb150ffa13fb() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void DynamicMethodTokenGenerator::constructor(DynamicMethod* m) {
        this->m = m;
    }
    
    int32_t DynamicMethodTokenGenerator::GetToken(System::String* str) {
        return this->m->AddRef(str);
    }
    
    int32_t DynamicMethodTokenGenerator::GetToken2(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    int32_t DynamicMethodTokenGenerator::GetToken3(System::Reflection::MemberInfo* member, bool create_open_instance) {
        return this->m->AddRef(member);
    }
    
    int32_t DynamicMethodTokenGenerator::GetToken4(SignatureHelper* helper) {
        return this->m->AddRef(helper);
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void EnumBuilder::constructor(ModuleBuilder* mb, System::String* name, System::Reflection::TypeAttributes visibility, System::Type* underlyingType) {
        this->_tb = cli::gcnew<TypeBuilder>(mb, name, (System::Reflection::TypeAttributes)(((int32_t)(visibility) | 256)), cli::typeof<System::Type>::info, nullptr, PackingSize::Unspecified, 0, nullptr);
        this->_underlyingType = underlyingType;
        this->_underlyingField = this->_tb->DefineField(_T("value__"), underlyingType, (System::Reflection::FieldAttributes)1537L);
        setup_enum_type(this->_tb);
    }
    
    TypeBuilder* EnumBuilder::GetTypeBuilder() {
        return this->_tb;
    }
    
    System::Type* EnumBuilder::InternalResolve_ba2e81f73f0d7994() {
        return this->_tb->InternalResolve_ba2e81f73f0d7994();
    }
    
    System::Type* EnumBuilder::CreateType() {
        System::Type *res = this->_tb->CreateType();
        return res;
    }
    
    System::Type* EnumBuilder::GetEnumUnderlyingType_54ea3579073894ef() {
        return this->_underlyingType;
    }
    
    void EnumBuilder::setup_enum_type(System::Type* t) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    FieldBuilder* EnumBuilder::DefineLiteral(System::String* literalName, System::Object* literalValue) {
        System::Type *fieldType = this;
        FieldBuilder *fieldBuilder = this->_tb->DefineField(literalName, fieldType, (System::Reflection::FieldAttributes)86L);
        fieldBuilder->SetConstant(literalValue);
        return fieldBuilder;
    }
    
    System::Reflection::TypeAttributes EnumBuilder::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->_tb->attrs;
    }
    
    System::Reflection::ConstructorInfo* EnumBuilder::GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        return this->_tb->GetConstructor4(bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<System::Reflection::ConstructorInfo*>* EnumBuilder::GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetConstructors_736b6e990b94b352(bindingAttr);
    }
    
    cli::array<System::Object*>* EnumBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        return this->_tb->GetCustomAttributes_b790992b66049291(inherit);
    }
    
    cli::array<System::Object*>* EnumBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return this->_tb->GetCustomAttributes_90419687cfa65ef7(attributeType, inherit);
    }
    
    System::Type* EnumBuilder::GetElementType_ab5070dbbfe66f5f() {
        return this->_tb->GetElementType_ab5070dbbfe66f5f();
    }
    
    System::Reflection::EventInfo* EnumBuilder::GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetEvent_7f053fa54114e387(name, bindingAttr);
    }
    
    cli::array<System::Reflection::EventInfo*>* EnumBuilder::GetEvents_e6858c959b77de38() {
        return this->_tb->GetEvents_e6858c959b77de38();
    }
    
    cli::array<System::Reflection::EventInfo*>* EnumBuilder::GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetEvents_a960b087e4d67be2(bindingAttr);
    }
    
    System::Reflection::FieldInfo* EnumBuilder::GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetField_fb08cba9d1a4bc84(name, bindingAttr);
    }
    
    cli::array<System::Reflection::FieldInfo*>* EnumBuilder::GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetFields_369be5ac49d99f8(bindingAttr);
    }
    
    System::Type* EnumBuilder::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        return this->_tb->GetInterface_55c1d0ec3ece6104(name, ignoreCase);
    }
    
    System::Reflection::InterfaceMapping EnumBuilder::GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) {
        return this->_tb->GetInterfaceMap_26193b1c1167fea4(interfaceType);
    }
    
    cli::array<System::Type*>* EnumBuilder::GetInterfaces_52a89380e2c4a725() {
        return this->_tb->GetInterfaces_52a89380e2c4a725();
    }
    
    cli::array<System::Reflection::MemberInfo*>* EnumBuilder::GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetMember_9c934e7384b805e1(name, type, bindingAttr);
    }
    
    cli::array<System::Reflection::MemberInfo*>* EnumBuilder::GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetMembers_54432b0ff6e99174(bindingAttr);
    }
    
    System::Reflection::MethodInfo* EnumBuilder::GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        if((types ==  nullptr)) 
        {
            return this->_tb->GetMethod2(name, bindingAttr);
        }
        return this->_tb->GetMethod6(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    cli::array<System::Reflection::MethodInfo*>* EnumBuilder::GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetMethods_c5b4e5d4877e6672(bindingAttr);
    }
    
    System::Type* EnumBuilder::GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetNestedType_31962c16c0c85df9(name, bindingAttr);
    }
    
    cli::array<System::Type*>* EnumBuilder::GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetNestedTypes_bb6ee40b0fa4052d(bindingAttr);
    }
    
    cli::array<System::Reflection::PropertyInfo*>* EnumBuilder::GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) {
        return this->_tb->GetProperties_9fb6c40e3662fdd7(bindingAttr);
    }
    
    System::Reflection::PropertyInfo* EnumBuilder::GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw CreateNotSupportedException();
    }
    
    bool EnumBuilder::HasElementTypeImpl_36e3ca23a6e8185() {
        return this->_tb->get_HasElementType();
    }
    
    System::Object* EnumBuilder::InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        return this->_tb->InvokeMember_70c4601d847070a2(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
    }
    
    bool EnumBuilder::IsArrayImpl_cf15f782d0773ffd() {
        return false;
    }
    
    bool EnumBuilder::IsByRefImpl_a1c403acfb80fd15() {
        return false;
    }
    
    bool EnumBuilder::IsCOMObjectImpl_27dfb5d026264856() {
        return false;
    }
    
    bool EnumBuilder::IsPointerImpl_86e7f94717f8b1ea() {
        return false;
    }
    
    bool EnumBuilder::IsPrimitiveImpl_b5951f74b8c48703() {
        return false;
    }
    
    bool EnumBuilder::IsValueTypeImpl_fe1651255927f3c6() {
        return true;
    }
    
    bool EnumBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return this->_tb->IsDefined_91943a8ac363f11f(attributeType, inherit);
    }
    
    System::Type* EnumBuilder::MakeArrayType_9ec2b26036f00b30() {
        return cli::gcnew<ArrayType>(this, 0);
    }
    
    System::Type* EnumBuilder::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        if((rank < 1)) 
        {
            throw cli::gcnew<System::IndexOutOfRangeException>();
        }
        return cli::gcnew<ArrayType>(this, rank);
    }
    
    System::Type* EnumBuilder::MakeByRefType_fc54947a1bb074be() {
        return cli::gcnew<ByRefType>(this);
    }
    
    System::Type* EnumBuilder::MakePointerType_f23f3b9330ac63da() {
        return cli::gcnew<PointerType>(this);
    }
    
    void EnumBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        this->_tb->SetCustomAttribute(customBuilder);
    }
    
    void EnumBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    System::Exception* EnumBuilder::CreateNotSupportedException() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    void EnumBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EnumBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EnumBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EnumBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::Assembly* EnumBuilder::get_Assembly_3aae0acbf2a6d696() {
        return this->_tb->get_Assembly_3aae0acbf2a6d696();
    }
    
    System::String* EnumBuilder::get_AssemblyQualifiedName_cea373c2171bd483() {
        return this->_tb->get_AssemblyQualifiedName_cea373c2171bd483();
    }
    
    System::Type* EnumBuilder::get_BaseType_6a0646ae880055f6() {
        return this->_tb->get_BaseType_6a0646ae880055f6();
    }
    
    System::Type* EnumBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->_tb->get_DeclaringType_6121cd6a84393166();
    }
    
    System::String* EnumBuilder::get_FullName_7e8fa72ba225e1a4() {
        return this->_tb->get_FullName_7e8fa72ba225e1a4();
    }
    
    System::Guid EnumBuilder::get_GUID_bdb6b630c3237a21() {
        return this->_tb->get_GUID_bdb6b630c3237a21();
    }
    
    System::Reflection::Module* EnumBuilder::get_Module_ea7d65dc88202263() {
        return this->_tb->get_Module_ea7d65dc88202263();
    }
    
    System::String* EnumBuilder::get_Name_50fad5fa936c3ae2() {
        return this->_tb->get_Name_50fad5fa936c3ae2();
    }
    
    System::String* EnumBuilder::get_Namespace_cb4ed37007083e7f() {
        return this->_tb->get_Namespace_cb4ed37007083e7f();
    }
    
    System::Type* EnumBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->_tb->get_ReflectedType_bf4971c0f442b9dc();
    }
    
    System::RuntimeTypeHandle EnumBuilder::get_TypeHandle_a14995fa9102936b() {
        return this->_tb->get_TypeHandle_a14995fa9102936b();
    }
    
    TypeToken EnumBuilder::get_TypeToken() {
        return this->_tb->get_TypeToken();
    }
    
    FieldBuilder* EnumBuilder::get_UnderlyingField() {
        return this->_underlyingField;
    }
    
    System::Type* EnumBuilder::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        return this->_underlyingType;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void EventBuilder::constructor(TypeBuilder* tb, System::String* eventName, System::Reflection::EventAttributes eventAttrs, System::Type* eventType) {
        this->name = eventName;
        this->attrs = eventAttrs;
        this->type = eventType;
        this->typeb = tb;
        this->table_idx = get_next_table_index(this, 20, true);
    }
    
    int32_t EventBuilder::get_next_table_index(System::Object* obj, int32_t table, bool inc) {
        return this->typeb->get_next_table_index(obj, table, inc);
    }
    
    void EventBuilder::AddOtherMethod(MethodBuilder* mdBuilder) {
        if(System::Reflection::MethodInfo::op_Equality(mdBuilder, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("mdBuilder"));
        }
        RejectIfCreated();
        if((this->other_methods != nullptr)) 
        {
            cli::array<MethodBuilder*> *newv = (new cli::array<MethodBuilder*>((this->other_methods->get_Length() + 1)));
            cli::import(this->other_methods)->CopyTo(newv, 0);
            this->other_methods = newv;
        }
         else 
        {
            this->other_methods = (new cli::array<MethodBuilder*>(1));
        }
        this->other_methods->at((this->other_methods->get_Length() - 1)) = mdBuilder;
    }
    
    EventToken EventBuilder::GetEventToken() {
        return cli::ctor<EventToken>((335544320 | this->table_idx));
    }
    
    void EventBuilder::SetAddOnMethod(MethodBuilder* mdBuilder) {
        if(System::Reflection::MethodInfo::op_Equality(mdBuilder, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("mdBuilder"));
        }
        RejectIfCreated();
        this->add_method = mdBuilder;
    }
    
    void EventBuilder::SetRaiseMethod(MethodBuilder* mdBuilder) {
        if(System::Reflection::MethodInfo::op_Equality(mdBuilder, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("mdBuilder"));
        }
        RejectIfCreated();
        this->raise_method = mdBuilder;
    }
    
    void EventBuilder::SetRemoveOnMethod(MethodBuilder* mdBuilder) {
        if(System::Reflection::MethodInfo::op_Equality(mdBuilder, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("mdBuilder"));
        }
        RejectIfCreated();
        this->remove_method = mdBuilder;
    }
    
    void EventBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        RejectIfCreated();
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.CompilerServices.SpecialNameAttribute"))) 
        {
            (this->attrs = (System::Reflection::EventAttributes)(((int32_t)(this->attrs) | 512)));
            return;
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void EventBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if((binaryAttribute ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryAttribute"));
        }
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void EventBuilder::RejectIfCreated() {
        if(this->typeb->get_is_created()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type definition of the method is complete."));
        }
    }
    
    void EventBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void EventOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, EventBuilder* evt) {
        this->instantiation = instantiation;
        this->event_builder = evt;
    }
    
    void EventOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::EventInfo* evt) {
        this->instantiation = instantiation;
        this->event_info = evt;
    }
    
    System::Reflection::MethodInfo* EventOnTypeBuilderInst::GetAddMethod_e6ed2f5f0e24f59f(bool nonPublic) {
        System::Reflection::MethodInfo *add = (this->event_builder != nullptr) ? this->event_builder->add_method : this->event_info->GetAddMethod_e6ed2f5f0e24f59f(nonPublic);
        if((System::Reflection::MethodInfo::op_Equality(add, nullptr) || (!(nonPublic) && !(add->get_IsPublic())))) 
        {
            return nullptr;
        }
        return TypeBuilder::GetMethod8(this->instantiation, add);
    }
    
    System::Reflection::MethodInfo* EventOnTypeBuilderInst::GetRaiseMethod_da2f94f17ce18705(bool nonPublic) {
        System::Reflection::MethodInfo *raise = (this->event_builder != nullptr) ? this->event_builder->raise_method : this->event_info->GetRaiseMethod_da2f94f17ce18705(nonPublic);
        if((System::Reflection::MethodInfo::op_Equality(raise, nullptr) || (!(nonPublic) && !(raise->get_IsPublic())))) 
        {
            return nullptr;
        }
        return TypeBuilder::GetMethod8(this->instantiation, raise);
    }
    
    System::Reflection::MethodInfo* EventOnTypeBuilderInst::GetRemoveMethod_2709ba07e73fded4(bool nonPublic) {
        System::Reflection::MethodInfo *remove = (this->event_builder != nullptr) ? this->event_builder->remove_method : this->event_info->GetRemoveMethod_2709ba07e73fded4(nonPublic);
        if((System::Reflection::MethodInfo::op_Equality(remove, nullptr) || (!(nonPublic) && !(remove->get_IsPublic())))) 
        {
            return nullptr;
        }
        return TypeBuilder::GetMethod8(this->instantiation, remove);
    }
    
    cli::array<System::Reflection::MethodInfo*>* EventOnTypeBuilderInst::GetOtherMethods_cea105c0bef756da(bool nonPublic) {
        cli::array<System::Reflection::MethodInfo*> *other = (this->event_builder != nullptr) ? cli::cast<cli::array<System::Reflection::MethodInfo*>*>(this->event_builder->other_methods) : cli::cast<cli::array<System::Reflection::MethodInfo*>*>(this->event_info->GetOtherMethods_cea105c0bef756da(nonPublic));
        if((other ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::MethodInfo*>(0));
        }
        System::Collections::ArrayList *ar = cli::gcnew<System::Collections::ArrayList>();
        for(auto tmp_282 : other) {
            auto method = cli::cast<System::Reflection::MethodInfo*>(tmp_282);
            {
                if((nonPublic || method->get_IsPublic())) 
                {
                    ar->Add_e6a92085999ce388(TypeBuilder::GetMethod8(this->instantiation, method));
                }
            }
        }
        cli::array<System::Reflection::MethodInfo*> *res = (new cli::array<System::Reflection::MethodInfo*>(ar->get_Count_2354963792616712()));
        ar->CopyTo_2bc540dad3c25b9e(res, 0);
        return res;
    }
    
    bool EventOnTypeBuilderInst::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* EventOnTypeBuilderInst::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* EventOnTypeBuilderInst::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::EventAttributes EventOnTypeBuilderInst::get_Attributes_3412d62533ff880() {
        return (this->event_builder != nullptr) ? this->event_builder->attrs : this->event_info->get_Attributes_3412d62533ff880();
    }
    
    System::Type* EventOnTypeBuilderInst::get_DeclaringType_6121cd6a84393166() {
        return this->instantiation;
    }
    
    System::String* EventOnTypeBuilderInst::get_Name_50fad5fa936c3ae2() {
        return (this->event_builder != nullptr) ? this->event_builder->name : this->event_info->get_Name_50fad5fa936c3ae2();
    }
    
    System::Type* EventOnTypeBuilderInst::get_ReflectedType_bf4971c0f442b9dc() {
        return this->instantiation;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void FieldBuilder::constructor(TypeBuilder* tb, System::String* fieldName, System::Type* type, System::Reflection::FieldAttributes attributes, cli::array<System::Type*>* modReq, cli::array<System::Type*>* modOpt) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        this->attrs = attributes;
        this->name = fieldName;
        this->type = type;
        this->modReq = modReq;
        this->modOpt = modOpt;
        this->offset = -1;
        this->typeb = tb;
        this->table_idx = tb->get_next_table_index(this, 4, true);
        cli::cast<ModuleBuilder*>(tb->get_Module_ea7d65dc88202263())->RegisterToken(this, GetToken()->get_Token());
    }
    
    cli::array<System::Object*>* FieldBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        if(this->typeb->get_is_created()) 
        {
            return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
        }
         else 
        {
            throw CreateNotSupportedException();
        }
    }
    
    cli::array<System::Object*>* FieldBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        if(this->typeb->get_is_created()) 
        {
            return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
        }
         else 
        {
            throw CreateNotSupportedException();
        }
    }
    
    FieldToken FieldBuilder::GetToken() {
        return cli::ctor<FieldToken>(this->get_MetadataToken_85fbeea46e971f25());
    }
    
    System::Object* FieldBuilder::GetValue_57ad13b528e8b8a5(System::Object* obj) {
        throw CreateNotSupportedException();
    }
    
    bool FieldBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw CreateNotSupportedException();
    }
    
    int32_t FieldBuilder::GetFieldOffset_309c846c3e72bf1() {
        return 0;
    }
    
    void FieldBuilder::SetRVAData(cli::array<unsigned char>* data) {
        this->rva_data = cli::cast<cli::array<unsigned char>*>(cli::import(data)->Clone());
    }
    
    void FieldBuilder::SetConstant(System::Object* defaultValue) {
        RejectIfCreated();
        this->def_value = defaultValue;
    }
    
    void FieldBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        RejectIfCreated();
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.FieldOffsetAttribute"))) 
        {
            cli::array<unsigned char> *data = customBuilder->get_Data();
            this->offset = (int32_t)(data->at(2));
            (this->offset = this->offset | ((int32_t)(data->at(3)) << 8));
            (this->offset = this->offset | ((int32_t)(data->at(4)) << 16));
            (this->offset = this->offset | ((int32_t)(data->at(5)) << 24));
            return;
        }
         else 
        {
            if(System::String::op_Equality(attrname, _T("System.NonSerializedAttribute"))) 
            {
                (this->attrs = (System::Reflection::FieldAttributes)(((int32_t)(this->attrs) | 128)));
                return;
            }
             else 
            {
                if(System::String::op_Equality(attrname, _T("System.Runtime.CompilerServices.SpecialNameAttribute"))) 
                {
                    (this->attrs = (System::Reflection::FieldAttributes)(((int32_t)(this->attrs) | 512)));
                    return;
                }
                 else 
                {
                    if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.MarshalAsAttribute"))) 
                    {
                        (this->attrs = (System::Reflection::FieldAttributes)(((int32_t)(this->attrs) | 4096)));
                        this->marshal_info = CustomAttributeBuilder::get_umarshal(customBuilder, true);
                        return;
                    }
                }
            }
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void FieldBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        RejectIfCreated();
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void FieldBuilder::SetMarshal(UnmanagedMarshal* unmanagedMarshal) {
        RejectIfCreated();
        this->marshal_info = unmanagedMarshal;
        (this->attrs = (System::Reflection::FieldAttributes)(((int32_t)(this->attrs) | 4096)));
    }
    
    void FieldBuilder::SetOffset(int32_t iOffset) {
        RejectIfCreated();
        this->offset = iOffset;
    }
    
    void FieldBuilder::SetValue_b73df766c23f1507(System::Object* obj, System::Object* val, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
        throw CreateNotSupportedException();
    }
    
    System::Exception* FieldBuilder::CreateNotSupportedException() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    void FieldBuilder::RejectIfCreated() {
        if(this->typeb->get_is_created()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Unable to change after type has been created."));
        }
    }
    
    void FieldBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FieldBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::FieldAttributes FieldBuilder::get_Attributes_ecc2fe2071b9c047() {
        return this->attrs;
    }
    
    System::Type* FieldBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->typeb;
    }
    
    System::RuntimeFieldHandle FieldBuilder::get_FieldHandle_43fbd13b33ef15a8() {
        throw CreateNotSupportedException();
    }
    
    System::Type* FieldBuilder::get_FieldType_1dab4079098d7fff() {
        return this->type;
    }
    
    System::String* FieldBuilder::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
    System::Type* FieldBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->typeb;
    }
    
    UnmanagedMarshal* FieldBuilder::get_UMarshal_dd8c1dc6c2728d2() {
        return this->marshal_info;
    }
    
    System::Reflection::Module* FieldBuilder::get_Module_ea7d65dc88202263() {
        return System::Reflection::FieldInfo::get_Module_ea7d65dc88202263();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void FieldOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::FieldInfo* fb) {
        this->instantiation = instantiation;
        this->fb = fb;
    }
    
    bool FieldOnTypeBuilderInst::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* FieldOnTypeBuilderInst::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* FieldOnTypeBuilderInst::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::String* FieldOnTypeBuilderInst::ToString_1636a0751cb9ac11() {
        return cli::concat(this->fb->get_FieldType_1dab4079098d7fff()->ToString_1636a0751cb9ac11(), _T(" "));
    }
    
    System::Object* FieldOnTypeBuilderInst::GetValue_57ad13b528e8b8a5(System::Object* obj) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void FieldOnTypeBuilderInst::SetValue_b73df766c23f1507(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* FieldOnTypeBuilderInst::get_DeclaringType_6121cd6a84393166() {
        return this->instantiation;
    }
    
    System::String* FieldOnTypeBuilderInst::get_Name_50fad5fa936c3ae2() {
        return this->fb->get_Name_50fad5fa936c3ae2();
    }
    
    System::Type* FieldOnTypeBuilderInst::get_ReflectedType_bf4971c0f442b9dc() {
        return this->instantiation;
    }
    
    System::Reflection::FieldAttributes FieldOnTypeBuilderInst::get_Attributes_ecc2fe2071b9c047() {
        return this->fb->get_Attributes_ecc2fe2071b9c047();
    }
    
    System::RuntimeFieldHandle FieldOnTypeBuilderInst::get_FieldHandle_43fbd13b33ef15a8() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    int32_t FieldOnTypeBuilderInst::get_MetadataToken_85fbeea46e971f25() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Type* FieldOnTypeBuilderInst::get_FieldType_1dab4079098d7fff() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void GenericTypeParameterBuilder::constructor(TypeBuilder* tbuilder, MethodBuilder* mbuilder, System::String* name, int32_t index) {
        this->tbuilder = tbuilder;
        this->mbuilder = mbuilder;
        this->name = name;
        this->index = index;
        initialize();
    }
    
    void GenericTypeParameterBuilder::SetBaseTypeConstraint(System::Type* baseTypeConstraint) {
        this->base_type = ([&]() {
            System::Type* tmp_283 = baseTypeConstraint;
            if(tmp_283 == nullptr) {
                return cli::typeof<System::Type>::info;
            } else
                return tmp_283;
        })();
    }
    
    void GenericTypeParameterBuilder::SetInterfaceConstraints(cli::array<System::Type*>* interfaceConstraints) {
        this->iface_constraints = interfaceConstraints;
    }
    
    void GenericTypeParameterBuilder::SetGenericParameterAttributes(System::Reflection::GenericParameterAttributes genericParameterAttributes) {
        this->attrs = genericParameterAttributes;
    }
    
    System::Type* GenericTypeParameterBuilder::InternalResolve_ba2e81f73f0d7994() {
        return this->tbuilder->InternalResolve_ba2e81f73f0d7994()->GetGenericArguments_a7fb476275cfe9a3()->at(this->index);
    }
    
    void GenericTypeParameterBuilder::initialize() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool GenericTypeParameterBuilder::IsSubclassOf_5d7dbe0215a30fda(System::Type* c) {
        throw not_supported();
    }
    
    System::Reflection::TypeAttributes GenericTypeParameterBuilder::GetAttributeFlagsImpl_ea77781598cb234a() {
        return System::Reflection::TypeAttributes::Public;
    }
    
    System::Reflection::ConstructorInfo* GenericTypeParameterBuilder::GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::ConstructorInfo*>* GenericTypeParameterBuilder::GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    System::Reflection::EventInfo* GenericTypeParameterBuilder::GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::EventInfo*>* GenericTypeParameterBuilder::GetEvents_e6858c959b77de38() {
        throw not_supported();
    }
    
    cli::array<System::Reflection::EventInfo*>* GenericTypeParameterBuilder::GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    System::Reflection::FieldInfo* GenericTypeParameterBuilder::GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::FieldInfo*>* GenericTypeParameterBuilder::GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    System::Type* GenericTypeParameterBuilder::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        throw not_supported();
    }
    
    cli::array<System::Type*>* GenericTypeParameterBuilder::GetInterfaces_52a89380e2c4a725() {
        throw not_supported();
    }
    
    cli::array<System::Reflection::MemberInfo*>* GenericTypeParameterBuilder::GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::MemberInfo*>* GenericTypeParameterBuilder::GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::MethodInfo*>* GenericTypeParameterBuilder::GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    System::Reflection::MethodInfo* GenericTypeParameterBuilder::GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw not_supported();
    }
    
    System::Type* GenericTypeParameterBuilder::GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Type*>* GenericTypeParameterBuilder::GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    cli::array<System::Reflection::PropertyInfo*>* GenericTypeParameterBuilder::GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) {
        throw not_supported();
    }
    
    System::Reflection::PropertyInfo* GenericTypeParameterBuilder::GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw not_supported();
    }
    
    bool GenericTypeParameterBuilder::HasElementTypeImpl_36e3ca23a6e8185() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsAssignableFrom_e3aa32d778e63a90(System::Type* c) {
        throw not_supported();
    }
    
    bool GenericTypeParameterBuilder::IsInstanceOfType_bd709d8c55b4333d(System::Object* o) {
        throw not_supported();
    }
    
    bool GenericTypeParameterBuilder::IsArrayImpl_cf15f782d0773ffd() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsByRefImpl_a1c403acfb80fd15() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsCOMObjectImpl_27dfb5d026264856() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsPointerImpl_86e7f94717f8b1ea() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsPrimitiveImpl_b5951f74b8c48703() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::IsValueTypeImpl_fe1651255927f3c6() {
        return System::Type::op_Inequality2(this->base_type, nullptr) ? this->base_type->get_IsValueType() : false;
    }
    
    System::Object* GenericTypeParameterBuilder::InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        throw not_supported();
    }
    
    System::Type* GenericTypeParameterBuilder::GetElementType_ab5070dbbfe66f5f() {
        throw not_supported();
    }
    
    bool GenericTypeParameterBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    cli::array<System::Object*>* GenericTypeParameterBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw not_supported();
    }
    
    cli::array<System::Object*>* GenericTypeParameterBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    System::Reflection::InterfaceMapping GenericTypeParameterBuilder::GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) {
        throw not_supported();
    }
    
    cli::array<System::Type*>* GenericTypeParameterBuilder::GetGenericArguments_a7fb476275cfe9a3() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Type* GenericTypeParameterBuilder::GetGenericTypeDefinition_15f8fc7813e8e8bf() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    cli::array<System::Type*>* GenericTypeParameterBuilder::GetGenericParameterConstraints_d29c24f34391020e() {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    void GenericTypeParameterBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void GenericTypeParameterBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    System::Exception* GenericTypeParameterBuilder::not_supported() {
        return cli::gcnew<System::NotSupportedException>();
    }
    
    System::String* GenericTypeParameterBuilder::ToString_1636a0751cb9ac11() {
        return this->name;
    }
    
    bool GenericTypeParameterBuilder::Equals_ed975d2f4a7d193e(System::Object* o) {
        return System::Type::Equals_ed975d2f4a7d193e(o);
    }
    
    int32_t GenericTypeParameterBuilder::GetHashCode_6648aef0f235ee6c() {
        return System::Type::GetHashCode_6648aef0f235ee6c();
    }
    
    System::Type* GenericTypeParameterBuilder::MakeArrayType_9ec2b26036f00b30() {
        return cli::gcnew<ArrayType>(this, 0);
    }
    
    System::Type* GenericTypeParameterBuilder::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        if((rank < 1)) 
        {
            throw cli::gcnew<System::IndexOutOfRangeException>();
        }
        return cli::gcnew<ArrayType>(this, rank);
    }
    
    System::Type* GenericTypeParameterBuilder::MakeByRefType_fc54947a1bb074be() {
        return cli::gcnew<ByRefType>(this);
    }
    
    System::Type* GenericTypeParameterBuilder::MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) {
        return System::Type::MakeGenericType_da11ef776ac96678(typeArguments);
    }
    
    System::Type* GenericTypeParameterBuilder::MakePointerType_f23f3b9330ac63da() {
        return cli::gcnew<PointerType>(this);
    }
    
    System::Type* GenericTypeParameterBuilder::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        return this;
    }
    
    System::Reflection::Assembly* GenericTypeParameterBuilder::get_Assembly_3aae0acbf2a6d696() {
        return this->tbuilder->get_Assembly_3aae0acbf2a6d696();
    }
    
    System::String* GenericTypeParameterBuilder::get_AssemblyQualifiedName_cea373c2171bd483() {
        return nullptr;
    }
    
    System::Type* GenericTypeParameterBuilder::get_BaseType_6a0646ae880055f6() {
        return this->base_type;
    }
    
    System::String* GenericTypeParameterBuilder::get_FullName_7e8fa72ba225e1a4() {
        return nullptr;
    }
    
    System::Guid GenericTypeParameterBuilder::get_GUID_bdb6b630c3237a21() {
        throw not_supported();
    }
    
    System::String* GenericTypeParameterBuilder::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
    System::String* GenericTypeParameterBuilder::get_Namespace_cb4ed37007083e7f() {
        return nullptr;
    }
    
    System::Reflection::Module* GenericTypeParameterBuilder::get_Module_ea7d65dc88202263() {
        return this->tbuilder->get_Module_ea7d65dc88202263();
    }
    
    System::Type* GenericTypeParameterBuilder::get_DeclaringType_6121cd6a84393166() {
        return System::Reflection::MethodInfo::op_Inequality(this->mbuilder, nullptr) ? this->mbuilder->get_DeclaringType_6121cd6a84393166() : this->tbuilder;
    }
    
    System::Type* GenericTypeParameterBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->get_DeclaringType_6121cd6a84393166();
    }
    
    System::RuntimeTypeHandle GenericTypeParameterBuilder::get_TypeHandle_a14995fa9102936b() {
        throw not_supported();
    }
    
    bool GenericTypeParameterBuilder::get_ContainsGenericParameters_19598881dd690ad3() {
        return true;
    }
    
    bool GenericTypeParameterBuilder::get_IsGenericParameter_2a17c4bf67798b07() {
        return true;
    }
    
    bool GenericTypeParameterBuilder::get_IsGenericType_4db8ddd5b97f3c14() {
        return false;
    }
    
    bool GenericTypeParameterBuilder::get_IsGenericTypeDefinition_8008dd501dc43926() {
        return false;
    }
    
    System::Reflection::GenericParameterAttributes GenericTypeParameterBuilder::get_GenericParameterAttributes_b31b8b8f1d79d815() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    int32_t GenericTypeParameterBuilder::get_GenericParameterPosition_ae331bf96a7667b1() {
        return this->index;
    }
    
    System::Reflection::MethodBase* GenericTypeParameterBuilder::get_DeclaringMethod_6dc070d2040335e5() {
        return this->mbuilder;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    System::Type*  ILGenerator::void_type;
    
    ILGenerator::ILGenerator()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ILGenerator::constructor(System::Reflection::Module* m, TokenGenerator* token_gen, int32_t size) {
        if((size < 0)) 
        {
            size = 128;
        }
        this->code = (new cli::array<unsigned char>(size));
        this->token_fixups = (new cli::array<ILTokenInfo>(8));
        this->module = m;
        this->token_gen = token_gen;
    }
    
    void ILGenerator::static_constructor() {
    }
    
    void ILGenerator::add_token_fixup(System::Reflection::MemberInfo* mi) {
        if((this->num_token_fixups ==  this->token_fixups->get_Length())) 
        {
            cli::array<ILTokenInfo> *ntf = (new cli::array<ILTokenInfo>((this->num_token_fixups * 2)));
            cli::import(this->token_fixups)->CopyTo(ntf, 0);
            this->token_fixups = ntf;
        }
        this->token_fixups->at(this->num_token_fixups)->member = mi;
        this->token_fixups->at(this->num_token_fixups++)->code_pos = this->code_len;
    }
    
    void ILGenerator::make_room(int32_t nbytes) {
        if(((this->code_len + nbytes) < this->code->get_Length())) 
        {
            return;
        }
        cli::array<unsigned char> *new_code = (new cli::array<unsigned char>((((this->code_len + nbytes) * 2) + 128)));
        System::Array::Copy2(this->code, 0, new_code, 0, this->code->get_Length());
        this->code = new_code;
    }
    
    void ILGenerator::emit_int(int32_t val) {
        this->code->at(this->code_len++) = (unsigned char)(val & 255);
        this->code->at(this->code_len++) = (unsigned char)((val >> 8) & 255);
        this->code->at(this->code_len++) = (unsigned char)((val >> 16) & 255);
        this->code->at(this->code_len++) = (unsigned char)((val >> 24) & 255);
    }
    
    void ILGenerator::ll_emit(OpCode opcode) {
        if((opcode->get_Size() ==  2)) 
        {
            this->code->at(this->code_len++) = opcode->op1;
        }
        this->code->at(this->code_len++) = opcode->op2;
        switch(opcode->get_StackBehaviourPush()) {
            case StackBehaviour::Push1: case StackBehaviour::Pushi: case StackBehaviour::Pushi8: case StackBehaviour::Pushr4: case StackBehaviour::Pushr8: case StackBehaviour::Pushref: case StackBehaviour::Varpush: case_1247: {
                this->cur_stack++;
                break;
            }
            case StackBehaviour::Push1_push1: case_1248: {
                (this->cur_stack = this->cur_stack + 2);
                break;
            }
        }
        if((this->max_stack < this->cur_stack)) 
        {
            this->max_stack = this->cur_stack;
        }
        switch(opcode->get_StackBehaviourPop()) {
            case StackBehaviour::Varpop: case_1249: {
                break;
            }
            case StackBehaviour::Pop1: case StackBehaviour::Popi: case StackBehaviour::Popref: case_1250: {
                this->cur_stack--;
                break;
            }
            case StackBehaviour::Pop1_pop1: case StackBehaviour::Popi_pop1: case StackBehaviour::Popi_popi: case StackBehaviour::Popi_popi8: case StackBehaviour::Popi_popr4: case StackBehaviour::Popi_popr8: case StackBehaviour::Popref_pop1: case StackBehaviour::Popref_popi: case_1251: {
                (this->cur_stack = this->cur_stack - 2);
                break;
            }
            case StackBehaviour::Popi_popi_popi: case StackBehaviour::Popref_popi_popi: case StackBehaviour::Popref_popi_popi8: case StackBehaviour::Popref_popi_popr4: case StackBehaviour::Popref_popi_popr8: case StackBehaviour::Popref_popi_popref: case_1252: {
                (this->cur_stack = this->cur_stack - 3);
                break;
            }
        }
    }
    
    int32_t ILGenerator::target_len(OpCode opcode) {
        if(((int32_t)(opcode->get_OperandType()) ==  0)) 
        {
            return 4;
        }
        return 1;
    }
    
    void ILGenerator::InternalEndClause() {
        switch(this->ex_handlers->at(this->cur_block)->LastClauseType()) {
            case 0: case 1: case -1: case_1253: {
                Emit_fae713cfda427cd3(OpCodes::Leave, this->ex_handlers->at(this->cur_block)->end);
                break;
            }
            case 4: case 2: case_1254: {
                Emit_6b1c52a4d677ebc8(OpCodes::Endfinally);
                break;
            }
        }
    }
    
    void ILGenerator::BeginCatchBlock_c99c7900faa3b08e(System::Type* exceptionType) {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->open_blocks->get_Count_a768d394e63a6b27() <= 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Not in an exception block"));
        }
        if((System::Type::op_Inequality2(exceptionType, nullptr) && exceptionType->get_IsUserType())) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("User defined subclasses of System.Type are not yet supported."));
        }
        if((this->ex_handlers->at(this->cur_block)->LastClauseType() ==  -1)) 
        {
            if(System::Type::op_Inequality2(exceptionType, nullptr)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Do not supply an exception type for filter clause"));
            }
            Emit_6b1c52a4d677ebc8(OpCodes::Endfilter);
            this->ex_handlers->at(this->cur_block)->PatchFilterClause(this->code_len);
        }
         else 
        {
            InternalEndClause();
            this->ex_handlers->at(this->cur_block)->AddCatch(exceptionType, this->code_len);
        }
        this->cur_stack = 1;
        if((this->max_stack < this->cur_stack)) 
        {
            this->max_stack = this->cur_stack;
        }
    }
    
    void ILGenerator::BeginExceptFilterBlock_78cb68f04d478d49() {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->open_blocks->get_Count_a768d394e63a6b27() <= 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Not in an exception block"));
        }
        InternalEndClause();
        this->ex_handlers->at(this->cur_block)->AddFilter(this->code_len);
    }
    
    Label ILGenerator::BeginExceptionBlock_d0660d08575b0ae() {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->ex_handlers != nullptr)) 
        {
            this->cur_block = this->ex_handlers->get_Length();
            cli::array<ILExceptionInfo> *new_ex = (new cli::array<ILExceptionInfo>((this->cur_block + 1)));
            System::Array::Copy(this->ex_handlers, new_ex, this->cur_block);
            this->ex_handlers = new_ex;
        }
         else 
        {
            this->ex_handlers = (new cli::array<ILExceptionInfo>(1));
            this->cur_block = 0;
        }
        this->open_blocks->Push_9a8495c8210a673(cli::box(this->cur_block));
        this->ex_handlers->at(this->cur_block)->start = this->code_len;
        return this->ex_handlers->at(this->cur_block)->end = DefineLabel_bf30b86c6e4f712c();
    }
    
    void ILGenerator::BeginFaultBlock_1408996e97e58d9c() {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->open_blocks->get_Count_a768d394e63a6b27() <= 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Not in an exception block"));
        }
        if((this->ex_handlers->at(this->cur_block)->LastClauseType() ==  -1)) 
        {
            Emit_fae713cfda427cd3(OpCodes::Leave, this->ex_handlers->at(this->cur_block)->end);
            this->ex_handlers->at(this->cur_block)->PatchFilterClause(this->code_len);
        }
        InternalEndClause();
        this->ex_handlers->at(this->cur_block)->AddFault(this->code_len);
    }
    
    void ILGenerator::BeginFinallyBlock_80b3bef7febeda28() {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->open_blocks->get_Count_a768d394e63a6b27() <= 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Not in an exception block"));
        }
        InternalEndClause();
        if((this->ex_handlers->at(this->cur_block)->LastClauseType() ==  -1)) 
        {
            Emit_fae713cfda427cd3(OpCodes::Leave, this->ex_handlers->at(this->cur_block)->end);
            this->ex_handlers->at(this->cur_block)->PatchFilterClause(this->code_len);
        }
        this->ex_handlers->at(this->cur_block)->AddFinally(this->code_len);
    }
    
    void ILGenerator::BeginScope_b349d109cd173c8() {
    }
    
    LocalBuilder* ILGenerator::DeclareLocal_977dbdcc1bcbd0a3(System::Type* localType) {
        return DeclareLocal_8cef1978f0893173(localType, false);
    }
    
    LocalBuilder* ILGenerator::DeclareLocal_8cef1978f0893173(System::Type* localType, bool pinned) {
        if(System::Type::op_Equality2(localType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("localType"));
        }
        if(localType->get_IsUserType()) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("User defined subclasses of System.Type are not yet supported."));
        }
        LocalBuilder *res = cli::gcnew<LocalBuilder>(localType, this);
        res->is_pinned = pinned;
        if((this->locals != nullptr)) 
        {
            cli::array<LocalBuilder*> *new_l = (new cli::array<LocalBuilder*>((this->locals->get_Length() + 1)));
            System::Array::Copy(this->locals, new_l, this->locals->get_Length());
            new_l->at(this->locals->get_Length()) = res;
            this->locals = new_l;
        }
         else 
        {
            this->locals = (new cli::array<LocalBuilder*>(1));
            this->locals->at(0) = res;
        }
        res->position = (uint16_t)(this->locals->get_Length() - 1);
        return res;
    }
    
    Label ILGenerator::DefineLabel_bf30b86c6e4f712c() {
        if((this->labels ==  nullptr)) 
        {
            this->labels = (new cli::array<LabelData>(4));
        }
         else 
        {
            if((this->num_labels >= this->labels->get_Length())) 
            {
                cli::array<LabelData> *t = (new cli::array<LabelData>((this->labels->get_Length() * 2)));
                System::Array::Copy(this->labels, t, this->labels->get_Length());
                this->labels = t;
            }
        }
        this->labels->at(this->num_labels) = cli::ctor<LabelData>(-1, 0);
        return cli::ctor<Label>(this->num_labels++);
    }
    
    void ILGenerator::Emit_6b1c52a4d677ebc8(OpCode opcode) {
        make_room(2);
        ll_emit(opcode);
    }
    
    void ILGenerator::Emit_fa7de15651e33487(OpCode opcode, unsigned char arg) {
        make_room(3);
        ll_emit(opcode);
        this->code->at(this->code_len++) = arg;
    }
    
    void ILGenerator::Emit_9658065e57c01583(OpCode opcode, System::Reflection::ConstructorInfo* con) {
        int32_t token = this->token_gen->GetToken_10bcc90da5b44782(con, true);
        make_room(6);
        ll_emit(opcode);
        if(System::Reflection::Module::op_Equality(con->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this->module)) 
        {
            add_token_fixup(con);
        }
        emit_int(token);
        if(((int32_t)(opcode->get_StackBehaviourPop()) ==  26)) 
        {
            (this->cur_stack = this->cur_stack - con->GetParameterCount_ac86b3a4965d967a());
        }
    }
    
    void ILGenerator::Emit_d2f12feb50e1a114(OpCode opcode, double arg) {
        cli::array<unsigned char> *s = System::BitConverter::GetBytes11(arg);
        make_room(10);
        ll_emit(opcode);
        if(System::BitConverter::IsLittleEndian) 
        {
            System::Array::Copy2(s, 0, this->code, this->code_len, 8);
            (this->code_len = this->code_len + 8);
        }
         else 
        {
            this->code->at(this->code_len++) = s->at(7);
            this->code->at(this->code_len++) = s->at(6);
            this->code->at(this->code_len++) = s->at(5);
            this->code->at(this->code_len++) = s->at(4);
            this->code->at(this->code_len++) = s->at(3);
            this->code->at(this->code_len++) = s->at(2);
            this->code->at(this->code_len++) = s->at(1);
            this->code->at(this->code_len++) = s->at(0);
        }
    }
    
    void ILGenerator::Emit_65b6e011d91f7643(OpCode opcode, System::Reflection::FieldInfo* field) {
        int32_t token = this->token_gen->GetToken_10bcc90da5b44782(field, true);
        make_room(6);
        ll_emit(opcode);
        if(System::Reflection::Module::op_Equality(field->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this->module)) 
        {
            add_token_fixup(field);
        }
        emit_int(token);
    }
    
    void ILGenerator::Emit_cb6fd018a49b2f91(OpCode opcode, int16_t arg) {
        make_room(4);
        ll_emit(opcode);
        this->code->at(this->code_len++) = (unsigned char)((int32_t)(arg) & 255);
        this->code->at(this->code_len++) = (unsigned char)(((int32_t)(arg) >> 8) & 255);
    }
    
    void ILGenerator::Emit_174696548609067b(OpCode opcode, int32_t arg) {
        make_room(6);
        ll_emit(opcode);
        emit_int(arg);
    }
    
    void ILGenerator::Emit_1d01f04e3cc9d3e5(OpCode opcode, int64_t arg) {
        make_room(10);
        ll_emit(opcode);
        this->code->at(this->code_len++) = (unsigned char)(arg & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 8) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 16) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 24) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 32) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 40) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 48) & 255L);
        this->code->at(this->code_len++) = (unsigned char)((arg >> 56) & 255L);
    }
    
    void ILGenerator::Emit_fae713cfda427cd3(OpCode opcode, Label label) {
        int32_t tlen = target_len(opcode);
        make_room(6);
        ll_emit(opcode);
        if((this->cur_stack > this->labels->at(label->label)->maxStack)) 
        {
            this->labels->at(label->label)->maxStack = this->cur_stack;
        }
        if((this->fixups ==  nullptr)) 
        {
            this->fixups = (new cli::array<LabelFixup>(4));
        }
         else 
        {
            if((this->num_fixups >= this->fixups->get_Length())) 
            {
                cli::array<LabelFixup> *newf = (new cli::array<LabelFixup>((this->fixups->get_Length() * 2)));
                System::Array::Copy(this->fixups, newf, this->fixups->get_Length());
                this->fixups = newf;
            }
        }
        this->fixups->at(this->num_fixups)->offset = tlen;
        this->fixups->at(this->num_fixups)->pos = this->code_len;
        this->fixups->at(this->num_fixups)->label_idx = label->label;
        this->num_fixups++;
        (this->code_len = this->code_len + tlen);
    }
    
    void ILGenerator::Emit_5a7469bf6627bae4(OpCode opcode, cli::array<Label>* labels) {
        if((labels ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("labels"));
        }
        int32_t count = labels->get_Length();
        make_room((6 + (count * 4)));
        ll_emit(opcode);
        for(int32_t i = 0; (i < count); ++i) {
            if((this->cur_stack > this->labels->at(labels->at(i)->label)->maxStack)) 
            {
                this->labels->at(labels->at(i)->label)->maxStack = this->cur_stack;
            }
        }
        emit_int(count);
        if((this->fixups ==  nullptr)) 
        {
            this->fixups = (new cli::array<LabelFixup>((4 + count)));
        }
         else 
        {
            if(((this->num_fixups + count) >= this->fixups->get_Length())) 
            {
                cli::array<LabelFixup> *newf = (new cli::array<LabelFixup>((count + (this->fixups->get_Length() * 2))));
                System::Array::Copy(this->fixups, newf, this->fixups->get_Length());
                this->fixups = newf;
            }
        }
        for(int32_t i = 0, remaining = (count * 4); (i < count); ++i, (remaining = remaining - 4)){
            this->fixups->at(this->num_fixups)->offset = remaining;
            this->fixups->at(this->num_fixups)->pos = this->code_len;
            this->fixups->at(this->num_fixups)->label_idx = labels->at(i)->label;
            this->num_fixups++;
            (this->code_len = this->code_len + 4);
        }
    }
    
    void ILGenerator::Emit_9541ccf03936bee1(OpCode opcode, LocalBuilder* local) {
        if((local ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("local"));
        }
        if((local->ilgen != this)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Trying to emit a local from a different ILGenerator."));
        }
        uint32_t pos = (uint32_t)(local->position);
        bool load_addr = false;
        bool is_store = false;
        bool is_load = false;
        make_room(6);
        if(((int32_t)(opcode->get_StackBehaviourPop()) ==  1)) 
        {
            this->cur_stack--;
            is_store = true;
        }
         else 
        {
            if((((int32_t)(opcode->get_StackBehaviourPush()) ==  19) || ((int32_t)(opcode->get_StackBehaviourPush()) ==  21))) 
            {
                this->cur_stack++;
                is_load = true;
                if((this->cur_stack > this->max_stack)) 
                {
                    this->max_stack = this->cur_stack;
                }
                load_addr = ((int32_t)(opcode->get_StackBehaviourPush()) ==  21);
            }
        }
        if(load_addr) 
        {
            if((pos < 256U)) 
            {
                this->code->at(this->code_len++) = 18;
                this->code->at(this->code_len++) = (unsigned char)pos;
            }
             else 
            {
                this->code->at(this->code_len++) = 254;
                this->code->at(this->code_len++) = 13;
                this->code->at(this->code_len++) = (unsigned char)(pos & 255U);
                this->code->at(this->code_len++) = (unsigned char)((pos >> 8) & 255U);
            }
        }
         else 
        {
            if(is_store) 
            {
                if((pos < 4U)) 
                {
                    this->code->at(this->code_len++) = (unsigned char)(10U + pos);
                }
                 else 
                {
                    if((pos < 256U)) 
                    {
                        this->code->at(this->code_len++) = 19;
                        this->code->at(this->code_len++) = (unsigned char)pos;
                    }
                     else 
                    {
                        this->code->at(this->code_len++) = 254;
                        this->code->at(this->code_len++) = 14;
                        this->code->at(this->code_len++) = (unsigned char)(pos & 255U);
                        this->code->at(this->code_len++) = (unsigned char)((pos >> 8) & 255U);
                    }
                }
            }
             else 
            {
                if(is_load) 
                {
                    if((pos < 4U)) 
                    {
                        this->code->at(this->code_len++) = (unsigned char)(6U + pos);
                    }
                     else 
                    {
                        if((pos < 256U)) 
                        {
                            this->code->at(this->code_len++) = 17;
                            this->code->at(this->code_len++) = (unsigned char)pos;
                        }
                         else 
                        {
                            this->code->at(this->code_len++) = 254;
                            this->code->at(this->code_len++) = 12;
                            this->code->at(this->code_len++) = (unsigned char)(pos & 255U);
                            this->code->at(this->code_len++) = (unsigned char)((pos >> 8) & 255U);
                        }
                    }
                }
                 else 
                {
                    ll_emit(opcode);
                }
            }
        }
    }
    
    void ILGenerator::Emit_6293070285694c81(OpCode opcode, System::Reflection::MethodInfo* meth) {
        if(System::Reflection::MethodInfo::op_Equality(meth, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("meth"));
        }
        if((cli::is<DynamicMethod>(meth) && ((OpCode::op_Equality(opcode, OpCodes::Ldftn) || OpCode::op_Equality(opcode, OpCodes::Ldvirtftn)) || OpCode::op_Equality(opcode, OpCodes::Ldtoken)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Ldtoken, Ldftn and Ldvirtftn OpCodes cannot target DynamicMethods."));
        }
        int32_t token = this->token_gen->GetToken_10bcc90da5b44782(meth, true);
        make_room(6);
        ll_emit(opcode);
        System::Type *declaringType = meth->get_DeclaringType_6121cd6a84393166();
        if(System::Type::op_Inequality2(declaringType, nullptr)) 
        {
            if(System::Reflection::Module::op_Equality(declaringType->get_Module_ea7d65dc88202263(), this->module)) 
            {
                add_token_fixup(meth);
            }
        }
        emit_int(token);
        if(System::Type::op_Inequality2(meth->get_ReturnType_832339e848f448fe(), void_type)) 
        {
            this->cur_stack++;
        }
        if(((int32_t)(opcode->get_StackBehaviourPop()) ==  26)) 
        {
            (this->cur_stack = this->cur_stack - meth->GetParameterCount_ac86b3a4965d967a());
        }
    }
    
    void ILGenerator::Emit13(OpCode opcode, System::Reflection::MethodInfo* method, int32_t token) {
        make_room(6);
        ll_emit(opcode);
        System::Type *declaringType = method->get_DeclaringType_6121cd6a84393166();
        if(System::Type::op_Inequality2(declaringType, nullptr)) 
        {
            if(System::Reflection::Module::op_Equality(declaringType->get_Module_ea7d65dc88202263(), this->module)) 
            {
                add_token_fixup(method);
            }
        }
        emit_int(token);
        if(System::Type::op_Inequality2(method->get_ReturnType_832339e848f448fe(), void_type)) 
        {
            this->cur_stack++;
        }
        if(((int32_t)(opcode->get_StackBehaviourPop()) ==  26)) 
        {
            (this->cur_stack = this->cur_stack - method->GetParameterCount_ac86b3a4965d967a());
        }
    }
    
    void ILGenerator::Emit14(OpCode opcode, signed char arg) {
        make_room(3);
        ll_emit(opcode);
        this->code->at(this->code_len++) = (unsigned char)arg;
    }
    
    void ILGenerator::Emit_501d0c0f17fa00d3(OpCode opcode, SignatureHelper* signature) {
        int32_t token = this->token_gen->GetToken_dc01c561a484101(signature);
        make_room(6);
        ll_emit(opcode);
        emit_int(token);
    }
    
    void ILGenerator::Emit_9d8c8c5d517bfaa9(OpCode opcode, float arg) {
        cli::array<unsigned char> *s = System::BitConverter::GetBytes10(arg);
        make_room(6);
        ll_emit(opcode);
        if(System::BitConverter::IsLittleEndian) 
        {
            System::Array::Copy2(s, 0, this->code, this->code_len, 4);
            (this->code_len = this->code_len + 4);
        }
         else 
        {
            this->code->at(this->code_len++) = s->at(3);
            this->code->at(this->code_len++) = s->at(2);
            this->code->at(this->code_len++) = s->at(1);
            this->code->at(this->code_len++) = s->at(0);
        }
    }
    
    void ILGenerator::Emit_47ae0eb6bb66716(OpCode opcode, System::String* str) {
        int32_t token = this->token_gen->GetToken_25c90de716173dc6(str);
        make_room(6);
        ll_emit(opcode);
        emit_int(token);
    }
    
    void ILGenerator::Emit_911e8244dc15d49c(OpCode opcode, System::Type* cls) {
        if((System::Type::op_Inequality2(cls, nullptr) && cls->get_IsByRef())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Cannot get TypeToken for a ByRef type."));
        }
        make_room(6);
        ll_emit(opcode);
        emit_int(this->token_gen->GetToken_10bcc90da5b44782(cls, OpCode::op_Inequality(opcode, OpCodes::Ldtoken)));
    }
    
    void ILGenerator::EmitCall_4e16584a7443cbeb(OpCode opcode, System::Reflection::MethodInfo* methodInfo, cli::array<System::Type*>* optionalParameterTypes) {
        if(System::Reflection::MethodInfo::op_Equality(methodInfo, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("methodInfo"));
        }
        int16_t value = opcode->get_Value();
        if(!((((int32_t)(value) ==  (int32_t)(OpCodes::Call->get_Value())) || ((int32_t)(value) ==  (int32_t)(OpCodes::Callvirt->get_Value()))))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Only Call and CallVirt are allowed"));
        }
        if(((int32_t)(((int32_t)(methodInfo->get_CallingConvention_309cf574b58a053a()) & 2)) ==  0)) 
        {
            optionalParameterTypes = nullptr;
        }
        if((optionalParameterTypes != nullptr)) 
        {
            if(((int32_t)(((int32_t)(methodInfo->get_CallingConvention_309cf574b58a053a()) & 2)) ==  0)) 
            {
                throw cli::gcnew<System::InvalidOperationException>(_T("Method is not VarArgs method and optional types were passed"));
            }
            int32_t token = this->token_gen->GetToken_9da014b90fcfd506(methodInfo, optionalParameterTypes);
            Emit13(opcode, methodInfo, token);
            return;
        }
        Emit_6293070285694c81(opcode, methodInfo);
    }
    
    void ILGenerator::EmitCalli_d0342cddffc4a170(OpCode opcode, System::Runtime::InteropServices::CallingConvention unmanagedCallConv, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        SignatureHelper *helper = SignatureHelper::GetMethodSigHelper6(cli::as<ModuleBuilder*>(this->module), (System::Reflection::CallingConventions)0L, unmanagedCallConv, returnType, parameterTypes);
        Emit_501d0c0f17fa00d3(opcode, helper);
    }
    
    void ILGenerator::EmitCalli_dda2d412e31971af(OpCode opcode, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, cli::array<System::Type*>* optionalParameterTypes) {
        if((optionalParameterTypes != nullptr)) 
        {
            throw cli::gcnew<System::NotImplementedException>();
        }
        SignatureHelper *helper = SignatureHelper::GetMethodSigHelper6(cli::as<ModuleBuilder*>(this->module), callingConvention, (System::Runtime::InteropServices::CallingConvention)0L, returnType, parameterTypes);
        Emit_501d0c0f17fa00d3(opcode, helper);
    }
    
    void ILGenerator::EmitWriteLine_ca501ebc600dafbf(System::Reflection::FieldInfo* fld) {
        if(System::Reflection::FieldInfo::op_Equality2(fld, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fld"));
        }
        if(fld->get_IsStatic()) 
        {
            Emit_65b6e011d91f7643(OpCodes::Ldsfld, fld);
        }
         else 
        {
            Emit_6b1c52a4d677ebc8(OpCodes::Ldarg_0);
            Emit_65b6e011d91f7643(OpCodes::Ldfld, fld);
        }
        Emit_6293070285694c81(OpCodes::Call, cli::typeof<System::Type>::info->GetMethod3(_T("WriteLine"), (new cli::array<System::Type*>({fld->get_FieldType_1dab4079098d7fff()}))));
    }
    
    void ILGenerator::EmitWriteLine_6006512ac1bc4e0b(LocalBuilder* localBuilder) {
        if((localBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("localBuilder"));
        }
        if(cli::is<TypeBuilder>(localBuilder->get_LocalType_6f444539e4836b2c())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Output streams do not support TypeBuilders."));
        }
        Emit_9541ccf03936bee1(OpCodes::Ldloc, localBuilder);
        Emit_6293070285694c81(OpCodes::Call, cli::typeof<System::Type>::info->GetMethod3(_T("WriteLine"), (new cli::array<System::Type*>({localBuilder->get_LocalType_6f444539e4836b2c()}))));
    }
    
    void ILGenerator::EmitWriteLine_4c533e5500da46e1(System::String* value) {
        Emit_47ae0eb6bb66716(OpCodes::Ldstr, value);
        Emit_6293070285694c81(OpCodes::Call, cli::typeof<System::Type>::info->GetMethod3(_T("WriteLine"), (new cli::array<System::Type*>({cli::typeof<System::Type>::info}))));
    }
    
    void ILGenerator::EndExceptionBlock_1d7974e4f3c4a9a7() {
        if((this->open_blocks ==  nullptr)) 
        {
            this->open_blocks = cli::gcnew<System::Collections::Stack>(2);
        }
        if((this->open_blocks->get_Count_a768d394e63a6b27() <= 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Not in an exception block"));
        }
        if((this->ex_handlers->at(this->cur_block)->LastClauseType() ==  -1)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Incorrect code generation for exception block."));
        }
        InternalEndClause();
        MarkLabel_f204005ffcc00ecd(this->ex_handlers->at(this->cur_block)->end);
        this->ex_handlers->at(this->cur_block)->End(this->code_len);
        this->ex_handlers->at(this->cur_block)->Debug(this->cur_block);
        this->open_blocks->Pop_9492442210514403();
        if((this->open_blocks->get_Count_a768d394e63a6b27() > 0)) 
        {
            this->cur_block = cli::unbox<int32_t>(this->open_blocks->Peek_6b91e1254bdabd34());
        }
    }
    
    void ILGenerator::EndScope_4fc89405c36472c2() {
    }
    
    void ILGenerator::MarkLabel_f204005ffcc00ecd(Label loc) {
        if(((loc->label < 0) || (loc->label >= this->num_labels))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The label is not valid"));
        }
        if((this->labels->at(loc->label)->addr >= 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The label was already defined"));
        }
        this->labels->at(loc->label)->addr = this->code_len;
        if((this->labels->at(loc->label)->maxStack > this->cur_stack)) 
        {
            this->cur_stack = this->labels->at(loc->label)->maxStack;
        }
    }
    
    void ILGenerator::MarkSequencePoint_8ce4c0fd4823f2f(System::Diagnostics::SymbolStore::ISymbolDocumentWriter* document, int32_t startLine, int32_t startColumn, int32_t endLine, int32_t endColumn) {
        if(((this->currentSequence ==  nullptr) || (this->currentSequence->get_Document() != document))) 
        {
            if((this->sequencePointLists ==  nullptr)) 
            {
                this->sequencePointLists = cli::gcnew<System::Collections::ArrayList>();
            }
            this->currentSequence = cli::gcnew<SequencePointList>(document);
            this->sequencePointLists->Add_e6a92085999ce388(this->currentSequence);
        }
        this->currentSequence->AddSequencePoint(this->code_len, startLine, startColumn, endLine, endColumn);
    }
    
    void ILGenerator::GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter) {
        if((this->sequencePointLists != nullptr)) 
        {
            SequencePointList *first = cli::cast<SequencePointList*>(this->sequencePointLists->get_Item_fd0155f142ae570(0));
            SequencePointList *last = cli::cast<SequencePointList*>(this->sequencePointLists->get_Item_fd0155f142ae570((this->sequencePointLists->get_Count_2354963792616712() - 1)));
            symbolWriter->SetMethodSourceRange_f249c4fa645bb56a(first->get_Document(), first->get_StartLine(), first->get_StartColumn(), last->get_Document(), last->get_EndLine(), last->get_EndColumn());
            for(auto tmp_284 : this->sequencePointLists) {
                auto list = cli::cast<SequencePointList*>(tmp_284);
                symbolWriter->DefineSequencePoints_6064e3140dd8e77(list->get_Document(), list->GetOffsets(), list->GetLines(), list->GetColumns(), list->GetEndLines(), list->GetEndColumns());
            }
            if((this->locals != nullptr)) 
            {
                for(auto tmp_285 : this->locals) {
                    auto local = cli::cast<LocalBuilder*>(tmp_285);
                    {
                        if(((local->get_Name() != nullptr) && (local->get_Name()->get_Length() > 0))) 
                        {
                            SignatureHelper *sighelper = SignatureHelper::GetLocalVarSigHelper(cli::as<ModuleBuilder*>(this->module));
                            sighelper->AddArgument3(local->get_LocalType_6f444539e4836b2c());
                            cli::array<unsigned char> *signature = sighelper->GetSignature();
                            symbolWriter->DefineLocalVariable_2fcd733890c75378(local->get_Name(), System::Reflection::FieldAttributes::Public, signature, System::Diagnostics::SymbolStore::SymAddressKind::ILOffset, (int32_t)(local->position), 0, 0, local->get_StartOffset(), local->get_EndOffset());
                        }
                    }
                }
            }
            this->sequencePointLists = nullptr;
        }
    }
    
    void ILGenerator::ThrowException_e4e2b031cb70afbc(System::Type* excType) {
        if(System::Type::op_Equality2(excType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("excType"));
        }
        if(!((System::Type::op_Equality2(excType, cli::typeof<System::Type>::info) || excType->IsSubclassOf_5d7dbe0215a30fda(cli::typeof<System::Type>::info)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type should be an exception type"), _T("excType"));
        }
        System::Reflection::ConstructorInfo *ctor = excType->GetConstructor2(System::Type::EmptyTypes);
        if(System::Reflection::ConstructorInfo::op_Equality(ctor, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type should have a default constructor"), _T("excType"));
        }
        Emit_9658065e57c01583(OpCodes::Newobj, ctor);
        Emit_6b1c52a4d677ebc8(OpCodes::Throw);
    }
    
    void ILGenerator::UsingNamespace_2c806a8b1a6457e9(System::String* usingNamespace) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ILGenerator::label_fixup() {
        for(int32_t i = 0; (i < this->num_fixups); ++i){
            if((this->labels->at(this->fixups->at(i)->label_idx)->addr < 0)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Label not marked"));
            }
            int32_t diff = (this->labels->at(this->fixups->at(i)->label_idx)->addr - (this->fixups->at(i)->pos + this->fixups->at(i)->offset));
            if((this->fixups->at(i)->offset ==  1)) 
            {
                this->code->at(this->fixups->at(i)->pos) = (unsigned char)(signed char)diff;
            }
             else 
            {
                int32_t old_cl = this->code_len;
                this->code_len = this->fixups->at(i)->pos;
                emit_int(diff);
                this->code_len = old_cl;
            }
        }
    }
    
    void ILGenerator::SetCode(cli::array<unsigned char>* code, int32_t max_stack) {
        this->code = cli::cast<cli::array<unsigned char>*>(cli::import(code)->Clone());
        this->code_len = code->get_Length();
        this->max_stack = max_stack;
        this->cur_stack = 0;
    }
    
    void ILGenerator::SetCode2(unsigned char* code, int32_t code_size, int32_t max_stack) {
        this->code = (new cli::array<unsigned char>(code_size));
        for(int32_t i = 0; (i < code_size); ++i) {
            this->code->at(i) = (*(code + i));
        }
        this->code_len = code_size;
        this->max_stack = max_stack;
        this->cur_stack = 0;
    }
    
    int32_t ILGenerator::Mono_GetCurrentOffset(ILGenerator* ig) {
        return ig->code_len;
    }
    
    void ILGenerator::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ILGenerator::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ILGenerator::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ILGenerator::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ILGenerator::get_HasDebugInfo() {
        return (this->sequencePointLists != nullptr);
    }
    
    TokenGenerator* ILGenerator::get_TokenGenerator() {
        return this->token_gen;
    }
    
    int32_t ILGenerator::get_ILOffset_a7e0ed1bc16093d6() {
        return this->code_len;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void SequencePointList::constructor(System::Diagnostics::SymbolStore::ISymbolDocumentWriter* doc) {
        this->doc = doc;
    }
    
    cli::array<int32_t>* SequencePointList::GetOffsets() {
        cli::array<int32_t> *data = (new cli::array<int32_t>(this->count));
        for(int32_t n = 0; (n < this->count); n++) {
            data->at(n) = this->points->at(n)->Offset;
        }
        return data;
    }
    
    cli::array<int32_t>* SequencePointList::GetLines() {
        cli::array<int32_t> *data = (new cli::array<int32_t>(this->count));
        for(int32_t n = 0; (n < this->count); n++) {
            data->at(n) = this->points->at(n)->Line;
        }
        return data;
    }
    
    cli::array<int32_t>* SequencePointList::GetColumns() {
        cli::array<int32_t> *data = (new cli::array<int32_t>(this->count));
        for(int32_t n = 0; (n < this->count); n++) {
            data->at(n) = this->points->at(n)->Col;
        }
        return data;
    }
    
    cli::array<int32_t>* SequencePointList::GetEndLines() {
        cli::array<int32_t> *data = (new cli::array<int32_t>(this->count));
        for(int32_t n = 0; (n < this->count); n++) {
            data->at(n) = this->points->at(n)->EndLine;
        }
        return data;
    }
    
    cli::array<int32_t>* SequencePointList::GetEndColumns() {
        cli::array<int32_t> *data = (new cli::array<int32_t>(this->count));
        for(int32_t n = 0; (n < this->count); n++) {
            data->at(n) = this->points->at(n)->EndCol;
        }
        return data;
    }
    
    void SequencePointList::AddSequencePoint(int32_t offset, int32_t line, int32_t col, int32_t endLine, int32_t endCol) {
        SequencePoint s = cli::ctor<SequencePoint>();
        s->Offset = offset;
        s->Line = line;
        s->Col = col;
        s->EndLine = endLine;
        s->EndCol = endCol;
        if((this->points ==  nullptr)) 
        {
            this->points = (new cli::array<SequencePoint>(10));
        }
         else 
        {
            if((this->count >= this->points->get_Length())) 
            {
                cli::array<SequencePoint> *temp = (new cli::array<SequencePoint>((this->count + 10)));
                System::Array::Copy(this->points, temp, this->points->get_Length());
                this->points = temp;
            }
        }
        this->points->at(this->count) = s;
        this->count++;
    }
    
    System::Diagnostics::SymbolStore::ISymbolDocumentWriter* SequencePointList::get_Document() {
        return this->doc;
    }
    
    int32_t SequencePointList::get_StartLine() {
        return this->points->at(0)->Line;
    }
    
    int32_t SequencePointList::get_EndLine() {
        return this->points->at((this->count - 1))->Line;
    }
    
    int32_t SequencePointList::get_StartColumn() {
        return this->points->at(0)->Col;
    }
    
    int32_t SequencePointList::get_EndColumn() {
        return this->points->at((this->count - 1))->Col;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void LocalBuilder::constructor(System::Type* t, ILGenerator* ilgen) {
        this->type = t;
        this->ilgen = ilgen;
    }
    
    void LocalBuilder::SetLocalSymInfo(System::String* name, int32_t startOffset, int32_t endOffset) {
        this->name = name;
        this->startOffset = startOffset;
        this->endOffset = endOffset;
    }
    
    void LocalBuilder::SetLocalSymInfo2(System::String* name) {
        SetLocalSymInfo(name, 0, 0);
    }
    
    void LocalBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void LocalBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void LocalBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void LocalBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* LocalBuilder::get_LocalType_6f444539e4836b2c() {
        return this->type;
    }
    
    bool LocalBuilder::get_IsPinned_494a31d10daaf415() {
        return this->is_pinned;
    }
    
    int32_t LocalBuilder::get_LocalIndex_5862e4748cbc9231() {
        return (int32_t)(this->position);
    }
    
    System::String* LocalBuilder::get_Name() {
        return this->name;
    }
    
    int32_t LocalBuilder::get_StartOffset() {
        return this->startOffset;
    }
    
    int32_t LocalBuilder::get_EndOffset() {
        return this->endOffset;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void MethodBuilder::constructor(TypeBuilder* tb, System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt) {
        this->name = name;
        this->attrs = attributes;
        this->call_conv = callingConvention;
        this->rtype = returnType;
        this->returnModReq = returnModReq;
        this->returnModOpt = returnModOpt;
        this->paramModReq = paramModReq;
        this->paramModOpt = paramModOpt;
        if(((int32_t)(((int32_t)(attributes) & 16)) ==  0)) 
        {
            (this->call_conv = (System::Reflection::CallingConventions)(((int32_t)(this->call_conv) | 32)));
        }
        if((parameterTypes != nullptr)) 
        {
            for(int32_t i = 0; (i < parameterTypes->get_Length()); ++i) {
                if(System::Type::op_Equality2(parameterTypes->at(i), nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Elements of the parameterTypes array cannot be null"), _T("parameterTypes"));
                }
            }
            this->parameters = (new cli::array<System::Type*>(parameterTypes->get_Length()));
            System::Array::Copy(parameterTypes, this->parameters, parameterTypes->get_Length());
        }
        this->type = tb;
        this->table_idx = System::Reflection::MethodBase::get_next_table_index_635aee4f976b5bec(this, 6, true);
        cli::cast<ModuleBuilder*>(tb->get_Module_ea7d65dc88202263())->RegisterToken(this, GetToken()->get_Token());
    }
    
    void MethodBuilder::constructor(TypeBuilder* tb, System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt, System::String* dllName, System::String* entryName, System::Runtime::InteropServices::CallingConvention nativeCConv, System::Runtime::InteropServices::CharSet nativeCharset) {
        this->pi_dll = dllName;
        this->pi_entry = entryName;
        this->native_cc = nativeCConv;
        this->charset = nativeCharset;
    }
    
    MethodToken MethodBuilder::GetToken() {
        return cli::ctor<MethodToken>((100663296 | this->table_idx));
    }
    
    System::Reflection::MethodInfo* MethodBuilder::GetBaseDefinition_b00937f21f1a7556() {
        return this;
    }
    
    System::Reflection::MethodImplAttributes MethodBuilder::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return this->iattrs;
    }
    
    cli::array<System::Reflection::ParameterInfo*>* MethodBuilder::GetParameters_9d17bcb549474c9() {
        if(!(this->type->get_is_created())) 
        {
            throw NotSupported();
        }
        if((this->parameters ==  nullptr)) 
        {
            return nullptr;
        }
        cli::array<System::Reflection::ParameterInfo*> *retval = (new cli::array<System::Reflection::ParameterInfo*>(this->parameters->get_Length()));
        for(int32_t i = 0; (i < this->parameters->get_Length()); i++){
            retval->at(i) = cli::gcnew<System::Reflection::ParameterInfo>((this->pinfo ==  nullptr) ? nullptr : this->pinfo->at((i + 1)), this->parameters->at(i), this, (i + 1));
        }
        return retval;
    }
    
    int32_t MethodBuilder::GetParameterCount_ac86b3a4965d967a() {
        if((this->parameters ==  nullptr)) 
        {
            return 0;
        }
        return this->parameters->get_Length();
    }
    
    System::Type* MethodBuilder::GetParameterType_f80ea4ad68a899fb(int32_t pos) {
        return this->parameters->at(pos);
    }
    
    System::Reflection::Module* MethodBuilder::GetModule() {
        return this->type->get_Module_ea7d65dc88202263();
    }
    
    void MethodBuilder::CreateMethodBody(cli::array<unsigned char>* il, int32_t count) {
        if(((il != nullptr) && ((count < 0) || (count > il->get_Length())))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("Index was out of range.  Must be non-negative and less than the size of the collection."));
        }
        if(((this->code != nullptr) || this->type->get_is_created())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type definition of the method is complete."));
        }
        if((il ==  nullptr)) 
        {
            this->code = nullptr;
        }
         else 
        {
            this->code = (new cli::array<unsigned char>(count));
            System::Array::Copy(il, this->code, count);
        }
    }
    
    System::Object* MethodBuilder::Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw NotSupported();
    }
    
    bool MethodBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw NotSupported();
    }
    
    cli::array<System::Object*>* MethodBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        if(this->type->get_is_created()) 
        {
            return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
        }
         else 
        {
            throw NotSupported();
        }
    }
    
    cli::array<System::Object*>* MethodBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        if(this->type->get_is_created()) 
        {
            return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
        }
         else 
        {
            throw NotSupported();
        }
    }
    
    ILGenerator* MethodBuilder::GetILGenerator() {
        return GetILGenerator2(64);
    }
    
    ILGenerator* MethodBuilder::GetILGenerator2(int32_t size) {
        if((((int32_t)(((int32_t)(this->iattrs) & 3)) != 0) || ((int32_t)(((int32_t)(this->iattrs) & 4)) != 0))) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Method body should not exist."));
        }
        if((this->ilgen != nullptr)) 
        {
            return this->ilgen;
        }
        this->ilgen = cli::gcnew<ILGenerator>(this->type->get_Module_ea7d65dc88202263(), cli::cast<ModuleBuilder*>(this->type->get_Module_ea7d65dc88202263())->GetTokenGenerator(), size);
        return this->ilgen;
    }
    
    ParameterBuilder* MethodBuilder::DefineParameter(int32_t position, System::Reflection::ParameterAttributes attributes, System::String* strParamName) {
        RejectIfCreated();
        if(((position < 0) || (position > this->parameters->get_Length()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("position"));
        }
        ParameterBuilder *pb = cli::gcnew<ParameterBuilder>(this, position, attributes, strParamName);
        if((this->pinfo ==  nullptr)) 
        {
            this->pinfo = (new cli::array<ParameterBuilder*>((this->parameters->get_Length() + 1)));
        }
        this->pinfo->at(position) = pb;
        return pb;
    }
    
    void MethodBuilder::check_override() {
        if(((System::Reflection::MethodInfo::op_Inequality(this->override_method, nullptr) && this->override_method->get_IsVirtual()) && !(this->get_IsVirtual()))) 
        {
            throw cli::gcnew<System::TypeLoadException>(System::String::Format3(_T("Method \'{0}\' override \'{1}\' but it is not virtual"), this->name, this->override_method));
        }
    }
    
    void MethodBuilder::fixup() {
        if((((int32_t)(((int32_t)(this->attrs) & 9216)) ==  0) && ((int32_t)(((int32_t)(this->iattrs) & 4099)) ==  0))) 
        {
            if((((this->ilgen ==  nullptr) || (this->ilgen->get_ILOffset_a7e0ed1bc16093d6() ==  0)) && ((this->code ==  nullptr) || (this->code->get_Length() ==  0)))) 
            {
                throw cli::gcnew<System::InvalidOperationException>(System::String::Format3(_T("Method \'{0}.{1}\' does not have a method body."), this->get_DeclaringType_6121cd6a84393166()->get_FullName_7e8fa72ba225e1a4(), this->get_Name_50fad5fa936c3ae2()));
            }
        }
        if((this->ilgen != nullptr)) 
        {
            this->ilgen->label_fixup();
        }
    }
    
    void MethodBuilder::GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter) {
        if(((this->ilgen != nullptr) && this->ilgen->get_HasDebugInfo())) 
        {
            System::Diagnostics::SymbolStore::SymbolToken token = cli::ctor<System::Diagnostics::SymbolStore::SymbolToken>(GetToken()->get_Token());
            symbolWriter->OpenMethod_8100d0fe13e57fbc(token);
            symbolWriter->SetSymAttribute_be44b9c427da3a77(token, _T("__name"), System::Text::Encoding::get_UTF8()->GetBytes_49806e8e98b1c1db(this->get_Name_50fad5fa936c3ae2()));
            this->ilgen->GenerateDebugInfo(symbolWriter);
            symbolWriter->CloseMethod_448561d76f46fdbe();
        }
    }
    
    void MethodBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        System::String* tmp_286 = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        ::System::Int32 tmp_287 = -1;
        if(::System::String::Equals3(tmp_286, _T("System.Runtime.CompilerServices.MethodImplAttribute"))) tmp_287 = 0;
        if(::System::String::Equals3(tmp_286, _T("System.Runtime.InteropServices.DllImportAttribute"))) tmp_287 = 1;
        if(::System::String::Equals3(tmp_286, _T("System.Runtime.InteropServices.PreserveSigAttribute"))) tmp_287 = 2;
        if(::System::String::Equals3(tmp_286, _T("System.Runtime.CompilerServices.SpecialNameAttribute"))) tmp_287 = 3;
        if(::System::String::Equals3(tmp_286, _T("System.Security.SuppressUnmanagedCodeSecurityAttribute"))) tmp_287 = 4;
        switch(tmp_287)
        {
            case 0: case_1255: 
            {
                cli::array<unsigned char> *data = customBuilder->get_Data();
                int32_t impla;
                impla = (int32_t)(data->at(2));
                (impla = impla | ((int32_t)(data->at(3)) << 8));
                (this->iattrs = (System::Reflection::MethodImplAttributes)(((int32_t)(this->iattrs) | (int32_t)(impla))));
                return;
            }
            case 1: case_1256: 
            {
                CustomAttributeInfo attr = CustomAttributeBuilder::decode_cattr(customBuilder);
                bool preserveSig = true;
                this->pi_dll = cli::cast<System::String*>(attr->ctorArgs->at(0));
                if(((this->pi_dll ==  nullptr) || (this->pi_dll->get_Length() ==  0))) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("DllName cannot be empty"));
                }
                this->native_cc = System::Runtime::InteropServices::CallingConvention::Winapi;
                for(int32_t i = 0; (i < attr->namedParamNames->get_Length()); ++i){
                    System::String *name = attr->namedParamNames->at(i);
                    System::Object *value = attr->namedParamValues->at(i);
                    if(System::String::op_Equality(name, _T("CallingConvention"))) 
                    {
                        this->native_cc = cli::unbox<System::Runtime::InteropServices::CallingConvention>(value);
                    }
                     else 
                    {
                        if(System::String::op_Equality(name, _T("CharSet"))) 
                        {
                            this->charset = cli::unbox<System::Runtime::InteropServices::CharSet>(value);
                        }
                         else 
                        {
                            if(System::String::op_Equality(name, _T("EntryPoint"))) 
                            {
                                this->pi_entry = cli::cast<System::String*>(value);
                            }
                             else 
                            {
                                if(System::String::op_Equality(name, _T("ExactSpelling"))) 
                                {
                                    this->set_ExactSpelling(cli::unbox<bool>(value));
                                }
                                 else 
                                {
                                    if(System::String::op_Equality(name, _T("SetLastError"))) 
                                    {
                                        this->set_SetLastError(cli::unbox<bool>(value));
                                    }
                                     else 
                                    {
                                        if(System::String::op_Equality(name, _T("PreserveSig"))) 
                                        {
                                            preserveSig = cli::unbox<bool>(value);
                                        }
                                         else 
                                        {
                                            if(System::String::op_Equality(name, _T("BestFitMapping"))) 
                                            {
                                                this->set_BestFitMapping(cli::unbox<bool>(value));
                                            }
                                             else 
                                            {
                                                if(System::String::op_Equality(name, _T("ThrowOnUnmappableChar"))) 
                                                {
                                                    this->set_ThrowOnUnmappableChar(cli::unbox<bool>(value));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                (this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(this->attrs) | 8192)));
                if(preserveSig) 
                {
                    (this->iattrs = (System::Reflection::MethodImplAttributes)(((int32_t)(this->iattrs) | 128)));
                }
                return;
            }
            case 2: case_1257: 
            {
                (this->iattrs = (System::Reflection::MethodImplAttributes)(((int32_t)(this->iattrs) | 128)));
                return;
            }
            case 3: case_1258: 
            {
                (this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(this->attrs) | 2048)));
                return;
            }
            case 4: case_1259: 
            {
                (this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(this->attrs) | 16384)));
                break;
            }
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void MethodBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if((binaryAttribute ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryAttribute"));
        }
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void MethodBuilder::SetImplementationFlags(System::Reflection::MethodImplAttributes attributes) {
        RejectIfCreated();
        this->iattrs = attributes;
    }
    
    void MethodBuilder::AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset) {
        if((pset ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("pset"));
        }
        if(((((int32_t)(action) ==  8) || ((int32_t)(action) ==  9)) || ((int32_t)(action) ==  10))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("Request* values are not permitted"), _T("action"));
        }
        RejectIfCreated();
        if((this->permissions != nullptr)) 
        {
            for(auto tmp_288 : this->permissions) {
                auto set = cli::cast<RefEmitPermissionSet>(tmp_288);
                if(((int32_t)(set->action) ==  (int32_t)(action))) 
                {
                    throw cli::gcnew<System::InvalidOperationException>(_T("Multiple permission sets specified with the same SecurityAction."));
                }
            }
            cli::array<RefEmitPermissionSet> *new_array = (new cli::array<RefEmitPermissionSet>((this->permissions->get_Length() + 1)));
            cli::import(this->permissions)->CopyTo(new_array, 0);
            this->permissions = new_array;
        }
         else 
        {
            this->permissions = (new cli::array<RefEmitPermissionSet>(1));
        }
        this->permissions->at((this->permissions->get_Length() - 1)) = cli::ctor<RefEmitPermissionSet>(action, pset->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        (this->attrs = (System::Reflection::MethodAttributes)(((int32_t)(this->attrs) | 16384)));
    }
    
    void MethodBuilder::SetMarshal(UnmanagedMarshal* unmanagedMarshal) {
        RejectIfCreated();
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBuilder::SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data) {
        RejectIfCreated();
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* MethodBuilder::ToString_1636a0751cb9ac11() {
        return cli::concat(_T("MethodBuilder ["), this->type->get_Name_50fad5fa936c3ae2(), _T("::"), this->name, _T("]"));
    }
    
    bool MethodBuilder::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return System::Reflection::MethodInfo::Equals_ed975d2f4a7d193e(obj);
    }
    
    int32_t MethodBuilder::GetHashCode_6648aef0f235ee6c() {
        return this->name->GetHashCode_6648aef0f235ee6c();
    }
    
    int32_t MethodBuilder::get_next_table_index_635aee4f976b5bec(System::Object* obj, int32_t table, bool inc) {
        return this->type->get_next_table_index(obj, table, inc);
    }
    
    void MethodBuilder::set_override(System::Reflection::MethodInfo* mdecl) {
        this->override_method = mdecl;
    }
    
    void MethodBuilder::RejectIfCreated() {
        if(this->type->get_is_created()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type definition of the method is complete."));
        }
    }
    
    System::Exception* MethodBuilder::NotSupported() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    System::Reflection::MethodInfo* MethodBuilder::MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* typeArguments) {
        if(!(this->get_IsGenericMethodDefinition_cce889be2a806b0f())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Method is not a generic method definition"));
        }
        if((typeArguments ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("typeArguments"));
        }
        if((this->generic_params->get_Length() != typeArguments->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Incorrect length"), _T("typeArguments"));
        }
        for(auto tmp_289 : typeArguments) {
            auto type = cli::cast<System::Type*>(tmp_289);
            {
                if(System::Type::op_Equality2(type, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(_T("typeArguments"));
                }
            }
        }
        return cli::gcnew<MethodOnTypeBuilderInst>(this, typeArguments);
    }
    
    System::Reflection::MethodInfo* MethodBuilder::GetGenericMethodDefinition_298ff0fcf1d6e37f() {
        if(!(this->get_IsGenericMethodDefinition_cce889be2a806b0f())) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        return this;
    }
    
    cli::array<System::Type*>* MethodBuilder::GetGenericArguments_77cf5f406b341958() {
        if((this->generic_params ==  nullptr)) 
        {
            return nullptr;
        }
        cli::array<System::Type*> *result = (new cli::array<System::Type*>(this->generic_params->get_Length()));
        for(int32_t i = 0; (i < this->generic_params->get_Length()); i++) {
            result->at(i) = this->generic_params->at(i);
        }
        return result;
    }
    
    cli::array<GenericTypeParameterBuilder*>* MethodBuilder::DefineGenericParameters(cli::array<System::String*>* names) {
        if((names ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("names"));
        }
        if((names->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("names"));
        }
        this->generic_params = (new cli::array<GenericTypeParameterBuilder*>(names->get_Length()));
        for(int32_t i = 0; (i < names->get_Length()); i++){
            System::String *item = names->at(i);
            if((item ==  nullptr)) 
            {
                throw cli::gcnew<System::ArgumentNullException>(_T("names"));
            }
            this->generic_params->at(i) = cli::gcnew<GenericTypeParameterBuilder>(this->type, this, item, i);
        }
        return this->generic_params;
    }
    
    void MethodBuilder::SetReturnType(System::Type* returnType) {
        this->rtype = returnType;
    }
    
    void MethodBuilder::SetParameters(cli::array<System::Type*>* parameterTypes) {
        if((parameterTypes != nullptr)) 
        {
            for(int32_t i = 0; (i < parameterTypes->get_Length()); ++i) {
                if(System::Type::op_Equality2(parameterTypes->at(i), nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Elements of the parameterTypes array cannot be null"), _T("parameterTypes"));
                }
            }
            this->parameters = (new cli::array<System::Type*>(parameterTypes->get_Length()));
            System::Array::Copy(parameterTypes, this->parameters, parameterTypes->get_Length());
        }
    }
    
    void MethodBuilder::SetSignature(System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers) {
        SetReturnType(returnType);
        SetParameters(parameterTypes);
        this->returnModReq = returnTypeRequiredCustomModifiers;
        this->returnModOpt = returnTypeOptionalCustomModifiers;
        this->paramModReq = parameterTypeRequiredCustomModifiers;
        this->paramModOpt = parameterTypeOptionalCustomModifiers;
    }
    
    void MethodBuilder::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBuilder::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBuilder::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBuilder::Invoke3(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MethodBuilder::get_ContainsGenericParameters_113614fa92731376() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool MethodBuilder::get_InitLocals() {
        return this->init_locals;
    }
    
    bool MethodBuilder::set_InitLocals(bool value) {
        this->init_locals = value;
        return get_InitLocals();
    }
    
    TypeBuilder* MethodBuilder::get_TypeBuilder() {
        return this->type;
    }
    
    System::RuntimeMethodHandle MethodBuilder::get_MethodHandle_a92ba3e25e0a5ec8() {
        throw NotSupported();
    }
    
    System::Type* MethodBuilder::get_ReturnType_832339e848f448fe() {
        return this->rtype;
    }
    
    System::Type* MethodBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->type;
    }
    
    System::Type* MethodBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->type;
    }
    
    System::String* MethodBuilder::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
    System::Reflection::MethodAttributes MethodBuilder::get_Attributes_b3976e6a55c088be() {
        return this->attrs;
    }
    
    System::Reflection::ICustomAttributeProvider* MethodBuilder::get_ReturnTypeCustomAttributes_da3feb150ffa13fb() {
        return nullptr;
    }
    
    System::Reflection::CallingConventions MethodBuilder::get_CallingConvention_309cf574b58a053a() {
        return this->call_conv;
    }
    
    System::String* MethodBuilder::get_Signature() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodBuilder::set_BestFitMapping(bool value) {
        this->extra_flags = (uint32_t)(((int64_t)(this->extra_flags) & (int64_t)(-49)) | (int64_t)((uint32_t)value ? 16 : 32));
        return;
    }
    
    void MethodBuilder::set_ThrowOnUnmappableChar(bool value) {
        this->extra_flags = (uint32_t)(((int64_t)(this->extra_flags) & (int64_t)(-12289)) | (int64_t)((uint32_t)value ? 4096 : 8192));
        return;
    }
    
    void MethodBuilder::set_ExactSpelling(bool value) {
        this->extra_flags = (uint32_t)(((int64_t)(this->extra_flags) & (int64_t)(-2)) | (int64_t)((uint32_t)value ? 1 : 0));
        return;
    }
    
    void MethodBuilder::set_SetLastError(bool value) {
        this->extra_flags = (uint32_t)(((int64_t)(this->extra_flags) & (int64_t)(-65)) | (int64_t)((uint32_t)value ? 64 : 0));
        return;
    }
    
    bool MethodBuilder::get_IsGenericMethodDefinition_cce889be2a806b0f() {
        return (this->generic_params != nullptr);
    }
    
    bool MethodBuilder::get_IsGenericMethod_7e509e51546ea990() {
        return (this->generic_params != nullptr);
    }
    
    System::Reflection::Module* MethodBuilder::get_Module_ea7d65dc88202263() {
        return System::Reflection::MethodInfo::get_Module_ea7d65dc88202263();
    }
    
    System::Reflection::ParameterInfo* MethodBuilder::get_ReturnParameter_d8c8b72c8a40767c() {
        return System::Reflection::MethodInfo::get_ReturnParameter_d8c8b72c8a40767c();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void MethodOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::MethodInfo* base_method) {
        this->instantiation = instantiation;
        this->base_method = base_method;
    }
    
    void MethodOnTypeBuilderInst::constructor(MethodOnTypeBuilderInst* gmd, cli::array<System::Type*>* typeArguments) {
        this->instantiation = gmd->instantiation;
        this->base_method = gmd->base_method;
        this->method_arguments = (new cli::array<System::Type*>(typeArguments->get_Length()));
        cli::import(typeArguments)->CopyTo(this->method_arguments, 0);
        this->generic_method_definition = gmd;
    }
    
    void MethodOnTypeBuilderInst::constructor(System::Reflection::MethodInfo* method, cli::array<System::Type*>* typeArguments) {
        this->instantiation = method->get_DeclaringType_6121cd6a84393166();
        this->base_method = ExtractBaseMethod(method);
        this->method_arguments = (new cli::array<System::Type*>(typeArguments->get_Length()));
        cli::import(typeArguments)->CopyTo(this->method_arguments, 0);
        if(System::Reflection::MethodInfo::op_Inequality(this->base_method, method)) 
        {
            this->generic_method_definition = method;
        }
    }
    
    System::Reflection::MethodInfo* MethodOnTypeBuilderInst::ExtractBaseMethod(System::Reflection::MethodInfo* info) {
        if(cli::is<MethodBuilder>(info)) 
        {
            return info;
        }
        if(cli::is<MethodOnTypeBuilderInst>(info)) 
        {
            return cli::cast<MethodOnTypeBuilderInst*>(info)->base_method;
        }
        if(info->get_IsGenericMethod_7e509e51546ea990()) 
        {
            info = info->GetGenericMethodDefinition_298ff0fcf1d6e37f();
        }
        System::Type *t = info->get_DeclaringType_6121cd6a84393166();
        if((!(t->get_IsGenericType_4db8ddd5b97f3c14()) || t->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            return info;
        }
        return cli::cast<System::Reflection::MethodInfo*>(t->get_Module_ea7d65dc88202263()->ResolveMethod(info->get_MetadataToken_85fbeea46e971f25()));
    }
    
    cli::array<System::Type*>* MethodOnTypeBuilderInst::GetTypeArgs() {
        if((!(this->instantiation->get_IsGenericType_4db8ddd5b97f3c14()) || this->instantiation->get_IsGenericParameter_2a17c4bf67798b07())) 
        {
            return nullptr;
        }
        return this->instantiation->GetGenericArguments_a7fb476275cfe9a3();
    }
    
    bool MethodOnTypeBuilderInst::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* MethodOnTypeBuilderInst::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* MethodOnTypeBuilderInst::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::String* MethodOnTypeBuilderInst::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>(this->get_ReturnType_832339e848f448fe()->ToString_1636a0751cb9ac11());
        sb->Append2(_T(" "));
        sb->Append2(this->base_method->get_Name_50fad5fa936c3ae2());
        sb->Append2(_T("("));
        sb->Append2(_T(")"));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    System::Reflection::MethodImplAttributes MethodOnTypeBuilderInst::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return this->base_method->GetMethodImplementationFlags_34d93dba8c4849e8();
    }
    
    cli::array<System::Reflection::ParameterInfo*>* MethodOnTypeBuilderInst::GetParameters_9d17bcb549474c9() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    int32_t MethodOnTypeBuilderInst::GetParameterCount_ac86b3a4965d967a() {
        return this->base_method->GetParameterCount_ac86b3a4965d967a();
    }
    
    System::Object* MethodOnTypeBuilderInst::Invoke_ba5f4e14507fdb95(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::MethodInfo* MethodOnTypeBuilderInst::MakeGenericMethod_6fb56e5d44bf2eff(cli::array<System::Type*>* methodInstantiation) {
        if((!(this->base_method->get_IsGenericMethodDefinition_cce889be2a806b0f()) || (this->method_arguments != nullptr))) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Method is not a generic method definition"));
        }
        if((methodInstantiation ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("methodInstantiation"));
        }
        if((this->base_method->GetGenericArguments_77cf5f406b341958()->get_Length() != methodInstantiation->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Incorrect length"), _T("methodInstantiation"));
        }
        for(auto tmp_290 : methodInstantiation) {
            auto type = cli::cast<System::Type*>(tmp_290);
            {
                if(System::Type::op_Equality2(type, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(_T("methodInstantiation"));
                }
            }
        }
        return cli::gcnew<MethodOnTypeBuilderInst>(this, methodInstantiation);
    }
    
    cli::array<System::Type*>* MethodOnTypeBuilderInst::GetGenericArguments_77cf5f406b341958() {
        if(!(this->base_method->get_IsGenericMethodDefinition_cce889be2a806b0f())) 
        {
            return nullptr;
        }
        cli::array<System::Type*> *source = ([&]() {
            cli::array<System::Type*>* tmp_291 = this->method_arguments;
            if(tmp_291 == nullptr) {
                return this->base_method->GetGenericArguments_77cf5f406b341958();
            } else
                return tmp_291;
        })();
        cli::array<System::Type*> *result = (new cli::array<System::Type*>(source->get_Length()));
        cli::import(source)->CopyTo(result, 0);
        return result;
    }
    
    System::Reflection::MethodInfo* MethodOnTypeBuilderInst::GetGenericMethodDefinition_298ff0fcf1d6e37f() {
        return ([&]() {
            System::Reflection::MethodInfo* tmp_292 = this->generic_method_definition;
            if(tmp_292 == nullptr) {
                return this->base_method;
            } else
                return tmp_292;
        })();
    }
    
    System::Reflection::MethodInfo* MethodOnTypeBuilderInst::GetBaseDefinition_b00937f21f1a7556() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* MethodOnTypeBuilderInst::get_DeclaringType_6121cd6a84393166() {
        return this->instantiation;
    }
    
    System::String* MethodOnTypeBuilderInst::get_Name_50fad5fa936c3ae2() {
        return this->base_method->get_Name_50fad5fa936c3ae2();
    }
    
    System::Type* MethodOnTypeBuilderInst::get_ReflectedType_bf4971c0f442b9dc() {
        return this->instantiation;
    }
    
    System::Type* MethodOnTypeBuilderInst::get_ReturnType_832339e848f448fe() {
        return this->base_method->get_ReturnType_832339e848f448fe();
    }
    
    int32_t MethodOnTypeBuilderInst::get_MetadataToken_85fbeea46e971f25() {
        return System::Reflection::MethodInfo::get_MetadataToken_85fbeea46e971f25();
    }
    
    System::RuntimeMethodHandle MethodOnTypeBuilderInst::get_MethodHandle_a92ba3e25e0a5ec8() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::MethodAttributes MethodOnTypeBuilderInst::get_Attributes_b3976e6a55c088be() {
        return this->base_method->get_Attributes_b3976e6a55c088be();
    }
    
    System::Reflection::CallingConventions MethodOnTypeBuilderInst::get_CallingConvention_309cf574b58a053a() {
        return this->base_method->get_CallingConvention_309cf574b58a053a();
    }
    
    bool MethodOnTypeBuilderInst::get_ContainsGenericParameters_113614fa92731376() {
        if(this->base_method->get_ContainsGenericParameters_113614fa92731376()) 
        {
            return true;
        }
        if(!(this->base_method->get_IsGenericMethodDefinition_cce889be2a806b0f())) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        if((this->method_arguments ==  nullptr)) 
        {
            return true;
        }
        for(auto tmp_293 : this->method_arguments) {
            auto t = cli::cast<System::Type*>(tmp_293);
            {
                if(t->get_ContainsGenericParameters_19598881dd690ad3()) 
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool MethodOnTypeBuilderInst::get_IsGenericMethodDefinition_cce889be2a806b0f() {
        return (this->base_method->get_IsGenericMethodDefinition_cce889be2a806b0f() && (this->method_arguments ==  nullptr));
    }
    
    bool MethodOnTypeBuilderInst::get_IsGenericMethod_7e509e51546ea990() {
        return this->base_method->get_IsGenericMethodDefinition_cce889be2a806b0f();
    }
    
    System::Reflection::ICustomAttributeProvider* MethodOnTypeBuilderInst::get_ReturnTypeCustomAttributes_da3feb150ffa13fb() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void MethodRental::constructor() {
    }
    
    void MethodRental::SwapMethodBody(System::Type* cls, int32_t methodtoken, void* rgIL, int32_t methodSize, int32_t flags) {
        if(((methodSize <= 0) || (methodSize >= 4128768))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Data size must be > 0 and < 0x3f0000"), _T("methodSize"));
        }
        if(System::Type::op_Equality2(cls, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("cls"));
        }
        if((cli::is<TypeBuilder>(cls) && !(cli::cast<TypeBuilder*>(cls)->get_is_created()))) 
        {
            throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Type \'"), cls));
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodRental::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodRental::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodRental::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodRental::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    cli::array<char16_t>*  ModuleBuilder::type_modifiers;
    
    ModuleBuilder::ModuleBuilder()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ModuleBuilder::constructor(AssemblyBuilder* assb, System::String* name, System::String* fullyqname, bool emitSymbolInfo, bool transient) {
        this->name = this->scopename = name;
        this->fqname = fullyqname;
        this->assembly = this->assemblyb = assb;
        this->transient = transient;
        this->guid = System::Guid::FastNewGuidArray();
        this->table_idx = get_next_table_index(this, 0, true);
        this->name_cache = cli::gcnew<System::Collections::Hashtable>();
        this->us_string_cache = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, int32_t>>(512);
        basic_init(this);
        CreateGlobalType();
        if(assb->get_IsRun()) 
        {
            TypeBuilder *tb = cli::gcnew<TypeBuilder>(this, System::Reflection::TypeAttributes::Abstract, 16777215);
            System::Type *type = tb->CreateType();
            set_wrappers_type(this, type);
        }
        if(emitSymbolInfo) 
        {
            System::Reflection::Assembly *asm_ = System::Reflection::Assembly::LoadWithPartialName(_T("Mono.CompilerServices.SymbolWriter"));
            if(System::Reflection::Assembly::op_Equality(asm_, nullptr)) 
            {
                throw cli::gcnew<System::TypeLoadException>(_T("The assembly for default symbol writer cannot be loaded"));
            }
            System::Type *t = asm_->GetType_cce33183e0cab1ba(_T("Mono.CompilerServices.SymbolWriter.SymbolWriterImpl"), true);
            this->symbolWriter = cli::cast<System::Diagnostics::SymbolStore::ISymbolWriter*>(System::Activator::CreateInstance9(t, (new cli::array<System::Object*>({this}))));
            System::String *fileName = this->fqname;
            if((this->assemblyb->get_AssemblyDir() != nullptr)) 
            {
                fileName = System::IO::Path::Combine(this->assemblyb->get_AssemblyDir(), fileName);
            }
            this->symbolWriter->Initialize_544bf5fae52712b1((*::System::IntPtr::Zero), fileName, true);
        }
    }
    
    void ModuleBuilder::static_constructor() {
    }
    
    void ModuleBuilder::basic_init(ModuleBuilder* ab) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::set_wrappers_type(ModuleBuilder* mb, System::Type* ab) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ModuleBuilder::IsTransient() {
        return this->transient;
    }
    
    void ModuleBuilder::CreateGlobalFunctions() {
        if(System::Type::op_Inequality2(this->global_type_created, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("global methods already created"));
        }
        if(System::Type::op_Inequality2(this->global_type, nullptr)) 
        {
            this->global_type_created = this->global_type->CreateType();
        }
    }
    
    FieldBuilder* ModuleBuilder::DefineInitializedData(System::String* name, cli::array<unsigned char>* data, System::Reflection::FieldAttributes attributes) {
        if((data ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("data"));
        }
        FieldBuilder *fb = DefineUninitializedData(name, data->get_Length(), (System::Reflection::FieldAttributes)(((int32_t)(attributes) | 256)));
        fb->SetRVAData(data);
        return fb;
    }
    
    FieldBuilder* ModuleBuilder::DefineUninitializedData(System::String* name, int32_t size, System::Reflection::FieldAttributes attributes) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(System::Type::op_Inequality2(this->global_type_created, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("global fields already created"));
        }
        if(((size <= 0) || (size > 4128768))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("size"), _T("Data size must be > 0 and < 0x3f0000"));
        }
        CreateGlobalType();
        System::String *typeName = cli::concat(_T("$ArrayType$"), cli::box(size));
        System::Type *datablobtype = System::Reflection::Module::GetType_380f735f026ced66(typeName, false, false);
        if(System::Type::op_Equality2(datablobtype, nullptr)) 
        {
            TypeBuilder *tb = DefineType4(typeName, (System::Reflection::TypeAttributes)273L, this->assemblyb->corlib_value_type, nullptr, PackingSize::Size1, size);
            tb->CreateType();
            datablobtype = tb;
        }
        FieldBuilder *fb = this->global_type->DefineField(name, datablobtype, (System::Reflection::FieldAttributes)(((int32_t)(attributes) | 16)));
        if((this->global_fields != nullptr)) 
        {
            cli::array<FieldBuilder*> *new_fields = (new cli::array<FieldBuilder*>((this->global_fields->get_Length() + 1)));
            System::Array::Copy(this->global_fields, new_fields, this->global_fields->get_Length());
            new_fields->at(this->global_fields->get_Length()) = fb;
            this->global_fields = new_fields;
        }
         else 
        {
            this->global_fields = (new cli::array<FieldBuilder*>(1));
            this->global_fields->at(0) = fb;
        }
        return fb;
    }
    
    void ModuleBuilder::addGlobalMethod(MethodBuilder* mb) {
        if((this->global_methods != nullptr)) 
        {
            cli::array<MethodBuilder*> *new_methods = (new cli::array<MethodBuilder*>((this->global_methods->get_Length() + 1)));
            System::Array::Copy(this->global_methods, new_methods, this->global_methods->get_Length());
            new_methods->at(this->global_methods->get_Length()) = mb;
            this->global_methods = new_methods;
        }
         else 
        {
            this->global_methods = (new cli::array<MethodBuilder*>(1));
            this->global_methods->at(0) = mb;
        }
    }
    
    MethodBuilder* ModuleBuilder::DefineGlobalMethod(System::String* name, System::Reflection::MethodAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineGlobalMethod2(name, attributes, System::Reflection::CallingConventions::Standard, returnType, parameterTypes);
    }
    
    MethodBuilder* ModuleBuilder::DefineGlobalMethod2(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineGlobalMethod3(name, attributes, callingConvention, returnType, nullptr, nullptr, parameterTypes, nullptr, nullptr);
    }
    
    MethodBuilder* ModuleBuilder::DefineGlobalMethod3(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(((int32_t)(((int32_t)(attributes) & 16)) ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("global methods must be static"));
        }
        if(System::Type::op_Inequality2(this->global_type_created, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("global methods already created"));
        }
        CreateGlobalType();
        MethodBuilder *mb = this->global_type->DefineMethod3(name, attributes, callingConvention, returnType, requiredReturnTypeCustomModifiers, optionalReturnTypeCustomModifiers, parameterTypes, requiredParameterTypeCustomModifiers, optionalParameterTypeCustomModifiers);
        addGlobalMethod(mb);
        return mb;
    }
    
    MethodBuilder* ModuleBuilder::DefinePInvokeMethod(System::String* name, System::String* dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet) {
        return DefinePInvokeMethod2(name, dllName, name, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet);
    }
    
    MethodBuilder* ModuleBuilder::DefinePInvokeMethod2(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(((int32_t)(((int32_t)(attributes) & 16)) ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("global methods must be static"));
        }
        if(System::Type::op_Inequality2(this->global_type_created, nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("global methods already created"));
        }
        CreateGlobalType();
        MethodBuilder *mb = this->global_type->DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet);
        addGlobalMethod(mb);
        return mb;
    }
    
    TypeBuilder* ModuleBuilder::DefineType(System::String* name) {
        return DefineType2(name, System::Reflection::TypeAttributes::NotPublic);
    }
    
    TypeBuilder* ModuleBuilder::DefineType2(System::String* name, System::Reflection::TypeAttributes attr) {
        if(((int32_t)(((int32_t)(attr) & 32)) != 0)) 
        {
            return DefineType5(name, attr, nullptr, nullptr);
        }
        return DefineType5(name, attr, cli::typeof<System::Type>::info, nullptr);
    }
    
    TypeBuilder* ModuleBuilder::DefineType3(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent) {
        return DefineType5(name, attr, parent, nullptr);
    }
    
    void ModuleBuilder::AddType(TypeBuilder* tb) {
        if((this->types != nullptr)) 
        {
            if((this->types->get_Length() ==  this->num_types)) 
            {
                cli::array<TypeBuilder*> *new_types = (new cli::array<TypeBuilder*>((this->types->get_Length() * 2)));
                System::Array::Copy(this->types, new_types, this->num_types);
                this->types = new_types;
            }
        }
         else 
        {
            this->types = (new cli::array<TypeBuilder*>(1));
        }
        this->types->at(this->num_types) = tb;
        this->num_types++;
    }
    
    TypeBuilder* ModuleBuilder::DefineType4(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packingSize, int32_t typesize) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fullname"));
        }
        if(this->name_cache->ContainsKey_5de2e202a0290d76(name)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Duplicate type name within an assembly."));
        }
        TypeBuilder *res = cli::gcnew<TypeBuilder>(this, name, attr, parent, interfaces, packingSize, typesize, nullptr);
        AddType(res);
        this->name_cache->Add_3f7ab157bcb41156(name, res);
        return res;
    }
    
    void ModuleBuilder::RegisterTypeName(TypeBuilder* tb, System::String* name) {
        this->name_cache->Add_3f7ab157bcb41156(name, tb);
    }
    
    TypeBuilder* ModuleBuilder::GetRegisteredType(System::String* name) {
        return cli::cast<TypeBuilder*>(this->name_cache->get_Item_d75c6e706b965758(name));
    }
    
    TypeBuilder* ModuleBuilder::DefineType5(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces) {
        return DefineType4(name, attr, parent, interfaces, PackingSize::Unspecified, 0);
    }
    
    TypeBuilder* ModuleBuilder::DefineType6(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, int32_t typesize) {
        return DefineType4(name, attr, parent, nullptr, PackingSize::Unspecified, 0);
    }
    
    TypeBuilder* ModuleBuilder::DefineType7(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packsize) {
        return DefineType4(name, attr, parent, nullptr, packsize, 0);
    }
    
    TypeBuilder* ModuleBuilder::DefineType8(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packingSize, int32_t typesize) {
        return DefineType4(name, attr, parent, nullptr, packingSize, typesize);
    }
    
    System::Reflection::MethodInfo* ModuleBuilder::GetArrayMethod(System::Type* arrayClass, System::String* methodName, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return cli::gcnew<System::Reflection::MonoArrayMethod>(arrayClass, methodName, callingConvention, returnType, parameterTypes);
    }
    
    EnumBuilder* ModuleBuilder::DefineEnum(System::String* name, System::Reflection::TypeAttributes visibility, System::Type* underlyingType) {
        if(this->name_cache->Contains_be7d0f2741618cb4(name)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Duplicate type name within an assembly."));
        }
        EnumBuilder *eb = cli::gcnew<EnumBuilder>(this, name, visibility, underlyingType);
        TypeBuilder *res = eb->GetTypeBuilder();
        AddType(res);
        this->name_cache->Add_3f7ab157bcb41156(name, res);
        return eb;
    }
    
    System::Type* ModuleBuilder::GetType_a66b4e15451215(System::String* className) {
        return System::Reflection::Module::GetType_380f735f026ced66(className, false, false);
    }
    
    System::Type* ModuleBuilder::GetType_2d1dcb4032b0487e(System::String* className, bool ignoreCase) {
        return System::Reflection::Module::GetType_380f735f026ced66(className, false, ignoreCase);
    }
    
    TypeBuilder* ModuleBuilder::search_in_array(cli::array<TypeBuilder*>* arr, int32_t validElementsInArray, System::String* className) {
        int32_t i;
        for(i = 0; (i < validElementsInArray); ++i){
            if((System::String::Compare3(className, arr->at(i)->get_FullName_7e8fa72ba225e1a4(), true, System::Globalization::CultureInfo::get_InvariantCulture()) ==  0)) 
            {
                return arr->at(i);
            }
        }
        return nullptr;
    }
    
    TypeBuilder* ModuleBuilder::search_nested_in_array(cli::array<TypeBuilder*>* arr, int32_t validElementsInArray, System::String* className) {
        int32_t i;
        for(i = 0; (i < validElementsInArray); ++i){
            if((System::String::Compare3(className, arr->at(i)->get_Name_50fad5fa936c3ae2(), true, System::Globalization::CultureInfo::get_InvariantCulture()) ==  0)) 
            {
                return arr->at(i);
            }
        }
        return nullptr;
    }
    
    System::Type* ModuleBuilder::create_modified_type(TypeBuilder* tb, System::String* modifiers) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    TypeBuilder* ModuleBuilder::GetMaybeNested(TypeBuilder* t, System::String* className) {
        int32_t subt;
        System::String *pname, *rname;
        subt = className->IndexOf4(u'+');
        if((subt < 0)) 
        {
            if((t->subtypes != nullptr)) 
            {
                return search_nested_in_array(t->subtypes, t->subtypes->get_Length(), className);
            }
            return nullptr;
        }
        if((t->subtypes != nullptr)) 
        {
            pname = className->Substring2(0, subt);
            rname = className->Substring((subt + 1));
            TypeBuilder *result = search_nested_in_array(t->subtypes, t->subtypes->get_Length(), pname);
            if(System::Type::op_Inequality2(result, nullptr)) 
            {
                return GetMaybeNested(result, rname);
            }
        }
        return nullptr;
    }
    
    System::Type* ModuleBuilder::GetType_380f735f026ced66(System::String* className, bool throwOnError, bool ignoreCase) {
        if((className ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("className"));
        }
        if((className->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("className"));
        }
        int32_t subt;
        System::String *orig = className;
        System::String *modifiers;
        TypeBuilder *result = nullptr;
        if(((this->types ==  nullptr) && throwOnError)) 
        {
            throw cli::gcnew<System::TypeLoadException>(className);
        }
        subt = className->IndexOfAny(type_modifiers);
        if((subt >= 0)) 
        {
            modifiers = className->Substring(subt);
            className = className->Substring2(0, subt);
        }
         else 
        {
            modifiers = nullptr;
        }
        if(!(ignoreCase)) 
        {
            result = cli::as<TypeBuilder*>(this->name_cache->get_Item_d75c6e706b965758(className));
        }
         else 
        {
            subt = className->IndexOf4(u'+');
            if((subt < 0)) 
            {
                if((this->types != nullptr)) 
                {
                    result = search_in_array(this->types, this->num_types, className);
                }
            }
             else 
            {
                System::String *pname, *rname;
                pname = className->Substring2(0, subt);
                rname = className->Substring((subt + 1));
                result = search_in_array(this->types, this->num_types, pname);
                if(System::Type::op_Inequality2(result, nullptr)) 
                {
                    result = GetMaybeNested(result, rname);
                }
            }
        }
        if((System::Type::op_Equality2(result, nullptr) && throwOnError)) 
        {
            throw cli::gcnew<System::TypeLoadException>(orig);
        }
        if((System::Type::op_Inequality2(result, nullptr) && (modifiers != nullptr))) 
        {
            System::Type *mt = create_modified_type(result, modifiers);
            result = cli::as<TypeBuilder*>(mt);
            if(System::Type::op_Equality2(result, nullptr)) 
            {
                return mt;
            }
        }
        if((System::Type::op_Inequality2(result, nullptr) && result->get_is_created())) 
        {
            return result->CreateType();
        }
         else 
        {
            return result;
        }
    }
    
    int32_t ModuleBuilder::get_next_table_index(System::Object* obj, int32_t table, bool inc) {
        if((this->table_indexes ==  nullptr)) 
        {
            this->table_indexes = (new cli::array<int32_t>(64));
            for(int32_t i = 0; (i < 64); ++i) {
                this->table_indexes->at(i) = 1;
            }
            this->table_indexes->at(2) = 2;
        }
        if(inc) 
        {
            return this->table_indexes->at(table)++;
        }
        return this->table_indexes->at(table);
    }
    
    void ModuleBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void ModuleBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    System::Diagnostics::SymbolStore::ISymbolWriter* ModuleBuilder::GetSymWriter() {
        return this->symbolWriter;
    }
    
    System::Diagnostics::SymbolStore::ISymbolDocumentWriter* ModuleBuilder::DefineDocument(System::String* url, System::Guid language, System::Guid languageVendor, System::Guid documentType) {
        if((this->symbolWriter != nullptr)) 
        {
            return this->symbolWriter->DefineDocument_54f3b43bb597bdbb(url, language, languageVendor, documentType);
        }
         else 
        {
            return nullptr;
        }
    }
    
    cli::array<System::Type*>* ModuleBuilder::GetTypes_a0a49ca31fb27210() {
        if((this->types ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        int32_t n = this->num_types;
        cli::array<System::Type*> *copy = (new cli::array<System::Type*>(n));
        System::Array::Copy(this->types, copy, n);
        for(int32_t i = 0; (i < copy->get_Length()); ++i) {
            if(this->types->at(i)->get_is_created()) 
            {
                copy->at(i) = this->types->at(i)->CreateType();
            }
        }
        return copy;
    }
    
    System::Resources::IResourceWriter* ModuleBuilder::DefineResource(System::String* name, System::String* description, System::Reflection::ResourceAttributes attribute) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(System::String::op_Equality(name, System::String::Empty)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("name cannot be empty"));
        }
        if(this->transient) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The module is transient"));
        }
        if(!(this->assemblyb->get_IsSave())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The assembly is transient"));
        }
        System::Resources::ResourceWriter *writer = cli::gcnew<System::Resources::ResourceWriter>(cli::gcnew<System::IO::MemoryStream>());
        if((this->resource_writers ==  nullptr)) 
        {
            this->resource_writers = cli::gcnew<System::Collections::Hashtable>();
        }
        this->resource_writers->set_Item_84c7e24d9caa09(name, writer);
        if((this->resources != nullptr)) 
        {
            cli::array<MonoResource> *new_r = (new cli::array<MonoResource>((this->resources->get_Length() + 1)));
            System::Array::Copy(this->resources, new_r, this->resources->get_Length());
            this->resources = new_r;
        }
         else 
        {
            this->resources = (new cli::array<MonoResource>(1));
        }
        int32_t p = (this->resources->get_Length() - 1);
        this->resources->at(p)->name = name;
        this->resources->at(p)->attrs = attribute;
        return writer;
    }
    
    System::Resources::IResourceWriter* ModuleBuilder::DefineResource2(System::String* name, System::String* description) {
        return DefineResource(name, description, System::Reflection::ResourceAttributes::Public);
    }
    
    void ModuleBuilder::DefineUnmanagedResource(cli::array<unsigned char>* resource) {
        if((resource ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resource"));
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::DefineUnmanagedResource2(System::String* resourceFileName) {
        if((resourceFileName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resourceFileName"));
        }
        if(System::String::op_Equality(resourceFileName, System::String::Empty)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("resourceFileName"));
        }
        if((!(System::IO::File::Exists(resourceFileName)) || System::IO::Directory::Exists(resourceFileName))) 
        {
            throw cli::gcnew<System::IO::FileNotFoundException>(cli::concat(_T("File \'"), resourceFileName));
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::DefineManifestResource(System::String* name, System::IO::Stream* stream, System::Reflection::ResourceAttributes attribute) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(System::String::op_Equality(name, System::String::Empty)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("name cannot be empty"));
        }
        if((stream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("stream"));
        }
        if(this->transient) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The module is transient"));
        }
        if(!(this->assemblyb->get_IsSave())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The assembly is transient"));
        }
        if((this->resources != nullptr)) 
        {
            cli::array<MonoResource> *new_r = (new cli::array<MonoResource>((this->resources->get_Length() + 1)));
            System::Array::Copy(this->resources, new_r, this->resources->get_Length());
            this->resources = new_r;
        }
         else 
        {
            this->resources = (new cli::array<MonoResource>(1));
        }
        int32_t p = (this->resources->get_Length() - 1);
        this->resources->at(p)->name = name;
        this->resources->at(p)->attrs = attribute;
        this->resources->at(p)->stream = stream;
    }
    
    void ModuleBuilder::SetSymCustomAttribute(System::String* name, cli::array<unsigned char>* data) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::SetUserEntryPoint(System::Reflection::MethodInfo* entryPoint) {
        if(System::Reflection::MethodInfo::op_Equality(entryPoint, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("entryPoint"));
        }
        if(System::Reflection::Module::op_Inequality(entryPoint->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("entryPoint is not contained in this module"));
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    MethodToken ModuleBuilder::GetMethodToken(System::Reflection::MethodInfo* method) {
        if(System::Reflection::MethodInfo::op_Equality(method, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("method"));
        }
        if(System::Reflection::Module::op_Inequality(method->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The method is not in this module"));
        }
        return cli::ctor<MethodToken>(GetToken2(method));
    }
    
    MethodToken ModuleBuilder::GetArrayMethodToken(System::Type* arrayClass, System::String* methodName, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return GetMethodToken(GetArrayMethod(arrayClass, methodName, callingConvention, returnType, parameterTypes));
    }
    
    MethodToken ModuleBuilder::GetConstructorToken(System::Reflection::ConstructorInfo* con) {
        if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("con"));
        }
        if(System::Reflection::Module::op_Inequality(con->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The constructor is not in this module"));
        }
        return cli::ctor<MethodToken>(GetToken2(con));
    }
    
    FieldToken ModuleBuilder::GetFieldToken(System::Reflection::FieldInfo* field) {
        if(System::Reflection::FieldInfo::op_Equality2(field, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("field"));
        }
        if(System::Reflection::Module::op_Inequality(field->get_DeclaringType_6121cd6a84393166()->get_Module_ea7d65dc88202263(), this)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The method is not in this module"));
        }
        return cli::ctor<FieldToken>(GetToken2(field));
    }
    
    SignatureToken ModuleBuilder::GetSignatureToken(cli::array<unsigned char>* sigBytes, int32_t sigLength) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    SignatureToken ModuleBuilder::GetSignatureToken2(SignatureHelper* sigHelper) {
        if((sigHelper ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("sigHelper"));
        }
        return cli::ctor<SignatureToken>(GetToken5(sigHelper));
    }
    
    StringToken ModuleBuilder::GetStringConstant(System::String* str) {
        if((str ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("str"));
        }
        return cli::ctor<StringToken>(GetToken(str));
    }
    
    TypeToken ModuleBuilder::GetTypeToken(System::Type* type) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if(type->get_IsByRef()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("type can\'t be a byref type"), _T("type"));
        }
        if(((!(IsTransient()) && cli::is<ModuleBuilder>(type->get_Module_ea7d65dc88202263())) && cli::cast<ModuleBuilder*>(type->get_Module_ea7d65dc88202263())->IsTransient())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("a non-transient module can\'t reference a transient module"));
        }
        return cli::ctor<TypeToken>(GetToken2(type));
    }
    
    TypeToken ModuleBuilder::GetTypeToken2(System::String* name) {
        return GetTypeToken(System::Reflection::Module::GetType_a66b4e15451215(name));
    }
    
    int32_t ModuleBuilder::getUSIndex(ModuleBuilder* mb, System::String* str) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t ModuleBuilder::getToken(ModuleBuilder* mb, System::Object* obj, bool create_open_instance) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t ModuleBuilder::getMethodToken(ModuleBuilder* mb, System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t ModuleBuilder::GetToken(System::String* str) {
        int32_t result;
        if(!(this->us_string_cache->TryGetValue(str, result))) 
        {
            result = getUSIndex(this, str);
            this->us_string_cache->set_Item(str, result);
        }
        return result;
    }
    
    int32_t ModuleBuilder::GetToken2(System::Reflection::MemberInfo* member) {
        return getToken(this, member, true);
    }
    
    int32_t ModuleBuilder::GetToken3(System::Reflection::MemberInfo* member, bool create_open_instance) {
        return getToken(this, member, create_open_instance);
    }
    
    int32_t ModuleBuilder::GetToken4(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) {
        return getMethodToken(this, method, opt_param_types);
    }
    
    int32_t ModuleBuilder::GetToken5(SignatureHelper* helper) {
        return getToken(this, helper, true);
    }
    
    void ModuleBuilder::RegisterToken(System::Object* obj, int32_t token) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    TokenGenerator* ModuleBuilder::GetTokenGenerator() {
        if((this->token_gen ==  nullptr)) 
        {
            this->token_gen = cli::gcnew<ModuleBuilderTokenGenerator>(this);
        }
        return this->token_gen;
    }
    
    void ModuleBuilder::build_metadata(ModuleBuilder* mb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::WriteToFile(void* handle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::Save() {
        if((this->transient && !(this->is_main))) 
        {
            return;
        }
        if((this->types != nullptr)) 
        {
            for(int32_t i = 0; (i < this->num_types); ++i) {
                if(!(this->types->at(i)->get_is_created())) 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Type \'"), this->types->at(i)->get_FullName_7e8fa72ba225e1a4()));
                }
            }
        }
        if((System::Type::op_Inequality2(this->global_type, nullptr) && System::Type::op_Equality2(this->global_type_created, nullptr))) 
        {
            this->global_type_created = this->global_type->CreateType();
        }
        if((this->resources != nullptr)) 
        {
            for(int32_t i = 0; (i < this->resources->get_Length()); ++i){
                System::Resources::IResourceWriter *rwriter;
                if(((this->resource_writers != nullptr) && ((rwriter = cli::as<System::Resources::IResourceWriter*>(this->resource_writers->get_Item_d75c6e706b965758(this->resources->at(i)->name))) != (nullptr)))) 
                {
                    System::Resources::ResourceWriter *writer = cli::cast<System::Resources::ResourceWriter*>(rwriter);
                    writer->Generate();
                    System::IO::MemoryStream *mstream = cli::cast<System::IO::MemoryStream*>(writer->get_Stream());
                    this->resources->at(i)->data = (new cli::array<unsigned char>((int32_t)mstream->get_Length_ddb8b0d061db5350()));
                    mstream->Seek_df5b3eadfe9adf31(0L, System::IO::SeekOrigin::Begin);
                    mstream->Read_c0d6dde3943b413e(this->resources->at(i)->data, 0, (int32_t)mstream->get_Length_ddb8b0d061db5350());
                    continue;
                }
                System::IO::Stream *stream = this->resources->at(i)->stream;
                if((stream != nullptr)) 
                {
                    try {
                        int64_t len = stream->get_Length_ddb8b0d061db5350();
                        this->resources->at(i)->data = (new cli::array<unsigned char>((int32_t)len));
                        stream->Seek_df5b3eadfe9adf31(0L, System::IO::SeekOrigin::Begin);
                        stream->Read_c0d6dde3943b413e(this->resources->at(i)->data, 0, (int32_t)len);
                    }
                    catch(...) {
                    }
                }
            }
        }
        build_metadata(this);
        System::String *fileName = this->fqname;
        if((this->assemblyb->get_AssemblyDir() != nullptr)) 
        {
            fileName = System::IO::Path::Combine(this->assemblyb->get_AssemblyDir(), fileName);
        }
        try {
            System::IO::File::Delete(fileName);
        }
        catch(...) {
        }
        {
            {
                auto file = cli::gcnew<System::IO::FileStream>(fileName, System::IO::FileMode::Create, System::IO::FileAccess::Write);
                cli::using_guard{file};
            }
        }
        System::IO::File::SetAttributes(fileName, (System::IO::FileAttributes)-2147483648L);
        if(((this->types != nullptr) && (this->symbolWriter != nullptr))) 
        {
            for(int32_t i = 0; (i < this->num_types); ++i) {
                this->types->at(i)->GenerateDebugInfo(this->symbolWriter);
            }
            this->symbolWriter->Close_2ab0800c0e742859();
        }
    }
    
    void ModuleBuilder::CreateGlobalType() {
        if(System::Type::op_Equality2(this->global_type, nullptr)) 
        {
            this->global_type = cli::gcnew<TypeBuilder>(this, System::Reflection::TypeAttributes::NotPublic, 1);
        }
    }
    
    System::Guid ModuleBuilder::GetModuleVersionId_c8f7394bf9778713() {
        return cli::ctor<System::Guid>(this->guid);
    }
    
    System::Guid ModuleBuilder::Mono_GetGuid2(ModuleBuilder* mb) {
        return mb->GetModuleVersionId_c8f7394bf9778713();
    }
    
    void ModuleBuilder::GetIDsOfNames2(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::GetTypeInfo2(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::GetTypeInfoCount2(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ModuleBuilder::Invoke2(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ModuleBuilder::IsResource_27dec1ebb40006c6() {
        return false;
    }
    
    System::Reflection::MethodInfo* ModuleBuilder::GetMethodImpl_6896a740547de21d(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        if(System::Type::op_Equality2(this->global_type_created, nullptr)) 
        {
            return nullptr;
        }
        if((types ==  nullptr)) 
        {
            return this->global_type_created->GetMethod(name);
        }
        return this->global_type_created->GetMethod6(name, bindingAttr, binder, callConvention, types, modifiers);
    }
    
    System::Reflection::FieldInfo* ModuleBuilder::ResolveField_8b875538304b540d(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        System::Reflection::ResolveTokenError error;
        void *handle = System::Reflection::Module::ResolveFieldToken(this->_impl, metadataToken, System::Reflection::Module::ptrs_from_types(genericTypeArguments), System::Reflection::Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("Field"));
        }
         else 
        {
            return System::Reflection::FieldInfo::GetFieldFromHandle(cli::ctor<System::RuntimeFieldHandle>(handle));
        }
    }
    
    System::Reflection::MemberInfo* ModuleBuilder::ResolveMember_643acbf09c998474(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        System::Reflection::ResolveTokenError error;
        System::Reflection::MemberInfo *m = System::Reflection::Module::ResolveMemberToken(this->_impl, metadataToken, System::Reflection::Module::ptrs_from_types(genericTypeArguments), System::Reflection::Module::ptrs_from_types(genericMethodArguments), error);
        if(System::Reflection::MemberInfo::op_Equality(m, nullptr)) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("MemberInfo"));
        }
         else 
        {
            return m;
        }
    }
    
    System::Reflection::MethodBase* ModuleBuilder::ResolveMethod_b0428e4e3220e0df(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        System::Reflection::ResolveTokenError error;
        void *handle = System::Reflection::Module::ResolveMethodToken(this->_impl, metadataToken, System::Reflection::Module::ptrs_from_types(genericTypeArguments), System::Reflection::Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("MethodBase"));
        }
         else 
        {
            return System::Reflection::MethodBase::GetMethodFromHandleNoGenericCheck(cli::ctor<System::RuntimeMethodHandle>(handle));
        }
    }
    
    System::String* ModuleBuilder::ResolveString_f0f214b35440d5e7(int32_t metadataToken) {
        System::Reflection::ResolveTokenError error;
        System::String *s = System::Reflection::Module::ResolveStringToken(this->_impl, metadataToken, error);
        if((s ==  nullptr)) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("string"));
        }
         else 
        {
            return s;
        }
    }
    
    cli::array<unsigned char>* ModuleBuilder::ResolveSignature_a46b44b280a2cd11(int32_t metadataToken) {
        System::Reflection::ResolveTokenError error;
        cli::array<unsigned char> *res = System::Reflection::Module::ResolveSignature(this->_impl, metadataToken, error);
        if((res ==  nullptr)) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("signature"));
        }
         else 
        {
            return res;
        }
    }
    
    System::Type* ModuleBuilder::ResolveType_e1d373628d9d202a(int32_t metadataToken, cli::array<System::Type*>* genericTypeArguments, cli::array<System::Type*>* genericMethodArguments) {
        System::Reflection::ResolveTokenError error;
        void *handle = System::Reflection::Module::ResolveTypeToken(this->_impl, metadataToken, System::Reflection::Module::ptrs_from_types(genericTypeArguments), System::Reflection::Module::ptrs_from_types(genericMethodArguments), error);
        if(::System::IntPtr::op_Equality(handle, (*::System::IntPtr::Zero))) 
        {
            throw System::Reflection::Module::resolve_token_exception(metadataToken, error, _T("Type"));
        }
         else 
        {
            return System::Type::GetTypeFromHandle(cli::ctor<System::RuntimeTypeHandle>(handle));
        }
    }
    
    bool ModuleBuilder::Equals_ed975d2f4a7d193e(System::Object* obj) {
        return System::Reflection::Module::Equals_ed975d2f4a7d193e(obj);
    }
    
    int32_t ModuleBuilder::GetHashCode_6648aef0f235ee6c() {
        return System::Reflection::Module::GetHashCode_6648aef0f235ee6c();
    }
    
    bool ModuleBuilder::IsDefined_658453ecd0c3c72(System::Type* attributeType, bool inherit) {
        return System::Reflection::Module::IsDefined_658453ecd0c3c72(attributeType, inherit);
    }
    
    cli::array<System::Object*>* ModuleBuilder::GetCustomAttributes_60f12c5b82d89770(bool inherit) {
        return System::Reflection::Module::GetCustomAttributes_60f12c5b82d89770(inherit);
    }
    
    cli::array<System::Object*>* ModuleBuilder::GetCustomAttributes_2d26f4bf11dda1f5(System::Type* attributeType, bool inherit) {
        return System::Reflection::Module::GetCustomAttributes_2d26f4bf11dda1f5(attributeType, inherit);
    }
    
    System::Reflection::FieldInfo* ModuleBuilder::GetField_41336984e4f8fc62(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        return System::Reflection::Module::GetField_41336984e4f8fc62(name, bindingAttr);
    }
    
    cli::array<System::Reflection::FieldInfo*>* ModuleBuilder::GetFields_676a5dd50d936280(System::Reflection::BindingFlags bindingFlags) {
        return System::Reflection::Module::GetFields_676a5dd50d936280(bindingFlags);
    }
    
    cli::array<System::Reflection::MethodInfo*>* ModuleBuilder::GetMethods_df7587a505f60ad1(System::Reflection::BindingFlags bindingFlags) {
        return System::Reflection::Module::GetMethods_df7587a505f60ad1(bindingFlags);
    }
    
    System::String* ModuleBuilder::get_FullyQualifiedName_ae33b8f6fc78fb8f() {
        return this->fqname;
    }
    
    System::String* ModuleBuilder::get_FileName() {
        return this->fqname;
    }
    
    void ModuleBuilder::set_IsMain(bool value) {
        this->is_main = value;
        return;
    }
    
    System::Reflection::Assembly* ModuleBuilder::get_Assembly_dbea84123403c0aa() {
        return this->assemblyb;
    }
    
    System::String* ModuleBuilder::get_Name_51eff21286003cfa() {
        return this->name;
    }
    
    System::String* ModuleBuilder::get_ScopeName_da7d7aa6d0cd103f() {
        return this->name;
    }
    
    System::Guid ModuleBuilder::get_ModuleVersionId_d7f4c95bdb0ad1b2() {
        return System::Reflection::Module::GetModuleVersionId_c8f7394bf9778713();
    }
    
    int32_t ModuleBuilder::get_MetadataToken_a9fc5f43a9908cd0() {
        return System::Reflection::Module::get_MetadataToken_a9fc5f43a9908cd0();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ModuleBuilderTokenGenerator::constructor(ModuleBuilder* mb) {
        this->mb = mb;
    }
    
    int32_t ModuleBuilderTokenGenerator::GetToken(System::String* str) {
        return this->mb->GetToken(str);
    }
    
    int32_t ModuleBuilderTokenGenerator::GetToken2(System::Reflection::MemberInfo* member, bool create_open_instance) {
        return this->mb->GetToken3(member, create_open_instance);
    }
    
    int32_t ModuleBuilderTokenGenerator::GetToken3(System::Reflection::MethodInfo* method, cli::array<System::Type*>* opt_param_types) {
        return this->mb->GetToken4(method, opt_param_types);
    }
    
    int32_t ModuleBuilderTokenGenerator::GetToken4(SignatureHelper* helper) {
        return this->mb->GetToken5(helper);
    }
    
}}}
namespace System { namespace Reflection {
    
    
    void MonoArrayMethod::constructor(System::Type* arrayClass, System::String* methodName, CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        this->name = methodName;
        this->parent = arrayClass;
        this->ret = returnType;
        this->parameters = cli::cast<cli::array<System::Type*>*>(cli::import(parameterTypes)->Clone());
        this->call_conv = callingConvention;
    }
    
    MethodInfo* MonoArrayMethod::GetBaseDefinition_b00937f21f1a7556() {
        return this;
    }
    
    MethodImplAttributes MonoArrayMethod::GetMethodImplementationFlags_34d93dba8c4849e8() {
        return MethodImplAttributes::IL;
    }
    
    cli::array<ParameterInfo*>* MonoArrayMethod::GetParameters_9d17bcb549474c9() {
        return (new cli::array<ParameterInfo*>(0));
    }
    
    int32_t MonoArrayMethod::GetParameterCount_ac86b3a4965d967a() {
        return 0;
    }
    
    System::Object* MonoArrayMethod::Invoke_ba5f4e14507fdb95(System::Object* obj, BindingFlags invokeAttr, Binder* binder, cli::array<System::Object*>* parameters, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MonoArrayMethod::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* MonoArrayMethod::GetCustomAttributes_b790992b66049291(bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes2(this, inherit);
    }
    
    cli::array<System::Object*>* MonoArrayMethod::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        return System::MonoCustomAttrs::GetCustomAttributes(this, attributeType, inherit);
    }
    
    System::String* MonoArrayMethod::ToString_1636a0751cb9ac11() {
        System::String *parms = System::String::Empty;
        cli::array<ParameterInfo*> *p = GetParameters_ab7269a35b115074();
        for(int32_t i = 0; (i < p->get_Length()); ++i){
            if((i > 0)) 
            {
                parms = cli::concat(parms, _T(", "));
            }
            parms = cli::concat(parms, p->at(i)->get_ParameterType_97c5fa09a0b988d()->get_Name_50fad5fa936c3ae2());
        }
        if(System::Type::op_Inequality2(this->get_ReturnType_832339e848f448fe(), nullptr)) 
        {
            return cli::concat(this->get_ReturnType_832339e848f448fe()->get_Name_50fad5fa936c3ae2(), _T(" "), this->get_Name_50fad5fa936c3ae2(), _T("("), parms, _T(")"));
        }
         else 
        {
            return cli::concat(_T("void "), this->get_Name_50fad5fa936c3ae2(), _T("("), parms, _T(")"));
        }
    }
    
    System::Type* MonoArrayMethod::get_ReturnType_832339e848f448fe() {
        return this->ret;
    }
    
    ICustomAttributeProvider* MonoArrayMethod::get_ReturnTypeCustomAttributes_da3feb150ffa13fb() {
        return nullptr;
    }
    
    System::RuntimeMethodHandle MonoArrayMethod::get_MethodHandle_a92ba3e25e0a5ec8() {
        return this->mhandle;
    }
    
    MethodAttributes MonoArrayMethod::get_Attributes_b3976e6a55c088be() {
        return MethodAttributes::PrivateScope;
    }
    
    System::Type* MonoArrayMethod::get_ReflectedType_bf4971c0f442b9dc() {
        return this->parent;
    }
    
    System::Type* MonoArrayMethod::get_DeclaringType_6121cd6a84393166() {
        return this->parent;
    }
    
    System::String* MonoArrayMethod::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
}}
namespace System { namespace Reflection { namespace Emit {
    
    cli::array<System::String*>*  OpCodeNames::names;
    
    OpCodeNames::OpCodeNames()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void OpCodeNames::constructor() {
    }
    
    void OpCodeNames::static_constructor() {
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    OpCode  OpCodes::Nop;
    OpCode  OpCodes::Break;
    OpCode  OpCodes::Ldarg_0;
    OpCode  OpCodes::Ldarg_1;
    OpCode  OpCodes::Ldarg_2;
    OpCode  OpCodes::Ldarg_3;
    OpCode  OpCodes::Ldloc_0;
    OpCode  OpCodes::Ldloc_1;
    OpCode  OpCodes::Ldloc_2;
    OpCode  OpCodes::Ldloc_3;
    OpCode  OpCodes::Stloc_0;
    OpCode  OpCodes::Stloc_1;
    OpCode  OpCodes::Stloc_2;
    OpCode  OpCodes::Stloc_3;
    OpCode  OpCodes::Ldarg_S;
    OpCode  OpCodes::Ldarga_S;
    OpCode  OpCodes::Starg_S;
    OpCode  OpCodes::Ldloc_S;
    OpCode  OpCodes::Ldloca_S;
    OpCode  OpCodes::Stloc_S;
    OpCode  OpCodes::Ldnull;
    OpCode  OpCodes::Ldc_I4_M1;
    OpCode  OpCodes::Ldc_I4_0;
    OpCode  OpCodes::Ldc_I4_1;
    OpCode  OpCodes::Ldc_I4_2;
    OpCode  OpCodes::Ldc_I4_3;
    OpCode  OpCodes::Ldc_I4_4;
    OpCode  OpCodes::Ldc_I4_5;
    OpCode  OpCodes::Ldc_I4_6;
    OpCode  OpCodes::Ldc_I4_7;
    OpCode  OpCodes::Ldc_I4_8;
    OpCode  OpCodes::Ldc_I4_S;
    OpCode  OpCodes::Ldc_I4;
    OpCode  OpCodes::Ldc_I8;
    OpCode  OpCodes::Ldc_R4;
    OpCode  OpCodes::Ldc_R8;
    OpCode  OpCodes::Dup;
    OpCode  OpCodes::Pop;
    OpCode  OpCodes::Jmp;
    OpCode  OpCodes::Call;
    OpCode  OpCodes::Calli;
    OpCode  OpCodes::Ret;
    OpCode  OpCodes::Br_S;
    OpCode  OpCodes::Brfalse_S;
    OpCode  OpCodes::Brtrue_S;
    OpCode  OpCodes::Beq_S;
    OpCode  OpCodes::Bge_S;
    OpCode  OpCodes::Bgt_S;
    OpCode  OpCodes::Ble_S;
    OpCode  OpCodes::Blt_S;
    OpCode  OpCodes::Bne_Un_S;
    OpCode  OpCodes::Bge_Un_S;
    OpCode  OpCodes::Bgt_Un_S;
    OpCode  OpCodes::Ble_Un_S;
    OpCode  OpCodes::Blt_Un_S;
    OpCode  OpCodes::Br;
    OpCode  OpCodes::Brfalse;
    OpCode  OpCodes::Brtrue;
    OpCode  OpCodes::Beq;
    OpCode  OpCodes::Bge;
    OpCode  OpCodes::Bgt;
    OpCode  OpCodes::Ble;
    OpCode  OpCodes::Blt;
    OpCode  OpCodes::Bne_Un;
    OpCode  OpCodes::Bge_Un;
    OpCode  OpCodes::Bgt_Un;
    OpCode  OpCodes::Ble_Un;
    OpCode  OpCodes::Blt_Un;
    OpCode  OpCodes::Switch;
    OpCode  OpCodes::Ldind_I1;
    OpCode  OpCodes::Ldind_U1;
    OpCode  OpCodes::Ldind_I2;
    OpCode  OpCodes::Ldind_U2;
    OpCode  OpCodes::Ldind_I4;
    OpCode  OpCodes::Ldind_U4;
    OpCode  OpCodes::Ldind_I8;
    OpCode  OpCodes::Ldind_I;
    OpCode  OpCodes::Ldind_R4;
    OpCode  OpCodes::Ldind_R8;
    OpCode  OpCodes::Ldind_Ref;
    OpCode  OpCodes::Stind_Ref;
    OpCode  OpCodes::Stind_I1;
    OpCode  OpCodes::Stind_I2;
    OpCode  OpCodes::Stind_I4;
    OpCode  OpCodes::Stind_I8;
    OpCode  OpCodes::Stind_R4;
    OpCode  OpCodes::Stind_R8;
    OpCode  OpCodes::Add;
    OpCode  OpCodes::Sub;
    OpCode  OpCodes::Mul;
    OpCode  OpCodes::Div;
    OpCode  OpCodes::Div_Un;
    OpCode  OpCodes::Rem;
    OpCode  OpCodes::Rem_Un;
    OpCode  OpCodes::And;
    OpCode  OpCodes::Or;
    OpCode  OpCodes::Xor;
    OpCode  OpCodes::Shl;
    OpCode  OpCodes::Shr;
    OpCode  OpCodes::Shr_Un;
    OpCode  OpCodes::Neg;
    OpCode  OpCodes::Not;
    OpCode  OpCodes::Conv_I1;
    OpCode  OpCodes::Conv_I2;
    OpCode  OpCodes::Conv_I4;
    OpCode  OpCodes::Conv_I8;
    OpCode  OpCodes::Conv_R4;
    OpCode  OpCodes::Conv_R8;
    OpCode  OpCodes::Conv_U4;
    OpCode  OpCodes::Conv_U8;
    OpCode  OpCodes::Callvirt;
    OpCode  OpCodes::Cpobj;
    OpCode  OpCodes::Ldobj;
    OpCode  OpCodes::Ldstr;
    OpCode  OpCodes::Newobj;
    OpCode  OpCodes::Castclass;
    OpCode  OpCodes::Isinst;
    OpCode  OpCodes::Conv_R_Un;
    OpCode  OpCodes::Unbox;
    OpCode  OpCodes::Throw;
    OpCode  OpCodes::Ldfld;
    OpCode  OpCodes::Ldflda;
    OpCode  OpCodes::Stfld;
    OpCode  OpCodes::Ldsfld;
    OpCode  OpCodes::Ldsflda;
    OpCode  OpCodes::Stsfld;
    OpCode  OpCodes::Stobj;
    OpCode  OpCodes::Conv_Ovf_I1_Un;
    OpCode  OpCodes::Conv_Ovf_I2_Un;
    OpCode  OpCodes::Conv_Ovf_I4_Un;
    OpCode  OpCodes::Conv_Ovf_I8_Un;
    OpCode  OpCodes::Conv_Ovf_U1_Un;
    OpCode  OpCodes::Conv_Ovf_U2_Un;
    OpCode  OpCodes::Conv_Ovf_U4_Un;
    OpCode  OpCodes::Conv_Ovf_U8_Un;
    OpCode  OpCodes::Conv_Ovf_I_Un;
    OpCode  OpCodes::Conv_Ovf_U_Un;
    OpCode  OpCodes::Box;
    OpCode  OpCodes::Newarr;
    OpCode  OpCodes::Ldlen;
    OpCode  OpCodes::Ldelema;
    OpCode  OpCodes::Ldelem_I1;
    OpCode  OpCodes::Ldelem_U1;
    OpCode  OpCodes::Ldelem_I2;
    OpCode  OpCodes::Ldelem_U2;
    OpCode  OpCodes::Ldelem_I4;
    OpCode  OpCodes::Ldelem_U4;
    OpCode  OpCodes::Ldelem_I8;
    OpCode  OpCodes::Ldelem_I;
    OpCode  OpCodes::Ldelem_R4;
    OpCode  OpCodes::Ldelem_R8;
    OpCode  OpCodes::Ldelem_Ref;
    OpCode  OpCodes::Stelem_I;
    OpCode  OpCodes::Stelem_I1;
    OpCode  OpCodes::Stelem_I2;
    OpCode  OpCodes::Stelem_I4;
    OpCode  OpCodes::Stelem_I8;
    OpCode  OpCodes::Stelem_R4;
    OpCode  OpCodes::Stelem_R8;
    OpCode  OpCodes::Stelem_Ref;
    OpCode  OpCodes::Ldelem;
    OpCode  OpCodes::Stelem;
    OpCode  OpCodes::Unbox_Any;
    OpCode  OpCodes::Conv_Ovf_I1;
    OpCode  OpCodes::Conv_Ovf_U1;
    OpCode  OpCodes::Conv_Ovf_I2;
    OpCode  OpCodes::Conv_Ovf_U2;
    OpCode  OpCodes::Conv_Ovf_I4;
    OpCode  OpCodes::Conv_Ovf_U4;
    OpCode  OpCodes::Conv_Ovf_I8;
    OpCode  OpCodes::Conv_Ovf_U8;
    OpCode  OpCodes::Refanyval;
    OpCode  OpCodes::Ckfinite;
    OpCode  OpCodes::Mkrefany;
    OpCode  OpCodes::Ldtoken;
    OpCode  OpCodes::Conv_U2;
    OpCode  OpCodes::Conv_U1;
    OpCode  OpCodes::Conv_I;
    OpCode  OpCodes::Conv_Ovf_I;
    OpCode  OpCodes::Conv_Ovf_U;
    OpCode  OpCodes::Add_Ovf;
    OpCode  OpCodes::Add_Ovf_Un;
    OpCode  OpCodes::Mul_Ovf;
    OpCode  OpCodes::Mul_Ovf_Un;
    OpCode  OpCodes::Sub_Ovf;
    OpCode  OpCodes::Sub_Ovf_Un;
    OpCode  OpCodes::Endfinally;
    OpCode  OpCodes::Leave;
    OpCode  OpCodes::Leave_S;
    OpCode  OpCodes::Stind_I;
    OpCode  OpCodes::Conv_U;
    OpCode  OpCodes::Prefix7;
    OpCode  OpCodes::Prefix6;
    OpCode  OpCodes::Prefix5;
    OpCode  OpCodes::Prefix4;
    OpCode  OpCodes::Prefix3;
    OpCode  OpCodes::Prefix2;
    OpCode  OpCodes::Prefix1;
    OpCode  OpCodes::Prefixref;
    OpCode  OpCodes::Arglist;
    OpCode  OpCodes::Ceq;
    OpCode  OpCodes::Cgt;
    OpCode  OpCodes::Cgt_Un;
    OpCode  OpCodes::Clt;
    OpCode  OpCodes::Clt_Un;
    OpCode  OpCodes::Ldftn;
    OpCode  OpCodes::Ldvirtftn;
    OpCode  OpCodes::Ldarg;
    OpCode  OpCodes::Ldarga;
    OpCode  OpCodes::Starg;
    OpCode  OpCodes::Ldloc;
    OpCode  OpCodes::Ldloca;
    OpCode  OpCodes::Stloc;
    OpCode  OpCodes::Localloc;
    OpCode  OpCodes::Endfilter;
    OpCode  OpCodes::Unaligned;
    OpCode  OpCodes::Volatile;
    OpCode  OpCodes::Tailcall;
    OpCode  OpCodes::Initobj;
    OpCode  OpCodes::Constrained;
    OpCode  OpCodes::Cpblk;
    OpCode  OpCodes::Initblk;
    OpCode  OpCodes::Rethrow;
    OpCode  OpCodes::Sizeof;
    OpCode  OpCodes::Refanytype;
    OpCode  OpCodes::Readonly;
    
    OpCodes::OpCodes()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void OpCodes::constructor() {
    }
    
    void OpCodes::static_constructor() {
    }
    
    bool OpCodes::TakesSingleByteArgument(OpCode inst) {
        OperandType t = inst->get_OperandType();
        return (((((int32_t)(t) ==  15) || ((int32_t)(t) ==  16)) || ((int32_t)(t) ==  17)) || ((int32_t)(t) ==  18));
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void ParameterBuilder::constructor(System::Reflection::MethodBase* mb, int32_t pos, System::Reflection::ParameterAttributes attributes, System::String* strParamName) {
        this->name = strParamName;
        this->position = pos;
        this->attrs = attributes;
        this->methodb = mb;
        if(cli::is<DynamicMethod>(mb)) 
        {
            this->table_idx = 0;
        }
         else 
        {
            this->table_idx = mb->get_next_table_index_635aee4f976b5bec(this, 8, true);
        }
    }
    
    ParameterToken ParameterBuilder::GetToken_51569337479a3604() {
        return cli::ctor<ParameterToken>((8 | this->table_idx));
    }
    
    void ParameterBuilder::SetConstant_9d13067d82b82d9e(System::Object* defaultValue) {
        if((this->position > 0)) 
        {
            System::Type *t = this->methodb->GetParameterType_f80ea4ad68a899fb((this->position - 1));
            if(((defaultValue != nullptr) && System::Type::op_Inequality2(t, defaultValue->GetType()))) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Constant does not match the defined type."));
            }
            if((((t->get_IsValueType() && !(t->get_IsPrimitive())) && !(t->get_IsEnum_bc85ea7b0a749db())) && System::Type::op_Inequality2(t, cli::typeof<System::Type>::info))) 
            {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T(""), t));
            }
        }
        this->def_value = defaultValue;
        (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 4096)));
    }
    
    void ParameterBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.InAttribute"))) 
        {
            (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 1)));
            return;
        }
         else 
        {
            if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.OutAttribute"))) 
            {
                (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 2)));
                return;
            }
             else 
            {
                if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.OptionalAttribute"))) 
                {
                    (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 16)));
                    return;
                }
                 else 
                {
                    if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.MarshalAsAttribute"))) 
                    {
                        (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 8192)));
                        this->marshal_info = CustomAttributeBuilder::get_umarshal(customBuilder, false);
                        return;
                    }
                     else 
                    {
                        if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.DefaultParameterValueAttribute"))) 
                        {
                            CustomAttributeInfo cinfo = CustomAttributeBuilder::decode_cattr(customBuilder);
                            SetConstant_9d13067d82b82d9e(cinfo->ctorArgs->at(0));
                            return;
                        }
                    }
                }
            }
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void ParameterBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void ParameterBuilder::SetMarshal_d3c677d0cc1ab892(UnmanagedMarshal* unmanagedMarshal) {
        this->marshal_info = unmanagedMarshal;
        (this->attrs = (System::Reflection::ParameterAttributes)(((int32_t)(this->attrs) | 8192)));
    }
    
    void ParameterBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ParameterBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t ParameterBuilder::get_Attributes_37cd73d6903dd16e() {
        return (int32_t)(this->attrs);
    }
    
    bool ParameterBuilder::get_IsIn() {
        return (((int32_t)(this->attrs) & 1) != 0);
    }
    
    bool ParameterBuilder::get_IsOut() {
        return (((int32_t)(this->attrs) & 2) != 0);
    }
    
    bool ParameterBuilder::get_IsOptional() {
        return (((int32_t)(this->attrs) & 16) != 0);
    }
    
    System::String* ParameterBuilder::get_Name_bea4eaf90a09d50f() {
        return this->name;
    }
    
    int32_t ParameterBuilder::get_Position_3671554786d5564d() {
        return this->position;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void PropertyBuilder::constructor(TypeBuilder* tb, System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnModReq, cli::array<System::Type*>* returnModOpt, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* paramModReq, cli::array<cli::array<System::Type*>*>* paramModOpt) {
        this->name = name;
        this->attrs = attributes;
        this->callingConvention = callingConvention;
        this->type = returnType;
        this->returnModReq = returnModReq;
        this->returnModOpt = returnModOpt;
        this->paramModReq = paramModReq;
        this->paramModOpt = paramModOpt;
        if((parameterTypes != nullptr)) 
        {
            this->parameters = (new cli::array<System::Type*>(parameterTypes->get_Length()));
            System::Array::Copy(parameterTypes, this->parameters, this->parameters->get_Length());
        }
        this->typeb = tb;
        this->table_idx = tb->get_next_table_index(this, 23, true);
    }
    
    void PropertyBuilder::AddOtherMethod(MethodBuilder* mdBuilder) {
    }
    
    cli::array<System::Reflection::MethodInfo*>* PropertyBuilder::GetAccessors_9a7eb6d477c42a6d(bool nonPublic) {
        return nullptr;
    }
    
    cli::array<System::Object*>* PropertyBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw not_supported();
    }
    
    cli::array<System::Object*>* PropertyBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    System::Reflection::MethodInfo* PropertyBuilder::GetGetMethod_598f563fd3755017(bool nonPublic) {
        return this->get_method;
    }
    
    cli::array<System::Reflection::ParameterInfo*>* PropertyBuilder::GetIndexParameters_66437e9b713ac629() {
        throw not_supported();
    }
    
    System::Reflection::MethodInfo* PropertyBuilder::GetSetMethod_8896cb22c4f8d900(bool nonPublic) {
        return this->set_method;
    }
    
    System::Object* PropertyBuilder::GetValue_5fb57c5b502dc8d8(System::Object* obj, cli::array<System::Object*>* index) {
        return nullptr;
    }
    
    System::Object* PropertyBuilder::GetValue_e428a2cef74e332d(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
        throw not_supported();
    }
    
    bool PropertyBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw not_supported();
    }
    
    void PropertyBuilder::SetConstant(System::Object* defaultValue) {
        this->def_value = defaultValue;
    }
    
    void PropertyBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.CompilerServices.SpecialNameAttribute"))) 
        {
            (this->attrs = (System::Reflection::PropertyAttributes)(((int32_t)(this->attrs) | 512)));
            return;
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void PropertyBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    void PropertyBuilder::SetGetMethod(MethodBuilder* mdBuilder) {
        this->get_method = mdBuilder;
    }
    
    void PropertyBuilder::SetSetMethod(MethodBuilder* mdBuilder) {
        this->set_method = mdBuilder;
    }
    
    void PropertyBuilder::SetValue_1695ad6de909516e(System::Object* obj, System::Object* value, cli::array<System::Object*>* index) {
    }
    
    void PropertyBuilder::SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
    }
    
    void PropertyBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void PropertyBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Exception* PropertyBuilder::not_supported() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    System::Reflection::PropertyAttributes PropertyBuilder::get_Attributes_44d275d722218b81() {
        return this->attrs;
    }
    
    bool PropertyBuilder::get_CanRead_f4dae9b567f6ce33() {
        return System::Reflection::MethodInfo::op_Inequality(this->get_method, nullptr);
    }
    
    bool PropertyBuilder::get_CanWrite_a9c71933951c9826() {
        return System::Reflection::MethodInfo::op_Inequality(this->set_method, nullptr);
    }
    
    System::Type* PropertyBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->typeb;
    }
    
    System::String* PropertyBuilder::get_Name_50fad5fa936c3ae2() {
        return this->name;
    }
    
    PropertyToken PropertyBuilder::get_PropertyToken() {
        return cli::ctor<PropertyToken>();
    }
    
    System::Type* PropertyBuilder::get_PropertyType_68b4b04678fe4f8a() {
        return this->type;
    }
    
    System::Type* PropertyBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->typeb;
    }
    
    System::Reflection::Module* PropertyBuilder::get_Module_ea7d65dc88202263() {
        return System::Reflection::PropertyInfo::get_Module_ea7d65dc88202263();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void PropertyOnTypeBuilderInst::constructor(System::Reflection::MonoGenericClass* instantiation, System::Reflection::PropertyInfo* prop) {
        this->instantiation = instantiation;
        this->prop = prop;
    }
    
    cli::array<System::Reflection::MethodInfo*>* PropertyOnTypeBuilderInst::GetAccessors_9a7eb6d477c42a6d(bool nonPublic) {
        System::Reflection::MethodInfo *getter = GetGetMethod_6968d1fbf893caf2(nonPublic);
        System::Reflection::MethodInfo *setter = GetSetMethod_bc66033ddce9efa0(nonPublic);
        int32_t methods = 0;
        if(System::Reflection::MethodInfo::op_Inequality(getter, nullptr)) 
        {
            ++methods;
        }
        if(System::Reflection::MethodInfo::op_Inequality(setter, nullptr)) 
        {
            ++methods;
        }
        cli::array<System::Reflection::MethodInfo*> *res = (new cli::array<System::Reflection::MethodInfo*>(methods));
        methods = 0;
        if(System::Reflection::MethodInfo::op_Inequality(getter, nullptr)) 
        {
            res->at(methods++) = getter;
        }
        if(System::Reflection::MethodInfo::op_Inequality(setter, nullptr)) 
        {
            res->at(methods) = setter;
        }
        return res;
    }
    
    System::Reflection::MethodInfo* PropertyOnTypeBuilderInst::GetGetMethod_598f563fd3755017(bool nonPublic) {
        System::Reflection::MethodInfo *mi = this->prop->GetGetMethod_598f563fd3755017(nonPublic);
        if((System::Reflection::MethodInfo::op_Inequality(mi, nullptr) && System::Type::op_Equality2(this->prop->get_DeclaringType_6121cd6a84393166(), this->instantiation->generic_type))) 
        {
            mi = TypeBuilder::GetMethod8(this->instantiation, mi);
        }
        return mi;
    }
    
    cli::array<System::Reflection::ParameterInfo*>* PropertyOnTypeBuilderInst::GetIndexParameters_66437e9b713ac629() {
        System::Reflection::MethodInfo *method = GetGetMethod_6968d1fbf893caf2(true);
        if(System::Reflection::MethodInfo::op_Inequality(method, nullptr)) 
        {
            return method->GetParameters_9d17bcb549474c9();
        }
        return (new cli::array<System::Reflection::ParameterInfo*>(0));
    }
    
    System::Reflection::MethodInfo* PropertyOnTypeBuilderInst::GetSetMethod_8896cb22c4f8d900(bool nonPublic) {
        System::Reflection::MethodInfo *mi = this->prop->GetSetMethod_8896cb22c4f8d900(nonPublic);
        if((System::Reflection::MethodInfo::op_Inequality(mi, nullptr) && System::Type::op_Equality2(this->prop->get_DeclaringType_6121cd6a84393166(), this->instantiation->generic_type))) 
        {
            mi = TypeBuilder::GetMethod8(this->instantiation, mi);
        }
        return mi;
    }
    
    System::String* PropertyOnTypeBuilderInst::ToString_1636a0751cb9ac11() {
        return System::String::Format3(_T("{0} {1}"), this->get_PropertyType_68b4b04678fe4f8a(), this->get_Name_50fad5fa936c3ae2());
    }
    
    System::Object* PropertyOnTypeBuilderInst::GetValue_e428a2cef74e332d(System::Object* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void PropertyOnTypeBuilderInst::SetValue_54b056b52d2524f7(System::Object* obj, System::Object* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, cli::array<System::Object*>* index, System::Globalization::CultureInfo* culture) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool PropertyOnTypeBuilderInst::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* PropertyOnTypeBuilderInst::GetCustomAttributes_b790992b66049291(bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Object*>* PropertyOnTypeBuilderInst::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::PropertyAttributes PropertyOnTypeBuilderInst::get_Attributes_44d275d722218b81() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool PropertyOnTypeBuilderInst::get_CanRead_f4dae9b567f6ce33() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool PropertyOnTypeBuilderInst::get_CanWrite_a9c71933951c9826() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Type* PropertyOnTypeBuilderInst::get_PropertyType_68b4b04678fe4f8a() {
        return this->instantiation->InflateType(this->prop->get_PropertyType_68b4b04678fe4f8a());
    }
    
    System::Type* PropertyOnTypeBuilderInst::get_DeclaringType_6121cd6a84393166() {
        return this->instantiation->InflateType(this->prop->get_DeclaringType_6121cd6a84393166());
    }
    
    System::Type* PropertyOnTypeBuilderInst::get_ReflectedType_bf4971c0f442b9dc() {
        return this->instantiation;
    }
    
    System::String* PropertyOnTypeBuilderInst::get_Name_50fad5fa936c3ae2() {
        return this->prop->get_Name_50fad5fa936c3ae2();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void SignatureHelper::constructor(ModuleBuilder* module, SignatureHelperType type) {
        this->type = type;
        this->module = module;
    }
    
    SignatureHelper* SignatureHelper::GetFieldSigHelper(System::Reflection::Module* mod) {
        if((System::Reflection::Module::op_Inequality(mod, nullptr) && !(cli::is<ModuleBuilder>(mod)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("ModuleBuilder is expected"));
        }
        return cli::gcnew<SignatureHelper>(cli::cast<ModuleBuilder*>(mod), SignatureHelperType::HELPER_FIELD);
    }
    
    SignatureHelper* SignatureHelper::GetLocalVarSigHelper(System::Reflection::Module* mod) {
        if((System::Reflection::Module::op_Inequality(mod, nullptr) && !(cli::is<ModuleBuilder>(mod)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("ModuleBuilder is expected"));
        }
        return cli::gcnew<SignatureHelper>(cli::cast<ModuleBuilder*>(mod), SignatureHelperType::HELPER_LOCAL);
    }
    
    SignatureHelper* SignatureHelper::GetLocalVarSigHelper2() {
        return cli::gcnew<SignatureHelper>(nullptr, SignatureHelperType::HELPER_LOCAL);
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper(System::Reflection::CallingConventions callingConvention, System::Type* returnType) {
        return GetMethodSigHelper6(nullptr, callingConvention, (System::Runtime::InteropServices::CallingConvention)0L, returnType, nullptr);
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper2(System::Runtime::InteropServices::CallingConvention unmanagedCallingConvention, System::Type* returnType) {
        return GetMethodSigHelper6(nullptr, System::Reflection::CallingConventions::Standard, unmanagedCallingConvention, returnType, nullptr);
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper3(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Type* returnType) {
        return GetMethodSigHelper6(mod, callingConvention, (System::Runtime::InteropServices::CallingConvention)0L, returnType, nullptr);
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper4(System::Reflection::Module* mod, System::Runtime::InteropServices::CallingConvention unmanagedCallConv, System::Type* returnType) {
        return GetMethodSigHelper6(mod, System::Reflection::CallingConventions::Standard, unmanagedCallConv, returnType, nullptr);
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper5(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return GetMethodSigHelper6(mod, System::Reflection::CallingConventions::Standard, (System::Runtime::InteropServices::CallingConvention)0L, returnType, parameterTypes);
    }
    
    SignatureHelper* SignatureHelper::GetPropertySigHelper(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    SignatureHelper* SignatureHelper::GetPropertySigHelper2(System::Reflection::Module* mod, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    SignatureHelper* SignatureHelper::GetPropertySigHelper3(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* requiredReturnTypeCustomModifiers, cli::array<System::Type*>* optionalReturnTypeCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredParameterTypeCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalParameterTypeCustomModifiers) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t SignatureHelper::AppendArray(cli::array<System::Type*>* array, System::Type* t) {
        if((array != nullptr)) 
        {
            cli::array<System::Type*> *new_a = (new cli::array<System::Type*>((array->get_Length() + 1)));
            System::Array::Copy(array, new_a, array->get_Length());
            new_a->at(array->get_Length()) = t;
            array = new_a;
            return (array->get_Length() - 1);
        }
         else 
        {
            array = (new cli::array<System::Type*>(1));
            array->at(0) = t;
            return 0;
        }
    }
    
    void SignatureHelper::AppendArrayAt(cli::array<cli::array<System::Type*>*>* array, cli::array<System::Type*>* t, int32_t pos) {
        int32_t top = System::Math::Max5(pos, (array ==  nullptr) ? 0 : array->get_Length());
        cli::array<cli::array<System::Type*>*> *new_a = (new cli::array<cli::array<System::Type*>*>((top + 1)));
        if((array != nullptr)) 
        {
            System::Array::Copy(array, new_a, top);
        }
        new_a->at(pos) = t;
        array = new_a;
    }
    
    void SignatureHelper::ValidateParameterModifiers(System::String* name, cli::array<System::Type*>* parameter_modifiers) {
        for(auto tmp_294 : parameter_modifiers) {
            auto modifier = cli::cast<System::Type*>(tmp_294);
            {
                if(System::Type::op_Equality2(modifier, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(name);
                }
                if(modifier->get_IsArray()) 
                {
                    throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Array type not permitted")), name);
                }
                if(modifier->get_ContainsGenericParameters_19598881dd690ad3()) 
                {
                    throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Open Generic Type not permitted")), name);
                }
            }
        }
    }
    
    void SignatureHelper::ValidateCustomModifier(int32_t n, cli::array<cli::array<System::Type*>*>* custom_modifiers, System::String* name) {
        if((custom_modifiers ==  nullptr)) 
        {
            return;
        }
        if((custom_modifiers->get_Length() != n)) 
        {
            throw cli::gcnew<System::ArgumentException>(Locale::GetText(System::String::Format5(_T("Custom modifiers length `{0}\' does not match the size of the arguments"), (new cli::array<System::Object*>({})))));
        }
        for(auto tmp_295 : custom_modifiers) {
            auto parameter_modifiers = cli::cast<cli::array<System::Type*>*>(tmp_295);
            {
                if((parameter_modifiers ==  nullptr)) 
                {
                    continue;
                }
                ValidateParameterModifiers(name, parameter_modifiers);
            }
        }
    }
    
    System::Exception* SignatureHelper::MissingFeature() {
        throw cli::gcnew<System::NotImplementedException>(_T("Mono does not currently support setting modOpt/modReq through SignatureHelper"));
    }
    
    void SignatureHelper::AddArguments(cli::array<System::Type*>* arguments, cli::array<cli::array<System::Type*>*>* requiredCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalCustomModifiers) {
        if((arguments ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("arguments"));
        }
        if(((requiredCustomModifiers != nullptr) || (optionalCustomModifiers != nullptr))) 
        {
            throw MissingFeature();
        }
        ValidateCustomModifier(arguments->get_Length(), requiredCustomModifiers, _T("requiredCustomModifiers"));
        ValidateCustomModifier(arguments->get_Length(), optionalCustomModifiers, _T("optionalCustomModifiers"));
        for(int32_t i = 0; (i < arguments->get_Length()); i++){
            AddArgument2(arguments->at(i), (requiredCustomModifiers != nullptr) ? requiredCustomModifiers->at(i) : nullptr, (optionalCustomModifiers != nullptr) ? optionalCustomModifiers->at(i) : nullptr);
        }
    }
    
    void SignatureHelper::AddArgument(System::Type* argument, bool pinned) {
        AddArgument3(argument);
    }
    
    void SignatureHelper::AddArgument2(System::Type* argument, cli::array<System::Type*>* requiredCustomModifiers, cli::array<System::Type*>* optionalCustomModifiers) {
        if(System::Type::op_Equality2(argument, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("argument"));
        }
        if((requiredCustomModifiers != nullptr)) 
        {
            ValidateParameterModifiers(_T("requiredCustomModifiers"), requiredCustomModifiers);
        }
        if((optionalCustomModifiers != nullptr)) 
        {
            ValidateParameterModifiers(_T("optionalCustomModifiers"), optionalCustomModifiers);
        }
        int32_t p = AppendArray(this->arguments, argument);
        if((requiredCustomModifiers != nullptr)) 
        {
            AppendArrayAt(this->modreqs, requiredCustomModifiers, p);
        }
        if((optionalCustomModifiers != nullptr)) 
        {
            AppendArrayAt(this->modopts, optionalCustomModifiers, p);
        }
    }
    
    void SignatureHelper::AddArgument3(System::Type* clsArgument) {
        if(System::Type::op_Equality2(clsArgument, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("clsArgument"));
        }
        AppendArray(this->arguments, clsArgument);
    }
    
    void SignatureHelper::AddSentinel() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SignatureHelper::CompareOK(cli::array<cli::array<System::Type*>*>* one, cli::array<cli::array<System::Type*>*>* two) {
        if((one ==  nullptr)) 
        {
            if((two ==  nullptr)) 
            {
                return true;
            }
            return false;
        }
         else 
        {
            if((two ==  nullptr)) 
            {
                return false;
            }
        }
        if((one->get_Length() != two->get_Length())) 
        {
            return false;
        }
        for(int32_t i = 0; (i < one->get_Length()); i++){
            cli::array<System::Type*> *tone = one->at(i);
            cli::array<System::Type*> *ttwo = two->at(i);
            if((tone ==  nullptr)) 
            {
                if((ttwo ==  nullptr)) 
                {
                    continue;
                }
            }
             else 
            {
                if((ttwo ==  nullptr)) 
                {
                    return false;
                }
            }
            if((tone->get_Length() != ttwo->get_Length())) 
            {
                return false;
            }
            for(int32_t j = 0; (j < tone->get_Length()); j++){
                System::Type *uone = tone->at(j);
                System::Type *utwo = ttwo->at(j);
                if(System::Type::op_Equality2(uone, nullptr)) 
                {
                    if(System::Type::op_Equality2(utwo, nullptr)) 
                    {
                        continue;
                    }
                    return false;
                }
                 else 
                {
                    if(System::Type::op_Equality2(utwo, nullptr)) 
                    {
                        return false;
                    }
                }
                if(!(uone->Equals_f28141a5881cf9e3(utwo))) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    bool SignatureHelper::Equals_ed975d2f4a7d193e(System::Object* obj) {
        SignatureHelper *other = cli::as<SignatureHelper*>(obj);
        if((other ==  nullptr)) 
        {
            return false;
        }
        if((((System::Reflection::Module::op_Inequality(other->module, this->module) || System::Type::op_Inequality2(other->returnType, this->returnType)) || ((int32_t)(other->callConv) != (int32_t)(this->callConv))) || ((int32_t)(other->unmanagedCallConv) != (int32_t)(this->unmanagedCallConv)))) 
        {
            return false;
        }
        if((this->arguments != nullptr)) 
        {
            if((other->arguments ==  nullptr)) 
            {
                return false;
            }
            if((this->arguments->get_Length() != other->arguments->get_Length())) 
            {
                return false;
            }
            for(int32_t i = 0; (i < this->arguments->get_Length()); i++) {
                if(!(other->arguments->at(i)->Equals_f28141a5881cf9e3(this->arguments->at(i)))) 
                {
                    return false;
                }
            }
        }
         else 
        {
            if((other->arguments != nullptr)) 
            {
                return false;
            }
        }
        return (CompareOK(other->modreqs, this->modreqs) && CompareOK(other->modopts, this->modopts));
    }
    
    int32_t SignatureHelper::GetHashCode_6648aef0f235ee6c() {
        return 0;
    }
    
    cli::array<unsigned char>* SignatureHelper::get_signature_local() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<unsigned char>* SignatureHelper::get_signature_field() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<unsigned char>* SignatureHelper::GetSignature() {
        switch(this->type) {
            case SignatureHelperType::HELPER_LOCAL: case_1260: {
                return get_signature_local();
            }
            case SignatureHelperType::HELPER_FIELD: case_1261: {
                return get_signature_field();
            }
            default: case_1262: {
                throw cli::gcnew<System::NotImplementedException>();
            }
        }
    }
    
    System::String* SignatureHelper::ToString_1636a0751cb9ac11() {
        return _T("SignatureHelper");
    }
    
    SignatureHelper* SignatureHelper::GetMethodSigHelper6(System::Reflection::Module* mod, System::Reflection::CallingConventions callingConvention, System::Runtime::InteropServices::CallingConvention unmanagedCallingConvention, System::Type* returnType, cli::array<System::Type*>* parameters) {
        if((System::Reflection::Module::op_Inequality(mod, nullptr) && !(cli::is<ModuleBuilder>(mod)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("ModuleBuilder is expected"));
        }
        if(System::Type::op_Equality2(returnType, nullptr)) 
        {
            returnType = cli::typeof<System::Type>::info;
        }
        if(returnType->get_IsUserType()) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("User defined subclasses of System.Type are not yet supported."));
        }
        if((parameters != nullptr)) 
        {
            for(int32_t i = 0; (i < parameters->get_Length()); ++i) {
                if(parameters->at(i)->get_IsUserType()) 
                {
                    throw cli::gcnew<System::NotSupportedException>(_T("User defined subclasses of System.Type are not yet supported."));
                }
            }
        }
        SignatureHelper *helper = cli::gcnew<SignatureHelper>(cli::cast<ModuleBuilder*>(mod), SignatureHelperType::HELPER_METHOD);
        helper->returnType = returnType;
        helper->callConv = callingConvention;
        helper->unmanagedCallConv = unmanagedCallingConvention;
        if((parameters != nullptr)) 
        {
            helper->arguments = (new cli::array<System::Type*>(parameters->get_Length()));
            for(int32_t i = 0; (i < parameters->get_Length()); ++i) {
                helper->arguments->at(i) = parameters->at(i);
            }
        }
        return helper;
    }
    
    void SignatureHelper::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SignatureHelper::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SignatureHelper::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SignatureHelper::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void TypeBuilder::constructor(ModuleBuilder* mb, System::Reflection::TypeAttributes attr, int32_t table_idx) {
        this->parent = nullptr;
        this->attrs = attr;
        this->class_size = 0;
        this->table_idx = table_idx;
        this->fullname = this->tname = (table_idx ==  1) ? _T("<Module>") : cli::concat(_T("type_"), cli::import(table_idx)->ToString_1636a0751cb9ac11());
        this->nspace = System::String::Empty;
        this->pmodule = mb;
        setup_internal_class(this);
    }
    
    void TypeBuilder::constructor(ModuleBuilder* mb, System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packing_size, int32_t type_size, System::Type* nesting_type) {
        int32_t sep_index;
        this->parent = parent;
        this->attrs = attr;
        this->class_size = type_size;
        this->packing_size = packing_size;
        this->nesting_type = nesting_type;
        check_name(_T("fullname"), name);
        if(((System::Type::op_Equality2(parent, nullptr) && ((int32_t)(((int32_t)(attr) & 32)) != 0)) && ((int32_t)(((int32_t)(attr) & 128)) ==  0))) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Interface must be declared abstract."));
        }
        sep_index = name->LastIndexOf4(u'.');
        if((sep_index != -1)) 
        {
            this->tname = name->Substring((sep_index + 1));
            this->nspace = name->Substring2(0, sep_index);
        }
         else 
        {
            this->tname = name;
            this->nspace = System::String::Empty;
        }
        if((interfaces != nullptr)) 
        {
            this->interfaces = (new cli::array<System::Type*>(interfaces->get_Length()));
            System::Array::Copy(interfaces, this->interfaces, interfaces->get_Length());
        }
        this->pmodule = mb;
        if((((int32_t)(((int32_t)(attr) & 32)) ==  0) && System::Type::op_Equality2(parent, nullptr))) 
        {
            this->parent = cli::typeof<System::Type>::info;
        }
        this->table_idx = mb->get_next_table_index(this, 2, true);
        setup_internal_class(this);
        this->fullname = GetFullName();
    }
    
    System::Reflection::TypeAttributes TypeBuilder::GetAttributeFlagsImpl_ea77781598cb234a() {
        return this->attrs;
    }
    
    void TypeBuilder::setup_internal_class(TypeBuilder* tb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::create_internal_class(TypeBuilder* tb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::setup_generic_class() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::create_generic_class() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::EventInfo* TypeBuilder::get_event_info(EventBuilder* eb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool TypeBuilder::IsSubclassOf_5d7dbe0215a30fda(System::Type* c) {
        System::Type *t;
        if(System::Type::op_Equality2(c, nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Equality2(c, this)) 
        {
            return false;
        }
        t = this->parent;
        while(System::Type::op_Inequality2(t, nullptr)) {
            if(System::Type::op_Equality2(c, t)) 
            {
                return true;
            }
            t = t->get_BaseType_6a0646ae880055f6();
        }
        return false;
    }
    
    System::String* TypeBuilder::GetFullName() {
        if(System::Type::op_Inequality2(this->nesting_type, nullptr)) 
        {
            return System::String::Concat6(this->nesting_type->get_FullName_7e8fa72ba225e1a4(), _T("+"), this->tname);
        }
        if(((this->nspace != nullptr) && (this->nspace->get_Length() > 0))) 
        {
            return System::String::Concat6(this->nspace, _T("."), this->tname);
        }
        return this->tname;
    }
    
    void TypeBuilder::AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet* pset) {
        if((pset ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("pset"));
        }
        if(((((int32_t)(action) ==  8) || ((int32_t)(action) ==  9)) || ((int32_t)(action) ==  10))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("Request* values are not permitted"), _T("action"));
        }
        check_not_created();
        if((this->permissions != nullptr)) 
        {
            for(auto tmp_296 : this->permissions) {
                auto set = cli::cast<RefEmitPermissionSet>(tmp_296);
                if(((int32_t)(set->action) ==  (int32_t)(action))) 
                {
                    throw cli::gcnew<System::InvalidOperationException>(_T("Multiple permission sets specified with the same SecurityAction."));
                }
            }
            cli::array<RefEmitPermissionSet> *new_array = (new cli::array<RefEmitPermissionSet>((this->permissions->get_Length() + 1)));
            cli::import(this->permissions)->CopyTo(new_array, 0);
            this->permissions = new_array;
        }
         else 
        {
            this->permissions = (new cli::array<RefEmitPermissionSet>(1));
        }
        this->permissions->at((this->permissions->get_Length() - 1)) = cli::ctor<RefEmitPermissionSet>(action, pset->ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11());
        (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 262144)));
    }
    
    void TypeBuilder::AddInterfaceImplementation(System::Type* interfaceType) {
        if(System::Type::op_Equality2(interfaceType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("interfaceType"));
        }
        check_not_created();
        if((this->interfaces != nullptr)) 
        {
            for(auto tmp_297 : this->interfaces) {
                auto t = cli::cast<System::Type*>(tmp_297);
                if(System::Type::op_Equality2(t, interfaceType)) 
                {
                    return;
                }
            }
            cli::array<System::Type*> *ifnew = (new cli::array<System::Type*>((this->interfaces->get_Length() + 1)));
            cli::import(this->interfaces)->CopyTo(ifnew, 0);
            ifnew->at(this->interfaces->get_Length()) = interfaceType;
            this->interfaces = ifnew;
        }
         else 
        {
            this->interfaces = (new cli::array<System::Type*>(1));
            this->interfaces->at(0) = interfaceType;
        }
    }
    
    System::Reflection::ConstructorInfo* TypeBuilder::GetConstructorImpl_a21b5d13a475afe1(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        check_created();
        if(System::Type::op_Equality2(this->created, cli::typeof<System::Type>::info)) 
        {
            if((this->ctors ==  nullptr)) 
            {
                return nullptr;
            }
            ConstructorBuilder *found = nullptr;
            int32_t count = 0;
            for(auto tmp_298 : this->ctors) {
                auto cb = cli::cast<ConstructorBuilder*>(tmp_298);
                {
                    if((((int32_t)(callConvention) != 3) && ((int32_t)(cb->get_CallingConvention_309cf574b58a053a()) != (int32_t)(callConvention)))) 
                    {
                        continue;
                    }
                    found = cb;
                    count++;
                }
            }
            if((count ==  0)) 
            {
                return nullptr;
            }
            if((types ==  nullptr)) 
            {
                if((count > 1)) 
                {
                    throw cli::gcnew<System::Reflection::AmbiguousMatchException>();
                }
                return found;
            }
            cli::array<System::Reflection::MethodBase*> *match = (new cli::array<System::Reflection::MethodBase*>(count));
            if((count ==  1)) 
            {
                match->at(0) = found;
            }
             else 
            {
                count = 0;
                for(auto tmp_299 : this->ctors) {
                    auto m = cli::cast<System::Reflection::ConstructorInfo*>(tmp_299);
                    {
                        if((((int32_t)(callConvention) != 3) && ((int32_t)(m->get_CallingConvention_309cf574b58a053a()) != (int32_t)(callConvention)))) 
                        {
                            continue;
                        }
                        match->at(count++) = m;
                    }
                }
            }
            if((binder ==  nullptr)) 
            {
                binder = System::Reflection::Binder::get_DefaultBinder();
            }
            return cli::cast<System::Reflection::ConstructorInfo*>(binder->SelectMethod_3e1ca0f0e362534f(bindingAttr, match, types, modifiers));
        }
        return this->created->GetConstructor4(bindingAttr, binder, callConvention, types, modifiers);
    }
    
    bool TypeBuilder::IsDefined_91943a8ac363f11f(System::Type* attributeType, bool inherit) {
        if(!(this->get_is_created())) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        return System::MonoCustomAttrs::IsDefined(this, attributeType, inherit);
    }
    
    cli::array<System::Object*>* TypeBuilder::GetCustomAttributes_b790992b66049291(bool inherit) {
        check_created();
        return this->created->GetCustomAttributes_b790992b66049291(inherit);
    }
    
    cli::array<System::Object*>* TypeBuilder::GetCustomAttributes_90419687cfa65ef7(System::Type* attributeType, bool inherit) {
        check_created();
        return this->created->GetCustomAttributes_90419687cfa65ef7(attributeType, inherit);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType(System::String* name) {
        return DefineNestedType5(name, System::Reflection::TypeAttributes::NestedPrivate, this->pmodule->assemblyb->corlib_object_type, nullptr);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType2(System::String* name, System::Reflection::TypeAttributes attr) {
        return DefineNestedType5(name, attr, this->pmodule->assemblyb->corlib_object_type, nullptr);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType3(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent) {
        return DefineNestedType5(name, attr, parent, nullptr);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType4(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces, PackingSize packSize, int32_t typeSize) {
        if((interfaces != nullptr)) 
        {
            for(auto tmp_300 : interfaces) {
                auto iface = cli::cast<System::Type*>(tmp_300);
                if(System::Type::op_Equality2(iface, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(_T("interfaces"));
                }
            }
        }
        TypeBuilder *res = cli::gcnew<TypeBuilder>(this->pmodule, name, attr, parent, interfaces, packSize, typeSize, this);
        res->fullname = res->GetFullName();
        this->pmodule->RegisterTypeName(res, res->fullname);
        if((this->subtypes != nullptr)) 
        {
            cli::array<TypeBuilder*> *new_types = (new cli::array<TypeBuilder*>((this->subtypes->get_Length() + 1)));
            System::Array::Copy(this->subtypes, new_types, this->subtypes->get_Length());
            new_types->at(this->subtypes->get_Length()) = res;
            this->subtypes = new_types;
        }
         else 
        {
            this->subtypes = (new cli::array<TypeBuilder*>(1));
            this->subtypes->at(0) = res;
        }
        return res;
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType5(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, cli::array<System::Type*>* interfaces) {
        return DefineNestedType4(name, attr, parent, interfaces, PackingSize::Unspecified, 0);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType6(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, int32_t typeSize) {
        return DefineNestedType4(name, attr, parent, nullptr, PackingSize::Unspecified, typeSize);
    }
    
    TypeBuilder* TypeBuilder::DefineNestedType7(System::String* name, System::Reflection::TypeAttributes attr, System::Type* parent, PackingSize packSize) {
        return DefineNestedType4(name, attr, parent, nullptr, packSize, 0);
    }
    
    ConstructorBuilder* TypeBuilder::DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes) {
        return DefineConstructor2(attributes, callingConvention, parameterTypes, nullptr, nullptr);
    }
    
    ConstructorBuilder* TypeBuilder::DefineConstructor2(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* requiredCustomModifiers, cli::array<cli::array<System::Type*>*>* optionalCustomModifiers) {
        check_not_created();
        ConstructorBuilder *cb = cli::gcnew<ConstructorBuilder>(this, attributes, callingConvention, parameterTypes, requiredCustomModifiers, optionalCustomModifiers);
        if((this->ctors != nullptr)) 
        {
            cli::array<ConstructorBuilder*> *new_ctors = (new cli::array<ConstructorBuilder*>((this->ctors->get_Length() + 1)));
            System::Array::Copy(this->ctors, new_ctors, this->ctors->get_Length());
            new_ctors->at(this->ctors->get_Length()) = cb;
            this->ctors = new_ctors;
        }
         else 
        {
            this->ctors = (new cli::array<ConstructorBuilder*>(1));
            this->ctors->at(0) = cb;
        }
        return cb;
    }
    
    ConstructorBuilder* TypeBuilder::DefineDefaultConstructor(System::Reflection::MethodAttributes attributes) {
        System::Type *parent_type, *old_parent_type;
        if(System::Type::op_Inequality2(this->parent, nullptr)) 
        {
            parent_type = this->parent;
        }
         else 
        {
            parent_type = this->pmodule->assemblyb->corlib_object_type;
        }
        old_parent_type = parent_type;
        parent_type = parent_type->InternalResolve_ba2e81f73f0d7994();
        if((System::Type::op_Equality2(parent_type, cli::typeof<System::Type>::info) || System::Type::op_Equality2(parent_type, cli::typeof<System::Type>::info))) 
        {
            parent_type = old_parent_type;
        }
        System::Reflection::ConstructorInfo *parent_constructor = parent_type->GetConstructor3((System::Reflection::BindingFlags)52L, nullptr, System::Type::EmptyTypes, nullptr);
        if(System::Reflection::ConstructorInfo::op_Equality(parent_constructor, nullptr)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Parent does not have a default constructor. The default constructor must be explicitly defined."));
        }
        ConstructorBuilder *cb = DefineConstructor(attributes, System::Reflection::CallingConventions::Standard, System::Type::EmptyTypes);
        ILGenerator *ig = cb->GetILGenerator();
        ig->Emit_6b1c52a4d677ebc8(OpCodes::Ldarg_0);
        ig->Emit_9658065e57c01583(OpCodes::Call, parent_constructor);
        ig->Emit_6b1c52a4d677ebc8(OpCodes::Ret);
        return cb;
    }
    
    void TypeBuilder::append_method(MethodBuilder* mb) {
        if((this->methods != nullptr)) 
        {
            if((this->methods->get_Length() ==  this->num_methods)) 
            {
                cli::array<MethodBuilder*> *new_methods = (new cli::array<MethodBuilder*>((this->methods->get_Length() * 2)));
                System::Array::Copy(this->methods, new_methods, this->num_methods);
                this->methods = new_methods;
            }
        }
         else 
        {
            this->methods = (new cli::array<MethodBuilder*>(1));
        }
        this->methods->at(this->num_methods) = mb;
        this->num_methods++;
    }
    
    MethodBuilder* TypeBuilder::DefineMethod(System::String* name, System::Reflection::MethodAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineMethod2(name, attributes, System::Reflection::CallingConventions::Standard, returnType, parameterTypes);
    }
    
    MethodBuilder* TypeBuilder::DefineMethod2(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineMethod3(name, attributes, callingConvention, returnType, nullptr, nullptr, parameterTypes, nullptr, nullptr);
    }
    
    MethodBuilder* TypeBuilder::DefineMethod3(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers) {
        check_name(_T("name"), name);
        check_not_created();
        if(((this->get_IsInterface() && (!(((int32_t)(((int32_t)(attributes) & 1024)) != 0)) || !(((int32_t)(((int32_t)(attributes) & 64)) != 0)))) && !(((int32_t)(((int32_t)(attributes) & 16)) != 0)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Interface method must be abstract and virtual."));
        }
        if(System::Type::op_Equality2(returnType, nullptr)) 
        {
            returnType = this->pmodule->assemblyb->corlib_void_type;
        }
        MethodBuilder *res = cli::gcnew<MethodBuilder>(this, name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
        append_method(res);
        return res;
    }
    
    MethodBuilder* TypeBuilder::DefinePInvokeMethod(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet) {
        return DefinePInvokeMethod2(name, dllName, entryName, attributes, callingConvention, returnType, nullptr, nullptr, parameterTypes, nullptr, nullptr, nativeCallConv, nativeCharSet);
    }
    
    MethodBuilder* TypeBuilder::DefinePInvokeMethod2(System::String* name, System::String* dllName, System::String* entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet) {
        check_name(_T("name"), name);
        check_name(_T("dllName"), dllName);
        check_name(_T("entryName"), entryName);
        if(((int32_t)(((int32_t)(attributes) & 1024)) != 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("PInvoke methods must be static and native and cannot be abstract."));
        }
        if(this->get_IsInterface()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("PInvoke methods cannot exist on interfaces."));
        }
        check_not_created();
        MethodBuilder *res = cli::gcnew<MethodBuilder>(this, name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers, dllName, entryName, nativeCallConv, nativeCharSet);
        append_method(res);
        return res;
    }
    
    MethodBuilder* TypeBuilder::DefinePInvokeMethod3(System::String* name, System::String* dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet) {
        return DefinePInvokeMethod(name, dllName, name, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet);
    }
    
    MethodBuilder* TypeBuilder::DefineMethod4(System::String* name, System::Reflection::MethodAttributes attributes) {
        return DefineMethod5(name, attributes, System::Reflection::CallingConventions::Standard);
    }
    
    MethodBuilder* TypeBuilder::DefineMethod5(System::String* name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention) {
        return DefineMethod2(name, attributes, callingConvention, nullptr, nullptr);
    }
    
    void TypeBuilder::DefineMethodOverride(System::Reflection::MethodInfo* methodInfoBody, System::Reflection::MethodInfo* methodInfoDeclaration) {
        if(System::Reflection::MethodInfo::op_Equality(methodInfoBody, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("methodInfoBody"));
        }
        if(System::Reflection::MethodInfo::op_Equality(methodInfoDeclaration, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("methodInfoDeclaration"));
        }
        check_not_created();
        if(System::Type::op_Inequality2(methodInfoBody->get_DeclaringType_6121cd6a84393166(), this)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("method body must belong to this type"));
        }
        if(cli::is<MethodBuilder>(methodInfoBody)) 
        {
            MethodBuilder *mb = cli::cast<MethodBuilder*>(methodInfoBody);
            mb->set_override(methodInfoDeclaration);
        }
    }
    
    FieldBuilder* TypeBuilder::DefineField(System::String* fieldName, System::Type* type, System::Reflection::FieldAttributes attributes) {
        return DefineField2(fieldName, type, nullptr, nullptr, attributes);
    }
    
    FieldBuilder* TypeBuilder::DefineField2(System::String* fieldName, System::Type* type, cli::array<System::Type*>* requiredCustomModifiers, cli::array<System::Type*>* optionalCustomModifiers, System::Reflection::FieldAttributes attributes) {
        check_name(_T("fieldName"), fieldName);
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Bad field type in defining field."));
        }
        check_not_created();
        FieldBuilder *res = cli::gcnew<FieldBuilder>(this, fieldName, type, attributes, requiredCustomModifiers, optionalCustomModifiers);
        if((this->fields != nullptr)) 
        {
            if((this->fields->get_Length() ==  this->num_fields)) 
            {
                cli::array<FieldBuilder*> *new_fields = (new cli::array<FieldBuilder*>((this->fields->get_Length() * 2)));
                System::Array::Copy(this->fields, new_fields, this->num_fields);
                this->fields = new_fields;
            }
            this->fields->at(this->num_fields) = res;
            this->num_fields++;
        }
         else 
        {
            this->fields = (new cli::array<FieldBuilder*>(1));
            this->fields->at(0) = res;
            this->num_fields++;
            create_internal_class(this);
        }
        if(this->get_IsEnum_bc85ea7b0a749db()) 
        {
            if((System::Type::op_Equality2(this->underlying_type, nullptr) && ((int32_t)(((int32_t)(attributes) & 16)) ==  0))) 
            {
                this->underlying_type = type;
            }
        }
        return res;
    }
    
    PropertyBuilder* TypeBuilder::DefineProperty(System::String* name, System::Reflection::PropertyAttributes attributes, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineProperty4(name, attributes, (System::Reflection::CallingConventions)0L, returnType, nullptr, nullptr, parameterTypes, nullptr, nullptr);
    }
    
    PropertyBuilder* TypeBuilder::DefineProperty2(System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* parameterTypes) {
        return DefineProperty4(name, attributes, callingConvention, returnType, nullptr, nullptr, parameterTypes, nullptr, nullptr);
    }
    
    PropertyBuilder* TypeBuilder::DefineProperty3(System::String* name, System::Reflection::PropertyAttributes attributes, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers) {
        return DefineProperty4(name, attributes, (System::Reflection::CallingConventions)0L, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
    }
    
    PropertyBuilder* TypeBuilder::DefineProperty4(System::String* name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, System::Type* returnType, cli::array<System::Type*>* returnTypeRequiredCustomModifiers, cli::array<System::Type*>* returnTypeOptionalCustomModifiers, cli::array<System::Type*>* parameterTypes, cli::array<cli::array<System::Type*>*>* parameterTypeRequiredCustomModifiers, cli::array<cli::array<System::Type*>*>* parameterTypeOptionalCustomModifiers) {
        check_name(_T("name"), name);
        if((parameterTypes != nullptr)) 
        {
            for(auto tmp_301 : parameterTypes) {
                auto param = cli::cast<System::Type*>(tmp_301);
                if(System::Type::op_Equality2(param, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(_T("parameterTypes"));
                }
            }
        }
        check_not_created();
        PropertyBuilder *res = cli::gcnew<PropertyBuilder>(this, name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
        if((this->properties != nullptr)) 
        {
            System::Array::template Resize_1<PropertyBuilder*>(this->properties, (this->properties->get_Length() + 1));
            this->properties->at((this->properties->get_Length() - 1)) = res;
        }
         else 
        {
            this->properties = (new cli::array<PropertyBuilder*>({res}));
        }
        return res;
    }
    
    ConstructorBuilder* TypeBuilder::DefineTypeInitializer() {
        return DefineConstructor((System::Reflection::MethodAttributes)6166L, System::Reflection::CallingConventions::Standard, nullptr);
    }
    
    System::Type* TypeBuilder::create_runtime_class(TypeBuilder* tb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool TypeBuilder::is_nested_in(System::Type* t) {
        while(System::Type::op_Inequality2(t, nullptr)) {
            if(System::Type::op_Equality2(t, this)) 
            {
                return true;
            }
             else 
            {
                t = t->get_DeclaringType_6121cd6a84393166();
            }
        }
        return false;
    }
    
    bool TypeBuilder::has_ctor_method() {
        System::Reflection::MethodAttributes ctor_attrs = (System::Reflection::MethodAttributes)6144L;
        for(int32_t i = 0; (i < this->num_methods); ++i){
            MethodBuilder *mb = cli::cast<MethodBuilder*>(this->methods->at(i));
            if((System::String::op_Equality(mb->get_Name_50fad5fa936c3ae2(), System::Reflection::ConstructorInfo::ConstructorName) && ((int32_t)(((int32_t)(mb->get_Attributes_b3976e6a55c088be()) & (int32_t)(ctor_attrs))) ==  (int32_t)(ctor_attrs)))) 
            {
                return true;
            }
        }
        return false;
    }
    
    System::Type* TypeBuilder::CreateType() {
        if(this->createTypeCalled) 
        {
            return this->created;
        }
        if((((!(this->get_IsInterface()) && System::Type::op_Equality2(this->parent, nullptr)) && System::Type::op_Inequality2(this, this->pmodule->assemblyb->corlib_object_type)) && System::String::op_Inequality(this->get_FullName_7e8fa72ba225e1a4(), _T("<Module>")))) 
        {
            SetParent(this->pmodule->assemblyb->corlib_object_type);
        }
        create_generic_class();
        if((this->fields != nullptr)) 
        {
            for(auto tmp_302 : this->fields) {
                auto fb = cli::cast<FieldBuilder*>(tmp_302);
                {
                    if(System::Reflection::FieldInfo::op_Equality2(fb, nullptr)) 
                    {
                        continue;
                    }
                    System::Type *ft = fb->get_FieldType_1dab4079098d7fff();
                    if(((((!(fb->get_IsStatic()) && cli::is<TypeBuilder>(ft)) && ft->get_IsValueType()) && System::Type::op_Inequality2(ft, this)) && is_nested_in(ft))) 
                    {
                        TypeBuilder *tb = cli::cast<TypeBuilder*>(ft);
                        if(!(tb->get_is_created())) 
                        {
                            System::AppDomain::get_CurrentDomain()->DoTypeResolve(tb);
                            if(!(tb->get_is_created())) 
                            {
                            }
                        }
                    }
                }
            }
        }
        if(((((!((this->get_IsInterface() || this->get_IsValueType())) && (this->ctors ==  nullptr)) && System::String::op_Inequality(this->tname, _T("<Module>"))) && ((int32_t)(((int32_t)(((int32_t)(TypeBuilder::GetAttributeFlagsImpl_ea77781598cb234a()) & 128)) | 256)) != 384)) && !(has_ctor_method()))) 
        {
            DefineDefaultConstructor(System::Reflection::MethodAttributes::Public);
        }
        this->createTypeCalled = true;
        if((System::Type::op_Inequality2(this->parent, nullptr) && this->parent->get_IsSealed())) 
        {
            throw cli::gcnew<System::TypeLoadException>(cli::concat(_T("Could not load type \'"), this->get_FullName_7e8fa72ba225e1a4(), _T("\' from assembly \'"), this->get_Assembly_3aae0acbf2a6d696(), _T("\' because the parent type is sealed.")));
        }
        if((System::Type::op_Equality2(this->parent, this->pmodule->assemblyb->corlib_enum_type) && (this->methods != nullptr))) 
        {
            throw cli::gcnew<System::TypeLoadException>(cli::concat(_T("Could not load type \'"), this->get_FullName_7e8fa72ba225e1a4(), _T("\' from assembly \'"), this->get_Assembly_3aae0acbf2a6d696(), _T("\' because it is an enum with methods.")));
        }
        if((this->methods != nullptr)) 
        {
            bool is_concrete = !(this->get_IsAbstract());
            for(int32_t i = 0; (i < this->num_methods); ++i){
                MethodBuilder *mb = cli::cast<MethodBuilder*>(this->methods->at(i));
                if((is_concrete && mb->get_IsAbstract())) 
                {
                    throw cli::gcnew<System::InvalidOperationException>(cli::concat(_T("Type is concrete but has abstract method "), mb));
                }
                mb->check_override();
                mb->fixup();
            }
        }
        if((this->ctors != nullptr)) 
        {
            for(auto tmp_303 : this->ctors) {
                auto ctor = cli::cast<ConstructorBuilder*>(tmp_303);
                ctor->fixup();
            }
        }
        this->created = create_runtime_class(this);
        if(System::Type::op_Inequality2(this->created, nullptr)) 
        {
            return this->created;
        }
        return this;
    }
    
    void TypeBuilder::GenerateDebugInfo(System::Diagnostics::SymbolStore::ISymbolWriter* symbolWriter) {
        symbolWriter->OpenNamespace_6bf6b9bb45e33142(this->get_Namespace_cb4ed37007083e7f());
        if((this->methods != nullptr)) 
        {
            for(int32_t i = 0; (i < this->num_methods); ++i){
                MethodBuilder *metb = cli::cast<MethodBuilder*>(this->methods->at(i));
                metb->GenerateDebugInfo(symbolWriter);
            }
        }
        if((this->ctors != nullptr)) 
        {
            for(auto tmp_304 : this->ctors) {
                auto ctor = cli::cast<ConstructorBuilder*>(tmp_304);
                ctor->GenerateDebugInfo(symbolWriter);
            }
        }
        symbolWriter->CloseNamespace_5aa5845b278a0d2a();
        if((this->subtypes != nullptr)) 
        {
            for(int32_t i = 0; (i < this->subtypes->get_Length()); ++i) {
                this->subtypes->at(i)->GenerateDebugInfo(symbolWriter);
            }
        }
    }
    
    cli::array<System::Reflection::ConstructorInfo*>* TypeBuilder::GetConstructors_736b6e990b94b352(System::Reflection::BindingFlags bindingAttr) {
        if(this->get_is_created()) 
        {
            return this->created->GetConstructors_736b6e990b94b352(bindingAttr);
        }
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::ConstructorInfo*>* TypeBuilder::GetConstructorsInternal(System::Reflection::BindingFlags bindingAttr) {
        if((this->ctors ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::ConstructorInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        System::Reflection::MethodAttributes mattrs;
        for(auto tmp_305 : this->ctors) {
            auto c = cli::cast<ConstructorBuilder*>(tmp_305);
            {
                match = false;
                mattrs = c->get_Attributes_b3976e6a55c088be();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(c);
            }
        }
        cli::array<System::Reflection::ConstructorInfo*> *result = (new cli::array<System::Reflection::ConstructorInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    System::Type* TypeBuilder::GetElementType_ab5070dbbfe66f5f() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Reflection::EventInfo* TypeBuilder::GetEvent_7f053fa54114e387(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        check_created();
        return this->created->GetEvent_7f053fa54114e387(name, bindingAttr);
    }
    
    cli::array<System::Reflection::EventInfo*>* TypeBuilder::GetEvents_e6858c959b77de38() {
        return GetEvents_3631c7eff1e31bf4((System::Reflection::BindingFlags)28L);
    }
    
    cli::array<System::Reflection::EventInfo*>* TypeBuilder::GetEvents_a960b087e4d67be2(System::Reflection::BindingFlags bindingAttr) {
        if(this->get_is_created()) 
        {
            return this->created->GetEvents_a960b087e4d67be2(bindingAttr);
        }
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    cli::array<System::Reflection::EventInfo*>* TypeBuilder::GetEvents_internal(System::Reflection::BindingFlags bindingAttr) {
        if((this->events ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::EventInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        System::Reflection::MethodAttributes mattrs;
        System::Reflection::MethodInfo *accessor;
        for(auto tmp_306 : this->events) {
            auto eb = cli::cast<EventBuilder*>(tmp_306);
            {
                if((eb ==  nullptr)) 
                {
                    continue;
                }
                System::Reflection::EventInfo *c = get_event_info(eb);
                match = false;
                accessor = c->GetAddMethod_e6ed2f5f0e24f59f(true);
                if(System::Reflection::MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    accessor = c->GetRemoveMethod_2709ba07e73fded4(true);
                }
                if(System::Reflection::MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    continue;
                }
                mattrs = accessor->get_Attributes_b3976e6a55c088be();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(c);
            }
        }
        cli::array<System::Reflection::EventInfo*> *result = (new cli::array<System::Reflection::EventInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    System::Reflection::FieldInfo* TypeBuilder::GetField_fb08cba9d1a4bc84(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        if(System::Type::op_Inequality2(this->created, nullptr)) 
        {
            return this->created->GetField_fb08cba9d1a4bc84(name, bindingAttr);
        }
        if((this->fields ==  nullptr)) 
        {
            return nullptr;
        }
        bool match;
        System::Reflection::FieldAttributes mattrs;
        for(auto tmp_307 : this->fields) {
            auto c = cli::cast<System::Reflection::FieldInfo*>(tmp_307);
            {
                if(System::Reflection::FieldInfo::op_Equality2(c, nullptr)) 
                {
                    continue;
                }
                if(System::String::op_Inequality(c->get_Name_50fad5fa936c3ae2(), name)) 
                {
                    continue;
                }
                match = false;
                mattrs = c->get_Attributes_ecc2fe2071b9c047();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                return c;
            }
        }
        return nullptr;
    }
    
    cli::array<System::Reflection::FieldInfo*>* TypeBuilder::GetFields_369be5ac49d99f8(System::Reflection::BindingFlags bindingAttr) {
        if(System::Type::op_Inequality2(this->created, nullptr)) 
        {
            return this->created->GetFields_369be5ac49d99f8(bindingAttr);
        }
        if((this->fields ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::FieldInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        System::Reflection::FieldAttributes mattrs;
        for(auto tmp_308 : this->fields) {
            auto c = cli::cast<System::Reflection::FieldInfo*>(tmp_308);
            {
                if(System::Reflection::FieldInfo::op_Equality2(c, nullptr)) 
                {
                    continue;
                }
                match = false;
                mattrs = c->get_Attributes_ecc2fe2071b9c047();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(c);
            }
        }
        cli::array<System::Reflection::FieldInfo*> *result = (new cli::array<System::Reflection::FieldInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    System::Type* TypeBuilder::GetInterface_55c1d0ec3ece6104(System::String* name, bool ignoreCase) {
        check_created();
        return this->created->GetInterface_55c1d0ec3ece6104(name, ignoreCase);
    }
    
    cli::array<System::Type*>* TypeBuilder::GetInterfaces_52a89380e2c4a725() {
        if(this->get_is_created()) 
        {
            return this->created->GetInterfaces_52a89380e2c4a725();
        }
        if((this->interfaces != nullptr)) 
        {
            cli::array<System::Type*> *ret = (new cli::array<System::Type*>(this->interfaces->get_Length()));
            cli::import(this->interfaces)->CopyTo(ret, 0);
            return ret;
        }
         else 
        {
            return System::Type::EmptyTypes;
        }
    }
    
    cli::array<System::Reflection::MemberInfo*>* TypeBuilder::GetMember_9c934e7384b805e1(System::String* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr) {
        check_created();
        return this->created->GetMember_9c934e7384b805e1(name, type, bindingAttr);
    }
    
    cli::array<System::Reflection::MemberInfo*>* TypeBuilder::GetMembers_54432b0ff6e99174(System::Reflection::BindingFlags bindingAttr) {
        check_created();
        return this->created->GetMembers_54432b0ff6e99174(bindingAttr);
    }
    
    cli::array<System::Reflection::MethodInfo*>* TypeBuilder::GetMethodsByName(System::String* name, System::Reflection::BindingFlags bindingAttr, bool ignoreCase, System::Type* reflected_type) {
        cli::array<System::Reflection::MethodInfo*> *candidates;
        bool match;
        System::Reflection::MethodAttributes mattrs;
        if((((int32_t)(((int32_t)(bindingAttr) & 2)) ==  0) && System::Type::op_Inequality2(this->parent, nullptr))) 
        {
            cli::array<System::Reflection::MethodInfo*> *parent_methods = this->parent->GetMethods_c5b4e5d4877e6672(bindingAttr);
            System::Collections::ArrayList *parent_candidates = cli::gcnew<System::Collections::ArrayList>(parent_methods->get_Length());
            bool flatten = ((int32_t)(((int32_t)(bindingAttr) & 64)) != 0);
            for(int32_t i = 0; (i < parent_methods->get_Length()); i++){
                System::Reflection::MethodInfo *m = parent_methods->at(i);
                mattrs = m->get_Attributes_b3976e6a55c088be();
                if((m->get_IsStatic() && !(flatten))) 
                {
                    continue;
                }
                switch((System::Reflection::MethodAttributes)(((int32_t)(mattrs) & 7))) {
                    case System::Reflection::MethodAttributes::Public: case_1263: {
                        match = ((int32_t)(((int32_t)(bindingAttr) & 16)) != 0);
                        break;
                    }
                    case System::Reflection::MethodAttributes::Assembly2: case_1264: {
                        match = ((int32_t)(((int32_t)(bindingAttr) & 32)) != 0);
                        break;
                    }
                    case System::Reflection::MethodAttributes::Private: case_1265: {
                        match = false;
                        break;
                    }
                    default: case_1266: {
                        match = ((int32_t)(((int32_t)(bindingAttr) & 32)) != 0);
                        break;
                    }
                }
                if(match) 
                {
                    parent_candidates->Add_e6a92085999ce388(m);
                }
            }
            if((this->methods ==  nullptr)) 
            {
                candidates = (new cli::array<System::Reflection::MethodInfo*>(parent_candidates->get_Count_2354963792616712()));
                parent_candidates->CopyTo_c634d425a65b1fc3(candidates);
            }
             else 
            {
                candidates = (new cli::array<System::Reflection::MethodInfo*>((this->methods->get_Length() + parent_candidates->get_Count_2354963792616712())));
                parent_candidates->CopyTo_2bc540dad3c25b9e(candidates, 0);
                cli::import(this->methods)->CopyTo(candidates, parent_candidates->get_Count_2354963792616712());
            }
        }
         else 
        {
            candidates = this->methods->template CovariantCast<System::Reflection::MethodInfo*>();
        }
        if((candidates ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::MethodInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        for(auto tmp_309 : candidates) {
            auto c = cli::cast<System::Reflection::MethodInfo*>(tmp_309);
            {
                if(System::Reflection::MethodInfo::op_Equality(c, nullptr)) 
                {
                    continue;
                }
                if((name != nullptr)) 
                {
                    if((System::String::Compare2(c->get_Name_50fad5fa936c3ae2(), name, ignoreCase) != 0)) 
                    {
                        continue;
                    }
                }
                match = false;
                mattrs = c->get_Attributes_b3976e6a55c088be();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(c);
            }
        }
        cli::array<System::Reflection::MethodInfo*> *result = (new cli::array<System::Reflection::MethodInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    cli::array<System::Reflection::MethodInfo*>* TypeBuilder::GetMethods_c5b4e5d4877e6672(System::Reflection::BindingFlags bindingAttr) {
        return GetMethodsByName(nullptr, bindingAttr, false, this);
    }
    
    System::Reflection::MethodInfo* TypeBuilder::GetMethodImpl_1b221ab713bbcb85(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        check_created();
        bool ignoreCase = ((int32_t)(((int32_t)(bindingAttr) & 1)) != 0);
        cli::array<System::Reflection::MethodInfo*> *methods = GetMethodsByName(name, bindingAttr, ignoreCase, this);
        System::Reflection::MethodInfo *found = nullptr;
        cli::array<System::Reflection::MethodBase*> *match;
        int32_t typesLen = (types != nullptr) ? types->get_Length() : 0;
        int32_t count = 0;
        for(auto tmp_310 : methods) {
            auto m = cli::cast<System::Reflection::MethodInfo*>(tmp_310);
            {
                if((((int32_t)(callConvention) != 3) && ((int32_t)(((int32_t)(m->get_CallingConvention_309cf574b58a053a()) & (int32_t)(callConvention))) != (int32_t)(callConvention)))) 
                {
                    continue;
                }
                found = m;
                count++;
            }
        }
        if((count ==  0)) 
        {
            return nullptr;
        }
        if(((count ==  1) && (typesLen ==  0))) 
        {
            return found;
        }
        match = (new cli::array<System::Reflection::MethodBase*>(count));
        if((count ==  1)) 
        {
            match->at(0) = found;
        }
         else 
        {
            count = 0;
            for(auto tmp_311 : methods) {
                auto m = cli::cast<System::Reflection::MethodInfo*>(tmp_311);
                {
                    if((((int32_t)(callConvention) != 3) && ((int32_t)(((int32_t)(m->get_CallingConvention_309cf574b58a053a()) & (int32_t)(callConvention))) != (int32_t)(callConvention)))) 
                    {
                        continue;
                    }
                    match->at(count++) = m;
                }
            }
        }
        if((types ==  nullptr)) 
        {
            return cli::cast<System::Reflection::MethodInfo*>(System::Reflection::Binder::FindMostDerivedMatch(match));
        }
        if((binder ==  nullptr)) 
        {
            binder = System::Reflection::Binder::get_DefaultBinder();
        }
        return cli::cast<System::Reflection::MethodInfo*>(binder->SelectMethod_3e1ca0f0e362534f(bindingAttr, match, types, modifiers));
    }
    
    System::Type* TypeBuilder::GetNestedType_31962c16c0c85df9(System::String* name, System::Reflection::BindingFlags bindingAttr) {
        check_created();
        if((this->subtypes ==  nullptr)) 
        {
            return nullptr;
        }
        for(auto tmp_312 : this->subtypes) {
            auto t = cli::cast<TypeBuilder*>(tmp_312);
            {
                if(!(t->get_is_created())) 
                {
                    continue;
                }
                if(((int32_t)(((int32_t)(t->attrs) & 7)) ==  2)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) ==  0)) 
                    {
                        continue;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) ==  0)) 
                    {
                        continue;
                    }
                }
                if(System::String::op_Equality(t->get_Name_50fad5fa936c3ae2(), name)) 
                {
                    return t->created;
                }
            }
        }
        return nullptr;
    }
    
    cli::array<System::Type*>* TypeBuilder::GetNestedTypes_bb6ee40b0fa4052d(System::Reflection::BindingFlags bindingAttr) {
        if(!(this->get_is_created())) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        bool match;
        System::Collections::ArrayList *result = cli::gcnew<System::Collections::ArrayList>();
        if((this->subtypes ==  nullptr)) 
        {
            return System::Type::EmptyTypes;
        }
        for(auto tmp_313 : this->subtypes) {
            auto t = cli::cast<TypeBuilder*>(tmp_313);
            {
                match = false;
                if(((int32_t)(((int32_t)(t->attrs) & 7)) ==  2)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                result->Add_e6a92085999ce388(t);
            }
        }
        cli::array<System::Type*> *r = (new cli::array<System::Type*>(result->get_Count_2354963792616712()));
        result->CopyTo_c634d425a65b1fc3(r);
        return r;
    }
    
    cli::array<System::Reflection::PropertyInfo*>* TypeBuilder::GetProperties_9fb6c40e3662fdd7(System::Reflection::BindingFlags bindingAttr) {
        if(this->get_is_created()) 
        {
            return this->created->GetProperties_9fb6c40e3662fdd7(bindingAttr);
        }
        if((this->properties ==  nullptr)) 
        {
            return (new cli::array<System::Reflection::PropertyInfo*>(0));
        }
        System::Collections::ArrayList *l = cli::gcnew<System::Collections::ArrayList>();
        bool match;
        System::Reflection::MethodAttributes mattrs;
        System::Reflection::MethodInfo *accessor;
        for(auto tmp_314 : this->properties) {
            auto c = cli::cast<System::Reflection::PropertyInfo*>(tmp_314);
            {
                match = false;
                accessor = c->GetGetMethod_598f563fd3755017(true);
                if(System::Reflection::MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    accessor = c->GetSetMethod_8896cb22c4f8d900(true);
                }
                if(System::Reflection::MethodInfo::op_Equality(accessor, nullptr)) 
                {
                    continue;
                }
                mattrs = accessor->get_Attributes_b3976e6a55c088be();
                if(((int32_t)(((int32_t)(mattrs) & 7)) ==  6)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 16)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 32)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                match = false;
                if(((int32_t)(((int32_t)(mattrs) & 16)) != 0)) 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 8)) != 0)) 
                    {
                        match = true;
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(bindingAttr) & 4)) != 0)) 
                    {
                        match = true;
                    }
                }
                if(!(match)) 
                {
                    continue;
                }
                l->Add_e6a92085999ce388(c);
            }
        }
        cli::array<System::Reflection::PropertyInfo*> *result = (new cli::array<System::Reflection::PropertyInfo*>(l->get_Count_2354963792616712()));
        l->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    System::Reflection::PropertyInfo* TypeBuilder::GetPropertyImpl_e2328b7ad87384ee(System::String* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, cli::array<System::Type*>* types, cli::array<System::Reflection::ParameterModifier>* modifiers) {
        throw not_supported();
    }
    
    bool TypeBuilder::HasElementTypeImpl_36e3ca23a6e8185() {
        if(!(this->get_is_created())) 
        {
            return false;
        }
        return this->created->get_HasElementType();
    }
    
    System::Object* TypeBuilder::InvokeMember_70c4601d847070a2(System::String* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Object* target, cli::array<System::Object*>* args, cli::array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, cli::array<System::String*>* namedParameters) {
        check_created();
        return this->created->InvokeMember_70c4601d847070a2(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
    }
    
    bool TypeBuilder::IsArrayImpl_cf15f782d0773ffd() {
        return false;
    }
    
    bool TypeBuilder::IsByRefImpl_a1c403acfb80fd15() {
        return false;
    }
    
    bool TypeBuilder::IsCOMObjectImpl_27dfb5d026264856() {
        return ((int32_t)(((int32_t)(TypeBuilder::GetAttributeFlagsImpl_ea77781598cb234a()) & 4096)) != 0);
    }
    
    bool TypeBuilder::IsPointerImpl_86e7f94717f8b1ea() {
        return false;
    }
    
    bool TypeBuilder::IsPrimitiveImpl_b5951f74b8c48703() {
        return false;
    }
    
    bool TypeBuilder::IsValueTypeImpl_fe1651255927f3c6() {
        if((System::Type::op_Equality2(this, this->pmodule->assemblyb->corlib_value_type) || System::Type::op_Equality2(this, this->pmodule->assemblyb->corlib_enum_type))) 
        {
            return false;
        }
        System::Type *parent_type = this->parent;
        while(System::Type::op_Inequality2(parent_type, nullptr)) {
            if(System::Type::op_Equality2(parent_type, this->pmodule->assemblyb->corlib_value_type)) 
            {
                return true;
            }
            parent_type = parent_type->get_BaseType_6a0646ae880055f6();
        }
        return false;
    }
    
    System::Type* TypeBuilder::MakeArrayType_9ec2b26036f00b30() {
        return cli::gcnew<ArrayType>(this, 0);
    }
    
    System::Type* TypeBuilder::MakeArrayType_b5bc09824bbbb104(int32_t rank) {
        if((rank < 1)) 
        {
            throw cli::gcnew<System::IndexOutOfRangeException>();
        }
        return cli::gcnew<ArrayType>(this, rank);
    }
    
    System::Type* TypeBuilder::MakeByRefType_fc54947a1bb074be() {
        return cli::gcnew<ByRefType>(this);
    }
    
    System::Type* TypeBuilder::MakeGenericType_da11ef776ac96678(cli::array<System::Type*>* typeArguments) {
        if(!(this->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("not a generic type definition"));
        }
        if((typeArguments ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("typeArguments"));
        }
        if((this->generic_params->get_Length() != typeArguments->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(_T("The type or method has {0} generic parameter(s) but {1} generic argument(s) where provided. A generic argument must be provided for each generic parameter."), cli::box(this->generic_params->get_Length()), cli::box(typeArguments->get_Length())), _T("typeArguments"));
        }
        for(auto tmp_315 : typeArguments) {
            auto t = cli::cast<System::Type*>(tmp_315);
            {
                if(System::Type::op_Equality2(t, nullptr)) 
                {
                    throw cli::gcnew<System::ArgumentNullException>(_T("typeArguments"));
                }
            }
        }
        cli::array<System::Type*> *copy = (new cli::array<System::Type*>(typeArguments->get_Length()));
        cli::import(typeArguments)->CopyTo(copy, 0);
        return this->pmodule->assemblyb->MakeGenericType(this, copy);
    }
    
    System::Type* TypeBuilder::MakePointerType_f23f3b9330ac63da() {
        return cli::gcnew<PointerType>(this);
    }
    
    void TypeBuilder::SetCustomAttribute(CustomAttributeBuilder* customBuilder) {
        if((customBuilder ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("customBuilder"));
        }
        System::String *attrname = customBuilder->get_Ctor()->get_ReflectedType_bf4971c0f442b9dc()->get_FullName_7e8fa72ba225e1a4();
        if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.StructLayoutAttribute"))) 
        {
            cli::array<unsigned char> *data = customBuilder->get_Data();
            int32_t layout_kind;
            layout_kind = (int32_t)(data->at(2));
            (layout_kind = layout_kind | ((int32_t)(data->at(3)) << 8));
            (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) & -25)));
            switch((System::Runtime::InteropServices::LayoutKind)(layout_kind)) {
                case System::Runtime::InteropServices::LayoutKind::Auto: case_1267: {
                    (this->attrs = (System::Reflection::TypeAttributes)((int32_t)(this->attrs)));
                    break;
                }
                case System::Runtime::InteropServices::LayoutKind::Explicit: case_1268: {
                    (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 16)));
                    break;
                }
                case System::Runtime::InteropServices::LayoutKind::Sequential: case_1269: {
                    (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 8)));
                    break;
                }
                default: case_1270: {
                    throw cli::gcnew<System::Exception>(_T("Error in customattr"));
                }
            }
            System::Type *ctor_type = cli::is<ConstructorBuilder>(customBuilder->get_Ctor()) ? cli::cast<ConstructorBuilder*>(customBuilder->get_Ctor())->parameters->at(0) : customBuilder->get_Ctor()->GetParameters_9d17bcb549474c9()->at(0)->get_ParameterType_97c5fa09a0b988d();
            int32_t pos = 6;
            if(System::String::op_Equality(ctor_type->get_FullName_7e8fa72ba225e1a4(), _T("System.Int16"))) 
            {
                pos = 4;
            }
            int32_t nnamed = (int32_t)(data->at(pos++));
            (nnamed = nnamed | ((int32_t)(data->at(pos++)) << 8));
            for(int32_t i = 0; (i < nnamed); ++i){
                pos++;
                unsigned char type = data->at(pos++);
                int32_t len;
                System::String *named_name;
                if(((int32_t)(type) ==  85)) 
                {
                    len = CustomAttributeBuilder::decode_len(data, pos, pos);
                    CustomAttributeBuilder::string_from_bytes(data, pos, len);
                    (pos = pos + len);
                }
                len = CustomAttributeBuilder::decode_len(data, pos, pos);
                named_name = CustomAttributeBuilder::string_from_bytes(data, pos, len);
                (pos = pos + len);
                int32_t value = (int32_t)(data->at(pos++));
                (value = value | ((int32_t)(data->at(pos++)) << 8));
                (value = value | ((int32_t)(data->at(pos++)) << 16));
                (value = value | ((int32_t)(data->at(pos++)) << 24));
                System::String* tmp_316 = named_name;
                ::System::Int32 tmp_317 = -1;
                if(::System::String::Equals3(tmp_316, _T("CharSet"))) tmp_317 = 0;
                if(::System::String::Equals3(tmp_316, _T("Pack"))) tmp_317 = 1;
                if(::System::String::Equals3(tmp_316, _T("Size"))) tmp_317 = 2;
                switch(tmp_317)
                {
                    case 0: case_1271: 
                    {
                        switch((System::Runtime::InteropServices::CharSet)(value)) {
                            case System::Runtime::InteropServices::CharSet::None: case System::Runtime::InteropServices::CharSet::Ansi: case_1275: {
                                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) & -196609)));
                                break;
                            }
                            case System::Runtime::InteropServices::CharSet::Unicode: case_1276: {
                                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) & -131073)));
                                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 65536)));
                                break;
                            }
                            case System::Runtime::InteropServices::CharSet::Auto: case_1277: {
                                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) & -65537)));
                                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 131072)));
                                break;
                            }
                            default: case_1278: {
                                break;
                            }
                        }
                        break;
                    }
                    case 1: case_1272: 
                    {
                        this->packing_size = (PackingSize)(value);
                        break;
                    }
                    case 2: case_1273: 
                    {
                        this->class_size = value;
                        break;
                    }
                    default: case_1274: 
                    {
                        break;
                    }
                }
            }
            return;
        }
         else 
        {
            if(System::String::op_Equality(attrname, _T("System.Runtime.CompilerServices.SpecialNameAttribute"))) 
            {
                (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 1024)));
                return;
            }
             else 
            {
                if(System::String::op_Equality(attrname, _T("System.SerializableAttribute"))) 
                {
                    (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 8192)));
                    return;
                }
                 else 
                {
                    if(System::String::op_Equality(attrname, _T("System.Runtime.InteropServices.ComImportAttribute"))) 
                    {
                        (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 4096)));
                        return;
                    }
                     else 
                    {
                        if(System::String::op_Equality(attrname, _T("System.Security.SuppressUnmanagedCodeSecurityAttribute"))) 
                        {
                            (this->attrs = (System::Reflection::TypeAttributes)(((int32_t)(this->attrs) | 262144)));
                        }
                    }
                }
            }
        }
        if((this->cattrs != nullptr)) 
        {
            cli::array<CustomAttributeBuilder*> *new_array = (new cli::array<CustomAttributeBuilder*>((this->cattrs->get_Length() + 1)));
            cli::import(this->cattrs)->CopyTo(new_array, 0);
            new_array->at(this->cattrs->get_Length()) = customBuilder;
            this->cattrs = new_array;
        }
         else 
        {
            this->cattrs = (new cli::array<CustomAttributeBuilder*>(1));
            this->cattrs->at(0) = customBuilder;
        }
    }
    
    void TypeBuilder::SetCustomAttribute2(System::Reflection::ConstructorInfo* con, cli::array<unsigned char>* binaryAttribute) {
        SetCustomAttribute(cli::gcnew<CustomAttributeBuilder>(con, binaryAttribute));
    }
    
    EventBuilder* TypeBuilder::DefineEvent(System::String* name, System::Reflection::EventAttributes attributes, System::Type* eventtype) {
        check_name(_T("name"), name);
        if(System::Type::op_Equality2(eventtype, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        check_not_created();
        EventBuilder *res = cli::gcnew<EventBuilder>(this, name, attributes, eventtype);
        if((this->events != nullptr)) 
        {
            cli::array<EventBuilder*> *new_events = (new cli::array<EventBuilder*>((this->events->get_Length() + 1)));
            System::Array::Copy(this->events, new_events, this->events->get_Length());
            new_events->at(this->events->get_Length()) = res;
            this->events = new_events;
        }
         else 
        {
            this->events = (new cli::array<EventBuilder*>(1));
            this->events->at(0) = res;
        }
        return res;
    }
    
    FieldBuilder* TypeBuilder::DefineInitializedData(System::String* name, cli::array<unsigned char>* data, System::Reflection::FieldAttributes attributes) {
        if((data ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("data"));
        }
        FieldBuilder *res = DefineUninitializedData(name, data->get_Length(), attributes);
        res->SetRVAData(data);
        return res;
    }
    
    FieldBuilder* TypeBuilder::DefineUninitializedData(System::String* name, int32_t size, System::Reflection::FieldAttributes attributes) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Empty name is not legal"), _T("name"));
        }
        if(((size <= 0) || (size > 4128768))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Data size must be > 0 and < 0x3f0000"));
        }
        check_not_created();
        System::String *typeName = cli::concat(_T("$ArrayType$"), cli::box(size));
        System::Type *datablobtype = this->pmodule->GetRegisteredType(cli::concat(this->fullname, _T("+")));
        if(System::Type::op_Equality2(datablobtype, nullptr)) 
        {
            TypeBuilder *tb = DefineNestedType4(typeName, (System::Reflection::TypeAttributes)275L, this->pmodule->assemblyb->corlib_value_type, nullptr, PackingSize::Size1, size);
            tb->CreateType();
            datablobtype = tb;
        }
        return DefineField(name, datablobtype, (System::Reflection::FieldAttributes)(((int32_t)(((int32_t)(attributes) | 16)) | 256)));
    }
    
    void TypeBuilder::SetParent(System::Type* parent) {
        check_not_created();
        if(System::Type::op_Equality2(parent, nullptr)) 
        {
            if(((int32_t)(((int32_t)(this->attrs) & 32)) != 0)) 
            {
                if(((int32_t)(((int32_t)(this->attrs) & 128)) ==  0)) 
                {
                    throw cli::gcnew<System::InvalidOperationException>(_T("Interface must be declared abstract."));
                }
                this->parent = nullptr;
            }
             else 
            {
                this->parent = cli::typeof<System::Type>::info;
            }
        }
         else 
        {
            this->parent = parent;
        }
        setup_internal_class(this);
    }
    
    int32_t TypeBuilder::get_next_table_index(System::Object* obj, int32_t table, bool inc) {
        return this->pmodule->get_next_table_index(obj, table, inc);
    }
    
    System::Reflection::InterfaceMapping TypeBuilder::GetInterfaceMap_26193b1c1167fea4(System::Type* interfaceType) {
        if(System::Type::op_Equality2(this->created, nullptr)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("This method is not implemented for incomplete types."));
        }
        return this->created->GetInterfaceMap_26193b1c1167fea4(interfaceType);
    }
    
    System::Type* TypeBuilder::InternalResolve_ba2e81f73f0d7994() {
        check_created();
        return this->created;
    }
    
    System::Exception* TypeBuilder::not_supported() {
        return cli::gcnew<System::NotSupportedException>(_T("The invoked member is not supported in a dynamic module."));
    }
    
    void TypeBuilder::check_not_created() {
        if(this->get_is_created()) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Unable to change after type has been created."));
        }
    }
    
    void TypeBuilder::check_created() {
        if(!(this->get_is_created())) 
        {
            throw not_supported();
        }
    }
    
    void TypeBuilder::check_name(System::String* argName, System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(argName);
        }
        if((name->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Empty name is not legal"), argName);
        }
        if(((int32_t)(name->get_Chars(0)) ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Illegal name"), argName);
        }
    }
    
    System::String* TypeBuilder::ToString_1636a0751cb9ac11() {
        return this->get_FullName_7e8fa72ba225e1a4();
    }
    
    bool TypeBuilder::IsAssignableFrom_e3aa32d778e63a90(System::Type* c) {
        return System::Type::IsAssignableFrom_e3aa32d778e63a90(c);
    }
    
    bool TypeBuilder::IsAssignableTo(System::Type* c) {
        if(System::Type::op_Equality2(c, this)) 
        {
            return true;
        }
        if(c->get_IsInterface()) 
        {
            if((System::Type::op_Inequality2(this->parent, nullptr) && this->get_is_created())) 
            {
                if(c->IsAssignableFrom_e3aa32d778e63a90(this->parent)) 
                {
                    return true;
                }
            }
            if((this->interfaces ==  nullptr)) 
            {
                return false;
            }
            for(auto tmp_318 : this->interfaces) {
                auto t = cli::cast<System::Type*>(tmp_318);
                if(c->IsAssignableFrom_e3aa32d778e63a90(t)) 
                {
                    return true;
                }
            }
            if(!(this->get_is_created())) 
            {
                return false;
            }
        }
        if(System::Type::op_Equality2(this->parent, nullptr)) 
        {
            return System::Type::op_Equality2(c, cli::typeof<System::Type>::info);
        }
         else 
        {
            return c->IsAssignableFrom_e3aa32d778e63a90(this->parent);
        }
    }
    
    bool TypeBuilder::IsCreated() {
        return this->get_is_created();
    }
    
    cli::array<System::Type*>* TypeBuilder::GetGenericArguments_a7fb476275cfe9a3() {
        if((this->generic_params ==  nullptr)) 
        {
            return nullptr;
        }
        cli::array<System::Type*> *args = (new cli::array<System::Type*>(this->generic_params->get_Length()));
        cli::import(this->generic_params)->CopyTo(args, 0);
        return args;
    }
    
    System::Type* TypeBuilder::GetGenericTypeDefinition_15f8fc7813e8e8bf() {
        if((this->generic_params ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Type is not generic"));
        }
        return this;
    }
    
    cli::array<GenericTypeParameterBuilder*>* TypeBuilder::DefineGenericParameters(cli::array<System::String*>* names) {
        if((names ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("names"));
        }
        if((names->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("names"));
        }
        setup_generic_class();
        this->generic_params = (new cli::array<GenericTypeParameterBuilder*>(names->get_Length()));
        for(int32_t i = 0; (i < names->get_Length()); i++){
            System::String *item = names->at(i);
            if((item ==  nullptr)) 
            {
                throw cli::gcnew<System::ArgumentNullException>(_T("names"));
            }
            this->generic_params->at(i) = cli::gcnew<GenericTypeParameterBuilder>(this, nullptr, item, i);
        }
        return this->generic_params;
    }
    
    System::Reflection::ConstructorInfo* TypeBuilder::GetConstructor5(System::Type* type, System::Reflection::ConstructorInfo* constructor_) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type is not generic"), _T("type"));
        }
        if(!(type->get_IsGenericType_4db8ddd5b97f3c14())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type is not a generic type"), _T("type"));
        }
        if(type->get_IsGenericTypeDefinition_8008dd501dc43926()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type cannot be a generic type definition"), _T("type"));
        }
        if(System::Reflection::ConstructorInfo::op_Equality(constructor_, nullptr)) 
        {
            throw cli::gcnew<System::NullReferenceException>();
        }
        if(!(constructor_->get_DeclaringType_6121cd6a84393166()->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("constructor declaring type is not a generic type definition"), _T("constructor"));
        }
        if(System::Type::op_Inequality2(constructor_->get_DeclaringType_6121cd6a84393166(), type->GetGenericTypeDefinition_15f8fc7813e8e8bf())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("constructor declaring type is not the generic type definition of type"), _T("constructor"));
        }
        System::Reflection::ConstructorInfo *res = type->GetConstructor_1dd1da77cc4fe364(constructor_);
        if(System::Reflection::ConstructorInfo::op_Equality(res, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("constructor not found"));
        }
        return res;
    }
    
    bool TypeBuilder::IsValidGetMethodType(System::Type* type) {
        if((cli::is<TypeBuilder>(type) || cli::is<System::Reflection::MonoGenericClass>(type))) 
        {
            return true;
        }
        if(cli::is<ModuleBuilder>(type->get_Module_ea7d65dc88202263())) 
        {
            return true;
        }
        if(type->get_IsGenericParameter_2a17c4bf67798b07()) 
        {
            return false;
        }
        cli::array<System::Type*> *inst = type->GetGenericArguments_a7fb476275cfe9a3();
        if((inst ==  nullptr)) 
        {
            return false;
        }
        for(int32_t i = 0; (i < inst->get_Length()); ++i){
            if(IsValidGetMethodType(inst->at(i))) 
            {
                return true;
            }
        }
        return false;
    }
    
    System::Reflection::MethodInfo* TypeBuilder::GetMethod8(System::Type* type, System::Reflection::MethodInfo* method) {
        if(!(IsValidGetMethodType(type))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("type is not TypeBuilder but "), type->GetType7()), _T("type"));
        }
        if((cli::is<TypeBuilder>(type) && type->get_ContainsGenericParameters_19598881dd690ad3())) 
        {
            type = type->MakeGenericType_da11ef776ac96678(type->GetGenericArguments_a7fb476275cfe9a3());
        }
        if(!(type->get_IsGenericType_4db8ddd5b97f3c14())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("type is not a generic type"), _T("type"));
        }
        if(!(method->get_DeclaringType_6121cd6a84393166()->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("method declaring type is not a generic type definition"), _T("method"));
        }
        if(System::Type::op_Inequality2(method->get_DeclaringType_6121cd6a84393166(), type->GetGenericTypeDefinition_15f8fc7813e8e8bf())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("method declaring type is not the generic type definition of type"), _T("method"));
        }
        if(System::Reflection::MethodInfo::op_Equality(method, nullptr)) 
        {
            throw cli::gcnew<System::NullReferenceException>();
        }
        System::Reflection::MethodInfo *res = type->GetMethod_c725b8f4a943d5c8(method);
        if(System::Reflection::MethodInfo::op_Equality(res, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(_T("method {0} not found in type {1}"), method->get_Name_50fad5fa936c3ae2(), type));
        }
        return res;
    }
    
    System::Reflection::FieldInfo* TypeBuilder::GetField5(System::Type* type, System::Reflection::FieldInfo* field) {
        if(!(type->get_IsGenericType_4db8ddd5b97f3c14())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type is not a generic type"), _T("type"));
        }
        if(type->get_IsGenericTypeDefinition_8008dd501dc43926()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type cannot be a generic type definition"), _T("type"));
        }
        if(cli::is<FieldOnTypeBuilderInst>(field)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The specified field must be declared on a generic type definition."), _T("field"));
        }
        if(System::Type::op_Inequality2(field->get_DeclaringType_6121cd6a84393166(), type->GetGenericTypeDefinition_15f8fc7813e8e8bf())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("field declaring type is not the generic type definition of type"), _T("method"));
        }
        System::Reflection::FieldInfo *res = type->GetField_4da1f61e7e2a6f8c(field);
        if(System::Reflection::FieldInfo::op_Equality2(res, nullptr)) 
        {
            throw cli::gcnew<System::Exception>(_T("field not found"));
        }
         else 
        {
            return res;
        }
    }
    
    System::TypeCode TypeBuilder::GetTypeCodeInternal2() {
        if(System::Type::op_Equality2(this->parent, this->pmodule->assemblyb->corlib_enum_type)) 
        {
            for(int32_t i = 0; (i < this->num_fields); ++i){
                FieldBuilder *f = this->fields->at(i);
                if(!(f->get_IsStatic())) 
                {
                    return System::Type::GetTypeCode(f->get_FieldType_1dab4079098d7fff());
                }
            }
            throw cli::gcnew<System::InvalidOperationException>(_T("Enum basetype field not defined"));
        }
         else 
        {
            return System::Type::GetTypeCodeInternal(this);
        }
    }
    
    void TypeBuilder::GetIDsOfNames(System::Guid riid, void* rgszNames, uint32_t cNames, uint32_t lcid, void* rgDispId) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::GetTypeInfo(uint32_t iTInfo, uint32_t lcid, void* ppTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::GetTypeInfoCount(uint32_t pcTInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void TypeBuilder::Invoke(uint32_t dispIdMember, System::Guid riid, uint32_t lcid, int16_t wFlags, void* pDispParams, void* pVarResult, void* pExcepInfo, void* puArgErr) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::Assembly* TypeBuilder::get_Assembly_3aae0acbf2a6d696() {
        return this->pmodule->get_Assembly_dbea84123403c0aa();
    }
    
    System::String* TypeBuilder::get_AssemblyQualifiedName_cea373c2171bd483() {
        return cli::concat(this->fullname, _T(", "));
    }
    
    System::Type* TypeBuilder::get_BaseType_6a0646ae880055f6() {
        return this->parent;
    }
    
    System::Type* TypeBuilder::get_DeclaringType_6121cd6a84393166() {
        return this->nesting_type;
    }
    
    System::Type* TypeBuilder::get_UnderlyingSystemType_9ccb7bb8385521f6() {
        if(this->get_is_created()) 
        {
            return this->created->get_UnderlyingSystemType_9ccb7bb8385521f6();
        }
        if(this->get_IsEnum_bc85ea7b0a749db()) 
        {
            if(System::Type::op_Inequality2(this->underlying_type, nullptr)) 
            {
                return this->underlying_type;
            }
            throw cli::gcnew<System::InvalidOperationException>(_T("Enumeration type is not defined."));
        }
        return this;
    }
    
    System::String* TypeBuilder::get_FullName_7e8fa72ba225e1a4() {
        return this->fullname;
    }
    
    System::Guid TypeBuilder::get_GUID_bdb6b630c3237a21() {
        check_created();
        return this->created->get_GUID_bdb6b630c3237a21();
    }
    
    System::Reflection::Module* TypeBuilder::get_Module_ea7d65dc88202263() {
        return this->pmodule;
    }
    
    System::String* TypeBuilder::get_Name_50fad5fa936c3ae2() {
        return this->tname;
    }
    
    System::String* TypeBuilder::get_Namespace_cb4ed37007083e7f() {
        return this->nspace;
    }
    
    PackingSize TypeBuilder::get_PackingSize() {
        return this->packing_size;
    }
    
    int32_t TypeBuilder::get_Size() {
        return this->class_size;
    }
    
    System::Type* TypeBuilder::get_ReflectedType_bf4971c0f442b9dc() {
        return this->nesting_type;
    }
    
    System::RuntimeTypeHandle TypeBuilder::get_TypeHandle_a14995fa9102936b() {
        check_created();
        return this->created->get_TypeHandle_a14995fa9102936b();
    }
    
    TypeToken TypeBuilder::get_TypeToken() {
        return cli::ctor<TypeToken>((33554432 | this->table_idx));
    }
    
    bool TypeBuilder::get_is_created() {
        return this->createTypeCalled;
    }
    
    bool TypeBuilder::get_ContainsGenericParameters_19598881dd690ad3() {
        return (this->generic_params != nullptr);
    }
    
    bool TypeBuilder::get_IsGenericParameter_2a17c4bf67798b07() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::GenericParameterAttributes TypeBuilder::get_GenericParameterAttributes_b31b8b8f1d79d815() {
        return System::Reflection::GenericParameterAttributes::None;
    }
    
    bool TypeBuilder::get_IsGenericTypeDefinition_8008dd501dc43926() {
        return (this->generic_params != nullptr);
    }
    
    bool TypeBuilder::get_IsGenericType_4db8ddd5b97f3c14() {
        return this->get_IsGenericTypeDefinition_8008dd501dc43926();
    }
    
    int32_t TypeBuilder::get_GenericParameterPosition_ae331bf96a7667b1() {
        return 0;
    }
    
    System::Reflection::MethodBase* TypeBuilder::get_DeclaringMethod_6dc070d2040335e5() {
        return nullptr;
    }
    
}}}
namespace System { namespace Reflection { namespace Emit {
    
    
    void UnmanagedMarshal::constructor(System::Runtime::InteropServices::UnmanagedType maint, int32_t cnt) {
        this->count = cnt;
        this->t = maint;
        this->tbase = maint;
    }
    
    void UnmanagedMarshal::constructor(System::Runtime::InteropServices::UnmanagedType maint, System::Runtime::InteropServices::UnmanagedType elemt) {
        this->count = 0;
        this->t = maint;
        this->tbase = elemt;
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineByValArray(int32_t elemCount) {
        return cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::ByValArray, elemCount);
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineByValTStr(int32_t elemCount) {
        return cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::ByValTStr, elemCount);
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineLPArray(System::Runtime::InteropServices::UnmanagedType elemType) {
        return cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::LPArray, elemType);
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineSafeArray(System::Runtime::InteropServices::UnmanagedType elemType) {
        return cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::SafeArray, elemType);
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineUnmanagedMarshal(System::Runtime::InteropServices::UnmanagedType unmanagedType) {
        return cli::gcnew<UnmanagedMarshal>(unmanagedType, unmanagedType);
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineCustom(System::Type* typeref, System::String* cookie, System::String* mtype, System::Guid id) {
        UnmanagedMarshal *res = cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::CustomMarshaler, System::Runtime::InteropServices::UnmanagedType::CustomMarshaler);
        res->mcookie = cookie;
        res->marshaltype = mtype;
        res->marshaltyperef = typeref;
        if(System::Guid::op_Equality(id, (*System::Guid::Empty))) 
        {
            res->guid = System::String::Empty;
        }
         else 
        {
            res->guid = id->ToString_1636a0751cb9ac11();
        }
        return res;
    }
    
    UnmanagedMarshal* UnmanagedMarshal::DefineLPArrayInternal(System::Runtime::InteropServices::UnmanagedType elemType, int32_t sizeConst, int32_t sizeParamIndex) {
        UnmanagedMarshal *res = cli::gcnew<UnmanagedMarshal>(System::Runtime::InteropServices::UnmanagedType::LPArray, elemType);
        res->count = sizeConst;
        res->param_num = sizeParamIndex;
        res->has_size = true;
        return res;
    }
    
    System::Runtime::InteropServices::MarshalAsAttribute* UnmanagedMarshal::ToMarshalAsAttribute() {
        System::Runtime::InteropServices::MarshalAsAttribute *attr = cli::gcnew<System::Runtime::InteropServices::MarshalAsAttribute>(this->t);
        attr->ArraySubType = this->tbase;
        attr->MarshalCookie = this->mcookie;
        attr->MarshalType = this->marshaltype;
        attr->MarshalTypeRef = this->marshaltyperef;
        if((this->count ==  -1)) 
        {
            attr->SizeConst = 0;
        }
         else 
        {
            attr->SizeConst = this->count;
        }
        if((this->param_num ==  -1)) 
        {
            attr->SizeParamIndex = 0;
        }
         else 
        {
            attr->SizeParamIndex = (int16_t)this->param_num;
        }
        return attr;
    }
    
    System::Runtime::InteropServices::UnmanagedType UnmanagedMarshal::get_BaseType() {
        if((((int32_t)(this->t) ==  42) || ((int32_t)(this->t) ==  29))) 
        {
            throw cli::gcnew<System::ArgumentException>();
        }
        return this->tbase;
    }
    
    int32_t UnmanagedMarshal::get_ElementCount() {
        return this->count;
    }
    
    System::Runtime::InteropServices::UnmanagedType UnmanagedMarshal::get_GetUnmanagedType() {
        return this->t;
    }
    
    System::Guid UnmanagedMarshal::get_IIDGuid() {
        return cli::ctor<System::Guid>(this->guid);
    }
    
}}}
namespace System { namespace Resources {
    
    
    void MissingManifestResourceException::constructor() {
    }
    
    void MissingManifestResourceException::constructor(System::String* message) {
    }
    
    void MissingManifestResourceException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void MissingManifestResourceException::constructor(System::String* message, System::Exception* inner) {
    }
    
}}
namespace System { namespace Resources {
    
    
    void MissingSatelliteAssemblyException::constructor() {
    }
    
    void MissingSatelliteAssemblyException::constructor(System::String* message) {
    }
    
    void MissingSatelliteAssemblyException::constructor(System::String* message, System::String* cultureName) {
        this->culture = cultureName;
    }
    
    void MissingSatelliteAssemblyException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void MissingSatelliteAssemblyException::constructor(System::String* message, System::Exception* inner) {
    }
    
    System::String* MissingSatelliteAssemblyException::get_CultureName() {
        return this->culture;
    }
    
}}
namespace System { namespace Resources {
    
    
    void NeutralResourcesLanguageAttribute::constructor(System::String* cultureName) {
        if((cultureName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("culture is null"));
        }
        this->culture = cultureName;
    }
    
    void NeutralResourcesLanguageAttribute::constructor(System::String* cultureName, UltimateResourceFallbackLocation location) {
        if((cultureName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("culture is null"));
        }
        this->culture = cultureName;
        this->loc = location;
    }
    
    System::String* NeutralResourcesLanguageAttribute::get_CultureName() {
        return this->culture;
    }
    
    UltimateResourceFallbackLocation NeutralResourcesLanguageAttribute::get_Location() {
        return this->loc;
    }
    
}}
namespace System { namespace Resources {
    
    System::Object*  ResourceManager::thisLock;
    System::Collections::Hashtable*  ResourceManager::ResourceCache;
    System::Collections::Hashtable*  ResourceManager::NonExistent;
    int32_t  ResourceManager::HeaderVersionNumber;
    int32_t  ResourceManager::MagicNumber;
    
    ResourceManager::ResourceManager()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ResourceManager::constructor() {
    }
    
    void ResourceManager::constructor(System::Type* resourceSource) {
        if(System::Type::op_Equality2(resourceSource, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resourceSource"));
        }
        this->resourceSource = resourceSource;
        this->BaseNameField = resourceSource->get_Name_50fad5fa936c3ae2();
        this->MainAssembly = resourceSource->get_Assembly_3aae0acbf2a6d696();
        this->ResourceSets = GetResourceSets(this->MainAssembly, this->BaseNameField);
        this->neutral_culture = GetNeutralResourcesLanguage(this->MainAssembly);
    }
    
    void ResourceManager::constructor(System::String* baseName, System::Reflection::Assembly* assembly) {
        if((baseName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("baseName"));
        }
        if(System::Reflection::Assembly::op_Equality(assembly, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("assembly"));
        }
        this->BaseNameField = baseName;
        this->MainAssembly = assembly;
        this->ResourceSets = GetResourceSets(this->MainAssembly, this->BaseNameField);
        this->neutral_culture = GetNeutralResourcesLanguage(this->MainAssembly);
    }
    
    void ResourceManager::constructor(System::String* baseName, System::Reflection::Assembly* assembly, System::Type* usingResourceSet) {
        if((baseName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("baseName"));
        }
        if(System::Reflection::Assembly::op_Equality(assembly, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("assembly"));
        }
        this->BaseNameField = baseName;
        this->MainAssembly = assembly;
        this->ResourceSets = GetResourceSets(this->MainAssembly, this->BaseNameField);
        this->resourceSetType = CheckResourceSetType(usingResourceSet, true);
        this->neutral_culture = GetNeutralResourcesLanguage(this->MainAssembly);
    }
    
    void ResourceManager::constructor(System::String* baseName, System::String* resourceDir, System::Type* usingResourceSet) {
        if((baseName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("baseName"));
        }
        if((resourceDir ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resourceDir"));
        }
        this->BaseNameField = baseName;
        this->resourceDir = resourceDir;
        this->resourceSetType = CheckResourceSetType(usingResourceSet, false);
        this->ResourceSets = GetResourceSets(this->MainAssembly, this->BaseNameField);
    }
    
    void ResourceManager::static_constructor() {
    }
    
    System::Collections::Hashtable* ResourceManager::GetResourceSets(System::Reflection::Assembly* assembly, System::String* basename) {
        {
            cli::lock_guard{ResourceCache};
            System::String *key = System::String::Empty;
            if(System::Reflection::Assembly::op_Inequality(assembly, nullptr)) 
            {
                key = assembly->get_FullName_abd52da7f47cce07();
            }
             else 
            {
                key = cli::concat(cli::import(basename->GetHashCode_6648aef0f235ee6c())->ToString_1636a0751cb9ac11(), _T("@@"));
            }
            if(((basename != nullptr) && System::String::op_Inequality(basename, System::String::Empty))) 
            {
                (key = cli::concat(key, _T("!")));
            }
             else 
            {
                (key = cli::concat(key, _T("!")));
            }
            System::Collections::Hashtable *tbl = cli::as<System::Collections::Hashtable*>(ResourceCache->get_Item_d75c6e706b965758(key));
            if((tbl ==  nullptr)) 
            {
                tbl = System::Collections::Hashtable::Synchronized(cli::gcnew<System::Collections::Hashtable>());
                ResourceCache->set_Item_84c7e24d9caa09(key, tbl);
            }
            return tbl;
        }
    }
    
    System::Type* ResourceManager::CheckResourceSetType(System::Type* usingResourceSet, bool verifyType) {
        if(System::Type::op_Equality2(usingResourceSet, nullptr)) 
        {
            return this->resourceSetType;
        }
        if((verifyType && !(cli::typeof<System::Type>::info->IsAssignableFrom_e3aa32d778e63a90(usingResourceSet)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type parameter must refer to a subclass of ResourceSet."), _T("usingResourceSet"));
        }
        return usingResourceSet;
    }
    
    ResourceManager* ResourceManager::CreateFileBasedResourceManager(System::String* baseName, System::String* resourceDir, System::Type* usingResourceSet) {
        return cli::gcnew<ResourceManager>(baseName, resourceDir, usingResourceSet);
    }
    
    System::Object* ResourceManager::GetObject_16db62815fa4733(System::String* name) {
        return GetObject_53175f9d9b315c79(name, nullptr);
    }
    
    System::Object* ResourceManager::GetObject_53175f9d9b315c79(System::String* name, System::Globalization::CultureInfo* culture) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((culture ==  nullptr)) 
        {
            culture = System::Globalization::CultureInfo::get_CurrentUICulture();
        }
        {
            cli::lock_guard{thisLock};
            ResourceSet *set = InternalGetResourceSet_344f5edc45d300ea(culture, true, true);
            System::Object *obj = nullptr;
            if((set != nullptr)) 
            {
                obj = set->GetObject_7df952fd6236c0e7(name, this->ignoreCase);
                if((obj != nullptr)) 
                {
                    return obj;
                }
            }
            do {
                culture = culture->get_Parent_87d5fb2f5c680cba();
                set = InternalGetResourceSet_344f5edc45d300ea(culture, true, true);
                if((set != nullptr)) 
                {
                    obj = set->GetObject_7df952fd6236c0e7(name, this->ignoreCase);
                    if((obj != nullptr)) 
                    {
                        return obj;
                    }
                }
            }
            while((!(culture->Equals_ed975d2f4a7d193e(this->neutral_culture)) && !(culture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture()))));
        }
        return nullptr;
    }
    
    ResourceSet* ResourceManager::GetResourceSet_4e1e9eff5ce476ff(System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents) {
        if((culture ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("culture"));
        }
        {
            cli::lock_guard{thisLock};
            return InternalGetResourceSet_344f5edc45d300ea(culture, createIfNotExists, tryParents);
        }
    }
    
    System::String* ResourceManager::GetString_95bba2b194faa7a4(System::String* name) {
        return GetString_3af0f7fcaae152bd(name, nullptr);
    }
    
    System::String* ResourceManager::GetString_3af0f7fcaae152bd(System::String* name, System::Globalization::CultureInfo* culture) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((culture ==  nullptr)) 
        {
            culture = System::Globalization::CultureInfo::get_CurrentUICulture();
        }
        {
            cli::lock_guard{thisLock};
            ResourceSet *set = InternalGetResourceSet_344f5edc45d300ea(culture, true, true);
            System::String *str = nullptr;
            if((set != nullptr)) 
            {
                str = set->GetString_4a396ac3e6731098(name, this->ignoreCase);
                if((str != nullptr)) 
                {
                    return str;
                }
            }
            do {
                culture = culture->get_Parent_87d5fb2f5c680cba();
                set = InternalGetResourceSet_344f5edc45d300ea(culture, true, true);
                if((set != nullptr)) 
                {
                    str = set->GetString_4a396ac3e6731098(name, this->ignoreCase);
                    if((str != nullptr)) 
                    {
                        return str;
                    }
                }
            }
            while((!(culture->Equals_ed975d2f4a7d193e(this->neutral_culture)) && !(culture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture()))));
        }
        return nullptr;
    }
    
    System::String* ResourceManager::GetResourceFileName_202d27086a3c543f(System::Globalization::CultureInfo* culture) {
        if(culture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture())) 
        {
            return cli::concat(this->BaseNameField, _T(".resources"));
        }
         else 
        {
            return cli::concat(this->BaseNameField, _T("."));
        }
    }
    
    System::String* ResourceManager::GetResourceFilePath(System::Globalization::CultureInfo* culture) {
        if((this->resourceDir != nullptr)) 
        {
            return System::IO::Path::Combine(this->resourceDir, GetResourceFileName_202d27086a3c543f(culture));
        }
         else 
        {
            return GetResourceFileName_202d27086a3c543f(culture);
        }
    }
    
    System::IO::Stream* ResourceManager::GetManifestResourceStreamNoCase(System::Reflection::Assembly* ass, System::String* fn) {
        System::String *resourceName = GetManifestResourceName(fn);
        for(auto tmp_319 : ass->GetManifestResourceNames_d63b24d819c7a44d()) {
            auto s = cli::cast<System::String*>(tmp_319);
            if((System::String::Compare3(resourceName, s, true, System::Globalization::CultureInfo::get_InvariantCulture()) ==  0)) 
            {
                return ass->GetManifestResourceStream_b395b331908084e(s);
            }
        }
        return nullptr;
    }
    
    System::IO::UnmanagedMemoryStream* ResourceManager::GetStream(System::String* name) {
        return GetStream2(name, nullptr);
    }
    
    System::IO::UnmanagedMemoryStream* ResourceManager::GetStream2(System::String* name, System::Globalization::CultureInfo* culture) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((culture ==  nullptr)) 
        {
            culture = System::Globalization::CultureInfo::get_CurrentUICulture();
        }
        ResourceSet *set;
        {
            cli::lock_guard{thisLock};
            set = InternalGetResourceSet_344f5edc45d300ea(culture, true, true);
        }
        return set->GetStream(name, this->ignoreCase);
    }
    
    ResourceSet* ResourceManager::InternalGetResourceSet_344f5edc45d300ea(System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents) {
        if((culture ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("key"));
        }
        ResourceSet *set = nullptr;
        set = cli::cast<ResourceSet*>(this->ResourceSets->get_Item_d75c6e706b965758(culture));
        if((set != nullptr)) 
        {
            return set;
        }
        if(NonExistent->Contains_be7d0f2741618cb4(culture)) 
        {
            return nullptr;
        }
        if(System::Reflection::Assembly::op_Inequality(this->MainAssembly, nullptr)) 
        {
            System::Globalization::CultureInfo *resourceCulture = culture;
            if(culture->Equals_ed975d2f4a7d193e(this->neutral_culture)) 
            {
                resourceCulture = System::Globalization::CultureInfo::get_InvariantCulture();
            }
            System::IO::Stream *stream = nullptr;
            System::String *filename = GetResourceFileName_202d27086a3c543f(resourceCulture);
            if(!(resourceCulture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture()))) 
            {
                System::Version *sat_version = GetSatelliteContractVersion(this->MainAssembly);
                try {
                    System::Reflection::Assembly *a = this->MainAssembly->GetSatelliteAssemblyNoThrow(resourceCulture, sat_version);
                    if(System::Reflection::Assembly::op_Inequality(a, nullptr)) 
                    {
                        stream = a->GetManifestResourceStream_b395b331908084e(filename);
                        if((stream ==  nullptr)) 
                        {
                            stream = GetManifestResourceStreamNoCase(a, filename);
                        }
                    }
                }
                catch(System::Exception*) {
                }
            }
             else 
            {
                stream = this->MainAssembly->GetManifestResourceStream_6ad572412eedcffd(this->resourceSource, filename);
                if((stream ==  nullptr)) 
                {
                    stream = GetManifestResourceStreamNoCase(this->MainAssembly, filename);
                }
            }
            if(((stream != nullptr) && createIfNotExists)) 
            {
                cli::array<System::Object*> *args = (new cli::array<System::Object*>({stream}));
                set = cli::cast<ResourceSet*>(System::Activator::CreateInstance9(this->resourceSetType, args));
            }
             else 
            {
                if(resourceCulture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture())) 
                {
                    throw AssemblyResourceMissing(filename);
                }
            }
        }
         else 
        {
            if(((this->resourceDir != nullptr) || (this->BaseNameField != nullptr))) 
            {
                System::String *filename = GetResourceFilePath(culture);
                if((createIfNotExists && System::IO::File::Exists(filename))) 
                {
                    cli::array<System::Object*> *args = (new cli::array<System::Object*>({filename}));
                    set = cli::cast<ResourceSet*>(System::Activator::CreateInstance9(this->resourceSetType, args));
                }
                 else 
                {
                    if(culture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture())) 
                    {
                        System::String *msg = System::String::Format5(_T("Could not find any resources appropriate for the specified culture (or the neutral culture) on disk.{0}baseName: {1}  locationInfo: {2}  fileName: {3}"), (new cli::array<System::Object*>({System::Environment::get_NewLine(), this->BaseNameField, _T("<null>"), GetResourceFileName_202d27086a3c543f(culture)})));
                        throw cli::gcnew<MissingManifestResourceException>(msg);
                    }
                }
            }
        }
        if(((set ==  nullptr) && tryParents)) 
        {
            if(!(culture->Equals_ed975d2f4a7d193e(System::Globalization::CultureInfo::get_InvariantCulture()))) 
            {
                set = InternalGetResourceSet_344f5edc45d300ea(culture->get_Parent_87d5fb2f5c680cba(), createIfNotExists, tryParents);
            }
        }
        if((set != nullptr)) 
        {
            this->ResourceSets->set_Item_84c7e24d9caa09(culture, set);
        }
         else 
        {
            NonExistent->set_Item_84c7e24d9caa09(culture, culture);
        }
        return set;
    }
    
    void ResourceManager::ReleaseAllResources_573e34f7a4ef7eb8() {
        {
            cli::lock_guard{this};
            for(auto tmp_320 : this->ResourceSets->get_Values_4ed88b5f6e59ef25()) {
                auto r = cli::cast<ResourceSet*>(tmp_320);
                r->Close_aae27c392ca1f5fd();
            }
            this->ResourceSets->Clear_f1f405c8fa63a059();
        }
    }
    
    System::Globalization::CultureInfo* ResourceManager::GetNeutralResourcesLanguage(System::Reflection::Assembly* a) {
        cli::array<System::Object*> *attrs = a->GetCustomAttributes_30a143c7dfd48919(cli::typeof<System::Type>::info, false);
        if((attrs->get_Length() ==  0)) 
        {
            return System::Globalization::CultureInfo::get_InvariantCulture();
        }
         else 
        {
            NeutralResourcesLanguageAttribute *res_attr = cli::cast<NeutralResourcesLanguageAttribute*>(attrs->at(0));
            return cli::gcnew<System::Globalization::CultureInfo>(res_attr->get_CultureName());
        }
    }
    
    System::Version* ResourceManager::GetSatelliteContractVersion(System::Reflection::Assembly* a) {
        cli::array<System::Object*> *attrs = a->GetCustomAttributes_30a143c7dfd48919(cli::typeof<System::Type>::info, false);
        if((attrs->get_Length() ==  0)) 
        {
            return nullptr;
        }
         else 
        {
            SatelliteContractVersionAttribute *sat_attr = cli::cast<SatelliteContractVersionAttribute*>(attrs->at(0));
            return cli::gcnew<System::Version>(sat_attr->get_Version());
        }
    }
    
    MissingManifestResourceException* ResourceManager::AssemblyResourceMissing(System::String* fileName) {
        System::Reflection::AssemblyName *aname = System::Reflection::Assembly::op_Inequality(this->MainAssembly, nullptr) ? this->MainAssembly->GetName_7088a38b93d0dcc5() : nullptr;
        System::String *manifestName = GetManifestResourceName(fileName);
        System::String *msg = System::String::Format3(_T("Could not find any resources appropriate for the specified culture or the neutral culture.  Make sure \"{0}\" was correctly embedded or linked into assembly \"{1}\" at compile time, or that all the satellite assemblies required are loadable and fully signed."), manifestName, (aname != nullptr) ? aname->get_Name() : System::String::Empty);
        throw cli::gcnew<MissingManifestResourceException>(msg);
    }
    
    System::String* ResourceManager::GetManifestResourceName(System::String* fn) {
        System::String *resourceName = nullptr;
        if(System::Type::op_Inequality2(this->resourceSource, nullptr)) 
        {
            if(((this->resourceSource->get_Namespace_cb4ed37007083e7f() != nullptr) && (this->resourceSource->get_Namespace_cb4ed37007083e7f()->get_Length() > 0))) 
            {
                resourceName = System::String::Concat6(this->resourceSource->get_Namespace_cb4ed37007083e7f(), _T("."), fn);
            }
             else 
            {
                resourceName = fn;
            }
        }
         else 
        {
            resourceName = fn;
        }
        return resourceName;
    }
    
    System::String* ResourceManager::get_BaseName_a8e0203402ec7972() {
        return this->BaseNameField;
    }
    
    bool ResourceManager::get_IgnoreCase_5f0cb8373ce10f99() {
        return this->ignoreCase;
    }
    
    bool ResourceManager::set_IgnoreCase_7f19d1f9cb717654(bool value) {
        this->ignoreCase = value;
        return get_IgnoreCase_5f0cb8373ce10f99();
    }
    
    System::Type* ResourceManager::get_ResourceSetType_4d7f35a8beac6509() {
        return this->resourceSetType;
    }
    
    UltimateResourceFallbackLocation ResourceManager::get_FallbackLocation() {
        return this->fallbackLocation;
    }
    
    UltimateResourceFallbackLocation ResourceManager::set_FallbackLocation(UltimateResourceFallbackLocation value) {
        this->fallbackLocation = value;
        return get_FallbackLocation();
    }
    
}}
namespace System { namespace Resources {
    
    
    void ResourceEnumerator::constructor(ResourceReader* readerToEnumerate) {
        this->reader = readerToEnumerate;
        FillCache();
    }
    
    bool ResourceEnumerator::MoveNext() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        if(this->finished) 
        {
            return false;
        }
        if((++this->index < this->reader->resourceCount)) 
        {
            return true;
        }
        this->finished = true;
        return false;
    }
    
    void ResourceEnumerator::Reset() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        this->index = -1;
        this->finished = false;
    }
    
    void ResourceEnumerator::FillCache() {
        if((this->reader->cache != nullptr)) 
        {
            return;
        }
        {
            cli::lock_guard{this->reader->cache_lock};
            if((this->reader->cache != nullptr)) 
            {
                return;
            }
            cli::array<ResourceCacheItem> *resources = (new cli::array<ResourceCacheItem>(this->reader->resourceCount));
            this->reader->LoadResourceValues(resources);
            this->reader->cache = resources;
        }
    }
    
    int32_t ResourceEnumerator::get_Index() {
        return this->index;
    }
    
    System::Collections::DictionaryEntry ResourceEnumerator::get_Entry() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        if((this->index < 0)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Enumeration has not started. Call MoveNext."));
        }
        return cli::ctor<System::Collections::DictionaryEntry>(this->get_Key(), this->get_Value());
    }
    
    System::Object* ResourceEnumerator::get_Key() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        if((this->index < 0)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Enumeration has not started. Call MoveNext."));
        }
        return this->reader->cache->at(this->index)->ResourceName;
    }
    
    System::Object* ResourceEnumerator::get_Value() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        if((this->index < 0)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Enumeration has not started. Call MoveNext."));
        }
        return this->reader->cache->at(this->index)->ResourceValue;
    }
    
    System::IO::UnmanagedMemoryStream* ResourceEnumerator::get_ValueAsStream() {
        if((this->reader->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
        if((this->index < 0)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Enumeration has not started. Call MoveNext."));
        }
        return this->reader->ResourceValueAsStream(cli::cast<System::String*>(this->get_Key()), this->index);
    }
    
    System::Object* ResourceEnumerator::get_Current() {
        return cli::box(this->get_Entry());
    }
    
}}
namespace System { namespace Resources {
    
    
    void ResourceReader::constructor(System::IO::Stream* stream) {
        if((stream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("stream"));
        }
        if(!(stream->get_CanRead_50a10d564be8aaa2())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Stream was not readable."));
        }
        this->reader = cli::gcnew<System::IO::BinaryReader>(stream, System::Text::Encoding::get_UTF8());
        this->formatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>(nullptr, cli::ctor<System::Runtime::Serialization::StreamingContext>((System::Runtime::Serialization::StreamingContextStates)12L));
        ReadHeaders();
    }
    
    void ResourceReader::constructor(System::String* fileName) {
        this->reader = cli::gcnew<System::IO::BinaryReader>(cli::gcnew<System::IO::FileStream>(fileName, System::IO::FileMode::Open, System::IO::FileAccess::Read, System::IO::FileShare::Read));
        this->formatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>(nullptr, cli::ctor<System::Runtime::Serialization::StreamingContext>((System::Runtime::Serialization::StreamingContextStates)12L));
        ReadHeaders();
    }
    
    void ResourceReader::ReadHeaders() {
        try {
            int32_t manager_magic = this->reader->ReadInt32_e79bbed3af40f25f();
            if((manager_magic != ResourceManager::MagicNumber)) 
            {
                throw cli::gcnew<System::ArgumentException>(System::String::Format2(_T("Stream is not a valid .resources file, magic=0x{0:x}"), cli::box(manager_magic)));
            }
            int32_t manager_ver = this->reader->ReadInt32_e79bbed3af40f25f();
            int32_t manager_len = this->reader->ReadInt32_e79bbed3af40f25f();
            if((manager_ver > ResourceManager::HeaderVersionNumber)) 
            {
                this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31((int64_t)(manager_len), System::IO::SeekOrigin::Current);
            }
             else 
            {
                System::String *reader_class = this->reader->ReadString_7b59e815ae441879();
                if(!(reader_class->StartsWith(_T("System.Resources.ResourceReader")))) 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("This .resources file requires reader class "), reader_class));
                }
                System::String *set_class = this->reader->ReadString_7b59e815ae441879();
                if((!(set_class->StartsWith(cli::typeof<System::Type>::info->get_FullName_7e8fa72ba225e1a4())) && !(set_class->StartsWith(_T("System.Resources.RuntimeResourceSet"))))) 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("This .resources file requires set class "), set_class));
                }
            }
            this->resource_ver = this->reader->ReadInt32_e79bbed3af40f25f();
            if(((this->resource_ver != 1) && (this->resource_ver != 2))) 
            {
                throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("This .resources file requires unsupported set class version: "), cli::import(this->resource_ver)->ToString_1636a0751cb9ac11()));
            }
            this->resourceCount = this->reader->ReadInt32_e79bbed3af40f25f();
            this->typeCount = this->reader->ReadInt32_e79bbed3af40f25f();
            this->typeNames = (new cli::array<System::String*>(this->typeCount));
            for(int32_t i = 0; (i < this->typeCount); i++){
                this->typeNames->at(i) = this->reader->ReadString_7b59e815ae441879();
            }
            int32_t pad_align = (int32_t)(this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13() & 7L);
            int32_t pad_chars = 0;
            if((pad_align != 0)) 
            {
                pad_chars = (8 - pad_align);
            }
            for(int32_t i = 0; (i < pad_chars); i++){
                unsigned char pad_byte = this->reader->ReadByte_a8e935915607659b();
                if(((int32_t)(pad_byte) != (int32_t)(_T("PAD")->get_Chars((i % 3))))) 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Malformed .resources file (padding values incorrect)"));
                }
            }
            this->hashes = (new cli::array<int32_t>(this->resourceCount));
            for(int32_t i = 0; (i < this->resourceCount); i++){
                this->hashes->at(i) = this->reader->ReadInt32_e79bbed3af40f25f();
            }
            cli::array<int64_t> *positions = (new cli::array<int64_t>(this->resourceCount));
            for(int32_t i = 0; (i < this->resourceCount); i++) {
                positions->at(i) = (int64_t)(this->reader->ReadInt32_e79bbed3af40f25f());
            }
            this->dataSectionOffset = this->reader->ReadInt32_e79bbed3af40f25f();
            this->nameSectionOffset = this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13();
            int64_t origPosition = this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13();
            this->infos = (new cli::array<ResourceInfo>(this->resourceCount));
            for(int32_t i = 0; (i < this->resourceCount); i++) {
                CreateResourceInfo(positions->at(i), this->infos->at(i));
            }
            this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(origPosition, System::IO::SeekOrigin::Begin);
            positions = nullptr;
        }
        catch(System::IO::EndOfStreamException* e) {
            throw cli::gcnew<System::ArgumentException>(_T("Stream is not a valid .resources file!  It was possibly truncated."), e);
        }
    }
    
    void ResourceReader::CreateResourceInfo(int64_t position, ResourceInfo info) {
        int64_t pos = (position + this->nameSectionOffset);
        this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(pos, System::IO::SeekOrigin::Begin);
        int32_t len = Read7BitEncodedInt();
        cli::array<unsigned char> *str = (new cli::array<unsigned char>(len));
        this->reader->Read_e56820a6e9e603d8(str, 0, len);
        System::String *resourceName = System::Text::Encoding::get_Unicode()->GetString_12d22365648431d7(str);
        int64_t data_offset = (int64_t)((this->reader->ReadInt32_e79bbed3af40f25f() + this->dataSectionOffset));
        this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(data_offset, System::IO::SeekOrigin::Begin);
        int32_t type_index = Read7BitEncodedInt();
        info = cli::ctor<ResourceInfo>(resourceName, this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13(), type_index);
    }
    
    int32_t ResourceReader::Read7BitEncodedInt() {
        int32_t ret = 0;
        int32_t shift = 0;
        unsigned char b;
        do {
            b = this->reader->ReadByte_a8e935915607659b();
            ret = (ret | (((int32_t)(b) & 127) << (shift & 31)));
            (shift = shift + 7);
        }
        while((((int32_t)(b) & 128) ==  128));
        return ret;
    }
    
    System::Object* ResourceReader::ReadValueVer2(int32_t type_index) {
        switch((PredefinedResourceType)(type_index)) {
            case PredefinedResourceType::Null: case_1279: {
                return nullptr;
            }
            case PredefinedResourceType::String2: case_1280: {
                return this->reader->ReadString_7b59e815ae441879();
            }
            case PredefinedResourceType::Bool: case_1281: {
                return cli::box(this->reader->ReadBoolean_ffac632a26c093b3());
            }
            case PredefinedResourceType::Char2: case_1282: {
                return cli::box((char16_t)this->reader->ReadUInt16_12c320b7592221bf());
            }
            case PredefinedResourceType::Byte2: case_1283: {
                return cli::box(this->reader->ReadByte_a8e935915607659b());
            }
            case PredefinedResourceType::SByte2: case_1284: {
                return cli::box(this->reader->ReadSByte_de4608c911742c46());
            }
            case PredefinedResourceType::Int162: case_1285: {
                return cli::box(this->reader->ReadInt16_cc677a86798a4911());
            }
            case PredefinedResourceType::UInt162: case_1286: {
                return cli::box(this->reader->ReadUInt16_12c320b7592221bf());
            }
            case PredefinedResourceType::Int322: case_1287: {
                return cli::box(this->reader->ReadInt32_e79bbed3af40f25f());
            }
            case PredefinedResourceType::UInt322: case_1288: {
                return cli::box(this->reader->ReadUInt32_3acc4b6c3fc21142());
            }
            case PredefinedResourceType::Int642: case_1289: {
                return cli::box(this->reader->ReadInt64_324b86c0d5995c31());
            }
            case PredefinedResourceType::UInt642: case_1290: {
                return cli::box(this->reader->ReadUInt64_af37b8afdb6259c1());
            }
            case PredefinedResourceType::Single2: case_1291: {
                return cli::box(this->reader->ReadSingle_4a83108898ca41d7());
            }
            case PredefinedResourceType::Double2: case_1292: {
                return cli::box(this->reader->ReadDouble_c4cf5262e4ca9658());
            }
            case PredefinedResourceType::Decimal2: case_1293: {
                return cli::box(this->reader->ReadDecimal_289b04b837613d00());
            }
            case PredefinedResourceType::DateTime2: case_1294: {
                return cli::box(cli::ctor<System::DateTime>(this->reader->ReadInt64_324b86c0d5995c31()));
            }
            case PredefinedResourceType::TimeSpan2: case_1295: {
                return cli::box(cli::ctor<System::TimeSpan>(this->reader->ReadInt64_324b86c0d5995c31()));
            }
            case PredefinedResourceType::ByteArray: case_1296: {
                return this->reader->ReadBytes_ff8723a8077b7798(this->reader->ReadInt32_e79bbed3af40f25f());
            }
            case PredefinedResourceType::Stream2: case_1297: {
                cli::array<unsigned char> *bytes = (new cli::array<unsigned char>((int32_t)this->reader->ReadUInt32_3acc4b6c3fc21142()));
                this->reader->Read_e56820a6e9e603d8(bytes, 0, bytes->get_Length());
                return cli::gcnew<System::IO::MemoryStream>(bytes);
            }
        }
        (type_index = type_index - 64);
        return ReadNonPredefinedValue(System::Type::GetType5(this->typeNames->at(type_index), true));
    }
    
    System::Object* ResourceReader::ReadValueVer1(System::Type* type) {
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return this->reader->ReadString_7b59e815ae441879();
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadInt32_e79bbed3af40f25f());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadByte_a8e935915607659b());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadDouble_c4cf5262e4ca9658());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadInt16_cc677a86798a4911());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadInt64_324b86c0d5995c31());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadSByte_de4608c911742c46());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadSingle_4a83108898ca41d7());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(cli::ctor<System::TimeSpan>(this->reader->ReadInt64_324b86c0d5995c31()));
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadUInt16_12c320b7592221bf());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadUInt32_3acc4b6c3fc21142());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadUInt64_af37b8afdb6259c1());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(this->reader->ReadDecimal_289b04b837613d00());
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return cli::box(cli::ctor<System::DateTime>(this->reader->ReadInt64_324b86c0d5995c31()));
        }
        return ReadNonPredefinedValue(type);
    }
    
    System::Object* ResourceReader::ReadNonPredefinedValue(System::Type* exp_type) {
        System::Object *obj = this->formatter->Deserialize_19aeb6df512c35cb(this->reader->get_BaseStream_f687c258329b093a());
        if(System::Type::op_Inequality2(obj->GetType(), exp_type)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Deserialized object is wrong type"));
        }
        return obj;
    }
    
    void ResourceReader::LoadResourceValues(cli::array<ResourceCacheItem>* store) {
        ResourceInfo ri;
        System::Object *value;
        {
            cli::lock_guard{this->readerLock};
            for(int32_t i = 0; (i < this->resourceCount); i++){
                ri = this->infos->at(i);
                if((ri->TypeIndex ==  -1)) 
                {
                    store->at(i) = cli::ctor<ResourceCacheItem>(ri->ResourceName, nullptr);
                    continue;
                }
                this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(ri->ValuePosition, System::IO::SeekOrigin::Begin);
                if((this->resource_ver ==  2)) 
                {
                    value = ReadValueVer2(ri->TypeIndex);
                }
                 else 
                {
                    value = ReadValueVer1(System::Type::GetType5(this->typeNames->at(ri->TypeIndex), true));
                }
                store->at(i) = cli::ctor<ResourceCacheItem>(ri->ResourceName, value);
            }
        }
    }
    
    System::IO::UnmanagedMemoryStream* ResourceReader::ResourceValueAsStream(System::String* name, int32_t index) {
        ResourceInfo ri = this->infos->at(index);
        if(((int32_t)(ri->TypeIndex) != 33)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(System::String::Format2(_T("Resource \'{0}\' was not a Stream. Use GetObject() instead."), name));
        }
        {
            cli::lock_guard{this->readerLock};
            this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(ri->ValuePosition, System::IO::SeekOrigin::Begin);
            int64_t slen = (int64_t)(this->reader->ReadInt32_e79bbed3af40f25f());
            System::IO::UnmanagedMemoryStream *basePtrStream = cli::as<System::IO::UnmanagedMemoryStream*>(this->reader->get_BaseStream_f687c258329b093a());
            if((basePtrStream != nullptr)) 
            {
                return cli::gcnew<System::IO::UnmanagedMemoryStream>(basePtrStream->get_PositionPointer(), slen);
            }
             else 
            {
                auto storey_321 = cli::gcnew<_ResourceValueAsStream_c__AnonStorey19>();
                storey_321->ptr = System::Runtime::InteropServices::Marshal::AllocHGlobal2((int32_t)slen);
                unsigned char *addr = (unsigned char*)(cli::import(storey_321->ptr)->ToPointer());
                System::IO::UnmanagedMemoryStream *ms = cli::gcnew<System::IO::UnmanagedMemoryStream>(addr, slen, slen, System::IO::FileAccess::ReadWrite);
                ms->add_Closed(cli::bind(storey_321, &_ResourceValueAsStream_c__AnonStorey19::__m__F));
                cli::array<unsigned char> *bytes = (new cli::array<unsigned char>((int32_t)(slen < 1024L) ? slen : 1024L));
                while((slen > 0L)) {
                    int32_t x = this->reader->Read_e56820a6e9e603d8(bytes, 0, (int32_t)System::Math::Min6((int64_t)(bytes->get_Length()), slen));
                    if((x ==  0)) 
                    {
                        throw cli::gcnew<System::FormatException>(_T("The resource data is corrupt. Resource stream ended"));
                    }
                    ms->Write_1f8a1dbe71b0eb89(bytes, 0, x);
                    (slen = slen - (int64_t)(x));
                }
                ms->Seek_df5b3eadfe9adf31(0L, System::IO::SeekOrigin::Begin);
                return ms;
            }
        }
    }
    
    void ResourceReader::Close() {
        Dispose2(true);
    }
    
    void ResourceReader::Dispose() {
        Dispose2(true);
    }
    
    System::Collections::IDictionaryEnumerator* ResourceReader::GetEnumerator() {
        if((this->reader ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("ResourceReader is closed."));
        }
         else 
        {
            return cli::gcnew<ResourceEnumerator>(this);
        }
    }
    
    System::Collections::IEnumerator* ResourceReader::GetEnumerator2() {
        return cli::cast<IResourceReader*>(this)->GetEnumerator_5461f24f4ddc9df4();
    }
    
    void ResourceReader::GetResourceData(System::String* resourceName, System::String* resourceType, cli::array<unsigned char>* resourceData) {
        if((resourceName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("resourceName"));
        }
        ResourceEnumerator *en = cli::gcnew<ResourceEnumerator>(this);
        while(en->MoveNext()) if(System::String::op_Equality(cli::cast<System::String*>(en->get_Key()), resourceName)) 
        {
            GetResourceDataAt(en->get_Index(), resourceType, resourceData);
            return;
        }
        throw cli::gcnew<System::ArgumentException>(System::String::Format2(_T("Specified resource not found: {0}"), resourceName));
    }
    
    void ResourceReader::GetResourceDataAt(int32_t index, System::String* resourceType, cli::array<unsigned char>* data) {
        ResourceInfo ri = this->infos->at(index);
        int32_t type_index = ri->TypeIndex;
        if((type_index ==  -1)) 
        {
            throw cli::gcnew<System::FormatException>(_T("The resource data is corrupt"));
        }
        {
            cli::lock_guard{this->readerLock};
            this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31(ri->ValuePosition, System::IO::SeekOrigin::Begin);
            int64_t pos2 = this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13();
            if((this->resource_ver ==  2)) 
            {
                if((type_index >= 64)) 
                {
                    int32_t typenameidx = (type_index - 64);
                    if((typenameidx >= this->typeNames->get_Length())) 
                    {
                        throw cli::gcnew<System::FormatException>(_T("The resource data is corrupt. Invalid index to types"));
                    }
                    resourceType = this->typeNames->at(typenameidx);
                }
                 else 
                {
                    resourceType = cli::concat(_T("ResourceTypeCode."), cli::box((PredefinedResourceType)(type_index)));
                }
                ReadValueVer2(type_index);
            }
             else 
            {
                resourceType = _T("ResourceTypeCode.Null");
                ReadValueVer1(System::Type::GetType5(this->typeNames->at(type_index), true));
            }
            int32_t datalen = (int32_t)(this->reader->get_BaseStream_f687c258329b093a()->get_Position_5e75d5c458401f13() - pos2);
            this->reader->get_BaseStream_f687c258329b093a()->Seek_df5b3eadfe9adf31((int64_t)(-(datalen)), System::IO::SeekOrigin::Current);
            data = (new cli::array<unsigned char>(datalen));
            this->reader->get_BaseStream_f687c258329b093a()->Read_c0d6dde3943b413e(data, 0, datalen);
        }
    }
    
    void ResourceReader::Dispose2(bool disposing) {
        if(disposing) 
        {
            if((this->reader != nullptr)) 
            {
                this->reader->Close_7e21193605247e18();
            }
        }
        this->reader = nullptr;
        this->hashes = nullptr;
        this->infos = nullptr;
        this->typeNames = nullptr;
        this->cache = nullptr;
    }
    
}}
namespace System { namespace Resources {
    
    
    void ResourceSet::constructor() {
        this->Table = cli::gcnew<System::Collections::Hashtable>();
        this->resources_read = true;
    }
    
    void ResourceSet::constructor(IResourceReader* reader) {
        if((reader ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("reader"));
        }
        this->Table = cli::gcnew<System::Collections::Hashtable>();
        this->Reader = reader;
    }
    
    void ResourceSet::constructor(System::IO::Stream* stream) {
        this->Table = cli::gcnew<System::Collections::Hashtable>();
        this->Reader = cli::gcnew<ResourceReader>(stream);
    }
    
    void ResourceSet::constructor(System::IO::UnmanagedMemoryStream* stream) {
        this->Table = cli::gcnew<System::Collections::Hashtable>();
        this->Reader = cli::gcnew<ResourceReader>(stream);
    }
    
    void ResourceSet::constructor(System::String* fileName) {
        this->Table = cli::gcnew<System::Collections::Hashtable>();
        this->Reader = cli::gcnew<ResourceReader>(fileName);
    }
    
    void ResourceSet::Close_aae27c392ca1f5fd() {
        Dispose();
    }
    
    void ResourceSet::Dispose() {
        Dispose_7a4cf41303887492(true);
        System::GC::SuppressFinalize(this);
    }
    
    void ResourceSet::Dispose_7a4cf41303887492(bool disposing) {
        if(disposing) 
        {
            if((this->Reader != nullptr)) 
            {
                this->Reader->Close_9051b9e2cc8ad458();
            }
        }
        this->Reader = nullptr;
        this->Table = nullptr;
        this->table_nocase = nullptr;
    }
    
    System::Type* ResourceSet::GetDefaultReader_8dd3156ec8ecd598() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* ResourceSet::GetDefaultWriter_d422ec36e345a192() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Collections::IDictionaryEnumerator* ResourceSet::GetEnumerator_511466a1e09ff2() {
        if(this->get_IsDisposed()) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        ReadResources_9eaf1854611e4818();
        return this->Table->GetEnumerator_47df71de9b680069();
    }
    
    System::Collections::IEnumerator* ResourceSet::GetEnumerator2() {
        return this->GetEnumerator_511466a1e09ff2();
    }
    
    System::Object* ResourceSet::GetObjectInternal(System::String* name, bool ignoreCase) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if(this->get_IsDisposed()) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        ReadResources_9eaf1854611e4818();
        if(!(ignoreCase)) 
        {
            return this->Table->get_Item_d75c6e706b965758(name);
        }
        if((this->table_nocase ==  nullptr)) 
        {
            {
                cli::lock_guard{this->Table};
                if((this->table_nocase ==  nullptr)) 
                {
                    System::Collections::Hashtable *ht = cli::gcnew<System::Collections::Hashtable>(System::StringComparer::get_InvariantCultureIgnoreCase());
                    for(auto tmp_322 : this->Table) {
                        auto de = cli::cast<System::Collections::DictionaryEntry>(tmp_322);
                        {
                            ht->Add_3f7ab157bcb41156(de->get_Key(), de->get_Value());
                        }
                    }
                    this->table_nocase = ht;
                }
            }
        }
        return this->table_nocase->get_Item_d75c6e706b965758(name);
    }
    
    System::Object* ResourceSet::GetObject_2d3d6866d6caab0d(System::String* name) {
        return GetObjectInternal(name, false);
    }
    
    System::Object* ResourceSet::GetObject_7df952fd6236c0e7(System::String* name, bool ignoreCase) {
        return GetObjectInternal(name, ignoreCase);
    }
    
    System::String* ResourceSet::GetStringInternal(System::String* name, bool ignoreCase) {
        System::Object *value = GetObject_7df952fd6236c0e7(name, ignoreCase);
        if((value ==  nullptr)) 
        {
            return nullptr;
        }
        System::String *s = cli::as<System::String*>(value);
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(System::String::Format2(_T("Resource \'{0}\' is not a String. Use GetObject instead."), name));
        }
        return s;
    }
    
    System::String* ResourceSet::GetString_965a113282dfe2fc(System::String* name) {
        return GetStringInternal(name, false);
    }
    
    System::String* ResourceSet::GetString_4a396ac3e6731098(System::String* name, bool ignoreCase) {
        return GetStringInternal(name, ignoreCase);
    }
    
    void ResourceSet::ReadResources_9eaf1854611e4818() {
        if(this->resources_read) 
        {
            return;
        }
        if(this->get_IsDisposed()) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        {
            cli::lock_guard{this->Table};
            if(this->resources_read) 
            {
                return;
            }
            System::Collections::IDictionaryEnumerator *i = this->Reader->GetEnumerator_5461f24f4ddc9df4();
            i->Reset_bcd82381eed41868();
            while(i->MoveNext_4e78e145935f5417()) this->Table->Add_3f7ab157bcb41156(i->get_Key_ed7954531cb20258(), i->get_Value_889e0f410f0d67ef());
            this->resources_read = true;
        }
    }
    
    System::IO::UnmanagedMemoryStream* ResourceSet::GetStream(System::String* name, bool ignoreCase) {
        if(this->get_IsDisposed()) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        System::Collections::IDictionaryEnumerator *i = this->Reader->GetEnumerator_5461f24f4ddc9df4();
        i->Reset_bcd82381eed41868();
        while(i->MoveNext_4e78e145935f5417()) {
            if((System::String::Compare2(name, cli::cast<System::String*>(i->get_Key_ed7954531cb20258()), ignoreCase) ==  0)) 
            {
                return cli::cast<ResourceEnumerator*>(i)->get_ValueAsStream();
            }
        }
        return nullptr;
    }
    
    bool ResourceSet::get_IsDisposed() {
        return (this->Table ==  nullptr);
    }
    
}}
namespace System { namespace Resources {
    
    
    void TypeByNameObject::constructor(System::String* typeName, cli::array<unsigned char>* value) {
        this->TypeName = typeName;
        this->Value = cli::cast<cli::array<unsigned char>*>(cli::import(value)->Clone());
    }
    
}}
namespace System { namespace Resources {
    
    
    void StreamWrapper::constructor(System::IO::Stream* stream, bool closeAfterWrite) {
        this->Stream2 = stream;
        this->CloseAfterWrite = closeAfterWrite;
    }
    
}}
namespace System { namespace Resources {
    
    
    void ResourceWriter::constructor(System::IO::Stream* stream) {
        if((stream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("stream"));
        }
        if(!(stream->get_CanWrite_c8955eadfc77124c())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Stream was not writable."));
        }
        this->stream = stream;
    }
    
    void ResourceWriter::constructor(System::String* fileName) {
        if((fileName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fileName"));
        }
        this->stream = cli::gcnew<System::IO::FileStream>(fileName, System::IO::FileMode::Create, System::IO::FileAccess::Write);
    }
    
    void ResourceWriter::AddResource(System::String* name, cli::array<unsigned char>* value) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((this->resources ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The resource writer has already been closed and cannot be edited"));
        }
        if((this->resources->get_Item_c9a994fdd927bead(name) != nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Resource already present: "), name));
        }
        this->resources->Add_73ffb8be47e034c5(name, value);
    }
    
    void ResourceWriter::AddResource2(System::String* name, System::Object* value) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((this->resources ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The resource writer has already been closed and cannot be edited"));
        }
        if((this->resources->get_Item_c9a994fdd927bead(name) != nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Resource already present: "), name));
        }
        if(cli::is<System::IO::Stream>(value)) 
        {
            System::IO::Stream *stream = cli::as<System::IO::Stream*>(value);
            if(!(stream->get_CanSeek_8c8861ce02c6bdeb())) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Stream does not support seeking."));
            }
            if(!(cli::is<System::IO::MemoryStream>(value))) 
            {
                value = cli::gcnew<StreamWrapper>(stream, false);
            }
        }
        this->resources->Add_73ffb8be47e034c5(name, value);
    }
    
    void ResourceWriter::AddResource3(System::String* name, System::String* value) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((this->resources ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The resource writer has already been closed and cannot be edited"));
        }
        if((this->resources->get_Item_c9a994fdd927bead(name) != nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Resource already present: "), name));
        }
        this->resources->Add_73ffb8be47e034c5(name, value);
    }
    
    void ResourceWriter::AddResource4(System::String* name, System::IO::Stream* value) {
        AddResource2(name, cli::cast<System::Object*>(value));
    }
    
    void ResourceWriter::AddResource5(System::String* name, System::IO::Stream* value, bool closeAfterWrite) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((this->resources ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The resource writer has already been closed and cannot be edited"));
        }
        if((this->resources->get_Item_c9a994fdd927bead(name) != nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Resource already present: "), name));
        }
        if((this->stream ==  nullptr)) 
        {
            this->resources->Add_73ffb8be47e034c5(name, nullptr);
            return;
        }
        if(!(this->stream->get_CanSeek_8c8861ce02c6bdeb())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Stream does not support seeking."));
        }
        this->resources->Add_73ffb8be47e034c5(name, cli::gcnew<StreamWrapper>(value, true));
    }
    
    void ResourceWriter::Close() {
        Dispose2(true);
    }
    
    void ResourceWriter::Dispose() {
        Dispose2(true);
    }
    
    void ResourceWriter::Dispose2(bool disposing) {
        if(disposing) 
        {
            if((this->resources != nullptr)) 
            {
                Generate();
            }
            if((this->stream != nullptr)) 
            {
                this->stream->Close_59c62ed53ef2a481();
            }
            System::GC::SuppressFinalize(this);
        }
        this->resources = nullptr;
        this->stream = nullptr;
    }
    
    void ResourceWriter::AddResourceData(System::String* name, System::String* typeName, cli::array<unsigned char>* serializedData) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((typeName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("typeName"));
        }
        if((serializedData ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("serializedData"));
        }
        AddResource2(name, cli::gcnew<TypeByNameObject>(typeName, serializedData));
    }
    
    void ResourceWriter::Generate() {
        System::IO::BinaryWriter *writer;
        System::Runtime::Serialization::IFormatter *formatter;
        if((this->resources ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("The resource writer has already been closed and cannot be edited"));
        }
        writer = cli::gcnew<System::IO::BinaryWriter>(this->stream, System::Text::Encoding::get_UTF8());
        formatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>(nullptr, cli::ctor<System::Runtime::Serialization::StreamingContext>((System::Runtime::Serialization::StreamingContextStates)12L));
        writer->Write_6382fee822de735b(ResourceManager::MagicNumber);
        writer->Write_6382fee822de735b(ResourceManager::HeaderVersionNumber);
        System::IO::MemoryStream *resman_stream = cli::gcnew<System::IO::MemoryStream>();
        System::IO::BinaryWriter *resman = cli::gcnew<System::IO::BinaryWriter>(resman_stream, System::Text::Encoding::get_UTF8());
        System::String *type_name = nullptr;
        if((this->type_name_converter != nullptr)) 
        {
            type_name = this->type_name_converter->Invoke(cli::typeof<System::Type>::info);
        }
        if((type_name ==  nullptr)) 
        {
            type_name = cli::typeof<System::Type>::info->get_AssemblyQualifiedName_cea373c2171bd483();
        }
        resman->Write_6de303e680f3eff5(type_name);
        resman->Write_6de303e680f3eff5(cli::typeof<System::Type>::info->get_FullName_7e8fa72ba225e1a4());
        int32_t resman_len = (int32_t)resman_stream->get_Length_ddb8b0d061db5350();
        writer->Write_6382fee822de735b(resman_len);
        writer->Write_67008f3e2ece1dc3(resman_stream->GetBuffer_21f804ce00c165c2(), 0, resman_len);
        System::IO::MemoryStream *res_name_stream = cli::gcnew<System::IO::MemoryStream>();
        System::IO::BinaryWriter *res_name = cli::gcnew<System::IO::BinaryWriter>(res_name_stream, System::Text::Encoding::get_Unicode());
        System::IO::MemoryStream *res_data_stream = cli::gcnew<System::IO::MemoryStream>();
        System::IO::BinaryWriter *res_data = cli::gcnew<System::IO::BinaryWriter>(res_data_stream, System::Text::Encoding::get_UTF8());
        System::Collections::ArrayList *types = cli::gcnew<System::Collections::ArrayList>();
        cli::array<int32_t> *hashes = (new cli::array<int32_t>(this->resources->get_Count_78ce60b82e5a007()));
        cli::array<int32_t> *name_offsets = (new cli::array<int32_t>(this->resources->get_Count_78ce60b82e5a007()));
        int32_t count = 0;
        System::Collections::IDictionaryEnumerator *res_enum = this->resources->GetEnumerator_958c16317aeb4444();
        while(res_enum->MoveNext_4e78e145935f5417()) {
            hashes->at(count) = GetHash(cli::cast<System::String*>(res_enum->get_Key_ed7954531cb20258()));
            name_offsets->at(count) = (int32_t)res_name->get_BaseStream_6d7b07c4266897dc()->get_Position_5e75d5c458401f13();
            res_name->Write_6de303e680f3eff5(cli::cast<System::String*>(res_enum->get_Key_ed7954531cb20258()));
            res_name->Write_6382fee822de735b((int32_t)res_data->get_BaseStream_6d7b07c4266897dc()->get_Position_5e75d5c458401f13());
            if((res_enum->get_Value_889e0f410f0d67ef() ==  nullptr)) 
            {
                Write7BitEncodedInt(res_data, -1);
                count++;
                continue;
            }
            TypeByNameObject *tbn = cli::as<TypeByNameObject*>(res_enum->get_Value_889e0f410f0d67ef());
            System::Type *type = (tbn != nullptr) ? nullptr : res_enum->get_Value_889e0f410f0d67ef()->GetType();
            System::Object *typeObj = (tbn != nullptr) ? cli::cast<System::Object*>(tbn->TypeName) : type;
            switch((System::Type::op_Inequality2(type, nullptr) && !(type->get_IsEnum_bc85ea7b0a749db())) ? System::Type::GetTypeCode(type) : System::TypeCode::Empty) {
                case System::TypeCode::Decimal2: case System::TypeCode::Single2: case System::TypeCode::Double2: case System::TypeCode::SByte2: case System::TypeCode::Int162: case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::Byte2: case System::TypeCode::UInt162: case System::TypeCode::UInt322: case System::TypeCode::UInt642: case System::TypeCode::DateTime2: case System::TypeCode::String2: case_1298: {
                    break;
                }
                default: case_1299: {
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        break;
                    }
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        break;
                    }
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        break;
                    }
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        break;
                    }
                    if(!(types->Contains_f1c198d01147f1ee(typeObj))) 
                    {
                        types->Add_e6a92085999ce388(typeObj);
                    }
                    Write7BitEncodedInt(res_data, (64 + types->IndexOf_7e9811d6771f771d(typeObj)));
                    break;
                }
            }
            if((tbn != nullptr)) 
            {
                res_data->Write_748d33f0d08b528e(cli::cast<cli::array<unsigned char>*>(tbn->Value));
            }
             else 
            {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    res_data->Write_bc6e6f6f19ff3ad3(4);
                    res_data->Write_bc6e6f6f19ff3ad3(cli::unbox<unsigned char>(res_enum->get_Value_889e0f410f0d67ef()));
                }
                 else 
                {
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        res_data->Write_bc6e6f6f19ff3ad3(14);
                        res_data->Write_8ba35d7f9fe8fd4b(cli::unbox<System::Decimal>(res_enum->get_Value_889e0f410f0d67ef()));
                    }
                     else 
                    {
                        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                        {
                            res_data->Write_bc6e6f6f19ff3ad3(15);
                            res_data->Write_f3b14072d1fca470(cli::unbox<System::DateTime>(res_enum->get_Value_889e0f410f0d67ef())->get_Ticks());
                        }
                         else 
                        {
                            if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                            {
                                res_data->Write_bc6e6f6f19ff3ad3(13);
                                res_data->Write_f38f5e7709f76e33(cli::unbox<double>(res_enum->get_Value_889e0f410f0d67ef()));
                            }
                             else 
                            {
                                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                {
                                    res_data->Write_bc6e6f6f19ff3ad3(6);
                                    res_data->Write_263157ba3ce9bc51(cli::unbox<int16_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                }
                                 else 
                                {
                                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                    {
                                        res_data->Write_bc6e6f6f19ff3ad3(8);
                                        res_data->Write_6382fee822de735b(cli::unbox<int32_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                    }
                                     else 
                                    {
                                        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                        {
                                            res_data->Write_bc6e6f6f19ff3ad3(10);
                                            res_data->Write_f3b14072d1fca470(cli::unbox<int64_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                        }
                                         else 
                                        {
                                            if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                            {
                                                res_data->Write_bc6e6f6f19ff3ad3(5);
                                                res_data->Write_9eb51dc30d6ae1a5(cli::unbox<signed char>(res_enum->get_Value_889e0f410f0d67ef()));
                                            }
                                             else 
                                            {
                                                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                {
                                                    res_data->Write_bc6e6f6f19ff3ad3(12);
                                                    res_data->Write_6581fbda559dbe80(cli::unbox<float>(res_enum->get_Value_889e0f410f0d67ef()));
                                                }
                                                 else 
                                                {
                                                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                    {
                                                        res_data->Write_bc6e6f6f19ff3ad3(1);
                                                        res_data->Write_6de303e680f3eff5(cli::cast<System::String*>(res_enum->get_Value_889e0f410f0d67ef()));
                                                    }
                                                     else 
                                                    {
                                                        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                        {
                                                            res_data->Write_bc6e6f6f19ff3ad3(16);
                                                            res_data->Write_f3b14072d1fca470(cli::unbox<System::TimeSpan>(res_enum->get_Value_889e0f410f0d67ef())->get_Ticks());
                                                        }
                                                         else 
                                                        {
                                                            if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                            {
                                                                res_data->Write_bc6e6f6f19ff3ad3(7);
                                                                res_data->Write_7065176233f87453(cli::unbox<uint16_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                                            }
                                                             else 
                                                            {
                                                                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                                {
                                                                    res_data->Write_bc6e6f6f19ff3ad3(9);
                                                                    res_data->Write_805c393976ef76e5(cli::unbox<uint32_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                                                }
                                                                 else 
                                                                {
                                                                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                                    {
                                                                        res_data->Write_bc6e6f6f19ff3ad3(11);
                                                                        res_data->Write_694a3defde87112b(cli::unbox<uint64_t>(res_enum->get_Value_889e0f410f0d67ef()));
                                                                    }
                                                                     else 
                                                                    {
                                                                        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                                        {
                                                                            res_data->Write_bc6e6f6f19ff3ad3(32);
                                                                            cli::array<unsigned char> *data = cli::cast<cli::array<unsigned char>*>(res_enum->get_Value_889e0f410f0d67ef());
                                                                            res_data->Write_805c393976ef76e5((uint32_t)data->get_Length());
                                                                            res_data->Write_67008f3e2ece1dc3(data, 0, data->get_Length());
                                                                        }
                                                                         else 
                                                                        {
                                                                            if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                                            {
                                                                                res_data->Write_bc6e6f6f19ff3ad3(33);
                                                                                cli::array<unsigned char> *data = cli::cast<System::IO::MemoryStream*>(res_enum->get_Value_889e0f410f0d67ef())->ToArray_ebf8bde16e9d2ad6();
                                                                                res_data->Write_805c393976ef76e5((uint32_t)data->get_Length());
                                                                                res_data->Write_67008f3e2ece1dc3(data, 0, data->get_Length());
                                                                            }
                                                                             else 
                                                                            {
                                                                                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                                                                                {
                                                                                    StreamWrapper *sw = cli::cast<StreamWrapper*>(res_enum->get_Value_889e0f410f0d67ef());
                                                                                    sw->Stream2->set_Position_cfe1def757785ad(0L);
                                                                                    res_data->Write_bc6e6f6f19ff3ad3(33);
                                                                                    cli::array<unsigned char> *data = ReadStream(sw->Stream2);
                                                                                    res_data->Write_805c393976ef76e5((uint32_t)data->get_Length());
                                                                                    res_data->Write_67008f3e2ece1dc3(data, 0, data->get_Length());
                                                                                    if(sw->CloseAfterWrite) 
                                                                                    {
                                                                                        sw->Stream2->Close_59c62ed53ef2a481();
                                                                                    }
                                                                                }
                                                                                 else 
                                                                                {
                                                                                    formatter->Serialize_617c75444546bb4e(res_data->get_BaseStream_6d7b07c4266897dc(), res_enum->get_Value_889e0f410f0d67ef());
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            count++;
        }
        System::Array::template Sort_2<int32_t, int32_t>(hashes, name_offsets);
        writer->Write_6382fee822de735b(2);
        writer->Write_6382fee822de735b(this->resources->get_Count_78ce60b82e5a007());
        writer->Write_6382fee822de735b(types->get_Count_2354963792616712());
        for(auto tmp_323 : types) {
            auto type = cli::cast<System::Object*>(tmp_323);
            {
                if(cli::is<System::Type>(type)) 
                {
                    writer->Write_6de303e680f3eff5(cli::cast<System::Type*>(type)->get_AssemblyQualifiedName_cea373c2171bd483());
                }
                 else 
                {
                    writer->Write_6de303e680f3eff5(cli::cast<System::String*>(type));
                }
            }
        }
        int32_t pad_align = (int32_t)(writer->get_BaseStream_6d7b07c4266897dc()->get_Position_5e75d5c458401f13() & 7L);
        int32_t pad_chars = 0;
        if((pad_align != 0)) 
        {
            pad_chars = (8 - pad_align);
        }
        for(int32_t i = 0; (i < pad_chars); i++) {
            writer->Write_bc6e6f6f19ff3ad3((unsigned char)_T("PAD")->get_Chars((i % 3)));
        }
        for(int32_t i = 0; (i < this->resources->get_Count_78ce60b82e5a007()); i++) {
            writer->Write_6382fee822de735b(hashes->at(i));
        }
        for(int32_t i = 0; (i < this->resources->get_Count_78ce60b82e5a007()); i++) {
            writer->Write_6382fee822de735b(name_offsets->at(i));
        }
        int32_t data_offset = (((int32_t)writer->get_BaseStream_6d7b07c4266897dc()->get_Position_5e75d5c458401f13() + (int32_t)res_name_stream->get_Length_ddb8b0d061db5350()) + 4);
        writer->Write_6382fee822de735b(data_offset);
        writer->Write_67008f3e2ece1dc3(res_name_stream->GetBuffer_21f804ce00c165c2(), 0, (int32_t)res_name_stream->get_Length_ddb8b0d061db5350());
        writer->Write_67008f3e2ece1dc3(res_data_stream->GetBuffer_21f804ce00c165c2(), 0, (int32_t)res_data_stream->get_Length_ddb8b0d061db5350());
        res_name->Close_333af8c4ea41df43();
        res_data->Close_333af8c4ea41df43();
        writer->Flush_3f4412918277f178();
        this->resources = nullptr;
    }
    
    cli::array<unsigned char>* ResourceWriter::ReadStream(System::IO::Stream* stream) {
        cli::array<unsigned char> *buff = (new cli::array<unsigned char>((int32_t)stream->get_Length_ddb8b0d061db5350()));
        int32_t pos = 0;
        do {
            int32_t n = stream->Read_c0d6dde3943b413e(buff, pos, (buff->get_Length() - pos));
            if((n ==  0)) 
            {
                break;
            }
            (pos = pos + n);
        }
        while(((int64_t)(pos) < stream->get_Length_ddb8b0d061db5350()));
        return buff;
    }
    
    int32_t ResourceWriter::GetHash(System::String* name) {
        uint32_t hash = 5381U;
        for(int32_t i = 0; (i < name->get_Length()); i++) {
            hash = (((hash << 5) + hash) ^ (uint32_t)(name->get_Chars(i)));
        }
        return (int32_t)hash;
    }
    
    void ResourceWriter::Write7BitEncodedInt(System::IO::BinaryWriter* writer, int32_t value) {
        do {
            int32_t high = ((value >> 7) & 33554431);
            unsigned char b = (unsigned char)(value & 127);
            if((high != 0)) 
            {
                b = (unsigned char)((int32_t)(b) | 128);
            }
            writer->Write_bc6e6f6f19ff3ad3(b);
            value = high;
        }
        while((value != 0));
    }
    
    System::Func2<System::Type*, System::String*>* ResourceWriter::get_TypeNameConverter() {
        return this->type_name_converter;
    }
    
    System::Func2<System::Type*, System::String*>* ResourceWriter::set_TypeNameConverter(System::Func2<System::Type*, System::String*>* value) {
        this->type_name_converter = value;
        return get_TypeNameConverter();
    }
    
    System::IO::Stream* ResourceWriter::get_Stream() {
        return this->stream;
    }
    
}}
namespace System { namespace Resources {
    
    
    void RuntimeResourceSet::constructor(System::IO::UnmanagedMemoryStream* stream) {
    }
    
    void RuntimeResourceSet::constructor(System::IO::Stream* stream) {
    }
    
    void RuntimeResourceSet::constructor(System::String* fileName) {
    }
    
    System::Object* RuntimeResourceSet::GetObject_2d3d6866d6caab0d(System::String* name) {
        if((this->Reader ==  nullptr)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        return CloneDisposableObjectIfPossible(ResourceSet::GetObject_2d3d6866d6caab0d(name));
    }
    
    System::Object* RuntimeResourceSet::GetObject_7df952fd6236c0e7(System::String* name, bool ignoreCase) {
        if((this->Reader ==  nullptr)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("ResourceSet is closed."));
        }
        return CloneDisposableObjectIfPossible(ResourceSet::GetObject_7df952fd6236c0e7(name, ignoreCase));
    }
    
    System::Object* RuntimeResourceSet::CloneDisposableObjectIfPossible(System::Object* value) {
        System::ICloneable *clonable = cli::as<System::ICloneable*>(value);
        return ((clonable != nullptr) && cli::is<System::IDisposable>(value)) ? clonable->Clone_d5efb96d327809c8() : value;
    }
    
}}
namespace System { namespace Resources {
    
    
    void SatelliteContractVersionAttribute::constructor(System::String* version) {
        this->ver = cli::gcnew<System::Version>(version);
    }
    
    System::String* SatelliteContractVersionAttribute::get_Version() {
        return this->ver->ToString_1636a0751cb9ac11();
    }
    
}}
namespace System { namespace Resources {
    
    
    void NameOrId::constructor(System::String* name) {
        this->name = name;
    }
    
    void NameOrId::constructor(int32_t id) {
        this->id = id;
    }
    
    System::String* NameOrId::ToString_1636a0751cb9ac11() {
        if((this->name != nullptr)) 
        {
            return cli::concat(_T("Name("), this->name);
        }
         else 
        {
            return cli::concat(_T("Id("), cli::box(this->id));
        }
    }
    
    bool NameOrId::get_IsName() {
        return (this->name != nullptr);
    }
    
    System::String* NameOrId::get_Name() {
        return this->name;
    }
    
    int32_t NameOrId::get_Id() {
        return this->id;
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32Resource::constructor(NameOrId* type, NameOrId* name, int32_t language) {
        this->type = type;
        this->name = name;
        this->language = language;
    }
    
    void Win32Resource::constructor(Win32ResourceType type, int32_t name, int32_t language) {
        this->type = cli::gcnew<NameOrId>((int32_t)(type));
        this->name = cli::gcnew<NameOrId>(name);
        this->language = language;
    }
    
    System::String* Win32Resource::ToString_1636a0751cb9ac11() {
        return cli::concat(_T("Win32Resource (Kind="), cli::box(this->get_ResourceType()), _T(", Name="), this->name, _T(")"));
    }
    
    Win32ResourceType Win32Resource::get_ResourceType() {
        if(this->type->get_IsName()) 
        {
            return (Win32ResourceType)-1L;
        }
         else 
        {
            return (Win32ResourceType)(this->type->get_Id());
        }
    }
    
    NameOrId* Win32Resource::get_Name() {
        return this->name;
    }
    
    NameOrId* Win32Resource::get_Type() {
        return this->type;
    }
    
    int32_t Win32Resource::get_Language() {
        return this->language;
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32EncodedResource::constructor(NameOrId* type, NameOrId* name, int32_t language, cli::array<unsigned char>* data) {
        this->data = data;
    }
    
    void Win32EncodedResource::WriteTo_c67bbc499a650118(System::IO::Stream* s) {
        s->Write_1f8a1dbe71b0eb89(this->data, 0, this->data->get_Length());
    }
    
    cli::array<unsigned char>* Win32EncodedResource::get_Data() {
        return this->data;
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32IconResource::constructor(int32_t id, int32_t language, ICONDIRENTRY* icon) {
        this->icon = icon;
    }
    
    void Win32IconResource::WriteTo_c67bbc499a650118(System::IO::Stream* s) {
        s->Write_1f8a1dbe71b0eb89(this->icon->image, 0, this->icon->image->get_Length());
    }
    
    ICONDIRENTRY* Win32IconResource::get_Icon() {
        return this->icon;
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32GroupIconResource::constructor(int32_t id, int32_t language, cli::array<Win32IconResource*>* icons) {
        this->icons = icons;
    }
    
    void Win32GroupIconResource::WriteTo_c67bbc499a650118(System::IO::Stream* s) {
        {
            /* USING - BLOCK */
            auto w = cli::gcnew<System::IO::BinaryWriter>(s);
            cli::using_guard{w};
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(1);
            w->Write_263157ba3ce9bc51((int16_t)this->icons->get_Length());
            for(int32_t i = 0; (i < this->icons->get_Length()); ++i){
                Win32IconResource *icon = this->icons->at(i);
                ICONDIRENTRY *entry = icon->get_Icon();
                w->Write_bc6e6f6f19ff3ad3(entry->bWidth);
                w->Write_bc6e6f6f19ff3ad3(entry->bHeight);
                w->Write_bc6e6f6f19ff3ad3(entry->bColorCount);
                w->Write_bc6e6f6f19ff3ad3(0);
                w->Write_263157ba3ce9bc51(entry->wPlanes);
                w->Write_263157ba3ce9bc51(entry->wBitCount);
                w->Write_6382fee822de735b((int32_t)(entry->image->get_Length()));
                w->Write_263157ba3ce9bc51((int16_t)icon->get_Name()->get_Id());
            }
        }
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32VersionResource::constructor(int32_t id, int32_t language, bool compilercontext) {
        this->signature = 4277077181L;
        this->struct_version = 65536;
        this->file_flags_mask = 63;
        this->file_flags = 0;
        this->file_os = 4;
        this->file_type = 2;
        this->file_subtype = 0;
        this->file_date = 0L;
        this->file_lang = compilercontext ? 0 : 127;
        this->file_codepage = 1200;
        this->properties = cli::gcnew<System::Collections::Hashtable>();
        System::String *defaultvalue = compilercontext ? System::String::Empty : _T(" ");
        for(auto tmp_324 : this->WellKnownProperties) {
            auto s = cli::cast<System::String*>(tmp_324);
            this->properties->set_Item_84c7e24d9caa09(s, defaultvalue);
        }
        this->set_LegalCopyright_72dcc52259fa2266(_T(" "));
        this->set_FileDescription_54aa53809e1edc34(_T(" "));
    }
    
    void Win32VersionResource::emit_padding(System::IO::BinaryWriter* w) {
        System::IO::Stream *ms = w->get_BaseStream_6d7b07c4266897dc();
        if(((ms->get_Position_5e75d5c458401f13() % 4L) != 0L)) 
        {
            w->Write_263157ba3ce9bc51(0);
        }
    }
    
    void Win32VersionResource::patch_length(System::IO::BinaryWriter* w, int64_t len_pos) {
        System::IO::Stream *ms = w->get_BaseStream_6d7b07c4266897dc();
        int64_t pos = ms->get_Position_5e75d5c458401f13();
        ms->set_Position_cfe1def757785ad(len_pos);
        w->Write_263157ba3ce9bc51((int16_t)(pos - len_pos));
        ms->set_Position_cfe1def757785ad(pos);
    }
    
    void Win32VersionResource::WriteTo_c67bbc499a650118(System::IO::Stream* ms) {
        {
            /* USING - BLOCK */
            auto w = cli::gcnew<System::IO::BinaryWriter>(ms, System::Text::Encoding::get_Unicode());
            cli::using_guard{w};
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(52);
            w->Write_263157ba3ce9bc51(0);
            w->Write_a7ab51ccd6658347(_T("VS_VERSION_INFO")->ToCharArray());
            w->Write_263157ba3ce9bc51(0);
            emit_padding(w);
            w->Write_805c393976ef76e5((uint32_t)this->signature);
            w->Write_6382fee822de735b((int32_t)(this->struct_version));
            w->Write_6382fee822de735b((int32_t)(this->file_version >> 32));
            w->Write_6382fee822de735b((int32_t)(this->file_version & 4294967295L));
            w->Write_6382fee822de735b((int32_t)(this->product_version >> 32));
            w->Write_6382fee822de735b((int32_t)(this->product_version & 4294967295L));
            w->Write_6382fee822de735b((int32_t)(this->file_flags_mask));
            w->Write_6382fee822de735b((int32_t)(this->file_flags));
            w->Write_6382fee822de735b((int32_t)(this->file_os));
            w->Write_6382fee822de735b((int32_t)(this->file_type));
            w->Write_6382fee822de735b((int32_t)(this->file_subtype));
            w->Write_6382fee822de735b((int32_t)(this->file_date >> 32));
            w->Write_6382fee822de735b((int32_t)(this->file_date & 4294967295L));
            emit_padding(w);
            int64_t var_file_info_pos = ms->get_Position_5e75d5c458401f13();
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(1);
            w->Write_a7ab51ccd6658347(_T("VarFileInfo")->ToCharArray());
            w->Write_263157ba3ce9bc51(0);
            if(((ms->get_Position_5e75d5c458401f13() % 4L) != 0L)) 
            {
                w->Write_263157ba3ce9bc51(0);
            }
            int64_t var_pos = ms->get_Position_5e75d5c458401f13();
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(4);
            w->Write_263157ba3ce9bc51(0);
            w->Write_a7ab51ccd6658347(_T("Translation")->ToCharArray());
            w->Write_263157ba3ce9bc51(0);
            if(((ms->get_Position_5e75d5c458401f13() % 4L) != 0L)) 
            {
                w->Write_263157ba3ce9bc51(0);
            }
            w->Write_263157ba3ce9bc51((int16_t)this->file_lang);
            w->Write_263157ba3ce9bc51((int16_t)this->file_codepage);
            patch_length(w, var_pos);
            patch_length(w, var_file_info_pos);
            int64_t string_file_info_pos = ms->get_Position_5e75d5c458401f13();
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(1);
            w->Write_a7ab51ccd6658347(_T("StringFileInfo")->ToCharArray());
            emit_padding(w);
            int64_t string_table_pos = ms->get_Position_5e75d5c458401f13();
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(0);
            w->Write_263157ba3ce9bc51(1);
            w->Write_a7ab51ccd6658347(System::String::Format3(_T("{0:x4}{1:x4}"), cli::box(this->file_lang), cli::box(this->file_codepage))->ToCharArray());
            emit_padding(w);
            for(auto tmp_325 : this->properties->get_Keys_8171dfd94447fa93()) {
                auto key = cli::cast<System::String*>(tmp_325);
                {
                    System::String *value = cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(key));
                    int64_t string_pos = ms->get_Position_5e75d5c458401f13();
                    w->Write_263157ba3ce9bc51(0);
                    w->Write_263157ba3ce9bc51((int16_t)(value->ToCharArray()->get_Length() + 1));
                    w->Write_263157ba3ce9bc51(1);
                    w->Write_a7ab51ccd6658347(key->ToCharArray());
                    w->Write_263157ba3ce9bc51(0);
                    emit_padding(w);
                    w->Write_a7ab51ccd6658347(value->ToCharArray());
                    w->Write_263157ba3ce9bc51(0);
                    emit_padding(w);
                    patch_length(w, string_pos);
                }
            }
            patch_length(w, string_table_pos);
            patch_length(w, string_file_info_pos);
            patch_length(w, 0L);
        }
    }
    
    System::String* Win32VersionResource::get_Version() {
        return cli::concat(_T(""), cli::box((this->file_version >> 48)), _T("."), cli::box(((this->file_version >> 32) & 65535L)), _T("."), cli::box(((this->file_version >> 16) & 65535L)), _T("."), cli::box((this->file_version & 65535L)));
    }
    
    System::String* Win32VersionResource::set_Version(System::String* value) {
        cli::array<int64_t> *ver = (new cli::array<int64_t>({0, 0, 0, 0}));
        if((value != nullptr)) 
        {
            cli::array<System::String*> *parts = value->Split((new cli::array<char16_t>({u'.'})));
            try {
                for(int32_t i = 0; (i < parts->get_Length()); ++i){
                    if((i < ver->get_Length())) 
                    {
                        ver->at(i) = (int64_t)(System::Int32::Parse5(parts->at(i)));
                    }
                }
            }
            catch(System::FormatException*) {
            }
        }
        this->file_version = (((ver->at(0) << 48) | (ver->at(1) << 32)) | ((ver->at(2) << 16) + ver->at(3)));
        this->properties->set_Item_84c7e24d9caa09(_T("FileVersion"), this->get_Version());
        return get_Version();
    }
    
    void Win32VersionResource::set_Item_c65fe9b5aa0293fb(System::String* key, System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(key, value);
        return;
    }
    
    System::String* Win32VersionResource::get_Comments_292a2e978b345fe8() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("Comments")));
    }
    
    System::String* Win32VersionResource::set_Comments_ba80af877239af8f(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("Comments"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_Comments_292a2e978b345fe8();
    }
    
    System::String* Win32VersionResource::get_CompanyName_dd0c7cfed6274d96() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("CompanyName")));
    }
    
    System::String* Win32VersionResource::set_CompanyName_75df1ff63122ba96(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("CompanyName"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_CompanyName_dd0c7cfed6274d96();
    }
    
    System::String* Win32VersionResource::get_LegalCopyright_fea3ac5c287f097d() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("LegalCopyright")));
    }
    
    System::String* Win32VersionResource::set_LegalCopyright_72dcc52259fa2266(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("LegalCopyright"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_LegalCopyright_fea3ac5c287f097d();
    }
    
    System::String* Win32VersionResource::get_LegalTrademarks_63d2e4cf760a358b() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("LegalTrademarks")));
    }
    
    System::String* Win32VersionResource::set_LegalTrademarks_f4351a90b4de437a(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("LegalTrademarks"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_LegalTrademarks_63d2e4cf760a358b();
    }
    
    System::String* Win32VersionResource::get_OriginalFilename_4f17e8e26471b340() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("OriginalFilename")));
    }
    
    System::String* Win32VersionResource::set_OriginalFilename_6fc219c4b034e23f(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("OriginalFilename"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_OriginalFilename_4f17e8e26471b340();
    }
    
    System::String* Win32VersionResource::get_ProductName_245742f70be2370a() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("ProductName")));
    }
    
    System::String* Win32VersionResource::set_ProductName_8e2f958b8d465792(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("ProductName"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_ProductName_245742f70be2370a();
    }
    
    System::String* Win32VersionResource::get_ProductVersion_2c081e9139be1270() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("ProductVersion")));
    }
    
    System::String* Win32VersionResource::set_ProductVersion_79ce0dccd0359143(System::String* value) {
        if(((value ==  nullptr) || (value->get_Length() ==  0))) 
        {
            value = _T(" ");
        }
        cli::array<int64_t> *ver = (new cli::array<int64_t>({0, 0, 0, 0}));
        cli::array<System::String*> *parts = value->Split((new cli::array<char16_t>({u'.'})));
        try {
            for(int32_t i = 0; (i < parts->get_Length()); ++i){
                if((i < ver->get_Length())) 
                {
                    ver->at(i) = (int64_t)(System::Int32::Parse5(parts->at(i)));
                }
            }
        }
        catch(System::FormatException*) {
        }
        this->properties->set_Item_84c7e24d9caa09(_T("ProductVersion"), value);
        this->product_version = (((ver->at(0) << 48) | (ver->at(1) << 32)) | ((ver->at(2) << 16) + ver->at(3)));
        return get_ProductVersion_2c081e9139be1270();
    }
    
    System::String* Win32VersionResource::get_InternalName_f5d50e34ee4b7308() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("InternalName")));
    }
    
    System::String* Win32VersionResource::set_InternalName_cc60ad1d2c83711f(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("InternalName"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_InternalName_f5d50e34ee4b7308();
    }
    
    System::String* Win32VersionResource::get_FileDescription_97d108b9e8a25444() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("FileDescription")));
    }
    
    System::String* Win32VersionResource::set_FileDescription_54aa53809e1edc34(System::String* value) {
        this->properties->set_Item_84c7e24d9caa09(_T("FileDescription"), System::String::op_Equality(value, System::String::Empty) ? _T(" ") : value);
        return get_FileDescription_97d108b9e8a25444();
    }
    
    int32_t Win32VersionResource::get_FileLanguage_42be7a80077fad4e() {
        return this->file_lang;
    }
    
    int32_t Win32VersionResource::set_FileLanguage_c5e46a38112121c2(int32_t value) {
        this->file_lang = value;
        return get_FileLanguage_42be7a80077fad4e();
    }
    
    System::String* Win32VersionResource::get_FileVersion_90a7ebf29c1ef843() {
        return cli::cast<System::String*>(this->properties->get_Item_d75c6e706b965758(_T("FileVersion")));
    }
    
    System::String* Win32VersionResource::set_FileVersion_9572d918259eff23(System::String* value) {
        if(((value ==  nullptr) || (value->get_Length() ==  0))) 
        {
            value = _T(" ");
        }
        cli::array<int64_t> *ver = (new cli::array<int64_t>({0, 0, 0, 0}));
        cli::array<System::String*> *parts = value->Split((new cli::array<char16_t>({u'.'})));
        try {
            for(int32_t i = 0; (i < parts->get_Length()); ++i){
                if((i < ver->get_Length())) 
                {
                    ver->at(i) = (int64_t)(System::Int32::Parse5(parts->at(i)));
                }
            }
        }
        catch(System::FormatException*) {
        }
        this->properties->set_Item_84c7e24d9caa09(_T("FileVersion"), value);
        this->file_version = (((ver->at(0) << 48) | (ver->at(1) << 32)) | ((ver->at(2) << 16) + ver->at(3)));
        return get_FileVersion_90a7ebf29c1ef843();
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32ResFileReader::constructor(System::IO::Stream* s) {
        this->res_file = s;
    }
    
    int32_t Win32ResFileReader::read_int16() {
        int32_t b1 = this->res_file->ReadByte_61a294e42318f99();
        if((b1 ==  -1)) 
        {
            return -1;
        }
        int32_t b2 = this->res_file->ReadByte_61a294e42318f99();
        if((b2 ==  -1)) 
        {
            return -1;
        }
        return (b1 | (b2 << 8));
    }
    
    int32_t Win32ResFileReader::read_int32() {
        int32_t w1 = read_int16();
        if((w1 ==  -1)) 
        {
            return -1;
        }
        int32_t w2 = read_int16();
        if((w2 ==  -1)) 
        {
            return -1;
        }
        return (w1 | (w2 << 16));
    }
    
    bool Win32ResFileReader::read_padding() {
        while(((this->res_file->get_Position_5e75d5c458401f13() % 4L) != 0L)) {
            if((read_int16() ==  -1)) 
            {
                return false;
            }
        }
        return true;
    }
    
    NameOrId* Win32ResFileReader::read_ordinal() {
        int32_t i = read_int16();
        if(((i & 65535) != 0)) 
        {
            int32_t j = read_int16();
            return cli::gcnew<NameOrId>(j);
        }
         else 
        {
            cli::array<unsigned char> *chars = (new cli::array<unsigned char>(16));
            int32_t pos = 0;
            while(true) {
                int32_t j = read_int16();
                if((j ==  0)) 
                {
                    break;
                }
                if((pos ==  chars->get_Length())) 
                {
                    cli::array<unsigned char> *new_chars = (new cli::array<unsigned char>((chars->get_Length() * 2)));
                    System::Array::Copy(chars, new_chars, chars->get_Length());
                    chars = new_chars;
                }
                chars->at(pos) = (unsigned char)(j >> 8);
                chars->at((pos + 1)) = (unsigned char)(j & 255);
                (pos = pos + 2);
            }
            return cli::gcnew<NameOrId>(cli::gcnew<System::String>(System::Text::Encoding::get_Unicode()->GetChars_66b39e5249276d4a(chars, 0, pos)));
        }
    }
    
    System::Collections::ICollection* Win32ResFileReader::ReadResources() {
        System::Collections::ArrayList *resources = cli::gcnew<System::Collections::ArrayList>();
        while(true) {
            if(!(read_padding())) 
            {
                break;
            }
            int32_t data_size = read_int32();
            if((data_size ==  -1)) 
            {
                break;
            }
            read_int32();
            NameOrId *type = read_ordinal();
            NameOrId *name = read_ordinal();
            if(!(read_padding())) 
            {
                break;
            }
            read_int32();
            read_int16();
            int32_t language_id = read_int16();
            read_int32();
            read_int32();
            if((data_size ==  0)) 
            {
                continue;
            }
            cli::array<unsigned char> *data = (new cli::array<unsigned char>(data_size));
            if((this->res_file->Read_c0d6dde3943b413e(data, 0, data_size) != data_size)) 
            {
                break;
            }
            resources->Add_e6a92085999ce388(cli::gcnew<Win32EncodedResource>(type, name, language_id, data));
        }
        return resources;
    }
    
}}
namespace System { namespace Resources {
    
    
    void ICONDIRENTRY::constructor() {
    }
    
    System::String* ICONDIRENTRY::ToString_1636a0751cb9ac11() {
        return cli::concat(_T("ICONDIRENTRY ("), cli::box(this->bWidth), _T("x"), cli::box(this->bHeight), _T(" "), cli::box(this->wBitCount), _T(" bpp)"));
    }
    
}}
namespace System { namespace Resources {
    
    
    void Win32IconFileReader::constructor(System::IO::Stream* s) {
        this->iconFile = s;
    }
    
    cli::array<ICONDIRENTRY*>* Win32IconFileReader::ReadIcons() {
        cli::array<ICONDIRENTRY*> *icons = nullptr;
        {
            /* USING - BLOCK */
            auto r = cli::gcnew<System::IO::BinaryReader>(this->iconFile);
            cli::using_guard{r};
            int32_t idReserved = (int32_t)(r->ReadInt16_cc677a86798a4911());
            int32_t idType = (int32_t)(r->ReadInt16_cc677a86798a4911());
            if(((idReserved != 0) || (idType != 1))) 
            {
                throw cli::gcnew<System::Exception>(_T("Invalid .ico file format"));
            }
            int64_t nitems = (int64_t)(r->ReadInt16_cc677a86798a4911());
            icons = (new cli::array<ICONDIRENTRY*>((int32_t)nitems));
            for(int32_t i = 0; ((int64_t)(i) < nitems); ++i){
                ICONDIRENTRY *entry = cli::gcnew<ICONDIRENTRY>();
                entry->bWidth = r->ReadByte_a8e935915607659b();
                entry->bHeight = r->ReadByte_a8e935915607659b();
                entry->bColorCount = r->ReadByte_a8e935915607659b();
                entry->bReserved = r->ReadByte_a8e935915607659b();
                entry->wPlanes = r->ReadInt16_cc677a86798a4911();
                entry->wBitCount = r->ReadInt16_cc677a86798a4911();
                int32_t dwBytesInRes = r->ReadInt32_e79bbed3af40f25f();
                int32_t dwImageOffset = r->ReadInt32_e79bbed3af40f25f();
                entry->image = (new cli::array<unsigned char>(dwBytesInRes));
                int64_t pos = this->iconFile->get_Position_5e75d5c458401f13();
                this->iconFile->set_Position_cfe1def757785ad((int64_t)(dwImageOffset));
                this->iconFile->Read_c0d6dde3943b413e(entry->image, 0, dwBytesInRes);
                this->iconFile->set_Position_cfe1def757785ad(pos);
                if(((int32_t)(entry->wPlanes) ==  0)) 
                {
                    entry->wPlanes = (int16_t)((int32_t)(entry->image->at(12)) | ((int32_t)(entry->image->at(13)) << 8));
                }
                if(((int32_t)(entry->wBitCount) ==  0)) 
                {
                    entry->wBitCount = (int16_t)((int32_t)(entry->image->at(14)) | ((int32_t)(entry->image->at(15)) << 8));
                }
                icons->at(i) = entry;
            }
            return icons;
        }
    }
    
}}
namespace System { namespace Runtime {
    
    
    void AssemblyTargetedPatchBandAttribute::constructor(System::String* targetedPatchBand) {
        this->set_TargetedPatchBand(targetedPatchBand);
    }
    
    System::String* AssemblyTargetedPatchBandAttribute::get_TargetedPatchBand() {
        return this->_TargetedPatchBand_k__BackingField;
    }
    
    System::String* AssemblyTargetedPatchBandAttribute::set_TargetedPatchBand(System::String* value) {
        this->_TargetedPatchBand_k__BackingField = value;
        return get_TargetedPatchBand();
    }
    
}}
namespace System { namespace Runtime {
    
    
    bool GCSettings::get_IsServerGC() {
        return false;
    }
    
    GCLatencyMode GCSettings::get_LatencyMode() {
        return GCLatencyMode::Interactive;
    }
    
    GCLatencyMode GCSettings::set_LatencyMode(GCLatencyMode value) {;
        return get_LatencyMode();
    }
    
}}
namespace System { namespace Runtime {
    
    
    void MemoryFailPoint::constructor(int32_t sizeInMegabytes) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MemoryFailPoint::Finalize_eca42609ee3410cd() {
        {
            cli::finally_guard([&]() {
                Finalize_194ea81baa80af66();
            });
        }
    }
    
    void MemoryFailPoint::Dispose() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}
namespace System { namespace Runtime {
    
    
    void TargetedPatchingOptOutAttribute::constructor(System::String* reason) {
        if((reason ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("reason"));
        }
        this->reason = reason;
    }
    
    System::String* TargetedPatchingOptOutAttribute::get_Reason() {
        return this->reason;
    }
    
}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void AccessedThroughPropertyAttribute::constructor(System::String* propertyName) {
        this->name = propertyName;
    }
    
    System::String* AccessedThroughPropertyAttribute::get_PropertyName() {
        return this->name;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CallConvCdecl::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CallConvFastcall::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CallConvStdcall::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CallConvThiscall::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CompilationRelaxationsAttribute::constructor(int32_t relaxations) {
        this->relax = relaxations;
    }
    
    void CompilationRelaxationsAttribute::constructor(CompilationRelaxations relaxations) {
        this->relax = (int32_t)(relaxations);
    }
    
    int32_t CompilationRelaxationsAttribute::get_CompilationRelaxations() {
        return this->relax;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CompilerGeneratedAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CompilerGlobalScopeAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void CustomConstantAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void DateTimeConstantAttribute::constructor(int64_t ticks) {
        this->ticks = ticks;
    }
    
    int64_t DateTimeConstantAttribute::get_Ticks() {
        return this->ticks;
    }
    
    System::Object* DateTimeConstantAttribute::get_Value_2eb981927c501f0e() {
        return cli::box(this->ticks);
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void DecimalConstantAttribute::constructor(unsigned char scale, unsigned char sign, uint32_t hi, uint32_t mid, uint32_t low) {
        this->scale = scale;
        this->sign = System::Convert::ToBoolean2(sign);
        this->hi = (int32_t)hi;
        this->mid = (int32_t)mid;
        this->low = (int32_t)low;
    }
    
    void DecimalConstantAttribute::constructor(unsigned char scale, unsigned char sign, int32_t hi, int32_t mid, int32_t low) {
        this->scale = scale;
        this->sign = System::Convert::ToBoolean2(sign);
        this->hi = hi;
        this->mid = mid;
        this->low = low;
    }
    
    System::Decimal DecimalConstantAttribute::get_Value() {
        return cli::ctor<System::Decimal>(this->low, this->mid, this->hi, this->sign, this->scale);
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void DefaultDependencyAttribute::constructor(LoadHint loadHintArgument) {
        this->hint = loadHintArgument;
    }
    
    LoadHint DefaultDependencyAttribute::get_LoadHint() {
        return this->hint;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void DependencyAttribute::constructor(System::String* dependentAssemblyArgument, LoadHint loadHintArgument) {
        this->dependentAssembly = dependentAssemblyArgument;
        this->hint = loadHintArgument;
    }
    
    System::String* DependencyAttribute::get_DependentAssembly() {
        return this->dependentAssembly;
    }
    
    LoadHint DependencyAttribute::get_LoadHint() {
        return this->hint;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void DiscardableAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void FixedAddressValueTypeAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void FixedBufferAttribute::constructor(System::Type* elementType, int32_t length) {
        this->elementType = elementType;
        this->length = length;
    }
    
    System::Type* FixedBufferAttribute::get_ElementType() {
        return this->elementType;
    }
    
    int32_t FixedBufferAttribute::get_Length() {
        return this->length;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void HasCopySemanticsAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void IDispatchConstantAttribute::constructor() {
    }
    
    System::Object* IDispatchConstantAttribute::get_Value_2eb981927c501f0e() {
        return nullptr;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void IndexerNameAttribute::constructor(System::String* indexerName) {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void InternalsVisibleToAttribute::constructor(System::String* assemblyName) {
        this->assemblyName = assemblyName;
    }
    
    System::String* InternalsVisibleToAttribute::get_AssemblyName() {
        return this->assemblyName;
    }
    
    bool InternalsVisibleToAttribute::get_AllInternalsVisible() {
        return this->all_visible;
    }
    
    bool InternalsVisibleToAttribute::set_AllInternalsVisible(bool value) {
        this->all_visible = value;
        return get_AllInternalsVisible();
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void IUnknownConstantAttribute::constructor() {
    }
    
    System::Object* IUnknownConstantAttribute::get_Value_2eb981927c501f0e() {
        return nullptr;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void MethodImplAttribute::constructor() {
    }
    
    void MethodImplAttribute::constructor(int16_t value) {
        this->_val = (MethodImplOptions)(value);
    }
    
    void MethodImplAttribute::constructor(MethodImplOptions methodImplOptions) {
        this->_val = methodImplOptions;
    }
    
    MethodImplOptions MethodImplAttribute::get_Value() {
        return this->_val;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void NativeCppClassAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void ReferenceAssemblyAttribute::constructor() {
    }
    
    void ReferenceAssemblyAttribute::constructor(System::String* description) {
        if((description ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("description"));
        }
        this->description = description;
    }
    
    System::String* ReferenceAssemblyAttribute::get_Description() {
        return this->description;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void RequiredAttributeAttribute::constructor(System::Type* requiredContract) {
    }
    
    System::Type* RequiredAttributeAttribute::get_RequiredContract() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void RuntimeCompatibilityAttribute::constructor() {
    }
    
    bool RuntimeCompatibilityAttribute::get_WrapNonExceptionThrows() {
        return this->wrap_non_exception_throws;
    }
    
    bool RuntimeCompatibilityAttribute::set_WrapNonExceptionThrows(bool value) {
        this->wrap_non_exception_throws = value;
        return get_WrapNonExceptionThrows();
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void RuntimeHelpers::InitializeArray(System::Array* array, void* fldHandle) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RuntimeHelpers::InitializeArray2(System::Array* array, System::RuntimeFieldHandle fldHandle) {
        if(((array ==  nullptr) || ::System::IntPtr::op_Equality(fldHandle->get_Value(), (*::System::IntPtr::Zero)))) 
        {
            throw cli::gcnew<System::ArgumentNullException>();
        }
        InitializeArray(array, fldHandle->get_Value());
    }
    
    int32_t RuntimeHelpers::GetHashCode2(System::Object* o) {
        return System::Object::InternalGetHashCode(o);
    }
    
    bool RuntimeHelpers::Equals3(System::Object* o1, System::Object* o2) {
        if((o1 ==  o2)) 
        {
            return true;
        }
        if(((o1 ==  nullptr) || (o2 ==  nullptr))) 
        {
            return false;
        }
        if(cli::is<System::ValueType>(o1)) 
        {
            return System::ValueType::DefaultEquals(o1, o2);
        }
         else 
        {
            return System::Object::Equals2(o1, o2);
        }
    }
    
    System::Object* RuntimeHelpers::GetObjectValue(System::Object* obj) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RuntimeHelpers::RunClassConstructor(void* type) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RuntimeHelpers::RunClassConstructor2(System::RuntimeTypeHandle type) {
        if(::System::IntPtr::op_Equality(type->get_Value(), (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Handle is not initialized."), _T("type"));
        }
        RunClassConstructor(type->get_Value());
    }
    
    bool RuntimeHelpers::SufficientExecutionStack() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RuntimeHelpers::EnsureSufficientExecutionStack() {
        if(SufficientExecutionStack()) 
        {
            return;
        }
        throw cli::gcnew<System::InsufficientExecutionStackException>();
    }
    
    void RuntimeHelpers::ExecuteCodeWithGuaranteedCleanup(TryCode* code, CleanupCode* backoutCode, System::Object* userData) {
    }
    
    void RuntimeHelpers::PrepareConstrainedRegions() {
    }
    
    void RuntimeHelpers::PrepareConstrainedRegionsNoOP() {
    }
    
    void RuntimeHelpers::ProbeForSufficientStack() {
    }
    
    void RuntimeHelpers::PrepareDelegate(System::Delegate* d) {
        if((d ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("d"));
        }
    }
    
    void RuntimeHelpers::PrepareMethod(System::RuntimeMethodHandle method) {
    }
    
    void RuntimeHelpers::PrepareMethod2(System::RuntimeMethodHandle method, cli::array<System::RuntimeTypeHandle>* instantiation) {
    }
    
    void RuntimeHelpers::RunModuleConstructor(System::ModuleHandle module) {
        if(System::ModuleHandle::op_Equality(module, (*System::ModuleHandle::EmptyHandle))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Handle is not initialized."), _T("module"));
        }
        RunModuleConstructor2(module->get_Value());
    }
    
    void RuntimeHelpers::RunModuleConstructor2(void* module) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t RuntimeHelpers::get_OffsetToStringData() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void RuntimeWrappedException::constructor() {
    }
    
    void RuntimeWrappedException::GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::Exception::GetObjectData_bc9b88d7eb43b6d8(info, context);
        info->AddValue16(_T("WrappedException"), this->wrapped_exception);
    }
    
    System::Object* RuntimeWrappedException::get_WrappedException() {
        return this->wrapped_exception;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void ScopelessEnumAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void SpecialNameAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void StringFreezingAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void SuppressIldasmAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void TypeForwardedFromAttribute::constructor(System::String* assemblyFullName) {
        this->name = assemblyFullName;
    }
    
    System::String* TypeForwardedFromAttribute::get_AssemblyFullName() {
        return this->name;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void TypeForwardedToAttribute::constructor(System::Type* destination) {
        this->destination = destination;
    }
    
    System::Type* TypeForwardedToAttribute::get_Destination() {
        return this->destination;
    }
    
}}}
namespace System { namespace Runtime { namespace CompilerServices {
    
    
    void UnsafeValueTypeAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    
    void CriticalFinalizerObject::constructor() {
    }
    
    void CriticalFinalizerObject::Finalize_194ea81baa80af66() {
        {
            cli::finally_guard([&]() {
                Finalize_b946fbc32e26afd6();
            });
        }
    }
    
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    
    void PrePrepareMethodAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace ConstrainedExecution {
    
    
    void ReliabilityContractAttribute::constructor(Consistency consistencyGuarantee, Cer cer) {
        this->consistency = consistencyGuarantee;
        this->cer = cer;
    }
    
    Cer ReliabilityContractAttribute::get_Cer() {
        return this->cer;
    }
    
    Consistency ReliabilityContractAttribute::get_ConsistencyGuarantee() {
        return this->consistency;
    }
    
}}}
namespace System { namespace Runtime { namespace ExceptionServices {
    
    
    void FirstChanceExceptionEventArgs::constructor(System::Exception* exception) {
        this->exception = exception;
    }
    
    System::Exception* FirstChanceExceptionEventArgs::get_Exception() {
        return this->exception;
    }
    
}}}
namespace System { namespace Runtime { namespace ExceptionServices {
    
    
    void HandleProcessCorruptedStateExceptionsAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Hosting {
    
    
    void ActivationArguments::constructor(System::ActivationContext* activationData) {
        if((activationData ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("activationData"));
        }
        this->_context = activationData;
        this->_identity = activationData->get_Identity();
    }
    
    void ActivationArguments::constructor(System::ApplicationIdentity* applicationIdentity) {
        if((applicationIdentity ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("applicationIdentity"));
        }
        this->_identity = applicationIdentity;
    }
    
    void ActivationArguments::constructor(System::ActivationContext* activationContext, cli::array<System::String*>* activationData) {
        if((activationContext ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("activationContext"));
        }
        this->_context = activationContext;
        this->_identity = activationContext->get_Identity();
        this->_data = activationData;
    }
    
    void ActivationArguments::constructor(System::ApplicationIdentity* applicationIdentity, cli::array<System::String*>* activationData) {
        if((applicationIdentity ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("applicationIdentity"));
        }
        this->_identity = applicationIdentity;
        this->_data = activationData;
    }
    
    System::ActivationContext* ActivationArguments::get_ActivationContext() {
        return this->_context;
    }
    
    cli::array<System::String*>* ActivationArguments::get_ActivationData() {
        return this->_data;
    }
    
    System::ApplicationIdentity* ActivationArguments::get_ApplicationIdentity() {
        return this->_identity;
    }
    
}}}
namespace System { namespace Runtime { namespace Hosting {
    
    
    void ApplicationActivator::constructor() {
    }
    
    System::Runtime::Remoting::ObjectHandle* ApplicationActivator::CreateInstance_d66a04a92dbbae30(System::ActivationContext* activationContext) {
        return CreateInstance_ea4c9b1e73214c4b(activationContext, nullptr);
    }
    
    System::Runtime::Remoting::ObjectHandle* ApplicationActivator::CreateInstance_ea4c9b1e73214c4b(System::ActivationContext* activationContext, cli::array<System::String*>* activationCustomData) {
        if((activationContext ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("activationContext"));
        }
        System::AppDomainSetup *setup = cli::gcnew<System::AppDomainSetup>(activationContext);
        return CreateInstanceHelper(setup);
    }
    
    System::Runtime::Remoting::ObjectHandle* ApplicationActivator::CreateInstanceHelper(System::AppDomainSetup* adSetup) {
        if((adSetup ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("adSetup"));
        }
        if((adSetup->get_ActivationArguments() ==  nullptr)) 
        {
            System::String *msg = Locale::GetText(_T("{0} is missing it\'s {1} property"));
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(msg, _T("AppDomainSetup"), _T("ActivationArguments")), _T("adSetup"));
        }
        System::Security::HostSecurityManager *hsm = nullptr;
        if((System::AppDomain::get_CurrentDomain()->get_DomainManager() != nullptr)) 
        {
            hsm = System::AppDomain::get_CurrentDomain()->get_DomainManager()->get_HostSecurityManager_78a0d9527aa5ded3();
        }
         else 
        {
            hsm = cli::gcnew<System::Security::HostSecurityManager>();
        }
        System::Security::Policy::Evidence *applicationEvidence = cli::gcnew<System::Security::Policy::Evidence>();
        applicationEvidence->AddHost(adSetup->get_ActivationArguments());
        System::Security::Policy::TrustManagerContext *context = cli::gcnew<System::Security::Policy::TrustManagerContext>();
        System::Security::Policy::ApplicationTrust *trust = hsm->DetermineApplicationTrust_9c3480c5892df261(applicationEvidence, nullptr, context);
        if(!(trust->get_IsApplicationTrustedToRun())) 
        {
            System::String *msg = Locale::GetText(_T("Current policy doesn\'t allow execution of addin."));
            throw cli::gcnew<System::Security::Policy::PolicyException>(msg);
        }
        System::AppDomain *ad = System::AppDomain::CreateDomain3(_T("friendlyName"), nullptr, adSetup);
        return ad->CreateInstance2(_T("assemblyName"), _T("typeName"), nullptr);
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void AllowReversePInvokeCallsAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void AutomationProxyAttribute::constructor(bool val) {
        this->val = val;
    }
    
    bool AutomationProxyAttribute::get_Value() {
        return this->val;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void BestFitMappingAttribute::constructor(bool BestFitMapping) {
        this->bfm = BestFitMapping;
    }
    
    bool BestFitMappingAttribute::get_BestFitMapping() {
        return this->bfm;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void BStrWrapper::constructor(System::String* value) {
        this->_value = value;
    }
    
    System::String* BStrWrapper::get_WrappedObject() {
        return this->_value;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ClassInterfaceAttribute::constructor(int16_t classInterfaceType) {
        this->ciType = (ClassInterfaceType)(classInterfaceType);
    }
    
    void ClassInterfaceAttribute::constructor(ClassInterfaceType classInterfaceType) {
        this->ciType = classInterfaceType;
    }
    
    ClassInterfaceType ClassInterfaceAttribute::get_Value() {
        return this->ciType;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void CoClassAttribute::constructor(System::Type* coClass) {
        this->klass = coClass;
    }
    
    System::Type* CoClassAttribute::get_CoClass() {
        return this->klass;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComAliasNameAttribute::constructor(System::String* alias) {
        this->val = alias;
    }
    
    System::String* ComAliasNameAttribute::get_Value() {
        return this->val;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComCompatibleVersionAttribute::constructor(int32_t major, int32_t minor, int32_t build, int32_t revision) {
        this->major = major;
        this->minor = minor;
        this->build = build;
        this->revision = revision;
    }
    
    int32_t ComCompatibleVersionAttribute::get_MajorVersion() {
        return this->major;
    }
    
    int32_t ComCompatibleVersionAttribute::get_MinorVersion() {
        return this->minor;
    }
    
    int32_t ComCompatibleVersionAttribute::get_BuildNumber() {
        return this->build;
    }
    
    int32_t ComCompatibleVersionAttribute::get_RevisionNumber() {
        return this->revision;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComConversionLossAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComDefaultInterfaceAttribute::constructor(System::Type* defaultInterface) {
        this->_type = defaultInterface;
    }
    
    System::Type* ComDefaultInterfaceAttribute::get_Value() {
        return this->_type;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComEventInterfaceAttribute::constructor(System::Type* SourceInterface, System::Type* EventProvider) {
        this->si = SourceInterface;
        this->ep = EventProvider;
    }
    
    System::Type* ComEventInterfaceAttribute::get_EventProvider() {
        return this->ep;
    }
    
    System::Type* ComEventInterfaceAttribute::get_SourceInterface() {
        return this->si;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void COMException::constructor() {
    }
    
    void COMException::constructor(System::String* message) {
    }
    
    void COMException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void COMException::constructor(System::String* message, int32_t errorCode) {
    }
    
    void COMException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    System::String* COMException::ToString_1636a0751cb9ac11() {
        return System::String::Format5(_T("{0} (0x{1:x}): {2} {3}{4}{5}"), (new cli::array<System::Object*>({System::Exception::GetType2(), cli::box(this->get_HResult()), this->get_Message_d211df4045b57cbf(), (this->get_InnerException() ==  nullptr) ? System::String::Empty : this->get_InnerException()->ToString_1636a0751cb9ac11(), System::Environment::get_NewLine(), (this->get_StackTrace_f3fc28619b4f921() != nullptr) ? this->get_StackTrace_f3fc28619b4f921() : System::String::Empty})));
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComImportAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComRegisterFunctionAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComSourceInterfacesAttribute::constructor(System::String* sourceInterfaces) {
        this->internalValue = sourceInterfaces;
    }
    
    void ComSourceInterfacesAttribute::constructor(System::Type* sourceInterface) {
        this->internalValue = sourceInterface->ToString_1636a0751cb9ac11();
    }
    
    void ComSourceInterfacesAttribute::constructor(System::Type* sourceInterface1, System::Type* sourceInterface2) {
        this->internalValue = cli::concat(sourceInterface1->ToString_1636a0751cb9ac11(), sourceInterface2->ToString_1636a0751cb9ac11());
    }
    
    void ComSourceInterfacesAttribute::constructor(System::Type* sourceInterface1, System::Type* sourceInterface2, System::Type* sourceInterface3) {
        this->internalValue = cli::concat(sourceInterface1->ToString_1636a0751cb9ac11(), sourceInterface2->ToString_1636a0751cb9ac11());
    }
    
    void ComSourceInterfacesAttribute::constructor(System::Type* sourceInterface1, System::Type* sourceInterface2, System::Type* sourceInterface3, System::Type* sourceInterface4) {
        this->internalValue = cli::concat(sourceInterface1->ToString_1636a0751cb9ac11(), sourceInterface2->ToString_1636a0751cb9ac11());
    }
    
    System::String* ComSourceInterfacesAttribute::get_Value() {
        return this->internalValue;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComUnregisterFunctionAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ComVisibleAttribute::constructor(bool visibility) {
        this->Visible = visibility;
    }
    
    bool ComVisibleAttribute::get_Value() {
        return this->Visible;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void CriticalHandle::constructor(void* invalidHandleValue) {
        this->handle = invalidHandleValue;
    }
    
    void CriticalHandle::Finalize_930372d325809d9a() {
        {
            cli::finally_guard([&]() {
                Finalize_194ea81baa80af66();
            });
            Dispose_a50e254b4f44bdb0(false);
        }
    }
    
    void CriticalHandle::Close() {
        Dispose_a50e254b4f44bdb0(true);
    }
    
    void CriticalHandle::Dispose() {
        Dispose_a50e254b4f44bdb0(true);
    }
    
    void CriticalHandle::Dispose_a50e254b4f44bdb0(bool disposing) {
        if(this->_disposed) 
        {
            return;
        }
        if(!(this->get_IsInvalid_2fec8dcdb17ef2a3())) 
        {
            if((!(this->_disposed) && !(ReleaseHandle_10ffa0208255a9c3()))) 
            {
                System::GC::SuppressFinalize(this);
            }
             else 
            {
            }
        }
        this->_disposed = true;
    }
    
    void CriticalHandle::SetHandle(void* handle) {
        this->handle = handle;
    }
    
    void CriticalHandle::SetHandleAsInvalid() {
        this->_disposed = true;
    }
    
    bool CriticalHandle::get_IsClosed() {
        return this->_disposed;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void CurrencyWrapper::constructor(System::Decimal obj) {
        this->currency = obj;
    }
    
    void CurrencyWrapper::constructor(System::Object* obj) {
        if(System::Type::op_Inequality2(obj->GetType(), cli::typeof<System::Type>::info)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("obj has to be a Decimal type"));
        }
        this->currency = cli::unbox<System::Decimal>(obj);
    }
    
    System::Decimal CurrencyWrapper::get_WrappedObject() {
        return this->currency;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void DefaultCharSetAttribute::constructor(CharSet charSet) {
        this->_set = charSet;
    }
    
    CharSet DefaultCharSetAttribute::get_CharSet() {
        return this->_set;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void DispatchWrapper::constructor(System::Object* obj) {
        Marshal::GetIDispatchForObject(obj);
        this->wrappedObject = obj;
    }
    
    System::Object* DispatchWrapper::get_WrappedObject() {
        return this->wrappedObject;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void DispIdAttribute::constructor(int32_t dispId) {
        this->id = dispId;
    }
    
    int32_t DispIdAttribute::get_Value() {
        return this->id;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void DllImportAttribute::constructor(System::String* dllName) {
        this->Dll = dllName;
    }
    
    System::String* DllImportAttribute::get_Value() {
        return this->Dll;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ErrorWrapper::constructor(System::Exception* e) {
        this->errorCode = Marshal::GetHRForException(e);
    }
    
    void ErrorWrapper::constructor(int32_t errorCode) {
        this->errorCode = errorCode;
    }
    
    void ErrorWrapper::constructor(System::Object* errorCode) {
        if(System::Type::op_Inequality2(errorCode->GetType(), cli::typeof<System::Type>::info)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("errorCode has to be an int type"));
        }
        this->errorCode = cli::unbox<int32_t>(errorCode);
    }
    
    int32_t ErrorWrapper::get_ErrorCode() {
        return this->errorCode;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    System::Collections::Hashtable*  ExtensibleClassFactory::hashtable;
    
    ExtensibleClassFactory::ExtensibleClassFactory()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ExtensibleClassFactory::static_constructor() {
        hashtable = cli::gcnew<System::Collections::Hashtable>();
    }
    
    void ExtensibleClassFactory::constructor() {
    }
    
    ObjectCreationDelegate* ExtensibleClassFactory::GetObjectCreationCallback(System::Type* t) {
        return cli::as<ObjectCreationDelegate*>(hashtable->get_Item_d75c6e706b965758(t));
    }
    
    void ExtensibleClassFactory::RegisterObjectCreationCallback(ObjectCreationDelegate* callback) {
        int32_t i = 1;
        System::Diagnostics::StackTrace *trace = cli::gcnew<System::Diagnostics::StackTrace>(false);
        while((i < trace->get_FrameCount_3360fc636a0e470d())) {
            System::Diagnostics::StackFrame *frame = trace->GetFrame_e0dab4b211315370(i);
            System::Reflection::MethodBase *m = frame->GetMethod_c520bf4862e6a796();
            if((((int32_t)(m->get_MemberType_cd521d320810c98f()) ==  1) && m->get_IsStatic())) 
            {
                hashtable->Add_3f7ab157bcb41156(m->get_DeclaringType_6121cd6a84393166(), callback);
                return;
            }
            i++;
        }
        throw cli::gcnew<System::InvalidOperationException>(_T("RegisterObjectCreationCallback must be called from .cctor of class derived from ComImport type."));
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ExternalException::constructor() {
        this->set_HResult(-2147467259);
    }
    
    void ExternalException::constructor(System::String* message) {
        this->set_HResult(-2147467259);
    }
    
    void ExternalException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void ExternalException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2147467259);
    }
    
    void ExternalException::constructor(System::String* message, int32_t errorCode) {
        this->set_HResult(errorCode);
    }
    
    int32_t ExternalException::get_ErrorCode_40cd36daa03fec71() {
        return this->get_HResult();
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void FieldOffsetAttribute::constructor(int32_t offset) {
        this->val = offset;
    }
    
    int32_t FieldOffsetAttribute::get_Value() {
        return this->val;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void GuidAttribute::constructor(System::String* guid) {
        this->guidValue = guid;
    }
    
    System::String* GuidAttribute::get_Value() {
        return this->guidValue;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void IDispatchImplAttribute::constructor(IDispatchImplType implType) {
        this->Impl = implType;
    }
    
    void IDispatchImplAttribute::constructor(int16_t implType) {
        this->Impl = (IDispatchImplType)(implType);
    }
    
    IDispatchImplType IDispatchImplAttribute::get_Value() {
        return this->Impl;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ImportedFromTypeLibAttribute::constructor(System::String* tlbFile) {
        this->TlbFile = tlbFile;
    }
    
    System::String* ImportedFromTypeLibAttribute::get_Value() {
        return this->TlbFile;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void InAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void InterfaceTypeAttribute::constructor(ComInterfaceType interfaceType) {
        this->intType = interfaceType;
    }
    
    void InterfaceTypeAttribute::constructor(int16_t interfaceType) {
        this->intType = (ComInterfaceType)(interfaceType);
    }
    
    ComInterfaceType InterfaceTypeAttribute::get_Value() {
        return this->intType;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void InvalidComObjectException::constructor() {
        this->set_HResult(-2146233049);
    }
    
    void InvalidComObjectException::constructor(System::String* message) {
        this->set_HResult(-2146233049);
    }
    
    void InvalidComObjectException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233049);
    }
    
    void InvalidComObjectException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void InvalidOleVariantTypeException::constructor() {
        this->set_HResult(-2146233039);
    }
    
    void InvalidOleVariantTypeException::constructor(System::String* message) {
        this->set_HResult(-2146233039);
    }
    
    void InvalidOleVariantTypeException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233039);
    }
    
    void InvalidOleVariantTypeException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void LCIDConversionAttribute::constructor(int32_t lcid) {
        this->id = lcid;
    }
    
    int32_t LCIDConversionAttribute::get_Value() {
        return this->id;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    int32_t  Marshal::SystemMaxDBCSCharSize;
    int32_t  Marshal::SystemDefaultCharSize;
    
    Marshal::Marshal()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void Marshal::static_constructor() {
        SystemDefaultCharSize = ((int32_t)(System::Environment::get_OSVersion()->get_Platform()) ==  2) ? 2 : 1;
    }
    
    int32_t Marshal::AddRefInternal(void* pUnk) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::AddRef(void* pUnk) {
        if(::System::IntPtr::op_Equality(pUnk, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Value cannot be null."), _T("pUnk"));
        }
        return AddRefInternal(pUnk);
    }
    
    void* Marshal::AllocCoTaskMem(int32_t cb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::AllocHGlobal(void* cb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::AllocHGlobal2(int32_t cb) {
        return AllocHGlobal((void*)cb);
    }
    
    System::Object* Marshal::BindToMoniker(System::String* monikerName) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::ChangeWrapperHandleStrength(System::Object* otp, bool fIsWeak) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::copy_to_unmanaged(System::Array* source, int32_t startIndex, void* destination, int32_t length) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::copy_from_unmanaged(void* source, int32_t startIndex, System::Array* destination, int32_t length) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::Copy(cli::array<unsigned char>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy2(cli::array<char16_t>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy3(cli::array<int16_t>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy4(cli::array<int32_t>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy5(cli::array<int64_t>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy6(cli::array<float>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy7(cli::array<double>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy8(cli::array<void*>* source, int32_t startIndex, void* destination, int32_t length) {
        copy_to_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy9(void* source, cli::array<unsigned char>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy10(void* source, cli::array<char16_t>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy11(void* source, cli::array<int16_t>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy12(void* source, cli::array<int32_t>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy13(void* source, cli::array<int64_t>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy14(void* source, cli::array<float>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy15(void* source, cli::array<double>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void Marshal::Copy16(void* source, cli::array<void*>* destination, int32_t startIndex, int32_t length) {
        copy_from_unmanaged(source, startIndex, destination, length);
    }
    
    void* Marshal::CreateAggregatedObject(void* pOuter, System::Object* o) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::CreateWrapperOfType(System::Object* o, System::Type* t) {
        System::__ComObject *co = cli::as<System::__ComObject*>(o);
        if((co ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("o must derive from __ComObject"), _T("o"));
        }
        if(System::Type::op_Equality2(t, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("t"));
        }
        cli::array<System::Type*> *itfs = o->GetType()->GetInterfaces_52a89380e2c4a725();
        for(auto tmp_326 : itfs) {
            auto itf = cli::cast<System::Type*>(tmp_326);
            {
                if((itf->get_IsImport() && ::System::IntPtr::op_Equality(co->GetInterface2(itf), (*::System::IntPtr::Zero)))) 
                {
                    throw cli::gcnew<System::InvalidCastException>();
                }
            }
        }
        return Mono::Interop::ComInteropProxy::GetProxy(co->get_IUnknown(), t)->GetTransparentProxy_efb39f7079c89638();
    }
    
    void Marshal::DestroyStructure(void* ptr, System::Type* structuretype) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::FreeBSTR(void* ptr) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::FreeCoTaskMem(void* ptr) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::FreeHGlobal(void* hglobal) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::ClearBSTR(void* ptr) {
        int32_t len = ReadInt322(ptr, -4);
        for(int32_t i = 0; (i < len); i++) {
            WriteByte2(ptr, i, 0);
        }
    }
    
    void Marshal::ZeroFreeBSTR(void* s) {
        ClearBSTR(s);
        FreeBSTR(s);
    }
    
    void Marshal::ClearAnsi(void* ptr) {
        for(int32_t i = 0; ((int32_t)(ReadByte2(ptr, i)) != 0); i++) {
            WriteByte2(ptr, i, 0);
        }
    }
    
    void Marshal::ClearUnicode(void* ptr) {
        for(int32_t i = 0; ((int32_t)(ReadInt162(ptr, i)) != 0); (i = i + 2)) {
            WriteInt162(ptr, i, 0);
        }
    }
    
    void Marshal::ZeroFreeCoTaskMemAnsi(void* s) {
        ClearAnsi(s);
        FreeCoTaskMem(s);
    }
    
    void Marshal::ZeroFreeCoTaskMemUnicode(void* s) {
        ClearUnicode(s);
        FreeCoTaskMem(s);
    }
    
    void Marshal::ZeroFreeGlobalAllocAnsi(void* s) {
        ClearAnsi(s);
        FreeHGlobal(s);
    }
    
    void Marshal::ZeroFreeGlobalAllocUnicode(void* s) {
        ClearUnicode(s);
        FreeHGlobal(s);
    }
    
    System::Guid Marshal::GenerateGuidForType(System::Type* type) {
        return type->get_GUID_bdb6b630c3237a21();
    }
    
    System::String* Marshal::GenerateProgIdForType(System::Type* type) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::GetActiveObject(System::String* progID) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetCCW(System::Object* o, System::Type* T) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetComInterfaceForObjectInternal(System::Object* o, System::Type* T) {
        if(IsComObject(o)) 
        {
            return cli::cast<System::__ComObject*>(o)->GetInterface2(T);
        }
         else 
        {
            return GetCCW(o, T);
        }
    }
    
    void* Marshal::GetComInterfaceForObject(System::Object* o, System::Type* T) {
        void *pItf = GetComInterfaceForObjectInternal(o, T);
        AddRef(pItf);
        return pItf;
    }
    
    void* Marshal::GetComInterfaceForObjectInContext(System::Object* o, System::Type* t) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::GetComObjectData(System::Object* obj, System::Object* key) {
        throw cli::gcnew<System::NotSupportedException>(_T("MSDN states user code should never need to call this method."));
    }
    
    int32_t Marshal::GetComSlotForMethodInfoInternal(System::Reflection::MemberInfo* m) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::GetComSlotForMethodInfo(System::Reflection::MemberInfo* m) {
        if(System::Reflection::MemberInfo::op_Equality(m, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("m"));
        }
        if(!(cli::is<System::Reflection::MethodInfo>(m))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The MemberInfo must be an interface method."), _T("m"));
        }
        if(!(m->get_DeclaringType_6121cd6a84393166()->get_IsInterface())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The MemberInfo must be an interface method."), _T("m"));
        }
        return GetComSlotForMethodInfoInternal(m);
    }
    
    int32_t Marshal::GetEndComSlot(System::Type* t) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::GetExceptionCode() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetExceptionPointers() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetHINSTANCE(System::Reflection::Module* m) {
        if(System::Reflection::Module::op_Equality(m, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("m"));
        }
        return m->GetHINSTANCE();
    }
    
    int32_t Marshal::GetHRForException(System::Exception* e) {
        return e->hresult;
    }
    
    int32_t Marshal::GetHRForLastWin32Error() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetIDispatchForObjectInternal(System::Object* o) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetIDispatchForObject(System::Object* o) {
        void *pUnk = GetIDispatchForObjectInternal(o);
        AddRef(pUnk);
        return pUnk;
    }
    
    void* Marshal::GetIDispatchForObjectInContext(System::Object* o) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetITypeInfoForType(System::Type* t) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetIUnknownForObjectInternal(System::Object* o) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetIUnknownForObject(System::Object* o) {
        void *pUnk = GetIUnknownForObjectInternal(o);
        AddRef(pUnk);
        return pUnk;
    }
    
    void* Marshal::GetIUnknownForObjectInContext(System::Object* o) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetManagedThunkForUnmanagedMethodPtr(void* pfnMethodToWrap, void* pbSignature, int32_t cbSignature) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::MemberInfo* Marshal::GetMethodInfoForComSlot(System::Type* t, int32_t slot, ComMemberType memberType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::GetNativeVariantForObject(System::Object* obj, void* pDstNativeVariant) {
        System::Variant vt = cli::ctor<System::Variant>();
        vt->SetValue(obj);
        Marshal::StructureToPtr(cli::box(vt), pDstNativeVariant, false);
    }
    
    System::Object* Marshal::GetObjectForCCW(void* pUnk) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::GetObjectForIUnknown(void* pUnk) {
        System::Object *obj = GetObjectForCCW(pUnk);
        if((obj ==  nullptr)) 
        {
            Mono::Interop::ComInteropProxy *proxy = Mono::Interop::ComInteropProxy::GetProxy(pUnk, cli::typeof<System::Type>::info);
            obj = proxy->GetTransparentProxy_efb39f7079c89638();
        }
        return obj;
    }
    
    System::Object* Marshal::GetObjectForNativeVariant(void* pSrcNativeVariant) {
        System::Variant vt = cli::unbox<System::Variant>(Marshal::PtrToStructure2(pSrcNativeVariant, cli::typeof<System::Type>::info));
        return vt->GetValue();
    }
    
    cli::array<System::Object*>* Marshal::GetObjectsForNativeVariants(void* aSrcNativeVariant, int32_t cVars) {
        if((cVars < 0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("cVars"), _T("cVars cannot be a negative number."));
        }
        cli::array<System::Object*> *objects = (new cli::array<System::Object*>(cVars));
        for(int32_t i = 0; (i < cVars); i++) {
            objects->at(i) = GetObjectForNativeVariant((void*)(cli::import(aSrcNativeVariant)->ToInt64() + (int64_t)((i * SizeOf2(cli::typeof<System::Type>::info)))));
        }
        return objects;
    }
    
    int32_t Marshal::GetStartComSlot(System::Type* t) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Threading::Thread* Marshal::GetThreadFromFiberCookie(int32_t cookie) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::GetTypedObjectForIUnknown(void* pUnk, System::Type* t) {
        Mono::Interop::ComInteropProxy *proxy = cli::gcnew<Mono::Interop::ComInteropProxy>(pUnk, t);
        System::__ComObject *co = cli::cast<System::__ComObject*>(proxy->GetTransparentProxy_efb39f7079c89638());
        for(auto tmp_327 : t->GetInterfaces_52a89380e2c4a725()) {
            auto itf = cli::cast<System::Type*>(tmp_327);
            {
                if(((int32_t)(((int32_t)(itf->get_Attributes()) & 4096)) ==  4096)) 
                {
                    if(::System::IntPtr::op_Equality(co->GetInterface2(itf), (*::System::IntPtr::Zero))) 
                    {
                        return nullptr;
                    }
                }
            }
        }
        return co;
    }
    
    System::Type* Marshal::GetTypeForITypeInfo(void* piTypeInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::GetTypeInfoName(UCOMITypeInfo* pTI) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::GetTypeInfoName2(ComTypes::ITypeInfo* typeInfo) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Guid Marshal::GetTypeLibGuid(UCOMITypeLib* pTLB) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Guid Marshal::GetTypeLibGuid2(ComTypes::ITypeLib* typelib) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Guid Marshal::GetTypeLibGuidForAssembly(System::Reflection::Assembly* asm_) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::GetTypeLibLcid(UCOMITypeLib* pTLB) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::GetTypeLibLcid2(ComTypes::ITypeLib* typelib) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::GetTypeLibName(UCOMITypeLib* pTLB) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::GetTypeLibName2(ComTypes::ITypeLib* typelib) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::GetTypeLibVersionForAssembly(System::Reflection::Assembly* inputAssembly, int32_t majorVersion, int32_t minorVersion) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::GetUniqueObjectForIUnknown(void* unknown) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetUnmanagedThunkForManagedMethodPtr(void* pfnMethodToWrap, void* pbSignature, int32_t cbSignature) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool Marshal::IsComObject(System::Object* o) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool Marshal::IsTypeVisibleFromCom(System::Type* t) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::NumParamBytes(System::Reflection::MethodInfo* m) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::GetLastWin32Error() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::OffsetOf(System::Type* t, System::String* fieldName) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::Prelink(System::Reflection::MethodInfo* m) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::PrelinkAll(System::Type* c) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::PtrToStringAnsi(void* ptr) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::PtrToStringAnsi2(void* ptr, int32_t len) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::PtrToStringAuto(void* ptr) {
        return (SystemDefaultCharSize ==  2) ? PtrToStringUni(ptr) : PtrToStringAnsi(ptr);
    }
    
    System::String* Marshal::PtrToStringAuto2(void* ptr, int32_t len) {
        return (SystemDefaultCharSize ==  2) ? PtrToStringUni2(ptr, len) : PtrToStringAnsi2(ptr, len);
    }
    
    System::String* Marshal::PtrToStringUni(void* ptr) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::PtrToStringUni2(void* ptr, int32_t len) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* Marshal::PtrToStringBSTR(void* ptr) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::PtrToStructure(void* ptr, System::Object* structure) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* Marshal::PtrToStructure2(void* ptr, System::Type* structureType) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::QueryInterfaceInternal(void* pUnk, System::Guid iid, void* ppv) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::QueryInterface(void* pUnk, System::Guid iid, void* ppv) {
        if(::System::IntPtr::op_Equality(pUnk, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Value cannot be null."), _T("pUnk"));
        }
        return QueryInterfaceInternal(pUnk, iid, ppv);
    }
    
    unsigned char Marshal::ReadByte(void* ptr) {
        return ReadByte2(ptr, 0);
    }
    
    unsigned char Marshal::ReadByte2(void* ptr, int32_t ofs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    unsigned char Marshal::ReadByte3(System::Object* ptr, int32_t ofs) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int16_t Marshal::ReadInt16(void* ptr) {
        return ReadInt162(ptr, 0);
    }
    
    int16_t Marshal::ReadInt162(void* ptr, int32_t ofs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int16_t Marshal::ReadInt163(System::Object* ptr, int32_t ofs) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::ReadInt32(void* ptr) {
        return ReadInt322(ptr, 0);
    }
    
    int32_t Marshal::ReadInt322(void* ptr, int32_t ofs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::ReadInt323(System::Object* ptr, int32_t ofs) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int64_t Marshal::ReadInt64(void* ptr) {
        return ReadInt642(ptr, 0);
    }
    
    int64_t Marshal::ReadInt642(void* ptr, int32_t ofs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int64_t Marshal::ReadInt643(System::Object* ptr, int32_t ofs) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::ReadIntPtr(void* ptr) {
        return ReadIntPtr2(ptr, 0);
    }
    
    void* Marshal::ReadIntPtr2(void* ptr, int32_t ofs) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::ReadIntPtr3(System::Object* ptr, int32_t ofs) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::ReAllocCoTaskMem(void* pv, int32_t cb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::ReAllocHGlobal(void* pv, void* cb) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::ReleaseInternal(void* pUnk) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::Release(void* pUnk) {
        if(::System::IntPtr::op_Equality(pUnk, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Value cannot be null."), _T("pUnk"));
        }
        return ReleaseInternal(pUnk);
    }
    
    int32_t Marshal::ReleaseComObjectInternal(System::Object* co) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t Marshal::ReleaseComObject(System::Object* o) {
        if((o ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Value cannot be null."), _T("o"));
        }
        if(!(IsComObject(o))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Value must be a Com object."), _T("o"));
        }
        return ReleaseComObjectInternal(o);
    }
    
    void Marshal::ReleaseThreadCache() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool Marshal::SetComObjectData(System::Object* obj, System::Object* key, System::Object* data) {
        throw cli::gcnew<System::NotSupportedException>(_T("MSDN states user code should never need to call this method."));
    }
    
    int32_t Marshal::SizeOf(System::Object* structure) {
        return SizeOf2(structure->GetType());
    }
    
    int32_t Marshal::SizeOf2(System::Type* t) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::StringToBSTR(System::String* s) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::StringToCoTaskMemAnsi(System::String* s) {
        int32_t length = (s->get_Length() + 1);
        void *ctm = AllocCoTaskMem(length);
        cli::array<unsigned char> *asBytes = (new cli::array<unsigned char>(length));
        for(int32_t i = 0; (i < s->get_Length()); i++) {
            asBytes->at(i) = (unsigned char)s->get_Chars(i);
        }
        asBytes->at(s->get_Length()) = 0;
        copy_to_unmanaged(asBytes, 0, ctm, length);
        return ctm;
    }
    
    void* Marshal::StringToCoTaskMemAuto(System::String* s) {
        return (SystemDefaultCharSize ==  2) ? StringToCoTaskMemUni(s) : StringToCoTaskMemAnsi(s);
    }
    
    void* Marshal::StringToCoTaskMemUni(System::String* s) {
        int32_t length = (s->get_Length() + 1);
        void *ctm = AllocCoTaskMem((length * 2));
        cli::array<char16_t> *asChars = (new cli::array<char16_t>(length));
        s->CopyTo(0, asChars, 0, s->get_Length());
        asChars->at(s->get_Length()) = u'\x0';
        copy_to_unmanaged(asChars, 0, ctm, length);
        return ctm;
    }
    
    void* Marshal::StringToHGlobalAnsi(System::String* s) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::StringToHGlobalAuto(System::String* s) {
        return (SystemDefaultCharSize ==  2) ? StringToHGlobalUni(s) : StringToHGlobalAnsi(s);
    }
    
    void* Marshal::StringToHGlobalUni(System::String* s) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::SecureStringToBSTR(System::Security::SecureString* s) {
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("s"));
        }
        int32_t len = s->get_Length();
        void *ctm = AllocCoTaskMem((((len + 1) * 2) + 4));
        cli::array<unsigned char> *buffer = nullptr;
        WriteInt322(ctm, 0, (len * 2));
        {
            cli::finally_guard([&]() {
                if((buffer != nullptr)) 
                for(int32_t i = buffer->get_Length(); (i > 0); ){
                    i--;
                    buffer->at(i) = 0;
                }
            });
            buffer = s->GetBuffer();
            for(int32_t i = 0; (i < len); i++) {
                WriteInt162(ctm, (4 + (i * 2)), (int16_t)(((int32_t)(buffer->at((i * 2))) << 8) | (int32_t)(buffer->at(((i * 2) + 1)))));
            }
            WriteInt162(ctm, (4 + buffer->get_Length()), 0);
        }
        return (void*)((int64_t)ctm + 4L);
    }
    
    void* Marshal::SecureStringToCoTaskMemAnsi(System::Security::SecureString* s) {
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("s"));
        }
        int32_t len = s->get_Length();
        void *ctm = AllocCoTaskMem((len + 1));
        cli::array<unsigned char> *copy = (new cli::array<unsigned char>((len + 1)));
        {
            cli::finally_guard([&]() {
                for(int32_t i = len; (i > 0); ){
                    i--;
                    copy->at(i) = 0;
                }
            });
            cli::array<unsigned char> *buffer = s->GetBuffer();
            int32_t i = 0, j = 0;
            for(; (i < len); i++, (j = j + 2)){
                copy->at(i) = buffer->at((j + 1));
                buffer->at(j) = 0;
                buffer->at((j + 1)) = 0;
            }
            copy->at(i) = 0;
            copy_to_unmanaged(copy, 0, ctm, (len + 1));
        }
        return ctm;
    }
    
    void* Marshal::SecureStringToCoTaskMemUnicode(System::Security::SecureString* s) {
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("s"));
        }
        int32_t len = s->get_Length();
        void *ctm = AllocCoTaskMem(((len * 2) + 2));
        cli::array<unsigned char> *buffer = nullptr;
        {
            cli::finally_guard([&]() {
                if((buffer != nullptr)) 
                for(int32_t i = buffer->get_Length(); (i > 0); ){
                    i--;
                    buffer->at(i) = 0;
                }
            });
            buffer = s->GetBuffer();
            for(int32_t i = 0; (i < len); i++) {
                WriteInt162(ctm, (i * 2), (int16_t)(((int32_t)(buffer->at((i * 2))) << 8) | (int32_t)(buffer->at(((i * 2) + 1)))));
            }
            WriteInt162(ctm, buffer->get_Length(), 0);
        }
        return ctm;
    }
    
    void* Marshal::SecureStringToGlobalAllocAnsi(System::Security::SecureString* s) {
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("s"));
        }
        return SecureStringToCoTaskMemAnsi(s);
    }
    
    void* Marshal::SecureStringToGlobalAllocUnicode(System::Security::SecureString* s) {
        if((s ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("s"));
        }
        return SecureStringToCoTaskMemUnicode(s);
    }
    
    void Marshal::StructureToPtr(System::Object* structure, void* ptr, bool fDeleteOld) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::ThrowExceptionForHR(int32_t errorCode) {
        System::Exception *ex = GetExceptionForHR(errorCode);
        if((ex != nullptr)) 
        {
            throw ex;
        }
    }
    
    void Marshal::ThrowExceptionForHR2(int32_t errorCode, void* errorInfo) {
        System::Exception *ex = GetExceptionForHR2(errorCode, errorInfo);
        if((ex != nullptr)) 
        {
            throw ex;
        }
    }
    
    void* Marshal::UnsafeAddrOfPinnedArrayElement(System::Array* arr, int32_t index) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteByte(void* ptr, unsigned char val) {
        WriteByte2(ptr, 0, val);
    }
    
    void Marshal::WriteByte2(void* ptr, int32_t ofs, unsigned char val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteByte3(System::Object* ptr, int32_t ofs, unsigned char val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt16(void* ptr, int16_t val) {
        WriteInt162(ptr, 0, val);
    }
    
    void Marshal::WriteInt162(void* ptr, int32_t ofs, int16_t val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt163(System::Object* ptr, int32_t ofs, int16_t val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt164(void* ptr, char16_t val) {
        WriteInt165(ptr, 0, val);
    }
    
    void Marshal::WriteInt165(void* ptr, int32_t ofs, char16_t val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt166(System::Object* ptr, int32_t ofs, char16_t val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt32(void* ptr, int32_t val) {
        WriteInt322(ptr, 0, val);
    }
    
    void Marshal::WriteInt322(void* ptr, int32_t ofs, int32_t val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt323(System::Object* ptr, int32_t ofs, int32_t val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt64(void* ptr, int64_t val) {
        WriteInt642(ptr, 0, val);
    }
    
    void Marshal::WriteInt642(void* ptr, int32_t ofs, int64_t val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteInt643(System::Object* ptr, int32_t ofs, int64_t val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteIntPtr(void* ptr, void* val) {
        WriteIntPtr2(ptr, 0, val);
    }
    
    void Marshal::WriteIntPtr2(void* ptr, int32_t ofs, void* val) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void Marshal::WriteIntPtr3(System::Object* ptr, int32_t ofs, void* val) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Exception* Marshal::GetExceptionForHR(int32_t errorCode) {
        return GetExceptionForHR2(errorCode, (*::System::IntPtr::Zero));
    }
    
    System::Exception* Marshal::GetExceptionForHR2(int32_t errorCode, void* errorInfo) {
        const int32_t E_OUTOFMEMORY = -2147024882;
        const int32_t E_INVALIDARG = -2147024809;
        switch(errorCode) {
            case -2147024882: case_1300: {
                return cli::gcnew<System::OutOfMemoryException>();
            }
            case -2147024809: case_1301: {
                return cli::gcnew<System::ArgumentException>();
            }
        }
        if((errorCode < 0)) 
        {
            return cli::gcnew<COMException>(_T(""), errorCode);
        }
        return nullptr;
    }
    
    int32_t Marshal::FinalReleaseComObject(System::Object* o) {
        while((ReleaseComObject(o) != 0)) ;
        return 0;
    }
    
    System::Delegate* Marshal::GetDelegateForFunctionPointerInternal(void* ptr, System::Type* t) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Delegate* Marshal::GetDelegateForFunctionPointer(void* ptr, System::Type* t) {
        if(System::Type::op_Equality2(t, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("t"));
        }
        if((!(t->IsSubclassOf_5d7dbe0215a30fda(cli::typeof<System::Type>::info)) || System::Type::op_Equality2(t, cli::typeof<System::Type>::info))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Type is not a delegate"), _T("t"));
        }
        if(t->get_IsGenericType_4db8ddd5b97f3c14()) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("The specified Type must not be a generic type definition."));
        }
        if(::System::IntPtr::op_Equality(ptr, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("ptr"));
        }
        return GetDelegateForFunctionPointerInternal(ptr, t);
    }
    
    void* Marshal::GetFunctionPointerForDelegateInternal(System::Delegate* d) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* Marshal::GetFunctionPointerForDelegate(System::Delegate* d) {
        if((d ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("d"));
        }
        return GetFunctionPointerForDelegateInternal(d);
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void MarshalAsAttribute::constructor(int16_t unmanagedType) {
        this->utype = (UnmanagedType)(unmanagedType);
    }
    
    void MarshalAsAttribute::constructor(UnmanagedType unmanagedType) {
        this->utype = unmanagedType;
    }
    
    UnmanagedType MarshalAsAttribute::get_Value() {
        return this->utype;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void MarshalDirectiveException::constructor() {
        this->set_HResult(-2146233035);
    }
    
    void MarshalDirectiveException::constructor(System::String* message) {
        this->set_HResult(-2146233035);
    }
    
    void MarshalDirectiveException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233035);
    }
    
    void MarshalDirectiveException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void OptionalAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void OutAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void PreserveSigAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void PrimaryInteropAssemblyAttribute::constructor(int32_t major, int32_t minor) {
        this->major = major;
        this->minor = minor;
    }
    
    int32_t PrimaryInteropAssemblyAttribute::get_MajorVersion() {
        return this->major;
    }
    
    int32_t PrimaryInteropAssemblyAttribute::get_MinorVersion() {
        return this->minor;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void ProgIdAttribute::constructor(System::String* progId) {
        this->pid = progId;
    }
    
    System::String* ProgIdAttribute::get_Value() {
        return this->pid;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void RegistrationServices::constructor() {
    }
    
    System::Guid RegistrationServices::GetManagedCategoryGuid_38cd596c2f9eb851() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* RegistrationServices::GetProgIdForType_22a055997192433f(System::Type* type) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<System::Type*>* RegistrationServices::GetRegistrableTypesInAssembly_f4832afc86edb77b(System::Reflection::Assembly* assembly) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RegistrationServices::RegisterAssembly_4649f445e61234bc(System::Reflection::Assembly* assembly, AssemblyRegistrationFlags flags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrationServices::RegisterTypeForComClients_aa8d2fcc118d895b(System::Type* type, System::Guid g) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RegistrationServices::TypeRepresentsComType_d8c47394bee95d97(System::Type* type) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RegistrationServices::TypeRequiresRegistration_1fc479ac880dcd46(System::Type* type) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RegistrationServices::UnregisterAssembly_5b40456f5b95206b(System::Reflection::Assembly* assembly) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t RegistrationServices::RegisterTypeForComClients_d667f0f86863aff1(System::Type* type, RegistrationClassContext classContext, RegistrationConnectionType flags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrationServices::UnregisterTypeForComClients_226371171b836bed(int32_t cookie) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void RuntimeEnvironment::constructor() {
    }
    
    bool RuntimeEnvironment::FromGlobalAccessCache(System::Reflection::Assembly* a) {
        return a->get_GlobalAssemblyCache_db80d4f5ee2824e7();
    }
    
    System::String* RuntimeEnvironment::GetRuntimeDirectory() {
        return System::IO::Path::GetDirectoryName(cli::typeof<System::Type>::info->get_Assembly_3aae0acbf2a6d696()->get_Location_3a7779d7eb72fa50());
    }
    
    System::String* RuntimeEnvironment::GetSystemVersion() {
        return cli::concat(_T("v"), cli::box(System::Environment::get_Version()->get_Major()), _T("."), cli::box(System::Environment::get_Version()->get_Minor()), _T("."), cli::box(System::Environment::get_Version()->get_Build()));
    }
    
    System::String* RuntimeEnvironment::get_SystemConfigurationFile() {
        System::String *path = System::Environment::GetMachineConfigPath();
        if(System::Security::SecurityManager::get_SecurityEnabled()) 
        {
            cli::gcnew<System::Security::Permissions::FileIOPermission>(System::Security::Permissions::FileIOPermissionAccess::PathDiscovery, path)->Demand();
        }
        return path;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SafeArrayRankMismatchException::constructor() {
        this->set_HResult(-2146233032);
    }
    
    void SafeArrayRankMismatchException::constructor(System::String* message) {
        this->set_HResult(-2146233032);
    }
    
    void SafeArrayRankMismatchException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233032);
    }
    
    void SafeArrayRankMismatchException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SafeArrayTypeMismatchException::constructor() {
        this->set_HResult(-2146233037);
    }
    
    void SafeArrayTypeMismatchException::constructor(System::String* message) {
        this->set_HResult(-2146233037);
    }
    
    void SafeArrayTypeMismatchException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233037);
    }
    
    void SafeArrayTypeMismatchException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SafeBuffer::constructor(bool ownsHandle) {
    }
    
    void SafeBuffer::Initialize(uint64_t numBytes) {
        if((numBytes ==  0UL)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("numBytes"));
        }
        this->inited = true;
        this->byte_length = numBytes;
        this->last_byte = (unsigned char*)(((unsigned char*)((void*)this->handle) + (uint64_t)(numBytes)));
    }
    
    void SafeBuffer::Initialize2(uint32_t numElements, uint32_t sizeOfEachElement) {
        Initialize((uint64_t)((numElements * sizeOfEachElement)));
    }
    
    void SafeBuffer::AcquirePointer(unsigned char* pointer) {
        if(!(this->inited)) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        bool success = false;
        SafeHandle::DangerousAddRef(success);
        if(success) 
        {
            pointer = (unsigned char*)((void*)this->handle);
        }
    }
    
    void SafeBuffer::ReleasePointer() {
        if(!(this->inited)) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        SafeHandle::DangerousRelease();
    }
    
    uint64_t SafeBuffer::get_ByteLength() {
        return this->byte_length;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SafeHandle::constructor(void* invalidHandleValue, bool ownsHandle) {
        this->invalid_handle_value = invalidHandleValue;
        this->owns_handle = ownsHandle;
        this->refcount = 1;
    }
    
    void SafeHandle::Finalize_d61e1393c0fc869c() {
        {
            cli::finally_guard([&]() {
                Finalize_194ea81baa80af66();
            });
            if((this->owns_handle && !(this->get_IsInvalid_64f170f124c20f6b()))) 
            {
                ReleaseHandle_f52de76ab86d3480();
                this->handle = this->invalid_handle_value;
            }
        }
    }
    
    void SafeHandle::Close() {
        if((this->refcount ==  0)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
        }
        int32_t newcount = 0, current = 0;
        bool registered = false;
        System::Runtime::CompilerServices::RuntimeHelpers::PrepareConstrainedRegions();
        {
            cli::finally_guard([&]() {
                if((((registered && (newcount ==  0)) && this->owns_handle) && !(this->get_IsInvalid_64f170f124c20f6b()))) 
                {
                    ReleaseHandle_f52de76ab86d3480();
                    this->handle = this->invalid_handle_value;
                    this->refcount = -1;
                }
            });
            do {
                current = this->refcount;
                newcount = (current - 1);
                {
                    cli::finally_guard([&]() {
                        if((System::Threading::Interlocked::CompareExchange(this->refcount, newcount, current) ==  current)) 
                        {
                            registered = true;
                        }
                    });
                }
            }
            while(!(registered));
        }
    }
    
    void SafeHandle::DangerousAddRef(bool success) {
        if((this->refcount <= 0)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
        }
        bool registered = false;
        int32_t newcount, current;
        do {
            current = this->refcount;
            newcount = (current + 1);
            if((current <= 0)) 
            {
                throw cli::gcnew<System::ObjectDisposedException>(System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
            }
            System::Runtime::CompilerServices::RuntimeHelpers::PrepareConstrainedRegions();
            {
                cli::finally_guard([&]() {
                    if((System::Threading::Interlocked::CompareExchange(this->refcount, newcount, current) ==  current)) 
                    {
                        registered = success = true;
                    }
                });
            }
        }
        while(!(registered));
    }
    
    void* SafeHandle::DangerousGetHandle() {
        if((this->refcount <= 0)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
        }
        return this->handle;
    }
    
    void SafeHandle::DangerousRelease() {
        if((this->refcount <= 0)) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
        }
        int32_t newcount, current;
        do {
            current = this->refcount;
            newcount = (current - 1);
        }
        while((System::Threading::Interlocked::CompareExchange(this->refcount, newcount, current) != current));
        if((((newcount ==  0) && this->owns_handle) && !(this->get_IsInvalid_64f170f124c20f6b()))) 
        {
            ReleaseHandle_f52de76ab86d3480();
            this->handle = this->invalid_handle_value;
        }
    }
    
    void SafeHandle::Dispose() {
        Dispose_96278d8fa537dff(true);
        System::GC::SuppressFinalize(this);
    }
    
    void SafeHandle::SetHandleAsInvalid() {
        this->handle = this->invalid_handle_value;
    }
    
    void SafeHandle::Dispose_96278d8fa537dff(bool disposing) {
        if(disposing) 
        {
            Close();
        }
         else 
        {
        }
    }
    
    void SafeHandle::SetHandle(void* handle) {
        this->handle = handle;
    }
    
    bool SafeHandle::get_IsClosed() {
        return (this->refcount <= 0);
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SEHException::constructor() {
    }
    
    void SEHException::constructor(System::String* message) {
    }
    
    void SEHException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void SEHException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    bool SEHException::CanResume_59eba1a7d056940e() {
        return false;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void SetWin32ContextInIDispatchAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void StructLayoutAttribute::constructor(int16_t layoutKind) {
        this->lkind = (LayoutKind)(layoutKind);
    }
    
    void StructLayoutAttribute::constructor(LayoutKind layoutKind) {
        this->lkind = layoutKind;
    }
    
    LayoutKind StructLayoutAttribute::get_Value() {
        return this->lkind;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeIdentifierAttribute::constructor() {
    }
    
    void TypeIdentifierAttribute::constructor(System::String* scope, System::String* identifier) {
        this->scope = scope;
        this->identifier = identifier;
    }
    
    System::String* TypeIdentifierAttribute::get_Scope() {
        return this->scope;
    }
    
    System::String* TypeIdentifierAttribute::get_Identifier() {
        return this->identifier;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibConverter::constructor() {
    }
    
    System::Object* TypeLibConverter::ConvertAssemblyToTypeLib(System::Reflection::Assembly* assembly, System::String* strTypeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink* notifySink) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::Emit::AssemblyBuilder* TypeLibConverter::ConvertTypeLibToAssembly(System::Object* typeLib, System::String* asmFileName, int32_t flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, bool unsafeInterfaces) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::Emit::AssemblyBuilder* TypeLibConverter::ConvertTypeLibToAssembly2(System::Object* typeLib, System::String* asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink* notifySink, cli::array<unsigned char>* publicKey, System::Reflection::StrongNameKeyPair* keyPair, System::String* asmNamespace, System::Version* asmVersion) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool TypeLibConverter::GetPrimaryInteropAssembly(System::Guid g, int32_t major, int32_t minor, int32_t lcid, System::String* asmName, System::String* asmCodeBase) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibFuncAttribute::constructor(int16_t flags) {
        this->flags = (TypeLibFuncFlags)(flags);
    }
    
    void TypeLibFuncAttribute::constructor(TypeLibFuncFlags flags) {
        this->flags = flags;
    }
    
    TypeLibFuncFlags TypeLibFuncAttribute::get_Value() {
        return this->flags;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibImportClassAttribute::constructor(System::Type* importClass) {
        this->_importClass = importClass->ToString_1636a0751cb9ac11();
    }
    
    System::String* TypeLibImportClassAttribute::get_Value() {
        return this->_importClass;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibTypeAttribute::constructor(int16_t flags) {
        this->flags = (TypeLibTypeFlags)(flags);
    }
    
    void TypeLibTypeAttribute::constructor(TypeLibTypeFlags flags) {
        this->flags = flags;
    }
    
    TypeLibTypeFlags TypeLibTypeAttribute::get_Value() {
        return this->flags;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibVarAttribute::constructor(int16_t flags) {
        this->flags = (TypeLibVarFlags)(flags);
    }
    
    void TypeLibVarAttribute::constructor(TypeLibVarFlags flags) {
        this->flags = flags;
    }
    
    TypeLibVarFlags TypeLibVarAttribute::get_Value() {
        return this->flags;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void TypeLibVersionAttribute::constructor(int32_t major, int32_t minor) {
        this->major = major;
        this->minor = minor;
    }
    
    int32_t TypeLibVersionAttribute::get_MajorVersion() {
        return this->major;
    }
    
    int32_t TypeLibVersionAttribute::get_MinorVersion() {
        return this->minor;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void UnknownWrapper::constructor(System::Object* obj) {
        this->InternalObject = obj;
    }
    
    System::Object* UnknownWrapper::get_WrappedObject() {
        return this->InternalObject;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void UnmanagedFunctionPointerAttribute::constructor(CallingConvention callingConvention) {
        this->call_conv = callingConvention;
    }
    
    CallingConvention UnmanagedFunctionPointerAttribute::get_CallingConvention() {
        return this->call_conv;
    }
    
}}}
namespace System { namespace Runtime { namespace InteropServices {
    
    
    void VariantWrapper::constructor(System::Object* obj) {
        this->_wrappedObject = obj;
    }
    
    System::Object* VariantWrapper::get_WrappedObject() {
        return this->_wrappedObject;
    }
    
}}}
namespace System { namespace Runtime { namespace Reliability {
    
    
    void PrePrepareMethodAttribute2::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Reliability {
    
    
    void ReliabilityContractAttribute2::constructor() {
    }
    
    void ReliabilityContractAttribute2::constructor(Consistency2 consistency, CER cer) {
        this->consistency = consistency;
        this->cer = cer;
    }
    
    CER ReliabilityContractAttribute2::get_CER() {
        return this->cer;
    }
    
    CER ReliabilityContractAttribute2::set_CER(CER value) {
        this->cer = value;
        return get_CER();
    }
    
    Consistency2 ReliabilityContractAttribute2::get_ConsistencyGuarantee() {
        return this->consistency;
    }
    
    Consistency2 ReliabilityContractAttribute2::set_ConsistencyGuarantee(Consistency2 value) {
        this->consistency = value;
        return get_ConsistencyGuarantee();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ActivatedClientTypeEntry::constructor(System::Type* type, System::String* appUrl) {
        this->set_AssemblyName(type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
        this->set_TypeName(type->get_FullName_7e8fa72ba225e1a4());
        this->applicationUrl = appUrl;
        this->obj_type = type;
    }
    
    void ActivatedClientTypeEntry::constructor(System::String* typeName, System::String* assemblyName, System::String* appUrl) {
        this->set_AssemblyName(assemblyName);
        this->set_TypeName(typeName);
        this->applicationUrl = appUrl;
        System::Reflection::Assembly *a = System::Reflection::Assembly::Load(assemblyName);
        this->obj_type = a->GetType_99cbfcc4e094eb08(typeName);
        if(System::Type::op_Equality2(this->obj_type, nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Type not found: "), typeName));
        }
    }
    
    System::String* ActivatedClientTypeEntry::ToString_1636a0751cb9ac11() {
        return cli::concat(this->get_TypeName(), this->get_AssemblyName());
    }
    
    System::String* ActivatedClientTypeEntry::get_ApplicationUrl() {
        return this->applicationUrl;
    }
    
    cli::array<Contexts::IContextAttribute*>* ActivatedClientTypeEntry::get_ContextAttributes() {
        return nullptr;
    }
    
    cli::array<Contexts::IContextAttribute*>* ActivatedClientTypeEntry::set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value) {
        return get_ContextAttributes();
    }
    
    System::Type* ActivatedClientTypeEntry::get_ObjectType() {
        return this->obj_type;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ActivatedServiceTypeEntry::constructor(System::Type* type) {
        this->set_AssemblyName(type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
        this->set_TypeName(type->get_FullName_7e8fa72ba225e1a4());
        this->obj_type = type;
    }
    
    void ActivatedServiceTypeEntry::constructor(System::String* typeName, System::String* assemblyName) {
        this->set_AssemblyName(assemblyName);
        this->set_TypeName(typeName);
        System::Reflection::Assembly *a = System::Reflection::Assembly::Load(assemblyName);
        this->obj_type = a->GetType_99cbfcc4e094eb08(typeName);
        if(System::Type::op_Equality2(this->obj_type, nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Type not found: "), typeName));
        }
    }
    
    System::String* ActivatedServiceTypeEntry::ToString_1636a0751cb9ac11() {
        return cli::concat(this->get_AssemblyName(), this->get_TypeName());
    }
    
    cli::array<Contexts::IContextAttribute*>* ActivatedServiceTypeEntry::get_ContextAttributes() {
        return nullptr;
    }
    
    cli::array<Contexts::IContextAttribute*>* ActivatedServiceTypeEntry::set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value) {
        return get_ContextAttributes();
    }
    
    System::Type* ActivatedServiceTypeEntry::get_ObjectType() {
        return this->obj_type;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void EnvoyInfo::constructor(Messaging::IMessageSink* sinks) {
        this->envoySinks = sinks;
    }
    
    Messaging::IMessageSink* EnvoyInfo::get_EnvoySinks() {
        return this->envoySinks;
    }
    
    Messaging::IMessageSink* EnvoyInfo::set_EnvoySinks(Messaging::IMessageSink* value) {
        this->envoySinks = value;
        return get_EnvoySinks();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void Identity::constructor(System::String* objectUri) {
        this->_objectUri = objectUri;
    }
    
    void Identity::NotifyClientDynamicSinks(bool start, Messaging::IMessage* req_msg, bool client_site, bool async) {
        if(((this->_clientDynamicProperties != nullptr) && this->_clientDynamicProperties->get_HasProperties())) 
        {
            this->_clientDynamicProperties->NotifyMessage(start, req_msg, client_site, async);
        }
    }
    
    void Identity::NotifyServerDynamicSinks(bool start, Messaging::IMessage* req_msg, bool client_site, bool async) {
        if(((this->_serverDynamicProperties != nullptr) && this->_serverDynamicProperties->get_HasProperties())) 
        {
            this->_serverDynamicProperties->NotifyMessage(start, req_msg, client_site, async);
        }
    }
    
    bool Identity::get_IsFromThisAppDomain() {
        return (this->_channelSink ==  nullptr);
    }
    
    Messaging::IMessageSink* Identity::get_ChannelSink() {
        return this->_channelSink;
    }
    
    Messaging::IMessageSink* Identity::set_ChannelSink(Messaging::IMessageSink* value) {
        this->_channelSink = value;
        return get_ChannelSink();
    }
    
    Messaging::IMessageSink* Identity::get_EnvoySink() {
        return this->_envoySink;
    }
    
    System::String* Identity::get_ObjectUri() {
        return this->_objectUri;
    }
    
    System::String* Identity::set_ObjectUri(System::String* value) {
        this->_objectUri = value;
        return get_ObjectUri();
    }
    
    bool Identity::get_IsConnected() {
        return (this->_objectUri != nullptr);
    }
    
    bool Identity::get_Disposed() {
        return this->_disposed;
    }
    
    bool Identity::set_Disposed(bool value) {
        this->_disposed = value;
        return get_Disposed();
    }
    
    Contexts::DynamicPropertyCollection* Identity::get_ClientDynamicProperties() {
        if((this->_clientDynamicProperties ==  nullptr)) 
        {
            this->_clientDynamicProperties = cli::gcnew<Contexts::DynamicPropertyCollection>();
        }
        return this->_clientDynamicProperties;
    }
    
    Contexts::DynamicPropertyCollection* Identity::get_ServerDynamicProperties() {
        if((this->_serverDynamicProperties ==  nullptr)) 
        {
            this->_serverDynamicProperties = cli::gcnew<Contexts::DynamicPropertyCollection>();
        }
        return this->_serverDynamicProperties;
    }
    
    bool Identity::get_HasClientDynamicSinks() {
        return ((this->_clientDynamicProperties != nullptr) && this->_clientDynamicProperties->get_HasProperties());
    }
    
    bool Identity::get_HasServerDynamicSinks() {
        return ((this->_serverDynamicProperties != nullptr) && this->_serverDynamicProperties->get_HasProperties());
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ClientIdentity::constructor(System::String* objectUri, ObjRef* objRef) {
        this->_objRef = objRef;
        this->_envoySink = (this->_objRef->get_EnvoyInfo_a6cfdc6b1409eef0() != nullptr) ? this->_objRef->get_EnvoyInfo_a6cfdc6b1409eef0()->get_EnvoySinks_1c0ed1452ceaf245() : nullptr;
    }
    
    ObjRef* ClientIdentity::CreateObjRef_366556653a47f288(System::Type* requestedType) {
        return this->_objRef;
    }
    
    System::MarshalByRefObject* ClientIdentity::get_ClientProxy() {
        return cli::cast<System::MarshalByRefObject*>(this->_proxyReference->get_Target_4c75add6ace39d1f());
    }
    
    System::MarshalByRefObject* ClientIdentity::set_ClientProxy(System::MarshalByRefObject* value) {
        this->_proxyReference = cli::gcnew<System::WeakReference>(value);
        return get_ClientProxy();
    }
    
    System::String* ClientIdentity::get_TargetUri() {
        return this->_objRef->get_URI_8a7d9b91992639ed();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    System::Collections::Hashtable*  InternalRemotingServices::_soapAttributes;
    
    InternalRemotingServices::InternalRemotingServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void InternalRemotingServices::constructor() {
    }
    
    void InternalRemotingServices::static_constructor() {
    }
    
    void InternalRemotingServices::DebugOutChnl(System::String* s) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    Metadata::SoapAttribute* InternalRemotingServices::GetCachedSoapAttribute(System::Object* reflectionObject) {
        {
            cli::lock_guard{_soapAttributes->get_SyncRoot_2d1e4aa44bab8a0d()};
            Metadata::SoapAttribute *att = cli::as<Metadata::SoapAttribute*>(_soapAttributes->get_Item_d75c6e706b965758(reflectionObject));
            if((att != nullptr)) 
            {
                return att;
            }
            System::Reflection::ICustomAttributeProvider *ap = cli::cast<System::Reflection::ICustomAttributeProvider*>(reflectionObject);
            cli::array<System::Object*> *atts = ap->GetCustomAttributes_a458b60110eb1adc(cli::typeof<System::Type>::info, true);
            if((atts->get_Length() > 0)) 
            {
                att = cli::cast<Metadata::SoapAttribute*>(atts->at(0));
            }
             else 
            {
                if(cli::is<System::Type>(reflectionObject)) 
                {
                    att = cli::gcnew<Metadata::SoapTypeAttribute>();
                }
                 else 
                {
                    if(cli::is<System::Reflection::FieldInfo>(reflectionObject)) 
                    {
                        att = cli::gcnew<Metadata::SoapFieldAttribute>();
                    }
                     else 
                    {
                        if(cli::is<System::Reflection::MethodBase>(reflectionObject)) 
                        {
                            att = cli::gcnew<Metadata::SoapMethodAttribute>();
                        }
                         else 
                        {
                            if(cli::is<System::Reflection::ParameterInfo>(reflectionObject)) 
                            {
                                att = cli::gcnew<Metadata::SoapParameterAttribute>();
                            }
                        }
                    }
                }
            }
            att->SetReflectionObject_18f6b22db2459372(reflectionObject);
            _soapAttributes->set_Item_84c7e24d9caa09(reflectionObject, att);
            return att;
        }
    }
    
    void InternalRemotingServices::RemotingAssert(bool condition, System::String* message) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void InternalRemotingServices::RemotingTrace(cli::array<System::Object*>* messages) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void InternalRemotingServices::SetServerIdentity(Messaging::MethodCall* m, System::Object* srvID) {
        Identity *ident = cli::as<Identity*>(srvID);
        if((ident ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("srvID"));
        }
        RemotingServices::SetMessageTargetIdentity(m, ident);
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ObjectHandle::constructor(System::Object* o) {
        this->_wrapped = o;
    }
    
    System::Object* ObjectHandle::InitializeLifetimeService_8f02e9c96ffbe30f() {
        return System::MarshalByRefObject::InitializeLifetimeService_8f02e9c96ffbe30f();
    }
    
    System::Object* ObjectHandle::Unwrap() {
        return this->_wrapped;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    int32_t  ObjRef::MarshalledObjectRef;
    int32_t  ObjRef::WellKnowObjectRef;
    
    ObjRef::ObjRef()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ObjRef::constructor() {
        UpdateChannelInfo();
    }
    
    void ObjRef::constructor(System::String* typeName, System::String* uri, IChannelInfo* cinfo) {
        this->uri = uri;
        this->channel_info = cinfo;
        this->typeInfo = cli::gcnew<TypeInfo2>(System::Type::GetType5(typeName, true));
    }
    
    void ObjRef::constructor(ObjRef* o, bool unmarshalAsProxy) {
        this->channel_info = o->channel_info;
        this->uri = o->uri;
        this->typeInfo = o->typeInfo;
        this->envoyInfo = o->envoyInfo;
        this->flags = o->flags;
        if(unmarshalAsProxy) 
        {
            (this->flags = this->flags | MarshalledObjectRef);
        }
    }
    
    void ObjRef::constructor(System::MarshalByRefObject* o, System::Type* requestedType) {
        if((o ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("o"));
        }
        if(System::Type::op_Equality2(requestedType, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("requestedType"));
        }
        this->uri = RemotingServices::GetObjectUri(o);
        this->typeInfo = cli::gcnew<TypeInfo2>(requestedType);
        if(!(requestedType->IsInstanceOfType_bd709d8c55b4333d(o))) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("The server object type cannot be cast to the requested type "), requestedType->get_FullName_7e8fa72ba225e1a4()));
        }
        UpdateChannelInfo();
    }
    
    void ObjRef::constructor(System::Type* type, System::String* url, System::Object* remoteChannelData) {
        this->uri = url;
        this->typeInfo = cli::gcnew<TypeInfo2>(type);
        if((remoteChannelData != nullptr)) 
        {
            this->channel_info = cli::gcnew<ChannelInfo>(remoteChannelData);
        }
        (this->flags = this->flags | WellKnowObjectRef);
    }
    
    void ObjRef::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::Runtime::Serialization::SerializationInfoEnumerator *en = info->GetEnumerator();
        bool marshalledValue = true;
        while(en->MoveNext()) {
            System::String* tmp_328 = en->get_Name();
            ::System::Int32 tmp_329 = -1;
            if(::System::String::Equals3(tmp_328, _T("uri"))) tmp_329 = 0;
            if(::System::String::Equals3(tmp_328, _T("typeInfo"))) tmp_329 = 1;
            if(::System::String::Equals3(tmp_328, _T("channelInfo"))) tmp_329 = 2;
            if(::System::String::Equals3(tmp_328, _T("envoyInfo"))) tmp_329 = 3;
            if(::System::String::Equals3(tmp_328, _T("fIsMarshalled"))) tmp_329 = 4;
            if(::System::String::Equals3(tmp_328, _T("objrefFlags"))) tmp_329 = 5;
            switch(tmp_329)
            {
                case 0: case_1302: 
                {
                    this->uri = cli::cast<System::String*>(en->get_Value());
                    break;
                }
                case 1: case_1303: 
                {
                    this->typeInfo = cli::cast<IRemotingTypeInfo*>(en->get_Value());
                    break;
                }
                case 2: case_1304: 
                {
                    this->channel_info = cli::cast<IChannelInfo*>(en->get_Value());
                    break;
                }
                case 3: case_1305: 
                {
                    this->envoyInfo = cli::cast<IEnvoyInfo*>(en->get_Value());
                    break;
                }
                case 4: case_1306: 
                {
                    int32_t status;
                    System::Object *o = en->get_Value();
                    if(cli::is<System::String>(o)) 
                    {
                        status = cli::cast<System::IConvertible*>(o)->ToInt32_9e7108d4c09b7e42(nullptr);
                    }
                     else 
                    {
                        status = cli::unbox<int32_t>(o);
                    }
                    if((status ==  0)) 
                    {
                        marshalledValue = false;
                    }
                    break;
                }
                case 5: case_1307: 
                {
                    this->flags = System::Convert::ToInt3218(en->get_Value());
                    break;
                }
                default: case_1308: 
                {
                    throw cli::gcnew<System::NotSupportedException>();
                }
            }
        }
        if(marshalledValue) 
        {
            (this->flags = this->flags | MarshalledObjectRef);
        }
    }
    
    void ObjRef::static_constructor() {
    }
    
    bool ObjRef::IsPossibleToCAD() {
        return false;
    }
    
    void ObjRef::GetObjectData_ee660fdbddbfb758(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        info->SetType(System::Object::GetType());
        info->AddValue16(_T("uri"), this->uri);
        info->AddValue(_T("typeInfo"), this->typeInfo, cli::typeof<System::Type>::info);
        info->AddValue(_T("envoyInfo"), this->envoyInfo, cli::typeof<System::Type>::info);
        info->AddValue(_T("channelInfo"), this->channel_info, cli::typeof<System::Type>::info);
        info->AddValue4(_T("objrefFlags"), this->flags);
    }
    
    System::Object* ObjRef::GetRealObject_95f064ae72c47655(System::Runtime::Serialization::StreamingContext context) {
        if(((this->flags & MarshalledObjectRef) > 0)) 
        {
            return RemotingServices::Unmarshal(this);
        }
         else 
        {
            return this;
        }
    }
    
    bool ObjRef::IsFromThisAppDomain() {
        Identity *identity = RemotingServices::GetIdentityForUri(this->uri);
        if((identity ==  nullptr)) 
        {
            return false;
        }
        return identity->get_IsFromThisAppDomain();
    }
    
    bool ObjRef::IsFromThisProcess() {
        for(auto tmp_330 : this->channel_info->get_ChannelData_a0d7a480581057f3()) {
            auto data = cli::cast<System::Object*>(tmp_330);
            {
                if(cli::is<Channels::CrossAppDomainData>(data)) 
                {
                    System::String *refProcId = cli::cast<Channels::CrossAppDomainData*>(data)->get_ProcessID();
                    return System::String::op_Equality(refProcId, RemotingConfiguration::get_ProcessId());
                }
            }
        }
        return true;
    }
    
    void ObjRef::UpdateChannelInfo() {
        this->channel_info = cli::gcnew<ChannelInfo>();
    }
    
    bool ObjRef::get_IsReferenceToWellKnow() {
        return ((this->flags & WellKnowObjectRef) > 0);
    }
    
    IChannelInfo* ObjRef::get_ChannelInfo_9ec11d234d0cc35e() {
        return this->channel_info;
    }
    
    IChannelInfo* ObjRef::set_ChannelInfo_b0d7316238ca0615(IChannelInfo* value) {
        this->channel_info = value;
        return get_ChannelInfo_9ec11d234d0cc35e();
    }
    
    IEnvoyInfo* ObjRef::get_EnvoyInfo_a6cfdc6b1409eef0() {
        return this->envoyInfo;
    }
    
    IEnvoyInfo* ObjRef::set_EnvoyInfo_4f39d454ae79e3bf(IEnvoyInfo* value) {
        this->envoyInfo = value;
        return get_EnvoyInfo_a6cfdc6b1409eef0();
    }
    
    IRemotingTypeInfo* ObjRef::get_TypeInfo_b4ea890a0c9f26cd() {
        return this->typeInfo;
    }
    
    IRemotingTypeInfo* ObjRef::set_TypeInfo_9fa39a26a11d5ac0(IRemotingTypeInfo* value) {
        this->typeInfo = value;
        return get_TypeInfo_b4ea890a0c9f26cd();
    }
    
    System::String* ObjRef::get_URI_8a7d9b91992639ed() {
        return this->uri;
    }
    
    System::String* ObjRef::set_URI_6a4837f1e4931068(System::String* value) {
        this->uri = value;
        return get_URI_8a7d9b91992639ed();
    }
    
    System::Type* ObjRef::get_ServerType() {
        if(System::Type::op_Equality2(this->_serverType, nullptr)) 
        {
            this->_serverType = System::Type::GetType4(this->typeInfo->get_TypeName_e368785a4c79e626());
        }
        return this->_serverType;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    System::String*  RemotingConfiguration::applicationID;
    System::String*  RemotingConfiguration::applicationName;
    System::String*  RemotingConfiguration::processGuid;
    bool  RemotingConfiguration::defaultConfigRead;
    bool  RemotingConfiguration::defaultDelayedConfigRead;
    System::String*  RemotingConfiguration::_errorMode;
    System::Collections::Hashtable*  RemotingConfiguration::wellKnownClientEntries;
    System::Collections::Hashtable*  RemotingConfiguration::activatedClientEntries;
    System::Collections::Hashtable*  RemotingConfiguration::wellKnownServiceEntries;
    System::Collections::Hashtable*  RemotingConfiguration::activatedServiceEntries;
    System::Collections::Hashtable*  RemotingConfiguration::channelTemplates;
    System::Collections::Hashtable*  RemotingConfiguration::clientProviderTemplates;
    System::Collections::Hashtable*  RemotingConfiguration::serverProviderTemplates;
    
    RemotingConfiguration::RemotingConfiguration()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void RemotingConfiguration::static_constructor() {
    }
    
    void RemotingConfiguration::Configure(System::String* filename, bool ensureSecurity) {
        {
            cli::lock_guard{channelTemplates};
            if(!(defaultConfigRead)) 
            {
                ReadConfigFile(System::Environment::GetMachineConfigPath());
                defaultConfigRead = true;
            }
            if((filename != nullptr)) 
            {
                ReadConfigFile(filename);
            }
        }
    }
    
    void RemotingConfiguration::Configure2(System::String* filename) {
        Configure(filename, false);
    }
    
    void RemotingConfiguration::ReadConfigFile(System::String* filename) {
        try {
            Mono::Xml::SmallXmlParser *parser = cli::gcnew<Mono::Xml::SmallXmlParser>();
            {
                /* USING - BLOCK */
                auto rreader = cli::gcnew<System::IO::StreamReader>(filename);
                cli::using_guard{rreader};
                ConfigHandler *handler = cli::gcnew<ConfigHandler>(false);
                parser->Parse(rreader, handler);
            }
        }
        catch(System::Exception* ex) {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Configuration file \'"), filename), ex);
        }
    }
    
    void RemotingConfiguration::LoadDefaultDelayedChannels() {
        {
            cli::lock_guard{channelTemplates};
            if((defaultDelayedConfigRead || defaultConfigRead)) 
            {
                return;
            }
            Mono::Xml::SmallXmlParser *parser = cli::gcnew<Mono::Xml::SmallXmlParser>();
            {
                /* USING - BLOCK */
                auto rreader = cli::gcnew<System::IO::StreamReader>(System::Environment::GetMachineConfigPath());
                cli::using_guard{rreader};
                ConfigHandler *handler = cli::gcnew<ConfigHandler>(true);
                parser->Parse(rreader, handler);
            }
            defaultDelayedConfigRead = true;
        }
    }
    
    cli::array<ActivatedClientTypeEntry*>* RemotingConfiguration::GetRegisteredActivatedClientTypes() {
        {
            cli::lock_guard{channelTemplates};
            cli::array<ActivatedClientTypeEntry*> *entries = (new cli::array<ActivatedClientTypeEntry*>(activatedClientEntries->get_Count_40aff81471a60b4c()));
            activatedClientEntries->get_Values_4ed88b5f6e59ef25()->CopyTo_7065a6e3cf6a140(entries, 0);
            return entries;
        }
    }
    
    cli::array<ActivatedServiceTypeEntry*>* RemotingConfiguration::GetRegisteredActivatedServiceTypes() {
        {
            cli::lock_guard{channelTemplates};
            cli::array<ActivatedServiceTypeEntry*> *entries = (new cli::array<ActivatedServiceTypeEntry*>(activatedServiceEntries->get_Count_40aff81471a60b4c()));
            activatedServiceEntries->get_Values_4ed88b5f6e59ef25()->CopyTo_7065a6e3cf6a140(entries, 0);
            return entries;
        }
    }
    
    cli::array<WellKnownClientTypeEntry*>* RemotingConfiguration::GetRegisteredWellKnownClientTypes() {
        {
            cli::lock_guard{channelTemplates};
            cli::array<WellKnownClientTypeEntry*> *entries = (new cli::array<WellKnownClientTypeEntry*>(wellKnownClientEntries->get_Count_40aff81471a60b4c()));
            wellKnownClientEntries->get_Values_4ed88b5f6e59ef25()->CopyTo_7065a6e3cf6a140(entries, 0);
            return entries;
        }
    }
    
    cli::array<WellKnownServiceTypeEntry*>* RemotingConfiguration::GetRegisteredWellKnownServiceTypes() {
        {
            cli::lock_guard{channelTemplates};
            cli::array<WellKnownServiceTypeEntry*> *entries = (new cli::array<WellKnownServiceTypeEntry*>(wellKnownServiceEntries->get_Count_40aff81471a60b4c()));
            wellKnownServiceEntries->get_Values_4ed88b5f6e59ef25()->CopyTo_7065a6e3cf6a140(entries, 0);
            return entries;
        }
    }
    
    bool RemotingConfiguration::IsActivationAllowed(System::Type* svrType) {
        {
            cli::lock_guard{channelTemplates};
            return activatedServiceEntries->ContainsKey_5de2e202a0290d76(svrType);
        }
    }
    
    ActivatedClientTypeEntry* RemotingConfiguration::IsRemotelyActivatedClientType(System::Type* svrType) {
        {
            cli::lock_guard{channelTemplates};
            return cli::as<ActivatedClientTypeEntry*>(activatedClientEntries->get_Item_d75c6e706b965758(svrType));
        }
    }
    
    ActivatedClientTypeEntry* RemotingConfiguration::IsRemotelyActivatedClientType2(System::String* typeName, System::String* assemblyName) {
        return IsRemotelyActivatedClientType(System::Reflection::Assembly::Load(assemblyName)->GetType_99cbfcc4e094eb08(typeName));
    }
    
    WellKnownClientTypeEntry* RemotingConfiguration::IsWellKnownClientType(System::Type* svrType) {
        {
            cli::lock_guard{channelTemplates};
            return cli::as<WellKnownClientTypeEntry*>(wellKnownClientEntries->get_Item_d75c6e706b965758(svrType));
        }
    }
    
    WellKnownClientTypeEntry* RemotingConfiguration::IsWellKnownClientType2(System::String* typeName, System::String* assemblyName) {
        return IsWellKnownClientType(System::Reflection::Assembly::Load(assemblyName)->GetType_99cbfcc4e094eb08(typeName));
    }
    
    void RemotingConfiguration::RegisterActivatedClientType(ActivatedClientTypeEntry* entry) {
        {
            cli::lock_guard{channelTemplates};
            if((wellKnownClientEntries->ContainsKey_5de2e202a0290d76(entry->get_ObjectType()) || activatedClientEntries->ContainsKey_5de2e202a0290d76(entry->get_ObjectType()))) 
            {
                throw cli::gcnew<RemotingException>(cli::concat(_T("Attempt to redirect activation of type \'"), entry->get_ObjectType()->get_FullName_7e8fa72ba225e1a4()));
            }
            activatedClientEntries->set_Item_84c7e24d9caa09(entry->get_ObjectType(), entry);
            Activation::ActivationServices::EnableProxyActivation(entry->get_ObjectType(), true);
        }
    }
    
    void RemotingConfiguration::RegisterActivatedClientType2(System::Type* type, System::String* appUrl) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if((appUrl ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("appUrl"));
        }
        RegisterActivatedClientType(cli::gcnew<ActivatedClientTypeEntry>(type, appUrl));
    }
    
    void RemotingConfiguration::RegisterActivatedServiceType(ActivatedServiceTypeEntry* entry) {
        {
            cli::lock_guard{channelTemplates};
            activatedServiceEntries->Add_3f7ab157bcb41156(entry->get_ObjectType(), entry);
        }
    }
    
    void RemotingConfiguration::RegisterActivatedServiceType2(System::Type* type) {
        RegisterActivatedServiceType(cli::gcnew<ActivatedServiceTypeEntry>(type));
    }
    
    void RemotingConfiguration::RegisterWellKnownClientType(System::Type* type, System::String* objectUrl) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if((objectUrl ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("objectUrl"));
        }
        RegisterWellKnownClientType2(cli::gcnew<WellKnownClientTypeEntry>(type, objectUrl));
    }
    
    void RemotingConfiguration::RegisterWellKnownClientType2(WellKnownClientTypeEntry* entry) {
        {
            cli::lock_guard{channelTemplates};
            if((wellKnownClientEntries->ContainsKey_5de2e202a0290d76(entry->get_ObjectType()) || activatedClientEntries->ContainsKey_5de2e202a0290d76(entry->get_ObjectType()))) 
            {
                throw cli::gcnew<RemotingException>(cli::concat(_T("Attempt to redirect activation of type \'"), entry->get_ObjectType()->get_FullName_7e8fa72ba225e1a4()));
            }
            wellKnownClientEntries->set_Item_84c7e24d9caa09(entry->get_ObjectType(), entry);
            Activation::ActivationServices::EnableProxyActivation(entry->get_ObjectType(), true);
        }
    }
    
    void RemotingConfiguration::RegisterWellKnownServiceType(System::Type* type, System::String* objectUri, WellKnownObjectMode mode) {
        RegisterWellKnownServiceType2(cli::gcnew<WellKnownServiceTypeEntry>(type, objectUri, mode));
    }
    
    void RemotingConfiguration::RegisterWellKnownServiceType2(WellKnownServiceTypeEntry* entry) {
        {
            cli::lock_guard{channelTemplates};
            wellKnownServiceEntries->set_Item_84c7e24d9caa09(entry->get_ObjectUri(), entry);
            RemotingServices::CreateWellKnownServerIdentity(entry->get_ObjectType(), entry->get_ObjectUri(), entry->get_Mode());
        }
    }
    
    void RemotingConfiguration::RegisterChannelTemplate(ChannelData* channel) {
        channelTemplates->set_Item_84c7e24d9caa09(channel->Id, channel);
    }
    
    void RemotingConfiguration::RegisterClientProviderTemplate(ProviderData* prov) {
        clientProviderTemplates->set_Item_84c7e24d9caa09(prov->Id, prov);
    }
    
    void RemotingConfiguration::RegisterServerProviderTemplate(ProviderData* prov) {
        serverProviderTemplates->set_Item_84c7e24d9caa09(prov->Id, prov);
    }
    
    void RemotingConfiguration::RegisterChannels(System::Collections::ArrayList* channels, bool onlyDelayed) {
        for(auto tmp_331 : channels) {
            auto channel = cli::cast<ChannelData*>(tmp_331);
            {
                if((onlyDelayed && System::String::op_Inequality(channel->DelayLoadAsClientChannel, _T("true")))) 
                {
                    continue;
                }
                if((defaultDelayedConfigRead && System::String::op_Equality(channel->DelayLoadAsClientChannel, _T("true")))) 
                {
                    continue;
                }
                if((channel->Ref != nullptr)) 
                {
                    ChannelData *template_ = cli::cast<ChannelData*>(channelTemplates->get_Item_d75c6e706b965758(channel->Ref));
                    if((template_ ==  nullptr)) 
                    {
                        throw cli::gcnew<RemotingException>(cli::concat(_T("Channel template \'"), channel->Ref));
                    }
                    channel->CopyFrom(template_);
                }
                for(auto tmp_332 : channel->get_ServerProviders()) {
                    auto prov = cli::cast<ProviderData*>(tmp_332);
                    {
                        if((prov->Ref != nullptr)) 
                        {
                            ProviderData *template_ = cli::cast<ProviderData*>(serverProviderTemplates->get_Item_d75c6e706b965758(prov->Ref));
                            if((template_ ==  nullptr)) 
                            {
                                throw cli::gcnew<RemotingException>(cli::concat(_T("Provider template \'"), prov->Ref));
                            }
                            prov->CopyFrom(template_);
                        }
                    }
                }
                for(auto tmp_333 : channel->get_ClientProviders()) {
                    auto prov = cli::cast<ProviderData*>(tmp_333);
                    {
                        if((prov->Ref != nullptr)) 
                        {
                            ProviderData *template_ = cli::cast<ProviderData*>(clientProviderTemplates->get_Item_d75c6e706b965758(prov->Ref));
                            if((template_ ==  nullptr)) 
                            {
                                throw cli::gcnew<RemotingException>(cli::concat(_T("Provider template \'"), prov->Ref));
                            }
                            prov->CopyFrom(template_);
                        }
                    }
                }
                Channels::ChannelServices::RegisterChannelConfig(channel);
            }
        }
    }
    
    void RemotingConfiguration::RegisterTypes(System::Collections::ArrayList* types) {
        for(auto tmp_334 : types) {
            auto type = cli::cast<TypeEntry*>(tmp_334);
            {
                if(cli::is<ActivatedClientTypeEntry>(type)) 
                {
                    RegisterActivatedClientType(cli::cast<ActivatedClientTypeEntry*>(type));
                }
                 else 
                {
                    if(cli::is<ActivatedServiceTypeEntry>(type)) 
                    {
                        RegisterActivatedServiceType(cli::cast<ActivatedServiceTypeEntry*>(type));
                    }
                     else 
                    {
                        if(cli::is<WellKnownClientTypeEntry>(type)) 
                        {
                            RegisterWellKnownClientType2(cli::cast<WellKnownClientTypeEntry*>(type));
                        }
                         else 
                        {
                            if(cli::is<WellKnownServiceTypeEntry>(type)) 
                            {
                                RegisterWellKnownServiceType2(cli::cast<WellKnownServiceTypeEntry*>(type));
                            }
                        }
                    }
                }
            }
        }
    }
    
    bool RemotingConfiguration::CustomErrorsEnabled(bool isLocalRequest) {
        if(System::String::op_Equality(_errorMode, _T("off"))) 
        {
            return false;
        }
        if(System::String::op_Equality(_errorMode, _T("on"))) 
        {
            return true;
        }
        return !(isLocalRequest);
    }
    
    void RemotingConfiguration::SetCustomErrorsMode(System::String* mode) {
        if((mode ==  nullptr)) 
        {
            throw cli::gcnew<RemotingException>(_T("mode attribute is required"));
        }
        System::String *m = mode->ToLower();
        if(((System::String::op_Inequality(m, _T("on")) && System::String::op_Inequality(m, _T("off"))) && System::String::op_Inequality(m, _T("remoteonly")))) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Invalid custom error mode: "), mode));
        }
        _errorMode = m;
    }
    
    System::String* RemotingConfiguration::get_ApplicationId() {
        applicationID = get_ApplicationName();
        return applicationID;
    }
    
    System::String* RemotingConfiguration::get_ApplicationName() {
        return applicationName;
    }
    
    System::String* RemotingConfiguration::set_ApplicationName(System::String* value) {
        applicationName = value;
        return get_ApplicationName();
    }
    
    CustomErrorsModes RemotingConfiguration::get_CustomErrorsMode() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    CustomErrorsModes RemotingConfiguration::set_CustomErrorsMode(CustomErrorsModes value) {
        throw cli::gcnew<System::NotImplementedException>();
        return get_CustomErrorsMode();
    }
    
    System::String* RemotingConfiguration::get_ProcessId() {
        if((processGuid ==  nullptr)) 
        {
            processGuid = System::AppDomain::GetProcessGuid();
        }
        return processGuid;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  ConfigHandler::__f__switch_map8;
    
    void ConfigHandler::constructor(bool onlyDelayedChannels) {
        this->onlyDelayedChannels = onlyDelayedChannels;
    }
    
    void ConfigHandler::ValidatePath(System::String* element, cli::array<System::String*>* paths) {
        for(auto tmp_335 : paths) {
            auto path = cli::cast<System::String*>(tmp_335);
            if(CheckPath(path)) 
            {
                return;
            }
        }
        throw cli::gcnew<RemotingException>(cli::concat(_T("Element "), element));
    }
    
    bool ConfigHandler::CheckPath(System::String* path) {
        System::Globalization::CompareInfo *ci = System::Globalization::CultureInfo::get_InvariantCulture()->get_CompareInfo_ef6e4d0bc469f6a();
        if(ci->IsPrefix_5175c6f6b5c36f0a(path, _T("/"), System::Globalization::CompareOptions::Ordinal)) 
        {
            return System::String::op_Equality(path, this->currentXmlPath);
        }
         else 
        {
            return ci->IsSuffix_aee4ee93cc1fc6d(this->currentXmlPath, path, System::Globalization::CompareOptions::Ordinal);
        }
    }
    
    void ConfigHandler::OnStartParsing(Mono::Xml::SmallXmlParser* parser) {
    }
    
    void ConfigHandler::OnProcessingInstruction(System::String* name, System::String* text) {
    }
    
    void ConfigHandler::OnIgnorableWhitespace(System::String* s) {
    }
    
    void ConfigHandler::OnStartElement(System::String* name, Mono::Xml::IAttrList* attrs) {
        try {
            if(this->currentXmlPath->StartsWith(_T("/configuration/system.runtime.remoting"))) 
            {
                ParseElement(name, attrs);
            }
            (this->currentXmlPath = cli::concat(this->currentXmlPath, _T("/")));
        }
        catch(System::Exception* ex) {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Error in element "), name), ex);
        }
    }
    
    void ConfigHandler::ParseElement(System::String* name, Mono::Xml::IAttrList* attrs) {
        if((this->currentProviderData != nullptr)) 
        {
            ReadCustomProviderData(name, attrs);
            return;
        }
        System::String* tmp_336 = name;
        ::System::Int32 tmp_337 = -1;
        if(::System::String::Equals3(tmp_336, _T("application"))) tmp_337 = 0;
        if(::System::String::Equals3(tmp_336, _T("lifetime"))) tmp_337 = 1;
        if(::System::String::Equals3(tmp_336, _T("channels"))) tmp_337 = 2;
        if(::System::String::Equals3(tmp_336, _T("channel"))) tmp_337 = 3;
        if(::System::String::Equals3(tmp_336, _T("serverProviders"))) tmp_337 = 4;
        if(::System::String::Equals3(tmp_336, _T("clientProviders"))) tmp_337 = 5;
        if(::System::String::Equals3(tmp_336, _T("provider")) ||
        ::System::String::Equals3(tmp_336, _T("formatter"))) tmp_337 = 6;
        if(::System::String::Equals3(tmp_336, _T("client"))) tmp_337 = 7;
        if(::System::String::Equals3(tmp_336, _T("service"))) tmp_337 = 8;
        if(::System::String::Equals3(tmp_336, _T("wellknown"))) tmp_337 = 9;
        if(::System::String::Equals3(tmp_336, _T("activated"))) tmp_337 = 10;
        if(::System::String::Equals3(tmp_336, _T("soapInterop"))) tmp_337 = 11;
        if(::System::String::Equals3(tmp_336, _T("interopXmlType"))) tmp_337 = 12;
        if(::System::String::Equals3(tmp_336, _T("interopXmlElement"))) tmp_337 = 13;
        if(::System::String::Equals3(tmp_336, _T("preLoad"))) tmp_337 = 14;
        if(::System::String::Equals3(tmp_336, _T("debug"))) tmp_337 = 15;
        if(::System::String::Equals3(tmp_336, _T("channelSinkProviders"))) tmp_337 = 16;
        if(::System::String::Equals3(tmp_336, _T("customErrors"))) tmp_337 = 17;
        switch(tmp_337)
        {
            case 0: case_1309: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("system.runtime.remoting")})));
                if((attrs->get_Names_9f5e761023ba0c63()->get_Length() > 0)) 
                {
                    this->appName = attrs->get_Values_56e80d7ef1a6a837()->at(0);
                }
                break;
            }
            case 1: case_1310: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("application")})));
                ReadLifetine(attrs);
                break;
            }
            case 2: case_1311: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("system.runtime.remoting"), _T("application")})));
                break;
            }
            case 3: case_1312: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("channels")})));
                if((this->currentXmlPath->IndexOf7(_T("application")) != -1)) 
                {
                    ReadChannel(attrs, false);
                }
                 else 
                {
                    ReadChannel(attrs, true);
                }
                break;
            }
            case 4: case_1313: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("channelSinkProviders"), _T("channel")})));
                break;
            }
            case 5: case_1314: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("channelSinkProviders"), _T("channel")})));
                break;
            }
            case 6: case_1315: 
            {
                ProviderData *prov;
                if((CheckPath(_T("application/channels/channel/serverProviders")) || CheckPath(_T("channels/channel/serverProviders")))) 
                {
                    prov = ReadProvider(name, attrs, false);
                    this->currentChannel->get_ServerProviders()->Add_e6a92085999ce388(prov);
                }
                 else 
                {
                    if((CheckPath(_T("application/channels/channel/clientProviders")) || CheckPath(_T("channels/channel/clientProviders")))) 
                    {
                        prov = ReadProvider(name, attrs, false);
                        this->currentChannel->get_ClientProviders()->Add_e6a92085999ce388(prov);
                    }
                     else 
                    {
                        if(CheckPath(_T("channelSinkProviders/serverProviders"))) 
                        {
                            prov = ReadProvider(name, attrs, true);
                            RemotingConfiguration::RegisterServerProviderTemplate(prov);
                        }
                         else 
                        {
                            if(CheckPath(_T("channelSinkProviders/clientProviders"))) 
                            {
                                prov = ReadProvider(name, attrs, true);
                                RemotingConfiguration::RegisterClientProviderTemplate(prov);
                            }
                             else 
                            {
                                ValidatePath(name, (new cli::array<System::String*>({})));
                            }
                        }
                    }
                }
                break;
            }
            case 7: case_1316: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("application")})));
                this->currentClientUrl = attrs->GetValue_da157d9f297d63a4(_T("url"));
                break;
            }
            case 8: case_1317: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("application")})));
                break;
            }
            case 9: case_1318: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("client"), _T("service")})));
                if(CheckPath(_T("client"))) 
                {
                    ReadClientWellKnown(attrs);
                }
                 else 
                {
                    ReadServiceWellKnown(attrs);
                }
                break;
            }
            case 10: case_1319: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("client"), _T("service")})));
                if(CheckPath(_T("client"))) 
                {
                    ReadClientActivated(attrs);
                }
                 else 
                {
                    ReadServiceActivated(attrs);
                }
                break;
            }
            case 11: case_1320: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("application")})));
                break;
            }
            case 12: case_1321: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("soapInterop")})));
                ReadInteropXml(attrs, false);
                break;
            }
            case 13: case_1322: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("soapInterop")})));
                ReadInteropXml(attrs, false);
                break;
            }
            case 14: case_1323: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("soapInterop")})));
                ReadPreload(attrs);
                break;
            }
            case 15: case_1324: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("system.runtime.remoting")})));
                break;
            }
            case 16: case_1325: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("system.runtime.remoting")})));
                break;
            }
            case 17: case_1326: 
            {
                ValidatePath(name, (new cli::array<System::String*>({_T("system.runtime.remoting")})));
                RemotingConfiguration::SetCustomErrorsMode(attrs->GetValue_da157d9f297d63a4(_T("mode")));
                break;
            }
            default: case_1327: 
            {
                throw cli::gcnew<RemotingException>(cli::concat(_T("Element \'"), name));
            }
        }
    }
    
    void ConfigHandler::OnEndElement(System::String* name) {
        if((this->currentProviderData != nullptr)) 
        {
            this->currentProviderData->Pop_9492442210514403();
            if((this->currentProviderData->get_Count_a768d394e63a6b27() ==  0)) 
            {
                this->currentProviderData = nullptr;
            }
        }
        this->currentXmlPath = this->currentXmlPath->Substring2(0, ((this->currentXmlPath->get_Length() - name->get_Length()) - 1));
    }
    
    void ConfigHandler::ReadCustomProviderData(System::String* name, Mono::Xml::IAttrList* attrs) {
        Channels::SinkProviderData *parent = cli::cast<Channels::SinkProviderData*>(this->currentProviderData->Peek_6b91e1254bdabd34());
        Channels::SinkProviderData *data = cli::gcnew<Channels::SinkProviderData>(name);
        for(int32_t i = 0; (i < attrs->get_Names_9f5e761023ba0c63()->get_Length()); ++i) {
            data->get_Properties()->set_Item_a0c4aaef01cc13c2(attrs->get_Names_9f5e761023ba0c63()->at(i), attrs->GetValue_e96b4d39015c72a4(i));
        }
        parent->get_Children()->Add_985508e3bf9b7a73(data);
        this->currentProviderData->Push_9a8495c8210a673(data);
    }
    
    void ConfigHandler::ReadLifetine(Mono::Xml::IAttrList* attrs) {
        for(int32_t i = 0; (i < attrs->get_Names_9f5e761023ba0c63()->get_Length()); ++i){
            System::String* tmp_338 = attrs->get_Names_9f5e761023ba0c63()->at(i);
            ::System::Int32 tmp_339 = -1;
            if(::System::String::Equals3(tmp_338, _T("leaseTime"))) tmp_339 = 0;
            if(::System::String::Equals3(tmp_338, _T("sponsorshipTimeout"))) tmp_339 = 1;
            if(::System::String::Equals3(tmp_338, _T("renewOnCallTime"))) tmp_339 = 2;
            if(::System::String::Equals3(tmp_338, _T("leaseManagerPollTime"))) tmp_339 = 3;
            switch(tmp_339)
            {
                case 0: case_1328: 
                {
                    Lifetime::LifetimeServices::set_LeaseTime(ParseTime(attrs->GetValue_e96b4d39015c72a4(i)));
                    break;
                }
                case 1: case_1329: 
                {
                    Lifetime::LifetimeServices::set_SponsorshipTimeout(ParseTime(attrs->GetValue_e96b4d39015c72a4(i)));
                    break;
                }
                case 2: case_1330: 
                {
                    Lifetime::LifetimeServices::set_RenewOnCallTime(ParseTime(attrs->GetValue_e96b4d39015c72a4(i)));
                    break;
                }
                case 3: case_1331: 
                {
                    Lifetime::LifetimeServices::set_LeaseManagerPollTime(ParseTime(attrs->GetValue_e96b4d39015c72a4(i)));
                    break;
                }
                default: case_1332: 
                {
                    throw cli::gcnew<RemotingException>(cli::concat(_T("Invalid attribute: "), attrs->get_Names_9f5e761023ba0c63()->at(i)));
                }
            }
        }
    }
    
    System::TimeSpan ConfigHandler::ParseTime(System::String* s) {
        if((System::String::op_Equality(s, _T("")) || (s ==  nullptr))) 
        {
            throw cli::gcnew<RemotingException>(_T("Invalid time value"));
        }
        int32_t i = s->IndexOfAny((new cli::array<char16_t>({u'D', u'H', u'M', u'S'})));
        System::String *unit;
        if((i ==  -1)) 
        {
            unit = _T("S");
        }
         else 
        {
            unit = s->Substring(i);
            s = s->Substring2(0, i);
        }
        double val;
        try {
            val = System::Double::Parse(s);
        }
        catch(...) {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Invalid time value: "), s));
        }
        if(System::String::op_Equality(unit, _T("D"))) 
        {
            return System::TimeSpan::FromDays(val);
        }
        if(System::String::op_Equality(unit, _T("H"))) 
        {
            return System::TimeSpan::FromHours(val);
        }
        if(System::String::op_Equality(unit, _T("M"))) 
        {
            return System::TimeSpan::FromMinutes(val);
        }
        if(System::String::op_Equality(unit, _T("S"))) 
        {
            return System::TimeSpan::FromSeconds(val);
        }
        if(System::String::op_Equality(unit, _T("MS"))) 
        {
            return System::TimeSpan::FromMilliseconds(val);
        }
        throw cli::gcnew<RemotingException>(cli::concat(_T("Invalid time unit: "), unit));
    }
    
    void ConfigHandler::ReadChannel(Mono::Xml::IAttrList* attrs, bool isTemplate) {
        ChannelData *channel = cli::gcnew<ChannelData>();
        for(int32_t i = 0; (i < attrs->get_Names_9f5e761023ba0c63()->get_Length()); ++i){
            System::String *at = attrs->get_Names_9f5e761023ba0c63()->at(i);
            System::String *val = attrs->get_Values_56e80d7ef1a6a837()->at(i);
            if((System::String::op_Equality(at, _T("ref")) && !(isTemplate))) 
            {
                channel->Ref = val;
            }
             else 
            {
                if(System::String::op_Equality(at, _T("delayLoadAsClientChannel"))) 
                {
                    channel->DelayLoadAsClientChannel = val;
                }
                 else 
                {
                    if((System::String::op_Equality(at, _T("id")) && isTemplate)) 
                    {
                        channel->Id = val;
                    }
                     else 
                    {
                        if(System::String::op_Equality(at, _T("type"))) 
                        {
                            channel->Type2 = val;
                        }
                         else 
                        {
                            channel->get_CustomProperties()->Add_3f7ab157bcb41156(at, val);
                        }
                    }
                }
            }
        }
        if(isTemplate) 
        {
            if((channel->Id ==  nullptr)) 
            {
                throw cli::gcnew<RemotingException>(_T("id attribute is required"));
            }
            if((channel->Type2 ==  nullptr)) 
            {
                throw cli::gcnew<RemotingException>(_T("id attribute is required"));
            }
            RemotingConfiguration::RegisterChannelTemplate(channel);
        }
         else 
        {
            this->channelInstances->Add_e6a92085999ce388(channel);
        }
        this->currentChannel = channel;
    }
    
    ProviderData* ConfigHandler::ReadProvider(System::String* name, Mono::Xml::IAttrList* attrs, bool isTemplate) {
        ProviderData *prov = System::String::op_Equality(name, _T("provider")) ? cli::gcnew<ProviderData>() : cli::gcnew<FormatterData>();
        Channels::SinkProviderData *data = cli::gcnew<Channels::SinkProviderData>(_T("root"));
        prov->CustomData = data->get_Children();
        this->currentProviderData = cli::gcnew<System::Collections::Stack>();
        this->currentProviderData->Push_9a8495c8210a673(data);
        for(int32_t i = 0; (i < attrs->get_Names_9f5e761023ba0c63()->get_Length()); ++i){
            System::String *at = attrs->get_Names_9f5e761023ba0c63()->at(i);
            System::String *val = attrs->get_Values_56e80d7ef1a6a837()->at(i);
            if((System::String::op_Equality(at, _T("id")) && isTemplate)) 
            {
                prov->Id = val;
            }
             else 
            {
                if(System::String::op_Equality(at, _T("type"))) 
                {
                    prov->Type2 = val;
                }
                 else 
                {
                    if((System::String::op_Equality(at, _T("ref")) && !(isTemplate))) 
                    {
                        prov->Ref = val;
                    }
                     else 
                    {
                        prov->CustomProperties->Add_3f7ab157bcb41156(at, val);
                    }
                }
            }
        }
        if(((prov->Id ==  nullptr) && isTemplate)) 
        {
            throw cli::gcnew<RemotingException>(_T("id attribute is required"));
        }
        return prov;
    }
    
    void ConfigHandler::ReadClientActivated(Mono::Xml::IAttrList* attrs) {
        System::String *type = GetNotNull(attrs, _T("type"));
        System::String *assm = ExtractAssembly(type);
        if(((this->currentClientUrl ==  nullptr) || System::String::op_Equality(this->currentClientUrl, _T("")))) 
        {
            throw cli::gcnew<RemotingException>(_T("url attribute is required in client element when it contains activated entries"));
        }
        this->typeEntries->Add_e6a92085999ce388(cli::gcnew<ActivatedClientTypeEntry>(type, assm, this->currentClientUrl));
    }
    
    void ConfigHandler::ReadServiceActivated(Mono::Xml::IAttrList* attrs) {
        System::String *type = GetNotNull(attrs, _T("type"));
        System::String *assm = ExtractAssembly(type);
        this->typeEntries->Add_e6a92085999ce388(cli::gcnew<ActivatedServiceTypeEntry>(type, assm));
    }
    
    void ConfigHandler::ReadClientWellKnown(Mono::Xml::IAttrList* attrs) {
        System::String *url = GetNotNull(attrs, _T("url"));
        System::String *type = GetNotNull(attrs, _T("type"));
        System::String *assm = ExtractAssembly(type);
        this->typeEntries->Add_e6a92085999ce388(cli::gcnew<WellKnownClientTypeEntry>(type, assm, url));
    }
    
    void ConfigHandler::ReadServiceWellKnown(Mono::Xml::IAttrList* attrs) {
        System::String *objectUri = GetNotNull(attrs, _T("objectUri"));
        System::String *smode = GetNotNull(attrs, _T("mode"));
        System::String *type = GetNotNull(attrs, _T("type"));
        System::String *assm = ExtractAssembly(type);
        WellKnownObjectMode mode;
        if(System::String::op_Equality(smode, _T("SingleCall"))) 
        {
            mode = WellKnownObjectMode::SingleCall;
        }
         else 
        {
            if(System::String::op_Equality(smode, _T("Singleton"))) 
            {
                mode = WellKnownObjectMode::Singleton;
            }
             else 
            {
                throw cli::gcnew<RemotingException>(cli::concat(_T("wellknown object mode \'"), smode));
            }
        }
        this->typeEntries->Add_e6a92085999ce388(cli::gcnew<WellKnownServiceTypeEntry>(type, assm, objectUri, mode));
    }
    
    void ConfigHandler::ReadInteropXml(Mono::Xml::IAttrList* attrs, bool isElement) {
        System::Type *t = System::Type::GetType4(GetNotNull(attrs, _T("clr")));
        cli::array<System::String*> *xmlName = GetNotNull(attrs, _T("xml"))->Split((new cli::array<char16_t>({u','})));
        System::String *localName = xmlName->at(0)->Trim();
        System::String *ns = (xmlName->get_Length() > 0) ? xmlName->at(1)->Trim() : nullptr;
        if(isElement) 
        {
            SoapServices::RegisterInteropXmlElement(localName, ns, t);
        }
         else 
        {
            SoapServices::RegisterInteropXmlType(localName, ns, t);
        }
    }
    
    void ConfigHandler::ReadPreload(Mono::Xml::IAttrList* attrs) {
        System::String *type = attrs->GetValue_da157d9f297d63a4(_T("type"));
        System::String *assm = attrs->GetValue_da157d9f297d63a4(_T("assembly"));
        if(((type != nullptr) && (assm != nullptr))) 
        {
            throw cli::gcnew<RemotingException>(_T("Type and assembly attributes cannot be specified together"));
        }
        if((type != nullptr)) 
        {
            SoapServices::PreLoad2(System::Type::GetType4(type));
        }
         else 
        {
            if((assm != nullptr)) 
            {
                SoapServices::PreLoad(System::Reflection::Assembly::Load(assm));
            }
             else 
            {
                throw cli::gcnew<RemotingException>(_T("Either type or assembly attributes must be specified"));
            }
        }
    }
    
    System::String* ConfigHandler::GetNotNull(Mono::Xml::IAttrList* attrs, System::String* name) {
        System::String *value = attrs->GetValue_da157d9f297d63a4(name);
        if(((value ==  nullptr) || System::String::op_Equality(value, _T("")))) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(name, _T(" attribute is required")));
        }
        return value;
    }
    
    System::String* ConfigHandler::ExtractAssembly(System::String* type) {
        int32_t i = type->IndexOf4(u',');
        if((i ==  -1)) 
        {
            return _T("");
        }
        System::String *asm_ = type->Substring((i + 1))->Trim();
        type = type->Substring2(0, i)->Trim();
        return asm_;
    }
    
    void ConfigHandler::OnChars(System::String* ch) {
    }
    
    void ConfigHandler::OnEndParsing(Mono::Xml::SmallXmlParser* parser) {
        RemotingConfiguration::RegisterChannels(this->channelInstances, this->onlyDelayedChannels);
        if((this->appName != nullptr)) 
        {
            RemotingConfiguration::set_ApplicationName(this->appName);
        }
        if(!(this->onlyDelayedChannels)) 
        {
            RemotingConfiguration::RegisterTypes(this->typeEntries);
        }
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ChannelData::constructor() {
    }
    
    void ChannelData::CopyFrom(ChannelData* other) {
        if((this->Ref ==  nullptr)) 
        {
            this->Ref = other->Ref;
        }
        if((this->Id ==  nullptr)) 
        {
            this->Id = other->Id;
        }
        if((this->Type2 ==  nullptr)) 
        {
            this->Type2 = other->Type2;
        }
        if((this->DelayLoadAsClientChannel ==  nullptr)) 
        {
            this->DelayLoadAsClientChannel = other->DelayLoadAsClientChannel;
        }
        if((other->_customProperties != nullptr)) 
        {
            for(auto tmp_340 : other->_customProperties) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_340);
                if(!(this->get_CustomProperties()->ContainsKey_5de2e202a0290d76(entry->get_Key()))) 
                {
                    this->get_CustomProperties()->set_Item_84c7e24d9caa09(entry->get_Key(), entry->get_Value());
                }
            }
        }
        if(((this->_serverProviders ==  nullptr) && (other->_serverProviders != nullptr))) 
        {
            for(auto tmp_341 : other->_serverProviders) {
                auto prov = cli::cast<ProviderData*>(tmp_341);
                {
                    ProviderData *np = cli::gcnew<ProviderData>();
                    np->CopyFrom(prov);
                    this->get_ServerProviders()->Add_e6a92085999ce388(np);
                }
            }
        }
        if(((this->_clientProviders ==  nullptr) && (other->_clientProviders != nullptr))) 
        {
            for(auto tmp_342 : other->_clientProviders) {
                auto prov = cli::cast<ProviderData*>(tmp_342);
                {
                    ProviderData *np = cli::gcnew<ProviderData>();
                    np->CopyFrom(prov);
                    this->get_ClientProviders()->Add_e6a92085999ce388(np);
                }
            }
        }
    }
    
    System::Collections::ArrayList* ChannelData::get_ServerProviders() {
        if((this->_serverProviders ==  nullptr)) 
        {
            this->_serverProviders = cli::gcnew<System::Collections::ArrayList>();
        }
        return this->_serverProviders;
    }
    
    System::Collections::ArrayList* ChannelData::get_ClientProviders() {
        if((this->_clientProviders ==  nullptr)) 
        {
            this->_clientProviders = cli::gcnew<System::Collections::ArrayList>();
        }
        return this->_clientProviders;
    }
    
    System::Collections::Hashtable* ChannelData::get_CustomProperties() {
        if((this->_customProperties ==  nullptr)) 
        {
            this->_customProperties = cli::gcnew<System::Collections::Hashtable>();
        }
        return this->_customProperties;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ProviderData::constructor() {
    }
    
    void ProviderData::CopyFrom(ProviderData* other) {
        if((this->Ref ==  nullptr)) 
        {
            this->Ref = other->Ref;
        }
        if((this->Id ==  nullptr)) 
        {
            this->Id = other->Id;
        }
        if((this->Type2 ==  nullptr)) 
        {
            this->Type2 = other->Type2;
        }
        for(auto tmp_343 : other->CustomProperties) {
            auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_343);
            if(!(this->CustomProperties->ContainsKey_5de2e202a0290d76(entry->get_Key()))) 
            {
                this->CustomProperties->set_Item_84c7e24d9caa09(entry->get_Key(), entry->get_Value());
            }
        }
        if((other->CustomData != nullptr)) 
        {
            if((this->CustomData ==  nullptr)) 
            {
                this->CustomData = cli::gcnew<System::Collections::ArrayList>();
            }
            for(auto tmp_344 : other->CustomData) {
                auto data = cli::cast<Channels::SinkProviderData*>(tmp_344);
                this->CustomData->Add_985508e3bf9b7a73(data);
            }
        }
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void FormatterData::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void RemotingException::constructor() {
    }
    
    void RemotingException::constructor(System::String* message) {
    }
    
    void RemotingException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void RemotingException::constructor(System::String* message, System::Exception* InnerException) {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void CACD::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    System::Collections::Hashtable*  RemotingServices::uri_hash;
    System::Runtime::Serialization::Formatters::Binary::BinaryFormatter*  RemotingServices::_serializationFormatter;
    System::Runtime::Serialization::Formatters::Binary::BinaryFormatter*  RemotingServices::_deserializationFormatter;
    System::String*  RemotingServices::app_id;
    System::Object*  RemotingServices::app_id_lock;
    int32_t  RemotingServices::next_id;
    System::Reflection::MethodInfo*  RemotingServices::FieldSetterMethod;
    System::Reflection::MethodInfo*  RemotingServices::FieldGetterMethod;
    
    RemotingServices::RemotingServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void RemotingServices::static_constructor() {
        Messaging::RemotingSurrogateSelector *surrogateSelector = cli::gcnew<Messaging::RemotingSurrogateSelector>();
        System::Runtime::Serialization::StreamingContext context = cli::ctor<System::Runtime::Serialization::StreamingContext>(System::Runtime::Serialization::StreamingContextStates::Remoting, nullptr);
        _serializationFormatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>(surrogateSelector, context);
        _deserializationFormatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>(nullptr, context);
        _serializationFormatter->set_AssemblyFormat(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle::Full);
        _deserializationFormatter->set_AssemblyFormat(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle::Full);
        RegisterInternalChannels();
        CreateWellKnownServerIdentity(cli::typeof<System::Type>::info, _T("RemoteActivationService.rem"), WellKnownObjectMode::Singleton);
        FieldSetterMethod = cli::typeof<System::Type>::info->GetMethod2(_T("FieldSetter"), (System::Reflection::BindingFlags)36L);
        FieldGetterMethod = cli::typeof<System::Type>::info->GetMethod2(_T("FieldGetter"), (System::Reflection::BindingFlags)36L);
    }
    
    System::Object* RemotingServices::InternalExecute(System::Reflection::MethodBase* method, System::Object* obj, cli::array<System::Object*>* parameters, cli::array<System::Object*>* out_args) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::MethodBase* RemotingServices::GetVirtualMethod(System::Type* type, System::Reflection::MethodBase* method) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RemotingServices::IsTransparentProxy(System::Object* proxy) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    Messaging::IMethodReturnMessage* RemotingServices::InternalExecuteMessage(System::MarshalByRefObject* target, Messaging::IMethodCallMessage* reqMsg) {
        Messaging::ReturnMessage *result;
        System::Type *tt = target->GetType();
        System::Reflection::MethodBase *method;
        if(((System::Type::op_Equality2(reqMsg->get_MethodBase_be82dccd2d92b9f6()->get_DeclaringType_6121cd6a84393166(), tt) || System::Reflection::MethodBase::op_Equality2(reqMsg->get_MethodBase_be82dccd2d92b9f6(), FieldSetterMethod)) || System::Reflection::MethodBase::op_Equality2(reqMsg->get_MethodBase_be82dccd2d92b9f6(), FieldGetterMethod))) 
        {
            method = reqMsg->get_MethodBase_be82dccd2d92b9f6();
        }
         else 
        {
            method = GetVirtualMethod(tt, reqMsg->get_MethodBase_be82dccd2d92b9f6());
            if(System::Reflection::MethodBase::op_Equality2(method, nullptr)) 
            {
                throw cli::gcnew<RemotingException>(System::String::Format3(_T("Cannot resolve method {0}:{1}"), tt, reqMsg->get_MethodName_f32f67fc5b4be3b1()));
            }
        }
        if(reqMsg->get_MethodBase_be82dccd2d92b9f6()->get_IsGenericMethod_7e509e51546ea990()) 
        {
            cli::array<System::Type*> *genericArguments = reqMsg->get_MethodBase_be82dccd2d92b9f6()->GetGenericArguments_77cf5f406b341958();
            System::Reflection::MethodInfo *gmd = cli::cast<System::Reflection::MethodInfo*>(method)->GetGenericMethodDefinition_298ff0fcf1d6e37f();
            method = gmd->MakeGenericMethod_6fb56e5d44bf2eff(genericArguments);
        }
        System::Object *oldContext = Messaging::CallContext::SetCurrentCallContext(reqMsg->get_LogicalCallContext_a19aeadfaffa89b7());
        try {
            cli::array<System::Object*> *out_args;
            System::Object *rval = InternalExecute(method, target, reqMsg->get_Args_1b1b87289e375adf(), out_args);
            cli::array<System::Reflection::ParameterInfo*> *parameters = method->GetParameters_9d17bcb549474c9();
            cli::array<System::Object*> *returnArgs = (new cli::array<System::Object*>(parameters->get_Length()));
            int32_t n = 0;
            int32_t noa = 0;
            for(auto tmp_345 : parameters) {
                auto par = cli::cast<System::Reflection::ParameterInfo*>(tmp_345);
                {
                    if((par->get_IsOut() && !(par->get_ParameterType_97c5fa09a0b988d()->get_IsByRef()))) 
                    {
                        returnArgs->at(n++) = reqMsg->GetArg_b08c2cf8a17399d(par->get_Position_1e6976b43412375f());
                    }
                     else 
                    {
                        if(par->get_ParameterType_97c5fa09a0b988d()->get_IsByRef()) 
                        {
                            returnArgs->at(n++) = out_args->at(noa++);
                        }
                         else 
                        {
                            returnArgs->at(n++) = nullptr;
                        }
                    }
                }
            }
            result = cli::gcnew<Messaging::ReturnMessage>(rval, returnArgs, n, Messaging::CallContext::CreateLogicalCallContext(true), reqMsg);
        }
        catch(System::Exception* e) {
            result = cli::gcnew<Messaging::ReturnMessage>(e, reqMsg);
        }
        Messaging::CallContext::RestoreCallContext(oldContext);
        return result;
    }
    
    Messaging::IMethodReturnMessage* RemotingServices::ExecuteMessage(System::MarshalByRefObject* target, Messaging::IMethodCallMessage* reqMsg) {
        if(IsTransparentProxy(target)) 
        {
            Proxies::RealProxy *rp = GetRealProxy(target);
            return cli::cast<Messaging::IMethodReturnMessage*>(rp->Invoke_fb5532e107d73b9f(reqMsg));
        }
         else 
        {
            return InternalExecuteMessage(target, reqMsg);
        }
    }
    
    System::Object* RemotingServices::Connect(System::Type* classToProxy, System::String* url) {
        ObjRef *objRef = cli::gcnew<ObjRef>(classToProxy, url, nullptr);
        return GetRemoteObject(objRef, classToProxy);
    }
    
    System::Object* RemotingServices::Connect2(System::Type* classToProxy, System::String* url, System::Object* data) {
        ObjRef *objRef = cli::gcnew<ObjRef>(classToProxy, url, data);
        return GetRemoteObject(objRef, classToProxy);
    }
    
    bool RemotingServices::Disconnect(System::MarshalByRefObject* obj) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        ServerIdentity *identity;
        if(IsTransparentProxy(obj)) 
        {
            Proxies::RealProxy *proxy = GetRealProxy(obj);
            if((proxy->GetProxiedType()->get_IsContextful() && cli::is<ServerIdentity>(proxy->get_ObjectIdentity()))) 
            {
                identity = cli::as<ServerIdentity*>(proxy->get_ObjectIdentity());
            }
             else 
            {
                throw cli::gcnew<System::ArgumentException>(_T("The obj parameter is a proxy."));
            }
        }
         else 
        {
            identity = obj->get_ObjectIdentity();
            obj->set_ObjectIdentity(nullptr);
        }
        if(((identity ==  nullptr) || !(identity->get_IsConnected()))) 
        {
            return false;
        }
         else 
        {
            Lifetime::LifetimeServices::StopTrackingLifetime(identity);
            DisposeIdentity(identity);
            Services::TrackingServices::NotifyDisconnectedObject(obj);
            return true;
        }
    }
    
    System::Type* RemotingServices::GetServerTypeForUri(System::String* URI) {
        ServerIdentity *ident = cli::as<ServerIdentity*>(GetIdentityForUri(URI));
        if((ident ==  nullptr)) 
        {
            return nullptr;
        }
        return ident->get_ObjectType();
    }
    
    System::String* RemotingServices::GetObjectUri(System::MarshalByRefObject* obj) {
        Identity *ident = GetObjectIdentity(obj);
        if(cli::is<ClientIdentity>(ident)) 
        {
            return cli::cast<ClientIdentity*>(ident)->get_TargetUri();
        }
         else 
        {
            if((ident != nullptr)) 
            {
                return ident->get_ObjectUri();
            }
             else 
            {
                return nullptr;
            }
        }
    }
    
    System::Object* RemotingServices::Unmarshal(ObjRef* objectRef) {
        return Unmarshal2(objectRef, true);
    }
    
    System::Object* RemotingServices::Unmarshal2(ObjRef* objectRef, bool fRefine) {
        System::Type *classToProxy = fRefine ? objectRef->get_ServerType() : cli::typeof<System::Type>::info;
        if(System::Type::op_Equality2(classToProxy, nullptr)) 
        {
            classToProxy = cli::typeof<System::Type>::info;
        }
        if(objectRef->get_IsReferenceToWellKnow()) 
        {
            System::Object *obj = GetRemoteObject(objectRef, classToProxy);
            Services::TrackingServices::NotifyUnmarshaledObject(obj, objectRef);
            return obj;
        }
         else 
        {
            System::Object *obj;
            if(classToProxy->get_IsContextful()) 
            {
                Proxies::ProxyAttribute *att = cli::cast<Proxies::ProxyAttribute*>(System::Attribute::GetCustomAttribute8(classToProxy, cli::typeof<System::Type>::info, true));
                if((att != nullptr)) 
                {
                    obj = att->CreateProxy_c28b5b5fd853f316(objectRef, classToProxy, nullptr, nullptr)->GetTransparentProxy_efb39f7079c89638();
                    Services::TrackingServices::NotifyUnmarshaledObject(obj, objectRef);
                    return obj;
                }
            }
            obj = GetProxyForRemoteObject(objectRef, classToProxy);
            Services::TrackingServices::NotifyUnmarshaledObject(obj, objectRef);
            return obj;
        }
    }
    
    ObjRef* RemotingServices::Marshal2(System::MarshalByRefObject* Obj) {
        return Marshal4(Obj, nullptr, nullptr);
    }
    
    ObjRef* RemotingServices::Marshal3(System::MarshalByRefObject* Obj, System::String* URI) {
        return Marshal4(Obj, URI, nullptr);
    }
    
    ObjRef* RemotingServices::Marshal4(System::MarshalByRefObject* Obj, System::String* ObjURI, System::Type* RequestedType) {
        if(IsTransparentProxy(Obj)) 
        {
            Proxies::RealProxy *proxy = RemotingServices::GetRealProxy(Obj);
            Identity *identity = proxy->get_ObjectIdentity();
            if((identity != nullptr)) 
            {
                if((proxy->GetProxiedType()->get_IsContextful() && !(identity->get_IsConnected()))) 
                {
                    ClientActivatedIdentity *cboundIdentity = cli::cast<ClientActivatedIdentity*>(identity);
                    if((ObjURI ==  nullptr)) 
                    {
                        ObjURI = NewUri();
                    }
                    cboundIdentity->set_ObjectUri(ObjURI);
                    RegisterServerIdentity(cboundIdentity);
                    cboundIdentity->StartTrackingLifetime(cli::cast<Lifetime::ILease*>(Obj->InitializeLifetimeService_8f02e9c96ffbe30f()));
                    return cboundIdentity->CreateObjRef_366556653a47f288(RequestedType);
                }
                 else 
                {
                    if((ObjURI != nullptr)) 
                    {
                        throw cli::gcnew<RemotingException>(_T("It is not possible marshal a proxy of a remote object."));
                    }
                }
                ObjRef *or_ = proxy->get_ObjectIdentity()->CreateObjRef_366556653a47f288(RequestedType);
                Services::TrackingServices::NotifyMarshaledObject(Obj, or_);
                return or_;
            }
        }
        if(System::Type::op_Equality2(RequestedType, nullptr)) 
        {
            RequestedType = Obj->GetType();
        }
        if((ObjURI ==  nullptr)) 
        {
            if((Obj->get_ObjectIdentity() ==  nullptr)) 
            {
                ObjURI = NewUri();
                CreateClientActivatedServerIdentity(Obj, RequestedType, ObjURI);
            }
        }
         else 
        {
            ClientActivatedIdentity *identity = cli::as<ClientActivatedIdentity*>(GetIdentityForUri(cli::concat(_T("/"), ObjURI)));
            if(((identity ==  nullptr) || (Obj != identity->GetServerObject()))) 
            {
                CreateClientActivatedServerIdentity(Obj, RequestedType, ObjURI);
            }
        }
        ObjRef *oref;
        if(IsTransparentProxy(Obj)) 
        {
            oref = RemotingServices::GetRealProxy(Obj)->get_ObjectIdentity()->CreateObjRef_366556653a47f288(RequestedType);
        }
         else 
        {
            oref = Obj->CreateObjRef_53237520275c27b1(RequestedType);
        }
        Services::TrackingServices::NotifyMarshaledObject(Obj, oref);
        return oref;
    }
    
    System::String* RemotingServices::NewUri() {
        if((app_id ==  nullptr)) 
        {
            {
                cli::lock_guard{app_id_lock};
                if((app_id ==  nullptr)) 
                {
                    app_id = cli::concat(System::Guid::NewGuid()->ToString_1636a0751cb9ac11()->Replace(u'-', u'_'), _T("/"));
                }
            }
        }
        int32_t n = System::Threading::Interlocked::Increment(next_id);
        return cli::concat(app_id, cli::import(System::Environment::get_TickCount())->ToString4(_T("x")), _T("_"), cli::box(n), _T(".rem"));
    }
    
    Proxies::RealProxy* RemotingServices::GetRealProxy(System::Object* proxy) {
        if(!(IsTransparentProxy(proxy))) 
        {
            throw cli::gcnew<RemotingException>(_T("Cannot get the real proxy from an object that is not a transparent proxy."));
        }
        return cli::cast<Proxies::RealProxy*>(cli::cast<Proxies::TransparentProxy*>(proxy)->_rp);
    }
    
    System::Reflection::MethodBase* RemotingServices::GetMethodBaseFromMethodMessage(Messaging::IMethodMessage* msg) {
        System::Type *type = System::Type::GetType4(msg->get_TypeName_2c092df7327c2af5());
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Type \'"), msg->get_TypeName_2c092df7327c2af5()));
        }
        return GetMethodBaseFromName(type, msg->get_MethodName_f32f67fc5b4be3b1(), cli::cast<cli::array<System::Type*>*>(msg->get_MethodSignature_a58bc01e7b3e43ec()));
    }
    
    System::Reflection::MethodBase* RemotingServices::GetMethodBaseFromName(System::Type* type, System::String* methodName, cli::array<System::Type*>* signature) {
        if(type->get_IsInterface()) 
        {
            return FindInterfaceMethod(type, methodName, signature);
        }
         else 
        {
            System::Reflection::MethodBase *method = nullptr;
            if((signature ==  nullptr)) 
            {
                method = type->GetMethod2(methodName, (System::Reflection::BindingFlags)52L);
            }
             else 
            {
                method = type->GetMethod5(methodName, (System::Reflection::BindingFlags)52L, nullptr, cli::cast<cli::array<System::Type*>*>(signature), nullptr);
            }
            if(System::Reflection::MethodBase::op_Inequality2(method, nullptr)) 
            {
                return method;
            }
            if(System::String::op_Equality(methodName, _T("FieldSetter"))) 
            {
                return FieldSetterMethod;
            }
            if(System::String::op_Equality(methodName, _T("FieldGetter"))) 
            {
                return FieldGetterMethod;
            }
            if((signature ==  nullptr)) 
            {
                return type->GetConstructor3((System::Reflection::BindingFlags)52L, nullptr, System::Type::EmptyTypes, nullptr);
            }
             else 
            {
                return type->GetConstructor3((System::Reflection::BindingFlags)52L, nullptr, signature, nullptr);
            }
        }
    }
    
    System::Reflection::MethodBase* RemotingServices::FindInterfaceMethod(System::Type* type, System::String* methodName, cli::array<System::Type*>* signature) {
        System::Reflection::MethodBase *method = nullptr;
        if((signature ==  nullptr)) 
        {
            method = type->GetMethod2(methodName, (System::Reflection::BindingFlags)52L);
        }
         else 
        {
            method = type->GetMethod5(methodName, (System::Reflection::BindingFlags)52L, nullptr, signature, nullptr);
        }
        if(System::Reflection::MethodBase::op_Inequality2(method, nullptr)) 
        {
            return method;
        }
        for(auto tmp_346 : type->GetInterfaces_52a89380e2c4a725()) {
            auto t = cli::cast<System::Type*>(tmp_346);
            {
                method = FindInterfaceMethod(t, methodName, signature);
                if(System::Reflection::MethodBase::op_Inequality2(method, nullptr)) 
                {
                    return method;
                }
            }
        }
        return nullptr;
    }
    
    void RemotingServices::GetObjectData(System::Object* obj, System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        ObjRef *oref = Marshal2(cli::cast<System::MarshalByRefObject*>(obj));
        oref->GetObjectData_ee660fdbddbfb758(info, context);
    }
    
    ObjRef* RemotingServices::GetObjRefForProxy(System::MarshalByRefObject* obj) {
        Identity *ident = GetObjectIdentity(obj);
        if((ident ==  nullptr)) 
        {
            return nullptr;
        }
         else 
        {
            return ident->CreateObjRef_366556653a47f288(nullptr);
        }
    }
    
    System::Object* RemotingServices::GetLifetimeService(System::MarshalByRefObject* obj) {
        if((obj ==  nullptr)) 
        {
            return nullptr;
        }
        return obj->GetLifetimeService();
    }
    
    Messaging::IMessageSink* RemotingServices::GetEnvoyChainForProxy(System::MarshalByRefObject* obj) {
        if(IsTransparentProxy(obj)) 
        {
            return cli::cast<ClientIdentity*>(GetRealProxy(obj)->get_ObjectIdentity())->get_EnvoySink();
        }
         else 
        {
            throw cli::gcnew<System::ArgumentException>(_T("obj must be a proxy."), _T("obj"));
        }
    }
    
    void RemotingServices::LogRemotingStage(int32_t stage) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* RemotingServices::GetSessionIdForMethodMessage(Messaging::IMethodMessage* msg) {
        return msg->get_Uri_a772cc17d83f8740();
    }
    
    bool RemotingServices::IsMethodOverloaded(Messaging::IMethodMessage* msg) {
        const System::Reflection::BindingFlags bfinst = (System::Reflection::BindingFlags)52L;
        System::MonoType *type = cli::cast<System::MonoType*>(msg->get_MethodBase_be82dccd2d92b9f6()->get_DeclaringType_6121cd6a84393166());
        return (type->GetMethodsByName(msg->get_MethodName_f32f67fc5b4be3b1(), (System::Reflection::BindingFlags)52L, false, type)->get_Length() > 1);
    }
    
    bool RemotingServices::IsObjectOutOfAppDomain(System::Object* tp) {
        System::MarshalByRefObject *mbr = cli::as<System::MarshalByRefObject*>(tp);
        if((mbr ==  nullptr)) 
        {
            return false;
        }
        Identity *ident = GetObjectIdentity(mbr);
        return cli::is<ClientIdentity>(ident);
    }
    
    bool RemotingServices::IsObjectOutOfContext(System::Object* tp) {
        System::MarshalByRefObject *mbr = cli::as<System::MarshalByRefObject*>(tp);
        if((mbr ==  nullptr)) 
        {
            return false;
        }
        Identity *ident = GetObjectIdentity(mbr);
        if((ident ==  nullptr)) 
        {
            return false;
        }
        ServerIdentity *sident = cli::as<ServerIdentity*>(ident);
        if((sident != nullptr)) 
        {
            return (sident->get_Context() != System::Threading::Thread::get_CurrentContext());
        }
         else 
        {
            return true;
        }
    }
    
    bool RemotingServices::IsOneWay(System::Reflection::MethodBase* method) {
        return method->IsDefined_91943a8ac363f11f(cli::typeof<System::Type>::info, false);
    }
    
    bool RemotingServices::IsAsyncMessage(Messaging::IMessage* msg) {
        if(!(cli::is<Messaging::MonoMethodMessage>(msg))) 
        {
            return false;
        }
         else 
        {
            if(cli::cast<Messaging::MonoMethodMessage*>(msg)->get_IsAsync()) 
            {
                return true;
            }
             else 
            {
                if(IsOneWay(cli::cast<Messaging::MonoMethodMessage*>(msg)->get_MethodBase())) 
                {
                    return true;
                }
                 else 
                {
                    return false;
                }
            }
        }
    }
    
    void RemotingServices::SetObjectUriForMarshal(System::MarshalByRefObject* obj, System::String* uri) {
        if(IsTransparentProxy(obj)) 
        {
            Proxies::RealProxy *proxy = RemotingServices::GetRealProxy(obj);
            Identity *identity = proxy->get_ObjectIdentity();
            if((((identity != nullptr) && !(cli::is<ServerIdentity>(identity))) && !(proxy->GetProxiedType()->get_IsContextful()))) 
            {
                throw cli::gcnew<RemotingException>(_T("SetObjectUriForMarshal method should only be called for MarshalByRefObjects that exist in the current AppDomain."));
            }
        }
        Marshal3(obj, uri);
    }
    
    System::Object* RemotingServices::CreateClientProxy(ActivatedClientTypeEntry* entry, cli::array<System::Object*>* activationAttributes) {
        if(((entry->get_ContextAttributes() != nullptr) || (activationAttributes != nullptr))) 
        {
            System::Collections::ArrayList *props = cli::gcnew<System::Collections::ArrayList>();
            if((entry->get_ContextAttributes() != nullptr)) 
            {
                props->AddRange_a8bb4db32a72ffe(entry->get_ContextAttributes());
            }
            if((activationAttributes != nullptr)) 
            {
                props->AddRange_a8bb4db32a72ffe(activationAttributes);
            }
            return CreateClientProxy2(entry->get_ObjectType(), entry->get_ApplicationUrl(), props->ToArray_360bcd462eb48114());
        }
         else 
        {
            return CreateClientProxy2(entry->get_ObjectType(), entry->get_ApplicationUrl(), nullptr);
        }
    }
    
    System::Object* RemotingServices::CreateClientProxy2(System::Type* objectType, System::String* url, cli::array<System::Object*>* activationAttributes) {
        System::String *activationUrl = url;
        if(!(activationUrl->EndsWith(_T("/")))) 
        {
            (activationUrl = cli::concat(activationUrl, _T("/")));
        }
        (activationUrl = cli::concat(activationUrl, _T("RemoteActivationService.rem")));
        System::String *objectUri;
        GetClientChannelSinkChain(activationUrl, nullptr, objectUri);
        Proxies::RemotingProxy *proxy = cli::gcnew<Proxies::RemotingProxy>(objectType, activationUrl, activationAttributes);
        return proxy->GetTransparentProxy_efb39f7079c89638();
    }
    
    System::Object* RemotingServices::CreateClientProxy3(WellKnownClientTypeEntry* entry) {
        return Connect2(entry->get_ObjectType(), entry->get_ObjectUrl(), nullptr);
    }
    
    System::Object* RemotingServices::CreateClientProxyForContextBound(System::Type* type, cli::array<System::Object*>* activationAttributes) {
        if(type->get_IsContextful()) 
        {
            Proxies::ProxyAttribute *att = cli::cast<Proxies::ProxyAttribute*>(System::Attribute::GetCustomAttribute8(type, cli::typeof<System::Type>::info, true));
            if((att != nullptr)) 
            {
                return att->CreateInstance_6e6df9b8c871915d(type);
            }
        }
        Proxies::RemotingProxy *proxy = cli::gcnew<Proxies::RemotingProxy>(type, Channels::ChannelServices::CrossContextUrl, activationAttributes);
        return proxy->GetTransparentProxy_efb39f7079c89638();
    }
    
    System::Object* RemotingServices::CreateClientProxyForComInterop(System::Type* type) {
        Mono::Interop::ComInteropProxy *proxy = Mono::Interop::ComInteropProxy::CreateProxy(type);
        return proxy->GetTransparentProxy_efb39f7079c89638();
    }
    
    Identity* RemotingServices::GetIdentityForUri(System::String* uri) {
        System::String *normUri = GetNormalizedUri(uri);
        {
            cli::lock_guard{uri_hash};
            Identity *i = cli::cast<Identity*>(uri_hash->get_Item_d75c6e706b965758(normUri));
            if((i ==  nullptr)) 
            {
                normUri = RemoveAppNameFromUri(uri);
                if((normUri != nullptr)) 
                {
                    i = cli::cast<Identity*>(uri_hash->get_Item_d75c6e706b965758(normUri));
                }
            }
            return i;
        }
    }
    
    System::String* RemotingServices::RemoveAppNameFromUri(System::String* uri) {
        System::String *name = RemotingConfiguration::get_ApplicationName();
        if((name ==  nullptr)) 
        {
            return nullptr;
        }
        name = cli::concat(_T("/"), name);
        if(uri->StartsWith(name)) 
        {
            return uri->Substring(name->get_Length());
        }
         else 
        {
            return nullptr;
        }
    }
    
    Identity* RemotingServices::GetObjectIdentity(System::MarshalByRefObject* obj) {
        if(IsTransparentProxy(obj)) 
        {
            return GetRealProxy(obj)->get_ObjectIdentity();
        }
         else 
        {
            return obj->get_ObjectIdentity();
        }
    }
    
    ClientIdentity* RemotingServices::GetOrCreateClientIdentity(ObjRef* objRef, System::Type* proxyType, System::Object* clientProxy) {
        System::Object *channelData = (objRef->get_ChannelInfo_9ec11d234d0cc35e() != nullptr) ? objRef->get_ChannelInfo_9ec11d234d0cc35e()->get_ChannelData_a0d7a480581057f3() : nullptr;
        System::String *objectUri;
        Messaging::IMessageSink *sink = GetClientChannelSinkChain(objRef->get_URI_8a7d9b91992639ed(), channelData, objectUri);
        if((objectUri ==  nullptr)) 
        {
            objectUri = objRef->get_URI_8a7d9b91992639ed();
        }
        {
            cli::lock_guard{uri_hash};
            clientProxy = nullptr;
            System::String *uri = GetNormalizedUri(objRef->get_URI_8a7d9b91992639ed());
            ClientIdentity *identity = cli::as<ClientIdentity*>(uri_hash->get_Item_d75c6e706b965758(uri));
            if((identity != nullptr)) 
            {
                clientProxy = identity->get_ClientProxy();
                if((clientProxy != nullptr)) 
                {
                    return identity;
                }
                DisposeIdentity(identity);
            }
            identity = cli::gcnew<ClientIdentity>(objectUri, objRef);
            identity->set_ChannelSink(sink);
            uri_hash->set_Item_84c7e24d9caa09(uri, identity);
            if(System::Type::op_Inequality2(proxyType, nullptr)) 
            {
                Proxies::RemotingProxy *proxy = cli::gcnew<Proxies::RemotingProxy>(proxyType, identity);
                Channels::CrossAppDomainSink *cds = cli::as<Channels::CrossAppDomainSink*>(sink);
                if((cds != nullptr)) 
                {
                    proxy->SetTargetDomain(cds->get_TargetDomainId());
                }
                clientProxy = proxy->GetTransparentProxy_efb39f7079c89638();
                identity->set_ClientProxy(cli::cast<System::MarshalByRefObject*>(clientProxy));
            }
            return identity;
        }
    }
    
    Messaging::IMessageSink* RemotingServices::GetClientChannelSinkChain(System::String* url, System::Object* channelData, System::String* objectUri) {
        Messaging::IMessageSink *sink = Channels::ChannelServices::CreateClientChannelSinkChain(url, channelData, objectUri);
        if((sink ==  nullptr)) 
        {
            if((url != nullptr)) 
            {
                System::String *msg = System::String::Format2(_T("Cannot create channel sink to connect to URL {0}. An appropriate channel has probably not been registered."), url);
                throw cli::gcnew<RemotingException>(msg);
            }
             else 
            {
                System::String *msg = System::String::Format2(_T("Cannot create channel sink to connect to the remote object. An appropriate channel has probably not been registered."), url);
                throw cli::gcnew<RemotingException>(msg);
            }
        }
        return sink;
    }
    
    ClientActivatedIdentity* RemotingServices::CreateContextBoundObjectIdentity(System::Type* objectType) {
        ClientActivatedIdentity *identity = cli::gcnew<ClientActivatedIdentity>(nullptr, objectType);
        identity->set_ChannelSink(Channels::ChannelServices::get_CrossContextChannel());
        return identity;
    }
    
    ClientActivatedIdentity* RemotingServices::CreateClientActivatedServerIdentity(System::MarshalByRefObject* realObject, System::Type* objectType, System::String* objectUri) {
        ClientActivatedIdentity *identity = cli::gcnew<ClientActivatedIdentity>(objectUri, objectType);
        identity->AttachServerObject(realObject, Contexts::Context2::get_DefaultContext());
        RegisterServerIdentity(identity);
        identity->StartTrackingLifetime(cli::cast<Lifetime::ILease*>(realObject->InitializeLifetimeService_8f02e9c96ffbe30f()));
        return identity;
    }
    
    ServerIdentity* RemotingServices::CreateWellKnownServerIdentity(System::Type* objectType, System::String* objectUri, WellKnownObjectMode mode) {
        ServerIdentity *identity;
        if(((int32_t)(mode) ==  2)) 
        {
            identity = cli::gcnew<SingleCallIdentity>(objectUri, Contexts::Context2::get_DefaultContext(), objectType);
        }
         else 
        {
            identity = cli::gcnew<SingletonIdentity>(objectUri, Contexts::Context2::get_DefaultContext(), objectType);
        }
        RegisterServerIdentity(identity);
        return identity;
    }
    
    void RemotingServices::RegisterServerIdentity(ServerIdentity* identity) {
        {
            cli::lock_guard{uri_hash};
            if(uri_hash->ContainsKey_5de2e202a0290d76(identity->get_ObjectUri())) 
            {
                throw cli::gcnew<RemotingException>(cli::concat(_T("Uri already in use: "), identity->get_ObjectUri()));
            }
            uri_hash->set_Item_84c7e24d9caa09(identity->get_ObjectUri(), identity);
        }
    }
    
    System::Object* RemotingServices::GetProxyForRemoteObject(ObjRef* objref, System::Type* classToProxy) {
        ClientActivatedIdentity *identity = cli::as<ClientActivatedIdentity*>(GetIdentityForUri(objref->get_URI_8a7d9b91992639ed()));
        if((identity != nullptr)) 
        {
            return identity->GetServerObject();
        }
         else 
        {
            return GetRemoteObject(objref, classToProxy);
        }
    }
    
    System::Object* RemotingServices::GetRemoteObject(ObjRef* objRef, System::Type* proxyType) {
        System::Object *proxy;
        GetOrCreateClientIdentity(objRef, proxyType, proxy);
        return proxy;
    }
    
    System::Object* RemotingServices::GetServerObject(System::String* uri) {
        ClientActivatedIdentity *identity = cli::as<ClientActivatedIdentity*>(GetIdentityForUri(uri));
        if((identity ==  nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Server for uri \'"), uri));
        }
        return identity->GetServerObject();
    }
    
    cli::array<unsigned char>* RemotingServices::SerializeCallData(System::Object* obj) {
        Messaging::LogicalCallContext *ctx = Messaging::CallContext::CreateLogicalCallContext(false);
        if((ctx != nullptr)) 
        {
            CACD *cad = cli::gcnew<CACD>();
            cad->d = obj;
            cad->c = ctx;
            obj = cad;
        }
        if((obj ==  nullptr)) 
        {
            return nullptr;
        }
        System::IO::MemoryStream *ms = cli::gcnew<System::IO::MemoryStream>();
        _serializationFormatter->Serialize(ms, obj);
        return ms->ToArray_ebf8bde16e9d2ad6();
    }
    
    System::Object* RemotingServices::DeserializeCallData(cli::array<unsigned char>* array) {
        if((array ==  nullptr)) 
        {
            return nullptr;
        }
        System::IO::MemoryStream *ms = cli::gcnew<System::IO::MemoryStream>(array);
        System::Object *obj = _deserializationFormatter->Deserialize(ms);
        if(cli::is<CACD>(obj)) 
        {
            CACD *cad = cli::cast<CACD*>(obj);
            obj = cad->d;
            Messaging::CallContext::UpdateCurrentCallContext(cli::cast<Messaging::LogicalCallContext*>(cad->c));
        }
        return obj;
    }
    
    cli::array<unsigned char>* RemotingServices::SerializeExceptionData(System::Exception* ex) {
        try {
            int32_t retry = 4;
            do {
                try {
                    System::IO::MemoryStream *ms = cli::gcnew<System::IO::MemoryStream>();
                    _serializationFormatter->Serialize(ms, ex);
                    return ms->ToArray_ebf8bde16e9d2ad6();
                }
                catch(System::Exception* e) {
                    if(cli::is<System::Threading::ThreadAbortException>(e)) 
                    {
                        System::Threading::Thread::ResetAbort();
                        retry = 5;
                        ex = e;
                    }
                     else 
                    {
                        if((retry ==  2)) 
                        {
                            ex = cli::gcnew<System::Exception>();
                            ex->SetMessage(e->get_Message_d211df4045b57cbf());
                            ex->SetStackTrace(e->get_StackTrace_f3fc28619b4f921());
                        }
                         else 
                        {
                            ex = e;
                        }
                    }
                }
                retry--;
            }
            while((retry > 0));
            return nullptr;
        }
        catch(System::Exception* tex) {
            cli::array<unsigned char> *data = SerializeExceptionData(tex);
            System::Threading::Thread::ResetAbort();
            return data;
        }
    }
    
    System::Object* RemotingServices::GetDomainProxy(System::AppDomain* domain) {
        cli::array<unsigned char> *data = nullptr;
        Contexts::Context2 *currentContext = System::Threading::Thread::get_CurrentContext();
        {
            cli::finally_guard([&]() {
                System::AppDomain::InternalSetContext(currentContext);
            });
            data = cli::cast<cli::array<unsigned char>*>(System::AppDomain::InvokeInDomain(domain, cli::typeof<System::Type>::info->GetMethod2(_T("GetMarshalledDomainObjRef"), (System::Reflection::BindingFlags)36L), domain, nullptr));
        }
        cli::array<unsigned char> *data_copy = (new cli::array<unsigned char>(data->get_Length()));
        cli::import(data)->CopyTo(data_copy, 0);
        System::IO::MemoryStream *stream = cli::gcnew<System::IO::MemoryStream>(data_copy);
        ObjRef *appref = cli::cast<ObjRef*>(Channels::CADSerializer::DeserializeObject(stream));
        return cli::cast<System::AppDomain*>(RemotingServices::Unmarshal(appref));
    }
    
    void RemotingServices::RegisterInternalChannels() {
        Channels::CrossAppDomainChannel::RegisterCrossAppDomainChannel();
    }
    
    void RemotingServices::DisposeIdentity(Identity* ident) {
        {
            cli::lock_guard{uri_hash};
            if(!(ident->get_Disposed())) 
            {
                ClientIdentity *clientId = cli::as<ClientIdentity*>(ident);
                if((clientId != nullptr)) 
                {
                    uri_hash->Remove_fd653674dd8a5ac4(GetNormalizedUri(clientId->get_TargetUri()));
                }
                 else 
                {
                    uri_hash->Remove_fd653674dd8a5ac4(ident->get_ObjectUri());
                }
                ident->set_Disposed(true);
            }
        }
    }
    
    Identity* RemotingServices::GetMessageTargetIdentity(Messaging::IMessage* msg) {
        if(cli::is<Messaging::IInternalMessage>(msg)) 
        {
            return cli::cast<Messaging::IInternalMessage*>(msg)->get_TargetIdentity_462ebd8041156d75();
        }
        {
            cli::lock_guard{uri_hash};
            System::String *uri = GetNormalizedUri(cli::cast<Messaging::IMethodMessage*>(msg)->get_Uri_a772cc17d83f8740());
            return cli::as<ServerIdentity*>(uri_hash->get_Item_d75c6e706b965758(uri));
        }
    }
    
    void RemotingServices::SetMessageTargetIdentity(Messaging::IMessage* msg, Identity* ident) {
        if(cli::is<Messaging::IInternalMessage>(msg)) 
        {
            cli::cast<Messaging::IInternalMessage*>(msg)->set_TargetIdentity_8fbc4984471e7e77(ident);
        }
    }
    
    bool RemotingServices::UpdateOutArgObject(System::Reflection::ParameterInfo* pi, System::Object* local, System::Object* remote) {
        if((pi->get_ParameterType_97c5fa09a0b988d()->get_IsArray() && (cli::cast<System::Array*>(local)->get_Rank() ==  1))) 
        {
            System::Array *alocal = cli::cast<System::Array*>(local);
            if((alocal->get_Rank() ==  1)) 
            {
                System::Array::Copy(cli::cast<System::Array*>(remote), alocal, alocal->get_Length());
                return true;
            }
             else 
            {
            }
        }
        return false;
    }
    
    System::String* RemotingServices::GetNormalizedUri(System::String* uri) {
        if(uri->StartsWith(_T("/"))) 
        {
            return uri->Substring(1);
        }
         else 
        {
            return uri;
        }
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void RemotingTimeoutException::constructor() {
    }
    
    void RemotingTimeoutException::constructor(System::String* message) {
    }
    
    void RemotingTimeoutException::constructor(System::String* message, System::Exception* InnerException) {
    }
    
    void RemotingTimeoutException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ServerException::constructor() {
    }
    
    void ServerException::constructor(System::String* message) {
    }
    
    void ServerException::constructor(System::String* message, System::Exception* InnerException) {
    }
    
    void ServerException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ServerIdentity::constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType) {
        this->_objectType = objectType;
        this->_context = context;
    }
    
    void ServerIdentity::StartTrackingLifetime(Lifetime::ILease* lease) {
        if(((lease != nullptr) && ((int32_t)(lease->get_CurrentState_c1fd61e427ff7162()) ==  0))) 
        {
            lease = nullptr;
        }
        if((lease != nullptr)) 
        {
            if(!(cli::is<Lifetime::Lease>(lease))) 
            {
                lease = cli::gcnew<Lifetime::Lease>();
            }
            this->_lease = cli::cast<Lifetime::Lease*>(lease);
            Lifetime::LifetimeServices::TrackLifetime(this);
        }
    }
    
    void ServerIdentity::OnLifetimeExpired_e5bffd3f0ee9cda2() {
        DisposeServerObject();
    }
    
    ObjRef* ServerIdentity::CreateObjRef_366556653a47f288(System::Type* requestedType) {
        if((this->_objRef != nullptr)) 
        {
            this->_objRef->UpdateChannelInfo();
            return this->_objRef;
        }
        if(System::Type::op_Equality2(requestedType, nullptr)) 
        {
            requestedType = this->_objectType;
        }
        this->_objRef = cli::gcnew<ObjRef>();
        this->_objRef->set_TypeInfo_9fa39a26a11d5ac0(cli::gcnew<TypeInfo2>(requestedType));
        this->_objRef->set_URI_6a4837f1e4931068(this->_objectUri);
        if(((this->_envoySink != nullptr) && !(cli::is<Messaging::EnvoyTerminatorSink>(this->_envoySink)))) 
        {
            this->_objRef->set_EnvoyInfo_4f39d454ae79e3bf(cli::gcnew<EnvoyInfo>(this->_envoySink));
        }
        return this->_objRef;
    }
    
    void ServerIdentity::AttachServerObject(System::MarshalByRefObject* serverObject, Contexts::Context2* context) {
        DisposeServerObject();
        this->_context = context;
        this->_serverObject = serverObject;
        if(RemotingServices::IsTransparentProxy(serverObject)) 
        {
            Proxies::RealProxy *rp = RemotingServices::GetRealProxy(serverObject);
            if((rp->get_ObjectIdentity() ==  nullptr)) 
            {
                rp->set_ObjectIdentity(this);
            }
        }
         else 
        {
            if(this->_objectType->get_IsContextful()) 
            {
                this->_envoySink = context->CreateEnvoySink(serverObject);
            }
            this->_serverObject->set_ObjectIdentity(this);
        }
    }
    
    void ServerIdentity::DisposeServerObject() {
        if((this->_serverObject != nullptr)) 
        {
            System::MarshalByRefObject *obj = this->_serverObject;
            this->_serverObject->set_ObjectIdentity(nullptr);
            this->_serverObject = nullptr;
            this->_serverSink = nullptr;
            Services::TrackingServices::NotifyDisconnectedObject(obj);
        }
    }
    
    System::Type* ServerIdentity::get_ObjectType() {
        return this->_objectType;
    }
    
    Lifetime::Lease* ServerIdentity::get_Lease() {
        return this->_lease;
    }
    
    Contexts::Context2* ServerIdentity::get_Context() {
        return this->_context;
    }
    
    Contexts::Context2* ServerIdentity::set_Context(Contexts::Context2* value) {
        this->_context = value;
        return get_Context();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ClientActivatedIdentity::constructor(System::String* objectUri, System::Type* objectType) {
    }
    
    System::MarshalByRefObject* ClientActivatedIdentity::GetServerObject() {
        return this->_serverObject;
    }
    
    System::MarshalByRefObject* ClientActivatedIdentity::GetClientProxy() {
        return this->_targetThis;
    }
    
    void ClientActivatedIdentity::SetClientProxy(System::MarshalByRefObject* obj) {
        this->_targetThis = obj;
    }
    
    void ClientActivatedIdentity::OnLifetimeExpired_e5bffd3f0ee9cda2() {
        ServerIdentity::OnLifetimeExpired_e5bffd3f0ee9cda2();
        RemotingServices::DisposeIdentity(this);
    }
    
    Messaging::IMessage* ClientActivatedIdentity::SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) {
        if((this->_serverSink ==  nullptr)) 
        {
            bool useProxy = (this->_targetThis != nullptr);
            this->_serverSink = this->_context->CreateServerObjectSinkChain(useProxy ? this->_targetThis : this->_serverObject, useProxy);
        }
        return this->_serverSink->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    Messaging::IMessageCtrl* ClientActivatedIdentity::AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) {
        if((this->_serverSink ==  nullptr)) 
        {
            bool useProxy = (this->_targetThis != nullptr);
            this->_serverSink = this->_context->CreateServerObjectSinkChain(useProxy ? this->_targetThis : this->_serverObject, useProxy);
        }
        return this->_serverSink->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void SingletonIdentity::constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType) {
    }
    
    System::MarshalByRefObject* SingletonIdentity::GetServerObject() {
        if((this->_serverObject != nullptr)) 
        {
            return this->_serverObject;
        }
        {
            cli::lock_guard{this};
            if((this->_serverObject ==  nullptr)) 
            {
                System::MarshalByRefObject *server = cli::cast<System::MarshalByRefObject*>(System::Activator::CreateInstance13(this->_objectType, true));
                ServerIdentity::AttachServerObject(server, Contexts::Context2::get_DefaultContext());
                ServerIdentity::StartTrackingLifetime(cli::cast<Lifetime::ILease*>(server->InitializeLifetimeService_8f02e9c96ffbe30f()));
            }
        }
        return this->_serverObject;
    }
    
    Messaging::IMessage* SingletonIdentity::SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) {
        System::MarshalByRefObject *obj = GetServerObject();
        if((this->_serverSink ==  nullptr)) 
        {
            this->_serverSink = this->_context->CreateServerObjectSinkChain(obj, false);
        }
        return this->_serverSink->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    Messaging::IMessageCtrl* SingletonIdentity::AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) {
        System::MarshalByRefObject *obj = GetServerObject();
        if((this->_serverSink ==  nullptr)) 
        {
            this->_serverSink = this->_context->CreateServerObjectSinkChain(obj, false);
        }
        return this->_serverSink->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void SingleCallIdentity::constructor(System::String* objectUri, Contexts::Context2* context, System::Type* objectType) {
    }
    
    Messaging::IMessage* SingleCallIdentity::SyncObjectProcessMessage_63252e259b8161c6(Messaging::IMessage* msg) {
        System::MarshalByRefObject *obj = cli::cast<System::MarshalByRefObject*>(System::Activator::CreateInstance13(this->_objectType, true));
        if((obj->get_ObjectIdentity() ==  nullptr)) 
        {
            obj->set_ObjectIdentity(this);
        }
        Messaging::IMessageSink *serverSink = this->_context->CreateServerObjectSinkChain(obj, false);
        Messaging::IMessage *result = serverSink->SyncProcessMessage_d4949581639d4872(msg);
        if(cli::is<System::IDisposable>(obj)) 
        {
            cli::cast<System::IDisposable*>(obj)->Dispose_95cb2516542c2f97();
        }
        return result;
    }
    
    Messaging::IMessageCtrl* SingleCallIdentity::AsyncObjectProcessMessage_44b7f4bc847d9247(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) {
        System::MarshalByRefObject *obj = cli::cast<System::MarshalByRefObject*>(System::Activator::CreateInstance13(this->_objectType, true));
        Messaging::IMessageSink *serverSink = this->_context->CreateServerObjectSinkChain(obj, false);
        if(cli::is<System::IDisposable>(obj)) 
        {
            replySink = cli::gcnew<DisposerReplySink>(replySink, cli::cast<System::IDisposable*>(obj));
        }
        return serverSink->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void DisposerReplySink::constructor(Messaging::IMessageSink* next, System::IDisposable* disposable) {
        this->_next = next;
        this->_disposable = disposable;
    }
    
    Messaging::IMessage* DisposerReplySink::SyncProcessMessage(Messaging::IMessage* msg) {
        this->_disposable->Dispose_95cb2516542c2f97();
        return this->_next->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    Messaging::IMessageCtrl* DisposerReplySink::AsyncProcessMessage(Messaging::IMessage* msg, Messaging::IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    Messaging::IMessageSink* DisposerReplySink::get_NextSink() {
        return this->_next;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void TypeInfo::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    System::Collections::Hashtable*  SoapServices::_xmlTypes;
    System::Collections::Hashtable*  SoapServices::_xmlElements;
    System::Collections::Hashtable*  SoapServices::_soapActions;
    System::Collections::Hashtable*  SoapServices::_soapActionsMethods;
    System::Collections::Hashtable*  SoapServices::_typeInfos;
    
    SoapServices::SoapServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapServices::constructor() {
    }
    
    void SoapServices::static_constructor() {
    }
    
    System::String* SoapServices::CodeXmlNamespaceForClrTypeNamespace(System::String* typeNamespace, System::String* assemblyName) {
        if(System::String::op_Equality(assemblyName, System::String::Empty)) 
        {
            return cli::concat(SoapServices::get_XmlNsForClrTypeWithNs(), typeNamespace);
        }
         else 
        {
            if(System::String::op_Equality(typeNamespace, System::String::Empty)) 
            {
                return EncodeNs(cli::concat(SoapServices::get_XmlNsForClrTypeWithAssembly(), assemblyName));
            }
             else 
            {
                return EncodeNs(cli::concat(SoapServices::get_XmlNsForClrTypeWithNsAndAssembly(), typeNamespace));
            }
        }
    }
    
    bool SoapServices::DecodeXmlNamespaceForClrTypeNamespace(System::String* inNamespace, System::String* typeNamespace, System::String* assemblyName) {
        if((inNamespace ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("inNamespace"));
        }
        inNamespace = DecodeNs(inNamespace);
        typeNamespace = nullptr;
        assemblyName = nullptr;
        if(inNamespace->StartsWith(SoapServices::get_XmlNsForClrTypeWithNsAndAssembly())) 
        {
            int32_t typePos = SoapServices::get_XmlNsForClrTypeWithNsAndAssembly()->get_Length();
            if((typePos >= inNamespace->get_Length())) 
            {
                return false;
            }
            int32_t assemPos = inNamespace->IndexOf5(u'/', (typePos + 1));
            if((assemPos ==  -1)) 
            {
                return false;
            }
            typeNamespace = inNamespace->Substring2(typePos, (assemPos - typePos));
            assemblyName = inNamespace->Substring((assemPos + 1));
            return true;
        }
         else 
        {
            if(inNamespace->StartsWith(SoapServices::get_XmlNsForClrTypeWithNs())) 
            {
                int32_t typePos = SoapServices::get_XmlNsForClrTypeWithNs()->get_Length();
                typeNamespace = inNamespace->Substring(typePos);
                return true;
            }
             else 
            {
                if(inNamespace->StartsWith(SoapServices::get_XmlNsForClrTypeWithAssembly())) 
                {
                    int32_t typePos = SoapServices::get_XmlNsForClrTypeWithAssembly()->get_Length();
                    assemblyName = inNamespace->Substring(typePos);
                    return true;
                }
                 else 
                {
                    return false;
                }
            }
        }
    }
    
    void SoapServices::GetInteropFieldTypeAndNameFromXmlAttribute(System::Type* containingType, System::String* xmlAttribute, System::String* xmlNamespace, System::Type* type, System::String* name) {
        TypeInfo *tf = cli::cast<TypeInfo*>(_typeInfos->get_Item_d75c6e706b965758(containingType));
        System::Collections::Hashtable *ht = (tf != nullptr) ? tf->Attributes : nullptr;
        GetInteropFieldInfo(ht, xmlAttribute, xmlNamespace, type, name);
    }
    
    void SoapServices::GetInteropFieldTypeAndNameFromXmlElement(System::Type* containingType, System::String* xmlElement, System::String* xmlNamespace, System::Type* type, System::String* name) {
        TypeInfo *tf = cli::cast<TypeInfo*>(_typeInfos->get_Item_d75c6e706b965758(containingType));
        System::Collections::Hashtable *ht = (tf != nullptr) ? tf->Elements : nullptr;
        GetInteropFieldInfo(ht, xmlElement, xmlNamespace, type, name);
    }
    
    void SoapServices::GetInteropFieldInfo(System::Collections::Hashtable* fields, System::String* xmlName, System::String* xmlNamespace, System::Type* type, System::String* name) {
        if((fields != nullptr)) 
        {
            System::Reflection::FieldInfo *field = cli::cast<System::Reflection::FieldInfo*>(fields->get_Item_d75c6e706b965758(GetNameKey(xmlName, xmlNamespace)));
            if(System::Reflection::FieldInfo::op_Inequality2(field, nullptr)) 
            {
                type = field->get_FieldType_1dab4079098d7fff();
                name = field->get_Name_50fad5fa936c3ae2();
                return;
            }
        }
        type = nullptr;
        name = nullptr;
    }
    
    System::String* SoapServices::GetNameKey(System::String* name, System::String* namspace) {
        if((namspace ==  nullptr)) 
        {
            return name;
        }
         else 
        {
            return cli::concat(name, _T(" "));
        }
    }
    
    System::Type* SoapServices::GetInteropTypeFromXmlElement(System::String* xmlElement, System::String* xmlNamespace) {
        {
            cli::lock_guard{_xmlElements->get_SyncRoot_2d1e4aa44bab8a0d()};
            return cli::cast<System::Type*>(_xmlElements->get_Item_d75c6e706b965758(cli::concat(xmlElement, _T(" "))));
        }
    }
    
    System::Type* SoapServices::GetInteropTypeFromXmlType(System::String* xmlType, System::String* xmlTypeNamespace) {
        {
            cli::lock_guard{_xmlTypes->get_SyncRoot_2d1e4aa44bab8a0d()};
            return cli::cast<System::Type*>(_xmlTypes->get_Item_d75c6e706b965758(cli::concat(xmlType, _T(" "))));
        }
    }
    
    System::String* SoapServices::GetAssemblyName(System::Reflection::MethodBase* mb) {
        if(System::Reflection::Assembly::op_Equality(mb->get_DeclaringType_6121cd6a84393166()->get_Assembly_3aae0acbf2a6d696(), cli::typeof<System::Type>::info->get_Assembly_3aae0acbf2a6d696())) 
        {
            return System::String::Empty;
        }
         else 
        {
            return mb->get_DeclaringType_6121cd6a84393166()->get_Assembly_3aae0acbf2a6d696()->GetName_7088a38b93d0dcc5()->get_Name();
        }
    }
    
    System::String* SoapServices::GetSoapActionFromMethodBase(System::Reflection::MethodBase* mb) {
        return InternalGetSoapAction(mb);
    }
    
    bool SoapServices::GetTypeAndMethodNameFromSoapAction(System::String* soapAction, System::String* typeName, System::String* methodName) {
        {
            cli::lock_guard{_soapActions->get_SyncRoot_2d1e4aa44bab8a0d()};
            System::Reflection::MethodBase *mb = cli::cast<System::Reflection::MethodBase*>(_soapActionsMethods->get_Item_d75c6e706b965758(soapAction));
            if(System::Reflection::MethodBase::op_Inequality2(mb, nullptr)) 
            {
                typeName = mb->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
                methodName = mb->get_Name_50fad5fa936c3ae2();
                return true;
            }
        }
        System::String *type;
        System::String *assembly;
        typeName = nullptr;
        methodName = nullptr;
        int32_t i = soapAction->LastIndexOf4(u'#');
        if((i ==  -1)) 
        {
            return false;
        }
        methodName = soapAction->Substring((i + 1));
        if(!(DecodeXmlNamespaceForClrTypeNamespace(soapAction->Substring2(0, i), type, assembly))) 
        {
            return false;
        }
        if((assembly ==  nullptr)) 
        {
            typeName = cli::concat(type, _T(", "));
        }
         else 
        {
            typeName = cli::concat(type, _T(", "));
        }
        return true;
    }
    
    bool SoapServices::GetXmlElementForInteropType(System::Type* type, System::String* xmlElement, System::String* xmlNamespace) {
        Metadata::SoapTypeAttribute *att = cli::cast<Metadata::SoapTypeAttribute*>(InternalRemotingServices::GetCachedSoapAttribute(type));
        if(!(att->get_IsInteropXmlElement())) 
        {
            xmlElement = nullptr;
            xmlNamespace = nullptr;
            return false;
        }
        xmlElement = att->get_XmlElementName();
        xmlNamespace = att->get_XmlNamespace_85ad94434edc23f3();
        return true;
    }
    
    System::String* SoapServices::GetXmlNamespaceForMethodCall(System::Reflection::MethodBase* mb) {
        return CodeXmlNamespaceForClrTypeNamespace(mb->get_DeclaringType_6121cd6a84393166()->get_FullName_7e8fa72ba225e1a4(), GetAssemblyName(mb));
    }
    
    System::String* SoapServices::GetXmlNamespaceForMethodResponse(System::Reflection::MethodBase* mb) {
        return CodeXmlNamespaceForClrTypeNamespace(mb->get_DeclaringType_6121cd6a84393166()->get_FullName_7e8fa72ba225e1a4(), GetAssemblyName(mb));
    }
    
    bool SoapServices::GetXmlTypeForInteropType(System::Type* type, System::String* xmlType, System::String* xmlTypeNamespace) {
        Metadata::SoapTypeAttribute *att = cli::cast<Metadata::SoapTypeAttribute*>(InternalRemotingServices::GetCachedSoapAttribute(type));
        if(!(att->get_IsInteropXmlType())) 
        {
            xmlType = nullptr;
            xmlTypeNamespace = nullptr;
            return false;
        }
        xmlType = att->get_XmlTypeName();
        xmlTypeNamespace = att->get_XmlTypeNamespace();
        return true;
    }
    
    bool SoapServices::IsClrTypeNamespace(System::String* namespaceString) {
        return namespaceString->StartsWith(SoapServices::get_XmlNsForClrType());
    }
    
    bool SoapServices::IsSoapActionValidForMethodBase(System::String* soapAction, System::Reflection::MethodBase* mb) {
        System::String *typeName;
        System::String *methodName;
        GetTypeAndMethodNameFromSoapAction(soapAction, typeName, methodName);
        if(System::String::op_Inequality(methodName, mb->get_Name_50fad5fa936c3ae2())) 
        {
            return false;
        }
        System::String *methodClassType = mb->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
        return System::String::op_Equality(typeName, methodClassType);
    }
    
    void SoapServices::PreLoad(System::Reflection::Assembly* assembly) {
        for(auto tmp_347 : assembly->GetTypes_596eee17684f649()) {
            auto t = cli::cast<System::Type*>(tmp_347);
            PreLoad2(t);
        }
    }
    
    void SoapServices::PreLoad2(System::Type* type) {
        System::String *name, *namspace;
        TypeInfo *tf = cli::as<TypeInfo*>(_typeInfos->get_Item_d75c6e706b965758(type));
        if((tf != nullptr)) 
        {
            return;
        }
        if(GetXmlTypeForInteropType(type, name, namspace)) 
        {
            RegisterInteropXmlType(name, namspace, type);
        }
        if(GetXmlElementForInteropType(type, name, namspace)) 
        {
            RegisterInteropXmlElement(name, namspace, type);
        }
        {
            cli::lock_guard{_typeInfos->get_SyncRoot_2d1e4aa44bab8a0d()};
            tf = cli::gcnew<TypeInfo>();
            cli::array<System::Reflection::FieldInfo*> *fields = type->GetFields_369be5ac49d99f8((System::Reflection::BindingFlags)52L);
            for(auto tmp_348 : fields) {
                auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_348);
                {
                    Metadata::SoapFieldAttribute *att = cli::cast<Metadata::SoapFieldAttribute*>(InternalRemotingServices::GetCachedSoapAttribute(field));
                    if(!(att->IsInteropXmlElement())) 
                    {
                        continue;
                    }
                    System::String *key = GetNameKey(att->get_XmlElementName(), att->get_XmlNamespace_85ad94434edc23f3());
                    if(att->get_UseAttribute_8c48997d109215be()) 
                    {
                        if((tf->Attributes ==  nullptr)) 
                        {
                            tf->Attributes = cli::gcnew<System::Collections::Hashtable>();
                        }
                        tf->Attributes->set_Item_84c7e24d9caa09(key, field);
                    }
                     else 
                    {
                        if((tf->Elements ==  nullptr)) 
                        {
                            tf->Elements = cli::gcnew<System::Collections::Hashtable>();
                        }
                        tf->Elements->set_Item_84c7e24d9caa09(key, field);
                    }
                }
            }
            _typeInfos->set_Item_84c7e24d9caa09(type, tf);
        }
    }
    
    void SoapServices::RegisterInteropXmlElement(System::String* xmlElement, System::String* xmlNamespace, System::Type* type) {
        {
            cli::lock_guard{_xmlElements->get_SyncRoot_2d1e4aa44bab8a0d()};
            _xmlElements->set_Item_84c7e24d9caa09(cli::concat(xmlElement, _T(" ")), type);
        }
    }
    
    void SoapServices::RegisterInteropXmlType(System::String* xmlType, System::String* xmlTypeNamespace, System::Type* type) {
        {
            cli::lock_guard{_xmlTypes->get_SyncRoot_2d1e4aa44bab8a0d()};
            _xmlTypes->set_Item_84c7e24d9caa09(cli::concat(xmlType, _T(" ")), type);
        }
    }
    
    void SoapServices::RegisterSoapActionForMethodBase(System::Reflection::MethodBase* mb) {
        InternalGetSoapAction(mb);
    }
    
    System::String* SoapServices::InternalGetSoapAction(System::Reflection::MethodBase* mb) {
        {
            cli::lock_guard{_soapActions->get_SyncRoot_2d1e4aa44bab8a0d()};
            System::String *action = cli::cast<System::String*>(_soapActions->get_Item_d75c6e706b965758(mb));
            if((action ==  nullptr)) 
            {
                Metadata::SoapMethodAttribute *att = cli::cast<Metadata::SoapMethodAttribute*>(InternalRemotingServices::GetCachedSoapAttribute(mb));
                action = att->get_SoapAction();
                _soapActions->set_Item_84c7e24d9caa09(mb, action);
                _soapActionsMethods->set_Item_84c7e24d9caa09(action, mb);
            }
            return action;
        }
    }
    
    void SoapServices::RegisterSoapActionForMethodBase2(System::Reflection::MethodBase* mb, System::String* soapAction) {
        {
            cli::lock_guard{_soapActions->get_SyncRoot_2d1e4aa44bab8a0d()};
            _soapActions->set_Item_84c7e24d9caa09(mb, soapAction);
            _soapActionsMethods->set_Item_84c7e24d9caa09(soapAction, mb);
        }
    }
    
    System::String* SoapServices::EncodeNs(System::String* ns) {
        ns = ns->Replace2(_T(","), _T("%2C"));
        ns = ns->Replace2(_T(" "), _T("%20"));
        return ns->Replace2(_T("="), _T("%3D"));
    }
    
    System::String* SoapServices::DecodeNs(System::String* ns) {
        ns = ns->Replace2(_T("%2C"), _T(","));
        ns = ns->Replace2(_T("%20"), _T(" "));
        return ns->Replace2(_T("%3D"), _T("="));
    }
    
    System::String* SoapServices::get_XmlNsForClrType() {
        return _T("http://schemas.microsoft.com/clr/");
    }
    
    System::String* SoapServices::get_XmlNsForClrTypeWithAssembly() {
        return _T("http://schemas.microsoft.com/clr/assem/");
    }
    
    System::String* SoapServices::get_XmlNsForClrTypeWithNs() {
        return _T("http://schemas.microsoft.com/clr/ns/");
    }
    
    System::String* SoapServices::get_XmlNsForClrTypeWithNsAndAssembly() {
        return _T("http://schemas.microsoft.com/clr/nsassem/");
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void TypeEntry::constructor() {
    }
    
    System::String* TypeEntry::get_AssemblyName() {
        return this->assembly_name;
    }
    
    System::String* TypeEntry::set_AssemblyName(System::String* value) {
        this->assembly_name = value;
        return get_AssemblyName();
    }
    
    System::String* TypeEntry::get_TypeName() {
        return this->type_name;
    }
    
    System::String* TypeEntry::set_TypeName(System::String* value) {
        this->type_name = value;
        return get_TypeName();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void TypeInfo2::constructor(System::Type* type) {
        if(type->get_IsInterface()) 
        {
            this->serverType = cli::typeof<System::Type>::info->get_AssemblyQualifiedName_cea373c2171bd483();
            this->serverHierarchy = (new cli::array<System::String*>(0));
            this->interfacesImplemented = (new cli::array<System::String*>({type->get_AssemblyQualifiedName_cea373c2171bd483()}));
        }
         else 
        {
            this->serverType = type->get_AssemblyQualifiedName_cea373c2171bd483();
            int32_t baseCount = 0;
            System::Type *baseType = type->get_BaseType_6a0646ae880055f6();
            while((System::Type::op_Inequality2(baseType, cli::typeof<System::Type>::info) && System::Type::op_Inequality2(baseType, cli::typeof<System::Type>::info))) {
                baseType = baseType->get_BaseType_6a0646ae880055f6();
                baseCount++;
            }
            this->serverHierarchy = (new cli::array<System::String*>(baseCount));
            baseType = type->get_BaseType_6a0646ae880055f6();
            for(int32_t n = 0; (n < baseCount); n++){
                this->serverHierarchy->at(n) = baseType->get_AssemblyQualifiedName_cea373c2171bd483();
                baseType = baseType->get_BaseType_6a0646ae880055f6();
            }
            cli::array<System::Type*> *interfaces = type->GetInterfaces_52a89380e2c4a725();
            this->interfacesImplemented = (new cli::array<System::String*>(interfaces->get_Length()));
            for(int32_t n = 0; (n < interfaces->get_Length()); n++) {
                this->interfacesImplemented->at(n) = interfaces->at(n)->get_AssemblyQualifiedName_cea373c2171bd483();
            }
        }
    }
    
    bool TypeInfo2::CanCastTo(System::Type* fromType, System::Object* o) {
        if(System::Type::op_Equality2(fromType, cli::typeof<System::Type>::info)) 
        {
            return true;
        }
        if(System::Type::op_Equality2(fromType, cli::typeof<System::Type>::info)) 
        {
            return true;
        }
        System::String *fromName = fromType->get_AssemblyQualifiedName_cea373c2171bd483();
        int32_t i = fromName->IndexOf4(u',');
        if((i != -1)) 
        {
            i = fromName->IndexOf5(u',', (i + 1));
        }
        if((i != -1)) 
        {
            fromName = fromName->Substring2(0, (i + 1));
        }
         else 
        {
            (fromName = cli::concat(fromName, _T(",")));
        }
        if(cli::concat(this->serverType, _T(","))->StartsWith(fromName)) 
        {
            return true;
        }
        if((this->serverHierarchy != nullptr)) 
        {
            for(auto tmp_349 : this->serverHierarchy) {
                auto basec = cli::cast<System::String*>(tmp_349);
                if(cli::concat(basec, _T(","))->StartsWith(fromName)) 
                {
                    return true;
                }
            }
        }
        if((this->interfacesImplemented != nullptr)) 
        {
            for(auto tmp_350 : this->interfacesImplemented) {
                auto basec = cli::cast<System::String*>(tmp_350);
                if(cli::concat(basec, _T(","))->StartsWith(fromName)) 
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    System::String* TypeInfo2::get_TypeName() {
        return this->serverType;
    }
    
    System::String* TypeInfo2::set_TypeName(System::String* value) {
        this->serverType = value;
        return get_TypeName();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void WellKnownClientTypeEntry::constructor(System::Type* type, System::String* objectUrl) {
        this->set_AssemblyName(type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
        this->set_TypeName(type->get_FullName_7e8fa72ba225e1a4());
        this->obj_type = type;
        this->obj_url = objectUrl;
    }
    
    void WellKnownClientTypeEntry::constructor(System::String* typeName, System::String* assemblyName, System::String* objectUrl) {
        this->obj_url = objectUrl;
        this->set_AssemblyName(assemblyName);
        this->set_TypeName(typeName);
        System::Reflection::Assembly *a = System::Reflection::Assembly::Load(assemblyName);
        this->obj_type = a->GetType_99cbfcc4e094eb08(typeName);
        if(System::Type::op_Equality2(this->obj_type, nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Type not found: "), typeName));
        }
    }
    
    System::String* WellKnownClientTypeEntry::ToString_1636a0751cb9ac11() {
        if((this->get_ApplicationUrl() != nullptr)) 
        {
            return cli::concat(this->get_TypeName(), this->get_AssemblyName());
        }
         else 
        {
            return cli::concat(this->get_TypeName(), this->get_AssemblyName());
        }
    }
    
    System::String* WellKnownClientTypeEntry::get_ApplicationUrl() {
        return this->app_url;
    }
    
    System::String* WellKnownClientTypeEntry::set_ApplicationUrl(System::String* value) {
        this->app_url = value;
        return get_ApplicationUrl();
    }
    
    System::Type* WellKnownClientTypeEntry::get_ObjectType() {
        return this->obj_type;
    }
    
    System::String* WellKnownClientTypeEntry::get_ObjectUrl() {
        return this->obj_url;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void WellKnownServiceTypeEntry::constructor(System::Type* type, System::String* objectUri, WellKnownObjectMode mode) {
        this->set_AssemblyName(type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
        this->set_TypeName(type->get_FullName_7e8fa72ba225e1a4());
        this->obj_type = type;
        this->obj_uri = objectUri;
        this->obj_mode = mode;
    }
    
    void WellKnownServiceTypeEntry::constructor(System::String* typeName, System::String* assemblyName, System::String* objectUri, WellKnownObjectMode mode) {
        this->set_AssemblyName(assemblyName);
        this->set_TypeName(typeName);
        System::Reflection::Assembly *a = System::Reflection::Assembly::Load(assemblyName);
        this->obj_type = a->GetType_99cbfcc4e094eb08(typeName);
        this->obj_uri = objectUri;
        this->obj_mode = mode;
        if(System::Type::op_Equality2(this->obj_type, nullptr)) 
        {
            throw cli::gcnew<RemotingException>(cli::concat(_T("Type not found: "), typeName));
        }
    }
    
    System::String* WellKnownServiceTypeEntry::ToString_1636a0751cb9ac11() {
        return cli::concat(this->get_TypeName(), _T(", "), this->get_AssemblyName(), _T(" "), this->get_ObjectUri());
    }
    
    cli::array<Contexts::IContextAttribute*>* WellKnownServiceTypeEntry::get_ContextAttributes() {
        return nullptr;
    }
    
    cli::array<Contexts::IContextAttribute*>* WellKnownServiceTypeEntry::set_ContextAttributes(cli::array<Contexts::IContextAttribute*>* value) {
        return get_ContextAttributes();
    }
    
    WellKnownObjectMode WellKnownServiceTypeEntry::get_Mode() {
        return this->obj_mode;
    }
    
    System::Type* WellKnownServiceTypeEntry::get_ObjectType() {
        return this->obj_type;
    }
    
    System::String* WellKnownServiceTypeEntry::get_ObjectUri() {
        return this->obj_uri;
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    IActivator*  ActivationServices::_constructionActivator;
    
    void ActivationServices::constructor() {
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ActivationServices::Activate(System::Runtime::Remoting::Proxies::RemotingProxy* proxy, System::Runtime::Remoting::Messaging::ConstructionCall* ctorCall) {
        System::Runtime::Remoting::Messaging::IMessage *response;
        ctorCall->set_SourceProxy(proxy);
        if((System::Threading::Thread::get_CurrentContext()->get_HasExitSinks() && !(ctorCall->get_IsContextOk()))) 
        {
            response = System::Threading::Thread::get_CurrentContext()->GetClientContextSinkChain()->SyncProcessMessage_d4949581639d4872(ctorCall);
        }
         else 
        {
            response = RemoteActivate(ctorCall);
        }
        if(((cli::is<IConstructionReturnMessage>(response) && (cli::cast<IConstructionReturnMessage*>(response)->get_Exception_f355b7f547514947() ==  nullptr)) && (proxy->get_ObjectIdentity() ==  nullptr))) 
        {
            System::Runtime::Remoting::Identity *identity = System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(ctorCall);
            proxy->AttachIdentity(identity);
        }
        return response;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ActivationServices::RemoteActivate(IConstructionCallMessage* ctorCall) {
        try {
            return ctorCall->get_Activator_e0d47498ed580034()->Activate_49ae602ff2f2ec37(ctorCall);
        }
        catch(System::Exception* ex) {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(ex, ctorCall);
        }
    }
    
    System::Object* ActivationServices::CreateProxyFromAttributes(System::Type* type, cli::array<System::Object*>* activationAttributes) {
        System::String *activationUrl = nullptr;
        for(auto tmp_351 : activationAttributes) {
            auto attr = cli::cast<System::Object*>(tmp_351);
            {
                if(!(cli::is<System::Runtime::Remoting::Contexts::IContextAttribute>(attr))) 
                {
                    throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("Activation attribute does not implement the IContextAttribute interface"));
                }
                if(cli::is<UrlAttribute>(attr)) 
                {
                    activationUrl = cli::cast<UrlAttribute*>(attr)->get_UrlValue();
                }
            }
        }
        if((activationUrl != nullptr)) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxy2(type, activationUrl, activationAttributes);
        }
        System::Runtime::Remoting::ActivatedClientTypeEntry *activatedEntry = System::Runtime::Remoting::RemotingConfiguration::IsRemotelyActivatedClientType(type);
        if((activatedEntry != nullptr)) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxy(activatedEntry, activationAttributes);
        }
        if(type->get_IsContextful()) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxyForContextBound(type, activationAttributes);
        }
        return nullptr;
    }
    
    System::Runtime::Remoting::Messaging::ConstructionCall* ActivationServices::CreateConstructionCall(System::Type* type, System::String* activationUrl, cli::array<System::Object*>* activationAttributes) {
        System::Runtime::Remoting::Messaging::ConstructionCall *ctorCall = cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionCall>(type);
        if(!(type->get_IsContextful())) 
        {
            ctorCall->set_Activator(cli::gcnew<AppDomainLevelActivator>(activationUrl, ActivationServices::get_ConstructionActivator()));
            ctorCall->set_IsContextOk(false);
            return ctorCall;
        }
        IActivator *activatorChain = get_ConstructionActivator();
        activatorChain = cli::gcnew<ContextLevelActivator>(activatorChain);
        System::Collections::ArrayList *attributes = cli::gcnew<System::Collections::ArrayList>();
        if((activationAttributes != nullptr)) 
        {
            attributes->AddRange_a8bb4db32a72ffe(activationAttributes);
        }
        bool isContextOk = System::String::op_Equality(activationUrl, System::Runtime::Remoting::Channels::ChannelServices::CrossContextUrl);
        System::Runtime::Remoting::Contexts::Context2 *currentContext = System::Threading::Thread::get_CurrentContext();
        if(isContextOk) 
        {
            for(auto tmp_352 : attributes) {
                auto attr = cli::cast<System::Runtime::Remoting::Contexts::IContextAttribute*>(tmp_352);
                {
                    if(!(attr->IsContextOK_c0cd4400710cc315(currentContext, ctorCall))) 
                    {
                        isContextOk = false;
                        break;
                    }
                }
            }
        }
        cli::array<System::Object*> *typeAttributes = type->GetCustomAttributes_b790992b66049291(true);
        for(auto tmp_353 : typeAttributes) {
            auto attr = cli::cast<System::Object*>(tmp_353);
            {
                if(cli::is<System::Runtime::Remoting::Contexts::IContextAttribute>(attr)) 
                {
                    isContextOk = (isContextOk && cli::cast<System::Runtime::Remoting::Contexts::IContextAttribute*>(attr)->IsContextOK_c0cd4400710cc315(currentContext, ctorCall));
                    attributes->Add_e6a92085999ce388(attr);
                }
            }
        }
        if(!(isContextOk)) 
        {
            ctorCall->SetActivationAttributes(attributes->ToArray_360bcd462eb48114());
            for(auto tmp_354 : attributes) {
                auto attr = cli::cast<System::Runtime::Remoting::Contexts::IContextAttribute*>(tmp_354);
                attr->GetPropertiesForNewContext_98ae344cb00933c3(ctorCall);
            }
        }
        if(System::String::op_Inequality(activationUrl, System::Runtime::Remoting::Channels::ChannelServices::CrossContextUrl)) 
        {
            activatorChain = cli::gcnew<AppDomainLevelActivator>(activationUrl, activatorChain);
        }
        ctorCall->set_Activator(activatorChain);
        ctorCall->set_IsContextOk(isContextOk);
        return ctorCall;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ActivationServices::CreateInstanceFromMessage(IConstructionCallMessage* ctorCall) {
        System::Object *obj = AllocateUninitializedClassInstance(ctorCall->get_ActivationType_84a662e1d53c6b9a());
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(ctorCall));
        identity->AttachServerObject(cli::cast<System::MarshalByRefObject*>(obj), System::Threading::Thread::get_CurrentContext());
        System::Runtime::Remoting::Messaging::ConstructionCall *call = cli::as<System::Runtime::Remoting::Messaging::ConstructionCall*>(ctorCall);
        if(((ctorCall->get_ActivationType_84a662e1d53c6b9a()->get_IsContextful() && (call != nullptr)) && (call->get_SourceProxy() != nullptr))) 
        {
            call->get_SourceProxy()->AttachIdentity(identity);
            System::MarshalByRefObject *target = cli::cast<System::MarshalByRefObject*>(call->get_SourceProxy()->GetTransparentProxy_efb39f7079c89638());
            System::Runtime::Remoting::RemotingServices::InternalExecuteMessage(target, ctorCall);
        }
         else 
        {
            ctorCall->get_MethodBase_be82dccd2d92b9f6()->Invoke2(obj, ctorCall->get_Args_1b1b87289e375adf());
        }
        return cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionResponse>(obj, nullptr, ctorCall);
    }
    
    System::Object* ActivationServices::CreateProxyForType(System::Type* type) {
        System::Runtime::Remoting::ActivatedClientTypeEntry *activatedEntry = System::Runtime::Remoting::RemotingConfiguration::IsRemotelyActivatedClientType(type);
        if((activatedEntry != nullptr)) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxy(activatedEntry, nullptr);
        }
        System::Runtime::Remoting::WellKnownClientTypeEntry *wellknownEntry = System::Runtime::Remoting::RemotingConfiguration::IsWellKnownClientType(type);
        if((wellknownEntry != nullptr)) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxy3(wellknownEntry);
        }
        if(type->get_IsContextful()) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxyForContextBound(type, nullptr);
        }
        if(type->get_IsCOMObject()) 
        {
            return System::Runtime::Remoting::RemotingServices::CreateClientProxyForComInterop(type);
        }
        return nullptr;
    }
    
    System::Object* ActivationServices::AllocateUninitializedClassInstance(System::Type* type) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ActivationServices::EnableProxyActivation(System::Type* type, bool enable) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    IActivator* ActivationServices::get_ConstructionActivator() {
        if((_constructionActivator ==  nullptr)) 
        {
            _constructionActivator = cli::gcnew<ConstructionLevelActivator>();
        }
        return _constructionActivator;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void AppDomainLevelActivator::constructor(System::String* activationUrl, IActivator* next) {
        this->_activationUrl = activationUrl;
        this->_next = next;
    }
    
    IConstructionReturnMessage* AppDomainLevelActivator::Activate(IConstructionCallMessage* ctorCall) {
        IConstructionReturnMessage *response;
        IActivator *remoteActivator = cli::cast<IActivator*>(System::Runtime::Remoting::RemotingServices::Connect(cli::typeof<System::Type>::info, this->_activationUrl));
        ctorCall->set_Activator_f69a6bba41c9ebf3(ctorCall->get_Activator_e0d47498ed580034()->get_NextActivator_d6b0fab3e3c1398b());
        try {
            response = remoteActivator->Activate_49ae602ff2f2ec37(ctorCall);
        }
        catch(System::Exception* ex) {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionResponse>(ex, ctorCall);
        }
        System::Runtime::Remoting::ObjRef *objRef = cli::cast<System::Runtime::Remoting::ObjRef*>(response->get_ReturnValue_5e8804a33ce4fa71());
        if((System::Runtime::Remoting::RemotingServices::GetIdentityForUri(objRef->get_URI_8a7d9b91992639ed()) != nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("Inconsistent state during activation; there may be two proxies for the same object"));
        }
        System::Object *proxy;
        System::Runtime::Remoting::Identity *identity = System::Runtime::Remoting::RemotingServices::GetOrCreateClientIdentity(objRef, nullptr, proxy);
        System::Runtime::Remoting::RemotingServices::SetMessageTargetIdentity(ctorCall, identity);
        return response;
    }
    
    ActivatorLevel AppDomainLevelActivator::get_Level() {
        return ActivatorLevel::AppDomain2;
    }
    
    IActivator* AppDomainLevelActivator::get_NextActivator() {
        return this->_next;
    }
    
    IActivator* AppDomainLevelActivator::set_NextActivator(IActivator* value) {
        this->_next = value;
        return get_NextActivator();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void ConstructionLevelActivator::constructor() {
    }
    
    IConstructionReturnMessage* ConstructionLevelActivator::Activate(IConstructionCallMessage* msg) {
        return cli::cast<IConstructionReturnMessage*>(System::Threading::Thread::get_CurrentContext()->GetServerContextSinkChain()->SyncProcessMessage_d4949581639d4872(msg));
    }
    
    ActivatorLevel ConstructionLevelActivator::get_Level() {
        return ActivatorLevel::Construction;
    }
    
    IActivator* ConstructionLevelActivator::get_NextActivator() {
        return nullptr;
    }
    
    IActivator* ConstructionLevelActivator::set_NextActivator(IActivator* value) {;
        return get_NextActivator();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void ContextLevelActivator::constructor(IActivator* next) {
        this->m_NextActivator = next;
    }
    
    IConstructionReturnMessage* ContextLevelActivator::Activate(IConstructionCallMessage* ctorCall) {
        System::Runtime::Remoting::ServerIdentity *identity = System::Runtime::Remoting::RemotingServices::CreateContextBoundObjectIdentity(ctorCall->get_ActivationType_84a662e1d53c6b9a());
        System::Runtime::Remoting::RemotingServices::SetMessageTargetIdentity(ctorCall, identity);
        System::Runtime::Remoting::Messaging::ConstructionCall *call = cli::as<System::Runtime::Remoting::Messaging::ConstructionCall*>(ctorCall);
        if(((call ==  nullptr) || !(call->get_IsContextOk()))) 
        {
            identity->set_Context(System::Runtime::Remoting::Contexts::Context2::CreateNewContext(ctorCall));
            System::Runtime::Remoting::Contexts::Context2 *oldContext = System::Runtime::Remoting::Contexts::Context2::SwitchToContext(identity->get_Context());
            {
                cli::finally_guard([&]() {
                    System::Runtime::Remoting::Contexts::Context2::SwitchToContext(oldContext);
                });
                return this->m_NextActivator->Activate_49ae602ff2f2ec37(ctorCall);
            }
        }
         else 
        {
            return this->m_NextActivator->Activate_49ae602ff2f2ec37(ctorCall);
        }
    }
    
    ActivatorLevel ContextLevelActivator::get_Level() {
        return ActivatorLevel::Context3;
    }
    
    IActivator* ContextLevelActivator::get_NextActivator() {
        return this->m_NextActivator;
    }
    
    IActivator* ContextLevelActivator::set_NextActivator(IActivator* value) {
        this->m_NextActivator = value;
        return get_NextActivator();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void RemoteActivationAttribute::constructor() {
    }
    
    void RemoteActivationAttribute::constructor(System::Collections::IList* contextProperties) {
        this->_contextProperties = contextProperties;
    }
    
    bool RemoteActivationAttribute::IsContextOK(System::Runtime::Remoting::Contexts::Context2* ctx, IConstructionCallMessage* ctor) {
        return false;
    }
    
    void RemoteActivationAttribute::GetPropertiesForNewContext(IConstructionCallMessage* ctor) {
        if((this->_contextProperties != nullptr)) 
        {
            for(auto tmp_355 : this->_contextProperties) {
                auto prop = cli::cast<System::Object*>(tmp_355);
                ctor->get_ContextProperties_6d65d78ae4ed4d3()->Add_985508e3bf9b7a73(prop);
            }
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void RemoteActivator::constructor() {
    }
    
    IConstructionReturnMessage* RemoteActivator::Activate(IConstructionCallMessage* msg) {
        if(!(System::Runtime::Remoting::RemotingConfiguration::IsActivationAllowed(msg->get_ActivationType_84a662e1d53c6b9a()))) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("The type "), msg->get_ActivationTypeName_1af5753a691619eb()));
        }
        cli::array<System::Object*> *activationAttributes = (new cli::array<System::Object*>({cli::gcnew<RemoteActivationAttribute>(msg->get_ContextProperties_6d65d78ae4ed4d3())}));
        System::MarshalByRefObject *newObject = cli::cast<System::MarshalByRefObject*>(System::Activator::CreateInstance10(msg->get_ActivationType_84a662e1d53c6b9a(), msg->get_Args_1b1b87289e375adf(), activationAttributes));
        System::Runtime::Remoting::ObjRef *objref = System::Runtime::Remoting::RemotingServices::Marshal2(newObject);
        return cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionResponse>(objref, nullptr, msg);
    }
    
    System::Object* RemoteActivator::InitializeLifetimeService_8f02e9c96ffbe30f() {
        System::Runtime::Remoting::Lifetime::ILease *lease = cli::cast<System::Runtime::Remoting::Lifetime::ILease*>(System::MarshalByRefObject::InitializeLifetimeService_8f02e9c96ffbe30f());
        if(((int32_t)(lease->get_CurrentState_c1fd61e427ff7162()) ==  1)) 
        {
            lease->set_InitialLeaseTime_ba2e7f8774a51a3f(System::TimeSpan::FromMinutes(30.));
            lease->set_SponsorshipTimeout_43c4b2fd11e77e17(System::TimeSpan::FromMinutes(1.));
            lease->set_RenewOnCallTime_ed741ebcdf794d2f(System::TimeSpan::FromMinutes(10.));
        }
        return lease;
    }
    
    ActivatorLevel RemoteActivator::get_Level() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    IActivator* RemoteActivator::get_NextActivator() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    IActivator* RemoteActivator::set_NextActivator(IActivator* value) {
        throw cli::gcnew<System::NotSupportedException>();
        return get_NextActivator();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Activation {
    
    
    void UrlAttribute::constructor(System::String* callsiteURL) {
        this->url = callsiteURL;
    }
    
    bool UrlAttribute::Equals_ed975d2f4a7d193e(System::Object* o) {
        if(!(cli::is<UrlAttribute>(o))) 
        {
            return false;
        }
        return System::String::op_Equality(cli::cast<UrlAttribute*>(o)->get_UrlValue(), this->url);
    }
    
    int32_t UrlAttribute::GetHashCode_6648aef0f235ee6c() {
        return this->url->GetHashCode_6648aef0f235ee6c();
    }
    
    void UrlAttribute::GetPropertiesForNewContext_f6e9f6568c456816(IConstructionCallMessage* ctorMsg) {
    }
    
    bool UrlAttribute::IsContextOK_7837aaab12d993b6(System::Runtime::Remoting::Contexts::Context2* ctx, IConstructionCallMessage* msg) {
        return true;
    }
    
    System::String* UrlAttribute::get_UrlValue() {
        return this->url;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void AggregateDictionary::constructor(cli::array<System::Collections::IDictionary*>* dics) {
        this->dictionaries = dics;
    }
    
    void AggregateDictionary::Add(System::Object* key, System::Object* value) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void AggregateDictionary::Clear() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool AggregateDictionary::Contains(System::Object* ob) {
        for(auto tmp_356 : this->dictionaries) {
            auto dic = cli::cast<System::Collections::IDictionary*>(tmp_356);
            if(dic->Contains_32eba6643fe7ee4b(ob)) 
            {
                return true;
            }
        }
        return false;
    }
    
    System::Collections::IDictionaryEnumerator* AggregateDictionary::GetEnumerator() {
        return cli::gcnew<AggregateEnumerator>(this->dictionaries);
    }
    
    System::Collections::IEnumerator* AggregateDictionary::GetEnumerator2() {
        return cli::gcnew<AggregateEnumerator>(this->dictionaries);
    }
    
    void AggregateDictionary::Remove(System::Object* ob) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void AggregateDictionary::CopyTo(System::Array* array, int32_t index) {
        for(auto tmp_357 : this) {
            auto ob = cli::cast<System::Object*>(tmp_357);
            array->SetValue5(ob, index++);
        }
    }
    
    bool AggregateDictionary::get_IsFixedSize() {
        return true;
    }
    
    bool AggregateDictionary::get_IsReadOnly() {
        return true;
    }
    
    System::Object* AggregateDictionary::get_Item(System::Object* key) {
        for(auto tmp_358 : this->dictionaries) {
            auto dic = cli::cast<System::Collections::IDictionary*>(tmp_358);
            if(dic->Contains_32eba6643fe7ee4b(key)) 
            {
                return dic->get_Item_95688dd349c069c0(key);
            }
        }
        return nullptr;
    }
    
    System::Object* AggregateDictionary::set_Item(System::Object* key, System::Object* value) {
        throw cli::gcnew<System::NotSupportedException>();
        return get_Item(key);
    }
    
    System::Collections::ICollection* AggregateDictionary::get_Keys() {
        if((this->_keys != nullptr)) 
        {
            return this->_keys;
        }
        this->_keys = cli::gcnew<System::Collections::ArrayList>();
        for(auto tmp_359 : this->dictionaries) {
            auto dic = cli::cast<System::Collections::IDictionary*>(tmp_359);
            this->_keys->AddRange_a8bb4db32a72ffe(dic->get_Keys_d809cadac60b140a());
        }
        return this->_keys;
    }
    
    System::Collections::ICollection* AggregateDictionary::get_Values() {
        if((this->_values != nullptr)) 
        {
            return this->_values;
        }
        this->_values = cli::gcnew<System::Collections::ArrayList>();
        for(auto tmp_360 : this->dictionaries) {
            auto dic = cli::cast<System::Collections::IDictionary*>(tmp_360);
            this->_values->AddRange_a8bb4db32a72ffe(dic->get_Values_ef6ae5cda2bdcf40());
        }
        return this->_values;
    }
    
    int32_t AggregateDictionary::get_Count() {
        int32_t c = 0;
        for(auto tmp_361 : this->dictionaries) {
            auto dic = cli::cast<System::Collections::IDictionary*>(tmp_361);
            (c = c + dic->get_Count_8f254f3dd8e2403());
        }
        return c;
    }
    
    bool AggregateDictionary::get_IsSynchronized() {
        return false;
    }
    
    System::Object* AggregateDictionary::get_SyncRoot() {
        return this;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void AggregateEnumerator::constructor(cli::array<System::Collections::IDictionary*>* dics) {
        this->dictionaries = dics;
        Reset();
    }
    
    bool AggregateEnumerator::MoveNext() {
        if((this->pos >= this->dictionaries->get_Length())) 
        {
            return false;
        }
        if(!(this->currente->MoveNext_4e78e145935f5417())) 
        {
            this->pos++;
            if((this->pos >= this->dictionaries->get_Length())) 
            {
                return false;
            }
            this->currente = this->dictionaries->at(this->pos)->GetEnumerator_40657fcb15842551();
            return MoveNext();
        }
        return true;
    }
    
    void AggregateEnumerator::Reset() {
        this->pos = 0;
        if((this->dictionaries->get_Length() > 0)) 
        {
            this->currente = this->dictionaries->at(0)->GetEnumerator_40657fcb15842551();
        }
    }
    
    System::Collections::DictionaryEntry AggregateEnumerator::get_Entry() {
        return this->currente->get_Entry_7d036eca1ef8d5f4();
    }
    
    System::Object* AggregateEnumerator::get_Key() {
        return this->currente->get_Key_ed7954531cb20258();
    }
    
    System::Object* AggregateEnumerator::get_Value() {
        return this->currente->get_Value_889e0f410f0d67ef();
    }
    
    System::Object* AggregateEnumerator::get_Current() {
        return this->currente->get_Current_8eca9b3da02b123a();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void BaseChannelObjectWithProperties::constructor() {
        this->table = cli::gcnew<System::Collections::Hashtable>();
    }
    
    void BaseChannelObjectWithProperties::Add_2e0cc46b6f5b39af(System::Object* key, System::Object* value) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void BaseChannelObjectWithProperties::Clear_8ffd4fa1ec43d480() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    bool BaseChannelObjectWithProperties::Contains_71330cff12df5547(System::Object* key) {
        return this->table->Contains_be7d0f2741618cb4(key);
    }
    
    void BaseChannelObjectWithProperties::CopyTo_7fd02345ed41791b(System::Array* array, int32_t index) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Collections::IDictionaryEnumerator* BaseChannelObjectWithProperties::GetEnumerator_c7500511247ec59() {
        return this->table->GetEnumerator_47df71de9b680069();
    }
    
    System::Collections::IEnumerator* BaseChannelObjectWithProperties::GetEnumerator2() {
        return this->table->GetEnumerator_47df71de9b680069();
    }
    
    void BaseChannelObjectWithProperties::Remove_b53f91745646ed6a(System::Object* key) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    int32_t BaseChannelObjectWithProperties::get_Count_71041d0495b6ff46() {
        return this->table->get_Count_40aff81471a60b4c();
    }
    
    bool BaseChannelObjectWithProperties::get_IsFixedSize_6395df2c82d6b9f7() {
        return true;
    }
    
    bool BaseChannelObjectWithProperties::get_IsReadOnly_ebb68688cdc55cb2() {
        return false;
    }
    
    bool BaseChannelObjectWithProperties::get_IsSynchronized_c68490f579af4c3() {
        return false;
    }
    
    System::Object* BaseChannelObjectWithProperties::get_Item_593a2a34dd2c3a91(System::Object* key) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* BaseChannelObjectWithProperties::set_Item_e97df2a7db730e1a(System::Object* key, System::Object* value) {
        throw cli::gcnew<System::NotImplementedException>();
        return get_Item_593a2a34dd2c3a91(key);
    }
    
    System::Collections::ICollection* BaseChannelObjectWithProperties::get_Keys_9678cd4a10400c88() {
        return this->table->get_Keys_8171dfd94447fa93();
    }
    
    System::Collections::IDictionary* BaseChannelObjectWithProperties::get_Properties_ebd08d2ecde34832() {
        return cli::cast<System::Collections::IDictionary*>(this);
    }
    
    System::Object* BaseChannelObjectWithProperties::get_SyncRoot_d3ef26010f2a22ec() {
        return this;
    }
    
    System::Collections::ICollection* BaseChannelObjectWithProperties::get_Values_cb1640740b4b52b2() {
        return this->table->get_Values_4ed88b5f6e59ef25();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void BaseChannelSinkWithProperties::constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void BaseChannelWithProperties::constructor() {
    }
    
    System::Collections::IDictionary* BaseChannelWithProperties::get_Properties_ebd08d2ecde34832() {
        if(((this->SinksWithProperties ==  nullptr) || (this->SinksWithProperties->get_Properties_381d7d7a86286003() ==  nullptr))) 
        {
            return BaseChannelObjectWithProperties::get_Properties_ebd08d2ecde34832();
        }
         else 
        {
            cli::array<System::Collections::IDictionary*> *dics = (new cli::array<System::Collections::IDictionary*>({BaseChannelObjectWithProperties::get_Properties_ebd08d2ecde34832(), this->SinksWithProperties->get_Properties_381d7d7a86286003()}));
            return cli::gcnew<AggregateDictionary>(dics);
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ChannelDataStore::constructor(cli::array<System::String*>* channelURIs) {
        this->_channelURIs = channelURIs;
    }
    
    cli::array<System::String*>* ChannelDataStore::get_ChannelUris() {
        return this->_channelURIs;
    }
    
    cli::array<System::String*>* ChannelDataStore::set_ChannelUris(cli::array<System::String*>* value) {
        this->_channelURIs = value;
        return get_ChannelUris();
    }
    
    System::Object* ChannelDataStore::get_Item(System::Object* key) {
        if((this->_extraData ==  nullptr)) 
        {
            return nullptr;
        }
        for(auto tmp_362 : this->_extraData) {
            auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_362);
            if(entry->get_Key()->Equals_ed975d2f4a7d193e(key)) 
            {
                return entry->get_Value();
            }
        }
        return nullptr;
    }
    
    System::Object* ChannelDataStore::set_Item(System::Object* key, System::Object* value) {
        if((this->_extraData ==  nullptr)) 
        {
            this->_extraData = (new cli::array<System::Collections::DictionaryEntry>({cli::ctor<System::Collections::DictionaryEntry>(key, value)}));
        }
         else 
        {
            cli::array<System::Collections::DictionaryEntry> *tmpData = (new cli::array<System::Collections::DictionaryEntry>((this->_extraData->get_Length() + 1)));
            cli::import(this->_extraData)->CopyTo(tmpData, 0);
            tmpData->at(this->_extraData->get_Length()) = cli::ctor<System::Collections::DictionaryEntry>(key, value);
            this->_extraData = tmpData;
        }
        return get_Item(key);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting {
    
    
    void ChannelInfo::constructor() {
        this->channelData = Channels::ChannelServices::GetCurrentChannelInfo();
    }
    
    void ChannelInfo::constructor(System::Object* remoteChannelData) {
        this->channelData = (new cli::array<System::Object*>({remoteChannelData}));
    }
    
    cli::array<System::Object*>* ChannelInfo::get_ChannelData() {
        return this->channelData;
    }
    
    cli::array<System::Object*>* ChannelInfo::set_ChannelData(cli::array<System::Object*>* value) {
        this->channelData = value;
        return get_ChannelData();
    }
    
}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    System::Collections::ArrayList*  ChannelServices::registeredChannels;
    System::Collections::ArrayList*  ChannelServices::delayedClientChannels;
    System::Runtime::Remoting::Contexts::CrossContextChannel*  ChannelServices::_crossContextSink;
    System::String*  ChannelServices::CrossContextUrl;
    System::Collections::IList*  ChannelServices::oldStartModeTypes;
    
    ChannelServices::ChannelServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ChannelServices::constructor() {
    }
    
    void ChannelServices::static_constructor() {
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* ChannelServices::CreateClientChannelSinkChain(System::String* url, System::Object* remoteChannelData, System::String* objectUri) {
        cli::array<System::Object*> *channelDataArray = cli::cast<cli::array<System::Object*>*>(remoteChannelData);
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            for(auto tmp_363 : registeredChannels) {
                auto c = cli::cast<IChannel*>(tmp_363);
                {
                    IChannelSender *sender = cli::as<IChannelSender*>(c);
                    if((sender ==  nullptr)) 
                    {
                        continue;
                    }
                    System::Runtime::Remoting::Messaging::IMessageSink *sink = CreateClientChannelSinkChain2(sender, url, channelDataArray, objectUri);
                    if((sink != nullptr)) 
                    {
                        return sink;
                    }
                }
            }
            System::Runtime::Remoting::RemotingConfiguration::LoadDefaultDelayedChannels();
            for(auto tmp_364 : delayedClientChannels) {
                auto sender = cli::cast<IChannelSender*>(tmp_364);
                {
                    System::Runtime::Remoting::Messaging::IMessageSink *sink = CreateClientChannelSinkChain2(sender, url, channelDataArray, objectUri);
                    if((sink != nullptr)) 
                    {
                        delayedClientChannels->Remove_2225381aaf812c6d(sender);
                        RegisterChannel(sender);
                        return sink;
                    }
                }
            }
        }
        objectUri = nullptr;
        return nullptr;
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* ChannelServices::CreateClientChannelSinkChain2(IChannelSender* sender, System::String* url, cli::array<System::Object*>* channelDataArray, System::String* objectUri) {
        objectUri = nullptr;
        if((channelDataArray ==  nullptr)) 
        {
            return sender->CreateMessageSink_66e723ef8344d1c9(url, nullptr, objectUri);
        }
         else 
        {
            for(auto tmp_365 : channelDataArray) {
                auto data = cli::cast<System::Object*>(tmp_365);
                {
                    System::Runtime::Remoting::Messaging::IMessageSink *sink;
                    if(cli::is<IChannelDataStore>(data)) 
                    {
                        sink = sender->CreateMessageSink_66e723ef8344d1c9(nullptr, data, objectUri);
                    }
                     else 
                    {
                        sink = sender->CreateMessageSink_66e723ef8344d1c9(url, data, objectUri);
                    }
                    if((sink != nullptr)) 
                    {
                        return sink;
                    }
                }
            }
        }
        return nullptr;
    }
    
    IServerChannelSink* ChannelServices::CreateServerChannelSinkChain(IServerChannelSinkProvider* provider, IChannelReceiver* channel) {
        IServerChannelSinkProvider *tmp = provider;
        while((tmp->get_Next_c6272a298f936a9f() != nullptr)) tmp = tmp->get_Next_c6272a298f936a9f();
        tmp->set_Next_3f72cebde871a137(cli::gcnew<ServerDispatchSinkProvider>());
        return provider->CreateSink_393aa9e6f3a19f60(channel);
    }
    
    ServerProcessing ChannelServices::DispatchMessage(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessage* replyMsg) {
        if((msg ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("msg"));
        }
        replyMsg = SyncDispatchMessage(msg);
        if(System::Runtime::Remoting::RemotingServices::IsOneWay(cli::cast<System::Runtime::Remoting::Messaging::IMethodMessage*>(msg)->get_MethodBase_be82dccd2d92b9f6())) 
        {
            return ServerProcessing::OneWay;
        }
         else 
        {
            return ServerProcessing::Complete;
        }
    }
    
    IChannel* ChannelServices::GetChannel(System::String* name) {
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            for(auto tmp_366 : registeredChannels) {
                auto chnl = cli::cast<IChannel*>(tmp_366);
                {
                    if((System::String::op_Equality(chnl->get_ChannelName_92306725eef18163(), name) && !(cli::is<CrossAppDomainChannel>(chnl)))) 
                    {
                        return chnl;
                    }
                }
            }
            return nullptr;
        }
    }
    
    System::Collections::IDictionary* ChannelServices::GetChannelSinkProperties(System::Object* obj) {
        if(!(System::Runtime::Remoting::RemotingServices::IsTransparentProxy(obj))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("obj must be a proxy"), _T("obj"));
        }
        System::Runtime::Remoting::ClientIdentity *ident = cli::cast<System::Runtime::Remoting::ClientIdentity*>(System::Runtime::Remoting::RemotingServices::GetRealProxy(obj)->get_ObjectIdentity());
        System::Runtime::Remoting::Messaging::IMessageSink *sink = ident->get_ChannelSink();
        System::Collections::Generic::List<System::Collections::IDictionary*> *dics = cli::gcnew<System::Collections::Generic::List<System::Collections::IDictionary*>>();
        while(((sink != nullptr) && !(cli::is<IClientChannelSink>(sink)))) sink = sink->get_NextSink_e70f5bac1f0d1245();
        if((sink ==  nullptr)) 
        {
            return cli::gcnew<System::Collections::Hashtable>();
        }
        IClientChannelSink *csink = cli::as<IClientChannelSink*>(sink);
        while((csink != nullptr)) {
            dics->Add(csink->get_Properties_381d7d7a86286003());
            csink = csink->get_NextChannelSink_3b6322d3e7c21bfc();
        }
        cli::array<System::Collections::IDictionary*> *adics = dics->ToArray();
        return cli::gcnew<AggregateDictionary>(adics);
    }
    
    cli::array<System::String*>* ChannelServices::GetUrlsForObject(System::MarshalByRefObject* obj) {
        System::String *uri = System::Runtime::Remoting::RemotingServices::GetObjectUri(obj);
        if((uri ==  nullptr)) 
        {
            return (new cli::array<System::String*>(0));
        }
        System::Collections::Generic::List<System::String*> *list = cli::gcnew<System::Collections::Generic::List<System::String*>>();
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            for(auto tmp_367 : registeredChannels) {
                auto chnl_obj = cli::cast<System::Object*>(tmp_367);
                {
                    if(cli::is<CrossAppDomainChannel>(chnl_obj)) 
                    {
                        continue;
                    }
                    IChannelReceiver *chnl = cli::as<IChannelReceiver*>(chnl_obj);
                    if((chnl != nullptr)) 
                    {
                        list->AddRange(chnl->GetUrlsForUri_3e77808f3d9020c7(uri));
                    }
                }
            }
        }
        return list->ToArray();
    }
    
    void ChannelServices::RegisterChannel(IChannel* chnl) {
        RegisterChannel2(chnl, false);
    }
    
    void ChannelServices::RegisterChannel2(IChannel* chnl, bool ensureSecurity) {
        if((chnl ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("chnl"));
        }
        if(ensureSecurity) 
        {
            ISecurableChannel *securable = cli::as<ISecurableChannel*>(chnl);
            if((securable ==  nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(System::String::Format2(_T("Channel {0} is not securable while ensureSecurity is specified as true"), chnl->get_ChannelName_92306725eef18163()));
            }
            securable->set_IsSecured_2a8cd0b59c55bca9(true);
        }
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            int32_t pos = -1;
            for(int32_t n = 0; (n < registeredChannels->get_Count_2354963792616712()); n++){
                IChannel *regc = cli::cast<IChannel*>(registeredChannels->get_Item_fd0155f142ae570(n));
                if((System::String::op_Equality(regc->get_ChannelName_92306725eef18163(), chnl->get_ChannelName_92306725eef18163()) && System::String::op_Inequality(chnl->get_ChannelName_92306725eef18163(), _T("")))) 
                {
                    throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Channel "), regc->get_ChannelName_92306725eef18163()));
                }
                if(((regc->get_ChannelPriority_b96d903fee110f5d() < chnl->get_ChannelPriority_b96d903fee110f5d()) && (pos ==  -1))) 
                {
                    pos = n;
                }
            }
            if((pos != -1)) 
            {
                registeredChannels->Insert_59557a2615bf3b8e(pos, chnl);
            }
             else 
            {
                registeredChannels->Add_e6a92085999ce388(chnl);
            }
            IChannelReceiver *receiver = cli::as<IChannelReceiver*>(chnl);
            if(((receiver != nullptr) && oldStartModeTypes->Contains_2a2192a595869f4e(chnl->GetType()->ToString_1636a0751cb9ac11()))) 
            {
                receiver->StartListening_a568e860f5c12098(nullptr);
            }
        }
    }
    
    void ChannelServices::RegisterChannelConfig(System::Runtime::Remoting::ChannelData* channel) {
        IServerChannelSinkProvider *serverSinks = nullptr;
        IClientChannelSinkProvider *clientSinks = nullptr;
        for(int32_t n = (channel->get_ServerProviders()->get_Count_2354963792616712() - 1); (n >= 0); n--){
            System::Runtime::Remoting::ProviderData *prov = cli::as<System::Runtime::Remoting::ProviderData*>(channel->get_ServerProviders()->get_Item_fd0155f142ae570(n));
            IServerChannelSinkProvider *sinkp = cli::cast<IServerChannelSinkProvider*>(CreateProvider(prov));
            sinkp->set_Next_3f72cebde871a137(serverSinks);
            serverSinks = sinkp;
        }
        for(int32_t n = (channel->get_ClientProviders()->get_Count_2354963792616712() - 1); (n >= 0); n--){
            System::Runtime::Remoting::ProviderData *prov = cli::as<System::Runtime::Remoting::ProviderData*>(channel->get_ClientProviders()->get_Item_fd0155f142ae570(n));
            IClientChannelSinkProvider *sinkp = cli::cast<IClientChannelSinkProvider*>(CreateProvider(prov));
            sinkp->set_Next_678373dad0fd69cd(clientSinks);
            clientSinks = sinkp;
        }
        System::Type *type = System::Type::GetType4(channel->Type2);
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Type \'"), channel->Type2));
        }
        cli::array<System::Object*> *parms;
        cli::array<System::Type*> *signature;
        bool clienc = cli::typeof<System::Type>::info->IsAssignableFrom_e3aa32d778e63a90(type);
        bool serverc = cli::typeof<System::Type>::info->IsAssignableFrom_e3aa32d778e63a90(type);
        if((clienc && serverc)) 
        {
            signature = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
            parms = (new cli::array<System::Object*>({channel->get_CustomProperties(), clientSinks, serverSinks}));
        }
         else 
        {
            if(clienc) 
            {
                signature = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
                parms = (new cli::array<System::Object*>({channel->get_CustomProperties(), clientSinks}));
            }
             else 
            {
                if(serverc) 
                {
                    signature = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
                    parms = (new cli::array<System::Object*>({channel->get_CustomProperties(), serverSinks}));
                }
                 else 
                {
                    throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(type, _T(" is not a valid channel type")));
                }
            }
        }
        System::Reflection::ConstructorInfo *ctor = type->GetConstructor2(signature);
        if(System::Reflection::ConstructorInfo::op_Equality(ctor, nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(type, _T(" does not have a valid constructor")));
        }
        IChannel *ch;
        try {
            ch = cli::cast<IChannel*>(ctor->Invoke(parms));
        }
        catch(System::Reflection::TargetInvocationException* ex) {
            throw ex->get_InnerException();
        }
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            if((System::String::op_Equality(channel->DelayLoadAsClientChannel, _T("true")) && !(cli::is<IChannelReceiver>(ch)))) 
            {
                delayedClientChannels->Add_e6a92085999ce388(ch);
            }
             else 
            {
                RegisterChannel(ch);
            }
        }
    }
    
    System::Object* ChannelServices::CreateProvider(System::Runtime::Remoting::ProviderData* prov) {
        System::Type *pvtype = System::Type::GetType4(prov->Type2);
        if(System::Type::op_Equality2(pvtype, nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Type \'"), prov->Type2));
        }
        cli::array<System::Object*> *pvparms = (new cli::array<System::Object*>({prov->CustomProperties, prov->CustomData}));
        try {
            return System::Activator::CreateInstance9(pvtype, pvparms);
        }
        catch(System::Exception* ex) {
            if(cli::is<System::Reflection::TargetInvocationException>(ex)) 
            {
                ex = cli::cast<System::Reflection::TargetInvocationException*>(ex)->get_InnerException();
            }
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("An instance of provider \'"), pvtype, _T("\' could not be created: "), ex->get_Message_d211df4045b57cbf()));
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ChannelServices::SyncDispatchMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        System::Runtime::Remoting::Messaging::IMessage *ret = CheckIncomingMessage(msg);
        if((ret != nullptr)) 
        {
            return CheckReturnMessage(msg, ret);
        }
        ret = _crossContextSink->SyncProcessMessage(msg);
        return CheckReturnMessage(msg, ret);
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* ChannelServices::AsyncDispatchMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        System::Runtime::Remoting::Messaging::IMessage *ret = CheckIncomingMessage(msg);
        if((ret != nullptr)) 
        {
            replySink->SyncProcessMessage_d4949581639d4872(CheckReturnMessage(msg, ret));
            return nullptr;
        }
        if(System::Runtime::Remoting::RemotingConfiguration::CustomErrorsEnabled(IsLocalCall(msg))) 
        {
            replySink = cli::gcnew<ExceptionFilterSink>(msg, replySink);
        }
        return _crossContextSink->AsyncProcessMessage(msg, replySink);
    }
    
    System::Runtime::Remoting::Messaging::ReturnMessage* ChannelServices::CheckIncomingMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        System::Runtime::Remoting::Messaging::IMethodMessage *call = cli::cast<System::Runtime::Remoting::Messaging::IMethodMessage*>(msg);
        System::Runtime::Remoting::ServerIdentity *identity = cli::as<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetIdentityForUri(call->get_Uri_a772cc17d83f8740()));
        if((identity ==  nullptr)) 
        {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("No receiver for uri "), call->get_Uri_a772cc17d83f8740())), cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msg));
        }
        System::Runtime::Remoting::RemotingServices::SetMessageTargetIdentity(msg, identity);
        return nullptr;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ChannelServices::CheckReturnMessage(System::Runtime::Remoting::Messaging::IMessage* callMsg, System::Runtime::Remoting::Messaging::IMessage* retMsg) {
        System::Runtime::Remoting::Messaging::IMethodReturnMessage *ret = cli::as<System::Runtime::Remoting::Messaging::IMethodReturnMessage*>(retMsg);
        if(((ret != nullptr) && (ret->get_Exception_f355b7f547514947() != nullptr))) 
        {
            if(System::Runtime::Remoting::RemotingConfiguration::CustomErrorsEnabled(IsLocalCall(callMsg))) 
            {
                System::Exception *ex = cli::gcnew<System::Exception>(_T("Server encountered an internal error. For more information, turn off customErrors in the server\'s .config file."));
                retMsg = cli::gcnew<System::Runtime::Remoting::Messaging::MethodResponse>(ex, cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(callMsg));
            }
        }
        return retMsg;
    }
    
    bool ChannelServices::IsLocalCall(System::Runtime::Remoting::Messaging::IMessage* callMsg) {
        return true;
    }
    
    void ChannelServices::UnregisterChannel(IChannel* chnl) {
        if((chnl ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>();
        }
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            for(int32_t n = 0; (n < registeredChannels->get_Count_2354963792616712()); n++){
                if((registeredChannels->get_Item_fd0155f142ae570(n) ==  cli::cast<System::Object*>(chnl))) 
                {
                    registeredChannels->RemoveAt_2abea768d3273318(n);
                    IChannelReceiver *chnlReceiver = cli::as<IChannelReceiver*>(chnl);
                    if((chnlReceiver != nullptr)) 
                    {
                        chnlReceiver->StopListening_77f3993d6f40946f(nullptr);
                    }
                    return;
                }
            }
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("Channel not registered"));
        }
    }
    
    cli::array<System::Object*>* ChannelServices::GetCurrentChannelInfo() {
        System::Collections::Generic::List<System::Object*> *list = cli::gcnew<System::Collections::Generic::List<System::Object*>>();
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            for(auto tmp_368 : registeredChannels) {
                auto chnl_obj = cli::cast<System::Object*>(tmp_368);
                {
                    IChannelReceiver *chnl = cli::as<IChannelReceiver*>(chnl_obj);
                    if((chnl != nullptr)) 
                    {
                        System::Object *chnl_data = chnl->get_ChannelData_bd2f3a6812b5fc88();
                        if((chnl_data != nullptr)) 
                        {
                            list->Add(chnl_data);
                        }
                    }
                }
            }
        }
        return list->ToArray();
    }
    
    System::Runtime::Remoting::Contexts::CrossContextChannel* ChannelServices::get_CrossContextChannel() {
        return _crossContextSink;
    }
    
    cli::array<IChannel*>* ChannelServices::get_RegisteredChannels() {
        {
            cli::lock_guard{registeredChannels->get_SyncRoot_edb1ba826807b569()};
            System::Collections::Generic::List<IChannel*> *list = cli::gcnew<System::Collections::Generic::List<IChannel*>>();
            for(int32_t i = 0; (i < registeredChannels->get_Count_2354963792616712()); i++){
                IChannel *ch = cli::cast<IChannel*>(registeredChannels->get_Item_fd0155f142ae570(i));
                if(cli::is<CrossAppDomainChannel>(ch)) 
                {
                    continue;
                }
                list->Add(ch);
            }
            return list->ToArray();
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ExceptionFilterSink::constructor(System::Runtime::Remoting::Messaging::IMessage* call, System::Runtime::Remoting::Messaging::IMessageSink* next) {
        this->_call = call;
        this->_next = next;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ExceptionFilterSink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        return this->_next->SyncProcessMessage_d4949581639d4872(ChannelServices::CheckReturnMessage(this->_call, msg));
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* ExceptionFilterSink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        throw cli::gcnew<System::InvalidOperationException>();
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* ExceptionFilterSink::get_NextSink() {
        return this->_next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ChanelSinkStackEntry::constructor(IChannelSinkBase* sink, System::Object* state, ChanelSinkStackEntry* next) {
        this->Sink = sink;
        this->State = state;
        this->Next = next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ClientChannelSinkStack::constructor() {
    }
    
    void ClientChannelSinkStack::constructor(System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        this->_replySink = replySink;
    }
    
    void ClientChannelSinkStack::AsyncProcessResponse(ITransportHeaders* headers, System::IO::Stream* stream) {
        if((this->_sinkStack ==  nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The current sink stack is empty"));
        }
        ChanelSinkStackEntry *stackEntry = this->_sinkStack;
        this->_sinkStack = this->_sinkStack->Next;
        cli::cast<IClientChannelSink*>(stackEntry->Sink)->AsyncProcessResponse_31d86946805caa0d(this, stackEntry->State, headers, stream);
    }
    
    void ClientChannelSinkStack::DispatchException(System::Exception* e) {
        DispatchReplyMessage(cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(e, nullptr));
    }
    
    void ClientChannelSinkStack::DispatchReplyMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        if((this->_replySink != nullptr)) 
        {
            this->_replySink->SyncProcessMessage_d4949581639d4872(msg);
        }
    }
    
    System::Object* ClientChannelSinkStack::Pop(IClientChannelSink* sink) {
        while((this->_sinkStack != nullptr)) {
            ChanelSinkStackEntry *stackEntry = this->_sinkStack;
            this->_sinkStack = this->_sinkStack->Next;
            if((stackEntry->Sink ==  sink)) 
            {
                return stackEntry->State;
            }
        }
        throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The current sink stack is empty, or the specified sink was never pushed onto the current stack"));
    }
    
    void ClientChannelSinkStack::Push(IClientChannelSink* sink, System::Object* state) {
        this->_sinkStack = cli::gcnew<ChanelSinkStackEntry>(sink, state, this->_sinkStack);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void CrossAppDomainData::constructor(int32_t domainId) {
        this->_ContextID = cli::box(0);
        this->_DomainID = domainId;
        this->_processGuid = System::Runtime::Remoting::RemotingConfiguration::get_ProcessId();
    }
    
    int32_t CrossAppDomainData::get_DomainID() {
        return this->_DomainID;
    }
    
    System::String* CrossAppDomainData::get_ProcessID() {
        return this->_processGuid;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    System::Object*  CrossAppDomainChannel::s_lock;
    
    CrossAppDomainChannel::CrossAppDomainChannel()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void CrossAppDomainChannel::constructor() {
    }
    
    void CrossAppDomainChannel::static_constructor() {
    }
    
    void CrossAppDomainChannel::RegisterCrossAppDomainChannel() {
        {
            cli::lock_guard{s_lock};
            CrossAppDomainChannel *monocad = cli::gcnew<CrossAppDomainChannel>();
            ChannelServices::RegisterChannel(cli::cast<IChannel*>(monocad));
        }
    }
    
    System::String* CrossAppDomainChannel::Parse(System::String* url, System::String* objectURI) {
        objectURI = url;
        return nullptr;
    }
    
    cli::array<System::String*>* CrossAppDomainChannel::GetUrlsForUri_d686284f037feab3(System::String* objectURI) {
        throw cli::gcnew<System::NotSupportedException>(_T("CrossAppdomain channel dont support UrlsForUri"));
    }
    
    void CrossAppDomainChannel::StartListening_facefd345f0460a1(System::Object* data) {
    }
    
    void CrossAppDomainChannel::StopListening_baaf88d837ccab5c(System::Object* data) {
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* CrossAppDomainChannel::CreateMessageSink_16a9a5ea63020929(System::String* url, System::Object* data, System::String* uri) {
        uri = nullptr;
        if((data != nullptr)) 
        {
            CrossAppDomainData *cadData = cli::as<CrossAppDomainData*>(data);
            if(((cadData != nullptr) && System::String::op_Equality(cadData->get_ProcessID(), System::Runtime::Remoting::RemotingConfiguration::get_ProcessId()))) 
            {
                return CrossAppDomainSink::GetSink(cadData->get_DomainID());
            }
        }
        if(((url != nullptr) && url->StartsWith(_T("MONOCAD")))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Can\'t create a named channel via crossappdomain"));
        }
        return nullptr;
    }
    
    System::String* CrossAppDomainChannel::get_ChannelName_377a03c7204ade87() {
        return _T("MONOCAD");
    }
    
    int32_t CrossAppDomainChannel::get_ChannelPriority_6555198b7b654a77() {
        return 100;
    }
    
    System::Object* CrossAppDomainChannel::get_ChannelData_c2e668c6c3bac5a2() {
        return cli::gcnew<CrossAppDomainData>(System::Threading::Thread::GetDomainID());
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    System::Collections::Hashtable*  CrossAppDomainSink::s_sinks;
    System::Reflection::MethodInfo*  CrossAppDomainSink::processMessageMethod;
    
    CrossAppDomainSink::CrossAppDomainSink()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void CrossAppDomainSink::constructor(int32_t domainID) {
        this->_domainID = domainID;
    }
    
    void CrossAppDomainSink::static_constructor() {
    }
    
    CrossAppDomainSink* CrossAppDomainSink::GetSink(int32_t domainID) {
        {
            cli::lock_guard{s_sinks->get_SyncRoot_2d1e4aa44bab8a0d()};
            if(s_sinks->ContainsKey_5de2e202a0290d76(cli::box(domainID))) 
            {
                return cli::cast<CrossAppDomainSink*>(s_sinks->get_Item_d75c6e706b965758(cli::box(domainID)));
            }
             else 
            {
                CrossAppDomainSink *sink = cli::gcnew<CrossAppDomainSink>(domainID);
                s_sinks->set_Item_84c7e24d9caa09(cli::box(domainID), sink);
                return sink;
            }
        }
    }
    
    ProcessMessageRes CrossAppDomainSink::ProcessMessageInDomain(cli::array<unsigned char>* arrRequest, System::Runtime::Remoting::Messaging::CADMethodCallMessage* cadMsg) {
        ProcessMessageRes res = cli::ctor<ProcessMessageRes>();
        try {
            System::AppDomain::get_CurrentDomain()->ProcessMessageInDomain(arrRequest, cadMsg, res->arrResponse, res->cadMrm);
        }
        catch(System::Exception* e) {
            System::Runtime::Remoting::Messaging::IMessage *errorMsg = cli::gcnew<System::Runtime::Remoting::Messaging::MethodResponse>(e, cli::gcnew<System::Runtime::Remoting::Messaging::ErrorMessage>());
            res->arrResponse = CADSerializer::SerializeMessage(errorMsg)->GetBuffer_21f804ce00c165c2();
        }
        return res;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* CrossAppDomainSink::SyncProcessMessage_68a690daafdab562(System::Runtime::Remoting::Messaging::IMessage* msgRequest) {
        System::Runtime::Remoting::Messaging::IMessage *retMessage = nullptr;
        try {
            cli::array<unsigned char> *arrResponse = nullptr;
            cli::array<unsigned char> *arrRequest = nullptr;
            System::Runtime::Remoting::Messaging::CADMethodReturnMessage *cadMrm = nullptr;
            System::Runtime::Remoting::Messaging::CADMethodCallMessage *cadMsg;
            cadMsg = System::Runtime::Remoting::Messaging::CADMethodCallMessage::Create(msgRequest);
            if((cadMsg ==  nullptr)) 
            {
                System::IO::MemoryStream *reqMsgStream = CADSerializer::SerializeMessage(msgRequest);
                arrRequest = reqMsgStream->GetBuffer_21f804ce00c165c2();
            }
            System::Runtime::Remoting::Contexts::Context2 *currentContext = System::Threading::Thread::get_CurrentContext();
            {
                cli::finally_guard([&]() {
                    System::AppDomain::InternalSetContext(currentContext);
                });
                ProcessMessageRes res = cli::unbox<ProcessMessageRes>(System::AppDomain::InvokeInDomainByID(this->_domainID, processMessageMethod, nullptr, (new cli::array<System::Object*>({arrRequest, cadMsg}))));
                arrResponse = res->arrResponse;
                cadMrm = res->cadMrm;
            }
            if((arrResponse != nullptr)) 
            {
                System::IO::MemoryStream *respMsgStream = cli::gcnew<System::IO::MemoryStream>(arrResponse);
                retMessage = CADSerializer::DeserializeMessage(respMsgStream, cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msgRequest));
            }
             else 
            {
                retMessage = cli::gcnew<System::Runtime::Remoting::Messaging::MethodResponse>(cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msgRequest), cadMrm);
            }
        }
        catch(System::Exception* e) {
            try {
                retMessage = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(e, cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msgRequest));
            }
            catch(System::Exception*) {
            }
        }
        return retMessage;
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* CrossAppDomainSink::AsyncProcessMessage_6cb8c8ebc3c3ec7c(System::Runtime::Remoting::Messaging::IMessage* reqMsg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        AsyncRequest *req = cli::gcnew<AsyncRequest>(reqMsg, replySink);
        System::Threading::ThreadPool::QueueUserWorkItem2(cli::bind([&] (System::Object* data) -> void {
            try {
                SendAsyncMessage(data);
            }
            catch(...) {
            }
        }
        ), req);
        return nullptr;
    }
    
    void CrossAppDomainSink::SendAsyncMessage(System::Object* data) {
        AsyncRequest *req = cli::cast<AsyncRequest*>(data);
        System::Runtime::Remoting::Messaging::IMessage *response = SyncProcessMessage_68a690daafdab562(req->MsgRequest);
        req->ReplySink->SyncProcessMessage_d4949581639d4872(response);
    }
    
    void CrossAppDomainSink::_AsyncProcessMessage_m__11(System::Object* data) {
        try {
            SendAsyncMessage(data);
        }
        catch(...) {
        }
    }
    
    int32_t CrossAppDomainSink::get_TargetDomainId() {
        return this->_domainID;
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* CrossAppDomainSink::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void CADSerializer::constructor() {
    }
    
    System::Runtime::Remoting::Messaging::IMessage* CADSerializer::DeserializeMessage(System::IO::MemoryStream* mem, System::Runtime::Remoting::Messaging::IMethodCallMessage* msg) {
        System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *serializer = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
        serializer->set_SurrogateSelector(nullptr);
        mem->set_Position_cfe1def757785ad(0L);
        if((msg ==  nullptr)) 
        {
            return cli::cast<System::Runtime::Remoting::Messaging::IMessage*>(serializer->Deserialize2(mem, nullptr));
        }
         else 
        {
            return cli::cast<System::Runtime::Remoting::Messaging::IMessage*>(serializer->DeserializeMethodResponse(mem, nullptr, msg));
        }
    }
    
    System::IO::MemoryStream* CADSerializer::SerializeMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        System::IO::MemoryStream *mem = cli::gcnew<System::IO::MemoryStream>();
        System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *serializer = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
        serializer->set_SurrogateSelector(cli::gcnew<System::Runtime::Remoting::Messaging::RemotingSurrogateSelector>());
        serializer->Serialize(mem, msg);
        mem->set_Position_cfe1def757785ad(0L);
        return mem;
    }
    
    System::IO::MemoryStream* CADSerializer::SerializeObject(System::Object* obj) {
        System::IO::MemoryStream *mem = cli::gcnew<System::IO::MemoryStream>();
        System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *serializer = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
        serializer->set_SurrogateSelector(cli::gcnew<System::Runtime::Remoting::Messaging::RemotingSurrogateSelector>());
        serializer->Serialize(mem, obj);
        mem->set_Position_cfe1def757785ad(0L);
        return mem;
    }
    
    System::Object* CADSerializer::DeserializeObject(System::IO::MemoryStream* mem) {
        System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *serializer = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
        serializer->set_SurrogateSelector(nullptr);
        mem->set_Position_cfe1def757785ad(0L);
        return serializer->Deserialize(mem);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void AsyncRequest::constructor(System::Runtime::Remoting::Messaging::IMessage* msgRequest, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        this->ReplySink = replySink;
        this->MsgRequest = msgRequest;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ServerChannelSinkStack::constructor() {
    }
    
    System::IO::Stream* ServerChannelSinkStack::GetResponseStream(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) {
        if((this->_sinkStack ==  nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The sink stack is empty"));
        }
        return cli::cast<IServerChannelSink*>(this->_sinkStack->Sink)->GetResponseStream_226ecebab7f1ae4a(this, this->_sinkStack->State, msg, headers);
    }
    
    System::Object* ServerChannelSinkStack::Pop(IServerChannelSink* sink) {
        while((this->_sinkStack != nullptr)) {
            ChanelSinkStackEntry *stackEntry = this->_sinkStack;
            this->_sinkStack = this->_sinkStack->Next;
            if((stackEntry->Sink ==  sink)) 
            {
                return stackEntry->State;
            }
        }
        throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The current sink stack is empty, or the specified sink was never pushed onto the current stack"));
    }
    
    void ServerChannelSinkStack::Push(IServerChannelSink* sink, System::Object* state) {
        this->_sinkStack = cli::gcnew<ChanelSinkStackEntry>(sink, state, this->_sinkStack);
    }
    
    void ServerChannelSinkStack::ServerCallback(System::IAsyncResult* ar) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ServerChannelSinkStack::Store(IServerChannelSink* sink, System::Object* state) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ServerChannelSinkStack::StoreAndDispatch(IServerChannelSink* sink, System::Object* state) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ServerChannelSinkStack::AsyncProcessResponse(System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) {
        if((this->_sinkStack ==  nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The current sink stack is empty"));
        }
        ChanelSinkStackEntry *stackEntry = this->_sinkStack;
        this->_sinkStack = this->_sinkStack->Next;
        cli::cast<IServerChannelSink*>(stackEntry->Sink)->AsyncProcessResponse_de8d5b38a27d9262(this, stackEntry->State, msg, headers, stream);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ServerDispatchSink::constructor() {
    }
    
    void ServerDispatchSink::AsyncProcessResponse(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers, System::IO::Stream* stream) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::IO::Stream* ServerDispatchSink::GetResponseStream(IServerResponseChannelSinkStack* sinkStack, System::Object* state, System::Runtime::Remoting::Messaging::IMessage* msg, ITransportHeaders* headers) {
        return nullptr;
    }
    
    ServerProcessing ServerDispatchSink::ProcessMessage(IServerChannelSinkStack* sinkStack, System::Runtime::Remoting::Messaging::IMessage* requestMsg, ITransportHeaders* requestHeaders, System::IO::Stream* requestStream, System::Runtime::Remoting::Messaging::IMessage* responseMsg, ITransportHeaders* responseHeaders, System::IO::Stream* responseStream) {
        responseHeaders = nullptr;
        responseStream = nullptr;
        return ChannelServices::DispatchMessage(sinkStack, requestMsg, responseMsg);
    }
    
    IServerChannelSink* ServerDispatchSink::get_NextChannelSink() {
        return nullptr;
    }
    
    System::Collections::IDictionary* ServerDispatchSink::get_Properties() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void ServerDispatchSinkProvider::constructor() {
    }
    
    void ServerDispatchSinkProvider::constructor(System::Collections::IDictionary* properties, System::Collections::ICollection* providerData) {
    }
    
    IServerChannelSink* ServerDispatchSinkProvider::CreateSink(IChannelReceiver* channel) {
        return cli::gcnew<ServerDispatchSink>();
    }
    
    void ServerDispatchSinkProvider::GetChannelData(IChannelDataStore* channelData) {
    }
    
    IServerChannelSinkProvider* ServerDispatchSinkProvider::get_Next() {
        return nullptr;
    }
    
    IServerChannelSinkProvider* ServerDispatchSinkProvider::set_Next(IServerChannelSinkProvider* value) {
        throw cli::gcnew<System::NotSupportedException>();
        return get_Next();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void SinkProviderData::constructor(System::String* name) {
        this->sinkName = name;
        this->children = cli::gcnew<System::Collections::ArrayList>();
        this->properties = cli::gcnew<System::Collections::Hashtable>();
    }
    
    System::Collections::IList* SinkProviderData::get_Children() {
        return this->children;
    }
    
    System::String* SinkProviderData::get_Name() {
        return this->sinkName;
    }
    
    System::Collections::IDictionary* SinkProviderData::get_Properties() {
        return this->properties;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Channels {
    
    
    void TransportHeaders::constructor() {
        this->hash_table = cli::gcnew<System::Collections::Hashtable>(System::Collections::CaseInsensitiveHashCodeProvider::get_DefaultInvariant(), System::Collections::CaseInsensitiveComparer::get_DefaultInvariant());
    }
    
    System::Collections::IEnumerator* TransportHeaders::GetEnumerator() {
        return this->hash_table->GetEnumerator_47df71de9b680069();
    }
    
    System::Object* TransportHeaders::get_Item(System::Object* key) {
        return this->hash_table->get_Item_d75c6e706b965758(key);
    }
    
    System::Object* TransportHeaders::set_Item(System::Object* key, System::Object* value) {
        this->hash_table->set_Item_84c7e24d9caa09(key, value);
        return get_Item(key);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    System::Collections::Hashtable*  NamedSlots::namedSlots;
    
    NamedSlots::NamedSlots()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void NamedSlots::constructor() {
    }
    
    void NamedSlots::static_constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    System::Runtime::Remoting::Messaging::IMessageSink*  Context2::default_server_context_sink;
    int32_t  Context2::global_count;
    DynamicPropertyCollection*  Context2::global_dynamic_properties;
    
    void Context2::constructor() {
        this->domain_id = System::Threading::Thread::GetDomainID();
        this->context_id = (1 + global_count++);
    }
    
    void Context2::Finalize_9a8cc920d2323ecd() {
        {
            cli::finally_guard([&]() {
                Finalize_b946fbc32e26afd6();
            });
        }
    }
    
    bool Context2::RegisterDynamicProperty(IDynamicProperty* prop, System::ContextBoundObject* obj, Context2* ctx) {
        DynamicPropertyCollection *col = GetDynamicPropertyCollection(obj, ctx);
        return col->RegisterDynamicProperty(prop);
    }
    
    bool Context2::UnregisterDynamicProperty(System::String* name, System::ContextBoundObject* obj, Context2* ctx) {
        DynamicPropertyCollection *col = GetDynamicPropertyCollection(obj, ctx);
        return col->UnregisterDynamicProperty(name);
    }
    
    DynamicPropertyCollection* Context2::GetDynamicPropertyCollection(System::ContextBoundObject* obj, Context2* ctx) {
        if(((ctx ==  nullptr) && (obj != nullptr))) 
        {
            if(System::Runtime::Remoting::RemotingServices::IsTransparentProxy(obj)) 
            {
                System::Runtime::Remoting::Proxies::RealProxy *rp = System::Runtime::Remoting::RemotingServices::GetRealProxy(obj);
                return rp->get_ObjectIdentity()->get_ClientDynamicProperties();
            }
             else 
            {
                return obj->get_ObjectIdentity()->get_ServerDynamicProperties();
            }
        }
         else 
        {
            if(((ctx != nullptr) && (obj ==  nullptr))) 
            {
                if((ctx->context_dynamic_properties ==  nullptr)) 
                {
                    ctx->context_dynamic_properties = cli::gcnew<DynamicPropertyCollection>();
                }
                return ctx->context_dynamic_properties;
            }
             else 
            {
                if(((ctx ==  nullptr) && (obj ==  nullptr))) 
                {
                    if((global_dynamic_properties ==  nullptr)) 
                    {
                        global_dynamic_properties = cli::gcnew<DynamicPropertyCollection>();
                    }
                    return global_dynamic_properties;
                }
                 else 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Either obj or ctx must be null"));
                }
            }
        }
    }
    
    void Context2::NotifyGlobalDynamicSinks(bool start, System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async) {
        if(((global_dynamic_properties != nullptr) && global_dynamic_properties->get_HasProperties())) 
        {
            global_dynamic_properties->NotifyMessage(start, req_msg, client_site, async);
        }
    }
    
    void Context2::NotifyDynamicSinks(bool start, System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async) {
        if(((this->context_dynamic_properties != nullptr) && this->context_dynamic_properties->get_HasProperties())) 
        {
            this->context_dynamic_properties->NotifyMessage(start, req_msg, client_site, async);
        }
    }
    
    IContextProperty* Context2::GetProperty_4fcc5db656115bfb(System::String* name) {
        if((this->context_properties ==  nullptr)) 
        {
            return nullptr;
        }
        for(auto tmp_369 : this->context_properties) {
            auto p = cli::cast<IContextProperty*>(tmp_369);
            if(System::String::op_Equality(p->get_Name_c8dae2189d434839(), name)) 
            {
                return p;
            }
        }
        return nullptr;
    }
    
    void Context2::SetProperty_e3b9245b49551e88(IContextProperty* prop) {
        if((prop ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("IContextProperty"));
        }
        if((this ==  Context2::get_DefaultContext())) 
        {
            throw cli::gcnew<System::InvalidOperationException>(_T("Can not add properties to default context"));
        }
        if((this->context_properties ==  nullptr)) 
        {
            this->context_properties = cli::gcnew<System::Collections::ArrayList>();
        }
        this->context_properties->Add_e6a92085999ce388(prop);
    }
    
    void Context2::Freeze_20d1b360c90a99cc() {
        if((this->context_properties != nullptr)) 
        {
            for(auto tmp_370 : this->context_properties) {
                auto prop = cli::cast<IContextProperty*>(tmp_370);
                prop->Freeze_15e6c602de21dea(this);
            }
        }
    }
    
    System::String* Context2::ToString_1636a0751cb9ac11() {
        return cli::concat(_T("ContextID: "), cli::box(this->context_id));
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* Context2::GetServerContextSinkChain() {
        if((this->server_context_sink_chain ==  nullptr)) 
        {
            if((default_server_context_sink ==  nullptr)) 
            {
                default_server_context_sink = cli::gcnew<System::Runtime::Remoting::Messaging::ServerContextTerminatorSink>();
            }
            this->server_context_sink_chain = default_server_context_sink;
            if((this->context_properties != nullptr)) 
            {
                for(int32_t n = (this->context_properties->get_Count_2354963792616712() - 1); (n >= 0); n--){
                    IContributeServerContextSink *contributor = cli::as<IContributeServerContextSink*>(this->context_properties->get_Item_fd0155f142ae570(n));
                    if((contributor != nullptr)) 
                    {
                        this->server_context_sink_chain = contributor->GetServerContextSink_1f6bff576bbda(this->server_context_sink_chain);
                    }
                }
            }
        }
        return this->server_context_sink_chain;
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* Context2::GetClientContextSinkChain() {
        if((this->client_context_sink_chain ==  nullptr)) 
        {
            this->client_context_sink_chain = cli::gcnew<System::Runtime::Remoting::Messaging::ClientContextTerminatorSink>(this);
            if((this->context_properties != nullptr)) 
            {
                for(auto tmp_371 : this->context_properties) {
                    auto prop = cli::cast<IContextProperty*>(tmp_371);
                    {
                        IContributeClientContextSink *contributor = cli::as<IContributeClientContextSink*>(prop);
                        if((contributor != nullptr)) 
                        {
                            this->client_context_sink_chain = contributor->GetClientContextSink_4901bfa17250fabc(this->client_context_sink_chain);
                        }
                    }
                }
            }
        }
        return this->client_context_sink_chain;
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* Context2::CreateServerObjectSinkChain(System::MarshalByRefObject* obj, bool forceInternalExecute) {
        System::Runtime::Remoting::Messaging::IMessageSink *objectSink = cli::gcnew<System::Runtime::Remoting::Messaging::StackBuilderSink>(obj, forceInternalExecute);
        objectSink = cli::gcnew<System::Runtime::Remoting::Messaging::ServerObjectTerminatorSink>(objectSink);
        objectSink = cli::gcnew<System::Runtime::Remoting::Lifetime::LeaseSink>(objectSink);
        if((this->context_properties != nullptr)) 
        {
            for(int32_t n = (this->context_properties->get_Count_2354963792616712() - 1); (n >= 0); n--){
                IContextProperty *prop = cli::cast<IContextProperty*>(this->context_properties->get_Item_fd0155f142ae570(n));
                IContributeObjectSink *contributor = cli::as<IContributeObjectSink*>(prop);
                if((contributor != nullptr)) 
                {
                    objectSink = contributor->GetObjectSink_5461588dbe46c924(obj, objectSink);
                }
            }
        }
        return objectSink;
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* Context2::CreateEnvoySink(System::MarshalByRefObject* serverObject) {
        System::Runtime::Remoting::Messaging::IMessageSink *sink = System::Runtime::Remoting::Messaging::EnvoyTerminatorSink::Instance;
        if((this->context_properties != nullptr)) 
        {
            for(auto tmp_372 : this->context_properties) {
                auto prop = cli::cast<IContextProperty*>(tmp_372);
                {
                    IContributeEnvoySink *contributor = cli::as<IContributeEnvoySink*>(prop);
                    if((contributor != nullptr)) 
                    {
                        sink = contributor->GetEnvoySink_d8fde746a81422b(serverObject, sink);
                    }
                }
            }
        }
        return sink;
    }
    
    Context2* Context2::SwitchToContext(Context2* newContext) {
        return System::AppDomain::InternalSetContext(newContext);
    }
    
    Context2* Context2::CreateNewContext(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) {
        Context2 *newContext = cli::gcnew<Context2>();
        for(auto tmp_373 : msg->get_ContextProperties_6d65d78ae4ed4d3()) {
            auto prop = cli::cast<IContextProperty*>(tmp_373);
            {
                if((newContext->GetProperty_4fcc5db656115bfb(prop->get_Name_c8dae2189d434839()) ==  nullptr)) 
                {
                    newContext->SetProperty_e3b9245b49551e88(prop);
                }
            }
        }
        newContext->Freeze_20d1b360c90a99cc();
        for(auto tmp_374 : msg->get_ContextProperties_6d65d78ae4ed4d3()) {
            auto prop = cli::cast<IContextProperty*>(tmp_374);
            if(!(prop->IsNewContextOK_d441173b4713767c(newContext))) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("A context property did not approve the candidate context for activating the object"));
            }
        }
        return newContext;
    }
    
    void Context2::DoCallBack(CrossContextDelegate* deleg) {
        {
            cli::lock_guard{this};
            if((this->callback_object ==  nullptr)) 
            {
                Context2 *oldContext = Context2::SwitchToContext(this);
                this->callback_object = cli::gcnew<ContextCallbackObject>();
                Context2::SwitchToContext(oldContext);
            }
        }
        this->callback_object->DoCallBack(deleg);
    }
    
    System::LocalDataStoreSlot* Context2::AllocateDataSlot() {
        return cli::gcnew<System::LocalDataStoreSlot>(false);
    }
    
    System::LocalDataStoreSlot* Context2::AllocateNamedDataSlot(System::String* name) {
        {
            cli::lock_guard{NamedSlots::namedSlots->get_SyncRoot_2d1e4aa44bab8a0d()};
            System::LocalDataStoreSlot *slot = AllocateDataSlot();
            NamedSlots::namedSlots->Add_3f7ab157bcb41156(name, slot);
            return slot;
        }
    }
    
    void Context2::FreeNamedDataSlot(System::String* name) {
        {
            cli::lock_guard{NamedSlots::namedSlots->get_SyncRoot_2d1e4aa44bab8a0d()};
            NamedSlots::namedSlots->Remove_fd653674dd8a5ac4(name);
        }
    }
    
    System::Object* Context2::GetData(System::LocalDataStoreSlot* slot) {
        Context2 *ctx = System::Threading::Thread::get_CurrentContext();
        {
            cli::lock_guard{ctx};
            if(((ctx->datastore != nullptr) && (slot->slot < ctx->datastore->get_Length()))) 
            {
                return ctx->datastore->at(slot->slot);
            }
            return nullptr;
        }
    }
    
    System::LocalDataStoreSlot* Context2::GetNamedDataSlot(System::String* name) {
        {
            cli::lock_guard{NamedSlots::namedSlots->get_SyncRoot_2d1e4aa44bab8a0d()};
            System::LocalDataStoreSlot *slot = cli::as<System::LocalDataStoreSlot*>(NamedSlots::namedSlots->get_Item_d75c6e706b965758(name));
            if((slot ==  nullptr)) 
            {
                return AllocateNamedDataSlot(name);
            }
             else 
            {
                return slot;
            }
        }
    }
    
    void Context2::SetData(System::LocalDataStoreSlot* slot, System::Object* data) {
        Context2 *ctx = System::Threading::Thread::get_CurrentContext();
        {
            cli::lock_guard{ctx};
            if((ctx->datastore ==  nullptr)) 
            {
                ctx->datastore = (new cli::array<System::Object*>((slot->slot + 2)));
            }
             else 
            {
                if((slot->slot >= ctx->datastore->get_Length())) 
                {
                    cli::array<System::Object*> *nslots = (new cli::array<System::Object*>((slot->slot + 2)));
                    cli::import(ctx->datastore)->CopyTo(nslots, 0);
                    ctx->datastore = nslots;
                }
            }
            ctx->datastore->at(slot->slot) = data;
        }
    }
    
    Context2* Context2::get_DefaultContext() {
        return System::AppDomain::InternalGetDefaultContext();
    }
    
    int32_t Context2::get_ContextID_1646acb3c19d2905() {
        return this->context_id;
    }
    
    cli::array<IContextProperty*>* Context2::get_ContextProperties_df38ac590badff26() {
        if((this->context_properties ==  nullptr)) 
        {
            return (new cli::array<IContextProperty*>(0));
        }
         else 
        {
            return cli::cast<cli::array<IContextProperty*>*>(this->context_properties->ToArray_7b80f35a5dbfbc47(cli::typeof<System::Type>::info));
        }
    }
    
    bool Context2::get_IsDefaultContext() {
        return (this->context_id ==  0);
    }
    
    bool Context2::get_NeedsContextSink() {
        return (((this->context_id != 0) || ((global_dynamic_properties != nullptr) && global_dynamic_properties->get_HasProperties())) || ((this->context_dynamic_properties != nullptr) && this->context_dynamic_properties->get_HasProperties()));
    }
    
    bool Context2::get_HasGlobalDynamicSinks() {
        return ((global_dynamic_properties != nullptr) && global_dynamic_properties->get_HasProperties());
    }
    
    bool Context2::get_HasDynamicSinks() {
        return ((this->context_dynamic_properties != nullptr) && this->context_dynamic_properties->get_HasProperties());
    }
    
    bool Context2::get_HasExitSinks() {
        return ((!(cli::is<System::Runtime::Remoting::Messaging::ClientContextTerminatorSink>(GetClientContextSinkChain())) || this->get_HasDynamicSinks()) || Context2::get_HasGlobalDynamicSinks());
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void DynamicPropertyReg::constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void DynamicPropertyCollection::constructor() {
    }
    
    bool DynamicPropertyCollection::RegisterDynamicProperty(IDynamicProperty* prop) {
        {
            cli::lock_guard{this};
            if((FindProperty(prop->get_Name_9f460fecde1e61a4()) != -1)) 
            {
                throw cli::gcnew<System::InvalidOperationException>(_T("Another property by this name already exists"));
            }
            System::Collections::ArrayList *newProps = cli::gcnew<System::Collections::ArrayList>(this->_properties);
            DynamicPropertyReg *reg = cli::gcnew<DynamicPropertyReg>();
            reg->Property = prop;
            IContributeDynamicSink *contributor = cli::as<IContributeDynamicSink*>(prop);
            if((contributor != nullptr)) 
            {
                reg->Sink = contributor->GetDynamicSink_4549e225faa8ce79();
            }
            newProps->Add_e6a92085999ce388(reg);
            this->_properties = newProps;
            return true;
        }
    }
    
    bool DynamicPropertyCollection::UnregisterDynamicProperty(System::String* name) {
        {
            cli::lock_guard{this};
            int32_t i = FindProperty(name);
            if((i ==  -1)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("A property with the name "), name));
            }
            this->_properties->RemoveAt_2abea768d3273318(i);
            return true;
        }
    }
    
    void DynamicPropertyCollection::NotifyMessage(bool start, System::Runtime::Remoting::Messaging::IMessage* msg, bool client_site, bool async) {
        System::Collections::ArrayList *props = this->_properties;
        if(start) 
        {
            for(auto tmp_375 : props) {
                auto reg = cli::cast<DynamicPropertyReg*>(tmp_375);
                if((reg->Sink != nullptr)) 
                {
                    reg->Sink->ProcessMessageStart_2d880a1a27e0fa83(msg, client_site, async);
                }
            }
        }
         else 
        {
            for(auto tmp_376 : props) {
                auto reg = cli::cast<DynamicPropertyReg*>(tmp_376);
                if((reg->Sink != nullptr)) 
                {
                    reg->Sink->ProcessMessageFinish_919ca107c1f3b86c(msg, client_site, async);
                }
            }
        }
    }
    
    int32_t DynamicPropertyCollection::FindProperty(System::String* name) {
        for(int32_t n = 0; (n < this->_properties->get_Count_2354963792616712()); n++) {
            if(System::String::op_Equality(cli::cast<DynamicPropertyReg*>(this->_properties->get_Item_fd0155f142ae570(n))->Property->get_Name_9f460fecde1e61a4(), name)) 
            {
                return n;
            }
        }
        return -1;
    }
    
    bool DynamicPropertyCollection::get_HasProperties() {
        return (this->_properties->get_Count_2354963792616712() > 0);
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void ContextCallbackObject::constructor() {
    }
    
    void ContextCallbackObject::DoCallBack(CrossContextDelegate* deleg) {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void ContextAttribute::constructor(System::String* name) {
        this->AttributeName = name;
    }
    
    bool ContextAttribute::Equals_ed975d2f4a7d193e(System::Object* o) {
        if((o ==  nullptr)) 
        {
            return false;
        }
        if(!(cli::is<ContextAttribute>(o))) 
        {
            return false;
        }
        ContextAttribute *ca = cli::cast<ContextAttribute*>(o);
        if(System::String::op_Inequality(ca->AttributeName, this->AttributeName)) 
        {
            return false;
        }
        return true;
    }
    
    void ContextAttribute::Freeze_ee06f0cc6fc5f1f(Context2* newContext) {
    }
    
    int32_t ContextAttribute::GetHashCode_6648aef0f235ee6c() {
        if((this->AttributeName ==  nullptr)) 
        {
            return 0;
        }
        return this->AttributeName->GetHashCode_6648aef0f235ee6c();
    }
    
    void ContextAttribute::GetPropertiesForNewContext_f6e9f6568c456816(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) {
        if((ctorMsg ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("ctorMsg"));
        }
        System::Collections::IList *list = ctorMsg->get_ContextProperties_6d65d78ae4ed4d3();
        list->Add_985508e3bf9b7a73(this);
    }
    
    bool ContextAttribute::IsContextOK_7837aaab12d993b6(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) {
        if((ctorMsg ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("ctorMsg"));
        }
        if((ctx ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("ctx"));
        }
        if(!(ctorMsg->get_ActivationType_84a662e1d53c6b9a()->get_IsContextful())) 
        {
            return true;
        }
        IContextProperty *p = ctx->GetProperty_4fcc5db656115bfb(this->AttributeName);
        if((p ==  nullptr)) 
        {
            return false;
        }
        if((this != p)) 
        {
            return false;
        }
        return true;
    }
    
    bool ContextAttribute::IsNewContextOK_19a054e462d56b73(Context2* newCtx) {
        return true;
    }
    
    System::String* ContextAttribute::get_Name_2c4efe01fcf96d3() {
        return this->AttributeName;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void ContextProperty::constructor(System::String* name, System::Object* prop) {
        this->name = name;
        this->prop = prop;
    }
    
    System::String* ContextProperty::get_Name_2ba79a9cf6b71356() {
        return this->name;
    }
    
    System::Object* ContextProperty::get_Property_558321cc59c3cc5a() {
        return this->prop;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void ContextRestoreSink::constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, Context2* context, System::Runtime::Remoting::Messaging::IMessage* call) {
        this->_next = next;
        this->_context = context;
        this->_call = call;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* ContextRestoreSink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        try
        {
            cli::finally_guard([&]() {
                if((this->_context != nullptr)) 
                {
                    Context2::SwitchToContext(this->_context);
                }
            });
            Context2::NotifyGlobalDynamicSinks(false, msg, false, false);
            System::Threading::Thread::get_CurrentContext()->NotifyDynamicSinks(false, msg, false, false);
            return this->_next->SyncProcessMessage_d4949581639d4872(msg);
        }
        catch(System::Exception* ex) {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(ex, cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(this->_call));
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* ContextRestoreSink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* ContextRestoreSink::get_NextSink() {
        return this->_next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void CrossContextChannel::constructor() {
    }
    
    System::Runtime::Remoting::Messaging::IMessage* CrossContextChannel::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        Context2 *oldContext = nullptr;
        System::Runtime::Remoting::Messaging::IMessage *response;
        if((System::Threading::Thread::get_CurrentContext() != identity->get_Context())) 
        {
            oldContext = Context2::SwitchToContext(identity->get_Context());
        }
        try
        {
            cli::finally_guard([&]() {
                if((oldContext != nullptr)) 
                {
                    Context2::SwitchToContext(oldContext);
                }
            });
            Context2::NotifyGlobalDynamicSinks(true, msg, false, false);
            System::Threading::Thread::get_CurrentContext()->NotifyDynamicSinks(true, msg, false, false);
            response = identity->get_Context()->GetServerContextSinkChain()->SyncProcessMessage_d4949581639d4872(msg);
            Context2::NotifyGlobalDynamicSinks(false, msg, false, false);
            System::Threading::Thread::get_CurrentContext()->NotifyDynamicSinks(false, msg, false, false);
        }
        catch(System::Exception* ex) {
            response = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(ex, cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msg));
        }
        return response;
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* CrossContextChannel::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        Context2 *oldContext = nullptr;
        if((System::Threading::Thread::get_CurrentContext() != identity->get_Context())) 
        {
            oldContext = Context2::SwitchToContext(identity->get_Context());
        }
        try
        {
            cli::finally_guard([&]() {
                if((oldContext != nullptr)) 
                {
                    Context2::SwitchToContext(oldContext);
                }
            });
            Context2::NotifyGlobalDynamicSinks(true, msg, false, true);
            System::Threading::Thread::get_CurrentContext()->NotifyDynamicSinks(true, msg, false, false);
            if((replySink != nullptr)) 
            {
                replySink = cli::gcnew<ContextRestoreSink>(replySink, oldContext, msg);
            }
            System::Runtime::Remoting::Messaging::IMessageCtrl *res = identity->AsyncObjectProcessMessage_44b7f4bc847d9247(msg, replySink);
            if((replySink ==  nullptr)) 
            {
                Context2::NotifyGlobalDynamicSinks(false, msg, false, false);
                System::Threading::Thread::get_CurrentContext()->NotifyDynamicSinks(false, msg, false, false);
            }
            return res;
        }
        catch(System::Exception* ex) {
            if((replySink != nullptr)) 
            {
                replySink->SyncProcessMessage_d4949581639d4872(cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(ex, cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msg)));
            }
            return nullptr;
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* CrossContextChannel::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void SynchronizationAttribute::constructor() {
    }
    
    void SynchronizationAttribute::constructor(bool reEntrant) {
    }
    
    void SynchronizationAttribute::constructor(int32_t flag) {
    }
    
    void SynchronizationAttribute::constructor(int32_t flag, bool reEntrant) {
        if(((((flag != 1) && (flag != 4)) && (flag != 8)) && (flag != 2))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("flag"));
        }
        this->_bReEntrant = reEntrant;
        this->_flavor = flag;
    }
    
    void SynchronizationAttribute::AcquireLock() {
        this->_mutex->WaitOne_a04a6b7360612836();
        {
            cli::lock_guard{this};
            this->_ownerThread = System::Threading::Thread::get_CurrentThread();
            this->_lockCount++;
        }
    }
    
    void SynchronizationAttribute::ReleaseLock() {
        {
            cli::lock_guard{this};
            if(((this->_lockCount > 0) && (this->_ownerThread ==  System::Threading::Thread::get_CurrentThread()))) 
            {
                this->_lockCount--;
                this->_mutex->ReleaseMutex();
                this->_ownerThread = nullptr;
            }
        }
    }
    
    void SynchronizationAttribute::GetPropertiesForNewContext_f6e9f6568c456816(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) {
        if((this->_flavor != 1)) 
        {
            ctorMsg->get_ContextProperties_6d65d78ae4ed4d3()->Add_985508e3bf9b7a73(this);
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* SynchronizationAttribute::GetClientContextSink_d46a0dc375cfe814(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) {
        return cli::gcnew<SynchronizedClientContextSink>(nextSink, this);
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* SynchronizationAttribute::GetServerContextSink_b934956cce20f850(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) {
        return cli::gcnew<SynchronizedServerContextSink>(nextSink, this);
    }
    
    bool SynchronizationAttribute::IsContextOK_7837aaab12d993b6(Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) {
        SynchronizationAttribute *prop = cli::as<SynchronizationAttribute*>(ctx->GetProperty_4fcc5db656115bfb(_T("Synchronization")));
        switch(this->_flavor) {
            case 1: case_1333: {
                return (prop ==  nullptr);
            }
            case 4: case_1334: {
                return (prop != nullptr);
            }
            case 8: case_1335: {
                return false;
            }
            case 2: case_1336: {
                return true;
            }
        }
        return false;
    }
    
    void SynchronizationAttribute::ExitContext() {
        if(System::Threading::Thread::get_CurrentContext()->get_IsDefaultContext()) 
        {
            return;
        }
        SynchronizationAttribute *prop = cli::as<SynchronizationAttribute*>(System::Threading::Thread::get_CurrentContext()->GetProperty_4fcc5db656115bfb(_T("Synchronization")));
        if((prop ==  nullptr)) 
        {
            return;
        }
        prop->set_Locked_3a9c4762984d3c2b(false);
    }
    
    void SynchronizationAttribute::EnterContext() {
        if(System::Threading::Thread::get_CurrentContext()->get_IsDefaultContext()) 
        {
            return;
        }
        SynchronizationAttribute *prop = cli::as<SynchronizationAttribute*>(System::Threading::Thread::get_CurrentContext()->GetProperty_4fcc5db656115bfb(_T("Synchronization")));
        if((prop ==  nullptr)) 
        {
            return;
        }
        prop->set_Locked_3a9c4762984d3c2b(true);
    }
    
    bool SynchronizationAttribute::get_IsReEntrant_8241801b08a6a7ac() {
        return this->_bReEntrant;
    }
    
    bool SynchronizationAttribute::get_Locked_379a90f1fd786988() {
        return this->_locked;
    }
    
    bool SynchronizationAttribute::set_Locked_3a9c4762984d3c2b(bool value) {
        if(value) 
        {
            this->_mutex->WaitOne_a04a6b7360612836();
            {
                cli::lock_guard{this};
                this->_lockCount++;
                if((this->_lockCount > 1)) 
                {
                    ReleaseLock();
                }
                this->_ownerThread = System::Threading::Thread::get_CurrentThread();
            }
        }
         else 
        {
            {
                cli::lock_guard{this};
                while(((this->_lockCount > 0) && (this->_ownerThread ==  System::Threading::Thread::get_CurrentThread()))) {
                    this->_lockCount--;
                    this->_mutex->ReleaseMutex();
                    this->_ownerThread = nullptr;
                }
            }
        }
        return get_Locked_379a90f1fd786988();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void SynchronizedClientContextSink::constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att) {
        this->_att = att;
        this->_next = next;
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* SynchronizedClientContextSink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        if(this->_att->get_IsReEntrant_8241801b08a6a7ac()) 
        {
            this->_att->ReleaseLock();
            replySink = cli::gcnew<SynchronizedContextReplySink>(replySink, this->_att, true);
        }
        return this->_next->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
    System::Runtime::Remoting::Messaging::IMessage* SynchronizedClientContextSink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        if(this->_att->get_IsReEntrant_8241801b08a6a7ac()) 
        {
            this->_att->ReleaseLock();
        }
        {
            cli::finally_guard([&]() {
                if(this->_att->get_IsReEntrant_8241801b08a6a7ac()) 
                {
                    this->_att->AcquireLock();
                }
            });
            return this->_next->SyncProcessMessage_d4949581639d4872(msg);
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* SynchronizedClientContextSink::get_NextSink() {
        return this->_next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void SynchronizedServerContextSink::constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att) {
        this->_att = att;
        this->_next = next;
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* SynchronizedServerContextSink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        this->_att->AcquireLock();
        replySink = cli::gcnew<SynchronizedContextReplySink>(replySink, this->_att, false);
        return this->_next->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
    System::Runtime::Remoting::Messaging::IMessage* SynchronizedServerContextSink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        this->_att->AcquireLock();
        {
            cli::finally_guard([&]() {
                this->_att->ReleaseLock();
            });
            return this->_next->SyncProcessMessage_d4949581639d4872(msg);
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* SynchronizedServerContextSink::get_NextSink() {
        return this->_next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Contexts {
    
    
    void SynchronizedContextReplySink::constructor(System::Runtime::Remoting::Messaging::IMessageSink* next, SynchronizationAttribute* att, bool newLock) {
        this->_newLock = newLock;
        this->_next = next;
        this->_att = att;
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* SynchronizedContextReplySink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Runtime::Remoting::Messaging::IMessage* SynchronizedContextReplySink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        if(this->_newLock) 
        {
            this->_att->AcquireLock();
        }
         else 
        {
            this->_att->ReleaseLock();
        }
        {
            cli::finally_guard([&]() {
                if(this->_newLock) 
                {
                    this->_att->ReleaseLock();
                }
            });
            return this->_next->SyncProcessMessage_d4949581639d4872(msg);
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* SynchronizedContextReplySink::get_NextSink() {
        return this->_next;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    
    void ClientSponsor::constructor() {
        this->renewal_time = cli::ctor<System::TimeSpan>(0, 2, 0);
    }
    
    void ClientSponsor::constructor(System::TimeSpan renewalTime) {
        this->renewal_time = renewalTime;
    }
    
    void ClientSponsor::Finalize_f66f0993c93af244() {
        {
            cli::finally_guard([&]() {
                Finalize_b946fbc32e26afd6();
            });
            Close();
        }
    }
    
    void ClientSponsor::Close() {
        for(auto tmp_377 : this->registered_objects->get_Values_4ed88b5f6e59ef25()) {
            auto obj = cli::cast<System::MarshalByRefObject*>(tmp_377);
            {
                ILease *lease = cli::as<ILease*>(obj->GetLifetimeService());
                lease->Unregister_8ceee2c7f59bf148(this);
            }
        }
        this->registered_objects->Clear_f1f405c8fa63a059();
    }
    
    System::Object* ClientSponsor::InitializeLifetimeService_8f02e9c96ffbe30f() {
        return System::MarshalByRefObject::InitializeLifetimeService_8f02e9c96ffbe30f();
    }
    
    bool ClientSponsor::Register(System::MarshalByRefObject* obj) {
        if(this->registered_objects->ContainsKey_5de2e202a0290d76(obj)) 
        {
            return false;
        }
        ILease *lease = cli::as<ILease*>(obj->GetLifetimeService());
        if((lease ==  nullptr)) 
        {
            return false;
        }
        lease->Register_29cd33cb094da73(this);
        this->registered_objects->Add_3f7ab157bcb41156(obj, obj);
        return true;
    }
    
    System::TimeSpan ClientSponsor::Renewal(ILease* lease) {
        return this->renewal_time;
    }
    
    void ClientSponsor::Unregister(System::MarshalByRefObject* obj) {
        if(!(this->registered_objects->ContainsKey_5de2e202a0290d76(obj))) 
        {
            return;
        }
        ILease *lease = cli::as<ILease*>(obj->GetLifetimeService());
        lease->Unregister_8ceee2c7f59bf148(this);
        this->registered_objects->Remove_fd653674dd8a5ac4(obj);
    }
    
    System::TimeSpan ClientSponsor::get_RenewalTime() {
        return this->renewal_time;
    }
    
    System::TimeSpan ClientSponsor::set_RenewalTime(System::TimeSpan value) {
        this->renewal_time = value;
        return get_RenewalTime();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    
    void Lease::constructor() {
        this->_currentState = LeaseState::Initial2;
        this->_initialLeaseTime = LifetimeServices::get_LeaseTime();
        this->_renewOnCallTime = LifetimeServices::get_RenewOnCallTime();
        this->_sponsorshipTimeout = LifetimeServices::get_SponsorshipTimeout();
        this->_leaseExpireTime = System::DateTime::op_Addition(System::DateTime::get_Now(), this->_initialLeaseTime);
    }
    
    void Lease::Activate() {
        this->_currentState = LeaseState::Active;
    }
    
    void Lease::Register(ISponsor* obj) {
        Register2(obj, (*System::TimeSpan::Zero));
    }
    
    void Lease::Register2(ISponsor* obj, System::TimeSpan renewalTime) {
        {
            cli::lock_guard{this};
            if((this->_sponsors ==  nullptr)) 
            {
                this->_sponsors = cli::gcnew<System::Collections::ArrayList>();
            }
            this->_sponsors->Add_e6a92085999ce388(obj);
        }
        if(System::TimeSpan::op_Inequality(renewalTime, (*System::TimeSpan::Zero))) 
        {
            Renew(renewalTime);
        }
    }
    
    System::TimeSpan Lease::Renew(System::TimeSpan renewalTime) {
        System::DateTime newTime = System::DateTime::op_Addition(System::DateTime::get_Now(), renewalTime);
        if(System::DateTime::op_GreaterThan(newTime, this->_leaseExpireTime)) 
        {
            this->_leaseExpireTime = newTime;
        }
        return this->get_CurrentLeaseTime();
    }
    
    void Lease::Unregister(ISponsor* obj) {
        {
            cli::lock_guard{this};
            if((this->_sponsors ==  nullptr)) 
            {
                return;
            }
            for(int32_t n = 0; (n < this->_sponsors->get_Count_2354963792616712()); n++){
                if(System::Object::ReferenceEquals(this->_sponsors->get_Item_fd0155f142ae570(n), obj)) 
                {
                    this->_sponsors->RemoveAt_2abea768d3273318(n);
                    break;
                }
            }
        }
    }
    
    void Lease::UpdateState() {
        if(((int32_t)(this->_currentState) != 2)) 
        {
            return;
        }
        if(System::TimeSpan::op_GreaterThan(this->get_CurrentLeaseTime(), (*System::TimeSpan::Zero))) 
        {
            return;
        }
        if((this->_sponsors != nullptr)) 
        {
            this->_currentState = LeaseState::Renewing;
            {
                cli::lock_guard{this};
                this->_renewingSponsors = cli::gcnew<System::Collections::Queue>(this->_sponsors);
            }
            CheckNextSponsor();
        }
         else 
        {
            this->_currentState = LeaseState::Expired;
        }
    }
    
    void Lease::CheckNextSponsor() {
        if((this->_renewingSponsors->get_Count_d68471db5ed73aae() ==  0)) 
        {
            this->_currentState = LeaseState::Expired;
            this->_renewingSponsors = nullptr;
            return;
        }
        ISponsor *nextSponsor = cli::cast<ISponsor*>(this->_renewingSponsors->Peek_8319b8ebd54b1ede());
        this->_renewalDelegate = cli::bind(nextSponsor, &ISponsor::Renewal_eed03694f8483857);
        System::IAsyncResult *ar = this->_renewalDelegate->BeginInvoke(this, nullptr, nullptr);
        System::Threading::ThreadPool::RegisterWaitForSingleObject3(ar->get_AsyncWaitHandle_7620505c49d113f3(), cli::bind(this, &Lease::ProcessSponsorResponse), ar, this->_sponsorshipTimeout, true);
    }
    
    void Lease::ProcessSponsorResponse(System::Object* state, bool timedOut) {
        if(!(timedOut)) 
        {
            try {
                System::IAsyncResult *ar = cli::cast<System::IAsyncResult*>(state);
                System::TimeSpan newSpan = this->_renewalDelegate->EndInvoke(ar);
                if(System::TimeSpan::op_Inequality(newSpan, (*System::TimeSpan::Zero))) 
                {
                    Renew(newSpan);
                    this->_currentState = LeaseState::Active;
                    this->_renewingSponsors = nullptr;
                    return;
                }
            }
            catch(...) {
            }
        }
        Unregister(cli::cast<ISponsor*>(this->_renewingSponsors->Dequeue_65b33648b3aa820f()));
        CheckNextSponsor();
    }
    
    System::TimeSpan Lease::get_CurrentLeaseTime() {
        return System::DateTime::op_Subtraction(this->_leaseExpireTime, System::DateTime::get_Now());
    }
    
    LeaseState Lease::get_CurrentState() {
        return this->_currentState;
    }
    
    System::TimeSpan Lease::get_InitialLeaseTime() {
        return this->_initialLeaseTime;
    }
    
    System::TimeSpan Lease::set_InitialLeaseTime(System::TimeSpan value) {
        if(((int32_t)(this->_currentState) != 1)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("InitialLeaseTime property can only be set when the lease is in initial state; state is "), cli::box(this->_currentState)));
        }
        this->_initialLeaseTime = value;
        this->_leaseExpireTime = System::DateTime::op_Addition(System::DateTime::get_Now(), this->_initialLeaseTime);
        if(System::TimeSpan::op_Equality(value, (*System::TimeSpan::Zero))) 
        {
            this->_currentState = LeaseState::Null;
        }
        return get_InitialLeaseTime();
    }
    
    System::TimeSpan Lease::get_RenewOnCallTime() {
        return this->_renewOnCallTime;
    }
    
    System::TimeSpan Lease::set_RenewOnCallTime(System::TimeSpan value) {
        if(((int32_t)(this->_currentState) != 1)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("RenewOnCallTime property can only be set when the lease is in initial state; state is "), cli::box(this->_currentState)));
        }
        this->_renewOnCallTime = value;
        return get_RenewOnCallTime();
    }
    
    System::TimeSpan Lease::get_SponsorshipTimeout() {
        return this->_sponsorshipTimeout;
    }
    
    System::TimeSpan Lease::set_SponsorshipTimeout(System::TimeSpan value) {
        if(((int32_t)(this->_currentState) != 1)) 
        {
            throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("SponsorshipTimeout property can only be set when the lease is in initial state; state is "), cli::box(this->_currentState)));
        }
        this->_sponsorshipTimeout = value;
        return get_SponsorshipTimeout();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    
    void LeaseManager::constructor() {
    }
    
    void LeaseManager::SetPollTime(System::TimeSpan timeSpan) {
        {
            cli::lock_guard{this->_objects->get_SyncRoot_edb1ba826807b569()};
            if((this->_timer != nullptr)) 
            {
                this->_timer->Change2(timeSpan, timeSpan);
            }
        }
    }
    
    void LeaseManager::TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity) {
        {
            cli::lock_guard{this->_objects->get_SyncRoot_edb1ba826807b569()};
            identity->get_Lease()->Activate();
            this->_objects->Add_e6a92085999ce388(identity);
            if((this->_timer ==  nullptr)) 
            {
                StartManager();
            }
        }
    }
    
    void LeaseManager::StopTrackingLifetime(System::Runtime::Remoting::ServerIdentity* identity) {
        {
            cli::lock_guard{this->_objects->get_SyncRoot_edb1ba826807b569()};
            this->_objects->Remove_2225381aaf812c6d(identity);
        }
    }
    
    void LeaseManager::StartManager() {
        this->_timer = cli::gcnew<System::Threading::Timer>(cli::bind(this, &LeaseManager::ManageLeases), nullptr, LifetimeServices::get_LeaseManagerPollTime(), LifetimeServices::get_LeaseManagerPollTime());
    }
    
    void LeaseManager::StopManager() {
        System::Threading::Timer *t = this->_timer;
        this->_timer = nullptr;
        t->Dispose();
    }
    
    void LeaseManager::ManageLeases(System::Object* state) {
        {
            cli::lock_guard{this->_objects->get_SyncRoot_edb1ba826807b569()};
            int32_t n = 0;
            while((n < this->_objects->get_Count_2354963792616712())) {
                System::Runtime::Remoting::ServerIdentity *ident = cli::cast<System::Runtime::Remoting::ServerIdentity*>(this->_objects->get_Item_fd0155f142ae570(n));
                ident->get_Lease()->UpdateState();
                if(((int32_t)(ident->get_Lease()->get_CurrentState()) ==  4)) 
                {
                    this->_objects->RemoveAt_2abea768d3273318(n);
                    ident->OnLifetimeExpired_e5bffd3f0ee9cda2();
                }
                 else 
                {
                    n++;
                }
            }
            if((this->_objects->get_Count_2354963792616712() ==  0)) 
            {
                StopManager();
            }
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    
    void LeaseSink::constructor(System::Runtime::Remoting::Messaging::IMessageSink* nextSink) {
        this->_nextSink = nextSink;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* LeaseSink::SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg) {
        RenewLease(msg);
        return this->_nextSink->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    System::Runtime::Remoting::Messaging::IMessageCtrl* LeaseSink::AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage* msg, System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
        RenewLease(msg);
        return this->_nextSink->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
    void LeaseSink::RenewLease(System::Runtime::Remoting::Messaging::IMessage* msg) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        ILease *lease = identity->get_Lease();
        if(((lease != nullptr) && System::TimeSpan::op_LessThan(lease->get_CurrentLeaseTime_495da45221ea9c91(), lease->get_RenewOnCallTime_d513f7649eedc4()))) 
        {
            lease->Renew_ac41c9e01b454d0a(lease->get_RenewOnCallTime_d513f7649eedc4());
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessageSink* LeaseSink::get_NextSink() {
        return this->_nextSink;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Lifetime {
    
    System::TimeSpan  LifetimeServices::_leaseManagerPollTime;
    System::TimeSpan  LifetimeServices::_leaseTime;
    System::TimeSpan  LifetimeServices::_renewOnCallTime;
    System::TimeSpan  LifetimeServices::_sponsorshipTimeout;
    LeaseManager*  LifetimeServices::_leaseManager;
    
    LifetimeServices::LifetimeServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void LifetimeServices::static_constructor() {
        _leaseManagerPollTime = System::TimeSpan::FromSeconds(10.);
        _leaseTime = System::TimeSpan::FromMinutes(5.);
        _renewOnCallTime = System::TimeSpan::FromMinutes(2.);
        _sponsorshipTimeout = System::TimeSpan::FromMinutes(2.);
    }
    
    void LifetimeServices::constructor() {
    }
    
    void LifetimeServices::TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity) {
        _leaseManager->TrackLifetime(identity);
    }
    
    void LifetimeServices::StopTrackingLifetime(System::Runtime::Remoting::ServerIdentity* identity) {
        _leaseManager->StopTrackingLifetime(identity);
    }
    
    System::TimeSpan LifetimeServices::get_LeaseManagerPollTime() {
        return _leaseManagerPollTime;
    }
    
    System::TimeSpan LifetimeServices::set_LeaseManagerPollTime(System::TimeSpan value) {
        _leaseManagerPollTime = value;
        _leaseManager->SetPollTime(value);
        return get_LeaseManagerPollTime();
    }
    
    System::TimeSpan LifetimeServices::get_LeaseTime() {
        return _leaseTime;
    }
    
    System::TimeSpan LifetimeServices::set_LeaseTime(System::TimeSpan value) {
        _leaseTime = value;
        return get_LeaseTime();
    }
    
    System::TimeSpan LifetimeServices::get_RenewOnCallTime() {
        return _renewOnCallTime;
    }
    
    System::TimeSpan LifetimeServices::set_RenewOnCallTime(System::TimeSpan value) {
        _renewOnCallTime = value;
        return get_RenewOnCallTime();
    }
    
    System::TimeSpan LifetimeServices::get_SponsorshipTimeout() {
        return _sponsorshipTimeout;
    }
    
    System::TimeSpan LifetimeServices::set_SponsorshipTimeout(System::TimeSpan value) {
        _sponsorshipTimeout = value;
        return get_SponsorshipTimeout();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ArgInfo::constructor(System::Reflection::MethodBase* method, ArgInfoType type) {
        this->_method = method;
        cli::array<System::Reflection::ParameterInfo*> *parameters = this->_method->GetParameters_9d17bcb549474c9();
        this->_paramMap = (new cli::array<int32_t>(parameters->get_Length()));
        this->_inoutArgCount = 0;
        if(((int32_t)(type) ==  0)) 
        {
            for(int32_t n = 0; (n < parameters->get_Length()); n++) {
                if(!(parameters->at(n)->get_ParameterType_97c5fa09a0b988d()->get_IsByRef())) 
                {
                    this->_paramMap->at(this->_inoutArgCount++) = n;
                }
            }
        }
         else 
        {
            for(int32_t n = 0; (n < parameters->get_Length()); n++) {
                if((parameters->at(n)->get_ParameterType_97c5fa09a0b988d()->get_IsByRef() || parameters->at(n)->get_IsOut())) 
                {
                    this->_paramMap->at(this->_inoutArgCount++) = n;
                }
            }
        }
    }
    
    int32_t ArgInfo::GetInOutArgIndex(int32_t inoutArgNum) {
        return this->_paramMap->at(inoutArgNum);
    }
    
    System::String* ArgInfo::GetInOutArgName_2fa2ff0ffc15d79f(int32_t index) {
        return this->_method->GetParameters_9d17bcb549474c9()->at(this->_paramMap->at(index))->get_Name_1ad7a68577256740();
    }
    
    int32_t ArgInfo::GetInOutArgCount() {
        return this->_inoutArgCount;
    }
    
    cli::array<System::Object*>* ArgInfo::GetInOutArgs(cli::array<System::Object*>* args) {
        cli::array<System::Object*> *inoutArgs = (new cli::array<System::Object*>(this->_inoutArgCount));
        for(int32_t n = 0; (n < this->_inoutArgCount); n++) {
            inoutArgs->at(n) = args->at(this->_paramMap->at(n));
        }
        return inoutArgs;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void AsyncResult::constructor() {
    }
    
    void AsyncResult::constructor(System::Threading::WaitCallback* cb, System::Object* state, bool capture_context) {
        this->async_state = state;
        this->async_delegate = cb;
        if(capture_context) 
        {
            this->current = System::Threading::ExecutionContext::Capture();
        }
    }
    
    IMessageCtrl* AsyncResult::AsyncProcessMessage_a01f2a1b514d028d(IMessage* msg, IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    IMessage* AsyncResult::GetReplyMessage_b937f2fda6203181() {
        return this->reply_message;
    }
    
    void AsyncResult::SetMessageCtrl_499f519e6c83af7c(IMessageCtrl* mc) {
        this->message_ctrl = mc;
    }
    
    void AsyncResult::SetCompletedSynchronously(bool completed) {
        this->sync_completed = completed;
    }
    
    IMessage* AsyncResult::EndInvoke() {
        {
            cli::lock_guard{this};
            if(this->completed) 
            {
                return this->reply_message;
            }
        }
        this->get_AsyncWaitHandle_f4b3f8abdd4ea96a()->WaitOne_a04a6b7360612836();
        return this->reply_message;
    }
    
    IMessage* AsyncResult::SyncProcessMessage_3a1c0f460fa2243a(IMessage* msg) {
        this->reply_message = msg;
        {
            cli::lock_guard{this};
            this->completed = true;
            if((this->handle != nullptr)) 
            {
                cli::cast<System::Threading::ManualResetEvent*>(this->get_AsyncWaitHandle_f4b3f8abdd4ea96a())->Set();
            }
        }
        if((this->async_callback != nullptr)) 
        {
            System::AsyncCallback *ac = cli::cast<System::AsyncCallback*>(this->async_callback);
            ac->Invoke(this);
        }
        return nullptr;
    }
    
    System::Object* AsyncResult::get_AsyncState_aad5ef5e6cedee67() {
        return this->async_state;
    }
    
    System::Threading::WaitHandle* AsyncResult::get_AsyncWaitHandle_f4b3f8abdd4ea96a() {
        {
            cli::lock_guard{this};
            if((this->handle ==  nullptr)) 
            {
                this->handle = cli::gcnew<System::Threading::ManualResetEvent>(this->completed);
            }
            return this->handle;
        }
    }
    
    bool AsyncResult::get_CompletedSynchronously_86fab18081573bcb() {
        return this->sync_completed;
    }
    
    bool AsyncResult::get_IsCompleted_6b14984a80e30c47() {
        return this->completed;
    }
    
    bool AsyncResult::get_EndInvokeCalled() {
        return this->endinvoke_called;
    }
    
    bool AsyncResult::set_EndInvokeCalled(bool value) {
        this->endinvoke_called = value;
        return get_EndInvokeCalled();
    }
    
    System::Object* AsyncResult::get_AsyncDelegate_eba6a70b3de54142() {
        return this->async_delegate;
    }
    
    IMessageSink* AsyncResult::get_NextSink() {
        return nullptr;
    }
    
    MonoMethodMessage* AsyncResult::get_CallMessage() {
        return this->call_message;
    }
    
    MonoMethodMessage* AsyncResult::set_CallMessage(MonoMethodMessage* value) {
        this->call_message = value;
        return get_CallMessage();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CADArgHolder::constructor(int32_t i) {
        this->index = i;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CADObjRef::constructor(System::Runtime::Remoting::ObjRef* o, int32_t sourceDomain) {
        this->objref = o;
        this->SourceDomain = sourceDomain;
    }
    
    System::String* CADObjRef::get_TypeName() {
        return this->objref->get_TypeInfo_b4ea890a0c9f26cd()->get_TypeName_e368785a4c79e626();
    }
    
    System::String* CADObjRef::get_URI() {
        return this->objref->get_URI_8a7d9b91992639ed();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CADMessageBase::constructor() {
    }
    
    int32_t CADMessageBase::MarshalProperties(System::Collections::IDictionary* dict, System::Collections::ArrayList* args) {
        System::Collections::IDictionary *serDict = dict;
        int32_t count = 0;
        MethodDictionary *msgDict = cli::as<MethodDictionary*>(dict);
        if((msgDict != nullptr)) 
        {
            if(msgDict->get_HasInternalProperties()) 
            {
                serDict = msgDict->get_InternalProperties();
                if((serDict != nullptr)) 
                {
                    for(auto tmp_378 : serDict) {
                        auto e = cli::cast<System::Collections::DictionaryEntry>(tmp_378);
                        {
                            if((args ==  nullptr)) 
                            {
                                args = cli::gcnew<System::Collections::ArrayList>();
                            }
                            args->Add_e6a92085999ce388(cli::box(e));
                            count++;
                        }
                    }
                }
            }
        }
         else 
        {
            if((dict != nullptr)) 
            {
                for(auto tmp_379 : serDict) {
                    auto e = cli::cast<System::Collections::DictionaryEntry>(tmp_379);
                    {
                        if((args ==  nullptr)) 
                        {
                            args = cli::gcnew<System::Collections::ArrayList>();
                        }
                        args->Add_e6a92085999ce388(cli::box(e));
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    void CADMessageBase::UnmarshalProperties(System::Collections::IDictionary* dict, int32_t count, System::Collections::ArrayList* args) {
        for(int32_t i = 0; (i < count); i++){
            System::Collections::DictionaryEntry e = cli::unbox<System::Collections::DictionaryEntry>(args->get_Item_fd0155f142ae570(i));
            dict->set_Item_a0c4aaef01cc13c2(e->get_Key(), e->get_Value());
        }
    }
    
    bool CADMessageBase::IsPossibleToIgnoreMarshal(System::Object* obj) {
        System::Type *objType = obj->GetType();
        if((objType->get_IsPrimitive() || System::Type::op_Equality2(objType, cli::typeof<System::Type>::info))) 
        {
            return true;
        }
        if(((objType->get_IsArray() && objType->GetElementType_ab5070dbbfe66f5f()->get_IsPrimitive()) && (cli::cast<System::Array*>(obj)->get_Rank() ==  1))) 
        {
            return true;
        }
        if(((cli::is<System::String>(obj) || cli::is<System::DateTime>(obj)) || cli::is<System::TimeSpan>(obj))) 
        {
            return true;
        }
        return false;
    }
    
    System::Object* CADMessageBase::MarshalArgument(System::Object* arg, System::Collections::ArrayList* args) {
        if((arg ==  nullptr)) 
        {
            return nullptr;
        }
        if(IsPossibleToIgnoreMarshal(arg)) 
        {
            return arg;
        }
        System::MarshalByRefObject *mbr = cli::as<System::MarshalByRefObject*>(arg);
        if((mbr != nullptr)) 
        {
            if(System::Runtime::Remoting::RemotingServices::IsTransparentProxy(mbr)) 
            {
            }
             else 
            {
                System::Runtime::Remoting::ObjRef *objRef = System::Runtime::Remoting::RemotingServices::Marshal2(mbr);
                return cli::gcnew<CADObjRef>(objRef, System::Threading::Thread::GetDomainID());
            }
        }
        if((args ==  nullptr)) 
        {
            args = cli::gcnew<System::Collections::ArrayList>();
        }
        args->Add_e6a92085999ce388(arg);
        return cli::gcnew<CADArgHolder>((args->get_Count_2354963792616712() - 1));
    }
    
    System::Object* CADMessageBase::UnmarshalArgument(System::Object* arg, System::Collections::ArrayList* args) {
        if((arg ==  nullptr)) 
        {
            return nullptr;
        }
        CADArgHolder *holder = cli::as<CADArgHolder*>(arg);
        if((holder != nullptr)) 
        {
            return args->get_Item_fd0155f142ae570(holder->index);
        }
        CADObjRef *objref = cli::as<CADObjRef*>(arg);
        if((objref != nullptr)) 
        {
            System::String *typeName = System::String::Copy(objref->get_TypeName());
            System::String *uri = System::String::Copy(objref->get_URI());
            int32_t domid = objref->SourceDomain;
            System::Runtime::Remoting::ChannelInfo *cinfo = cli::gcnew<System::Runtime::Remoting::ChannelInfo>(cli::gcnew<System::Runtime::Remoting::Channels::CrossAppDomainData>(domid));
            System::Runtime::Remoting::ObjRef *localRef = cli::gcnew<System::Runtime::Remoting::ObjRef>(typeName, uri, cinfo);
            return System::Runtime::Remoting::RemotingServices::Unmarshal(localRef);
        }
        if(cli::is<System::Array>(arg)) 
        {
            System::Array *argb = cli::cast<System::Array*>(arg);
            System::Array *argn;
            switch(System::Type::GetTypeCode(arg->GetType()->GetElementType_ab5070dbbfe66f5f())) {
                case System::TypeCode::Boolean2: case_1337: {
                    argn = (new cli::array<bool>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Byte2: case_1338: {
                    argn = (new cli::array<unsigned char>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Char2: case_1339: {
                    argn = (new cli::array<char16_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Decimal2: case_1340: {
                    argn = (new cli::array<System::Decimal>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Double2: case_1341: {
                    argn = (new cli::array<double>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Int162: case_1342: {
                    argn = (new cli::array<int16_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Int322: case_1343: {
                    argn = (new cli::array<int32_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Int642: case_1344: {
                    argn = (new cli::array<int64_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::SByte2: case_1345: {
                    argn = (new cli::array<signed char>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::Single2: case_1346: {
                    argn = (new cli::array<float>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::UInt162: case_1347: {
                    argn = (new cli::array<uint16_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::UInt322: case_1348: {
                    argn = (new cli::array<uint32_t>(argb->get_Length()));
                    break;
                }
                case System::TypeCode::UInt642: case_1349: {
                    argn = (new cli::array<uint64_t>(argb->get_Length()));
                    break;
                }
                default: case_1350: {
                    throw cli::gcnew<System::NotSupportedException>();
                }
            }
            argb->CopyTo(argn, 0);
            return argn;
        }
        switch(System::Type::GetTypeCode(arg->GetType())) {
            case System::TypeCode::Boolean2: case_1351: {
                return cli::box(cli::unbox<bool>(arg));
            }
            case System::TypeCode::Byte2: case_1352: {
                return cli::box(cli::unbox<unsigned char>(arg));
            }
            case System::TypeCode::Char2: case_1353: {
                return cli::box(cli::unbox<char16_t>(arg));
            }
            case System::TypeCode::Decimal2: case_1354: {
                return cli::box(cli::unbox<System::Decimal>(arg));
            }
            case System::TypeCode::Double2: case_1355: {
                return cli::box(cli::unbox<double>(arg));
            }
            case System::TypeCode::Int162: case_1356: {
                return cli::box(cli::unbox<int16_t>(arg));
            }
            case System::TypeCode::Int322: case_1357: {
                return cli::box(cli::unbox<int32_t>(arg));
            }
            case System::TypeCode::Int642: case_1358: {
                return cli::box(cli::unbox<int64_t>(arg));
            }
            case System::TypeCode::SByte2: case_1359: {
                return cli::box(cli::unbox<signed char>(arg));
            }
            case System::TypeCode::Single2: case_1360: {
                return cli::box(cli::unbox<float>(arg));
            }
            case System::TypeCode::UInt162: case_1361: {
                return cli::box(cli::unbox<uint16_t>(arg));
            }
            case System::TypeCode::UInt322: case_1362: {
                return cli::box(cli::unbox<uint32_t>(arg));
            }
            case System::TypeCode::UInt642: case_1363: {
                return cli::box(cli::unbox<uint64_t>(arg));
            }
            case System::TypeCode::String2: case_1364: {
                return System::String::Copy(cli::cast<System::String*>(arg));
            }
            case System::TypeCode::DateTime2: case_1365: {
                return cli::box(cli::ctor<System::DateTime>(cli::unbox<System::DateTime>(arg)->get_Ticks()));
            }
            default: case_1366: {
                if(cli::is<System::TimeSpan>(arg)) 
                {
                    return cli::box(cli::ctor<System::TimeSpan>(cli::unbox<System::TimeSpan>(arg)->get_Ticks()));
                }
                if(cli::is<::System::IntPtr>(arg)) 
                {
                    return cli::box(cli::unbox<void*>(arg));
                }
                break;
            }
        }
        throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Parameter of type "), arg->GetType()));
    }
    
    cli::array<System::Object*>* CADMessageBase::MarshalArguments(cli::array<System::Object*>* arguments, System::Collections::ArrayList* args) {
        cli::array<System::Object*> *marshalledArgs = (new cli::array<System::Object*>(arguments->get_Length()));
        int32_t total = arguments->get_Length();
        for(int32_t i = 0; (i < total); i++) {
            marshalledArgs->at(i) = MarshalArgument(arguments->at(i), args);
        }
        return marshalledArgs;
    }
    
    cli::array<System::Object*>* CADMessageBase::UnmarshalArguments(cli::array<System::Object*>* arguments, System::Collections::ArrayList* args) {
        cli::array<System::Object*> *unmarshalledArgs = (new cli::array<System::Object*>(arguments->get_Length()));
        int32_t total = arguments->get_Length();
        for(int32_t i = 0; (i < total); i++) {
            unmarshalledArgs->at(i) = UnmarshalArgument(arguments->at(i), args);
        }
        return unmarshalledArgs;
    }
    
    void CADMessageBase::SaveLogicalCallContext(IMethodMessage* msg, System::Collections::ArrayList* serializeList) {
        if(((msg->get_LogicalCallContext_a19aeadfaffa89b7() != nullptr) && msg->get_LogicalCallContext_a19aeadfaffa89b7()->get_HasInfo())) 
        {
            if((serializeList ==  nullptr)) 
            {
                serializeList = cli::gcnew<System::Collections::ArrayList>();
            }
            this->_callContext = cli::gcnew<CADArgHolder>(serializeList->get_Count_2354963792616712());
            serializeList->Add_e6a92085999ce388(msg->get_LogicalCallContext_a19aeadfaffa89b7());
        }
    }
    
    LogicalCallContext* CADMessageBase::GetLogicalCallContext(System::Collections::ArrayList* args) {
        if((this->_callContext ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::cast<LogicalCallContext*>(args->get_Item_fd0155f142ae570(this->_callContext->index));
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CADMethodCallMessage::constructor(IMethodCallMessage* callMsg) {
        this->_uri = callMsg->get_Uri_a772cc17d83f8740();
        this->MethodHandle = callMsg->get_MethodBase_be82dccd2d92b9f6()->get_MethodHandle_a92ba3e25e0a5ec8();
        this->FullTypeName = callMsg->get_MethodBase_be82dccd2d92b9f6()->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
        System::Collections::ArrayList *serializeList = nullptr;
        this->_propertyCount = CADMessageBase::MarshalProperties(callMsg->get_Properties_d88088440249f163(), serializeList);
        this->_args = CADMessageBase::MarshalArguments(callMsg->get_Args_1b1b87289e375adf(), serializeList);
        CADMessageBase::SaveLogicalCallContext(callMsg, serializeList);
        if((serializeList != nullptr)) 
        {
            System::IO::MemoryStream *stm = System::Runtime::Remoting::Channels::CADSerializer::SerializeObject(serializeList->ToArray_360bcd462eb48114());
            this->_serializedArgs = stm->GetBuffer_21f804ce00c165c2();
        }
    }
    
    CADMethodCallMessage* CADMethodCallMessage::Create(IMessage* callMsg) {
        IMethodCallMessage *msg = cli::as<IMethodCallMessage*>(callMsg);
        if((msg ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::gcnew<CADMethodCallMessage>(msg);
    }
    
    System::Collections::ArrayList* CADMethodCallMessage::GetArguments() {
        System::Collections::ArrayList *ret = nullptr;
        if((this->_serializedArgs != nullptr)) 
        {
            cli::array<System::Object*> *oret = cli::cast<cli::array<System::Object*>*>(System::Runtime::Remoting::Channels::CADSerializer::DeserializeObject(cli::gcnew<System::IO::MemoryStream>(this->_serializedArgs)));
            ret = cli::gcnew<System::Collections::ArrayList>(oret);
            this->_serializedArgs = nullptr;
        }
        return ret;
    }
    
    cli::array<System::Object*>* CADMethodCallMessage::GetArgs(System::Collections::ArrayList* args) {
        return CADMessageBase::UnmarshalArguments(this->_args, args);
    }
    
    cli::array<System::Type*>* CADMethodCallMessage::GetSignature(System::Reflection::MethodBase* methodBase, bool load) {
        cli::array<System::Reflection::ParameterInfo*> *pars = methodBase->GetParameters_9d17bcb549474c9();
        cli::array<System::Type*> *signature = (new cli::array<System::Type*>(pars->get_Length()));
        for(int32_t n = 0; (n < pars->get_Length()); n++){
            if(load) 
            {
                signature->at(n) = System::Type::GetType5(pars->at(n)->get_ParameterType_97c5fa09a0b988d()->get_AssemblyQualifiedName_cea373c2171bd483(), true);
            }
             else 
            {
                signature->at(n) = pars->at(n)->get_ParameterType_97c5fa09a0b988d();
            }
        }
        return signature;
    }
    
    System::Reflection::MethodBase* CADMethodCallMessage::GetMethod() {
        System::Reflection::MethodBase *methodBase = nullptr;
        System::Type *tt = System::Type::GetType5(this->FullTypeName, true);
        if((tt->get_IsGenericType_4db8ddd5b97f3c14() || tt->get_IsGenericTypeDefinition_8008dd501dc43926())) 
        {
            methodBase = System::Reflection::MethodBase::GetMethodFromHandleNoGenericCheck(this->MethodHandle);
        }
         else 
        {
            methodBase = System::Reflection::MethodBase::GetMethodFromHandle(this->MethodHandle);
        }
        if(System::Type::op_Inequality2(tt, methodBase->get_DeclaringType_6121cd6a84393166())) 
        {
            cli::array<System::Type*> *signature = GetSignature(methodBase, true);
            if(methodBase->get_IsGenericMethod_7e509e51546ea990()) 
            {
                cli::array<System::Reflection::MethodBase*> *methods = tt->GetMethods_c5b4e5d4877e6672((System::Reflection::BindingFlags)52L)->template CovariantCast<System::Reflection::MethodBase*>();
                cli::array<System::Type*> *base_args = methodBase->GetGenericArguments_77cf5f406b341958();
                for(auto tmp_380 : methods) {
                    auto method = cli::cast<System::Reflection::MethodBase*>(tmp_380);
                    {
                        if((!(method->get_IsGenericMethod_7e509e51546ea990()) || System::String::op_Inequality(method->get_Name_50fad5fa936c3ae2(), methodBase->get_Name_50fad5fa936c3ae2()))) 
                        {
                            continue;
                        }
                        cli::array<System::Type*> *method_args = method->GetGenericArguments_77cf5f406b341958();
                        if((base_args->get_Length() != method_args->get_Length())) 
                        {
                            continue;
                        }
                        System::Reflection::MethodInfo *method_instance = cli::cast<System::Reflection::MethodInfo*>(method)->MakeGenericMethod_6fb56e5d44bf2eff(base_args);
                        cli::array<System::Type*> *base_sig = GetSignature(method_instance, false);
                        if((base_sig->get_Length() != signature->get_Length())) 
                        {
                            continue;
                        }
                        bool dont = false;
                        for(int32_t i = (base_sig->get_Length() - 1); (i >= 0); i--){
                            if(System::Type::op_Inequality2(base_sig->at(i), signature->at(i))) 
                            {
                                dont = true;
                                break;
                            }
                        }
                        if(dont) 
                        {
                            continue;
                        }
                        return method_instance;
                    }
                }
                return methodBase;
            }
            System::Reflection::MethodBase *mb = tt->GetMethod5(methodBase->get_Name_50fad5fa936c3ae2(), (System::Reflection::BindingFlags)52L, nullptr, signature, nullptr);
            if(System::Reflection::MethodBase::op_Equality2(mb, nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Method \'"), methodBase->get_Name_50fad5fa936c3ae2(), _T("\' not found in type \'"), tt, _T("\'")));
            }
            return mb;
        }
        return methodBase;
    }
    
    System::String* CADMethodCallMessage::get_Uri() {
        return this->_uri;
    }
    
    int32_t CADMethodCallMessage::get_PropertiesCount() {
        return this->_propertyCount;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CADMethodReturnMessage::constructor(IMethodReturnMessage* retMsg) {
        System::Collections::ArrayList *serializeList = nullptr;
        this->_propertyCount = CADMessageBase::MarshalProperties(retMsg->get_Properties_d88088440249f163(), serializeList);
        this->_returnValue = CADMessageBase::MarshalArgument(retMsg->get_ReturnValue_5e8804a33ce4fa71(), serializeList);
        this->_args = CADMessageBase::MarshalArguments(retMsg->get_Args_1b1b87289e375adf(), serializeList);
        if((retMsg->get_Exception_f355b7f547514947() != nullptr)) 
        {
            if((serializeList ==  nullptr)) 
            {
                serializeList = cli::gcnew<System::Collections::ArrayList>();
            }
            this->_exception = cli::gcnew<CADArgHolder>(serializeList->get_Count_2354963792616712());
            serializeList->Add_e6a92085999ce388(retMsg->get_Exception_f355b7f547514947());
        }
        CADMessageBase::SaveLogicalCallContext(retMsg, serializeList);
        if((serializeList != nullptr)) 
        {
            System::IO::MemoryStream *stm = System::Runtime::Remoting::Channels::CADSerializer::SerializeObject(serializeList->ToArray_360bcd462eb48114());
            this->_serializedArgs = stm->GetBuffer_21f804ce00c165c2();
        }
    }
    
    CADMethodReturnMessage* CADMethodReturnMessage::Create(IMessage* callMsg) {
        IMethodReturnMessage *msg = cli::as<IMethodReturnMessage*>(callMsg);
        if((msg ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::gcnew<CADMethodReturnMessage>(msg);
    }
    
    System::Collections::ArrayList* CADMethodReturnMessage::GetArguments() {
        System::Collections::ArrayList *ret = nullptr;
        if((this->_serializedArgs != nullptr)) 
        {
            cli::array<System::Object*> *oret = cli::cast<cli::array<System::Object*>*>(System::Runtime::Remoting::Channels::CADSerializer::DeserializeObject(cli::gcnew<System::IO::MemoryStream>(this->_serializedArgs)));
            ret = cli::gcnew<System::Collections::ArrayList>(oret);
            this->_serializedArgs = nullptr;
        }
        return ret;
    }
    
    cli::array<System::Object*>* CADMethodReturnMessage::GetArgs(System::Collections::ArrayList* args) {
        return CADMessageBase::UnmarshalArguments(this->_args, args);
    }
    
    System::Object* CADMethodReturnMessage::GetReturnValue(System::Collections::ArrayList* args) {
        return CADMessageBase::UnmarshalArgument(this->_returnValue, args);
    }
    
    System::Exception* CADMethodReturnMessage::GetException(System::Collections::ArrayList* args) {
        if((this->_exception ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::cast<System::Exception*>(args->get_Item_fd0155f142ae570(this->_exception->index));
    }
    
    int32_t CADMethodReturnMessage::get_PropertiesCount() {
        return this->_propertyCount;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<Header*>*  CallContext::Headers;
    System::Collections::Hashtable*  CallContext::datastore;
    System::Object*  CallContext::hostContext;
    
    void CallContext::constructor() {
    }
    
    void CallContext::FreeNamedDataSlot(System::String* name) {
        CallContext::get_Datastore()->Remove_fd653674dd8a5ac4(name);
    }
    
    System::Object* CallContext::GetData(System::String* name) {
        return CallContext::get_Datastore()->get_Item_d75c6e706b965758(name);
    }
    
    void CallContext::SetData(System::String* name, System::Object* data) {
        CallContext::get_Datastore()->set_Item_84c7e24d9caa09(name, data);
    }
    
    System::Object* CallContext::LogicalGetData(System::String* name) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CallContext::LogicalSetData(System::String* name, System::Object* data) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<Header*>* CallContext::GetHeaders() {
        return Headers;
    }
    
    void CallContext::SetHeaders(cli::array<Header*>* headers) {
        Headers = headers;
    }
    
    LogicalCallContext* CallContext::CreateLogicalCallContext(bool createEmpty) {
        LogicalCallContext *ctx = nullptr;
        if((datastore != nullptr)) 
        {
            for(auto tmp_381 : datastore) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_381);
                if(cli::is<ILogicalThreadAffinative>(entry->get_Value())) 
                {
                    if((ctx ==  nullptr)) 
                    {
                        ctx = cli::gcnew<LogicalCallContext>();
                    }
                    ctx->SetData(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
                }
            }
        }
        if(((ctx ==  nullptr) && createEmpty)) 
        {
            return cli::gcnew<LogicalCallContext>();
        }
         else 
        {
            return ctx;
        }
    }
    
    System::Object* CallContext::SetCurrentCallContext(LogicalCallContext* ctx) {
        System::Object *oldData = datastore;
        if(((ctx != nullptr) && ctx->get_HasInfo())) 
        {
            datastore = cli::cast<System::Collections::Hashtable*>(ctx->get_Datastore()->Clone_7f5df2dba23978b());
        }
         else 
        {
            datastore = nullptr;
        }
        return oldData;
    }
    
    void CallContext::UpdateCurrentCallContext(LogicalCallContext* ctx) {
        System::Collections::Hashtable *data = ctx->get_Datastore();
        for(auto tmp_382 : data) {
            auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_382);
            SetData(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
        }
    }
    
    void CallContext::RestoreCallContext(System::Object* oldContext) {
        datastore = cli::cast<System::Collections::Hashtable*>(oldContext);
    }
    
    System::Object* CallContext::get_HostContext() {
        return hostContext;
    }
    
    System::Object* CallContext::set_HostContext(System::Object* value) {
        hostContext = value;
        return get_HostContext();
    }
    
    System::Collections::Hashtable* CallContext::get_Datastore() {
        System::Collections::Hashtable *r = datastore;
        if((r ==  nullptr)) 
        {
            return datastore = cli::gcnew<System::Collections::Hashtable>();
        }
        return r;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ClientContextTerminatorSink::constructor(System::Runtime::Remoting::Contexts::Context2* ctx) {
        this->_context = ctx;
    }
    
    IMessage* ClientContextTerminatorSink::SyncProcessMessage(IMessage* msg) {
        IMessage *res;
        System::Runtime::Remoting::Contexts::Context2::NotifyGlobalDynamicSinks(true, msg, true, false);
        this->_context->NotifyDynamicSinks(true, msg, true, false);
        if(cli::is<System::Runtime::Remoting::Activation::IConstructionCallMessage>(msg)) 
        {
            res = System::Runtime::Remoting::Activation::ActivationServices::RemoteActivate(cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(msg));
        }
         else 
        {
            System::Runtime::Remoting::Identity *identity = System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg);
            res = identity->get_ChannelSink()->SyncProcessMessage_d4949581639d4872(msg);
        }
        System::Runtime::Remoting::Contexts::Context2::NotifyGlobalDynamicSinks(false, msg, true, false);
        this->_context->NotifyDynamicSinks(false, msg, true, false);
        return res;
    }
    
    IMessageCtrl* ClientContextTerminatorSink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        if((this->_context->get_HasDynamicSinks() || System::Runtime::Remoting::Contexts::Context2::get_HasGlobalDynamicSinks())) 
        {
            System::Runtime::Remoting::Contexts::Context2::NotifyGlobalDynamicSinks(true, msg, true, true);
            this->_context->NotifyDynamicSinks(true, msg, true, true);
            if((replySink != nullptr)) 
            {
                replySink = cli::gcnew<ClientContextReplySink>(this->_context, replySink);
            }
        }
        System::Runtime::Remoting::Identity *identity = System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg);
        IMessageCtrl *res = identity->get_ChannelSink()->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
        if(((replySink ==  nullptr) && (this->_context->get_HasDynamicSinks() || System::Runtime::Remoting::Contexts::Context2::get_HasGlobalDynamicSinks()))) 
        {
            System::Runtime::Remoting::Contexts::Context2::NotifyGlobalDynamicSinks(false, msg, true, true);
            this->_context->NotifyDynamicSinks(false, msg, true, true);
        }
        return res;
    }
    
    IMessageSink* ClientContextTerminatorSink::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ClientContextReplySink::constructor(System::Runtime::Remoting::Contexts::Context2* ctx, IMessageSink* replySink) {
        this->_replySink = replySink;
        this->_context = ctx;
    }
    
    IMessage* ClientContextReplySink::SyncProcessMessage(IMessage* msg) {
        System::Runtime::Remoting::Contexts::Context2::NotifyGlobalDynamicSinks(false, msg, true, true);
        this->_context->NotifyDynamicSinks(false, msg, true, true);
        return this->_replySink->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    IMessageCtrl* ClientContextReplySink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    IMessageSink* ClientContextReplySink::get_NextSink() {
        return this->_replySink;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ConstructionCall::constructor(IMessage* m) {
        this->_activationTypeName = this->get_TypeName();
        this->_isContextOk = true;
    }
    
    void ConstructionCall::constructor(System::Type* type) {
        this->_activationType = type;
        this->_activationTypeName = type->get_AssemblyQualifiedName_cea373c2171bd483();
        this->_isContextOk = true;
    }
    
    void ConstructionCall::constructor(cli::array<Header*>* headers) {
    }
    
    void ConstructionCall::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void ConstructionCall::InitDictionary_dbfe50419d0adffb() {
        ConstructionCallDictionary *props = cli::gcnew<ConstructionCallDictionary>(this);
        this->ExternalProperties = props;
        this->InternalProperties = props->GetInternalProperties();
    }
    
    void ConstructionCall::SetActivationAttributes(cli::array<System::Object*>* attributes) {
        this->_activationAttributes = attributes;
    }
    
    void ConstructionCall::InitMethodProperty_cd5bad7ed64a6b8e(System::String* key, System::Object* value) {
        System::String* tmp_383 = key;
        ::System::Int32 tmp_384 = -1;
        if(::System::String::Equals3(tmp_383, _T("__Activator"))) tmp_384 = 0;
        if(::System::String::Equals3(tmp_383, _T("__CallSiteActivationAttributes"))) tmp_384 = 1;
        if(::System::String::Equals3(tmp_383, _T("__ActivationType"))) tmp_384 = 2;
        if(::System::String::Equals3(tmp_383, _T("__ContextProperties"))) tmp_384 = 3;
        if(::System::String::Equals3(tmp_383, _T("__ActivationTypeName"))) tmp_384 = 4;
        switch(tmp_384)
        {
            case 0: case_1367: 
            {
                this->_activator = cli::cast<System::Runtime::Remoting::Activation::IActivator*>(value);
                return;
            }
            case 1: case_1368: 
            {
                this->_activationAttributes = cli::cast<cli::array<System::Object*>*>(value);
                return;
            }
            case 2: case_1369: 
            {
                this->_activationType = cli::cast<System::Type*>(value);
                return;
            }
            case 3: case_1370: 
            {
                this->_contextProperties = cli::cast<System::Collections::IList*>(value);
                return;
            }
            case 4: case_1371: 
            {
                this->_activationTypeName = cli::cast<System::String*>(value);
                return;
            }
            default: case_1372: 
            {
                MethodCall::InitMethodProperty_cd5bad7ed64a6b8e(key, value);
                return;
            }
        }
    }
    
    void ConstructionCall::GetObjectData_972cb159043c8ab0(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        MethodCall::GetObjectData_972cb159043c8ab0(info, context);
        System::Collections::IList *props = this->_contextProperties;
        if(((props != nullptr) && (props->get_Count_8f254f3dd8e2403() ==  0))) 
        {
            props = nullptr;
        }
        info->AddValue16(_T("__Activator"), this->_activator);
        info->AddValue16(_T("__CallSiteActivationAttributes"), this->_activationAttributes);
        info->AddValue16(_T("__ActivationType"), nullptr);
        info->AddValue16(_T("__ContextProperties"), props);
        info->AddValue16(_T("__ActivationTypeName"), this->_activationTypeName);
    }
    
    bool ConstructionCall::get_IsContextOk() {
        return this->_isContextOk;
    }
    
    bool ConstructionCall::set_IsContextOk(bool value) {
        this->_isContextOk = value;
        return get_IsContextOk();
    }
    
    System::Type* ConstructionCall::get_ActivationType() {
        if(System::Type::op_Equality2(this->_activationType, nullptr)) 
        {
            this->_activationType = System::Type::GetType4(this->_activationTypeName);
        }
        return this->_activationType;
    }
    
    System::String* ConstructionCall::get_ActivationTypeName() {
        return this->_activationTypeName;
    }
    
    System::Runtime::Remoting::Activation::IActivator* ConstructionCall::get_Activator() {
        return this->_activator;
    }
    
    System::Runtime::Remoting::Activation::IActivator* ConstructionCall::set_Activator(System::Runtime::Remoting::Activation::IActivator* value) {
        this->_activator = value;
        return get_Activator();
    }
    
    cli::array<System::Object*>* ConstructionCall::get_CallSiteActivationAttributes() {
        return this->_activationAttributes;
    }
    
    System::Collections::IList* ConstructionCall::get_ContextProperties() {
        if((this->_contextProperties ==  nullptr)) 
        {
            this->_contextProperties = cli::gcnew<System::Collections::ArrayList>();
        }
        return this->_contextProperties;
    }
    
    System::Collections::IDictionary* ConstructionCall::get_Properties_c453f36b3f043bdc() {
        return MethodCall::get_Properties_c453f36b3f043bdc();
    }
    
    System::Runtime::Remoting::Proxies::RemotingProxy* ConstructionCall::get_SourceProxy() {
        return this->_sourceProxy;
    }
    
    System::Runtime::Remoting::Proxies::RemotingProxy* ConstructionCall::set_SourceProxy(System::Runtime::Remoting::Proxies::RemotingProxy* value) {
        this->_sourceProxy = value;
        return get_SourceProxy();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<System::String*>*  ConstructionCallDictionary::InternalKeys;
    
    ConstructionCallDictionary::ConstructionCallDictionary()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ConstructionCallDictionary::constructor(System::Runtime::Remoting::Activation::IConstructionCallMessage* message) {
        this->set_MethodKeys(InternalKeys);
    }
    
    void ConstructionCallDictionary::static_constructor() {
    }
    
    System::Object* ConstructionCallDictionary::GetMethodProperty_4070f877cd8723cd(System::String* key) {
        System::String* tmp_385 = key;
        ::System::Int32 tmp_386 = -1;
        if(::System::String::Equals3(tmp_385, _T("__Activator"))) tmp_386 = 0;
        if(::System::String::Equals3(tmp_385, _T("__CallSiteActivationAttributes"))) tmp_386 = 1;
        if(::System::String::Equals3(tmp_385, _T("__ActivationType"))) tmp_386 = 2;
        if(::System::String::Equals3(tmp_385, _T("__ContextProperties"))) tmp_386 = 3;
        if(::System::String::Equals3(tmp_385, _T("__ActivationTypeName"))) tmp_386 = 4;
        switch(tmp_386)
        {
            case 0: case_1373: 
            {
                return cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->get_Activator_e0d47498ed580034();
            }
            case 1: case_1374: 
            {
                return cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->get_CallSiteActivationAttributes_87621fd6aed1643f();
            }
            case 2: case_1375: 
            {
                return cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->get_ActivationType_84a662e1d53c6b9a();
            }
            case 3: case_1376: 
            {
                return cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->get_ContextProperties_6d65d78ae4ed4d3();
            }
            case 4: case_1377: 
            {
                return cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->get_ActivationTypeName_1af5753a691619eb();
            }
            default: case_1378: 
            {
                return MethodDictionary::GetMethodProperty_4070f877cd8723cd(key);
            }
        }
    }
    
    void ConstructionCallDictionary::SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) {
        System::String* tmp_387 = key;
        ::System::Int32 tmp_388 = -1;
        if(::System::String::Equals3(tmp_387, _T("__Activator"))) tmp_388 = 0;
        if(::System::String::Equals3(tmp_387, _T("__CallSiteActivationAttributes")) ||
        ::System::String::Equals3(tmp_387, _T("__ActivationType")) ||
        ::System::String::Equals3(tmp_387, _T("__ContextProperties")) ||
        ::System::String::Equals3(tmp_387, _T("__ActivationTypeName"))) tmp_388 = 1;
        switch(tmp_388)
        {
            case 0: case_1379: 
            {
                cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(this->_message)->set_Activator_f69a6bba41c9ebf3(cli::cast<System::Runtime::Remoting::Activation::IActivator*>(value));
                break;
            }
            case 1: case_1380: 
            {
                throw cli::gcnew<System::ArgumentException>(_T("key was invalid"));
            }
            default: case_1381: 
            {
                MethodDictionary::SetMethodProperty_3ab813fd84638e38(key, value);
                break;
            }
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ConstructionResponse::constructor(cli::array<Header*>* h, IMethodCallMessage* mcm) {
    }
    
    void ConstructionResponse::constructor(System::Object* resultObject, LogicalCallContext* callCtx, IMethodCallMessage* msg) {
    }
    
    void ConstructionResponse::constructor(System::Exception* e, IMethodCallMessage* msg) {
    }
    
    void ConstructionResponse::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    System::Collections::IDictionary* ConstructionResponse::get_Properties_42e9af5b3d4ade59() {
        return MethodResponse::get_Properties_42e9af5b3d4ade59();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    EnvoyTerminatorSink*  EnvoyTerminatorSink::Instance;
    
    EnvoyTerminatorSink::EnvoyTerminatorSink()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void EnvoyTerminatorSink::constructor() {
    }
    
    void EnvoyTerminatorSink::static_constructor() {
    }
    
    IMessage* EnvoyTerminatorSink::SyncProcessMessage(IMessage* msg) {
        return System::Threading::Thread::get_CurrentContext()->GetClientContextSinkChain()->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    IMessageCtrl* EnvoyTerminatorSink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        return System::Threading::Thread::get_CurrentContext()->GetClientContextSinkChain()->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
    }
    
    IMessageSink* EnvoyTerminatorSink::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ErrorMessage::constructor() {
    }
    
    System::Object* ErrorMessage::GetArg(int32_t arg_num) {
        return nullptr;
    }
    
    System::String* ErrorMessage::GetArgName(int32_t arg_num) {
        return _T("unknown");
    }
    
    System::String* ErrorMessage::GetInArgName(int32_t index) {
        return nullptr;
    }
    
    System::Object* ErrorMessage::GetInArg(int32_t argNum) {
        return nullptr;
    }
    
    int32_t ErrorMessage::get_ArgCount() {
        return 0;
    }
    
    cli::array<System::Object*>* ErrorMessage::get_Args() {
        return nullptr;
    }
    
    bool ErrorMessage::get_HasVarArgs() {
        return false;
    }
    
    System::Reflection::MethodBase* ErrorMessage::get_MethodBase() {
        return nullptr;
    }
    
    System::String* ErrorMessage::get_MethodName() {
        return _T("unknown");
    }
    
    System::Object* ErrorMessage::get_MethodSignature() {
        return nullptr;
    }
    
    System::Collections::IDictionary* ErrorMessage::get_Properties_e96fc16c3b175f50() {
        return nullptr;
    }
    
    System::String* ErrorMessage::get_TypeName() {
        return _T("unknown");
    }
    
    System::String* ErrorMessage::get_Uri() {
        return this->_uri;
    }
    
    System::String* ErrorMessage::set_Uri(System::String* value) {
        this->_uri = value;
        return get_Uri();
    }
    
    int32_t ErrorMessage::get_InArgCount() {
        return 0;
    }
    
    cli::array<System::Object*>* ErrorMessage::get_InArgs() {
        return nullptr;
    }
    
    LogicalCallContext* ErrorMessage::get_LogicalCallContext() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void Header::constructor(System::String* _Name, System::Object* _Value) {
    }
    
    void Header::constructor(System::String* _Name, System::Object* _Value, bool _MustUnderstand) {
    }
    
    void Header::constructor(System::String* _Name, System::Object* _Value, bool _MustUnderstand, System::String* _HeaderNamespace) {
        this->Name2 = _Name;
        this->Value = _Value;
        this->MustUnderstand = _MustUnderstand;
        this->HeaderNamespace = _HeaderNamespace;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void InternalMessageWrapper::constructor(IMessage* msg) {
        this->WrappedMessage = msg;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void LogicalCallContext::constructor() {
    }
    
    void LogicalCallContext::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        for(auto tmp_389 : info->GetEnumerator()) {
            auto entry = cli::cast<System::Runtime::Serialization::SerializationEntry>(tmp_389);
            {
                if(System::String::op_Equality(entry->get_Name(), _T("__RemotingData"))) 
                {
                    this->_remotingData = cli::cast<CallContextRemotingData*>(entry->get_Value());
                }
                 else 
                {
                    SetData(entry->get_Name(), entry->get_Value());
                }
            }
        }
    }
    
    void LogicalCallContext::FreeNamedDataSlot(System::String* name) {
        if((this->_data != nullptr)) 
        {
            this->_data->Remove_fd653674dd8a5ac4(name);
        }
    }
    
    System::Object* LogicalCallContext::GetData(System::String* name) {
        if((this->_data != nullptr)) 
        {
            return this->_data->get_Item_d75c6e706b965758(name);
        }
         else 
        {
            return nullptr;
        }
    }
    
    void LogicalCallContext::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        info->AddValue16(_T("__RemotingData"), this->_remotingData);
        if((this->_data != nullptr)) 
        {
            for(auto tmp_390 : this->_data) {
                auto de = cli::cast<System::Collections::DictionaryEntry>(tmp_390);
                info->AddValue16(cli::cast<System::String*>(de->get_Key()), de->get_Value());
            }
        }
    }
    
    void LogicalCallContext::SetData(System::String* name, System::Object* data) {
        if((this->_data ==  nullptr)) 
        {
            this->_data = cli::gcnew<System::Collections::Hashtable>();
        }
        this->_data->set_Item_84c7e24d9caa09(name, data);
    }
    
    System::Object* LogicalCallContext::Clone() {
        LogicalCallContext *nc = cli::gcnew<LogicalCallContext>();
        nc->_remotingData = cli::cast<CallContextRemotingData*>(this->_remotingData->Clone());
        if((this->_data != nullptr)) 
        {
            nc->_data = cli::gcnew<System::Collections::Hashtable>();
            for(auto tmp_391 : this->_data) {
                auto de = cli::cast<System::Collections::DictionaryEntry>(tmp_391);
                nc->_data->set_Item_84c7e24d9caa09(de->get_Key(), de->get_Value());
            }
        }
        return nc;
    }
    
    bool LogicalCallContext::get_HasInfo() {
        return ((this->_data != nullptr) && (this->_data->get_Count_40aff81471a60b4c() > 0));
    }
    
    System::Collections::Hashtable* LogicalCallContext::get_Datastore() {
        return this->_data;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void CallContextRemotingData::constructor() {
    }
    
    System::Object* CallContextRemotingData::Clone() {
        CallContextRemotingData *data = cli::gcnew<CallContextRemotingData>();
        data->_logicalCallID = this->_logicalCallID;
        return data;
    }
    
    System::String* CallContextRemotingData::get_LogicalCallID() {
        return this->_logicalCallID;
    }
    
    System::String* CallContextRemotingData::set_LogicalCallID(System::String* value) {
        this->_logicalCallID = value;
        return get_LogicalCallID();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  MethodCall::__f__switch_map9;
    
    void MethodCall::constructor(cli::array<Header*>* h1) {
        Init_205d4c505e7bb970();
        if(((h1 ==  nullptr) || (h1->get_Length() ==  0))) 
        {
            return;
        }
        for(auto tmp_392 : h1) {
            auto header = cli::cast<Header*>(tmp_392);
            InitMethodProperty_cd5bad7ed64a6b8e(header->Name2, header->Value);
        }
        ResolveMethod();
    }
    
    void MethodCall::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        Init_205d4c505e7bb970();
        for(auto tmp_393 : info->GetEnumerator()) {
            auto entry = cli::cast<System::Runtime::Serialization::SerializationEntry>(tmp_393);
            InitMethodProperty_cd5bad7ed64a6b8e(cli::cast<System::String*>(entry->get_Name()), entry->get_Value());
        }
    }
    
    void MethodCall::constructor(CADMethodCallMessage* msg) {
        this->_uri = System::String::Copy(msg->get_Uri());
        System::Collections::ArrayList *args = msg->GetArguments();
        this->_args = msg->GetArgs(args);
        this->_callContext = msg->GetLogicalCallContext(args);
        if((this->_callContext ==  nullptr)) 
        {
            this->_callContext = cli::gcnew<LogicalCallContext>();
        }
        this->_methodBase = msg->GetMethod();
        Init_205d4c505e7bb970();
        if((msg->get_PropertiesCount() > 0)) 
        {
            CADMessageBase::UnmarshalProperties(this->get_Properties_c453f36b3f043bdc(), msg->get_PropertiesCount(), args);
        }
    }
    
    void MethodCall::constructor(IMessage* msg) {
        if(cli::is<IMethodMessage>(msg)) 
        {
            CopyFrom(cli::cast<IMethodMessage*>(msg));
        }
         else 
        {
            for(auto tmp_394 : msg->get_Properties_d88088440249f163()) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_394);
                InitMethodProperty_cd5bad7ed64a6b8e(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
            }
            Init_205d4c505e7bb970();
        }
    }
    
    void MethodCall::constructor(System::String* uri, System::String* typeName, System::String* methodName, cli::array<System::Object*>* args) {
        this->_uri = uri;
        this->_typeName = typeName;
        this->_methodName = methodName;
        this->_args = args;
        Init_205d4c505e7bb970();
        ResolveMethod();
    }
    
    void MethodCall::constructor() {
    }
    
    void MethodCall::CopyFrom(IMethodMessage* call) {
        this->_uri = call->get_Uri_a772cc17d83f8740();
        this->_typeName = call->get_TypeName_2c092df7327c2af5();
        this->_methodName = call->get_MethodName_f32f67fc5b4be3b1();
        this->_args = call->get_Args_1b1b87289e375adf();
        this->_methodSignature = cli::cast<cli::array<System::Type*>*>(call->get_MethodSignature_a58bc01e7b3e43ec());
        this->_methodBase = call->get_MethodBase_be82dccd2d92b9f6();
        this->_callContext = call->get_LogicalCallContext_a19aeadfaffa89b7();
        Init_205d4c505e7bb970();
    }
    
    void MethodCall::InitMethodProperty_cd5bad7ed64a6b8e(System::String* key, System::Object* value) {
        System::String* tmp_395 = key;
        ::System::Int32 tmp_396 = -1;
        if(::System::String::Equals3(tmp_395, _T("__TypeName"))) tmp_396 = 0;
        if(::System::String::Equals3(tmp_395, _T("__MethodName"))) tmp_396 = 1;
        if(::System::String::Equals3(tmp_395, _T("__MethodSignature"))) tmp_396 = 2;
        if(::System::String::Equals3(tmp_395, _T("__Args"))) tmp_396 = 3;
        if(::System::String::Equals3(tmp_395, _T("__CallContext"))) tmp_396 = 4;
        if(::System::String::Equals3(tmp_395, _T("__Uri"))) tmp_396 = 5;
        if(::System::String::Equals3(tmp_395, _T("__GenericArguments"))) tmp_396 = 6;
        switch(tmp_396)
        {
            case 0: case_1382: 
            {
                this->_typeName = cli::cast<System::String*>(value);
                return;
            }
            case 1: case_1383: 
            {
                this->_methodName = cli::cast<System::String*>(value);
                return;
            }
            case 2: case_1384: 
            {
                this->_methodSignature = cli::cast<cli::array<System::Type*>*>(value);
                return;
            }
            case 3: case_1385: 
            {
                this->_args = cli::cast<cli::array<System::Object*>*>(value);
                return;
            }
            case 4: case_1386: 
            {
                this->_callContext = cli::cast<LogicalCallContext*>(value);
                return;
            }
            case 5: case_1387: 
            {
                this->_uri = cli::cast<System::String*>(value);
                return;
            }
            case 6: case_1388: 
            {
                this->_genericArguments = cli::cast<cli::array<System::Type*>*>(value);
                return;
            }
            default: case_1389: 
            {
                this->get_Properties_c453f36b3f043bdc()->set_Item_a0c4aaef01cc13c2(key, value);
                return;
            }
        }
    }
    
    void MethodCall::GetObjectData_972cb159043c8ab0(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        info->AddValue16(_T("__TypeName"), this->_typeName);
        info->AddValue16(_T("__MethodName"), this->_methodName);
        info->AddValue16(_T("__MethodSignature"), this->_methodSignature);
        info->AddValue16(_T("__Args"), this->_args);
        info->AddValue16(_T("__CallContext"), this->_callContext);
        info->AddValue16(_T("__Uri"), this->_uri);
        info->AddValue16(_T("__GenericArguments"), this->_genericArguments);
        if((this->InternalProperties != nullptr)) 
        {
            for(auto tmp_397 : this->InternalProperties) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_397);
                info->AddValue16(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
            }
        }
    }
    
    void MethodCall::InitDictionary_dbfe50419d0adffb() {
        MethodCallDictionary *props = cli::gcnew<MethodCallDictionary>(this);
        this->ExternalProperties = props;
        this->InternalProperties = props->GetInternalProperties();
    }
    
    System::Object* MethodCall::GetArg(int32_t argNum) {
        return this->_args->at(argNum);
    }
    
    System::String* MethodCall::GetArgName(int32_t index) {
        return this->_methodBase->GetParameters_9d17bcb549474c9()->at(index)->get_Name_1ad7a68577256740();
    }
    
    System::Object* MethodCall::GetInArg(int32_t argNum) {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->_methodBase, ArgInfoType::In);
        }
        return this->_args->at(this->_inArgInfo->GetInOutArgIndex(argNum));
    }
    
    System::String* MethodCall::GetInArgName(int32_t index) {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->_methodBase, ArgInfoType::In);
        }
        return this->_inArgInfo->GetInOutArgName_2fa2ff0ffc15d79f(index);
    }
    
    System::Object* MethodCall::HeaderHandler_f576efadf387778e(cli::array<Header*>* h) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodCall::Init_205d4c505e7bb970() {
    }
    
    void MethodCall::ResolveMethod() {
        if((this->_uri != nullptr)) 
        {
            System::Type *type = System::Runtime::Remoting::RemotingServices::GetServerTypeForUri(this->_uri);
            if(System::Type::op_Equality2(type, nullptr)) 
            {
                System::String *sname = (this->_typeName != nullptr) ? cli::concat(_T(" ("), this->_typeName) : _T("");
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Requested service not found"), sname));
            }
            System::Type *requestType = CastTo(this->_typeName, type);
            if(System::Type::op_Equality2(requestType, nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Cannot cast from client type \'"), this->_typeName, _T("\' to server type \'"), type->get_FullName_7e8fa72ba225e1a4(), _T("\'")));
            }
            this->_methodBase = System::Runtime::Remoting::RemotingServices::GetMethodBaseFromName(requestType, this->_methodName, this->_methodSignature);
            if(System::Reflection::MethodBase::op_Equality2(this->_methodBase, nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Method "), this->_methodName, _T(" not found in "), requestType));
            }
            if(((System::Type::op_Inequality2(requestType, type) && requestType->get_IsInterface()) && !(type->get_IsInterface()))) 
            {
                this->_methodBase = System::Runtime::Remoting::RemotingServices::GetVirtualMethod(type, this->_methodBase);
                if(System::Reflection::MethodBase::op_Equality2(this->_methodBase, nullptr)) 
                {
                    throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Method "), this->_methodName, _T(" not found in "), type));
                }
            }
        }
         else 
        {
            this->_methodBase = System::Runtime::Remoting::RemotingServices::GetMethodBaseFromMethodMessage(this);
            if(System::Reflection::MethodBase::op_Equality2(this->_methodBase, nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Method "), this->_methodName));
            }
        }
        if((this->_methodBase->get_IsGenericMethod_7e509e51546ea990() && this->_methodBase->get_ContainsGenericParameters_113614fa92731376())) 
        {
            if((this->get_GenericArguments() ==  nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("The remoting infrastructure does not support open generic methods."));
            }
            this->_methodBase = cli::cast<System::Reflection::MethodInfo*>(this->_methodBase)->MakeGenericMethod_6fb56e5d44bf2eff(this->get_GenericArguments());
        }
    }
    
    System::Type* MethodCall::CastTo(System::String* clientType, System::Type* serverType) {
        clientType = GetTypeNameFromAssemblyQualifiedName(clientType);
        if(System::String::op_Equality(clientType, serverType->get_FullName_7e8fa72ba225e1a4())) 
        {
            return serverType;
        }
        System::Type *baseType = serverType->get_BaseType_6a0646ae880055f6();
        while(System::Type::op_Inequality2(baseType, nullptr)) {
            if(System::String::op_Equality(clientType, baseType->get_FullName_7e8fa72ba225e1a4())) 
            {
                return baseType;
            }
            baseType = baseType->get_BaseType_6a0646ae880055f6();
        }
        cli::array<System::Type*> *interfaces = serverType->GetInterfaces_52a89380e2c4a725();
        for(auto tmp_398 : interfaces) {
            auto itype = cli::cast<System::Type*>(tmp_398);
            if(System::String::op_Equality(clientType, itype->get_FullName_7e8fa72ba225e1a4())) 
            {
                return itype;
            }
        }
        return nullptr;
    }
    
    System::String* MethodCall::GetTypeNameFromAssemblyQualifiedName(System::String* aqname) {
        int32_t p = aqname->IndexOf7(_T("]]"));
        int32_t i = aqname->IndexOf5(u',', (p ==  -1) ? 0 : (p + 2));
        if((i != -1)) 
        {
            aqname = aqname->Substring2(0, i)->Trim();
        }
        return aqname;
    }
    
    void MethodCall::RootSetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t MethodCall::get_ArgCount() {
        return this->_args->get_Length();
    }
    
    cli::array<System::Object*>* MethodCall::get_Args() {
        return this->_args;
    }
    
    bool MethodCall::get_HasVarArgs() {
        return ((int32_t)(((int32_t)(this->get_MethodBase()->get_CallingConvention_309cf574b58a053a()) | 2)) != 0);
    }
    
    int32_t MethodCall::get_InArgCount() {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->_methodBase, ArgInfoType::In);
        }
        return this->_inArgInfo->GetInOutArgCount();
    }
    
    cli::array<System::Object*>* MethodCall::get_InArgs() {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->_methodBase, ArgInfoType::In);
        }
        return this->_inArgInfo->GetInOutArgs(this->_args);
    }
    
    LogicalCallContext* MethodCall::get_LogicalCallContext() {
        if((this->_callContext ==  nullptr)) 
        {
            this->_callContext = cli::gcnew<LogicalCallContext>();
        }
        return this->_callContext;
    }
    
    System::Reflection::MethodBase* MethodCall::get_MethodBase() {
        if(System::Reflection::MethodBase::op_Equality2(this->_methodBase, nullptr)) 
        {
            ResolveMethod();
        }
        return this->_methodBase;
    }
    
    System::String* MethodCall::get_MethodName() {
        if((this->_methodName ==  nullptr)) 
        {
            this->_methodName = this->_methodBase->get_Name_50fad5fa936c3ae2();
        }
        return this->_methodName;
    }
    
    System::Object* MethodCall::get_MethodSignature() {
        if(((this->_methodSignature ==  nullptr) && System::Reflection::MethodBase::op_Inequality2(this->_methodBase, nullptr))) 
        {
            cli::array<System::Reflection::ParameterInfo*> *parameters = this->_methodBase->GetParameters_9d17bcb549474c9();
            this->_methodSignature = (new cli::array<System::Type*>(parameters->get_Length()));
            for(int32_t n = 0; (n < parameters->get_Length()); n++) {
                this->_methodSignature->at(n) = parameters->at(n)->get_ParameterType_97c5fa09a0b988d();
            }
        }
        return this->_methodSignature;
    }
    
    System::Collections::IDictionary* MethodCall::get_Properties_c453f36b3f043bdc() {
        if((this->ExternalProperties ==  nullptr)) 
        {
            InitDictionary_dbfe50419d0adffb();
        }
        return this->ExternalProperties;
    }
    
    System::String* MethodCall::get_TypeName() {
        if((this->_typeName ==  nullptr)) 
        {
            this->_typeName = this->_methodBase->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
        }
        return this->_typeName;
    }
    
    System::String* MethodCall::get_Uri() {
        return this->_uri;
    }
    
    System::String* MethodCall::set_Uri(System::String* value) {
        this->_uri = value;
        return get_Uri();
    }
    
    System::String* MethodCall::get_Uri2() {
        return this->get_Uri();
    }
    
    System::String* MethodCall::set_Uri2(System::String* value) {
        this->set_Uri(value);
        return get_Uri2();
    }
    
    System::Runtime::Remoting::Identity* MethodCall::get_TargetIdentity() {
        return this->_targetIdentity;
    }
    
    System::Runtime::Remoting::Identity* MethodCall::set_TargetIdentity(System::Runtime::Remoting::Identity* value) {
        this->_targetIdentity = value;
        return get_TargetIdentity();
    }
    
    cli::array<System::Type*>* MethodCall::get_GenericArguments() {
        if((this->_genericArguments != nullptr)) 
        {
            return this->_genericArguments;
        }
        return this->_genericArguments = this->get_MethodBase()->GetGenericArguments_77cf5f406b341958();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<System::String*>*  MethodCallDictionary::InternalKeys;
    
    MethodCallDictionary::MethodCallDictionary()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void MethodCallDictionary::constructor(IMethodMessage* message) {
        this->set_MethodKeys(InternalKeys);
    }
    
    void MethodCallDictionary::static_constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<System::String*>*  DictionaryWrapper::_keys;
    
    DictionaryWrapper::DictionaryWrapper()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void DictionaryWrapper::constructor(IMethodMessage* message, System::Collections::IDictionary* wrappedDictionary) {
        this->_wrappedDictionary = wrappedDictionary;
        this->set_MethodKeys(_keys);
    }
    
    void DictionaryWrapper::static_constructor() {
    }
    
    System::Collections::IDictionary* DictionaryWrapper::AllocInternalProperties_ac55c475ad3bbe92() {
        return this->_wrappedDictionary;
    }
    
    void DictionaryWrapper::SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) {
        if(System::String::op_Equality(key, _T("__Args"))) 
        {
            cli::cast<MethodCallMessageWrapper*>(this->_message)->_args = cli::cast<cli::array<System::Object*>*>(value);
        }
         else 
        {
            MethodCallDictionary::SetMethodProperty_3ab813fd84638e38(key, value);
        }
    }
    
    System::Object* DictionaryWrapper::GetMethodProperty_4070f877cd8723cd(System::String* key) {
        if(System::String::op_Equality(key, _T("__Args"))) 
        {
            return cli::cast<MethodCallMessageWrapper*>(this->_message)->_args;
        }
         else 
        {
            return MethodCallDictionary::GetMethodProperty_4070f877cd8723cd(key);
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void MethodCallMessageWrapper::constructor(IMethodCallMessage* msg) {
        this->_args = cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_Args_1b1b87289e375adf();
        this->_inArgInfo = cli::gcnew<ArgInfo>(msg->get_MethodBase_be82dccd2d92b9f6(), ArgInfoType::In);
    }
    
    System::Object* MethodCallMessageWrapper::GetArg_1f9d01a7e6a18550(int32_t argNum) {
        return this->_args->at(argNum);
    }
    
    System::String* MethodCallMessageWrapper::GetArgName_bc718af36a33c0c1(int32_t index) {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->GetArgName_fe0b5c1914782402(index);
    }
    
    System::Object* MethodCallMessageWrapper::GetInArg_5630004eabcafb5b(int32_t argNum) {
        return this->_args->at(this->_inArgInfo->GetInOutArgIndex(argNum));
    }
    
    System::String* MethodCallMessageWrapper::GetInArgName_c4a055b5e097804f(int32_t index) {
        return this->_inArgInfo->GetInOutArgName_2fa2ff0ffc15d79f(index);
    }
    
    int32_t MethodCallMessageWrapper::get_ArgCount_bdf2e5e89f94e4c() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_ArgCount_c4a9c359c4fe1d8e();
    }
    
    cli::array<System::Object*>* MethodCallMessageWrapper::get_Args_2ff00dd9adf0aac() {
        return this->_args;
    }
    
    cli::array<System::Object*>* MethodCallMessageWrapper::set_Args_fcf69d08e0afb2c9(cli::array<System::Object*>* value) {
        this->_args = value;
        return get_Args_2ff00dd9adf0aac();
    }
    
    bool MethodCallMessageWrapper::get_HasVarArgs_d495f2ebd8875cd6() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_HasVarArgs_554adf133c756bdc();
    }
    
    int32_t MethodCallMessageWrapper::get_InArgCount_e2a9ce7753c03b43() {
        return this->_inArgInfo->GetInOutArgCount();
    }
    
    cli::array<System::Object*>* MethodCallMessageWrapper::get_InArgs_5f027e6743eedd22() {
        return this->_inArgInfo->GetInOutArgs(this->_args);
    }
    
    LogicalCallContext* MethodCallMessageWrapper::get_LogicalCallContext_9cf8fb9aa5344653() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_LogicalCallContext_a19aeadfaffa89b7();
    }
    
    System::Reflection::MethodBase* MethodCallMessageWrapper::get_MethodBase_53947153fd1c478() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_MethodBase_be82dccd2d92b9f6();
    }
    
    System::String* MethodCallMessageWrapper::get_MethodName_afa3ecbf1d1fd47e() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_MethodName_f32f67fc5b4be3b1();
    }
    
    System::Object* MethodCallMessageWrapper::get_MethodSignature_eb88f90a35806f25() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_MethodSignature_a58bc01e7b3e43ec();
    }
    
    System::Collections::IDictionary* MethodCallMessageWrapper::get_Properties_238987309ecc3b13() {
        if((this->_properties ==  nullptr)) 
        {
            this->_properties = cli::gcnew<DictionaryWrapper>(this, this->WrappedMessage->get_Properties_d88088440249f163());
        }
        return this->_properties;
    }
    
    System::String* MethodCallMessageWrapper::get_TypeName_f0575dd68a53967() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_TypeName_2c092df7327c2af5();
    }
    
    System::String* MethodCallMessageWrapper::get_Uri_5eaefe698d6d5cd6() {
        return cli::cast<IMethodCallMessage*>(this->WrappedMessage)->get_Uri_a772cc17d83f8740();
    }
    
    System::String* MethodCallMessageWrapper::set_Uri_c9ab632d286b11d1(System::String* value) {
        IInternalMessage *im = cli::as<IInternalMessage*>(this->WrappedMessage);
        if((im != nullptr)) 
        {
            im->set_Uri_96dc10f55685ba70(value);
        }
         else 
        {
            this->get_Properties_238987309ecc3b13()->set_Item_a0c4aaef01cc13c2(_T("__Uri"), value);
        }
        return get_Uri_5eaefe698d6d5cd6();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void DictionaryEnumerator::constructor(MethodDictionary* methodDictionary) {
        this->_methodDictionary = methodDictionary;
        this->_hashtableEnum = (this->_methodDictionary->_internalProperties != nullptr) ? this->_methodDictionary->_internalProperties->GetEnumerator_40657fcb15842551() : nullptr;
        this->_posMethod = -1;
    }
    
    bool DictionaryEnumerator::MoveNext() {
        if((this->_posMethod != -2)) 
        {
            this->_posMethod++;
            if((this->_posMethod < this->_methodDictionary->_methodKeys->get_Length())) 
            {
                return true;
            }
            this->_posMethod = -2;
        }
        if((this->_hashtableEnum ==  nullptr)) 
        {
            return false;
        }
        while(this->_hashtableEnum->MoveNext_4e78e145935f5417()) {
            if(!(this->_methodDictionary->IsOverridenKey(cli::cast<System::String*>(this->_hashtableEnum->get_Key_ed7954531cb20258())))) 
            {
                return true;
            }
        }
        return false;
    }
    
    void DictionaryEnumerator::Reset() {
        this->_posMethod = -1;
        this->_hashtableEnum->Reset_bcd82381eed41868();
    }
    
    System::Object* DictionaryEnumerator::get_Current() {
        return this->get_Entry()->get_Value();
    }
    
    System::Collections::DictionaryEntry DictionaryEnumerator::get_Entry() {
        if((this->_posMethod >= 0)) 
        {
            return cli::ctor<System::Collections::DictionaryEntry>(this->_methodDictionary->_methodKeys->at(this->_posMethod), this->_methodDictionary->GetMethodProperty_4070f877cd8723cd(this->_methodDictionary->_methodKeys->at(this->_posMethod)));
        }
         else 
        {
            if(((this->_posMethod ==  -1) || (this->_hashtableEnum ==  nullptr))) 
            {
                throw cli::gcnew<System::InvalidOperationException>(_T("The enumerator is positioned before the first element of the collection or after the last element"));
            }
             else 
            {
                return this->_hashtableEnum->get_Entry_7d036eca1ef8d5f4();
            }
        }
    }
    
    System::Object* DictionaryEnumerator::get_Key() {
        return this->get_Entry()->get_Key();
    }
    
    System::Object* DictionaryEnumerator::get_Value() {
        return this->get_Entry()->get_Value();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  MethodDictionary::__f__switch_mapA;
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  MethodDictionary::__f__switch_mapB;
    
    void MethodDictionary::constructor(IMethodMessage* message) {
        this->_message = message;
    }
    
    void MethodDictionary::constructor(cli::array<System::String*>* keys) {
        this->_methodKeys = keys;
    }
    
    System::Collections::IDictionary* MethodDictionary::AllocInternalProperties_ac55c475ad3bbe92() {
        this->_ownProperties = true;
        return cli::gcnew<System::Collections::Hashtable>();
    }
    
    System::Collections::IDictionary* MethodDictionary::GetInternalProperties() {
        if((this->_internalProperties ==  nullptr)) 
        {
            this->_internalProperties = AllocInternalProperties_ac55c475ad3bbe92();
        }
        return this->_internalProperties;
    }
    
    bool MethodDictionary::IsOverridenKey(System::String* key) {
        if(this->_ownProperties) 
        {
            return false;
        }
        for(auto tmp_399 : this->_methodKeys) {
            auto mkey = cli::cast<System::String*>(tmp_399);
            if(System::String::op_Equality(key, mkey)) 
            {
                return true;
            }
        }
        return false;
    }
    
    System::Object* MethodDictionary::GetMethodProperty_4070f877cd8723cd(System::String* key) {
        System::String* tmp_400 = key;
        ::System::Int32 tmp_401 = -1;
        if(::System::String::Equals3(tmp_400, _T("__Uri"))) tmp_401 = 0;
        if(::System::String::Equals3(tmp_400, _T("__MethodName"))) tmp_401 = 1;
        if(::System::String::Equals3(tmp_400, _T("__TypeName"))) tmp_401 = 2;
        if(::System::String::Equals3(tmp_400, _T("__MethodSignature"))) tmp_401 = 3;
        if(::System::String::Equals3(tmp_400, _T("__CallContext"))) tmp_401 = 4;
        if(::System::String::Equals3(tmp_400, _T("__Args"))) tmp_401 = 5;
        if(::System::String::Equals3(tmp_400, _T("__OutArgs"))) tmp_401 = 6;
        if(::System::String::Equals3(tmp_400, _T("__Return"))) tmp_401 = 7;
        switch(tmp_401)
        {
            case 0: case_1390: 
            {
                return this->_message->get_Uri_a772cc17d83f8740();
            }
            case 1: case_1391: 
            {
                return this->_message->get_MethodName_f32f67fc5b4be3b1();
            }
            case 2: case_1392: 
            {
                return this->_message->get_TypeName_2c092df7327c2af5();
            }
            case 3: case_1393: 
            {
                return this->_message->get_MethodSignature_a58bc01e7b3e43ec();
            }
            case 4: case_1394: 
            {
                return this->_message->get_LogicalCallContext_a19aeadfaffa89b7();
            }
            case 5: case_1395: 
            {
                return this->_message->get_Args_1b1b87289e375adf();
            }
            case 6: case_1396: 
            {
                return cli::cast<IMethodReturnMessage*>(this->_message)->get_OutArgs_4ed1102750ba8a44();
            }
            case 7: case_1397: 
            {
                return cli::cast<IMethodReturnMessage*>(this->_message)->get_ReturnValue_5e8804a33ce4fa71();
            }
            default: case_1398: 
            {
                return nullptr;
            }
        }
    }
    
    void MethodDictionary::SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) {
        System::String* tmp_402 = key;
        ::System::Int32 tmp_403 = -1;
        if(::System::String::Equals3(tmp_402, _T("__CallContext")) ||
        ::System::String::Equals3(tmp_402, _T("__OutArgs")) ||
        ::System::String::Equals3(tmp_402, _T("__Return"))) tmp_403 = 0;
        if(::System::String::Equals3(tmp_402, _T("__MethodName")) ||
        ::System::String::Equals3(tmp_402, _T("__TypeName")) ||
        ::System::String::Equals3(tmp_402, _T("__MethodSignature")) ||
        ::System::String::Equals3(tmp_402, _T("__Args"))) tmp_403 = 1;
        if(::System::String::Equals3(tmp_402, _T("__Uri"))) tmp_403 = 2;
        switch(tmp_403)
        {
            case 0: case_1399: 
            {
                return;
            }
            case 1: case_1400: 
            {
                throw cli::gcnew<System::ArgumentException>(_T("key was invalid"));
            }
            case 2: case_1401: 
            {
                cli::cast<IInternalMessage*>(this->_message)->set_Uri_96dc10f55685ba70(cli::cast<System::String*>(value));
                return;
            }
        }
    }
    
    void MethodDictionary::Add(System::Object* key, System::Object* value) {
        System::String *keyStr = cli::cast<System::String*>(key);
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            if(System::String::op_Equality(this->_methodKeys->at(n), keyStr)) 
            {
                SetMethodProperty_3ab813fd84638e38(keyStr, value);
                return;
            }
        }
        if((this->_internalProperties ==  nullptr)) 
        {
            this->_internalProperties = AllocInternalProperties_ac55c475ad3bbe92();
        }
        this->_internalProperties->set_Item_a0c4aaef01cc13c2(key, value);
    }
    
    void MethodDictionary::Clear() {
        if((this->_internalProperties != nullptr)) 
        {
            this->_internalProperties->Clear_23091c63869f817f();
        }
    }
    
    bool MethodDictionary::Contains(System::Object* key) {
        System::String *keyStr = cli::cast<System::String*>(key);
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            if(System::String::op_Equality(this->_methodKeys->at(n), keyStr)) 
            {
                return true;
            }
        }
        if((this->_internalProperties != nullptr)) 
        {
            return this->_internalProperties->Contains_32eba6643fe7ee4b(key);
        }
         else 
        {
            return false;
        }
    }
    
    void MethodDictionary::Remove(System::Object* key) {
        System::String *keyStr = cli::cast<System::String*>(key);
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            if(System::String::op_Equality(this->_methodKeys->at(n), keyStr)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("key was invalid"));
            }
        }
        if((this->_internalProperties != nullptr)) 
        {
            this->_internalProperties->Remove_f212b96e00d6aaed(key);
        }
    }
    
    void MethodDictionary::CopyTo(System::Array* array, int32_t index) {
        this->get_Values()->CopyTo_7065a6e3cf6a140(array, index);
    }
    
    System::Collections::IEnumerator* MethodDictionary::GetEnumerator() {
        return cli::gcnew<DictionaryEnumerator>(this);
    }
    
    System::Collections::IDictionaryEnumerator* MethodDictionary::GetEnumerator2() {
        return cli::gcnew<DictionaryEnumerator>(this);
    }
    
    bool MethodDictionary::get_HasInternalProperties() {
        if((this->_internalProperties != nullptr)) 
        {
            if(cli::is<MethodDictionary>(this->_internalProperties)) 
            {
                return cli::cast<MethodDictionary*>(this->_internalProperties)->get_HasInternalProperties();
            }
             else 
            {
                return (this->_internalProperties->get_Count_8f254f3dd8e2403() > 0);
            }
        }
        return false;
    }
    
    System::Collections::IDictionary* MethodDictionary::get_InternalProperties() {
        if((this->_internalProperties != nullptr)) 
        {
            if(cli::is<MethodDictionary>(this->_internalProperties)) 
            {
                return cli::cast<MethodDictionary*>(this->_internalProperties)->get_InternalProperties();
            }
        }
        return this->_internalProperties;
    }
    
    cli::array<System::String*>* MethodDictionary::get_MethodKeys() {
        return this->_methodKeys;
    }
    
    cli::array<System::String*>* MethodDictionary::set_MethodKeys(cli::array<System::String*>* value) {
        this->_methodKeys = value;
        return get_MethodKeys();
    }
    
    bool MethodDictionary::get_IsFixedSize() {
        return false;
    }
    
    bool MethodDictionary::get_IsReadOnly() {
        return false;
    }
    
    System::Object* MethodDictionary::get_Item(System::Object* key) {
        System::String *keyStr = cli::cast<System::String*>(key);
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            if(System::String::op_Equality(this->_methodKeys->at(n), keyStr)) 
            {
                return GetMethodProperty_4070f877cd8723cd(keyStr);
            }
        }
        if((this->_internalProperties != nullptr)) 
        {
            return this->_internalProperties->get_Item_95688dd349c069c0(key);
        }
         else 
        {
            return nullptr;
        }
    }
    
    System::Object* MethodDictionary::set_Item(System::Object* key, System::Object* value) {
        Add(key, value);
        return get_Item(key);
    }
    
    System::Collections::ICollection* MethodDictionary::get_Keys() {
        System::Collections::ArrayList *keys = cli::gcnew<System::Collections::ArrayList>();
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            keys->Add_e6a92085999ce388(this->_methodKeys->at(n));
        }
        if((this->_internalProperties != nullptr)) 
        {
            for(auto tmp_404 : this->_internalProperties->get_Keys_d809cadac60b140a()) {
                auto key = cli::cast<System::String*>(tmp_404);
                if(!(IsOverridenKey(key))) 
                {
                    keys->Add_e6a92085999ce388(key);
                }
            }
        }
        return keys;
    }
    
    System::Collections::ICollection* MethodDictionary::get_Values() {
        System::Collections::ArrayList *values = cli::gcnew<System::Collections::ArrayList>();
        for(int32_t n = 0; (n < this->_methodKeys->get_Length()); n++) {
            values->Add_e6a92085999ce388(GetMethodProperty_4070f877cd8723cd(this->_methodKeys->at(n)));
        }
        if((this->_internalProperties != nullptr)) 
        {
            for(auto tmp_405 : this->_internalProperties) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_405);
                if(!(IsOverridenKey(cli::cast<System::String*>(entry->get_Key())))) 
                {
                    values->Add_e6a92085999ce388(entry->get_Value());
                }
            }
        }
        return values;
    }
    
    int32_t MethodDictionary::get_Count() {
        if((this->_internalProperties != nullptr)) 
        {
            return (this->_internalProperties->get_Count_8f254f3dd8e2403() + this->_methodKeys->get_Length());
        }
         else 
        {
            return this->_methodKeys->get_Length();
        }
    }
    
    bool MethodDictionary::get_IsSynchronized() {
        return false;
    }
    
    System::Object* MethodDictionary::get_SyncRoot() {
        return this;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  MethodResponse::__f__switch_mapC;
    
    void MethodResponse::constructor(cli::array<Header*>* h1, IMethodCallMessage* mcm) {
        if((mcm != nullptr)) 
        {
            this->_methodName = mcm->get_MethodName_f32f67fc5b4be3b1();
            this->_uri = mcm->get_Uri_a772cc17d83f8740();
            this->_typeName = mcm->get_TypeName_2c092df7327c2af5();
            this->_methodBase = mcm->get_MethodBase_be82dccd2d92b9f6();
            this->_methodSignature = cli::cast<cli::array<System::Type*>*>(mcm->get_MethodSignature_a58bc01e7b3e43ec());
            this->_args = mcm->get_Args_1b1b87289e375adf();
        }
        if((h1 != nullptr)) 
        {
            for(auto tmp_406 : h1) {
                auto header = cli::cast<Header*>(tmp_406);
                InitMethodProperty(header->Name2, header->Value);
            }
        }
    }
    
    void MethodResponse::constructor(System::Exception* e, IMethodCallMessage* msg) {
        this->_callMsg = msg;
        if((msg != nullptr)) 
        {
            this->_uri = msg->get_Uri_a772cc17d83f8740();
        }
         else 
        {
            this->_uri = System::String::Empty;
        }
        this->_exception = e;
        this->_returnValue = nullptr;
        this->_outArgs = (new cli::array<System::Object*>(0));
    }
    
    void MethodResponse::constructor(System::Object* returnValue, cli::array<System::Object*>* outArgs, LogicalCallContext* callCtx, IMethodCallMessage* msg) {
        this->_callMsg = msg;
        this->_uri = msg->get_Uri_a772cc17d83f8740();
        this->_exception = nullptr;
        this->_returnValue = returnValue;
        this->_args = outArgs;
    }
    
    void MethodResponse::constructor(IMethodCallMessage* msg, CADMethodReturnMessage* retmsg) {
        this->_callMsg = msg;
        this->_methodBase = msg->get_MethodBase_be82dccd2d92b9f6();
        this->_uri = msg->get_Uri_a772cc17d83f8740();
        this->_methodName = msg->get_MethodName_f32f67fc5b4be3b1();
        System::Collections::ArrayList *args = retmsg->GetArguments();
        this->_exception = retmsg->GetException(args);
        this->_returnValue = retmsg->GetReturnValue(args);
        this->_args = retmsg->GetArgs(args);
        this->_callContext = retmsg->GetLogicalCallContext(args);
        if((this->_callContext ==  nullptr)) 
        {
            this->_callContext = cli::gcnew<LogicalCallContext>();
        }
        if((retmsg->get_PropertiesCount() > 0)) 
        {
            CADMessageBase::UnmarshalProperties(this->get_Properties_42e9af5b3d4ade59(), retmsg->get_PropertiesCount(), args);
        }
    }
    
    void MethodResponse::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        for(auto tmp_407 : info->GetEnumerator()) {
            auto entry = cli::cast<System::Runtime::Serialization::SerializationEntry>(tmp_407);
            InitMethodProperty(entry->get_Name(), entry->get_Value());
        }
    }
    
    void MethodResponse::InitMethodProperty(System::String* key, System::Object* value) {
        System::String* tmp_408 = key;
        ::System::Int32 tmp_409 = -1;
        if(::System::String::Equals3(tmp_408, _T("__TypeName"))) tmp_409 = 0;
        if(::System::String::Equals3(tmp_408, _T("__MethodName"))) tmp_409 = 1;
        if(::System::String::Equals3(tmp_408, _T("__MethodSignature"))) tmp_409 = 2;
        if(::System::String::Equals3(tmp_408, _T("__Uri"))) tmp_409 = 3;
        if(::System::String::Equals3(tmp_408, _T("__Return"))) tmp_409 = 4;
        if(::System::String::Equals3(tmp_408, _T("__OutArgs"))) tmp_409 = 5;
        if(::System::String::Equals3(tmp_408, _T("__fault"))) tmp_409 = 6;
        if(::System::String::Equals3(tmp_408, _T("__CallContext"))) tmp_409 = 7;
        switch(tmp_409)
        {
            case 0: case_1402: 
            {
                this->_typeName = cli::cast<System::String*>(value);
                break;
            }
            case 1: case_1403: 
            {
                this->_methodName = cli::cast<System::String*>(value);
                break;
            }
            case 2: case_1404: 
            {
                this->_methodSignature = cli::cast<cli::array<System::Type*>*>(value);
                break;
            }
            case 3: case_1405: 
            {
                this->_uri = cli::cast<System::String*>(value);
                break;
            }
            case 4: case_1406: 
            {
                this->_returnValue = value;
                break;
            }
            case 5: case_1407: 
            {
                this->_args = cli::cast<cli::array<System::Object*>*>(value);
                break;
            }
            case 6: case_1408: 
            {
                this->_exception = cli::cast<System::Exception*>(value);
                break;
            }
            case 7: case_1409: 
            {
                this->_callContext = cli::cast<LogicalCallContext*>(value);
                break;
            }
            default: case_1410: 
            {
                this->get_Properties_42e9af5b3d4ade59()->set_Item_a0c4aaef01cc13c2(key, value);
                break;
            }
        }
    }
    
    System::Object* MethodResponse::GetArg(int32_t argNum) {
        if((this->_args ==  nullptr)) 
        {
            return nullptr;
        }
        return this->_args->at(argNum);
    }
    
    System::String* MethodResponse::GetArgName(int32_t index) {
        return this->get_MethodBase()->GetParameters_9d17bcb549474c9()->at(index)->get_Name_1ad7a68577256740();
    }
    
    void MethodResponse::GetObjectData_1ee8033ec9301158(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        if((this->_exception ==  nullptr)) 
        {
            info->AddValue16(_T("__TypeName"), this->_typeName);
            info->AddValue16(_T("__MethodName"), this->_methodName);
            info->AddValue16(_T("__MethodSignature"), this->_methodSignature);
            info->AddValue16(_T("__Uri"), this->_uri);
            info->AddValue16(_T("__Return"), this->_returnValue);
            info->AddValue16(_T("__OutArgs"), this->_args);
        }
         else 
        {
            info->AddValue16(_T("__fault"), this->_exception);
        }
        info->AddValue16(_T("__CallContext"), this->_callContext);
        if((this->InternalProperties != nullptr)) 
        {
            for(auto tmp_410 : this->InternalProperties) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_410);
                info->AddValue16(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
            }
        }
    }
    
    System::Object* MethodResponse::GetOutArg(int32_t argNum) {
        if((this->_args ==  nullptr)) 
        {
            return nullptr;
        }
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_args->at(this->_inArgInfo->GetInOutArgIndex(argNum));
    }
    
    System::String* MethodResponse::GetOutArgName(int32_t index) {
        if(System::Reflection::MethodBase::op_Equality2(nullptr, this->_methodBase)) 
        {
            return cli::concat(_T("__method_"), cli::box(index));
        }
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_inArgInfo->GetInOutArgName_2fa2ff0ffc15d79f(index);
    }
    
    System::Object* MethodResponse::HeaderHandler_61c0b0e57c2852f8(cli::array<Header*>* h) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MethodResponse::RootSetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext ctx) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t MethodResponse::get_ArgCount() {
        if((this->_args ==  nullptr)) 
        {
            return 0;
        }
        return this->_args->get_Length();
    }
    
    cli::array<System::Object*>* MethodResponse::get_Args() {
        return this->_args;
    }
    
    System::Exception* MethodResponse::get_Exception() {
        return this->_exception;
    }
    
    bool MethodResponse::get_HasVarArgs() {
        return ((int32_t)(((int32_t)(this->get_MethodBase()->get_CallingConvention_309cf574b58a053a()) | 2)) != 0);
    }
    
    LogicalCallContext* MethodResponse::get_LogicalCallContext() {
        if((this->_callContext ==  nullptr)) 
        {
            this->_callContext = cli::gcnew<LogicalCallContext>();
        }
        return this->_callContext;
    }
    
    System::Reflection::MethodBase* MethodResponse::get_MethodBase() {
        if(System::Reflection::MethodBase::op_Equality2(nullptr, this->_methodBase)) 
        {
            if((this->_callMsg != nullptr)) 
            {
                this->_methodBase = this->_callMsg->get_MethodBase_be82dccd2d92b9f6();
            }
             else 
            {
                if(((this->get_MethodName() != nullptr) && (this->get_TypeName() != nullptr))) 
                {
                    this->_methodBase = System::Runtime::Remoting::RemotingServices::GetMethodBaseFromMethodMessage(this);
                }
            }
        }
        return this->_methodBase;
    }
    
    System::String* MethodResponse::get_MethodName() {
        if(((this->_methodName ==  nullptr) && (this->_callMsg != nullptr))) 
        {
            this->_methodName = this->_callMsg->get_MethodName_f32f67fc5b4be3b1();
        }
        return this->_methodName;
    }
    
    System::Object* MethodResponse::get_MethodSignature() {
        if(((this->_methodSignature ==  nullptr) && (this->_callMsg != nullptr))) 
        {
            this->_methodSignature = cli::cast<cli::array<System::Type*>*>(this->_callMsg->get_MethodSignature_a58bc01e7b3e43ec());
        }
        return this->_methodSignature;
    }
    
    int32_t MethodResponse::get_OutArgCount() {
        if(((this->_args ==  nullptr) || (this->_args->get_Length() ==  0))) 
        {
            return 0;
        }
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_inArgInfo->GetInOutArgCount();
    }
    
    cli::array<System::Object*>* MethodResponse::get_OutArgs() {
        if(((this->_outArgs ==  nullptr) && (this->_args != nullptr))) 
        {
            if((this->_inArgInfo ==  nullptr)) 
            {
                this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
            }
            this->_outArgs = this->_inArgInfo->GetInOutArgs(this->_args);
        }
        return this->_outArgs;
    }
    
    System::Collections::IDictionary* MethodResponse::get_Properties_42e9af5b3d4ade59() {
        if((this->ExternalProperties ==  nullptr)) 
        {
            MethodReturnDictionary *properties = cli::gcnew<MethodReturnDictionary>(this);
            this->ExternalProperties = properties;
            this->InternalProperties = properties->GetInternalProperties();
        }
        return this->ExternalProperties;
    }
    
    System::Object* MethodResponse::get_ReturnValue() {
        return this->_returnValue;
    }
    
    System::String* MethodResponse::get_TypeName() {
        if(((this->_typeName ==  nullptr) && (this->_callMsg != nullptr))) 
        {
            this->_typeName = this->_callMsg->get_TypeName_2c092df7327c2af5();
        }
        return this->_typeName;
    }
    
    System::String* MethodResponse::get_Uri() {
        if(((this->_uri ==  nullptr) && (this->_callMsg != nullptr))) 
        {
            this->_uri = this->_callMsg->get_Uri_a772cc17d83f8740();
        }
        return this->_uri;
    }
    
    System::String* MethodResponse::set_Uri(System::String* value) {
        this->_uri = value;
        return get_Uri();
    }
    
    System::String* MethodResponse::get_Uri2() {
        return this->get_Uri();
    }
    
    System::String* MethodResponse::set_Uri2(System::String* value) {
        this->set_Uri(value);
        return get_Uri2();
    }
    
    System::Runtime::Remoting::Identity* MethodResponse::get_TargetIdentity() {
        return this->_targetIdentity;
    }
    
    System::Runtime::Remoting::Identity* MethodResponse::set_TargetIdentity(System::Runtime::Remoting::Identity* value) {
        this->_targetIdentity = value;
        return get_TargetIdentity();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<System::String*>*  MethodReturnDictionary::InternalReturnKeys;
    cli::array<System::String*>*  MethodReturnDictionary::InternalExceptionKeys;
    
    MethodReturnDictionary::MethodReturnDictionary()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void MethodReturnDictionary::constructor(IMethodReturnMessage* message) {
        if((message->get_Exception_f355b7f547514947() ==  nullptr)) 
        {
            this->set_MethodKeys(InternalReturnKeys);
        }
         else 
        {
            this->set_MethodKeys(InternalExceptionKeys);
        }
    }
    
    void MethodReturnDictionary::static_constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    cli::array<System::String*>*  DictionaryWrapper2::_keys;
    
    DictionaryWrapper2::DictionaryWrapper2()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void DictionaryWrapper2::constructor(IMethodReturnMessage* message, System::Collections::IDictionary* wrappedDictionary) {
        this->_wrappedDictionary = wrappedDictionary;
        this->set_MethodKeys(_keys);
    }
    
    void DictionaryWrapper2::static_constructor() {
    }
    
    System::Collections::IDictionary* DictionaryWrapper2::AllocInternalProperties_ac55c475ad3bbe92() {
        return this->_wrappedDictionary;
    }
    
    void DictionaryWrapper2::SetMethodProperty_3ab813fd84638e38(System::String* key, System::Object* value) {
        if(System::String::op_Equality(key, _T("__Args"))) 
        {
            cli::cast<MethodReturnMessageWrapper*>(this->_message)->_args = cli::cast<cli::array<System::Object*>*>(value);
        }
         else 
        {
            if(System::String::op_Equality(key, _T("__Return"))) 
            {
                cli::cast<MethodReturnMessageWrapper*>(this->_message)->_return = value;
            }
             else 
            {
                MethodReturnDictionary::SetMethodProperty_3ab813fd84638e38(key, value);
            }
        }
    }
    
    System::Object* DictionaryWrapper2::GetMethodProperty_4070f877cd8723cd(System::String* key) {
        if(System::String::op_Equality(key, _T("__Args"))) 
        {
            return cli::cast<MethodReturnMessageWrapper*>(this->_message)->_args;
        }
         else 
        {
            if(System::String::op_Equality(key, _T("__Return"))) 
            {
                return cli::cast<MethodReturnMessageWrapper*>(this->_message)->_return;
            }
             else 
            {
                return MethodReturnDictionary::GetMethodProperty_4070f877cd8723cd(key);
            }
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void MethodReturnMessageWrapper::constructor(IMethodReturnMessage* msg) {
        if((msg->get_Exception_f355b7f547514947() != nullptr)) 
        {
            this->_exception = msg->get_Exception_f355b7f547514947();
            this->_args = (new cli::array<System::Object*>(0));
        }
         else 
        {
            this->_args = msg->get_Args_1b1b87289e375adf();
            this->_return = msg->get_ReturnValue_5e8804a33ce4fa71();
            if(System::Reflection::MethodBase::op_Inequality2(msg->get_MethodBase_be82dccd2d92b9f6(), nullptr)) 
            {
                this->_outArgInfo = cli::gcnew<ArgInfo>(msg->get_MethodBase_be82dccd2d92b9f6(), ArgInfoType::Out);
            }
        }
    }
    
    System::Object* MethodReturnMessageWrapper::GetArg_99407870c0a11bde(int32_t argNum) {
        return this->_args->at(argNum);
    }
    
    System::String* MethodReturnMessageWrapper::GetArgName_e73597c4d5d9642b(int32_t index) {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->GetArgName_fe0b5c1914782402(index);
    }
    
    System::Object* MethodReturnMessageWrapper::GetOutArg_574514e67d145e3b(int32_t argNum) {
        return this->_args->at(this->_outArgInfo->GetInOutArgIndex(argNum));
    }
    
    System::String* MethodReturnMessageWrapper::GetOutArgName_d257e979435a25c2(int32_t index) {
        return this->_outArgInfo->GetInOutArgName_2fa2ff0ffc15d79f(index);
    }
    
    int32_t MethodReturnMessageWrapper::get_ArgCount_a9845951d951911d() {
        return this->_args->get_Length();
    }
    
    cli::array<System::Object*>* MethodReturnMessageWrapper::get_Args_32591b6b0d32b695() {
        return this->_args;
    }
    
    cli::array<System::Object*>* MethodReturnMessageWrapper::set_Args_828fd48351c501cb(cli::array<System::Object*>* value) {
        this->_args = value;
        return get_Args_32591b6b0d32b695();
    }
    
    System::Exception* MethodReturnMessageWrapper::get_Exception_532b585a2ea6623e() {
        return this->_exception;
    }
    
    System::Exception* MethodReturnMessageWrapper::set_Exception_b8feb59941b7766b(System::Exception* value) {
        this->_exception = value;
        return get_Exception_532b585a2ea6623e();
    }
    
    bool MethodReturnMessageWrapper::get_HasVarArgs_b72c87182c49e83d() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_HasVarArgs_554adf133c756bdc();
    }
    
    LogicalCallContext* MethodReturnMessageWrapper::get_LogicalCallContext_ea80d780b51c3cd9() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_LogicalCallContext_a19aeadfaffa89b7();
    }
    
    System::Reflection::MethodBase* MethodReturnMessageWrapper::get_MethodBase_61a9a4b8069a5514() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_MethodBase_be82dccd2d92b9f6();
    }
    
    System::String* MethodReturnMessageWrapper::get_MethodName_f2186ba17c86255e() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_MethodName_f32f67fc5b4be3b1();
    }
    
    System::Object* MethodReturnMessageWrapper::get_MethodSignature_5c18eb338cb7d4b0() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_MethodSignature_a58bc01e7b3e43ec();
    }
    
    int32_t MethodReturnMessageWrapper::get_OutArgCount_e027a0d935f171bf() {
        return (this->_outArgInfo != nullptr) ? this->_outArgInfo->GetInOutArgCount() : 0;
    }
    
    cli::array<System::Object*>* MethodReturnMessageWrapper::get_OutArgs_fa7599485c150173() {
        return (this->_outArgInfo != nullptr) ? this->_outArgInfo->GetInOutArgs(this->_args) : this->_args;
    }
    
    System::Collections::IDictionary* MethodReturnMessageWrapper::get_Properties_892057f5a1f5b6d4() {
        if((this->_properties ==  nullptr)) 
        {
            this->_properties = cli::gcnew<DictionaryWrapper2>(this, this->WrappedMessage->get_Properties_d88088440249f163());
        }
        return this->_properties;
    }
    
    System::Object* MethodReturnMessageWrapper::get_ReturnValue_90df0be5d7725988() {
        return this->_return;
    }
    
    System::Object* MethodReturnMessageWrapper::set_ReturnValue_b3b84d412385e777(System::Object* value) {
        this->_return = value;
        return get_ReturnValue_90df0be5d7725988();
    }
    
    System::String* MethodReturnMessageWrapper::get_TypeName_f3750a15f7d822c3() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_TypeName_2c092df7327c2af5();
    }
    
    System::String* MethodReturnMessageWrapper::get_Uri() {
        return cli::cast<IMethodReturnMessage*>(this->WrappedMessage)->get_Uri_a772cc17d83f8740();
    }
    
    System::String* MethodReturnMessageWrapper::set_Uri(System::String* value) {
        this->get_Properties_892057f5a1f5b6d4()->set_Item_a0c4aaef01cc13c2(_T("__Uri"), value);
        return get_Uri();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void MonoMethodMessage::constructor(System::Reflection::MethodBase* method, cli::array<System::Object*>* out_args) {
        if(System::Reflection::MethodBase::op_Inequality2(method, nullptr)) 
        {
            InitMessage(cli::cast<System::Reflection::MonoMethod*>(method), out_args);
        }
         else 
        {
            this->args = nullptr;
        }
    }
    
    void MonoMethodMessage::constructor(System::Type* type, System::String* method_name, cli::array<System::Object*>* in_args) {
        System::Reflection::MethodInfo *minfo = type->GetMethod(method_name);
        InitMessage(cli::cast<System::Reflection::MonoMethod*>(minfo), nullptr);
        int32_t len = in_args->get_Length();
        for(int32_t i = 0; (i < len); i++){
            this->args->at(i) = in_args->at(i);
        }
    }
    
    void MonoMethodMessage::InitMessage(System::Reflection::MonoMethod* method, cli::array<System::Object*>* out_args) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* MonoMethodMessage::GetArg(int32_t arg_num) {
        if((this->args ==  nullptr)) 
        {
            return nullptr;
        }
        return this->args->at(arg_num);
    }
    
    System::String* MonoMethodMessage::GetArgName(int32_t arg_num) {
        if((this->args ==  nullptr)) 
        {
            return System::String::Empty;
        }
        return this->names->at(arg_num);
    }
    
    System::Object* MonoMethodMessage::GetInArg(int32_t arg_num) {
        int32_t i = 0, j = 0;
        for(auto tmp_411 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_411);
            {
                if((((int32_t)(t) & 1) != 0)) 
                {
                    if((j++ ==  arg_num)) 
                    {
                        return this->args->at(i);
                    }
                }
                i++;
            }
        }
        return nullptr;
    }
    
    System::String* MonoMethodMessage::GetInArgName(int32_t arg_num) {
        int32_t i = 0, j = 0;
        for(auto tmp_412 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_412);
            {
                if((((int32_t)(t) & 1) != 0)) 
                {
                    if((j++ ==  arg_num)) 
                    {
                        return this->names->at(i);
                    }
                }
                i++;
            }
        }
        return nullptr;
    }
    
    System::Object* MonoMethodMessage::GetOutArg(int32_t arg_num) {
        int32_t i = 0, j = 0;
        for(auto tmp_413 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_413);
            {
                if((((int32_t)(t) & 2) != 0)) 
                {
                    if((j++ ==  arg_num)) 
                    {
                        return this->args->at(i);
                    }
                }
                i++;
            }
        }
        return nullptr;
    }
    
    System::String* MonoMethodMessage::GetOutArgName(int32_t arg_num) {
        int32_t i = 0, j = 0;
        for(auto tmp_414 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_414);
            {
                if((((int32_t)(t) & 2) != 0)) 
                {
                    if((j++ ==  arg_num)) 
                    {
                        return this->names->at(i);
                    }
                }
                i++;
            }
        }
        return nullptr;
    }
    
    bool MonoMethodMessage::NeedsOutProcessing(int32_t outCount) {
        bool res = false;
        outCount = 0;
        for(auto tmp_415 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_415);
            {
                if((((int32_t)(t) & 2) != 0)) 
                {
                    outCount++;
                }
                 else 
                {
                    if((((int32_t)(t) & 4) != 0)) 
                    {
                        res = true;
                    }
                }
            }
        }
        return ((outCount > 0) || res);
    }
    
    System::Collections::IDictionary* MonoMethodMessage::get_Properties() {
        if((this->properties ==  nullptr)) 
        {
            this->properties = cli::gcnew<MethodCallDictionary>(this);
        }
        return this->properties;
    }
    
    int32_t MonoMethodMessage::get_ArgCount() {
        if(((int32_t)(this->get_CallType()) ==  2)) 
        {
            return -1;
        }
        if((this->args ==  nullptr)) 
        {
            return 0;
        }
        return this->args->get_Length();
    }
    
    cli::array<System::Object*>* MonoMethodMessage::get_Args() {
        return this->args;
    }
    
    bool MonoMethodMessage::get_HasVarArgs() {
        return false;
    }
    
    LogicalCallContext* MonoMethodMessage::get_LogicalCallContext() {
        return this->ctx;
    }
    
    LogicalCallContext* MonoMethodMessage::set_LogicalCallContext(LogicalCallContext* value) {
        this->ctx = value;
        return get_LogicalCallContext();
    }
    
    System::Reflection::MethodBase* MonoMethodMessage::get_MethodBase() {
        return this->method;
    }
    
    System::String* MonoMethodMessage::get_MethodName() {
        if(System::Reflection::MethodInfo::op_Equality(nullptr, this->method)) 
        {
            return System::String::Empty;
        }
        return this->method->get_Name_50fad5fa936c3ae2();
    }
    
    System::Object* MonoMethodMessage::get_MethodSignature() {
        if((this->methodSignature ==  nullptr)) 
        {
            cli::array<System::Reflection::ParameterInfo*> *parameters = this->method->GetParameters_9d17bcb549474c9();
            this->methodSignature = (new cli::array<System::Type*>(parameters->get_Length()));
            for(int32_t n = 0; (n < parameters->get_Length()); n++) {
                this->methodSignature->at(n) = parameters->at(n)->get_ParameterType_97c5fa09a0b988d();
            }
        }
        return this->methodSignature;
    }
    
    System::String* MonoMethodMessage::get_TypeName() {
        if(System::Reflection::MethodInfo::op_Equality(nullptr, this->method)) 
        {
            return System::String::Empty;
        }
        return this->method->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
    }
    
    System::String* MonoMethodMessage::get_Uri() {
        return this->uri;
    }
    
    System::String* MonoMethodMessage::set_Uri(System::String* value) {
        this->uri = value;
        return get_Uri();
    }
    
    int32_t MonoMethodMessage::get_InArgCount() {
        if(((int32_t)(this->get_CallType()) ==  2)) 
        {
            return -1;
        }
        if((this->args ==  nullptr)) 
        {
            return 0;
        }
        int32_t count = 0;
        for(auto tmp_416 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_416);
            {
                if((((int32_t)(t) & 1) != 0)) 
                {
                    count++;
                }
            }
        }
        return count;
    }
    
    cli::array<System::Object*>* MonoMethodMessage::get_InArgs() {
        int32_t i, j, count = this->get_InArgCount();
        cli::array<System::Object*> *inargs = (new cli::array<System::Object*>(count));
        i = j = 0;
        for(auto tmp_417 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_417);
            {
                if((((int32_t)(t) & 1) != 0)) 
                {
                    inargs->at(j++) = this->args->at(i);
                }
                i++;
            }
        }
        return inargs;
    }
    
    System::Exception* MonoMethodMessage::get_Exception() {
        return this->exc;
    }
    
    int32_t MonoMethodMessage::get_OutArgCount() {
        if((this->args ==  nullptr)) 
        {
            return 0;
        }
        int32_t count = 0;
        for(auto tmp_418 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_418);
            {
                if((((int32_t)(t) & 2) != 0)) 
                {
                    count++;
                }
            }
        }
        return count;
    }
    
    cli::array<System::Object*>* MonoMethodMessage::get_OutArgs() {
        if((this->args ==  nullptr)) 
        {
            return nullptr;
        }
        int32_t i, j, count = this->get_OutArgCount();
        cli::array<System::Object*> *outargs = (new cli::array<System::Object*>(count));
        i = j = 0;
        for(auto tmp_419 : this->arg_types) {
            auto t = cli::cast<unsigned char>(tmp_419);
            {
                if((((int32_t)(t) & 2) != 0)) 
                {
                    outargs->at(j++) = this->args->at(i);
                }
                i++;
            }
        }
        return outargs;
    }
    
    System::Object* MonoMethodMessage::get_ReturnValue() {
        return this->rval;
    }
    
    System::Runtime::Remoting::Identity* MonoMethodMessage::get_TargetIdentity() {
        return this->identity;
    }
    
    System::Runtime::Remoting::Identity* MonoMethodMessage::set_TargetIdentity(System::Runtime::Remoting::Identity* value) {
        this->identity = value;
        return get_TargetIdentity();
    }
    
    bool MonoMethodMessage::get_IsAsync() {
        return (this->asyncResult != nullptr);
    }
    
    AsyncResult* MonoMethodMessage::get_AsyncResult() {
        return this->asyncResult;
    }
    
    CallType MonoMethodMessage::get_CallType() {
        if((((int32_t)(this->call_type) ==  0) && System::Runtime::Remoting::RemotingServices::IsOneWay(this->method))) 
        {
            this->call_type = CallType::OneWay;
        }
        return this->call_type;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void OneWayAttribute::constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void RemotingSurrogate::constructor() {
    }
    
    void RemotingSurrogate::GetObjectData_ea2423204af32b20(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) {
        if(((obj ==  nullptr) || (si ==  nullptr))) 
        {
            throw cli::gcnew<System::ArgumentNullException>();
        }
        if(System::Runtime::Remoting::RemotingServices::IsTransparentProxy(obj)) 
        {
            System::Runtime::Remoting::Proxies::RealProxy *rp = System::Runtime::Remoting::RemotingServices::GetRealProxy(obj);
            rp->GetObjectData_fa01d7e4569bf5cb(si, sc);
        }
         else 
        {
            System::Runtime::Remoting::RemotingServices::GetObjectData(obj, si, sc);
        }
    }
    
    System::Object* RemotingSurrogate::SetObjectData_e0569319b2d26b8b(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ObjRefSurrogate::constructor() {
    }
    
    void ObjRefSurrogate::GetObjectData_df250ced87a9c363(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) {
        if(((obj ==  nullptr) || (si ==  nullptr))) 
        {
            throw cli::gcnew<System::ArgumentNullException>();
        }
        cli::cast<System::Runtime::Remoting::ObjRef*>(obj)->GetObjectData_ee660fdbddbfb758(si, sc);
        si->AddValue4(_T("fIsMarshalled"), 0);
    }
    
    System::Object* ObjRefSurrogate::SetObjectData_bce92449b9ba77d2(System::Object* obj, System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc, System::Runtime::Serialization::ISurrogateSelector* selector) {
        throw cli::gcnew<System::NotSupportedException>(_T("Do not use RemotingSurrogateSelector when deserializating"));
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    System::Type*  RemotingSurrogateSelector::s_cachedTypeObjRef;
    ObjRefSurrogate*  RemotingSurrogateSelector::_objRefSurrogate;
    RemotingSurrogate*  RemotingSurrogateSelector::_objRemotingSurrogate;
    
    RemotingSurrogateSelector::RemotingSurrogateSelector()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void RemotingSurrogateSelector::constructor() {
    }
    
    void RemotingSurrogateSelector::static_constructor() {
    }
    
    void RemotingSurrogateSelector::ChainSelector_31362a36d95c626c(System::Runtime::Serialization::ISurrogateSelector* selector) {
        if((this->_next != nullptr)) 
        {
            selector->ChainSelector_b4bf6e9847cd4bb0(this->_next);
        }
        this->_next = selector;
    }
    
    System::Runtime::Serialization::ISurrogateSelector* RemotingSurrogateSelector::GetNextSelector_857a1e27cf1e9a83() {
        return this->_next;
    }
    
    System::Object* RemotingSurrogateSelector::GetRootObject() {
        return this->_rootObj;
    }
    
    System::Runtime::Serialization::ISerializationSurrogate* RemotingSurrogateSelector::GetSurrogate_43b010380df30464(System::Type* type, System::Runtime::Serialization::StreamingContext context, System::Runtime::Serialization::ISurrogateSelector* ssout) {
        if(type->get_IsMarshalByRef()) 
        {
            ssout = this;
            return _objRemotingSurrogate;
        }
        if(s_cachedTypeObjRef->IsAssignableFrom_e3aa32d778e63a90(type)) 
        {
            ssout = this;
            return _objRefSurrogate;
        }
        if((this->_next != nullptr)) 
        {
            return this->_next->GetSurrogate_9d3ffd4061f81ca8(type, context, ssout);
        }
        ssout = nullptr;
        return nullptr;
    }
    
    void RemotingSurrogateSelector::SetRootObject(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>();
        }
        this->_rootObj = obj;
    }
    
    void RemotingSurrogateSelector::UseSoapFormat_6ab660c147135491() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    MessageSurrogateFilter* RemotingSurrogateSelector::get_Filter() {
        return this->_filter;
    }
    
    MessageSurrogateFilter* RemotingSurrogateSelector::set_Filter(MessageSurrogateFilter* value) {
        this->_filter = value;
        return get_Filter();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ReturnMessage::constructor(System::Object* ret, cli::array<System::Object*>* outArgs, int32_t outArgsCount, LogicalCallContext* callCtx, IMethodCallMessage* mcm) {
        this->_returnValue = ret;
        this->_args = outArgs;
        this->_callCtx = callCtx;
        if((mcm != nullptr)) 
        {
            this->_uri = mcm->get_Uri_a772cc17d83f8740();
            this->_methodBase = mcm->get_MethodBase_be82dccd2d92b9f6();
        }
        if((this->_args ==  nullptr)) 
        {
            this->_args = (new cli::array<System::Object*>(outArgsCount));
        }
    }
    
    void ReturnMessage::constructor(System::Exception* e, IMethodCallMessage* mcm) {
        this->_exception = e;
        if((mcm != nullptr)) 
        {
            this->_methodBase = mcm->get_MethodBase_be82dccd2d92b9f6();
            this->_callCtx = mcm->get_LogicalCallContext_a19aeadfaffa89b7();
        }
        this->_args = (new cli::array<System::Object*>(0));
    }
    
    System::Object* ReturnMessage::GetArg(int32_t argNum) {
        return this->_args->at(argNum);
    }
    
    System::String* ReturnMessage::GetArgName(int32_t index) {
        return this->_methodBase->GetParameters_9d17bcb549474c9()->at(index)->get_Name_1ad7a68577256740();
    }
    
    System::Object* ReturnMessage::GetOutArg(int32_t argNum) {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_args->at(this->_inArgInfo->GetInOutArgIndex(argNum));
    }
    
    System::String* ReturnMessage::GetOutArgName(int32_t index) {
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_inArgInfo->GetInOutArgName_2fa2ff0ffc15d79f(index);
    }
    
    int32_t ReturnMessage::get_ArgCount() {
        return this->_args->get_Length();
    }
    
    cli::array<System::Object*>* ReturnMessage::get_Args() {
        return this->_args;
    }
    
    bool ReturnMessage::get_HasVarArgs() {
        if(System::Reflection::MethodBase::op_Equality2(this->_methodBase, nullptr)) 
        {
            return false;
        }
         else 
        {
            return ((int32_t)(((int32_t)(this->_methodBase->get_CallingConvention_309cf574b58a053a()) | 2)) != 0);
        }
    }
    
    LogicalCallContext* ReturnMessage::get_LogicalCallContext() {
        if((this->_callCtx ==  nullptr)) 
        {
            this->_callCtx = cli::gcnew<LogicalCallContext>();
        }
        return this->_callCtx;
    }
    
    System::Reflection::MethodBase* ReturnMessage::get_MethodBase() {
        return this->_methodBase;
    }
    
    System::String* ReturnMessage::get_MethodName() {
        if((System::Reflection::MethodBase::op_Inequality2(this->_methodBase, nullptr) && (this->_methodName ==  nullptr))) 
        {
            this->_methodName = this->_methodBase->get_Name_50fad5fa936c3ae2();
        }
        return this->_methodName;
    }
    
    System::Object* ReturnMessage::get_MethodSignature() {
        if((System::Reflection::MethodBase::op_Inequality2(this->_methodBase, nullptr) && (this->_methodSignature ==  nullptr))) 
        {
            cli::array<System::Reflection::ParameterInfo*> *parameters = this->_methodBase->GetParameters_9d17bcb549474c9();
            this->_methodSignature = (new cli::array<System::Type*>(parameters->get_Length()));
            for(int32_t n = 0; (n < parameters->get_Length()); n++) {
                this->_methodSignature->at(n) = parameters->at(n)->get_ParameterType_97c5fa09a0b988d();
            }
        }
        return this->_methodSignature;
    }
    
    System::Collections::IDictionary* ReturnMessage::get_Properties_74f84dd6944b322b() {
        if((this->_properties ==  nullptr)) 
        {
            this->_properties = cli::gcnew<MethodReturnDictionary>(this);
        }
        return this->_properties;
    }
    
    System::String* ReturnMessage::get_TypeName() {
        if((System::Reflection::MethodBase::op_Inequality2(this->_methodBase, nullptr) && (this->_typeName ==  nullptr))) 
        {
            this->_typeName = this->_methodBase->get_DeclaringType_6121cd6a84393166()->get_AssemblyQualifiedName_cea373c2171bd483();
        }
        return this->_typeName;
    }
    
    System::String* ReturnMessage::get_Uri() {
        return this->_uri;
    }
    
    System::String* ReturnMessage::set_Uri(System::String* value) {
        this->_uri = value;
        return get_Uri();
    }
    
    System::String* ReturnMessage::get_Uri2() {
        return this->get_Uri();
    }
    
    System::String* ReturnMessage::set_Uri2(System::String* value) {
        this->set_Uri(value);
        return get_Uri2();
    }
    
    System::Exception* ReturnMessage::get_Exception() {
        return this->_exception;
    }
    
    int32_t ReturnMessage::get_OutArgCount() {
        if(((this->_args ==  nullptr) || (this->_args->get_Length() ==  0))) 
        {
            return 0;
        }
        if((this->_inArgInfo ==  nullptr)) 
        {
            this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
        }
        return this->_inArgInfo->GetInOutArgCount();
    }
    
    cli::array<System::Object*>* ReturnMessage::get_OutArgs() {
        if(((this->_outArgs ==  nullptr) && (this->_args != nullptr))) 
        {
            if((this->_inArgInfo ==  nullptr)) 
            {
                this->_inArgInfo = cli::gcnew<ArgInfo>(this->get_MethodBase(), ArgInfoType::Out);
            }
            this->_outArgs = this->_inArgInfo->GetInOutArgs(this->_args);
        }
        return this->_outArgs;
    }
    
    System::Object* ReturnMessage::get_ReturnValue_248109c7ac83a397() {
        return this->_returnValue;
    }
    
    System::Runtime::Remoting::Identity* ReturnMessage::get_TargetIdentity() {
        return this->_targetIdentity;
    }
    
    System::Runtime::Remoting::Identity* ReturnMessage::set_TargetIdentity(System::Runtime::Remoting::Identity* value) {
        this->_targetIdentity = value;
        return get_TargetIdentity();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ServerContextTerminatorSink::constructor() {
    }
    
    IMessage* ServerContextTerminatorSink::SyncProcessMessage(IMessage* msg) {
        if(cli::is<System::Runtime::Remoting::Activation::IConstructionCallMessage>(msg)) 
        {
            return System::Runtime::Remoting::Activation::ActivationServices::CreateInstanceFromMessage(cli::cast<System::Runtime::Remoting::Activation::IConstructionCallMessage*>(msg));
        }
         else 
        {
            System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
            return identity->SyncObjectProcessMessage_63252e259b8161c6(msg);
        }
    }
    
    IMessageCtrl* ServerContextTerminatorSink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        return identity->AsyncObjectProcessMessage_44b7f4bc847d9247(msg, replySink);
    }
    
    IMessageSink* ServerContextTerminatorSink::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ServerObjectTerminatorSink::constructor(IMessageSink* nextSink) {
        this->_nextSink = nextSink;
    }
    
    IMessage* ServerObjectTerminatorSink::SyncProcessMessage(IMessage* msg) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        identity->NotifyServerDynamicSinks(true, msg, false, false);
        IMessage *res = this->_nextSink->SyncProcessMessage_d4949581639d4872(msg);
        identity->NotifyServerDynamicSinks(false, msg, false, false);
        return res;
    }
    
    IMessageCtrl* ServerObjectTerminatorSink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        System::Runtime::Remoting::ServerIdentity *identity = cli::cast<System::Runtime::Remoting::ServerIdentity*>(System::Runtime::Remoting::RemotingServices::GetMessageTargetIdentity(msg));
        if(identity->get_HasServerDynamicSinks()) 
        {
            identity->NotifyServerDynamicSinks(true, msg, false, true);
            if((replySink != nullptr)) 
            {
                replySink = cli::gcnew<ServerObjectReplySink>(identity, replySink);
            }
        }
        IMessageCtrl *res = this->_nextSink->AsyncProcessMessage_3d553dfedc95e36f(msg, replySink);
        if((replySink ==  nullptr)) 
        {
            identity->NotifyServerDynamicSinks(false, msg, true, true);
        }
        return res;
    }
    
    IMessageSink* ServerObjectTerminatorSink::get_NextSink() {
        return this->_nextSink;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void ServerObjectReplySink::constructor(System::Runtime::Remoting::ServerIdentity* identity, IMessageSink* replySink) {
        this->_replySink = replySink;
        this->_identity = identity;
    }
    
    IMessage* ServerObjectReplySink::SyncProcessMessage(IMessage* msg) {
        this->_identity->NotifyServerDynamicSinks(false, msg, true, true);
        return this->_replySink->SyncProcessMessage_d4949581639d4872(msg);
    }
    
    IMessageCtrl* ServerObjectReplySink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    IMessageSink* ServerObjectReplySink::get_NextSink() {
        return this->_replySink;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Messaging {
    
    
    void StackBuilderSink::constructor(System::MarshalByRefObject* obj, bool forceInternalExecute) {
        this->_target = obj;
        if((!(forceInternalExecute) && System::Runtime::Remoting::RemotingServices::IsTransparentProxy(obj))) 
        {
            this->_rp = System::Runtime::Remoting::RemotingServices::GetRealProxy(obj);
        }
    }
    
    IMessage* StackBuilderSink::SyncProcessMessage(IMessage* msg) {
        CheckParameters(msg);
        if((this->_rp != nullptr)) 
        {
            return this->_rp->Invoke_fb5532e107d73b9f(msg);
        }
         else 
        {
            return System::Runtime::Remoting::RemotingServices::InternalExecuteMessage(this->_target, cli::cast<IMethodCallMessage*>(msg));
        }
    }
    
    IMessageCtrl* StackBuilderSink::AsyncProcessMessage(IMessage* msg, IMessageSink* replySink) {
        cli::array<System::Object*> *parms = (new cli::array<System::Object*>({msg, replySink}));
        System::Threading::ThreadPool::QueueUserWorkItem2(cli::bind([&] (System::Object* data) -> void {
            try {
                ExecuteAsyncMessage(data);
            }
            catch(...) {
            }
        }
        ), parms);
        return nullptr;
    }
    
    void StackBuilderSink::ExecuteAsyncMessage(System::Object* ob) {
        cli::array<System::Object*> *parms = cli::cast<cli::array<System::Object*>*>(ob);
        IMethodCallMessage *msg = cli::cast<IMethodCallMessage*>(parms->at(0));
        IMessageSink *replySink = cli::cast<IMessageSink*>(parms->at(1));
        CheckParameters(msg);
        IMessage *res;
        if((this->_rp != nullptr)) 
        {
            res = this->_rp->Invoke_fb5532e107d73b9f(msg);
        }
         else 
        {
            res = System::Runtime::Remoting::RemotingServices::InternalExecuteMessage(this->_target, msg);
        }
        replySink->SyncProcessMessage_d4949581639d4872(res);
    }
    
    void StackBuilderSink::CheckParameters(IMessage* msg) {
        IMethodCallMessage *mcm = cli::cast<IMethodCallMessage*>(msg);
        cli::array<System::Reflection::ParameterInfo*> *parameters = mcm->get_MethodBase_be82dccd2d92b9f6()->GetParameters_9d17bcb549474c9();
        int32_t narg = 0;
        for(auto tmp_420 : parameters) {
            auto pi = cli::cast<System::Reflection::ParameterInfo*>(tmp_420);
            {
                System::Object *pval = mcm->GetArg_b08c2cf8a17399d(narg++);
                System::Type *pt = pi->get_ParameterType_97c5fa09a0b988d();
                if(pt->get_IsByRef()) 
                {
                    pt = pt->GetElementType_ab5070dbbfe66f5f();
                }
                if(((pval != nullptr) && !(pt->IsInstanceOfType_bd709d8c55b4333d(pval)))) 
                {
                    throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Cannot cast argument "), cli::box(pi->get_Position_1e6976b43412375f()), _T(" of type \'"), pval->GetType()->get_AssemblyQualifiedName_cea373c2171bd483(), _T("\' to type \'"), pt->get_AssemblyQualifiedName_cea373c2171bd483(), _T("\'")));
                }
            }
        }
    }
    
    void StackBuilderSink::_AsyncProcessMessage_m__12(System::Object* data) {
        try {
            ExecuteAsyncMessage(data);
        }
        catch(...) {
        }
    }
    
    IMessageSink* StackBuilderSink::get_NextSink() {
        return nullptr;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    
    void SoapAttribute::constructor() {
    }
    
    void SoapAttribute::SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) {
        this->ReflectInfo = reflectionObject;
    }
    
    bool SoapAttribute::get_Embedded_f5ad42c3c6ddd2f2() {
        return this->_nested;
    }
    
    bool SoapAttribute::set_Embedded_139f29de313baee0(bool value) {
        this->_nested = value;
        return get_Embedded_f5ad42c3c6ddd2f2();
    }
    
    bool SoapAttribute::get_UseAttribute_8c48997d109215be() {
        return this->_useAttribute;
    }
    
    bool SoapAttribute::set_UseAttribute_58a33ce933bb0a6a(bool value) {
        this->_useAttribute = value;
        return get_UseAttribute_8c48997d109215be();
    }
    
    System::String* SoapAttribute::get_XmlNamespace_85ad94434edc23f3() {
        return this->ProtXmlNamespace;
    }
    
    System::String* SoapAttribute::set_XmlNamespace_4b7c52cb770bdec0(System::String* value) {
        this->ProtXmlNamespace = value;
        return get_XmlNamespace_85ad94434edc23f3();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    
    void SoapFieldAttribute::constructor() {
    }
    
    bool SoapFieldAttribute::IsInteropXmlElement() {
        return this->_isElement;
    }
    
    void SoapFieldAttribute::SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) {
        System::Reflection::FieldInfo *f = cli::cast<System::Reflection::FieldInfo*>(reflectionObject);
        if((this->_elementName ==  nullptr)) 
        {
            this->_elementName = f->get_Name_50fad5fa936c3ae2();
        }
    }
    
    int32_t SoapFieldAttribute::get_Order() {
        return this->_order;
    }
    
    int32_t SoapFieldAttribute::set_Order(int32_t value) {
        this->_order = value;
        return get_Order();
    }
    
    System::String* SoapFieldAttribute::get_XmlElementName() {
        return this->_elementName;
    }
    
    System::String* SoapFieldAttribute::set_XmlElementName(System::String* value) {
        this->_isElement = (value != nullptr);
        this->_elementName = value;
        return get_XmlElementName();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    
    void SoapMethodAttribute::constructor() {
    }
    
    void SoapMethodAttribute::SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) {
        System::Reflection::MethodBase *mb = cli::cast<System::Reflection::MethodBase*>(reflectionObject);
        if((this->_responseElement ==  nullptr)) 
        {
            this->_responseElement = cli::concat(mb->get_Name_50fad5fa936c3ae2(), _T("Response"));
        }
        if((this->_responseNamespace ==  nullptr)) 
        {
            this->_responseNamespace = System::Runtime::Remoting::SoapServices::GetXmlNamespaceForMethodResponse(mb);
        }
        if((this->_returnElement ==  nullptr)) 
        {
            this->_returnElement = _T("return");
        }
        if((this->_soapAction ==  nullptr)) 
        {
            this->_soapAction = cli::concat(System::Runtime::Remoting::SoapServices::GetXmlNamespaceForMethodCall(mb), _T("#"));
        }
        if((this->_namespace ==  nullptr)) 
        {
            this->_namespace = System::Runtime::Remoting::SoapServices::GetXmlNamespaceForMethodCall(mb);
        }
    }
    
    System::String* SoapMethodAttribute::get_ResponseXmlElementName() {
        return this->_responseElement;
    }
    
    System::String* SoapMethodAttribute::set_ResponseXmlElementName(System::String* value) {
        this->_responseElement = value;
        return get_ResponseXmlElementName();
    }
    
    System::String* SoapMethodAttribute::get_ResponseXmlNamespace() {
        return this->_responseNamespace;
    }
    
    System::String* SoapMethodAttribute::set_ResponseXmlNamespace(System::String* value) {
        this->_responseNamespace = value;
        return get_ResponseXmlNamespace();
    }
    
    System::String* SoapMethodAttribute::get_ReturnXmlElementName() {
        return this->_returnElement;
    }
    
    System::String* SoapMethodAttribute::set_ReturnXmlElementName(System::String* value) {
        this->_returnElement = value;
        return get_ReturnXmlElementName();
    }
    
    System::String* SoapMethodAttribute::get_SoapAction() {
        return this->_soapAction;
    }
    
    System::String* SoapMethodAttribute::set_SoapAction(System::String* value) {
        this->_soapAction = value;
        return get_SoapAction();
    }
    
    bool SoapMethodAttribute::get_UseAttribute_8c48997d109215be() {
        return this->_useAttribute2;
    }
    
    bool SoapMethodAttribute::set_UseAttribute_58a33ce933bb0a6a(bool value) {
        this->_useAttribute2 = value;
        return get_UseAttribute_8c48997d109215be();
    }
    
    System::String* SoapMethodAttribute::get_XmlNamespace_85ad94434edc23f3() {
        return this->_namespace;
    }
    
    System::String* SoapMethodAttribute::set_XmlNamespace_4b7c52cb770bdec0(System::String* value) {
        this->_namespace = value;
        return get_XmlNamespace_85ad94434edc23f3();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    
    void SoapParameterAttribute::constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata {
    
    
    void SoapTypeAttribute::constructor() {
    }
    
    void SoapTypeAttribute::SetReflectionObject_18f6b22db2459372(System::Object* reflectionObject) {
        System::Type *type = cli::cast<System::Type*>(reflectionObject);
        if((this->_xmlElementName ==  nullptr)) 
        {
            this->_xmlElementName = type->get_Name_50fad5fa936c3ae2();
        }
        if((this->_xmlTypeName ==  nullptr)) 
        {
            this->_xmlTypeName = type->get_Name_50fad5fa936c3ae2();
        }
        if((this->_xmlTypeNamespace ==  nullptr)) 
        {
            System::String *na;
            if(System::Reflection::Assembly::op_Equality(type->get_Assembly_3aae0acbf2a6d696(), cli::typeof<System::Type>::info->get_Assembly_3aae0acbf2a6d696())) 
            {
                na = System::String::Empty;
            }
             else 
            {
                na = type->get_Assembly_3aae0acbf2a6d696()->GetName_7088a38b93d0dcc5()->get_Name();
            }
            this->_xmlTypeNamespace = System::Runtime::Remoting::SoapServices::CodeXmlNamespaceForClrTypeNamespace(type->get_Namespace_cb4ed37007083e7f(), na);
        }
        if((this->_xmlNamespace ==  nullptr)) 
        {
            this->_xmlNamespace = this->_xmlTypeNamespace;
        }
    }
    
    SoapOption SoapTypeAttribute::get_SoapOptions() {
        return this->_soapOption;
    }
    
    SoapOption SoapTypeAttribute::set_SoapOptions(SoapOption value) {
        this->_soapOption = value;
        return get_SoapOptions();
    }
    
    bool SoapTypeAttribute::get_UseAttribute_8c48997d109215be() {
        return this->_useAttribute2;
    }
    
    bool SoapTypeAttribute::set_UseAttribute_58a33ce933bb0a6a(bool value) {
        this->_useAttribute2 = value;
        return get_UseAttribute_8c48997d109215be();
    }
    
    System::String* SoapTypeAttribute::get_XmlElementName() {
        return this->_xmlElementName;
    }
    
    System::String* SoapTypeAttribute::set_XmlElementName(System::String* value) {
        this->_isElement = (value != nullptr);
        this->_xmlElementName = value;
        return get_XmlElementName();
    }
    
    XmlFieldOrderOption SoapTypeAttribute::get_XmlFieldOrder() {
        return this->_xmlFieldOrder;
    }
    
    XmlFieldOrderOption SoapTypeAttribute::set_XmlFieldOrder(XmlFieldOrderOption value) {
        this->_xmlFieldOrder = value;
        return get_XmlFieldOrder();
    }
    
    System::String* SoapTypeAttribute::get_XmlNamespace_85ad94434edc23f3() {
        return this->_xmlNamespace;
    }
    
    System::String* SoapTypeAttribute::set_XmlNamespace_4b7c52cb770bdec0(System::String* value) {
        this->_isElement = (value != nullptr);
        this->_xmlNamespace = value;
        return get_XmlNamespace_85ad94434edc23f3();
    }
    
    System::String* SoapTypeAttribute::get_XmlTypeName() {
        return this->_xmlTypeName;
    }
    
    System::String* SoapTypeAttribute::set_XmlTypeName(System::String* value) {
        this->_isType = (value != nullptr);
        this->_xmlTypeName = value;
        return get_XmlTypeName();
    }
    
    System::String* SoapTypeAttribute::get_XmlTypeNamespace() {
        return this->_xmlTypeNamespace;
    }
    
    System::String* SoapTypeAttribute::set_XmlTypeNamespace(System::String* value) {
        this->_isType = (value != nullptr);
        this->_xmlTypeNamespace = value;
        return get_XmlTypeNamespace();
    }
    
    bool SoapTypeAttribute::get_IsInteropXmlElement() {
        return this->_isElement;
    }
    
    bool SoapTypeAttribute::get_IsInteropXmlType() {
        return this->_isType;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapAnyUri::constructor() {
    }
    
    void SoapAnyUri::constructor(System::String* value) {
        this->_value = value;
    }
    
    System::String* SoapAnyUri::GetXsdType() {
        return SoapAnyUri::get_XsdType();
    }
    
    SoapAnyUri* SoapAnyUri::Parse(System::String* value) {
        return cli::gcnew<SoapAnyUri>(value);
    }
    
    System::String* SoapAnyUri::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapAnyUri::get_Value() {
        return this->_value;
    }
    
    System::String* SoapAnyUri::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapAnyUri::get_XsdType() {
        return _T("anyUri");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapBase64Binary::constructor() {
    }
    
    void SoapBase64Binary::constructor(cli::array<unsigned char>* value) {
        this->_value = value;
    }
    
    System::String* SoapBase64Binary::GetXsdType() {
        return SoapBase64Binary::get_XsdType();
    }
    
    SoapBase64Binary* SoapBase64Binary::Parse(System::String* value) {
        return cli::gcnew<SoapBase64Binary>(System::Convert::FromBase64String(value));
    }
    
    System::String* SoapBase64Binary::ToString_1636a0751cb9ac11() {
        return System::Convert::ToBase64String(this->_value);
    }
    
    cli::array<unsigned char>* SoapBase64Binary::get_Value() {
        return this->_value;
    }
    
    cli::array<unsigned char>* SoapBase64Binary::set_Value(cli::array<unsigned char>* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapBase64Binary::get_XsdType() {
        return _T("base64Binary");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapDate::_datetimeFormats;
    
    SoapDate::SoapDate()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapDate::constructor() {
    }
    
    void SoapDate::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapDate::constructor(System::DateTime value, int32_t sign) {
        this->_value = value;
        this->_sign = sign;
    }
    
    void SoapDate::static_constructor() {
    }
    
    System::String* SoapDate::GetXsdType() {
        return SoapDate::get_XsdType();
    }
    
    SoapDate* SoapDate::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        SoapDate *res = cli::gcnew<SoapDate>(d);
        if(value->StartsWith(_T("-"))) 
        {
            res->set_Sign(-1);
        }
         else 
        {
            res->set_Sign(0);
        }
        return res;
    }
    
    System::String* SoapDate::ToString_1636a0751cb9ac11() {
        if((this->_sign >= 0)) 
        {
            return this->_value->ToString5(_T("yyyy-MM-dd"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
         else 
        {
            return this->_value->ToString5(_T("\'-\'yyyy-MM-dd"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
    }
    
    int32_t SoapDate::get_Sign() {
        return this->_sign;
    }
    
    int32_t SoapDate::set_Sign(int32_t value) {
        this->_sign = value;
        return get_Sign();
    }
    
    System::DateTime SoapDate::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapDate::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapDate::get_XsdType() {
        return _T("date");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapDateTime::_datetimeFormats;
    
    SoapDateTime::SoapDateTime()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapDateTime::constructor() {
    }
    
    void SoapDateTime::static_constructor() {
    }
    
    System::DateTime SoapDateTime::Parse(System::String* value) {
        return System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
    }
    
    System::String* SoapDateTime::ToString2(System::DateTime value) {
        return value->ToString5(_T("yyyy-MM-ddTHH:mm:ss.fffffffzzz"), System::Globalization::CultureInfo::get_InvariantCulture());
    }
    
    System::String* SoapDateTime::get_XsdType() {
        return _T("dateTime");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapDay::_datetimeFormats;
    
    SoapDay::SoapDay()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapDay::constructor() {
    }
    
    void SoapDay::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapDay::static_constructor() {
    }
    
    System::String* SoapDay::GetXsdType() {
        return SoapDay::get_XsdType();
    }
    
    SoapDay* SoapDay::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        return cli::gcnew<SoapDay>(d);
    }
    
    System::String* SoapDay::ToString_1636a0751cb9ac11() {
        return this->_value->ToString5(_T("---dd"), System::Globalization::CultureInfo::get_InvariantCulture());
    }
    
    System::DateTime SoapDay::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapDay::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapDay::get_XsdType() {
        return _T("gDay");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapDuration::constructor() {
    }
    
    System::TimeSpan SoapDuration::Parse(System::String* value) {
        if((value->get_Length() ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid format string for duration schema datatype."));
        }
        int32_t start = 0;
        if(((int32_t)(value->get_Chars(0)) ==  45)) 
        {
            start = 1;
        }
        bool minusValue = (start ==  1);
        if(((int32_t)(value->get_Chars(start)) != 80)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid format string for duration schema datatype."));
        }
        start++;
        int32_t parseStep = 0;
        int32_t days = 0;
        bool isTime = false;
        int32_t hours = 0;
        int32_t minutes = 0;
        double seconds = std::numeric_limits<double>::epsilon();
        bool error = false;
        int32_t i = start;
        while((i < value->get_Length())) {
            if(((int32_t)(value->get_Chars(i)) ==  84)) 
            {
                isTime = true;
                parseStep = 4;
                i++;
                start = i;
                continue;
            }
            bool isIntegerValue = true;
            int32_t dotOccurence = 0;
            for(; (i < value->get_Length()); i++){
                if(!(System::Char::IsDigit(value->get_Chars(i)))) 
                {
                    if(((int32_t)(value->get_Chars(i)) ==  46)) 
                    {
                        isIntegerValue = false;
                        dotOccurence++;
                        if((dotOccurence > 1)) 
                        {
                            error = true;
                            break;
                        }
                    }
                     else 
                    {
                        break;
                    }
                }
            }
            int32_t intValue = -1;
            double doubleValue = std::numeric_limits<double>::epsilon();
            if(isIntegerValue) 
            {
                intValue = System::Int32::Parse5(value->Substring2(start, (i - start)));
            }
             else 
            {
                doubleValue = System::Double::Parse2(value->Substring2(start, (i - start)), System::Globalization::CultureInfo::get_InvariantCulture());
            }
            switch(value->get_Chars(i)) {
                case u'Y': case_1411: {
                    (days = days + (intValue * 365));
                    if(((parseStep > 0) || !(isIntegerValue))) 
                    {
                        error = true;
                    }
                     else 
                    {
                        parseStep = 1;
                    }
                    break;
                }
                case u'M': case_1412: {
                    if(((parseStep < 2) && isIntegerValue)) 
                    {
                        (days = days + ((365 * (intValue / 12)) + (30 * (intValue % 12))));
                        parseStep = 2;
                    }
                     else 
                    {
                        if(((isTime && (parseStep < 6)) && isIntegerValue)) 
                        {
                            minutes = intValue;
                            parseStep = 6;
                        }
                         else 
                        {
                            error = true;
                        }
                    }
                    break;
                }
                case u'D': case_1413: {
                    (days = days + intValue);
                    if(((parseStep > 2) || !(isIntegerValue))) 
                    {
                        error = true;
                    }
                     else 
                    {
                        parseStep = 3;
                    }
                    break;
                }
                case u'H': case_1414: {
                    hours = intValue;
                    if(((!(isTime) || (parseStep > 4)) || !(isIntegerValue))) 
                    {
                        error = true;
                    }
                     else 
                    {
                        parseStep = 5;
                    }
                    break;
                }
                case u'S': case_1415: {
                    if(isIntegerValue) 
                    {
                        seconds = (double)(intValue);
                    }
                     else 
                    {
                        seconds = doubleValue;
                    }
                    if((!(isTime) || (parseStep > 6))) 
                    {
                        error = true;
                    }
                     else 
                    {
                        parseStep = 7;
                    }
                    break;
                }
                default: case_1416: {
                    error = true;
                    break;
                }
            }
            if(error) 
            {
                break;
            }
            ++i;
            start = i;
        }
        if(error) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid format string for duration schema datatype."));
        }
        System::TimeSpan ts = System::TimeSpan::op_Addition(cli::ctor<System::TimeSpan>(days, hours, minutes, 0), System::TimeSpan::FromSeconds(seconds));
        return minusValue ? System::TimeSpan::op_UnaryNegation(ts) : ts;
    }
    
    System::String* SoapDuration::ToString2(System::TimeSpan timeSpan) {
        System::Text::StringBuilder *builder = cli::gcnew<System::Text::StringBuilder>();
        if((timeSpan->get_Ticks() < 0L)) 
        {
            builder->Append16(u'-');
            timeSpan = timeSpan->Negate();
        }
        builder->Append16(u'P');
        if((timeSpan->get_Days() > 0)) 
        {
            builder->Append8(timeSpan->get_Days())->Append16(u'D');
        }
        if(((((timeSpan->get_Days() > 0) || (timeSpan->get_Minutes() > 0)) || (timeSpan->get_Seconds() > 0)) || (timeSpan->get_Milliseconds() > 0))) 
        {
            builder->Append16(u'T');
            if((timeSpan->get_Hours() > 0)) 
            {
                builder->Append8(timeSpan->get_Hours())->Append16(u'H');
            }
            if((timeSpan->get_Minutes() > 0)) 
            {
                builder->Append8(timeSpan->get_Minutes())->Append16(u'M');
            }
            if(((timeSpan->get_Seconds() > 0) || (timeSpan->get_Milliseconds() > 0))) 
            {
                double secs = (double)(timeSpan->get_Seconds());
                if((timeSpan->get_Milliseconds() > 0)) 
                {
                    (secs = secs + ((double)(timeSpan->get_Milliseconds()) / 1000.));
                }
                builder->Append2(System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("{0:0.0000000}"), (new cli::array<System::Object*>({cli::box(secs)}))));
                builder->Append16(u'S');
            }
        }
        return builder->ToString_1636a0751cb9ac11();
    }
    
    System::String* SoapDuration::get_XsdType() {
        return _T("duration");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapEntities::constructor() {
    }
    
    void SoapEntities::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapEntities::GetXsdType() {
        return SoapEntities::get_XsdType();
    }
    
    SoapEntities* SoapEntities::Parse(System::String* value) {
        return cli::gcnew<SoapEntities>(value);
    }
    
    System::String* SoapEntities::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapEntities::get_Value() {
        return this->_value;
    }
    
    System::String* SoapEntities::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapEntities::get_XsdType() {
        return _T("ENTITIES");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapEntity::constructor() {
    }
    
    void SoapEntity::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapEntity::GetXsdType() {
        return SoapEntity::get_XsdType();
    }
    
    SoapEntity* SoapEntity::Parse(System::String* value) {
        return cli::gcnew<SoapEntity>(value);
    }
    
    System::String* SoapEntity::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapEntity::get_Value() {
        return this->_value;
    }
    
    System::String* SoapEntity::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapEntity::get_XsdType() {
        return _T("ENTITY");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapHelper::constructor() {
    }
    
    System::Exception* SoapHelper::GetException(ISoapXsd* type, System::String* msg) {
        return cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Soap Parse error, xsd:type xsd:"), type->GetXsdType_206f3057f651893()));
    }
    
    System::String* SoapHelper::Normalize(System::String* s) {
        return s;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapHexBinary::constructor() {
    }
    
    void SoapHexBinary::constructor(cli::array<unsigned char>* value) {
        this->_value = value;
    }
    
    System::String* SoapHexBinary::GetXsdType() {
        return SoapHexBinary::get_XsdType();
    }
    
    SoapHexBinary* SoapHexBinary::Parse(System::String* value) {
        cli::array<unsigned char> *bytes = FromBinHexString(value);
        return cli::gcnew<SoapHexBinary>(bytes);
    }
    
    cli::array<unsigned char>* SoapHexBinary::FromBinHexString(System::String* value) {
        cli::array<char16_t> *chars = value->ToCharArray();
        cli::array<unsigned char> *buffer = (new cli::array<unsigned char>(((chars->get_Length() / 2) + (chars->get_Length() % 2))));
        int32_t charLength = chars->get_Length();
        if(((charLength % 2) != 0)) 
        {
            throw CreateInvalidValueException(value);
        }
        int32_t bufIndex = 0;
        for(int32_t i = 0; (i < (charLength - 1)); (i = i + 2)){
            buffer->at(bufIndex) = FromHex(chars->at(i), value);
            (buffer->at(bufIndex) = (unsigned char)((int32_t)(buffer->at(bufIndex)) << 4));
            (buffer->at(bufIndex) = (unsigned char)((int32_t)(buffer->at(bufIndex)) + (int32_t)(FromHex(chars->at((i + 1)), value))));
            bufIndex++;
        }
        return buffer;
    }
    
    unsigned char SoapHexBinary::FromHex(char16_t hexDigit, System::String* value) {
        try {
            return System::Byte::Parse3(cli::import(hexDigit)->ToString_1636a0751cb9ac11(), System::Globalization::NumberStyles::HexNumber, System::Globalization::CultureInfo::get_InvariantCulture());
        }
        catch(System::FormatException*) {
            throw CreateInvalidValueException(value);
        }
    }
    
    System::Exception* SoapHexBinary::CreateInvalidValueException(System::String* value) {
        return cli::gcnew<System::Runtime::Remoting::RemotingException>(System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("Invalid value \'{0}\' for xsd:{1}."), (new cli::array<System::Object*>({value, SoapHexBinary::get_XsdType()}))));
    }
    
    System::String* SoapHexBinary::ToString_1636a0751cb9ac11() {
        this->sb->set_Length(0);
        for(auto tmp_421 : this->_value) {
            auto b = cli::cast<unsigned char>(tmp_421);
            this->sb->Append2(cli::import(b)->ToString3(_T("X2")));
        }
        return this->sb->ToString_1636a0751cb9ac11();
    }
    
    cli::array<unsigned char>* SoapHexBinary::get_Value() {
        return this->_value;
    }
    
    cli::array<unsigned char>* SoapHexBinary::set_Value(cli::array<unsigned char>* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapHexBinary::get_XsdType() {
        return _T("hexBinary");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapId::constructor() {
    }
    
    void SoapId::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapId::GetXsdType() {
        return SoapId::get_XsdType();
    }
    
    SoapId* SoapId::Parse(System::String* value) {
        return cli::gcnew<SoapId>(value);
    }
    
    System::String* SoapId::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapId::get_Value() {
        return this->_value;
    }
    
    System::String* SoapId::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapId::get_XsdType() {
        return _T("ID");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapIdref::constructor() {
    }
    
    void SoapIdref::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapIdref::GetXsdType() {
        return SoapIdref::get_XsdType();
    }
    
    SoapIdref* SoapIdref::Parse(System::String* value) {
        return cli::gcnew<SoapIdref>(value);
    }
    
    System::String* SoapIdref::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapIdref::get_Value() {
        return this->_value;
    }
    
    System::String* SoapIdref::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapIdref::get_XsdType() {
        return _T("IDREF");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapIdrefs::constructor() {
    }
    
    void SoapIdrefs::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapIdrefs::GetXsdType() {
        return SoapIdrefs::get_XsdType();
    }
    
    SoapIdrefs* SoapIdrefs::Parse(System::String* value) {
        return cli::gcnew<SoapIdrefs>(value);
    }
    
    System::String* SoapIdrefs::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapIdrefs::get_Value() {
        return this->_value;
    }
    
    System::String* SoapIdrefs::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapIdrefs::get_XsdType() {
        return _T("IDREFS");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapInteger::constructor() {
    }
    
    void SoapInteger::constructor(System::Decimal value) {
        this->_value = value;
    }
    
    System::String* SoapInteger::GetXsdType() {
        return SoapInteger::get_XsdType();
    }
    
    SoapInteger* SoapInteger::Parse(System::String* value) {
        return cli::gcnew<SoapInteger>(System::Decimal::Parse(value));
    }
    
    System::String* SoapInteger::ToString_1636a0751cb9ac11() {
        return this->_value->ToString_1636a0751cb9ac11();
    }
    
    System::Decimal SoapInteger::get_Value() {
        return this->_value;
    }
    
    System::Decimal SoapInteger::set_Value(System::Decimal value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapInteger::get_XsdType() {
        return _T("integer");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapLanguage::constructor() {
    }
    
    void SoapLanguage::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapLanguage::GetXsdType() {
        return SoapLanguage::get_XsdType();
    }
    
    SoapLanguage* SoapLanguage::Parse(System::String* value) {
        return cli::gcnew<SoapLanguage>(value);
    }
    
    System::String* SoapLanguage::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapLanguage::get_Value() {
        return this->_value;
    }
    
    System::String* SoapLanguage::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapLanguage::get_XsdType() {
        return _T("language");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapMonth::_datetimeFormats;
    
    SoapMonth::SoapMonth()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapMonth::constructor() {
    }
    
    void SoapMonth::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapMonth::static_constructor() {
    }
    
    System::String* SoapMonth::GetXsdType() {
        return SoapMonth::get_XsdType();
    }
    
    SoapMonth* SoapMonth::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        return cli::gcnew<SoapMonth>(d);
    }
    
    System::String* SoapMonth::ToString_1636a0751cb9ac11() {
        return this->_value->ToString5(_T("--MM--"), System::Globalization::CultureInfo::get_InvariantCulture());
    }
    
    System::DateTime SoapMonth::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapMonth::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapMonth::get_XsdType() {
        return _T("gMonth");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapMonthDay::_datetimeFormats;
    
    SoapMonthDay::SoapMonthDay()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapMonthDay::constructor() {
    }
    
    void SoapMonthDay::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapMonthDay::static_constructor() {
    }
    
    System::String* SoapMonthDay::GetXsdType() {
        return SoapMonthDay::get_XsdType();
    }
    
    SoapMonthDay* SoapMonthDay::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        return cli::gcnew<SoapMonthDay>(d);
    }
    
    System::String* SoapMonthDay::ToString_1636a0751cb9ac11() {
        return this->_value->ToString5(_T("--MM-dd"), System::Globalization::CultureInfo::get_InvariantCulture());
    }
    
    System::DateTime SoapMonthDay::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapMonthDay::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapMonthDay::get_XsdType() {
        return _T("gMonthDay");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapName::constructor() {
    }
    
    void SoapName::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapName::GetXsdType() {
        return SoapName::get_XsdType();
    }
    
    SoapName* SoapName::Parse(System::String* value) {
        return cli::gcnew<SoapName>(value);
    }
    
    System::String* SoapName::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapName::get_Value() {
        return this->_value;
    }
    
    System::String* SoapName::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapName::get_XsdType() {
        return _T("Name");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNcName::constructor() {
    }
    
    void SoapNcName::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapNcName::GetXsdType() {
        return SoapNcName::get_XsdType();
    }
    
    SoapNcName* SoapNcName::Parse(System::String* value) {
        return cli::gcnew<SoapNcName>(value);
    }
    
    System::String* SoapNcName::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapNcName::get_Value() {
        return this->_value;
    }
    
    System::String* SoapNcName::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNcName::get_XsdType() {
        return _T("NCName");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNegativeInteger::constructor() {
    }
    
    void SoapNegativeInteger::constructor(System::Decimal value) {
        if(System::Decimal::op_GreaterThanOrEqual(value, cli::decimal<int>("0"))) 
        {
            throw SoapHelper::GetException(this, cli::concat(_T("invalid "), cli::box(value)));
        }
        this->_value = value;
    }
    
    System::String* SoapNegativeInteger::GetXsdType() {
        return SoapNegativeInteger::get_XsdType();
    }
    
    SoapNegativeInteger* SoapNegativeInteger::Parse(System::String* value) {
        return cli::gcnew<SoapNegativeInteger>(System::Decimal::Parse(value));
    }
    
    System::String* SoapNegativeInteger::ToString_1636a0751cb9ac11() {
        return this->_value->ToString_1636a0751cb9ac11();
    }
    
    System::Decimal SoapNegativeInteger::get_Value() {
        return this->_value;
    }
    
    System::Decimal SoapNegativeInteger::set_Value(System::Decimal value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNegativeInteger::get_XsdType() {
        return _T("negativeInteger");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNmtoken::constructor() {
    }
    
    void SoapNmtoken::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapNmtoken::GetXsdType() {
        return SoapNmtoken::get_XsdType();
    }
    
    SoapNmtoken* SoapNmtoken::Parse(System::String* value) {
        return cli::gcnew<SoapNmtoken>(value);
    }
    
    System::String* SoapNmtoken::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapNmtoken::get_Value() {
        return this->_value;
    }
    
    System::String* SoapNmtoken::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNmtoken::get_XsdType() {
        return _T("NMTOKEN");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNmtokens::constructor() {
    }
    
    void SoapNmtokens::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapNmtokens::GetXsdType() {
        return SoapNmtokens::get_XsdType();
    }
    
    SoapNmtokens* SoapNmtokens::Parse(System::String* value) {
        return cli::gcnew<SoapNmtokens>(value);
    }
    
    System::String* SoapNmtokens::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapNmtokens::get_Value() {
        return this->_value;
    }
    
    System::String* SoapNmtokens::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNmtokens::get_XsdType() {
        return _T("NMTOKENS");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNonNegativeInteger::constructor() {
    }
    
    void SoapNonNegativeInteger::constructor(System::Decimal value) {
        if(System::Decimal::op_LessThan(value, cli::decimal<int>("0"))) 
        {
            throw SoapHelper::GetException(this, cli::concat(_T("invalid "), cli::box(value)));
        }
        this->_value = value;
    }
    
    System::String* SoapNonNegativeInteger::GetXsdType() {
        return SoapNonNegativeInteger::get_XsdType();
    }
    
    SoapNonNegativeInteger* SoapNonNegativeInteger::Parse(System::String* value) {
        return cli::gcnew<SoapNonNegativeInteger>(System::Decimal::Parse(value));
    }
    
    System::String* SoapNonNegativeInteger::ToString_1636a0751cb9ac11() {
        return this->_value->ToString_1636a0751cb9ac11();
    }
    
    System::Decimal SoapNonNegativeInteger::get_Value() {
        return this->_value;
    }
    
    System::Decimal SoapNonNegativeInteger::set_Value(System::Decimal value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNonNegativeInteger::get_XsdType() {
        return _T("nonNegativeInteger");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNonPositiveInteger::constructor() {
    }
    
    void SoapNonPositiveInteger::constructor(System::Decimal value) {
        if(System::Decimal::op_GreaterThan(value, cli::decimal<int>("0"))) 
        {
            throw SoapHelper::GetException(this, cli::concat(_T("invalid "), cli::box(value)));
        }
        this->_value = value;
    }
    
    System::String* SoapNonPositiveInteger::GetXsdType() {
        return SoapNonPositiveInteger::get_XsdType();
    }
    
    SoapNonPositiveInteger* SoapNonPositiveInteger::Parse(System::String* value) {
        return cli::gcnew<SoapNonPositiveInteger>(System::Decimal::Parse(value));
    }
    
    System::String* SoapNonPositiveInteger::ToString_1636a0751cb9ac11() {
        return this->_value->ToString_1636a0751cb9ac11();
    }
    
    System::Decimal SoapNonPositiveInteger::get_Value() {
        return this->_value;
    }
    
    System::Decimal SoapNonPositiveInteger::set_Value(System::Decimal value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNonPositiveInteger::get_XsdType() {
        return _T("nonPositiveInteger");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNormalizedString::constructor() {
    }
    
    void SoapNormalizedString::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapNormalizedString::GetXsdType() {
        return SoapNormalizedString::get_XsdType();
    }
    
    SoapNormalizedString* SoapNormalizedString::Parse(System::String* value) {
        return cli::gcnew<SoapNormalizedString>(value);
    }
    
    System::String* SoapNormalizedString::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapNormalizedString::get_Value() {
        return this->_value;
    }
    
    System::String* SoapNormalizedString::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNormalizedString::get_XsdType() {
        return _T("normalizedString");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapNotation::constructor() {
    }
    
    void SoapNotation::constructor(System::String* value) {
        this->_value = value;
    }
    
    System::String* SoapNotation::GetXsdType() {
        return SoapNotation::get_XsdType();
    }
    
    SoapNotation* SoapNotation::Parse(System::String* value) {
        return cli::gcnew<SoapNotation>(value);
    }
    
    System::String* SoapNotation::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapNotation::get_Value() {
        return this->_value;
    }
    
    System::String* SoapNotation::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapNotation::get_XsdType() {
        return _T("NOTATION");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapPositiveInteger::constructor() {
    }
    
    void SoapPositiveInteger::constructor(System::Decimal value) {
        if(System::Decimal::op_LessThanOrEqual(value, cli::decimal<int>("0"))) 
        {
            throw SoapHelper::GetException(this, cli::concat(_T("invalid "), cli::box(value)));
        }
        this->_value = value;
    }
    
    System::String* SoapPositiveInteger::GetXsdType() {
        return SoapPositiveInteger::get_XsdType();
    }
    
    SoapPositiveInteger* SoapPositiveInteger::Parse(System::String* value) {
        return cli::gcnew<SoapPositiveInteger>(System::Decimal::Parse(value));
    }
    
    System::String* SoapPositiveInteger::ToString_1636a0751cb9ac11() {
        return this->_value->ToString_1636a0751cb9ac11();
    }
    
    System::Decimal SoapPositiveInteger::get_Value() {
        return this->_value;
    }
    
    System::Decimal SoapPositiveInteger::set_Value(System::Decimal value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapPositiveInteger::get_XsdType() {
        return _T("positiveInteger");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapQName::constructor() {
    }
    
    void SoapQName::constructor(System::String* value) {
        this->_name = value;
    }
    
    void SoapQName::constructor(System::String* key, System::String* name) {
        this->_key = key;
        this->_name = name;
    }
    
    void SoapQName::constructor(System::String* key, System::String* name, System::String* namespaceValue) {
        this->_key = key;
        this->_name = name;
        this->_namespace = namespaceValue;
    }
    
    System::String* SoapQName::GetXsdType() {
        return SoapQName::get_XsdType();
    }
    
    SoapQName* SoapQName::Parse(System::String* value) {
        SoapQName *res = cli::gcnew<SoapQName>();
        int32_t i = value->IndexOf4(u':');
        if((i != -1)) 
        {
            res->set_Key(value->Substring2(0, i));
            res->set_Name(value->Substring((i + 1)));
        }
         else 
        {
            res->set_Name(value);
        }
        return res;
    }
    
    System::String* SoapQName::ToString_1636a0751cb9ac11() {
        if(((this->_key ==  nullptr) || System::String::op_Equality(this->_key, _T("")))) 
        {
            return this->_name;
        }
         else 
        {
            return cli::concat(this->_key, _T(":"));
        }
    }
    
    System::String* SoapQName::get_Key() {
        return this->_key;
    }
    
    System::String* SoapQName::set_Key(System::String* value) {
        this->_key = value;
        return get_Key();
    }
    
    System::String* SoapQName::get_Name() {
        return this->_name;
    }
    
    System::String* SoapQName::set_Name(System::String* value) {
        this->_name = value;
        return get_Name();
    }
    
    System::String* SoapQName::get_Namespace() {
        return this->_namespace;
    }
    
    System::String* SoapQName::set_Namespace(System::String* value) {
        this->_namespace = value;
        return get_Namespace();
    }
    
    System::String* SoapQName::get_XsdType() {
        return _T("QName");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapTime::_datetimeFormats;
    
    SoapTime::SoapTime()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapTime::constructor() {
    }
    
    void SoapTime::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapTime::static_constructor() {
    }
    
    System::String* SoapTime::GetXsdType() {
        return SoapTime::get_XsdType();
    }
    
    SoapTime* SoapTime::Parse(System::String* value) {
        return cli::gcnew<SoapTime>(System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None));
    }
    
    System::String* SoapTime::ToString_1636a0751cb9ac11() {
        return this->_value->ToString5(_T("HH:mm:ss.fffffffzzz"), System::Globalization::CultureInfo::get_InvariantCulture());
    }
    
    System::DateTime SoapTime::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapTime::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapTime::get_XsdType() {
        return _T("time");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    
    void SoapToken::constructor() {
    }
    
    void SoapToken::constructor(System::String* value) {
        this->_value = SoapHelper::Normalize(value);
    }
    
    System::String* SoapToken::GetXsdType() {
        return SoapToken::get_XsdType();
    }
    
    SoapToken* SoapToken::Parse(System::String* value) {
        return cli::gcnew<SoapToken>(value);
    }
    
    System::String* SoapToken::ToString_1636a0751cb9ac11() {
        return this->_value;
    }
    
    System::String* SoapToken::get_Value() {
        return this->_value;
    }
    
    System::String* SoapToken::set_Value(System::String* value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapToken::get_XsdType() {
        return _T("token");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapYear::_datetimeFormats;
    
    SoapYear::SoapYear()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapYear::constructor() {
    }
    
    void SoapYear::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapYear::constructor(System::DateTime value, int32_t sign) {
        this->_value = value;
        this->_sign = sign;
    }
    
    void SoapYear::static_constructor() {
    }
    
    System::String* SoapYear::GetXsdType() {
        return SoapYear::get_XsdType();
    }
    
    SoapYear* SoapYear::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        SoapYear *res = cli::gcnew<SoapYear>(d);
        if(value->StartsWith(_T("-"))) 
        {
            res->set_Sign(-1);
        }
         else 
        {
            res->set_Sign(0);
        }
        return res;
    }
    
    System::String* SoapYear::ToString_1636a0751cb9ac11() {
        if((this->_sign >= 0)) 
        {
            return this->_value->ToString5(_T("yyyy"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
         else 
        {
            return this->_value->ToString5(_T("\'-\'yyyy"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
    }
    
    int32_t SoapYear::get_Sign() {
        return this->_sign;
    }
    
    int32_t SoapYear::set_Sign(int32_t value) {
        this->_sign = value;
        return get_Sign();
    }
    
    System::DateTime SoapYear::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapYear::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapYear::get_XsdType() {
        return _T("gYear");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Metadata { namespace W3cXsd2001 {
    
    cli::array<System::String*>*  SoapYearMonth::_datetimeFormats;
    
    SoapYearMonth::SoapYearMonth()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SoapYearMonth::constructor() {
    }
    
    void SoapYearMonth::constructor(System::DateTime value) {
        this->_value = value;
    }
    
    void SoapYearMonth::constructor(System::DateTime value, int32_t sign) {
        this->_value = value;
        this->_sign = sign;
    }
    
    void SoapYearMonth::static_constructor() {
    }
    
    System::String* SoapYearMonth::GetXsdType() {
        return SoapYearMonth::get_XsdType();
    }
    
    SoapYearMonth* SoapYearMonth::Parse(System::String* value) {
        System::DateTime d = System::DateTime::ParseExact3(value, _datetimeFormats, nullptr, System::Globalization::DateTimeStyles::None);
        SoapYearMonth *res = cli::gcnew<SoapYearMonth>(d);
        if(value->StartsWith(_T("-"))) 
        {
            res->set_Sign(-1);
        }
         else 
        {
            res->set_Sign(0);
        }
        return res;
    }
    
    System::String* SoapYearMonth::ToString_1636a0751cb9ac11() {
        if((this->_sign >= 0)) 
        {
            return this->_value->ToString5(_T("yyyy-MM"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
         else 
        {
            return this->_value->ToString5(_T("\'-\'yyyy-MM"), System::Globalization::CultureInfo::get_InvariantCulture());
        }
    }
    
    int32_t SoapYearMonth::get_Sign() {
        return this->_sign;
    }
    
    int32_t SoapYearMonth::set_Sign(int32_t value) {
        this->_sign = value;
        return get_Sign();
    }
    
    System::DateTime SoapYearMonth::get_Value() {
        return this->_value;
    }
    
    System::DateTime SoapYearMonth::set_Value(System::DateTime value) {
        this->_value = value;
        return get_Value();
    }
    
    System::String* SoapYearMonth::get_XsdType() {
        return _T("gYearMonth");
    }
    
}}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    
    void ProxyAttribute::constructor() {
    }
    
    System::MarshalByRefObject* ProxyAttribute::CreateInstance_6e6df9b8c871915d(System::Type* serverType) {
        RemotingProxy *proxy = cli::gcnew<RemotingProxy>(serverType, System::Runtime::Remoting::Channels::ChannelServices::CrossContextUrl, nullptr);
        return cli::cast<System::MarshalByRefObject*>(proxy->GetTransparentProxy_efb39f7079c89638());
    }
    
    RealProxy* ProxyAttribute::CreateProxy_c28b5b5fd853f316(System::Runtime::Remoting::ObjRef* objRef, System::Type* serverType, System::Object* serverObject, System::Runtime::Remoting::Contexts::Context2* serverContext) {
        return System::Runtime::Remoting::RemotingServices::GetRealProxy(System::Runtime::Remoting::RemotingServices::GetProxyForRemoteObject(objRef, serverType));
    }
    
    void ProxyAttribute::GetPropertiesForNewContext(System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) {
    }
    
    bool ProxyAttribute::IsContextOK(System::Runtime::Remoting::Contexts::Context2* ctx, System::Runtime::Remoting::Activation::IConstructionCallMessage* msg) {
        return true;
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    
    void TransparentProxy::constructor() {
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    
    void RealProxy::constructor() {
    }
    
    void RealProxy::constructor(System::Type* classToProxy) {
    }
    
    void RealProxy::constructor(System::Type* classToProxy, System::Runtime::Remoting::ClientIdentity* identity) {
        this->_objectIdentity = identity;
    }
    
    void RealProxy::constructor(System::Type* classToProxy, void* stub, System::Object* stubData) {
        if((!(classToProxy->get_IsMarshalByRef()) && !(classToProxy->get_IsInterface()))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("object must be MarshalByRef"));
        }
        this->class_to_proxy = classToProxy;
        if(::System::IntPtr::op_Inequality(stub, (*::System::IntPtr::Zero))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("stub is not used in Mono"));
        }
    }
    
    System::Type* RealProxy::InternalGetProxyType(System::Object* transparentProxy) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* RealProxy::GetProxiedType() {
        if((this->_objTP ==  nullptr)) 
        {
            if(this->class_to_proxy->get_IsInterface()) 
            {
                return cli::typeof<System::Type>::info;
            }
             else 
            {
                return this->class_to_proxy;
            }
        }
        return InternalGetProxyType(this->_objTP);
    }
    
    System::Runtime::Remoting::ObjRef* RealProxy::CreateObjRef_d53c2f494bc47a1c(System::Type* requestedType) {
        return System::Runtime::Remoting::RemotingServices::Marshal4(cli::cast<System::MarshalByRefObject*>(GetTransparentProxy_efb39f7079c89638()), nullptr, requestedType);
    }
    
    void RealProxy::GetObjectData_fa01d7e4569bf5cb(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::Object *obj = GetTransparentProxy_efb39f7079c89638();
        System::Runtime::Remoting::RemotingServices::GetObjectData(obj, info, context);
    }
    
    void* RealProxy::GetCOMIUnknown_c51d183b56c2a48f(bool fIsMarshalled) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RealProxy::SetCOMIUnknown_10499de4453533b3(void* i) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void* RealProxy::SupportsInterface_bd3f88d193ad01aa(System::Guid iid) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* RealProxy::GetStubData(RealProxy* rp) {
        return rp->_stubData;
    }
    
    void RealProxy::SetStubData(RealProxy* rp, System::Object* stubData) {
        rp->_stubData = stubData;
    }
    
    System::Object* RealProxy::PrivateInvoke(RealProxy* rp, System::Runtime::Remoting::Messaging::IMessage* msg, System::Exception* exc, cli::array<System::Object*>* out_args) {
        System::Runtime::Remoting::Messaging::MonoMethodMessage *mMsg = cli::cast<System::Runtime::Remoting::Messaging::MonoMethodMessage*>(msg);
        mMsg->set_LogicalCallContext(System::Runtime::Remoting::Messaging::CallContext::CreateLogicalCallContext(true));
        System::Runtime::Remoting::Messaging::CallType call_type = mMsg->get_CallType();
        bool is_remproxy = cli::is<RemotingProxy>(rp);
        out_args = nullptr;
        System::Runtime::Remoting::Messaging::IMethodReturnMessage *res_msg = nullptr;
        if(((int32_t)(call_type) ==  1)) 
        {
            mMsg->get_AsyncResult()->set_CallMessage(mMsg);
        }
        if(((int32_t)(call_type) ==  2)) 
        {
            res_msg = cli::cast<System::Runtime::Remoting::Messaging::IMethodReturnMessage*>(mMsg->get_AsyncResult()->EndInvoke());
        }
        if(mMsg->get_MethodBase()->get_IsConstructor()) 
        {
            if(is_remproxy) 
            {
                res_msg = cli::cast<System::Runtime::Remoting::Messaging::IMethodReturnMessage*>(cli::as<RemotingProxy*>(rp)->ActivateRemoteObject(cli::cast<System::Runtime::Remoting::Messaging::IMethodMessage*>(msg)));
            }
             else 
            {
                msg = cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionCall>(rp->GetProxiedType());
            }
        }
        if((res_msg ==  nullptr)) 
        {
            bool failed = false;
            try {
                res_msg = cli::cast<System::Runtime::Remoting::Messaging::IMethodReturnMessage*>(rp->Invoke_fb5532e107d73b9f(msg));
            }
            catch(System::Exception* ex) {
                failed = true;
                if(((int32_t)(call_type) ==  1)) 
                {
                    mMsg->get_AsyncResult()->SyncProcessMessage_3a1c0f460fa2243a(cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(ex, cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msg)));
                    res_msg = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(nullptr, nullptr, 0, nullptr, cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(msg));
                }
                 else 
                {
                    throw ;
                }
            }
            if(((!(is_remproxy) && ((int32_t)(call_type) ==  1)) && !(failed))) 
            {
                System::Runtime::Remoting::Messaging::IMessage *asyncMsg = nullptr;
                asyncMsg = mMsg->get_AsyncResult()->SyncProcessMessage_3a1c0f460fa2243a(cli::cast<System::Runtime::Remoting::Messaging::IMessage*>(res_msg));
                out_args = res_msg->get_OutArgs_4ed1102750ba8a44();
                res_msg = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(asyncMsg, nullptr, 0, nullptr, cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(res_msg));
            }
        }
        if(((res_msg->get_LogicalCallContext_a19aeadfaffa89b7() != nullptr) && res_msg->get_LogicalCallContext_a19aeadfaffa89b7()->get_HasInfo())) 
        {
            System::Runtime::Remoting::Messaging::CallContext::UpdateCurrentCallContext(res_msg->get_LogicalCallContext_a19aeadfaffa89b7());
        }
        exc = res_msg->get_Exception_f355b7f547514947();
        if((exc != nullptr)) 
        {
            out_args = nullptr;
            throw exc->FixRemotingException();
        }
         else 
        {
            if(cli::is<System::Runtime::Remoting::Activation::IConstructionReturnMessage>(res_msg)) 
            {
                if((out_args ==  nullptr)) 
                {
                    out_args = res_msg->get_OutArgs_4ed1102750ba8a44();
                }
            }
             else 
            {
                if(((int32_t)(mMsg->get_CallType()) ==  1)) 
                {
                }
                 else 
                {
                    if(((int32_t)(mMsg->get_CallType()) ==  0)) 
                    {
                        out_args = ProcessResponse(res_msg, mMsg);
                    }
                     else 
                    {
                        if(((int32_t)(mMsg->get_CallType()) ==  2)) 
                        {
                            out_args = ProcessResponse(res_msg, mMsg->get_AsyncResult()->get_CallMessage());
                        }
                         else 
                        {
                            if((out_args ==  nullptr)) 
                            {
                                out_args = res_msg->get_OutArgs_4ed1102750ba8a44();
                            }
                        }
                    }
                }
            }
        }
        return res_msg->get_ReturnValue_5e8804a33ce4fa71();
    }
    
    System::Object* RealProxy::InternalGetTransparentProxy_5c707b8d2fd2d74b(System::String* className) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Object* RealProxy::GetTransparentProxy_efb39f7079c89638() {
        if((this->_objTP ==  nullptr)) 
        {
            System::String *name;
            System::Runtime::Remoting::IRemotingTypeInfo *rti = cli::as<System::Runtime::Remoting::IRemotingTypeInfo*>(this);
            if((rti != nullptr)) 
            {
                name = rti->get_TypeName_e368785a4c79e626();
                if(((name ==  nullptr) || System::String::op_Equality(name, cli::typeof<System::Type>::info->get_AssemblyQualifiedName_cea373c2171bd483()))) 
                {
                    name = this->class_to_proxy->get_AssemblyQualifiedName_cea373c2171bd483();
                }
            }
             else 
            {
                name = this->class_to_proxy->get_AssemblyQualifiedName_cea373c2171bd483();
            }
            this->_objTP = InternalGetTransparentProxy_5c707b8d2fd2d74b(name);
        }
        return this->_objTP;
    }
    
    System::Runtime::Remoting::Activation::IConstructionReturnMessage* RealProxy::InitializeServerObject(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RealProxy::AttachServer(System::MarshalByRefObject* s) {
        this->_server = s;
    }
    
    System::MarshalByRefObject* RealProxy::DetachServer() {
        System::MarshalByRefObject *ob = this->_server;
        this->_server = nullptr;
        return ob;
    }
    
    System::MarshalByRefObject* RealProxy::GetUnwrappedServer() {
        return this->_server;
    }
    
    void RealProxy::SetTargetDomain(int32_t domainId) {
        this->_targetDomainId = domainId;
    }
    
    System::Object* RealProxy::GetAppDomainTarget() {
        if((this->_server ==  nullptr)) 
        {
            System::Runtime::Remoting::ClientActivatedIdentity *identity = cli::as<System::Runtime::Remoting::ClientActivatedIdentity*>(System::Runtime::Remoting::RemotingServices::GetIdentityForUri(this->_targetUri));
            if((identity ==  nullptr)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Server for uri \'"), this->_targetUri));
            }
            this->_server = identity->GetServerObject();
        }
        return this->_server;
    }
    
    cli::array<System::Object*>* RealProxy::ProcessResponse(System::Runtime::Remoting::Messaging::IMethodReturnMessage* mrm, System::Runtime::Remoting::Messaging::MonoMethodMessage* call) {
        System::Reflection::MethodInfo *mi = cli::cast<System::Reflection::MethodInfo*>(call->get_MethodBase());
        if(((mrm->get_ReturnValue_5e8804a33ce4fa71() != nullptr) && !(mi->get_ReturnType_832339e848f448fe()->IsInstanceOfType_bd709d8c55b4333d(mrm->get_ReturnValue_5e8804a33ce4fa71())))) 
        {
            throw cli::gcnew<System::InvalidCastException>(_T("Return value has an invalid type"));
        }
        int32_t no;
        if(call->NeedsOutProcessing(no)) 
        {
            cli::array<System::Reflection::ParameterInfo*> *parameters = mi->GetParameters_9d17bcb549474c9();
            cli::array<System::Object*> *outArgs = (new cli::array<System::Object*>(no));
            int32_t narg = 0;
            for(auto tmp_422 : parameters) {
                auto par = cli::cast<System::Reflection::ParameterInfo*>(tmp_422);
                {
                    if((par->get_IsOut() && !(par->get_ParameterType_97c5fa09a0b988d()->get_IsByRef()))) 
                    {
                        System::Object *outArg = (par->get_Position_1e6976b43412375f() < mrm->get_ArgCount_c4a9c359c4fe1d8e()) ? mrm->GetArg_b08c2cf8a17399d(par->get_Position_1e6976b43412375f()) : nullptr;
                        if((outArg != nullptr)) 
                        {
                            System::Object *local = call->GetArg(par->get_Position_1e6976b43412375f());
                            if((local ==  nullptr)) 
                            {
                                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(cli::concat(_T("Unexpected null value in local out parameter \'"), par->get_Name_1ad7a68577256740()));
                            }
                            System::Runtime::Remoting::RemotingServices::UpdateOutArgObject(par, local, outArg);
                        }
                    }
                     else 
                    {
                        if(par->get_ParameterType_97c5fa09a0b988d()->get_IsByRef()) 
                        {
                            System::Object *outArg = (par->get_Position_1e6976b43412375f() < mrm->get_ArgCount_c4a9c359c4fe1d8e()) ? mrm->GetArg_b08c2cf8a17399d(par->get_Position_1e6976b43412375f()) : nullptr;
                            if(((outArg != nullptr) && !(par->get_ParameterType_97c5fa09a0b988d()->GetElementType_ab5070dbbfe66f5f()->IsInstanceOfType_bd709d8c55b4333d(outArg)))) 
                            {
                                throw cli::gcnew<System::InvalidCastException>(cli::concat(_T("Return argument \'"), par->get_Name_1ad7a68577256740()));
                            }
                            outArgs->at(narg++) = outArg;
                        }
                    }
                }
            }
            return outArgs;
        }
         else 
        {
            return (new cli::array<System::Object*>(0));
        }
    }
    
    System::Runtime::Remoting::Identity* RealProxy::get_ObjectIdentity() {
        return this->_objectIdentity;
    }
    
    System::Runtime::Remoting::Identity* RealProxy::set_ObjectIdentity(System::Runtime::Remoting::Identity* value) {
        this->_objectIdentity = value;
        return get_ObjectIdentity();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Proxies {
    
    System::Reflection::MethodInfo*  RemotingProxy::_cache_GetTypeMethod;
    System::Reflection::MethodInfo*  RemotingProxy::_cache_GetHashCodeMethod;
    
    RemotingProxy::RemotingProxy()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void RemotingProxy::constructor(System::Type* type, System::Runtime::Remoting::ClientIdentity* identity) {
        this->_sink = identity->get_ChannelSink();
        this->_hasEnvoySink = false;
        this->_targetUri = identity->get_TargetUri();
    }
    
    void RemotingProxy::constructor(System::Type* type, System::String* activationUrl, cli::array<System::Object*>* activationAttributes) {
        this->_hasEnvoySink = false;
        this->_ctorCall = System::Runtime::Remoting::Activation::ActivationServices::CreateConstructionCall(type, activationUrl, activationAttributes);
    }
    
    void RemotingProxy::static_constructor() {
    }
    
    void RemotingProxy::Finalize_5961447c233155c3() {
        {
            cli::finally_guard([&]() {
                Finalize_b946fbc32e26afd6();
            });
            if((this->_objectIdentity != nullptr)) 
            {
                if(!(cli::is<System::Runtime::Remoting::ClientActivatedIdentity>(this->_objectIdentity))) 
                {
                    System::Runtime::Remoting::RemotingServices::DisposeIdentity(this->_objectIdentity);
                }
            }
        }
    }
    
    System::Runtime::Remoting::Messaging::IMessage* RemotingProxy::Invoke_fb5532e107d73b9f(System::Runtime::Remoting::Messaging::IMessage* request) {
        System::Runtime::Remoting::Messaging::IMethodCallMessage *mm = cli::as<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(request);
        if((mm != nullptr)) 
        {
            if(System::Reflection::MethodBase::op_Equality2(mm->get_MethodBase_be82dccd2d92b9f6(), _cache_GetHashCodeMethod)) 
            {
                return cli::gcnew<System::Runtime::Remoting::Messaging::MethodResponse>(cli::box(this->get_ObjectIdentity()->GetHashCode_6648aef0f235ee6c()), nullptr, nullptr, mm);
            }
            if(System::Reflection::MethodBase::op_Equality2(mm->get_MethodBase_be82dccd2d92b9f6(), _cache_GetTypeMethod)) 
            {
                return cli::gcnew<System::Runtime::Remoting::Messaging::MethodResponse>(RealProxy::GetProxiedType(), nullptr, nullptr, mm);
            }
        }
        System::Runtime::Remoting::Messaging::IInternalMessage *im = cli::as<System::Runtime::Remoting::Messaging::IInternalMessage*>(request);
        if((im != nullptr)) 
        {
            if((im->get_Uri_39a650ec2a69ead0() ==  nullptr)) 
            {
                im->set_Uri_96dc10f55685ba70(this->_targetUri);
            }
            im->set_TargetIdentity_8fbc4984471e7e77(this->_objectIdentity);
        }
        this->_objectIdentity->NotifyClientDynamicSinks(true, request, true, false);
        System::Runtime::Remoting::Messaging::IMessage *response;
        System::Runtime::Remoting::Messaging::IMessageSink *sink;
        if((System::Threading::Thread::get_CurrentContext()->get_HasExitSinks() && !(this->_hasEnvoySink))) 
        {
            sink = System::Threading::Thread::get_CurrentContext()->GetClientContextSinkChain();
        }
         else 
        {
            sink = this->_sink;
        }
        System::Runtime::Remoting::Messaging::MonoMethodMessage *mMsg = cli::as<System::Runtime::Remoting::Messaging::MonoMethodMessage*>(request);
        if(((mMsg ==  nullptr) || ((int32_t)(mMsg->get_CallType()) ==  0))) 
        {
            response = sink->SyncProcessMessage_d4949581639d4872(request);
        }
         else 
        {
            System::Runtime::Remoting::Messaging::AsyncResult *ares = mMsg->get_AsyncResult();
            System::Runtime::Remoting::Messaging::IMessageCtrl *mctrl = sink->AsyncProcessMessage_3d553dfedc95e36f(request, ares);
            if((ares != nullptr)) 
            {
                ares->SetMessageCtrl_499f519e6c83af7c(mctrl);
            }
            response = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(nullptr, (new cli::array<System::Object*>(0)), 0, nullptr, mMsg);
        }
        this->_objectIdentity->NotifyClientDynamicSinks(false, request, true, false);
        return response;
    }
    
    void RemotingProxy::AttachIdentity(System::Runtime::Remoting::Identity* identity) {
        this->_objectIdentity = identity;
        if(cli::is<System::Runtime::Remoting::ClientActivatedIdentity>(identity)) 
        {
            System::Runtime::Remoting::ClientActivatedIdentity *cai = cli::cast<System::Runtime::Remoting::ClientActivatedIdentity*>(identity);
            this->_targetContext = cai->get_Context();
            RealProxy::AttachServer(cai->GetServerObject());
            cai->SetClientProxy(cli::cast<System::MarshalByRefObject*>(RealProxy::GetTransparentProxy_efb39f7079c89638()));
        }
        if(cli::is<System::Runtime::Remoting::ClientIdentity>(identity)) 
        {
            cli::cast<System::Runtime::Remoting::ClientIdentity*>(identity)->set_ClientProxy(cli::cast<System::MarshalByRefObject*>(RealProxy::GetTransparentProxy_efb39f7079c89638()));
            this->_targetUri = cli::cast<System::Runtime::Remoting::ClientIdentity*>(identity)->get_TargetUri();
        }
         else 
        {
            this->_targetUri = identity->get_ObjectUri();
        }
        if((this->_objectIdentity->get_EnvoySink() != nullptr)) 
        {
            this->_sink = this->_objectIdentity->get_EnvoySink();
            this->_hasEnvoySink = true;
        }
         else 
        {
            this->_sink = this->_objectIdentity->get_ChannelSink();
        }
        this->_ctorCall = nullptr;
    }
    
    System::Runtime::Remoting::Messaging::IMessage* RemotingProxy::ActivateRemoteObject(System::Runtime::Remoting::Messaging::IMethodMessage* request) {
        if((this->_ctorCall ==  nullptr)) 
        {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionResponse>(this, nullptr, cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(request));
        }
        this->_ctorCall->CopyFrom(request);
        return System::Runtime::Remoting::Activation::ActivationServices::Activate(this, this->_ctorCall);
    }
    
    bool RemotingProxy::CanCastTo(System::Type* fromType, System::Object* o) {
        if(cli::is<System::Runtime::Remoting::ClientIdentity>(this->_objectIdentity)) 
        {
            System::Runtime::Remoting::ObjRef *oref = this->_objectIdentity->CreateObjRef_366556653a47f288(nullptr);
            if((oref->get_IsReferenceToWellKnow() && (fromType->get_IsInterface() || System::Type::op_Equality2(RealProxy::GetProxiedType(), cli::typeof<System::Type>::info)))) 
            {
                return true;
            }
            if((oref->get_TypeInfo_b4ea890a0c9f26cd() != nullptr)) 
            {
                return oref->get_TypeInfo_b4ea890a0c9f26cd()->CanCastTo_7f8304fa142c3271(fromType, o);
            }
        }
        return fromType->IsAssignableFrom_e3aa32d778e63a90(RealProxy::GetProxiedType());
    }
    
    System::String* RemotingProxy::get_TypeName() {
        if(cli::is<System::Runtime::Remoting::ClientIdentity>(this->_objectIdentity)) 
        {
            System::Runtime::Remoting::ObjRef *oref = this->_objectIdentity->CreateObjRef_366556653a47f288(nullptr);
            if((oref->get_TypeInfo_b4ea890a0c9f26cd() != nullptr)) 
            {
                return oref->get_TypeInfo_b4ea890a0c9f26cd()->get_TypeName_e368785a4c79e626();
            }
        }
        return RealProxy::GetProxiedType()->get_AssemblyQualifiedName_cea373c2171bd483();
    }
    
    System::String* RemotingProxy::set_TypeName(System::String* value) {
        throw cli::gcnew<System::NotSupportedException>();
        return get_TypeName();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Services {
    
    
    void EnterpriseServicesHelper::constructor() {
    }
    
    System::Runtime::Remoting::Activation::IConstructionReturnMessage* EnterpriseServicesHelper::CreateConstructionReturnMessage(System::Runtime::Remoting::Activation::IConstructionCallMessage* ctorMsg, System::MarshalByRefObject* retObj) {
        return cli::gcnew<System::Runtime::Remoting::Messaging::ConstructionResponse>(retObj, nullptr, ctorMsg);
    }
    
    void EnterpriseServicesHelper::SwitchWrappers(System::Runtime::Remoting::Proxies::RealProxy* oldcp, System::Runtime::Remoting::Proxies::RealProxy* newcp) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    System::Object* EnterpriseServicesHelper::WrapIUnknownWithComObject(void* punk) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}}}
namespace System { namespace Runtime { namespace Remoting { namespace Services {
    
    System::Collections::ArrayList*  TrackingServices::_handlers;
    
    TrackingServices::TrackingServices()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void TrackingServices::constructor() {
    }
    
    void TrackingServices::static_constructor() {
    }
    
    void TrackingServices::RegisterTrackingHandler(ITrackingHandler* handler) {
        if((handler ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("handler"));
        }
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            if((_handlers->IndexOf_7e9811d6771f771d(handler) != -1)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("handler already registered"));
            }
            _handlers->Add_e6a92085999ce388(handler);
        }
    }
    
    void TrackingServices::UnregisterTrackingHandler(ITrackingHandler* handler) {
        if((handler ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("handler"));
        }
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            int32_t idx = _handlers->IndexOf_7e9811d6771f771d(handler);
            if((idx ==  -1)) 
            {
                throw cli::gcnew<System::Runtime::Remoting::RemotingException>(_T("handler is not registered"));
            }
            _handlers->RemoveAt_2abea768d3273318(idx);
        }
    }
    
    void TrackingServices::NotifyMarshaledObject(System::Object* obj, System::Runtime::Remoting::ObjRef* or_) {
        cli::array<ITrackingHandler*> *handlers;
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            if((_handlers->get_Count_2354963792616712() ==  0)) 
            {
                return;
            }
            handlers = cli::cast<cli::array<ITrackingHandler*>*>(_handlers->ToArray_7b80f35a5dbfbc47(cli::typeof<System::Type>::info));
        }
        for(int32_t i = 0; (i < handlers->get_Length()); i++){
            handlers->at(i)->MarshaledObject_a0c032baefb993b(obj, or_);
        }
    }
    
    void TrackingServices::NotifyUnmarshaledObject(System::Object* obj, System::Runtime::Remoting::ObjRef* or_) {
        cli::array<ITrackingHandler*> *handlers;
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            if((_handlers->get_Count_2354963792616712() ==  0)) 
            {
                return;
            }
            handlers = cli::cast<cli::array<ITrackingHandler*>*>(_handlers->ToArray_7b80f35a5dbfbc47(cli::typeof<System::Type>::info));
        }
        for(int32_t i = 0; (i < handlers->get_Length()); i++){
            handlers->at(i)->UnmarshaledObject_7ac49a37dedb3923(obj, or_);
        }
    }
    
    void TrackingServices::NotifyDisconnectedObject(System::Object* obj) {
        cli::array<ITrackingHandler*> *handlers;
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            if((_handlers->get_Count_2354963792616712() ==  0)) 
            {
                return;
            }
            handlers = cli::cast<cli::array<ITrackingHandler*>*>(_handlers->ToArray_7b80f35a5dbfbc47(cli::typeof<System::Type>::info));
        }
        for(int32_t i = 0; (i < handlers->get_Length()); i++){
            handlers->at(i)->DisconnectedObject_9c34d68e930f35b(obj);
        }
    }
    
    cli::array<ITrackingHandler*>* TrackingServices::get_RegisteredHandlers() {
        {
            cli::lock_guard{_handlers->get_SyncRoot_edb1ba826807b569()};
            if((_handlers->get_Count_2354963792616712() ==  0)) 
            {
                return (new cli::array<ITrackingHandler*>(0));
            }
            return cli::cast<cli::array<ITrackingHandler*>*>(_handlers->ToArray_7b80f35a5dbfbc47(cli::typeof<System::Type>::info));
        }
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void Formatter::constructor() {
    }
    
    System::Object* Formatter::GetNext_81d698aac4ae997b(int64_t objID) {
        if((this->m_objectQueue->get_Count_d68471db5ed73aae() ==  0)) 
        {
            objID = 0L;
            return nullptr;
        }
        System::Object *o = this->m_objectQueue->Dequeue_65b33648b3aa820f();
        bool FirstTime;
        objID = this->m_idGenerator->HasId_ceb8f0299f3fc05e(o, FirstTime);
        return o;
    }
    
    int64_t Formatter::Schedule_be01b9fe5d92c7b7(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            return 0L;
        }
        bool FirstTime;
        int64_t ID = this->m_idGenerator->GetId_7b41c26f34516460(obj, FirstTime);
        if(FirstTime) 
        {
            this->m_objectQueue->Enqueue_7ab7b5c658b77bbe(obj);
        }
        return ID;
    }
    
    void Formatter::WriteMember_2d75970901d619ca(System::String* memberName, System::Object* data) {
        if((data ==  nullptr)) 
        {
            WriteObjectRef_5ae5a548d9d521fb(data, memberName, cli::typeof<System::Type>::info);
        }
        System::Type *dataType = data->GetType();
        if(dataType->get_IsArray()) 
        {
            WriteArray_1bfa17798f77fd9c(data, memberName, dataType);
        }
         else 
        {
            if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
            {
                WriteBoolean_8b6c70663f893129(cli::unbox<bool>(data), memberName);
            }
             else 
            {
                if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                {
                    WriteByte_4b9a22d4a686f571(cli::unbox<unsigned char>(data), memberName);
                }
                 else 
                {
                    if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                    {
                        WriteChar_bba6a768980832f7(cli::unbox<char16_t>(data), memberName);
                    }
                     else 
                    {
                        if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                        {
                            WriteDateTime_17de72084426fac(cli::unbox<System::DateTime>(data), memberName);
                        }
                         else 
                        {
                            if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                            {
                                WriteDecimal_b94a57f1f1c07224(cli::unbox<System::Decimal>(data), memberName);
                            }
                             else 
                            {
                                if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                {
                                    WriteDouble_ed0b92fefaf74a4b(cli::unbox<double>(data), memberName);
                                }
                                 else 
                                {
                                    if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                    {
                                        WriteInt16_bbda1b582ff1f1a2(cli::unbox<int16_t>(data), memberName);
                                    }
                                     else 
                                    {
                                        if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                        {
                                            WriteInt32_b0922922d320af13(cli::unbox<int32_t>(data), memberName);
                                        }
                                         else 
                                        {
                                            if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                            {
                                                WriteInt64_17dff47c9cceb888(cli::unbox<int64_t>(data), memberName);
                                            }
                                             else 
                                            {
                                                if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                {
                                                    WriteSByte_f744ada73c34c179(cli::unbox<signed char>(data), memberName);
                                                }
                                                 else 
                                                {
                                                    if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                    {
                                                        WriteSingle_649ece78a46827d4(cli::unbox<float>(data), memberName);
                                                    }
                                                     else 
                                                    {
                                                        if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                        {
                                                            WriteTimeSpan_88afeb0ca2568f78(cli::unbox<System::TimeSpan>(data), memberName);
                                                        }
                                                         else 
                                                        {
                                                            if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                            {
                                                                WriteUInt16_c9e18a3ce4fd4110(cli::unbox<uint16_t>(data), memberName);
                                                            }
                                                             else 
                                                            {
                                                                if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                                {
                                                                    WriteUInt32_e7945c0ff469d4cb(cli::unbox<uint32_t>(data), memberName);
                                                                }
                                                                 else 
                                                                {
                                                                    if(System::Type::op_Equality2(dataType, cli::typeof<System::Type>::info)) 
                                                                    {
                                                                        WriteUInt64_790b7f7e0cea0b37(cli::unbox<uint64_t>(data), memberName);
                                                                    }
                                                                     else 
                                                                    {
                                                                        if(dataType->get_IsValueType()) 
                                                                        {
                                                                            WriteValueType_f5265cc8ce35ac3e(data, memberName, dataType);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        WriteObjectRef_5ae5a548d9d521fb(data, memberName, dataType);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void FormatterConverter::constructor() {
    }
    
    System::Object* FormatterConverter::Convert2(System::Object* value, System::Type* type) {
        return System::Convert::ChangeType(value, type);
    }
    
    System::Object* FormatterConverter::Convert3(System::Object* value, System::TypeCode typeCode) {
        return System::Convert::ChangeType2(value, typeCode);
    }
    
    bool FormatterConverter::ToBoolean(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToBoolean17(value);
    }
    
    unsigned char FormatterConverter::ToByte(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToByte18(value);
    }
    
    char16_t FormatterConverter::ToChar(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToChar17(value);
    }
    
    System::DateTime FormatterConverter::ToDateTime(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToDateTime13(value);
    }
    
    System::Decimal FormatterConverter::ToDecimal(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToDecimal17(value);
    }
    
    double FormatterConverter::ToDouble(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToDouble17(value);
    }
    
    int16_t FormatterConverter::ToInt16(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToInt1618(value);
    }
    
    int32_t FormatterConverter::ToInt32(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToInt3218(value);
    }
    
    int64_t FormatterConverter::ToInt64(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToInt6418(value);
    }
    
    float FormatterConverter::ToSingle(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToSingle17(value);
    }
    
    System::String* FormatterConverter::ToString2(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToString23(value);
    }
    
    signed char FormatterConverter::ToSByte(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToSByte18(value);
    }
    
    uint16_t FormatterConverter::ToUInt16(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToUInt1618(value);
    }
    
    uint32_t FormatterConverter::ToUInt32(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToUInt3218(value);
    }
    
    uint64_t FormatterConverter::ToUInt64(System::Object* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value is null."));
        }
        return System::Convert::ToUInt6418(value);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void FormatterServices::constructor() {
    }
    
    cli::array<System::Object*>* FormatterServices::GetObjectData(System::Object* obj, cli::array<System::Reflection::MemberInfo*>* members) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        if((members ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("members"));
        }
        int32_t n = members->get_Length();
        cli::array<System::Object*> *result = (new cli::array<System::Object*>(n));
        for(int32_t i = 0; (i < n); i++){
            System::Reflection::MemberInfo *member = members->at(i);
            if(System::Reflection::MemberInfo::op_Equality(member, nullptr)) 
            {
                throw cli::gcnew<System::ArgumentNullException>(System::String::Format2(_T("members[{0}]"), cli::box(i)));
            }
            if(((int32_t)(member->get_MemberType_cd521d320810c98f()) != 4)) 
            {
                throw cli::gcnew<SerializationException>(System::String::Format2(_T("members [{0}] is not a field."), cli::box(i)));
            }
            System::Reflection::FieldInfo *fi = cli::as<System::Reflection::FieldInfo*>(member);
            result->at(i) = fi->GetValue_57ad13b528e8b8a5(obj);
        }
        return result;
    }
    
    cli::array<System::Reflection::MemberInfo*>* FormatterServices::GetSerializableMembers(System::Type* type) {
        StreamingContext st = cli::ctor<StreamingContext>(StreamingContextStates::All);
        return GetSerializableMembers2(type, st);
    }
    
    cli::array<System::Reflection::MemberInfo*>* FormatterServices::GetSerializableMembers2(System::Type* type, StreamingContext context) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        System::Collections::ArrayList *fields = cli::gcnew<System::Collections::ArrayList>();
        System::Type *t = type;
        while(System::Type::op_Inequality2(t, nullptr)) {
            if(!(t->get_IsSerializable_54e7f398ebfc9468())) 
            {
                System::String *msg = System::String::Format3(_T("Type {0} in assembly {1} is not marked as serializable."), t, t->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07());
                throw cli::gcnew<SerializationException>(msg);
            }
            GetFields(type, t, fields);
            t = t->get_BaseType_6a0646ae880055f6();
        }
        cli::array<System::Reflection::MemberInfo*> *result = (new cli::array<System::Reflection::MemberInfo*>(fields->get_Count_2354963792616712()));
        fields->CopyTo_c634d425a65b1fc3(result);
        return result;
    }
    
    void FormatterServices::GetFields(System::Type* reflectedType, System::Type* type, System::Collections::ArrayList* fields) {
        cli::array<System::Reflection::FieldInfo*> *fs = type->GetFields_369be5ac49d99f8((System::Reflection::BindingFlags)54L);
        for(auto tmp_423 : fs) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_423);
            if(!(field->get_IsNotSerialized())) 
            {
                System::Reflection::MonoField *mf = cli::as<System::Reflection::MonoField*>(field);
                if(((System::Reflection::FieldInfo::op_Inequality2(mf, nullptr) && System::Type::op_Inequality2(reflectedType, type)) && !(mf->get_IsPublic()))) 
                {
                    System::String *fname = cli::concat(type->get_Name_50fad5fa936c3ae2(), _T("+"));
                    fields->Add_e6a92085999ce388(mf->Clone(fname));
                }
                 else 
                {
                    fields->Add_e6a92085999ce388(field);
                }
            }
        }
    }
    
    System::Type* FormatterServices::GetTypeFromAssembly(System::Reflection::Assembly* assem, System::String* name) {
        if(System::Reflection::Assembly::op_Equality(assem, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("assem"));
        }
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        return assem->GetType_99cbfcc4e094eb08(name);
    }
    
    System::Object* FormatterServices::GetUninitializedObject(System::Type* type) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Uninitialized Strings cannot be created."));
        }
        return System::Runtime::Remoting::Activation::ActivationServices::AllocateUninitializedClassInstance(type);
    }
    
    System::Object* FormatterServices::PopulateObjectMembers(System::Object* obj, cli::array<System::Reflection::MemberInfo*>* members, cli::array<System::Object*>* data) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        if((members ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("members"));
        }
        if((data ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("data"));
        }
        int32_t length = members->get_Length();
        if((length != data->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("different length in members and data"));
        }
        for(int32_t i = 0; (i < length); i++){
            System::Reflection::MemberInfo *member = members->at(i);
            if(System::Reflection::MemberInfo::op_Equality(member, nullptr)) 
            {
                throw cli::gcnew<System::ArgumentNullException>(System::String::Format2(_T("members[{0}]"), cli::box(i)));
            }
            if(((int32_t)(member->get_MemberType_cd521d320810c98f()) != 4)) 
            {
                throw cli::gcnew<SerializationException>(System::String::Format2(_T("members [{0}] is not a field."), cli::box(i)));
            }
            System::Reflection::FieldInfo *fi = cli::as<System::Reflection::FieldInfo*>(member);
            fi->SetValue2(obj, data->at(i));
        }
        return obj;
    }
    
    void FormatterServices::CheckTypeSecurity(System::Type* t, Formatters::TypeFilterLevel securityLevel) {
        if(((int32_t)(securityLevel) ==  3)) 
        {
            return;
        }
        CheckNotAssignable(cli::typeof<System::Type>::info, t);
        CheckNotAssignable(cli::typeof<System::Type>::info, t);
        CheckNotAssignable(cli::typeof<System::Type>::info, t);
        CheckNotAssignable(cli::typeof<System::Type>::info, t);
    }
    
    void FormatterServices::CheckNotAssignable(System::Type* basetype, System::Type* type) {
        if(basetype->IsAssignableFrom_e3aa32d778e63a90(type)) 
        {
            System::String *msg = cli::concat(_T("Type "), basetype);
            (msg = cli::concat(msg, _T(" (such as "), type, _T(") are not permitted to be deserialized at this security level")));
            throw cli::gcnew<System::Security::SecurityException>(msg);
        }
    }
    
    System::Object* FormatterServices::GetSafeUninitializedObject(System::Type* type) {
        return GetUninitializedObject(type);
    }
    
    ISerializationSurrogate* FormatterServices::GetSurrogateForCyclicalReference(ISerializationSurrogate* innerSurrogate) {
        return innerSurrogate;
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void InstanceComparer::constructor() {
    }
    
    int32_t InstanceComparer::Compare(System::Object* o1, System::Object* o2) {
        if(cli::is<System::String>(o1)) 
        {
            return o1->Equals_ed975d2f4a7d193e(o2) ? 0 : 1;
        }
         else 
        {
            return (o1 ==  o2) ? 0 : 1;
        }
    }
    
    int32_t InstanceComparer::GetHashCode2(System::Object* o) {
        return System::Object::InternalGetHashCode(o);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    InstanceComparer*  ObjectIDGenerator::comparer;
    
    ObjectIDGenerator::ObjectIDGenerator()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ObjectIDGenerator::constructor() {
        this->table = cli::gcnew<System::Collections::Hashtable>(comparer, comparer);
        this->current = 1L;
    }
    
    void ObjectIDGenerator::static_constructor() {
    }
    
    int64_t ObjectIDGenerator::GetId_7b41c26f34516460(System::Object* obj, bool firstTime) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        System::Object *val = this->table->get_Item_d75c6e706b965758(obj);
        if((val != nullptr)) 
        {
            firstTime = false;
            return cli::unbox<int64_t>(val);
        }
         else 
        {
            firstTime = true;
            this->table->Add_3f7ab157bcb41156(obj, cli::box(this->current));
            return this->current++;
        }
    }
    
    int64_t ObjectIDGenerator::HasId_ceb8f0299f3fc05e(System::Object* obj, bool firstTime) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        System::Object *val = this->table->get_Item_d75c6e706b965758(obj);
        if((val != nullptr)) 
        {
            firstTime = false;
            return cli::unbox<int64_t>(val);
        }
         else 
        {
            firstTime = true;
            return 0L;
        }
    }
    
    int64_t ObjectIDGenerator::get_NextId() {
        return this->current++;
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void ObjectManager::constructor(ISurrogateSelector* selector, StreamingContext context) {
        this->_selector = selector;
        this->_context = context;
    }
    
    void ObjectManager::DoFixups_43f8ccf522b38380() {
        this->_finalFixup = true;
        {
            cli::finally_guard([&]() {
                this->_finalFixup = false;
            });
            if((this->_registeredObjectsCount < this->_objectRecords->get_Count_40aff81471a60b4c())) 
            {
                throw cli::gcnew<SerializationException>(_T("There are some fixups that refer to objects that have not been registered"));
            }
            ObjectRecord *last = this->_lastObjectRecord;
            bool firstCicle = true;
            ObjectRecord *record = this->_objectRecordChain;
            while((record != nullptr)) {
                bool ready = !((record->get_IsUnsolvedObjectReference() && firstCicle));
                if(ready) 
                {
                    ready = record->DoFixups(true, this, true);
                }
                if(ready) 
                {
                    ready = record->LoadData(this, this->_selector, this->_context);
                }
                ObjectRecord *next;
                if(ready) 
                {
                    if(cli::is<IDeserializationCallback>(record->OriginalObject)) 
                    {
                        this->_deserializedRecords->Add_e6a92085999ce388(record);
                    }
                    SerializationCallbacks *sc = SerializationCallbacks::GetSerializationCallbacks(record->OriginalObject->GetType());
                    if(sc->get_HasDeserializedCallbacks()) 
                    {
                        this->_onDeserializedCallbackRecords->Add_e6a92085999ce388(record);
                    }
                    next = record->Next;
                }
                 else 
                {
                    if((cli::is<IObjectReference>(record->ObjectInstance) && !(firstCicle))) 
                    {
                        if(((int32_t)(record->Status) ==  2)) 
                        {
                            throw cli::gcnew<SerializationException>(cli::concat(_T("The object with ID "), cli::box(record->ObjectID)));
                        }
                         else 
                        {
                            record->Status = ObjectRecordStatus::ReferenceSolvingDelayed;
                        }
                    }
                    if((record != this->_lastObjectRecord)) 
                    {
                        next = record->Next;
                        record->Next = nullptr;
                        this->_lastObjectRecord->Next = record;
                        this->_lastObjectRecord = record;
                    }
                     else 
                    {
                        next = record;
                    }
                }
                if((record ==  last)) 
                {
                    firstCicle = false;
                }
                record = next;
            }
        }
    }
    
    ObjectRecord* ObjectManager::GetObjectRecord(int64_t objectID) {
        ObjectRecord *rec = cli::cast<ObjectRecord*>(this->_objectRecords->get_Item_d75c6e706b965758(cli::box(objectID)));
        if((rec ==  nullptr)) 
        {
            if(this->_finalFixup) 
            {
                throw cli::gcnew<SerializationException>(cli::concat(_T("The object with Id "), cli::box(objectID)));
            }
            rec = cli::gcnew<ObjectRecord>();
            rec->ObjectID = objectID;
            this->_objectRecords->set_Item_84c7e24d9caa09(cli::box(objectID), rec);
        }
        if((!(rec->get_IsRegistered()) && this->_finalFixup)) 
        {
            throw cli::gcnew<SerializationException>(cli::concat(_T("The object with Id "), cli::box(objectID)));
        }
        return rec;
    }
    
    System::Object* ObjectManager::GetObject_105bbaf6c08155a0(int64_t objectID) {
        if((objectID <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectID"), _T("The objectID parameter is less than or equal to zero"));
        }
        ObjectRecord *rec = cli::cast<ObjectRecord*>(this->_objectRecords->get_Item_d75c6e706b965758(cli::box(objectID)));
        if(((rec ==  nullptr) || !(rec->get_IsRegistered()))) 
        {
            return nullptr;
        }
         else 
        {
            return rec->ObjectInstance;
        }
    }
    
    void ObjectManager::RaiseDeserializationEvent_961dfed24077401c() {
        for(int32_t i = (this->_onDeserializedCallbackRecords->get_Count_2354963792616712() - 1); (i >= 0); i--){
            ObjectRecord *record = cli::cast<ObjectRecord*>(this->_onDeserializedCallbackRecords->get_Item_fd0155f142ae570(i));
            RaiseOnDeserializedEvent(record->OriginalObject);
        }
        for(int32_t i = (this->_deserializedRecords->get_Count_2354963792616712() - 1); (i >= 0); i--){
            ObjectRecord *record = cli::cast<ObjectRecord*>(this->_deserializedRecords->get_Item_fd0155f142ae570(i));
            IDeserializationCallback *obj = cli::as<IDeserializationCallback*>(record->OriginalObject);
            if((obj != nullptr)) 
            {
                obj->OnDeserialization_e9ecfecba8df9754(this);
            }
        }
    }
    
    void ObjectManager::RaiseOnDeserializingEvent(System::Object* obj) {
        SerializationCallbacks *sc = SerializationCallbacks::GetSerializationCallbacks(obj->GetType());
        sc->RaiseOnDeserializing(obj, this->_context);
    }
    
    void ObjectManager::RaiseOnDeserializedEvent(System::Object* obj) {
        SerializationCallbacks *sc = SerializationCallbacks::GetSerializationCallbacks(obj->GetType());
        sc->RaiseOnDeserialized(obj, this->_context);
    }
    
    void ObjectManager::AddFixup(BaseFixupRecord* record) {
        record->ObjectToBeFixed->ChainFixup(record, true);
        record->ObjectRequired->ChainFixup(record, false);
    }
    
    void ObjectManager::RecordArrayElementFixup_154a9d9baa6f6255(int64_t arrayToBeFixed, int32_t index, int64_t objectRequired) {
        if((arrayToBeFixed <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("arrayToBeFixed"), _T("The arrayToBeFixed parameter is less than or equal to zero"));
        }
        if((objectRequired <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectRequired"), _T("The objectRequired parameter is less than or equal to zero"));
        }
        ArrayFixupRecord *record = cli::gcnew<ArrayFixupRecord>(GetObjectRecord(arrayToBeFixed), index, GetObjectRecord(objectRequired));
        AddFixup(record);
    }
    
    void ObjectManager::RecordArrayElementFixup_a03659609dc4b607(int64_t arrayToBeFixed, cli::array<int32_t>* indices, int64_t objectRequired) {
        if((arrayToBeFixed <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("arrayToBeFixed"), _T("The arrayToBeFixed parameter is less than or equal to zero"));
        }
        if((objectRequired <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectRequired"), _T("The objectRequired parameter is less than or equal to zero"));
        }
        if((indices ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("indices"));
        }
        MultiArrayFixupRecord *record = cli::gcnew<MultiArrayFixupRecord>(GetObjectRecord(arrayToBeFixed), indices, GetObjectRecord(objectRequired));
        AddFixup(record);
    }
    
    void ObjectManager::RecordDelayedFixup_ad8512da90dd9d43(int64_t objectToBeFixed, System::String* memberName, int64_t objectRequired) {
        if((objectToBeFixed <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectToBeFixed"), _T("The objectToBeFixed parameter is less than or equal to zero"));
        }
        if((objectRequired <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectRequired"), _T("The objectRequired parameter is less than or equal to zero"));
        }
        if((memberName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("memberName"));
        }
        DelayedFixupRecord *record = cli::gcnew<DelayedFixupRecord>(GetObjectRecord(objectToBeFixed), memberName, GetObjectRecord(objectRequired));
        AddFixup(record);
    }
    
    void ObjectManager::RecordFixup_59534355c6ae7b0a(int64_t objectToBeFixed, System::Reflection::MemberInfo* member, int64_t objectRequired) {
        if((objectToBeFixed <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectToBeFixed"), _T("The objectToBeFixed parameter is less than or equal to zero"));
        }
        if((objectRequired <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectRequired"), _T("The objectRequired parameter is less than or equal to zero"));
        }
        if(System::Reflection::MemberInfo::op_Equality(member, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("member"));
        }
        FixupRecord *record = cli::gcnew<FixupRecord>(GetObjectRecord(objectToBeFixed), member, GetObjectRecord(objectRequired));
        AddFixup(record);
    }
    
    void ObjectManager::RegisterObjectInternal(System::Object* obj, ObjectRecord* record) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"));
        }
        if(record->get_IsRegistered()) 
        {
            if((record->OriginalObject != obj)) 
            {
                throw cli::gcnew<SerializationException>(cli::concat(_T("An object with Id "), cli::box(record->ObjectID)));
            }
             else 
            {
                return;
            }
        }
        record->ObjectInstance = obj;
        record->OriginalObject = obj;
        if(cli::is<IObjectReference>(obj)) 
        {
            record->Status = ObjectRecordStatus::ReferenceUnsolved;
        }
         else 
        {
            record->Status = ObjectRecordStatus::ReferenceSolved;
        }
        if((this->_selector != nullptr)) 
        {
            record->Surrogate = this->_selector->GetSurrogate_9d3ffd4061f81ca8(obj->GetType(), this->_context, record->SurrogateSelector2);
            if((record->Surrogate != nullptr)) 
            {
                record->Status = ObjectRecordStatus::ReferenceUnsolved;
            }
        }
        record->DoFixups(true, this, false);
        record->DoFixups(false, this, false);
        this->_registeredObjectsCount++;
        if((this->_objectRecordChain ==  nullptr)) 
        {
            this->_objectRecordChain = record;
            this->_lastObjectRecord = record;
        }
         else 
        {
            this->_lastObjectRecord->Next = record;
            this->_lastObjectRecord = record;
        }
    }
    
    void ObjectManager::RegisterObject_2f369e6518224836(System::Object* obj, int64_t objectID) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"), _T("The obj parameter is null."));
        }
        if((objectID <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectID"), _T("The objectID parameter is less than or equal to zero"));
        }
        RegisterObjectInternal(obj, GetObjectRecord(objectID));
    }
    
    void ObjectManager::RegisterObject2(System::Object* obj, int64_t objectID, SerializationInfo* info) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"), _T("The obj parameter is null."));
        }
        if((objectID <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectID"), _T("The objectID parameter is less than or equal to zero"));
        }
        ObjectRecord *record = GetObjectRecord(objectID);
        record->Info = info;
        RegisterObjectInternal(obj, record);
    }
    
    void ObjectManager::RegisterObject3(System::Object* obj, int64_t objectID, SerializationInfo* info, int64_t idOfContainingObj, System::Reflection::MemberInfo* member) {
        RegisterObject4(obj, objectID, info, idOfContainingObj, member, nullptr);
    }
    
    void ObjectManager::RegisterObject4(System::Object* obj, int64_t objectID, SerializationInfo* info, int64_t idOfContainingObj, System::Reflection::MemberInfo* member, cli::array<int32_t>* arrayIndex) {
        if((obj ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("obj"), _T("The obj parameter is null."));
        }
        if((objectID <= 0L)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("objectID"), _T("The objectID parameter is less than or equal to zero"));
        }
        ObjectRecord *record = GetObjectRecord(objectID);
        record->Info = info;
        record->IdOfContainingObj = idOfContainingObj;
        record->Member = member;
        record->ArrayIndex = arrayIndex;
        RegisterObjectInternal(obj, record);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void BaseFixupRecord::constructor(ObjectRecord* objectToBeFixed, ObjectRecord* objectRequired) {
        this->ObjectToBeFixed = objectToBeFixed;
        this->ObjectRequired = objectRequired;
    }
    
    bool BaseFixupRecord::DoFixup(ObjectManager* manager, bool strict) {
        if((this->ObjectToBeFixed->get_IsRegistered() && this->ObjectRequired->get_IsInstanceReady())) 
        {
            FixupImpl_cb5f2bdf98a52cbb(manager);
            return true;
        }
         else 
        {
            if(strict) 
            {
                if(!(this->ObjectToBeFixed->get_IsRegistered())) 
                {
                    throw cli::gcnew<SerializationException>(cli::concat(_T("An object with ID "), cli::box(this->ObjectToBeFixed->ObjectID)));
                }
                 else 
                {
                    if(!(this->ObjectRequired->get_IsRegistered())) 
                    {
                        throw cli::gcnew<SerializationException>(cli::concat(_T("An object with ID "), cli::box(this->ObjectRequired->ObjectID)));
                    }
                     else 
                    {
                        return false;
                    }
                }
            }
             else 
            {
                return false;
            }
        }
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void ArrayFixupRecord::constructor(ObjectRecord* objectToBeFixed, int32_t index, ObjectRecord* objectRequired) {
        this->_index = index;
    }
    
    void ArrayFixupRecord::FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) {
        System::Array *array = cli::cast<System::Array*>(this->ObjectToBeFixed->ObjectInstance);
        array->SetValue5(this->ObjectRequired->ObjectInstance, this->_index);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void MultiArrayFixupRecord::constructor(ObjectRecord* objectToBeFixed, cli::array<int32_t>* indices, ObjectRecord* objectRequired) {
        this->_indices = indices;
    }
    
    void MultiArrayFixupRecord::FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) {
        this->ObjectToBeFixed->SetArrayValue(manager, this->ObjectRequired->ObjectInstance, this->_indices);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void FixupRecord::constructor(ObjectRecord* objectToBeFixed, System::Reflection::MemberInfo* member, ObjectRecord* objectRequired) {
        this->_member = member;
    }
    
    void FixupRecord::FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) {
        this->ObjectToBeFixed->SetMemberValue(manager, this->_member, this->ObjectRequired->ObjectInstance);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void DelayedFixupRecord::constructor(ObjectRecord* objectToBeFixed, System::String* memberName, ObjectRecord* objectRequired) {
        this->_memberName = memberName;
    }
    
    void DelayedFixupRecord::FixupImpl_cb5f2bdf98a52cbb(ObjectManager* manager) {
        this->ObjectToBeFixed->SetMemberValue2(manager, this->_memberName, this->ObjectRequired->ObjectInstance);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void ObjectRecord::constructor() {
    }
    
    void ObjectRecord::SetMemberValue(ObjectManager* manager, System::Reflection::MemberInfo* member, System::Object* value) {
        if(cli::is<System::Reflection::FieldInfo>(member)) 
        {
            cli::cast<System::Reflection::FieldInfo*>(member)->SetValue2(this->ObjectInstance, value);
        }
         else 
        {
            if(cli::is<System::Reflection::PropertyInfo>(member)) 
            {
                cli::cast<System::Reflection::PropertyInfo*>(member)->SetValue_1695ad6de909516e(this->ObjectInstance, value, nullptr);
            }
             else 
            {
                throw cli::gcnew<SerializationException>(_T("Cannot perform fixup"));
            }
        }
        if(System::Reflection::MemberInfo::op_Inequality(this->Member, nullptr)) 
        {
            ObjectRecord *containerRecord = manager->GetObjectRecord(this->IdOfContainingObj);
            if(containerRecord->get_IsRegistered()) 
            {
                containerRecord->SetMemberValue(manager, this->Member, this->ObjectInstance);
            }
        }
         else 
        {
            if((this->ArrayIndex != nullptr)) 
            {
                ObjectRecord *containerRecord = manager->GetObjectRecord(this->IdOfContainingObj);
                if(containerRecord->get_IsRegistered()) 
                {
                    containerRecord->SetArrayValue(manager, this->ObjectInstance, this->ArrayIndex);
                }
            }
        }
    }
    
    void ObjectRecord::SetArrayValue(ObjectManager* manager, System::Object* value, cli::array<int32_t>* indices) {
        cli::cast<System::Array*>(this->ObjectInstance)->SetValue(value, indices);
    }
    
    void ObjectRecord::SetMemberValue2(ObjectManager* manager, System::String* memberName, System::Object* value) {
        if((this->Info ==  nullptr)) 
        {
            throw cli::gcnew<SerializationException>(_T("Cannot perform fixup"));
        }
        this->Info->AddValue(memberName, value, value->GetType());
    }
    
    bool ObjectRecord::DoFixups(bool asContainer, ObjectManager* manager, bool strict) {
        BaseFixupRecord *prevFixup = nullptr;
        BaseFixupRecord *fixup = asContainer ? this->FixupChainAsContainer : this->FixupChainAsRequired;
        bool allFixed = true;
        while((fixup != nullptr)) {
            if(fixup->DoFixup(manager, strict)) 
            {
                UnchainFixup(fixup, prevFixup, asContainer);
                if(asContainer) 
                {
                    fixup->ObjectRequired->RemoveFixup(fixup, false);
                }
                 else 
                {
                    fixup->ObjectToBeFixed->RemoveFixup(fixup, true);
                }
            }
             else 
            {
                prevFixup = fixup;
                allFixed = false;
            }
            fixup = asContainer ? fixup->NextSameContainer : fixup->NextSameRequired;
        }
        return allFixed;
    }
    
    void ObjectRecord::RemoveFixup(BaseFixupRecord* fixupToRemove, bool asContainer) {
        BaseFixupRecord *prevFixup = nullptr;
        BaseFixupRecord *fixup = asContainer ? this->FixupChainAsContainer : this->FixupChainAsRequired;
        while((fixup != nullptr)) {
            if((fixup ==  fixupToRemove)) 
            {
                UnchainFixup(fixup, prevFixup, asContainer);
                return;
            }
            prevFixup = fixup;
            fixup = asContainer ? fixup->NextSameContainer : fixup->NextSameRequired;
        }
    }
    
    void ObjectRecord::UnchainFixup(BaseFixupRecord* fixup, BaseFixupRecord* prevFixup, bool asContainer) {
        if((prevFixup ==  nullptr)) 
        {
            if(asContainer) 
            {
                this->FixupChainAsContainer = fixup->NextSameContainer;
            }
             else 
            {
                this->FixupChainAsRequired = fixup->NextSameRequired;
            }
        }
         else 
        {
            if(asContainer) 
            {
                prevFixup->NextSameContainer = fixup->NextSameContainer;
            }
             else 
            {
                prevFixup->NextSameRequired = fixup->NextSameRequired;
            }
        }
    }
    
    void ObjectRecord::ChainFixup(BaseFixupRecord* fixup, bool asContainer) {
        if(asContainer) 
        {
            fixup->NextSameContainer = this->FixupChainAsContainer;
            this->FixupChainAsContainer = fixup;
        }
         else 
        {
            fixup->NextSameRequired = this->FixupChainAsRequired;
            this->FixupChainAsRequired = fixup;
        }
    }
    
    bool ObjectRecord::LoadData(ObjectManager* manager, ISurrogateSelector* selector, StreamingContext context) {
        if((this->Info != nullptr)) 
        {
            if((this->Surrogate != nullptr)) 
            {
                System::Object *new_obj = this->Surrogate->SetObjectData_3af7d8e77dbcc1d2(this->ObjectInstance, this->Info, context, this->SurrogateSelector2);
                if((new_obj != nullptr)) 
                {
                    this->ObjectInstance = new_obj;
                }
                this->Status = ObjectRecordStatus::ReferenceSolved;
            }
             else 
            {
                if(cli::is<ISerializable>(this->ObjectInstance)) 
                {
                    cli::array<System::Object*> *pars = (new cli::array<System::Object*>({Info, context}));
                    System::Reflection::ConstructorInfo *con = this->ObjectInstance->GetType()->GetConstructor3((System::Reflection::BindingFlags)52L, nullptr, (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info})), nullptr);
                    if(System::Reflection::ConstructorInfo::op_Equality(con, nullptr)) 
                    {
                        throw cli::gcnew<SerializationException>(cli::concat(_T("The constructor to deserialize an object of type "), this->ObjectInstance->GetType()->get_FullName_7e8fa72ba225e1a4()));
                    }
                    con->Invoke2(this->ObjectInstance, pars);
                }
                 else 
                {
                    throw cli::gcnew<SerializationException>(cli::concat(_T("No surrogate selector was found for type "), this->ObjectInstance->GetType()->get_FullName_7e8fa72ba225e1a4()));
                }
            }
            this->Info = nullptr;
        }
        if((cli::is<IObjectReference>(this->ObjectInstance) && ((int32_t)(this->Status) != 3))) 
        {
            try {
                this->ObjectInstance = cli::cast<IObjectReference*>(this->ObjectInstance)->GetRealObject_692566897a6926e4(context);
                int32_t n = 100;
                while((cli::is<IObjectReference>(this->ObjectInstance) && (n > 0))) {
                    System::Object *ob = cli::cast<IObjectReference*>(this->ObjectInstance)->GetRealObject_692566897a6926e4(context);
                    if((ob ==  this->ObjectInstance)) 
                    {
                        break;
                    }
                    this->ObjectInstance = ob;
                    n--;
                }
                if((n ==  0)) 
                {
                    throw cli::gcnew<SerializationException>(_T("The implementation of the IObjectReference interface returns too many nested references to other objects that implement IObjectReference."));
                }
                this->Status = ObjectRecordStatus::ReferenceSolved;
            }
            catch(System::NullReferenceException*) {
                return false;
            }
        }
        if(System::Reflection::MemberInfo::op_Inequality(this->Member, nullptr)) 
        {
            ObjectRecord *containerRecord = manager->GetObjectRecord(this->IdOfContainingObj);
            containerRecord->SetMemberValue(manager, this->Member, this->ObjectInstance);
        }
         else 
        {
            if((this->ArrayIndex != nullptr)) 
            {
                ObjectRecord *containerRecord = manager->GetObjectRecord(this->IdOfContainingObj);
                containerRecord->SetArrayValue(manager, this->ObjectInstance, this->ArrayIndex);
            }
        }
        return true;
    }
    
    bool ObjectRecord::get_IsInstanceReady() {
        if(!(this->get_IsRegistered())) 
        {
            return false;
        }
        if(this->get_IsUnsolvedObjectReference()) 
        {
            return false;
        }
        if((this->ObjectInstance->GetType()->get_IsValueType() && (this->get_HasPendingFixups() || (this->Info != nullptr)))) 
        {
            return false;
        }
        return true;
    }
    
    bool ObjectRecord::get_IsUnsolvedObjectReference() {
        return ((int32_t)(this->Status) != 3);
    }
    
    bool ObjectRecord::get_IsRegistered() {
        return ((int32_t)(this->Status) != 0);
    }
    
    bool ObjectRecord::get_HasPendingFixups() {
        return (this->FixupChainAsContainer != nullptr);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void OnDeserializedAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void OnDeserializingAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void OnSerializedAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void OnSerializingAttribute::constructor() {
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void OptionalFieldAttribute::constructor() {
    }
    
    int32_t OptionalFieldAttribute::get_VersionAdded() {
        return this->version_added;
    }
    
    int32_t OptionalFieldAttribute::set_VersionAdded(int32_t value) {
        this->version_added = value;
        return get_VersionAdded();
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SafeSerializationEventArgs::constructor() {
    }
    
    void SafeSerializationEventArgs::AddSerializedState(ISafeSerializationData* serializedState) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    StreamingContext SafeSerializationEventArgs::get_StreamingContext() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SerializationBinder::constructor() {
    }
    
    void SerializationBinder::BindToName_4f5e7ffbf04d37a1(System::Type* serializedType, System::String* assemblyName, System::String* typeName) {
        assemblyName = nullptr;
        typeName = nullptr;
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    System::Collections::Hashtable*  SerializationCallbacks::cache;
    System::Object*  SerializationCallbacks::cache_lock;
    
    SerializationCallbacks::SerializationCallbacks()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SerializationCallbacks::constructor(System::Type* type) {
        this->onSerializingList = GetMethodsByAttribute(type, cli::typeof<System::Type>::info);
        this->onSerializedList = GetMethodsByAttribute(type, cli::typeof<System::Type>::info);
        this->onDeserializingList = GetMethodsByAttribute(type, cli::typeof<System::Type>::info);
        this->onDeserializedList = GetMethodsByAttribute(type, cli::typeof<System::Type>::info);
    }
    
    void SerializationCallbacks::static_constructor() {
    }
    
    System::Collections::ArrayList* SerializationCallbacks::GetMethodsByAttribute(System::Type* type, System::Type* attr) {
        System::Collections::ArrayList *list = cli::gcnew<System::Collections::ArrayList>();
        System::Type *t = type;
        while(System::Type::op_Inequality2(t, cli::typeof<System::Type>::info)) {
            int32_t count = 0;
            for(auto tmp_424 : t->GetMethods_c5b4e5d4877e6672((System::Reflection::BindingFlags)54L)) {
                auto mi = cli::cast<System::Reflection::MethodInfo*>(tmp_424);
                {
                    if(mi->IsDefined_91943a8ac363f11f(attr, false)) 
                    {
                        list->Add_e6a92085999ce388(mi);
                        count++;
                    }
                }
            }
            if((count > 1)) 
            {
                throw cli::gcnew<System::TypeLoadException>(System::String::Format3(_T("Type \'{0}\' has more than one method with the following attribute: \'{1}\'."), type->get_AssemblyQualifiedName_cea373c2171bd483(), attr->get_FullName_7e8fa72ba225e1a4()));
            }
            t = t->get_BaseType_6a0646ae880055f6();
        }
        return (list->get_Count_2354963792616712() ==  0) ? nullptr : list;
    }
    
    void SerializationCallbacks::Invoke(System::Collections::ArrayList* list, System::Object* target, StreamingContext context) {
        if((list ==  nullptr)) 
        {
            return;
        }
        CallbackHandler *handler = nullptr;
        for(auto tmp_425 : list) {
            auto mi = cli::cast<System::Reflection::MethodInfo*>(tmp_425);
            {
                handler = cli::cast<CallbackHandler*>(System::Delegate::Combine(System::Delegate::CreateDelegate3(cli::typeof<System::Type>::info, target, mi), handler));
            }
        }
        handler->Invoke(context);
    }
    
    void SerializationCallbacks::RaiseOnSerializing(System::Object* target, StreamingContext contex) {
        Invoke(this->onSerializingList, target, contex);
    }
    
    void SerializationCallbacks::RaiseOnSerialized(System::Object* target, StreamingContext contex) {
        Invoke(this->onSerializedList, target, contex);
    }
    
    void SerializationCallbacks::RaiseOnDeserializing(System::Object* target, StreamingContext contex) {
        Invoke(this->onDeserializingList, target, contex);
    }
    
    void SerializationCallbacks::RaiseOnDeserialized(System::Object* target, StreamingContext contex) {
        Invoke(this->onDeserializedList, target, contex);
    }
    
    SerializationCallbacks* SerializationCallbacks::GetSerializationCallbacks(System::Type* t) {
        SerializationCallbacks *sc = cli::cast<SerializationCallbacks*>(cache->get_Item_d75c6e706b965758(t));
        if((sc != nullptr)) 
        {
            return sc;
        }
        {
            cli::lock_guard{cache_lock};
            sc = cli::cast<SerializationCallbacks*>(cache->get_Item_d75c6e706b965758(t));
            if((sc ==  nullptr)) 
            {
                System::Collections::Hashtable *copy = cli::cast<System::Collections::Hashtable*>(cache->Clone_7f5df2dba23978b());
                sc = cli::gcnew<SerializationCallbacks>(t);
                copy->set_Item_84c7e24d9caa09(t, sc);
                cache = copy;
            }
            return sc;
        }
    }
    
    bool SerializationCallbacks::get_HasSerializingCallbacks() {
        return (this->onSerializingList != nullptr);
    }
    
    bool SerializationCallbacks::get_HasSerializedCallbacks() {
        return (this->onSerializedList != nullptr);
    }
    
    bool SerializationCallbacks::get_HasDeserializingCallbacks() {
        return (this->onDeserializingList != nullptr);
    }
    
    bool SerializationCallbacks::get_HasDeserializedCallbacks() {
        return (this->onDeserializedList != nullptr);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SerializationException::constructor() {
    }
    
    void SerializationException::constructor(System::String* message) {
    }
    
    void SerializationException::constructor(System::String* message, System::Exception* innerException) {
    }
    
    void SerializationException::constructor(SerializationInfo* info, StreamingContext context) {
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SerializationInfo::constructor(System::Type* type) {
        this->assemblyName = type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
        this->fullTypeName = type->get_FullName_7e8fa72ba225e1a4();
        this->converter = cli::gcnew<FormatterConverter>();
        this->objectType = type;
    }
    
    void SerializationInfo::constructor(System::Type* type, cli::array<SerializationEntry>* data) {
        int32_t len = data->get_Length();
        this->assemblyName = type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
        this->fullTypeName = type->get_FullName_7e8fa72ba225e1a4();
        this->converter = cli::gcnew<FormatterConverter>();
        this->objectType = type;
        for(int32_t i = 0; (i < len); i++){
            this->serialized->Add_3f7ab157bcb41156(data->at(i)->get_Name(), cli::box(data->at(i)));
            this->values->Add_e6a92085999ce388(cli::box(data->at(i)));
        }
    }
    
    void SerializationInfo::constructor(System::Type* type, IFormatterConverter* converter) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"), _T("Null argument"));
        }
        if((converter ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("converter"), _T("Null argument"));
        }
        this->converter = converter;
        this->assemblyName = type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
        this->fullTypeName = type->get_FullName_7e8fa72ba225e1a4();
        this->objectType = type;
    }
    
    void SerializationInfo::AddValue(System::String* name, System::Object* value, System::Type* type) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name is null"));
        }
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type is null"));
        }
        if(this->serialized->ContainsKey_5de2e202a0290d76(name)) 
        {
            throw cli::gcnew<SerializationException>(_T("Value has been serialized already."));
        }
        SerializationEntry entry = cli::ctor<SerializationEntry>(name, type, value);
        this->serialized->Add_3f7ab157bcb41156(name, cli::box(entry));
        this->values->Add_e6a92085999ce388(cli::box(entry));
    }
    
    System::Object* SerializationInfo::GetValue(System::String* name, System::Type* type) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name is null."));
        }
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type"));
        }
        if(!(this->serialized->ContainsKey_5de2e202a0290d76(name))) 
        {
            throw cli::gcnew<SerializationException>(cli::concat(_T("No element named "), name));
        }
        SerializationEntry entry = cli::unbox<SerializationEntry>(this->serialized->get_Item_d75c6e706b965758(name));
        if(((entry->get_Value() != nullptr) && !(type->IsInstanceOfType_bd709d8c55b4333d(entry->get_Value())))) 
        {
            return this->converter->Convert_f36db21f5899e115(entry->get_Value(), type);
        }
         else 
        {
            return entry->get_Value();
        }
    }
    
    bool SerializationInfo::HasKey(System::String* name) {
        return (this->serialized->get_Item_d75c6e706b965758(name) != nullptr);
    }
    
    void SerializationInfo::SetType(System::Type* type) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type is null."));
        }
        this->fullTypeName = type->get_FullName_7e8fa72ba225e1a4();
        this->assemblyName = type->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
        this->objectType = type;
        this->isAssemblyNameSetExplicit = false;
        this->isFullTypeNameSetExplicit = false;
    }
    
    SerializationInfoEnumerator* SerializationInfo::GetEnumerator() {
        return cli::gcnew<SerializationInfoEnumerator>(this->values);
    }
    
    void SerializationInfo::AddValue2(System::String* name, int16_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue3(System::String* name, uint16_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue4(System::String* name, int32_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue5(System::String* name, unsigned char value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue6(System::String* name, bool value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue7(System::String* name, char16_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue8(System::String* name, signed char value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue9(System::String* name, double value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue10(System::String* name, System::Decimal value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue11(System::String* name, System::DateTime value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue12(System::String* name, float value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue13(System::String* name, uint32_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue14(System::String* name, int64_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue15(System::String* name, uint64_t value) {
        AddValue(name, cli::box(value), cli::typeof<System::Type>::info);
    }
    
    void SerializationInfo::AddValue16(System::String* name, System::Object* value) {
        if((value ==  nullptr)) 
        {
            AddValue(name, value, cli::typeof<System::Type>::info);
        }
         else 
        {
            AddValue(name, value, value->GetType());
        }
    }
    
    bool SerializationInfo::GetBoolean(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToBoolean_f78384850964024e(value);
    }
    
    unsigned char SerializationInfo::GetByte(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToByte_b08e1092296aced(value);
    }
    
    char16_t SerializationInfo::GetChar(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToChar_a90c87eb392f5c6b(value);
    }
    
    System::DateTime SerializationInfo::GetDateTime(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToDateTime_db18bc4d36988ffe(value);
    }
    
    System::Decimal SerializationInfo::GetDecimal(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToDecimal_91c52c2b2c34226d(value);
    }
    
    double SerializationInfo::GetDouble(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToDouble_c26b3a04c5b5c6c3(value);
    }
    
    int16_t SerializationInfo::GetInt16(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToInt16_4c5e98cc2a24107a(value);
    }
    
    int32_t SerializationInfo::GetInt32(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToInt32_70f32a0ca9af7aec(value);
    }
    
    int64_t SerializationInfo::GetInt64(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToInt64_f60f3bd2c6d66487(value);
    }
    
    signed char SerializationInfo::GetSByte(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToSByte_f5271c6436d3339a(value);
    }
    
    float SerializationInfo::GetSingle(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToSingle_85c5ebe23a43ef7b(value);
    }
    
    System::String* SerializationInfo::GetString(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        if((value ==  nullptr)) 
        {
            return nullptr;
        }
        return this->converter->ToString_60d64e3cd2e84237(value);
    }
    
    uint16_t SerializationInfo::GetUInt16(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToUInt16_66a4df810f9b2648(value);
    }
    
    uint32_t SerializationInfo::GetUInt32(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToUInt32_c19d156d0b0e4179(value);
    }
    
    uint64_t SerializationInfo::GetUInt64(System::String* name) {
        System::Object *value = GetValue(name, cli::typeof<System::Type>::info);
        return this->converter->ToUInt64_30dc7f167b1e482a(value);
    }
    
    cli::array<SerializationEntry>* SerializationInfo::get_entries() {
        cli::array<SerializationEntry> *res = (new cli::array<SerializationEntry>(this->get_MemberCount()));
        int32_t i = 0;
        for(auto tmp_426 : this->GetEnumerator()) {
            auto e = cli::cast<SerializationEntry>(tmp_426);
            res->at(i++) = e;
        }
        return res;
    }
    
    System::String* SerializationInfo::get_AssemblyName() {
        return this->assemblyName;
    }
    
    System::String* SerializationInfo::set_AssemblyName(System::String* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("Argument is null."));
        }
        this->assemblyName = value;
        this->isAssemblyNameSetExplicit = true;
        return get_AssemblyName();
    }
    
    System::String* SerializationInfo::get_FullTypeName() {
        return this->fullTypeName;
    }
    
    System::String* SerializationInfo::set_FullTypeName(System::String* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("Argument is null."));
        }
        this->fullTypeName = value;
        this->isFullTypeNameSetExplicit = true;
        return get_FullTypeName();
    }
    
    int32_t SerializationInfo::get_MemberCount() {
        return this->serialized->get_Count_40aff81471a60b4c();
    }
    
    bool SerializationInfo::get_IsAssemblyNameSetExplicit() {
        return this->isAssemblyNameSetExplicit;
    }
    
    bool SerializationInfo::get_IsFullTypeNameSetExplicit() {
        return this->isFullTypeNameSetExplicit;
    }
    
    System::Type* SerializationInfo::get_ObjectType() {
        return this->objectType;
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SerializationInfoEnumerator::constructor(System::Collections::ArrayList* list) {
        this->enumerator = list->GetEnumerator_84e3ba8f2fdefd62();
    }
    
    bool SerializationInfoEnumerator::MoveNext() {
        return this->enumerator->MoveNext_4e78e145935f5417();
    }
    
    void SerializationInfoEnumerator::Reset() {
        this->enumerator->Reset_bcd82381eed41868();
    }
    
    SerializationEntry SerializationInfoEnumerator::get_Current() {
        return cli::unbox<SerializationEntry>(this->enumerator->get_Current_8eca9b3da02b123a());
    }
    
    System::Object* SerializationInfoEnumerator::get_Current2() {
        return this->enumerator->get_Current_8eca9b3da02b123a();
    }
    
    System::String* SerializationInfoEnumerator::get_Name() {
        return this->get_Current()->get_Name();
    }
    
    System::Type* SerializationInfoEnumerator::get_ObjectType() {
        return this->get_Current()->get_ObjectType();
    }
    
    System::Object* SerializationInfoEnumerator::get_Value() {
        return this->get_Current()->get_Value();
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    System::Object*  HashHelper::NonNullObject;
    HashHelper*  HashHelper::Instance;
    
    HashHelper::HashHelper()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void HashHelper::constructor() {
    }
    
    void HashHelper::static_constructor() {
    }
    
    int32_t HashHelper::GetHashCode2(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            return 0;
        }
        return System::Object::InternalGetHashCode(obj);
    }
    
    int32_t HashHelper::Compare(System::Object* x, System::Object* y) {
        return System::Object::ReferenceEquals(x, y) ? 0 : 1;
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SerializationObjectManager::constructor(StreamingContext context) {
        this->context = context;
    }
    
    void SerializationObjectManager::RegisterObject(System::Object* obj) {
        auto storey_427 = cli::gcnew<_RegisterObject_c__AnonStorey1A>();
        storey_427->obj = obj;
        if(this->seen->Contains_be7d0f2741618cb4(storey_427->obj)) 
        {
            return;
        }
        storey_427->sc = SerializationCallbacks::GetSerializationCallbacks(storey_427->obj->GetType());
        this->seen->set_Item_84c7e24d9caa09(storey_427->obj, HashHelper::NonNullObject);
        storey_427->sc->RaiseOnSerializing(storey_427->obj, this->context);
        if(storey_427->sc->get_HasSerializedCallbacks()) 
        {
            this->add_callbacks(cli::bind(storey_427, &_RegisterObject_c__AnonStorey1A::__m__13));
        }
    }
    
    void SerializationObjectManager::RaiseOnSerializedEvent() {
        if((this->callbacks != nullptr)) 
        {
            this->callbacks->Invoke(this->context);
        }
    }
    
    void SerializationObjectManager::add_callbacks(CallbackHandler* value) {
      // TODO: "Implement automatic events!"
    }
    
    void SerializationObjectManager::remove_callbacks(CallbackHandler* value) {
      // TODO: "Implement automatic events!"
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization {
    
    
    void SurrogateSelector::constructor() {
    }
    
    void SurrogateSelector::AddSurrogate_8a63f7a607a16bfd(System::Type* type, StreamingContext context, ISerializationSurrogate* surrogate) {
        if((System::Type::op_Equality2(type, nullptr) || (surrogate ==  nullptr))) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("Null reference."));
        }
        System::String *currentKey = cli::concat(type->get_FullName_7e8fa72ba225e1a4(), _T("#"));
        if(this->Surrogates->ContainsKey_5de2e202a0290d76(currentKey)) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(_T("A surrogate for "), type->get_FullName_7e8fa72ba225e1a4()));
        }
        this->Surrogates->Add_3f7ab157bcb41156(currentKey, surrogate);
    }
    
    void SurrogateSelector::ChainSelector_2005e7a460c04cd7(ISurrogateSelector* selector) {
        if((selector ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("Selector is null."));
        }
        if((this->nextSelector != nullptr)) 
        {
            selector->ChainSelector_b4bf6e9847cd4bb0(this->nextSelector);
        }
        this->nextSelector = selector;
    }
    
    ISurrogateSelector* SurrogateSelector::GetNextSelector_69e5cfddbf651b28() {
        return this->nextSelector;
    }
    
    ISerializationSurrogate* SurrogateSelector::GetSurrogate_7d9c3bc2abb037e8(System::Type* type, StreamingContext context, ISurrogateSelector* selector) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type is null."));
        }
        System::String *key = cli::concat(type->get_FullName_7e8fa72ba225e1a4(), _T("#"));
        ISerializationSurrogate *surrogate = cli::cast<ISerializationSurrogate*>(this->Surrogates->get_Item_d75c6e706b965758(key));
        if((surrogate != nullptr)) 
        {
            selector = this;
            return surrogate;
        }
        if((this->nextSelector != nullptr)) 
        {
            return this->nextSelector->GetSurrogate_9d3ffd4061f81ca8(type, context, selector);
        }
         else 
        {
            selector = nullptr;
            return nullptr;
        }
    }
    
    void SurrogateSelector::RemoveSurrogate_692282881d782b59(System::Type* type, StreamingContext context) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("type is null."));
        }
        System::String *key = cli::concat(type->get_FullName_7e8fa72ba225e1a4(), _T("#"));
        this->Surrogates->Remove_fd653674dd8a5ac4(key);
    }
    
}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    
    void InternalRM::constructor() {
    }
    
    void InternalRM::InfoSoap(cli::array<System::Object*>* messages) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool InternalRM::SoapCheckEnabled() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    
    void InternalST::constructor() {
    }
    
    void InternalST::InfoSoap(cli::array<System::Object*>* messages) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Reflection::Assembly* InternalST::LoadAssemblyFromString(System::String* assemblyString) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void InternalST::SerializationSetValue(System::Reflection::FieldInfo* fi, System::Object* target, System::Object* value) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void InternalST::Soap(cli::array<System::Object*>* messages) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void InternalST::SoapAssert(bool condition, System::String* message) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool InternalST::SoapCheckEnabled() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    
    void ServerFault::constructor(System::String* exceptionType, System::String* message, System::String* stackTrace) {
        this->exceptionType = exceptionType;
        this->message = message;
        this->stackTrace = stackTrace;
    }
    
    System::String* ServerFault::get_ExceptionType() {
        return this->exceptionType;
    }
    
    System::String* ServerFault::set_ExceptionType(System::String* value) {
        this->exceptionType = value;
        return get_ExceptionType();
    }
    
    System::String* ServerFault::get_ExceptionMessage() {
        return this->message;
    }
    
    System::String* ServerFault::set_ExceptionMessage(System::String* value) {
        this->message = value;
        return get_ExceptionMessage();
    }
    
    System::String* ServerFault::get_StackTrace() {
        return this->stackTrace;
    }
    
    System::String* ServerFault::set_StackTrace(System::String* value) {
        this->stackTrace = value;
        return get_StackTrace();
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    
    void SoapFault::constructor() {
    }
    
    void SoapFault::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        this->code = info->GetString(_T("faultcode"));
        this->faultString = info->GetString(_T("faultstring"));
        this->detail = info->GetValue(_T("detail"), cli::typeof<System::Type>::info);
    }
    
    void SoapFault::constructor(System::String* faultCode, System::String* faultString, System::String* faultActor, ServerFault* serverFault) {
        this->code = faultCode;
        this->actor = faultActor;
        this->faultString = faultString;
        this->detail = serverFault;
    }
    
    void SoapFault::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        info->AddValue(_T("faultcode"), this->code, cli::typeof<System::Type>::info);
        info->AddValue(_T("faultstring"), this->faultString, cli::typeof<System::Type>::info);
        info->AddValue(_T("detail"), this->detail, cli::typeof<System::Type>::info);
    }
    
    System::Object* SoapFault::get_Detail() {
        return this->detail;
    }
    
    System::Object* SoapFault::set_Detail(System::Object* value) {
        this->detail = value;
        return get_Detail();
    }
    
    System::String* SoapFault::get_FaultActor() {
        return this->actor;
    }
    
    System::String* SoapFault::set_FaultActor(System::String* value) {
        this->actor = value;
        return get_FaultActor();
    }
    
    System::String* SoapFault::get_FaultCode() {
        return this->code;
    }
    
    System::String* SoapFault::set_FaultCode(System::String* value) {
        this->code = value;
        return get_FaultCode();
    }
    
    System::String* SoapFault::get_FaultString() {
        return this->faultString;
    }
    
    System::String* SoapFault::set_FaultString(System::String* value) {
        this->faultString = value;
        return get_FaultString();
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters {
    
    
    void SoapMessage::constructor() {
    }
    
    cli::array<System::Runtime::Remoting::Messaging::Header*>* SoapMessage::get_Headers() {
        return this->headers;
    }
    
    cli::array<System::Runtime::Remoting::Messaging::Header*>* SoapMessage::set_Headers(cli::array<System::Runtime::Remoting::Messaging::Header*>* value) {
        this->headers = value;
        return get_Headers();
    }
    
    System::String* SoapMessage::get_MethodName() {
        return this->methodName;
    }
    
    System::String* SoapMessage::set_MethodName(System::String* value) {
        this->methodName = value;
        return get_MethodName();
    }
    
    cli::array<System::String*>* SoapMessage::get_ParamNames() {
        return this->paramNames;
    }
    
    cli::array<System::String*>* SoapMessage::set_ParamNames(cli::array<System::String*>* value) {
        this->paramNames = value;
        return get_ParamNames();
    }
    
    cli::array<System::Type*>* SoapMessage::get_ParamTypes() {
        return this->paramTypes;
    }
    
    cli::array<System::Type*>* SoapMessage::set_ParamTypes(cli::array<System::Type*>* value) {
        this->paramTypes = value;
        return get_ParamTypes();
    }
    
    cli::array<System::Object*>* SoapMessage::get_ParamValues() {
        return this->paramValues;
    }
    
    cli::array<System::Object*>* SoapMessage::set_ParamValues(cli::array<System::Object*>* value) {
        this->paramValues = value;
        return get_ParamValues();
    }
    
    System::String* SoapMessage::get_XmlNameSpace() {
        return this->xmlNameSpace;
    }
    
    System::String* SoapMessage::set_XmlNameSpace(System::String* value) {
        this->xmlNameSpace = value;
        return get_XmlNameSpace();
    }
    
}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    cli::array<unsigned char>*  BinaryCommon::BinaryHeader;
    cli::array<System::Type*>*  BinaryCommon::_typeCodesToType;
    cli::array<unsigned char>*  BinaryCommon::_typeCodeMap;
    bool  BinaryCommon::UseReflectionSerialization;
    
    BinaryCommon::BinaryCommon()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void BinaryCommon::static_constructor() {
        _typeCodesToType = (new cli::array<System::Type*>(19));
        _typeCodesToType->at(1) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(2) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(3) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(12) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(13) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(5) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(6) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(7) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(8) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(9) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(10) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(11) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(14) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(15) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(16) = cli::typeof<System::Type>::info;
        _typeCodesToType->at(17) = nullptr;
        _typeCodesToType->at(18) = cli::typeof<System::Type>::info;
        _typeCodeMap = (new cli::array<unsigned char>(30));
        _typeCodeMap->at(3) = 1;
        _typeCodeMap->at(6) = 2;
        _typeCodeMap->at(4) = 3;
        _typeCodeMap->at(16) = 13;
        _typeCodeMap->at(15) = 5;
        _typeCodeMap->at(14) = 6;
        _typeCodeMap->at(7) = 7;
        _typeCodeMap->at(9) = 8;
        _typeCodeMap->at(11) = 9;
        _typeCodeMap->at(5) = 10;
        _typeCodeMap->at(13) = 11;
        _typeCodeMap->at(8) = 14;
        _typeCodeMap->at(10) = 15;
        _typeCodeMap->at(12) = 16;
        _typeCodeMap->at(18) = 18;
        System::String *s = System::Environment::GetEnvironmentVariable(_T("MONO_REFLECTION_SERIALIZER"));
        if((s ==  nullptr)) 
        {
            s = _T("no");
        }
        UseReflectionSerialization = System::String::op_Inequality(s, _T("no"));
    }
    
    void BinaryCommon::constructor() {
    }
    
    bool BinaryCommon::IsPrimitive(System::Type* type) {
        return ((((type->get_IsPrimitive() && System::Type::op_Inequality2(type, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(type, cli::typeof<System::Type>::info));
    }
    
    unsigned char BinaryCommon::GetTypeCode(System::Type* type) {
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return 12;
        }
         else 
        {
            return _typeCodeMap->at((int32_t)(System::Type::GetTypeCode(type)));
        }
    }
    
    System::Type* BinaryCommon::GetTypeFromCode(int32_t code) {
        return _typeCodesToType->at(code);
    }
    
    void BinaryCommon::CheckSerializable(System::Type* type, System::Runtime::Serialization::ISurrogateSelector* selector, System::Runtime::Serialization::StreamingContext context) {
        if((!(type->get_IsSerializable_54e7f398ebfc9468()) && !(type->get_IsInterface()))) 
        {
            if(((selector != nullptr) && (selector->GetSurrogate_9d3ffd4061f81ca8(type, context, selector) != nullptr))) 
            {
                return;
            }
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(cli::concat(_T("Type "), type));
        }
    }
    
    void BinaryCommon::SwapBytes(cli::array<unsigned char>* byteArray, int32_t size, int32_t dataSize) {
        unsigned char b;
        if((dataSize ==  8)) 
        {
            for(int32_t n = 0; (n < size); (n = n + 8)){
                b = byteArray->at(n);
                byteArray->at(n) = byteArray->at((n + 7));
                byteArray->at((n + 7)) = b;
                b = byteArray->at((n + 1));
                byteArray->at((n + 1)) = byteArray->at((n + 6));
                byteArray->at((n + 6)) = b;
                b = byteArray->at((n + 2));
                byteArray->at((n + 2)) = byteArray->at((n + 5));
                byteArray->at((n + 5)) = b;
                b = byteArray->at((n + 3));
                byteArray->at((n + 3)) = byteArray->at((n + 4));
                byteArray->at((n + 4)) = b;
            }
        }
         else 
        {
            if((dataSize ==  4)) 
            {
                for(int32_t n = 0; (n < size); (n = n + 4)){
                    b = byteArray->at(n);
                    byteArray->at(n) = byteArray->at((n + 3));
                    byteArray->at((n + 3)) = b;
                    b = byteArray->at((n + 1));
                    byteArray->at((n + 1)) = byteArray->at((n + 2));
                    byteArray->at((n + 2)) = b;
                }
            }
             else 
            {
                if((dataSize ==  2)) 
                {
                    for(int32_t n = 0; (n < size); (n = n + 2)){
                        b = byteArray->at(n);
                        byteArray->at(n) = byteArray->at((n + 1));
                        byteArray->at((n + 1)) = b;
                    }
                }
            }
        }
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    System::Runtime::Serialization::ISurrogateSelector*  BinaryFormatter::_DefaultSurrogateSelector_k__BackingField;
    
    void BinaryFormatter::constructor() {
        this->surrogate_selector = get_DefaultSurrogateSelector();
        this->context = cli::ctor<System::Runtime::Serialization::StreamingContext>(System::Runtime::Serialization::StreamingContextStates::All);
    }
    
    void BinaryFormatter::constructor(System::Runtime::Serialization::ISurrogateSelector* selector, System::Runtime::Serialization::StreamingContext context) {
        this->surrogate_selector = selector;
        this->context = context;
    }
    
    System::Object* BinaryFormatter::Deserialize(System::IO::Stream* serializationStream) {
        return NoCheckDeserialize(serializationStream, nullptr);
    }
    
    System::Object* BinaryFormatter::Deserialize2(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler) {
        return NoCheckDeserialize(serializationStream, handler);
    }
    
    System::Object* BinaryFormatter::NoCheckDeserialize(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler) {
        if((serializationStream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("serializationStream"));
        }
        if((serializationStream->get_CanSeek_8c8861ce02c6bdeb() && (serializationStream->get_Length_ddb8b0d061db5350() ==  0L))) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("serializationStream supports seeking, but its length is 0"));
        }
        System::IO::BinaryReader *reader = cli::gcnew<System::IO::BinaryReader>(serializationStream);
        bool hasHeader;
        ReadBinaryHeader(reader, hasHeader);
        BinaryElement elem = (BinaryElement)((unsigned char)reader->Read_b648b07e7bda1c64());
        if(((int32_t)(elem) ==  21)) 
        {
            return MessageFormatter::ReadMethodCall2(elem, reader, hasHeader, handler, this);
        }
         else 
        {
            if(((int32_t)(elem) ==  22)) 
            {
                return MessageFormatter::ReadMethodResponse2(elem, reader, hasHeader, handler, nullptr, this);
            }
             else 
            {
                ObjectReader *serializer = cli::gcnew<ObjectReader>(this);
                System::Object *result;
                cli::array<System::Runtime::Remoting::Messaging::Header*> *headers;
                serializer->ReadObjectGraph2(elem, reader, hasHeader, result, headers);
                if((handler != nullptr)) 
                {
                    handler->Invoke(headers);
                }
                return result;
            }
        }
    }
    
    System::Object* BinaryFormatter::DeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage) {
        return NoCheckDeserializeMethodResponse(serializationStream, handler, methodCallMessage);
    }
    
    System::Object* BinaryFormatter::NoCheckDeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage) {
        if((serializationStream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("serializationStream"));
        }
        if((serializationStream->get_CanSeek_8c8861ce02c6bdeb() && (serializationStream->get_Length_ddb8b0d061db5350() ==  0L))) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("serializationStream supports seeking, but its length is 0"));
        }
        System::IO::BinaryReader *reader = cli::gcnew<System::IO::BinaryReader>(serializationStream);
        bool hasHeader;
        ReadBinaryHeader(reader, hasHeader);
        return MessageFormatter::ReadMethodResponse(reader, hasHeader, handler, methodCallMessage, this);
    }
    
    void BinaryFormatter::Serialize(System::IO::Stream* serializationStream, System::Object* graph) {
        Serialize2(serializationStream, graph, nullptr);
    }
    
    void BinaryFormatter::Serialize2(System::IO::Stream* serializationStream, System::Object* graph, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers) {
        if((serializationStream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("serializationStream"));
        }
        System::IO::BinaryWriter *writer = cli::gcnew<System::IO::BinaryWriter>(serializationStream);
        WriteBinaryHeader(writer, (headers != nullptr));
        if(cli::is<System::Runtime::Remoting::Messaging::IMethodCallMessage>(graph)) 
        {
            MessageFormatter::WriteMethodCall(writer, graph, headers, this);
        }
         else 
        {
            if(cli::is<System::Runtime::Remoting::Messaging::IMethodReturnMessage>(graph)) 
            {
                MessageFormatter::WriteMethodResponse(writer, graph, headers, this);
            }
             else 
            {
                ObjectWriter *serializer = cli::gcnew<ObjectWriter>(this);
                serializer->WriteObjectGraph(writer, graph, headers);
            }
        }
        writer->Flush_3f4412918277f178();
    }
    
    System::Object* BinaryFormatter::UnsafeDeserialize(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler) {
        return NoCheckDeserialize(serializationStream, handler);
    }
    
    System::Object* BinaryFormatter::UnsafeDeserializeMethodResponse(System::IO::Stream* serializationStream, System::Runtime::Remoting::Messaging::HeaderHandler* handler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage) {
        return NoCheckDeserializeMethodResponse(serializationStream, handler, methodCallMessage);
    }
    
    void BinaryFormatter::WriteBinaryHeader(System::IO::BinaryWriter* writer, bool hasHeaders) {
        writer->Write_bc6e6f6f19ff3ad3(0);
        writer->Write_6382fee822de735b(1);
        if(hasHeaders) 
        {
            writer->Write_6382fee822de735b(2);
        }
         else 
        {
            writer->Write_6382fee822de735b(-1);
        }
        writer->Write_6382fee822de735b(1);
        writer->Write_6382fee822de735b(0);
    }
    
    void BinaryFormatter::ReadBinaryHeader(System::IO::BinaryReader* reader, bool hasHeaders) {
        reader->ReadByte_a8e935915607659b();
        reader->ReadInt32_e79bbed3af40f25f();
        int32_t val = reader->ReadInt32_e79bbed3af40f25f();
        hasHeaders = (val ==  2);
        reader->ReadInt32_e79bbed3af40f25f();
        reader->ReadInt32_e79bbed3af40f25f();
    }
    
    System::Runtime::Serialization::ISurrogateSelector* BinaryFormatter::get_DefaultSurrogateSelector() {
        return _DefaultSurrogateSelector_k__BackingField;
    }
    
    System::Runtime::Serialization::ISurrogateSelector* BinaryFormatter::set_DefaultSurrogateSelector(System::Runtime::Serialization::ISurrogateSelector* value) {
        _DefaultSurrogateSelector_k__BackingField = value;
        return get_DefaultSurrogateSelector();
    }
    
    System::Runtime::Serialization::Formatters::FormatterAssemblyStyle BinaryFormatter::get_AssemblyFormat() {
        return this->assembly_format;
    }
    
    System::Runtime::Serialization::Formatters::FormatterAssemblyStyle BinaryFormatter::set_AssemblyFormat(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle value) {
        this->assembly_format = value;
        return get_AssemblyFormat();
    }
    
    System::Runtime::Serialization::SerializationBinder* BinaryFormatter::get_Binder() {
        return this->binder;
    }
    
    System::Runtime::Serialization::SerializationBinder* BinaryFormatter::set_Binder(System::Runtime::Serialization::SerializationBinder* value) {
        this->binder = value;
        return get_Binder();
    }
    
    System::Runtime::Serialization::StreamingContext BinaryFormatter::get_Context() {
        return this->context;
    }
    
    System::Runtime::Serialization::StreamingContext BinaryFormatter::set_Context(System::Runtime::Serialization::StreamingContext value) {
        this->context = value;
        return get_Context();
    }
    
    System::Runtime::Serialization::ISurrogateSelector* BinaryFormatter::get_SurrogateSelector() {
        return this->surrogate_selector;
    }
    
    System::Runtime::Serialization::ISurrogateSelector* BinaryFormatter::set_SurrogateSelector(System::Runtime::Serialization::ISurrogateSelector* value) {
        this->surrogate_selector = value;
        return get_SurrogateSelector();
    }
    
    System::Runtime::Serialization::Formatters::FormatterTypeStyle BinaryFormatter::get_TypeFormat() {
        return this->type_format;
    }
    
    System::Runtime::Serialization::Formatters::FormatterTypeStyle BinaryFormatter::set_TypeFormat(System::Runtime::Serialization::Formatters::FormatterTypeStyle value) {
        this->type_format = value;
        return get_TypeFormat();
    }
    
    System::Runtime::Serialization::Formatters::TypeFilterLevel BinaryFormatter::get_FilterLevel() {
        return this->filter_level;
    }
    
    System::Runtime::Serialization::Formatters::TypeFilterLevel BinaryFormatter::set_FilterLevel(System::Runtime::Serialization::Formatters::TypeFilterLevel value) {
        this->filter_level = value;
        return get_FilterLevel();
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    System::Object*  CodeGenerator::monitor;
    System::Reflection::Emit::ModuleBuilder*  CodeGenerator::_module;
    
    CodeGenerator::CodeGenerator()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void CodeGenerator::static_constructor() {
        System::AppDomain *myDomain = System::Threading::Thread::GetDomain();
        System::Reflection::AssemblyName *myAsmName = cli::gcnew<System::Reflection::AssemblyName>();
        myAsmName->set_Name(_T("__MetadataTypes"));
        System::Reflection::Emit::AssemblyBuilder *myAsmBuilder = myDomain->DefineInternalDynamicAssembly(myAsmName, System::Reflection::Emit::AssemblyBuilderAccess::Run);
        _module = myAsmBuilder->DefineDynamicModule2(_T("__MetadataTypesModule"), false);
    }
    
    void CodeGenerator::constructor() {
    }
    
    System::Type* CodeGenerator::GenerateMetadataType(System::Type* type, System::Runtime::Serialization::StreamingContext context) {
        {
            cli::lock_guard{monitor};
            return GenerateMetadataTypeInternal(type, context);
        }
    }
    
    System::Type* CodeGenerator::GenerateMetadataTypeInternal(System::Type* type, System::Runtime::Serialization::StreamingContext context) {
        System::String *name = cli::concat(type->get_Name_50fad5fa936c3ae2(), _T("__TypeMetadata"));
        System::String *sufix = _T("");
        int32_t n = 0;
        while(System::Type::op_Inequality2(_module->GetType_a66b4e15451215(cli::concat(name, sufix)), nullptr)) sufix = cli::import(++n)->ToString_1636a0751cb9ac11();
        (name = cli::concat(name, sufix));
        cli::array<System::Reflection::MemberInfo*> *members = System::Runtime::Serialization::FormatterServices::GetSerializableMembers2(type, context);
        System::Reflection::Emit::TypeBuilder *typeBuilder = _module->DefineType3(name, System::Reflection::TypeAttributes::Public, cli::typeof<System::Type>::info);
        cli::array<System::Type*> *parameters;
        System::Reflection::Emit::MethodBuilder *method;
        System::Reflection::Emit::ILGenerator *gen;
        parameters = System::Type::EmptyTypes;
        System::Reflection::Emit::ConstructorBuilder *ctor = typeBuilder->DefineConstructor(System::Reflection::MethodAttributes::Public, System::Reflection::CallingConventions::Standard, parameters);
        System::Reflection::ConstructorInfo *baseCtor = cli::typeof<System::Type>::info->GetConstructor2((new cli::array<System::Type*>({cli::typeof<System::Type>::info})));
        gen = ctor->GetILGenerator();
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_0);
        gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Ldtoken, type);
        gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod(_T("GetTypeFromHandle")), nullptr);
        gen->Emit_9658065e57c01583(System::Reflection::Emit::OpCodes::Call, baseCtor);
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ret);
        parameters = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
        method = typeBuilder->DefineMethod(_T("WriteAssemblies"), (System::Reflection::MethodAttributes)70L, cli::typeof<System::Type>::info, parameters);
        gen = method->GetILGenerator();
        for(auto tmp_428 : members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_428);
            {
                System::Type *memberType = field->get_FieldType_1dab4079098d7fff();
                while(memberType->get_IsArray()) memberType = memberType->GetElementType_ab5070dbbfe66f5f();
                if(System::Reflection::Assembly::op_Inequality(memberType->get_Assembly_3aae0acbf2a6d696(), ObjectWriter::CorlibAssembly)) 
                {
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_1);
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                    EmitLoadTypeAssembly(gen, memberType, field->get_Name_50fad5fa936c3ae2());
                    gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Callvirt, cli::typeof<System::Type>::info->GetMethod(_T("WriteAssembly")), nullptr);
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Pop);
                }
            }
        }
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ret);
        typeBuilder->DefineMethodOverride(method, cli::typeof<System::Type>::info->GetMethod(_T("WriteAssemblies")));
        parameters = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
        method = typeBuilder->DefineMethod(_T("WriteTypeData"), (System::Reflection::MethodAttributes)70L, cli::typeof<System::Type>::info, parameters);
        gen = method->GetILGenerator();
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
        gen->Emit_174696548609067b(System::Reflection::Emit::OpCodes::Ldc_I4, members->get_Length());
        EmitWrite(gen, cli::typeof<System::Type>::info);
        for(auto tmp_429 : members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_429);
            {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_47ae0eb6bb66716(System::Reflection::Emit::OpCodes::Ldstr, field->get_Name_50fad5fa936c3ae2());
                EmitWrite(gen, cli::typeof<System::Type>::info);
            }
        }
        System::Reflection::Emit::Label falseLabel = gen->DefineLabel_bf30b86c6e4f712c();
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_3);
        gen->Emit_fae713cfda427cd3(System::Reflection::Emit::OpCodes::Brfalse, falseLabel);
        for(auto tmp_430 : members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_430);
            {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_fa7de15651e33487(System::Reflection::Emit::OpCodes::Ldc_I4_S, (unsigned char)(ObjectWriter::GetTypeTag(field->get_FieldType_1dab4079098d7fff())));
                EmitWrite(gen, cli::typeof<System::Type>::info);
            }
        }
        for(auto tmp_431 : members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_431);
            {
                EmitWriteTypeSpec(gen, field->get_FieldType_1dab4079098d7fff(), field->get_Name_50fad5fa936c3ae2());
            }
        }
        gen->MarkLabel_f204005ffcc00ecd(falseLabel);
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ret);
        typeBuilder->DefineMethodOverride(method, cli::typeof<System::Type>::info->GetMethod(_T("WriteTypeData")));
        parameters = (new cli::array<System::Type*>({cli::typeof<System::Type>::info, cli::typeof<System::Type>::info, cli::typeof<System::Type>::info}));
        method = typeBuilder->DefineMethod(_T("WriteObjectData"), (System::Reflection::MethodAttributes)70L, cli::typeof<System::Type>::info, parameters);
        gen = method->GetILGenerator();
        System::Reflection::Emit::LocalBuilder *localBuilder = gen->DeclareLocal_977dbdcc1bcbd0a3(type);
        System::Reflection::Emit::OpCode lload = System::Reflection::Emit::OpCodes::Ldloc;
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_3);
        if(type->get_IsValueType()) 
        {
            gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Unbox, type);
            LoadFromPtr(gen, type);
            lload = System::Reflection::Emit::OpCodes::Ldloca_S;
        }
         else 
        {
            gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Castclass, type);
        }
        gen->Emit_9541ccf03936bee1(System::Reflection::Emit::OpCodes::Stloc, localBuilder);
        for(auto tmp_432 : members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_432);
            {
                System::Type *ftype = field->get_FieldType_1dab4079098d7fff();
                if(BinaryCommon::IsPrimitive(ftype)) 
                {
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                    gen->Emit_9541ccf03936bee1(lload, localBuilder);
                    if(((System::Type::op_Equality2(ftype, cli::typeof<System::Type>::info) || System::Type::op_Equality2(ftype, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(ftype, cli::typeof<System::Type>::info))) 
                    {
                        gen->Emit_65b6e011d91f7643(System::Reflection::Emit::OpCodes::Ldflda, field);
                    }
                     else 
                    {
                        gen->Emit_65b6e011d91f7643(System::Reflection::Emit::OpCodes::Ldfld, field);
                    }
                    EmitWritePrimitiveValue(gen, ftype);
                }
                 else 
                {
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_1);
                    gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                    gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Ldtoken, ftype);
                    gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod(_T("GetTypeFromHandle")), nullptr);
                    gen->Emit_9541ccf03936bee1(lload, localBuilder);
                    gen->Emit_65b6e011d91f7643(System::Reflection::Emit::OpCodes::Ldfld, field);
                    if(ftype->get_IsValueType()) 
                    {
                        gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Box, ftype);
                    }
                    gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod(_T("WriteValue")), nullptr);
                }
            }
        }
        gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ret);
        typeBuilder->DefineMethodOverride(method, cli::typeof<System::Type>::info->GetMethod(_T("WriteObjectData")));
        return typeBuilder->CreateType();
    }
    
    void CodeGenerator::LoadFromPtr(System::Reflection::Emit::ILGenerator* ig, System::Type* t) {
        if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
        {
            ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I4);
        }
         else 
        {
            if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
            {
                ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_U4);
            }
             else 
            {
                if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                {
                    ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I2);
                }
                 else 
                {
                    if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                    {
                        ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_U2);
                    }
                     else 
                    {
                        if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                        {
                            ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_U2);
                        }
                         else 
                        {
                            if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                            {
                                ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_U1);
                            }
                             else 
                            {
                                if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                {
                                    ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I1);
                                }
                                 else 
                                {
                                    if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                    {
                                        ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I8);
                                    }
                                     else 
                                    {
                                        if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                        {
                                            ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I8);
                                        }
                                         else 
                                        {
                                            if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                            {
                                                ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_R4);
                                            }
                                             else 
                                            {
                                                if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                                {
                                                    ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_R8);
                                                }
                                                 else 
                                                {
                                                    if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                                    {
                                                        ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I1);
                                                    }
                                                     else 
                                                    {
                                                        if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                                        {
                                                            ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_I);
                                                        }
                                                         else 
                                                        {
                                                            if(t->get_IsEnum_bc85ea7b0a749db()) 
                                                            {
                                                                if(System::Type::op_Equality2(t, cli::typeof<System::Type>::info)) 
                                                                {
                                                                    ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_Ref);
                                                                }
                                                                 else 
                                                                {
                                                                    LoadFromPtr(ig, EnumToUnderlying(t));
                                                                }
                                                            }
                                                             else 
                                                            {
                                                                if(t->get_IsValueType()) 
                                                                {
                                                                    ig->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Ldobj, t);
                                                                }
                                                                 else 
                                                                {
                                                                    ig->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldind_Ref);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    void CodeGenerator::EmitWriteTypeSpec(System::Reflection::Emit::ILGenerator* gen, System::Type* type, System::String* member) {
        switch(ObjectWriter::GetTypeTag(type)) {
            case TypeTag::PrimitiveType: case_1417: {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_fa7de15651e33487(System::Reflection::Emit::OpCodes::Ldc_I4_S, (unsigned char)(BinaryCommon::GetTypeCode(type)));
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            case TypeTag::RuntimeType: case_1418: {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_47ae0eb6bb66716(System::Reflection::Emit::OpCodes::Ldstr, type->get_FullName_7e8fa72ba225e1a4());
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            case TypeTag::GenericType: case_1419: {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_47ae0eb6bb66716(System::Reflection::Emit::OpCodes::Ldstr, type->get_FullName_7e8fa72ba225e1a4());
                EmitWrite(gen, cli::typeof<System::Type>::info);
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_1);
                EmitLoadTypeAssembly(gen, type, member);
                gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Callvirt, cli::typeof<System::Type>::info->GetMethod(_T("GetAssemblyId")), nullptr);
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Conv_I4);
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            case TypeTag::ArrayOfPrimitiveType: case_1420: {
                gen->Emit_6b1c52a4d677ebc8(System::Reflection::Emit::OpCodes::Ldarg_2);
                gen->Emit_fa7de15651e33487(System::Reflection::Emit::OpCodes::Ldc_I4_S, (unsigned char)(BinaryCommon::GetTypeCode(type->GetElementType_ab5070dbbfe66f5f())));
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            default: case_1421: {
                break;
            }
        }
    }
    
    void CodeGenerator::EmitLoadTypeAssembly(System::Reflection::Emit::ILGenerator* gen, System::Type* type, System::String* member) {
        gen->Emit_911e8244dc15d49c(System::Reflection::Emit::OpCodes::Ldtoken, type);
        gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod(_T("GetTypeFromHandle")), nullptr);
        gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Callvirt, cli::typeof<System::Type>::info->GetProperty(_T("Assembly"))->GetGetMethod(), nullptr);
    }
    
    void CodeGenerator::EmitWrite(System::Reflection::Emit::ILGenerator* gen, System::Type* type) {
        gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Callvirt, cli::typeof<System::Type>::info->GetMethod3(_T("Write"), (new cli::array<System::Type*>({type}))), nullptr);
    }
    
    void CodeGenerator::EmitWritePrimitiveValue(System::Reflection::Emit::ILGenerator* gen, System::Type* type) {
        switch(System::Type::GetTypeCode(type)) {
            case System::TypeCode::Boolean2: case System::TypeCode::Byte2: case System::TypeCode::Char2: case System::TypeCode::Double2: case System::TypeCode::Int162: case System::TypeCode::Int322: case System::TypeCode::Int642: case System::TypeCode::SByte2: case System::TypeCode::Single2: case System::TypeCode::UInt162: case System::TypeCode::UInt322: case System::TypeCode::UInt642: case System::TypeCode::String2: case_1422: {
                EmitWrite(gen, type);
                break;
            }
            case System::TypeCode::Decimal2: case_1423: {
                gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetProperty(_T("InvariantCulture"))->GetGetMethod(), nullptr);
                gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod3(_T("ToString"), (new cli::array<System::Type*>({cli::typeof<System::Type>::info}))), nullptr);
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            case System::TypeCode::DateTime2: case_1424: {
                gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetMethod2(_T("ToBinary"), (System::Reflection::BindingFlags)52L), nullptr);
                EmitWrite(gen, cli::typeof<System::Type>::info);
                break;
            }
            default: case_1425: {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    gen->EmitCall_4e16584a7443cbeb(System::Reflection::Emit::OpCodes::Call, cli::typeof<System::Type>::info->GetProperty(_T("Ticks"))->GetGetMethod(), nullptr);
                    EmitWrite(gen, cli::typeof<System::Type>::info);
                }
                 else 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Unsupported primitive type: "), type->get_FullName_7e8fa72ba225e1a4()));
                }
                break;
            }
        }
    }
    
    System::Type* CodeGenerator::EnumToUnderlying(System::Type* t) {
        System::TypeCode tc = System::Type::GetTypeCode(t);
        switch(tc) {
            case System::TypeCode::Boolean2: case_1426: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::Byte2: case_1427: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::SByte2: case_1428: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::Char2: case_1429: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::Int162: case_1430: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::UInt162: case_1431: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::Int322: case_1432: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::UInt322: case_1433: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::Int642: case_1434: {
                return cli::typeof<System::Type>::info;
            }
            case System::TypeCode::UInt642: case_1435: {
                return cli::typeof<System::Type>::info;
            }
        }
        throw cli::gcnew<System::Exception>(cli::concat(_T("Unhandled typecode in enum "), cli::box(tc), _T(" from "), t->get_AssemblyQualifiedName_cea373c2171bd483()));
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void MessageFormatter::constructor() {
    }
    
    void MessageFormatter::WriteMethodCall(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers, BinaryFormatter* formatter) {
        System::Runtime::Remoting::Messaging::IMethodCallMessage *call = cli::cast<System::Runtime::Remoting::Messaging::IMethodCallMessage*>(obj);
        writer->Write_bc6e6f6f19ff3ad3(21);
        MethodFlags methodFlags;
        int32_t infoArraySize = 0;
        System::Object *info = nullptr;
        cli::array<System::Object*> *extraProperties = nullptr;
        if(((call->get_LogicalCallContext_a19aeadfaffa89b7() != nullptr) && call->get_LogicalCallContext_a19aeadfaffa89b7()->get_HasInfo())) 
        {
            methodFlags = MethodFlags::IncludesLogicalCallContext;
            infoArraySize++;
        }
         else 
        {
            methodFlags = MethodFlags::ExcludeLogicalCallContext;
        }
        if(System::Runtime::Remoting::RemotingServices::IsMethodOverloaded(call)) 
        {
            infoArraySize++;
            (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 128)));
        }
        if((call->get_Properties_d88088440249f163()->get_Count_8f254f3dd8e2403() > System::Runtime::Remoting::Messaging::MethodCallDictionary::InternalKeys->get_Length())) 
        {
            extraProperties = GetExtraProperties(call->get_Properties_d88088440249f163(), System::Runtime::Remoting::Messaging::MethodCallDictionary::InternalKeys);
            infoArraySize++;
        }
        if(call->get_MethodBase_be82dccd2d92b9f6()->get_IsGenericMethod_7e509e51546ea990()) 
        {
            infoArraySize++;
            (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 32768)));
        }
        if((call->get_ArgCount_c4a9c359c4fe1d8e() ==  0)) 
        {
            (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 1)));
        }
         else 
        {
            if(AllTypesArePrimitive(call->get_Args_1b1b87289e375adf())) 
            {
                (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 2)));
            }
             else 
            {
                if((infoArraySize ==  0)) 
                {
                    (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 4)));
                }
                 else 
                {
                    (methodFlags = (MethodFlags)(((int32_t)(methodFlags) | 8)));
                    infoArraySize++;
                }
            }
        }
        writer->Write_6382fee822de735b((int32_t)(methodFlags));
        writer->Write_bc6e6f6f19ff3ad3(18);
        writer->Write_6de303e680f3eff5(call->get_MethodName_f32f67fc5b4be3b1());
        writer->Write_bc6e6f6f19ff3ad3(18);
        writer->Write_6de303e680f3eff5(call->get_TypeName_2c092df7327c2af5());
        if(((int32_t)(((int32_t)(methodFlags) & 2)) > 0)) 
        {
            writer->Write_805c393976ef76e5((uint32_t)call->get_Args_1b1b87289e375adf()->get_Length());
            for(int32_t n = 0; (n < call->get_ArgCount_c4a9c359c4fe1d8e()); n++){
                System::Object *arg = call->GetArg_b08c2cf8a17399d(n);
                if((arg != nullptr)) 
                {
                    writer->Write_bc6e6f6f19ff3ad3(BinaryCommon::GetTypeCode(arg->GetType()));
                    ObjectWriter::WritePrimitiveValue(writer, arg);
                }
                 else 
                {
                    writer->Write_bc6e6f6f19ff3ad3(17);
                }
            }
        }
        if((infoArraySize > 0)) 
        {
            cli::array<System::Object*> *ainfo = (new cli::array<System::Object*>(infoArraySize));
            int32_t n = 0;
            if(((int32_t)(((int32_t)(methodFlags) & 8)) > 0)) 
            {
                ainfo->at(n++) = call->get_Args_1b1b87289e375adf();
            }
            if(((int32_t)(((int32_t)(methodFlags) & 32768)) > 0)) 
            {
                ainfo->at(n++) = call->get_MethodBase_be82dccd2d92b9f6()->GetGenericArguments_77cf5f406b341958();
            }
            if(((int32_t)(((int32_t)(methodFlags) & 128)) > 0)) 
            {
                ainfo->at(n++) = call->get_MethodSignature_a58bc01e7b3e43ec();
            }
            if(((int32_t)(((int32_t)(methodFlags) & 64)) > 0)) 
            {
                ainfo->at(n++) = call->get_LogicalCallContext_a19aeadfaffa89b7();
            }
            if((extraProperties != nullptr)) 
            {
                ainfo->at(n++) = extraProperties;
            }
            info = ainfo;
        }
         else 
        {
            if(((int32_t)(((int32_t)(methodFlags) & 4)) > 0)) 
            {
                info = call->get_Args_1b1b87289e375adf();
            }
        }
        if((info != nullptr)) 
        {
            ObjectWriter *objectWriter = cli::gcnew<ObjectWriter>(formatter);
            objectWriter->WriteObjectGraph(writer, info, headers);
        }
         else 
        {
            writer->Write_bc6e6f6f19ff3ad3(11);
        }
    }
    
    void MessageFormatter::WriteMethodResponse(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers, BinaryFormatter* formatter) {
        System::Runtime::Remoting::Messaging::IMethodReturnMessage *resp = cli::cast<System::Runtime::Remoting::Messaging::IMethodReturnMessage*>(obj);
        writer->Write_bc6e6f6f19ff3ad3(22);
        cli::array<System::String*> *internalProperties = System::Runtime::Remoting::Messaging::MethodReturnDictionary::InternalReturnKeys;
        int32_t infoArrayLength = 0;
        System::Object *info = nullptr;
        cli::array<System::Object*> *extraProperties = nullptr;
        ReturnTypeTag returnTypeTag;
        MethodFlags contextFlag = MethodFlags::ExcludeLogicalCallContext;
        if((resp->get_Exception_f355b7f547514947() != nullptr)) 
        {
            returnTypeTag = (ReturnTypeTag)34L;
            internalProperties = System::Runtime::Remoting::Messaging::MethodReturnDictionary::InternalExceptionKeys;
            infoArrayLength = 1;
        }
         else 
        {
            if((resp->get_ReturnValue_5e8804a33ce4fa71() ==  nullptr)) 
            {
                returnTypeTag = ReturnTypeTag::Null;
            }
             else 
            {
                if(IsMethodPrimitive(resp->get_ReturnValue_5e8804a33ce4fa71()->GetType())) 
                {
                    returnTypeTag = ReturnTypeTag::PrimitiveType;
                }
                 else 
                {
                    returnTypeTag = ReturnTypeTag::ObjectType;
                    infoArrayLength++;
                }
            }
        }
        MethodFlags formatFlag;
        if(((resp->get_LogicalCallContext_a19aeadfaffa89b7() != nullptr) && resp->get_LogicalCallContext_a19aeadfaffa89b7()->get_HasInfo())) 
        {
            contextFlag = MethodFlags::IncludesLogicalCallContext;
            infoArrayLength++;
        }
        if(((resp->get_Properties_d88088440249f163()->get_Count_8f254f3dd8e2403() > internalProperties->get_Length()) && ((int32_t)(((int32_t)(returnTypeTag) & 32)) ==  0))) 
        {
            extraProperties = GetExtraProperties(resp->get_Properties_d88088440249f163(), internalProperties);
            infoArrayLength++;
        }
        if((resp->get_OutArgCount_9615a7b9f4b303a6() ==  0)) 
        {
            formatFlag = MethodFlags::NoArguments;
        }
         else 
        {
            if(AllTypesArePrimitive(resp->get_Args_1b1b87289e375adf())) 
            {
                formatFlag = MethodFlags::PrimitiveArguments;
            }
             else 
            {
                if((infoArrayLength ==  0)) 
                {
                    formatFlag = MethodFlags::ArgumentsInSimpleArray;
                }
                 else 
                {
                    formatFlag = MethodFlags::ArgumentsInMultiArray;
                    infoArrayLength++;
                }
            }
        }
        writer->Write_bc6e6f6f19ff3ad3((unsigned char)((unsigned char)(int32_t)(((int32_t)(contextFlag) | (int32_t)(formatFlag)))));
        writer->Write_bc6e6f6f19ff3ad3((unsigned char)(returnTypeTag));
        writer->Write_bc6e6f6f19ff3ad3(0);
        writer->Write_bc6e6f6f19ff3ad3(0);
        if(((int32_t)(returnTypeTag) ==  8)) 
        {
            writer->Write_bc6e6f6f19ff3ad3(BinaryCommon::GetTypeCode(resp->get_ReturnValue_5e8804a33ce4fa71()->GetType()));
            ObjectWriter::WritePrimitiveValue(writer, resp->get_ReturnValue_5e8804a33ce4fa71());
        }
        if(((int32_t)(formatFlag) ==  2)) 
        {
            writer->Write_805c393976ef76e5((uint32_t)resp->get_ArgCount_c4a9c359c4fe1d8e());
            for(int32_t n = 0; (n < resp->get_ArgCount_c4a9c359c4fe1d8e()); n++){
                System::Object *val = resp->GetArg_b08c2cf8a17399d(n);
                if((val != nullptr)) 
                {
                    writer->Write_bc6e6f6f19ff3ad3(BinaryCommon::GetTypeCode(val->GetType()));
                    ObjectWriter::WritePrimitiveValue(writer, val);
                }
                 else 
                {
                    writer->Write_bc6e6f6f19ff3ad3(17);
                }
            }
        }
        if((infoArrayLength > 0)) 
        {
            cli::array<System::Object*> *infoArray = (new cli::array<System::Object*>(infoArrayLength));
            int32_t n = 0;
            if(((int32_t)(((int32_t)(returnTypeTag) & 32)) != 0)) 
            {
                infoArray->at(n++) = resp->get_Exception_f355b7f547514947();
            }
            if(((int32_t)(formatFlag) ==  8)) 
            {
                infoArray->at(n++) = resp->get_Args_1b1b87289e375adf();
            }
            if(((int32_t)(returnTypeTag) ==  16)) 
            {
                infoArray->at(n++) = resp->get_ReturnValue_5e8804a33ce4fa71();
            }
            if(((int32_t)(contextFlag) ==  64)) 
            {
                infoArray->at(n++) = resp->get_LogicalCallContext_a19aeadfaffa89b7();
            }
            if((extraProperties != nullptr)) 
            {
                infoArray->at(n++) = extraProperties;
            }
            info = infoArray;
        }
         else 
        {
            if(((int32_t)(((int32_t)(formatFlag) & 4)) > 0)) 
            {
                info = resp->get_Args_1b1b87289e375adf();
            }
        }
        if((info != nullptr)) 
        {
            ObjectWriter *objectWriter = cli::gcnew<ObjectWriter>(formatter);
            objectWriter->WriteObjectGraph(writer, info, headers);
        }
         else 
        {
            writer->Write_bc6e6f6f19ff3ad3(11);
        }
    }
    
    System::Object* MessageFormatter::ReadMethodCall(System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, BinaryFormatter* formatter) {
        BinaryElement elem = (BinaryElement)(reader->ReadByte_a8e935915607659b());
        return ReadMethodCall2(elem, reader, hasHeaders, headerHandler, formatter);
    }
    
    System::Object* MessageFormatter::ReadMethodCall2(BinaryElement elem, System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, BinaryFormatter* formatter) {
        if(((int32_t)(elem) != 21)) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(cli::concat(_T("Invalid format. Expected BinaryElement.MethodCall, found "), cli::box(elem)));
        }
        MethodFlags flags = (MethodFlags)(reader->ReadInt32_e79bbed3af40f25f());
        if(((int32_t)(reader->ReadByte_a8e935915607659b()) != 18)) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("Invalid format"));
        }
        System::String *methodName = reader->ReadString_7b59e815ae441879();
        if(((int32_t)(reader->ReadByte_a8e935915607659b()) != 18)) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("Invalid format"));
        }
        System::String *className = reader->ReadString_7b59e815ae441879();
        cli::array<System::Object*> *arguments = nullptr;
        System::Object *methodSignature = nullptr;
        System::Object *callContext = nullptr;
        cli::array<System::Object*> *extraProperties = nullptr;
        cli::array<System::Runtime::Remoting::Messaging::Header*> *headers = nullptr;
        cli::array<System::Type*> *genericArguments = nullptr;
        if(((int32_t)(((int32_t)(flags) & 2)) > 0)) 
        {
            uint32_t count = reader->ReadUInt32_3acc4b6c3fc21142();
            arguments = (new cli::array<System::Object*>((int32_t)count));
            for(int32_t n = 0; ((int64_t)(n) < (int64_t)(count)); n++){
                System::Type *type = BinaryCommon::GetTypeFromCode((int32_t)(reader->ReadByte_a8e935915607659b()));
                arguments->at(n) = ObjectReader::ReadPrimitiveTypeValue(reader, type);
            }
        }
        if(((int32_t)(((int32_t)(flags) & 32972)) > 0)) 
        {
            ObjectReader *objectReader = cli::gcnew<ObjectReader>(formatter);
            System::Object *result;
            objectReader->ReadObjectGraph(reader, hasHeaders, result, headers);
            cli::array<System::Object*> *msgInfo = cli::cast<cli::array<System::Object*>*>(result);
            if(((int32_t)(((int32_t)(flags) & 4)) > 0)) 
            {
                arguments = msgInfo;
            }
             else 
            {
                int32_t n = 0;
                if(((int32_t)(((int32_t)(flags) & 8)) > 0)) 
                {
                    if((msgInfo->get_Length() > 1)) 
                    {
                        arguments = cli::cast<cli::array<System::Object*>*>(msgInfo->at(n++));
                    }
                     else 
                    {
                        arguments = (new cli::array<System::Object*>(0));
                    }
                }
                if(((int32_t)(((int32_t)(flags) & 32768)) > 0)) 
                {
                    genericArguments = cli::cast<cli::array<System::Type*>*>(msgInfo->at(n++));
                }
                if(((int32_t)(((int32_t)(flags) & 128)) > 0)) 
                {
                    methodSignature = msgInfo->at(n++);
                }
                if(((int32_t)(((int32_t)(flags) & 64)) > 0)) 
                {
                    callContext = msgInfo->at(n++);
                }
                if((n < msgInfo->get_Length())) 
                {
                    extraProperties = cli::cast<cli::array<System::Object*>*>(msgInfo->at(n));
                }
            }
        }
         else 
        {
            reader->ReadByte_a8e935915607659b();
        }
        if((arguments ==  nullptr)) 
        {
            arguments = (new cli::array<System::Object*>(0));
        }
        System::String *uri = nullptr;
        if((headerHandler != nullptr)) 
        {
            uri = cli::as<System::String*>(headerHandler->Invoke(headers));
        }
        cli::array<System::Runtime::Remoting::Messaging::Header*> *methodInfo = (new cli::array<System::Runtime::Remoting::Messaging::Header*>(7));
        methodInfo->at(0) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__MethodName"), methodName);
        methodInfo->at(1) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__MethodSignature"), methodSignature);
        methodInfo->at(2) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__TypeName"), className);
        methodInfo->at(3) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__Args"), arguments);
        methodInfo->at(4) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__CallContext"), callContext);
        methodInfo->at(5) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__Uri"), uri);
        methodInfo->at(6) = cli::gcnew<System::Runtime::Remoting::Messaging::Header>(_T("__GenericArguments"), genericArguments);
        System::Runtime::Remoting::Messaging::MethodCall *call = cli::gcnew<System::Runtime::Remoting::Messaging::MethodCall>(methodInfo);
        if((extraProperties != nullptr)) 
        {
            for(auto tmp_433 : extraProperties) {
                auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_433);
                call->get_Properties_c453f36b3f043bdc()->set_Item_a0c4aaef01cc13c2(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
            }
        }
        return call;
    }
    
    System::Object* MessageFormatter::ReadMethodResponse(System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage, BinaryFormatter* formatter) {
        BinaryElement elem = (BinaryElement)(reader->ReadByte_a8e935915607659b());
        return ReadMethodResponse2(elem, reader, hasHeaders, headerHandler, methodCallMessage, formatter);
    }
    
    System::Object* MessageFormatter::ReadMethodResponse2(BinaryElement elem, System::IO::BinaryReader* reader, bool hasHeaders, System::Runtime::Remoting::Messaging::HeaderHandler* headerHandler, System::Runtime::Remoting::Messaging::IMethodCallMessage* methodCallMessage, BinaryFormatter* formatter) {
        if(((int32_t)(elem) != 22)) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(cli::concat(_T("Invalid format. Expected BinaryElement.MethodResponse, found "), cli::box(elem)));
        }
        MethodFlags flags = (MethodFlags)(reader->ReadByte_a8e935915607659b());
        ReturnTypeTag typeTag = (ReturnTypeTag)(reader->ReadByte_a8e935915607659b());
        bool hasContextInfo = ((int32_t)(((int32_t)(flags) & 64)) > 0);
        reader->ReadByte_a8e935915607659b();
        reader->ReadByte_a8e935915607659b();
        System::Object *returnValue = nullptr;
        cli::array<System::Object*> *outArgs = nullptr;
        System::Runtime::Remoting::Messaging::LogicalCallContext *callContext = nullptr;
        System::Exception *exception = nullptr;
        cli::array<System::Object*> *extraProperties = nullptr;
        cli::array<System::Runtime::Remoting::Messaging::Header*> *headers = nullptr;
        if(((int32_t)(((int32_t)(typeTag) & 8)) > 0)) 
        {
            System::Type *type = BinaryCommon::GetTypeFromCode((int32_t)(reader->ReadByte_a8e935915607659b()));
            returnValue = ObjectReader::ReadPrimitiveTypeValue(reader, type);
        }
        if(((int32_t)(((int32_t)(flags) & 2)) > 0)) 
        {
            uint32_t count = reader->ReadUInt32_3acc4b6c3fc21142();
            outArgs = (new cli::array<System::Object*>((int32_t)count));
            for(int32_t n = 0; ((int64_t)(n) < (int64_t)(count)); n++){
                System::Type *type = BinaryCommon::GetTypeFromCode((int32_t)(reader->ReadByte_a8e935915607659b()));
                outArgs->at(n) = ObjectReader::ReadPrimitiveTypeValue(reader, type);
            }
        }
        if(((((hasContextInfo || ((int32_t)(((int32_t)(typeTag) & 16)) > 0)) || ((int32_t)(((int32_t)(typeTag) & 32)) > 0)) || ((int32_t)(((int32_t)(flags) & 4)) > 0)) || ((int32_t)(((int32_t)(flags) & 8)) > 0))) 
        {
            ObjectReader *objectReader = cli::gcnew<ObjectReader>(formatter);
            System::Object *result;
            objectReader->ReadObjectGraph(reader, hasHeaders, result, headers);
            cli::array<System::Object*> *msgInfo = cli::cast<cli::array<System::Object*>*>(result);
            if(((int32_t)(((int32_t)(typeTag) & 32)) > 0)) 
            {
                exception = cli::cast<System::Exception*>(msgInfo->at(0));
                if(hasContextInfo) 
                {
                    callContext = cli::cast<System::Runtime::Remoting::Messaging::LogicalCallContext*>(msgInfo->at(1));
                }
            }
             else 
            {
                if((((int32_t)(((int32_t)(flags) & 1)) > 0) || ((int32_t)(((int32_t)(flags) & 2)) > 0))) 
                {
                    int32_t n = 0;
                    if(((int32_t)(((int32_t)(typeTag) & 16)) > 0)) 
                    {
                        returnValue = msgInfo->at(n++);
                    }
                    if(hasContextInfo) 
                    {
                        callContext = cli::cast<System::Runtime::Remoting::Messaging::LogicalCallContext*>(msgInfo->at(n++));
                    }
                    if((n < msgInfo->get_Length())) 
                    {
                        extraProperties = cli::cast<cli::array<System::Object*>*>(msgInfo->at(n));
                    }
                }
                 else 
                {
                    if(((int32_t)(((int32_t)(flags) & 4)) > 0)) 
                    {
                        outArgs = msgInfo;
                    }
                     else 
                    {
                        int32_t n = 0;
                        outArgs = cli::cast<cli::array<System::Object*>*>(msgInfo->at(n++));
                        if(((int32_t)(((int32_t)(typeTag) & 16)) > 0)) 
                        {
                            returnValue = msgInfo->at(n++);
                        }
                        if(hasContextInfo) 
                        {
                            callContext = cli::cast<System::Runtime::Remoting::Messaging::LogicalCallContext*>(msgInfo->at(n++));
                        }
                        if((n < msgInfo->get_Length())) 
                        {
                            extraProperties = cli::cast<cli::array<System::Object*>*>(msgInfo->at(n));
                        }
                    }
                }
            }
        }
         else 
        {
            reader->ReadByte_a8e935915607659b();
        }
        if((headerHandler != nullptr)) 
        {
            headerHandler->Invoke(headers);
        }
        if((exception != nullptr)) 
        {
            return cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(exception, methodCallMessage);
        }
         else 
        {
            int32_t argCount = (outArgs != nullptr) ? outArgs->get_Length() : 0;
            System::Runtime::Remoting::Messaging::ReturnMessage *result = cli::gcnew<System::Runtime::Remoting::Messaging::ReturnMessage>(returnValue, outArgs, argCount, callContext, methodCallMessage);
            if((extraProperties != nullptr)) 
            {
                for(auto tmp_434 : extraProperties) {
                    auto entry = cli::cast<System::Collections::DictionaryEntry>(tmp_434);
                    result->get_Properties_74f84dd6944b322b()->set_Item_a0c4aaef01cc13c2(cli::cast<System::String*>(entry->get_Key()), entry->get_Value());
                }
            }
            return result;
        }
    }
    
    bool MessageFormatter::AllTypesArePrimitive(cli::array<System::Object*>* objects) {
        for(auto tmp_435 : objects) {
            auto ob = cli::cast<System::Object*>(tmp_435);
            {
                if(((ob != nullptr) && !(IsMethodPrimitive(ob->GetType())))) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    bool MessageFormatter::IsMethodPrimitive(System::Type* type) {
        return (((type->get_IsPrimitive() || System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) || System::Type::op_Equality2(type, cli::typeof<System::Type>::info));
    }
    
    cli::array<System::Object*>* MessageFormatter::GetExtraProperties(System::Collections::IDictionary* properties, cli::array<System::String*>* internalKeys) {
        cli::array<System::Object*> *extraProperties = (new cli::array<System::Object*>((properties->get_Count_8f254f3dd8e2403() - internalKeys->get_Length())));
        int32_t n = 0;
        System::Collections::IDictionaryEnumerator *e = properties->GetEnumerator_40657fcb15842551();
        while(e->MoveNext_4e78e145935f5417()) if(!(IsInternalKey(cli::cast<System::String*>(e->get_Entry_7d036eca1ef8d5f4()->get_Key()), internalKeys))) 
        {
            extraProperties->at(n++) = cli::box(e->get_Entry_7d036eca1ef8d5f4());
        }
        return extraProperties;
    }
    
    bool MessageFormatter::IsInternalKey(System::String* key, cli::array<System::String*>* internalKeys) {
        for(auto tmp_436 : internalKeys) {
            auto ikey = cli::cast<System::String*>(tmp_436);
            if(System::String::op_Equality(key, ikey)) 
            {
                return true;
            }
        }
        return false;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void TypeMetadata::constructor() {
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void ArrayNullFiller::constructor(int32_t count) {
        this->NullCount = count;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void ObjectReader::constructor(BinaryFormatter* formatter) {
        this->_surrogateSelector = formatter->get_SurrogateSelector();
        this->_context = formatter->get_Context();
        this->_binder = formatter->get_Binder();
        this->_manager = cli::gcnew<System::Runtime::Serialization::ObjectManager>(this->_surrogateSelector, this->_context);
        this->_filterLevel = formatter->get_FilterLevel();
    }
    
    void ObjectReader::ReadObjectGraph(System::IO::BinaryReader* reader, bool readHeaders, System::Object* result, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers) {
        BinaryElement elem = (BinaryElement)(reader->ReadByte_a8e935915607659b());
        ReadObjectGraph2(elem, reader, readHeaders, result, headers);
    }
    
    void ObjectReader::ReadObjectGraph2(BinaryElement elem, System::IO::BinaryReader* reader, bool readHeaders, System::Object* result, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers) {
        headers = nullptr;
        bool next = ReadNextObject(elem, reader);
        if(next) 
        {
            do {
                if((readHeaders && (headers ==  nullptr))) 
                {
                    headers = cli::cast<cli::array<System::Runtime::Remoting::Messaging::Header*>*>(this->get_CurrentObject());
                }
                 else 
                {
                    if((this->_rootObjectID ==  0L)) 
                    {
                        this->_rootObjectID = this->_lastObjectID;
                    }
                }
            }
            while(ReadNextObject2(reader));
        }
        result = this->_manager->GetObject_105bbaf6c08155a0(this->_rootObjectID);
    }
    
    bool ObjectReader::ReadNextObject(BinaryElement element, System::IO::BinaryReader* reader) {
        if(((int32_t)(element) ==  11)) 
        {
            this->_manager->DoFixups_43f8ccf522b38380();
            this->_manager->RaiseDeserializationEvent_961dfed24077401c();
            return false;
        }
        System::Runtime::Serialization::SerializationInfo *info;
        int64_t objectId;
        ReadObject(element, reader, objectId, this->_lastObject, info);
        if((objectId != 0L)) 
        {
            RegisterObject(objectId, this->_lastObject, info, 0L, nullptr, nullptr);
            this->_lastObjectID = objectId;
        }
        return true;
    }
    
    bool ObjectReader::ReadNextObject2(System::IO::BinaryReader* reader) {
        BinaryElement element = (BinaryElement)(reader->ReadByte_a8e935915607659b());
        if(((int32_t)(element) ==  11)) 
        {
            this->_manager->DoFixups_43f8ccf522b38380();
            this->_manager->RaiseDeserializationEvent_961dfed24077401c();
            return false;
        }
        System::Runtime::Serialization::SerializationInfo *info;
        int64_t objectId;
        ReadObject(element, reader, objectId, this->_lastObject, info);
        if((objectId != 0L)) 
        {
            RegisterObject(objectId, this->_lastObject, info, 0L, nullptr, nullptr);
            this->_lastObjectID = objectId;
        }
        return true;
    }
    
    void ObjectReader::ReadObject(BinaryElement element, System::IO::BinaryReader* reader, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info) {
        switch(element) {
            case BinaryElement::RefTypeObject: case_1436: {
                ReadRefTypeObjectInstance(reader, objectId, value, info);
                break;
            }
            case BinaryElement::UntypedRuntimeObject: case_1437: {
                ReadObjectInstance(reader, true, false, objectId, value, info);
                break;
            }
            case BinaryElement::UntypedExternalObject: case_1438: {
                ReadObjectInstance(reader, false, false, objectId, value, info);
                break;
            }
            case BinaryElement::RuntimeObject: case_1439: {
                ReadObjectInstance(reader, true, true, objectId, value, info);
                break;
            }
            case BinaryElement::ExternalObject: case_1440: {
                ReadObjectInstance(reader, false, true, objectId, value, info);
                break;
            }
            case BinaryElement::String2: case_1441: {
                info = nullptr;
                ReadStringIntance(reader, objectId, value);
                break;
            }
            case BinaryElement::GenericArray: case_1442: {
                info = nullptr;
                ReadGenericArray(reader, objectId, value);
                break;
            }
            case BinaryElement::BoxedPrimitiveTypeValue: case_1443: {
                value = ReadBoxedPrimitiveTypeValue(reader);
                objectId = 0L;
                info = nullptr;
                break;
            }
            case BinaryElement::NullValue: case_1444: {
                value = nullptr;
                objectId = 0L;
                info = nullptr;
                break;
            }
            case BinaryElement::Assembly2: case_1445: {
                ReadAssembly(reader);
                ReadObject((BinaryElement)(reader->ReadByte_a8e935915607659b()), reader, objectId, value, info);
                break;
            }
            case BinaryElement::ArrayFiller8b: case_1446: {
                value = cli::gcnew<ArrayNullFiller>((int32_t)(reader->ReadByte_a8e935915607659b()));
                objectId = 0L;
                info = nullptr;
                break;
            }
            case BinaryElement::ArrayFiller32b: case_1447: {
                value = cli::gcnew<ArrayNullFiller>(reader->ReadInt32_e79bbed3af40f25f());
                objectId = 0L;
                info = nullptr;
                break;
            }
            case BinaryElement::ArrayOfPrimitiveType: case_1448: {
                ReadArrayOfPrimitiveType(reader, objectId, value);
                info = nullptr;
                break;
            }
            case BinaryElement::ArrayOfObject: case_1449: {
                ReadArrayOfObject(reader, objectId, value);
                info = nullptr;
                break;
            }
            case BinaryElement::ArrayOfString: case_1450: {
                ReadArrayOfString(reader, objectId, value);
                info = nullptr;
                break;
            }
            default: case_1451: {
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(cli::concat(_T("Unexpected binary element: "), cli::box((int32_t)(element))));
            }
        }
    }
    
    void ObjectReader::ReadAssembly(System::IO::BinaryReader* reader) {
        int64_t id = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        System::String *assemblyName = reader->ReadString_7b59e815ae441879();
        this->_registeredAssemblies->set_Item_84c7e24d9caa09(cli::box(id), assemblyName);
    }
    
    void ObjectReader::ReadObjectInstance(System::IO::BinaryReader* reader, bool isRuntimeObject, bool hasTypeInfo, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        TypeMetadata *metadata = ReadTypeMetadata(reader, isRuntimeObject, hasTypeInfo);
        ReadObjectContent(reader, metadata, objectId, value, info);
    }
    
    void ObjectReader::ReadRefTypeObjectInstance(System::IO::BinaryReader* reader, int64_t objectId, System::Object* value, System::Runtime::Serialization::SerializationInfo* info) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        int64_t refTypeObjectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        System::Object *refObj = this->_manager->GetObject_105bbaf6c08155a0(refTypeObjectId);
        if((refObj ==  nullptr)) 
        {
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("Invalid binary format"));
        }
        TypeMetadata *metadata = cli::cast<TypeMetadata*>(this->_typeMetadataCache->get_Item_d75c6e706b965758(refObj->GetType()));
        ReadObjectContent(reader, metadata, objectId, value, info);
    }
    
    void ObjectReader::ReadObjectContent(System::IO::BinaryReader* reader, TypeMetadata* metadata, int64_t objectId, System::Object* objectInstance, System::Runtime::Serialization::SerializationInfo* info) {
        if(((int32_t)(this->_filterLevel) ==  2)) 
        {
            objectInstance = System::Runtime::Serialization::FormatterServices::GetSafeUninitializedObject(metadata->Type2);
        }
         else 
        {
            objectInstance = System::Runtime::Serialization::FormatterServices::GetUninitializedObject(metadata->Type2);
        }
        this->_manager->RaiseOnDeserializingEvent(objectInstance);
        info = metadata->NeedsSerializationInfo ? cli::gcnew<System::Runtime::Serialization::SerializationInfo>(metadata->Type2, cli::gcnew<System::Runtime::Serialization::FormatterConverter>()) : nullptr;
        if((metadata->MemberNames != nullptr)) 
        {
            for(int32_t n = 0; (n < metadata->FieldCount); n++) {
                ReadValue(reader, objectInstance, objectId, info, metadata->MemberTypes2->at(n), metadata->MemberNames->at(n), nullptr, nullptr);
            }
        }
         else 
        for(int32_t n = 0; (n < metadata->FieldCount); n++){
            if(System::Reflection::MemberInfo::op_Inequality(metadata->MemberInfos->at(n), nullptr)) 
            {
                ReadValue(reader, objectInstance, objectId, info, metadata->MemberTypes2->at(n), metadata->MemberInfos->at(n)->get_Name_50fad5fa936c3ae2(), metadata->MemberInfos->at(n), nullptr);
            }
             else 
            {
                if(BinaryCommon::IsPrimitive(metadata->MemberTypes2->at(n))) 
                {
                    ReadPrimitiveTypeValue(reader, metadata->MemberTypes2->at(n));
                }
            }
        }
    }
    
    void ObjectReader::RegisterObject(int64_t objectId, System::Object* objectInstance, System::Runtime::Serialization::SerializationInfo* info, int64_t parentObjectId, System::Reflection::MemberInfo* parentObjectMemeber, cli::array<int32_t>* indices) {
        if((parentObjectId ==  0L)) 
        {
            indices = nullptr;
        }
        if((!(objectInstance->GetType()->get_IsValueType()) || (parentObjectId ==  0L))) 
        {
            this->_manager->RegisterObject4(objectInstance, objectId, info, 0L, nullptr, nullptr);
        }
         else 
        {
            if((indices != nullptr)) 
            {
                indices = cli::cast<cli::array<int32_t>*>(cli::import(indices)->Clone());
            }
            this->_manager->RegisterObject4(objectInstance, objectId, info, parentObjectId, parentObjectMemeber, indices);
        }
    }
    
    void ObjectReader::ReadStringIntance(System::IO::BinaryReader* reader, int64_t objectId, System::Object* value) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        value = reader->ReadString_7b59e815ae441879();
    }
    
    void ObjectReader::ReadGenericArray(System::IO::BinaryReader* reader, int64_t objectId, System::Object* val) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        reader->ReadByte_a8e935915607659b();
        int32_t rank = reader->ReadInt32_e79bbed3af40f25f();
        bool emptyDim = false;
        cli::array<int32_t> *lengths = (new cli::array<int32_t>(rank));
        for(int32_t n = 0; (n < rank); n++){
            lengths->at(n) = reader->ReadInt32_e79bbed3af40f25f();
            if((lengths->at(n) ==  0)) 
            {
                emptyDim = true;
            }
        }
        TypeTag code = (TypeTag)(reader->ReadByte_a8e935915607659b());
        System::Type *elementType = ReadType(reader, code);
        System::Array *array = System::Array::CreateInstance4(elementType, lengths);
        if(emptyDim) 
        {
            val = array;
            return;
        }
        cli::array<int32_t> *indices = (new cli::array<int32_t>(rank));
        for(int32_t dim = (rank - 1); (dim >= 0); dim--) {
            indices->at(dim) = array->GetLowerBound(dim);
        }
        bool end = false;
        while(!(end)) {
            ReadValue(reader, array, objectId, nullptr, elementType, nullptr, nullptr, indices);
            for(int32_t dim = (array->get_Rank() - 1); (dim >= 0); dim--){
                indices->at(dim)++;
                if((indices->at(dim) > array->GetUpperBound(dim))) 
                {
                    if((dim > 0)) 
                    {
                        indices->at(dim) = array->GetLowerBound(dim);
                        continue;
                    }
                    end = true;
                }
                break;
            }
        }
        val = array;
    }
    
    System::Object* ObjectReader::ReadBoxedPrimitiveTypeValue(System::IO::BinaryReader* reader) {
        System::Type *type = ReadType(reader, TypeTag::PrimitiveType);
        return ReadPrimitiveTypeValue(reader, type);
    }
    
    void ObjectReader::ReadArrayOfPrimitiveType(System::IO::BinaryReader* reader, int64_t objectId, System::Object* val) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        int32_t length = reader->ReadInt32_e79bbed3af40f25f();
        System::Type *elementType = ReadType(reader, TypeTag::PrimitiveType);
        switch(System::Type::GetTypeCode(elementType)) {
            case System::TypeCode::Boolean2: case_1452: {
                {
                    cli::array<bool> *arr = (new cli::array<bool>(length));
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadBoolean_ffac632a26c093b3();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Byte2: case_1453: {
                {
                    cli::array<unsigned char> *arr = (new cli::array<unsigned char>(length));
                    int32_t pos = 0;
                    while((pos < length)) {
                        int32_t nr = reader->Read_e56820a6e9e603d8(arr, pos, (length - pos));
                        if((nr ==  0)) 
                        {
                            break;
                        }
                        (pos = pos + nr);
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Char2: case_1454: {
                {
                    cli::array<char16_t> *arr = (new cli::array<char16_t>(length));
                    int32_t pos = 0;
                    while((pos < length)) {
                        int32_t nr = reader->Read_e707a7910ba322cc(arr, pos, (length - pos));
                        if((nr ==  0)) 
                        {
                            break;
                        }
                        (pos = pos + nr);
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::DateTime2: case_1455: {
                {
                    cli::array<System::DateTime> *arr = (new cli::array<System::DateTime>(length));
                    for(int32_t n = 0; (n < length); n++){
                        arr->at(n) = System::DateTime::FromBinary(reader->ReadInt64_324b86c0d5995c31());
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Decimal2: case_1456: {
                {
                    cli::array<System::Decimal> *arr = (new cli::array<System::Decimal>(length));
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadDecimal_289b04b837613d00();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Double2: case_1457: {
                {
                    cli::array<double> *arr = (new cli::array<double>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 8);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadDouble_c4cf5262e4ca9658();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Int162: case_1458: {
                {
                    cli::array<int16_t> *arr = (new cli::array<int16_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 2);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadInt16_cc677a86798a4911();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Int322: case_1459: {
                {
                    cli::array<int32_t> *arr = (new cli::array<int32_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 4);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadInt32_e79bbed3af40f25f();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Int642: case_1460: {
                {
                    cli::array<int64_t> *arr = (new cli::array<int64_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 8);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadInt64_324b86c0d5995c31();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::SByte2: case_1461: {
                {
                    cli::array<signed char> *arr = (new cli::array<signed char>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 1);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadSByte_de4608c911742c46();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::Single2: case_1462: {
                {
                    cli::array<float> *arr = (new cli::array<float>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 4);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadSingle_4a83108898ca41d7();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::UInt162: case_1463: {
                {
                    cli::array<uint16_t> *arr = (new cli::array<uint16_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 2);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadUInt16_12c320b7592221bf();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::UInt322: case_1464: {
                {
                    cli::array<uint32_t> *arr = (new cli::array<uint32_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 4);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadUInt32_3acc4b6c3fc21142();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::UInt642: case_1465: {
                {
                    cli::array<uint64_t> *arr = (new cli::array<uint64_t>(length));
                    if((length > 2)) 
                    {
                        BlockRead(reader, arr, 8);
                    }
                     else 
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadUInt64_af37b8afdb6259c1();
                    }
                    val = arr;
                    break;
                }
            }
            case System::TypeCode::String2: case_1466: {
                {
                    cli::array<System::String*> *arr = (new cli::array<System::String*>(length));
                    for(int32_t n = 0; (n < length); n++) {
                        arr->at(n) = reader->ReadString_7b59e815ae441879();
                    }
                    val = arr;
                    break;
                }
            }
            default: case_1467: {
                {
                    if(System::Type::op_Equality2(elementType, cli::typeof<System::Type>::info)) 
                    {
                        cli::array<System::TimeSpan> *arr = (new cli::array<System::TimeSpan>(length));
                        for(int32_t n = 0; (n < length); n++) {
                            arr->at(n) = cli::ctor<System::TimeSpan>(reader->ReadInt64_324b86c0d5995c31());
                        }
                        val = arr;
                    }
                     else 
                    {
                        throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Unsupported primitive type: "), elementType->get_FullName_7e8fa72ba225e1a4()));
                    }
                    break;
                }
            }
        }
    }
    
    void ObjectReader::BlockRead(System::IO::BinaryReader* reader, System::Array* array, int32_t dataSize) {
        int32_t totalSize = System::Buffer::ByteLength(array);
        if(((this->arrayBuffer ==  nullptr) || ((totalSize > this->arrayBuffer->get_Length()) && (this->arrayBuffer->get_Length() != this->ArrayBufferLength)))) 
        {
            this->arrayBuffer = (new cli::array<unsigned char>((totalSize <= this->ArrayBufferLength) ? totalSize : this->ArrayBufferLength));
        }
        int32_t pos = 0;
        while((totalSize > 0)) {
            int32_t size = (totalSize < this->arrayBuffer->get_Length()) ? totalSize : this->arrayBuffer->get_Length();
            int32_t ap = 0;
            do {
                int32_t nr = reader->Read_e56820a6e9e603d8(this->arrayBuffer, ap, (size - ap));
                if((nr ==  0)) 
                {
                    break;
                }
                (ap = ap + nr);
            }
            while((ap < size));
            if((!(System::BitConverter::IsLittleEndian) && (dataSize > 1))) 
            {
                BinaryCommon::SwapBytes(this->arrayBuffer, size, dataSize);
            }
            System::Buffer::BlockCopy(this->arrayBuffer, 0, array, pos, size);
            (totalSize = totalSize - size);
            (pos = pos + size);
        }
    }
    
    void ObjectReader::ReadArrayOfObject(System::IO::BinaryReader* reader, int64_t objectId, System::Object* array) {
        ReadSimpleArray(reader, cli::typeof<System::Type>::info, objectId, array);
    }
    
    void ObjectReader::ReadArrayOfString(System::IO::BinaryReader* reader, int64_t objectId, System::Object* array) {
        ReadSimpleArray(reader, cli::typeof<System::Type>::info, objectId, array);
    }
    
    void ObjectReader::ReadSimpleArray(System::IO::BinaryReader* reader, System::Type* elementType, int64_t objectId, System::Object* val) {
        objectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
        int32_t length = reader->ReadInt32_e79bbed3af40f25f();
        cli::array<int32_t> *indices = (new cli::array<int32_t>(1));
        System::Array *array = System::Array::CreateInstance(elementType, length);
        for(int32_t n = 0; (n < length); n++){
            indices->at(0) = n;
            ReadValue(reader, array, objectId, nullptr, elementType, nullptr, nullptr, indices);
            n = indices->at(0);
        }
        val = array;
    }
    
    TypeMetadata* ObjectReader::ReadTypeMetadata(System::IO::BinaryReader* reader, bool isRuntimeObject, bool hasTypeInfo) {
        TypeMetadata *metadata = cli::gcnew<TypeMetadata>();
        System::String *className = reader->ReadString_7b59e815ae441879();
        int32_t fieldCount = reader->ReadInt32_e79bbed3af40f25f();
        cli::array<System::Type*> *types = (new cli::array<System::Type*>(fieldCount));
        cli::array<System::String*> *names = (new cli::array<System::String*>(fieldCount));
        for(int32_t n = 0; (n < fieldCount); n++) {
            names->at(n) = reader->ReadString_7b59e815ae441879();
        }
        if(hasTypeInfo) 
        {
            cli::array<TypeTag> *codes = (new cli::array<TypeTag>(fieldCount));
            for(int32_t n = 0; (n < fieldCount); n++) {
                codes->at(n) = (TypeTag)(reader->ReadByte_a8e935915607659b());
            }
            for(int32_t n = 0; (n < fieldCount); n++){
                System::Type *t = ReadType2(reader, codes->at(n), false);
                if(System::Type::op_Equality2(t, nullptr)) 
                {
                    t = cli::typeof<System::Type>::info;
                }
                types->at(n) = t;
            }
        }
        if(!(isRuntimeObject)) 
        {
            int64_t assemblyId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
            metadata->Type2 = GetDeserializationType(assemblyId, className);
        }
         else 
        {
            metadata->Type2 = System::Type::GetType5(className, true);
        }
        metadata->MemberTypes2 = types;
        metadata->MemberNames = names;
        metadata->FieldCount = names->get_Length();
        if((this->_surrogateSelector != nullptr)) 
        {
            System::Runtime::Serialization::ISurrogateSelector *selector;
            System::Runtime::Serialization::ISerializationSurrogate *surrogate = this->_surrogateSelector->GetSurrogate_9d3ffd4061f81ca8(metadata->Type2, this->_context, selector);
            metadata->NeedsSerializationInfo = (surrogate != nullptr);
        }
        if(!(metadata->NeedsSerializationInfo)) 
        {
            if(!(metadata->Type2->get_IsSerializable_54e7f398ebfc9468())) 
            {
                throw cli::gcnew<System::Runtime::Serialization::SerializationException>(_T("Serializable objects must be marked with the Serializable attribute"));
            }
            metadata->NeedsSerializationInfo = cli::typeof<System::Type>::info->IsAssignableFrom_e3aa32d778e63a90(metadata->Type2);
            if(!(metadata->NeedsSerializationInfo)) 
            {
                metadata->MemberInfos = (new cli::array<System::Reflection::MemberInfo*>(fieldCount));
                for(int32_t n = 0; (n < fieldCount); n++){
                    System::Reflection::FieldInfo *field = nullptr;
                    System::String *memberName = names->at(n);
                    int32_t i = memberName->IndexOf4(u'+');
                    if((i != -1)) 
                    {
                        System::String *baseTypeName = names->at(n)->Substring2(0, i);
                        memberName = names->at(n)->Substring((i + 1));
                        System::Type *t = metadata->Type2->get_BaseType_6a0646ae880055f6();
                        while(System::Type::op_Inequality2(t, nullptr)) {
                            if(System::String::op_Equality(t->get_Name_50fad5fa936c3ae2(), baseTypeName)) 
                            {
                                field = t->GetField_fb08cba9d1a4bc84(memberName, (System::Reflection::BindingFlags)52L);
                                break;
                            }
                             else 
                            {
                                t = t->get_BaseType_6a0646ae880055f6();
                            }
                        }
                    }
                     else 
                    {
                        field = metadata->Type2->GetField_fb08cba9d1a4bc84(memberName, (System::Reflection::BindingFlags)52L);
                    }
                    if(System::Reflection::FieldInfo::op_Inequality2(field, nullptr)) 
                    {
                        metadata->MemberInfos->at(n) = field;
                    }
                    if(!(hasTypeInfo)) 
                    {
                        types->at(n) = field->get_FieldType_1dab4079098d7fff();
                    }
                }
                metadata->MemberNames = nullptr;
            }
        }
        if(!(this->_typeMetadataCache->ContainsKey_5de2e202a0290d76(metadata->Type2))) 
        {
            this->_typeMetadataCache->set_Item_84c7e24d9caa09(metadata->Type2, metadata);
        }
        return metadata;
    }
    
    bool ObjectReader::IsGeneric(System::Reflection::MemberInfo* minfo) {
        if(System::Reflection::MemberInfo::op_Equality(minfo, nullptr)) 
        {
            return false;
        }
        System::Type *mtype = nullptr;
        switch(minfo->get_MemberType_cd521d320810c98f()) {
            case System::Reflection::MemberTypes::Field: case_1468: {
                mtype = cli::cast<System::Reflection::FieldInfo*>(minfo)->get_FieldType_1dab4079098d7fff();
                break;
            }
            default: case_1469: {
                throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Not supported: "), cli::box(minfo->get_MemberType_cd521d320810c98f())));
            }
        }
        return (System::Type::op_Inequality2(mtype, nullptr) && mtype->get_IsGenericType_4db8ddd5b97f3c14());
    }
    
    void ObjectReader::ReadValue(System::IO::BinaryReader* reader, System::Object* parentObject, int64_t parentObjectId, System::Runtime::Serialization::SerializationInfo* info, System::Type* valueType, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, cli::array<int32_t>* indices) {
        System::Object *val;
        if((BinaryCommon::IsPrimitive(valueType) && !(IsGeneric(memberInfo)))) 
        {
            val = ReadPrimitiveTypeValue(reader, valueType);
            SetObjectValue(parentObject, fieldName, memberInfo, info, val, valueType, indices);
            return;
        }
        BinaryElement element = (BinaryElement)(reader->ReadByte_a8e935915607659b());
        if(((int32_t)(element) ==  9)) 
        {
            int64_t childObjectId = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
            RecordFixup(parentObjectId, childObjectId, parentObject, info, fieldName, memberInfo, indices);
            return;
        }
        int64_t objectId;
        System::Runtime::Serialization::SerializationInfo *objectInfo;
        ReadObject(element, reader, objectId, val, objectInfo);
        bool hasFixup = false;
        if((objectId != 0L)) 
        {
            if(val->GetType()->get_IsValueType()) 
            {
                RecordFixup(parentObjectId, objectId, parentObject, info, fieldName, memberInfo, indices);
                hasFixup = true;
            }
            if(((info ==  nullptr) && !(cli::is<System::Array>(parentObject)))) 
            {
                RegisterObject(objectId, val, objectInfo, parentObjectId, memberInfo, nullptr);
            }
             else 
            {
                RegisterObject(objectId, val, objectInfo, parentObjectId, nullptr, indices);
            }
        }
        if(!(hasFixup)) 
        {
            SetObjectValue(parentObject, fieldName, memberInfo, info, val, valueType, indices);
        }
    }
    
    void ObjectReader::SetObjectValue(System::Object* parentObject, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, System::Runtime::Serialization::SerializationInfo* info, System::Object* value, System::Type* valueType, cli::array<int32_t>* indices) {
        if(cli::is<System::Runtime::Serialization::IObjectReference>(value)) 
        {
            value = cli::cast<System::Runtime::Serialization::IObjectReference*>(value)->GetRealObject_692566897a6926e4(this->_context);
        }
        if(cli::is<System::Array>(parentObject)) 
        {
            if(cli::is<ArrayNullFiller>(value)) 
            {
                int32_t count = cli::cast<ArrayNullFiller*>(value)->NullCount;
                (indices->at(0) = indices->at(0) + (count - 1));
            }
             else 
            {
                cli::cast<System::Array*>(parentObject)->SetValue(value, indices);
            }
        }
         else 
        {
            if((info != nullptr)) 
            {
                info->AddValue(fieldName, value, valueType);
            }
             else 
            {
                if(cli::is<System::Reflection::FieldInfo>(memberInfo)) 
                {
                    cli::cast<System::Reflection::FieldInfo*>(memberInfo)->SetValue2(parentObject, value);
                }
                 else 
                {
                    cli::cast<System::Reflection::PropertyInfo*>(memberInfo)->SetValue_1695ad6de909516e(parentObject, value, nullptr);
                }
            }
        }
    }
    
    void ObjectReader::RecordFixup(int64_t parentObjectId, int64_t childObjectId, System::Object* parentObject, System::Runtime::Serialization::SerializationInfo* info, System::String* fieldName, System::Reflection::MemberInfo* memberInfo, cli::array<int32_t>* indices) {
        if((info != nullptr)) 
        {
            this->_manager->RecordDelayedFixup_ad8512da90dd9d43(parentObjectId, fieldName, childObjectId);
        }
         else 
        {
            if(cli::is<System::Array>(parentObject)) 
            {
                if((indices->get_Length() ==  1)) 
                {
                    this->_manager->RecordArrayElementFixup_154a9d9baa6f6255(parentObjectId, indices->at(0), childObjectId);
                }
                 else 
                {
                    this->_manager->RecordArrayElementFixup_a03659609dc4b607(parentObjectId, cli::cast<cli::array<int32_t>*>(cli::import(indices)->Clone()), childObjectId);
                }
            }
             else 
            {
                this->_manager->RecordFixup_59534355c6ae7b0a(parentObjectId, memberInfo, childObjectId);
            }
        }
    }
    
    System::Type* ObjectReader::GetDeserializationType(int64_t assemblyId, System::String* className) {
        return GetDeserializationType2(assemblyId, className, true);
    }
    
    System::Type* ObjectReader::GetDeserializationType2(int64_t assemblyId, System::String* className, bool throwOnError) {
        System::Type *t;
        System::String *assemblyName = cli::cast<System::String*>(this->_registeredAssemblies->get_Item_d75c6e706b965758(cli::box(assemblyId)));
        if((this->_binder != nullptr)) 
        {
            t = this->_binder->BindToType_88315b8448960e94(assemblyName, className);
            if(System::Type::op_Inequality2(t, nullptr)) 
            {
                return t;
            }
        }
        System::Reflection::Assembly *assembly;
        try {
            assembly = System::Reflection::Assembly::Load(assemblyName);
        }
        catch(System::Exception* ex) {
            if(!(throwOnError)) 
            {
                return nullptr;
            }
            throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format2(_T("Couldn\'t find assembly \'{0}\'"), assemblyName), ex);
        }
        t = assembly->GetType_99cbfcc4e094eb08(className);
        if(System::Type::op_Inequality2(t, nullptr)) 
        {
            return t;
        }
        if(!(throwOnError)) 
        {
            return nullptr;
        }
        throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format3(_T("Couldn\'t find type \'{0}\' in assembly \'{1}\'"), className, assemblyName));
    }
    
    System::Type* ObjectReader::ReadType(System::IO::BinaryReader* reader, TypeTag code) {
        return ReadType2(reader, code, true);
    }
    
    System::Type* ObjectReader::ReadType2(System::IO::BinaryReader* reader, TypeTag code, bool throwOnError) {
        switch(code) {
            case TypeTag::PrimitiveType: case_1470: {
                return BinaryCommon::GetTypeFromCode((int32_t)(reader->ReadByte_a8e935915607659b()));
            }
            case TypeTag::String2: case_1471: {
                return cli::typeof<System::Type>::info;
            }
            case TypeTag::ObjectType: case_1472: {
                return cli::typeof<System::Type>::info;
            }
            case TypeTag::RuntimeType: case_1473: {
                {
                    System::String *name = reader->ReadString_7b59e815ae441879();
                    if(((int32_t)(this->_context->get_State()) ==  16)) 
                    {
                        if(System::String::op_Equality(name, _T("System.RuntimeType"))) 
                        {
                            return cli::typeof<System::Type>::info;
                        }
                         else 
                        {
                            if(System::String::op_Equality(name, _T("System.RuntimeType[]"))) 
                            {
                                return cli::typeof<System::Type>::info;
                            }
                        }
                    }
                    System::Type *t = System::Type::GetType4(name);
                    if(System::Type::op_Inequality2(t, nullptr)) 
                    {
                        return t;
                    }
                    throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format2(_T("Could not find type \'{0}\'."), name));
                }
            }
            case TypeTag::GenericType: case_1474: {
                {
                    System::String *name = reader->ReadString_7b59e815ae441879();
                    int64_t asmid = (int64_t)(reader->ReadUInt32_3acc4b6c3fc21142());
                    return GetDeserializationType2(asmid, name, throwOnError);
                }
            }
            case TypeTag::ArrayOfObject: case_1475: {
                return cli::typeof<System::Type>::info;
            }
            case TypeTag::ArrayOfString: case_1476: {
                return cli::typeof<System::Type>::info;
            }
            case TypeTag::ArrayOfPrimitiveType: case_1477: {
                System::Type *elementType = BinaryCommon::GetTypeFromCode((int32_t)(reader->ReadByte_a8e935915607659b()));
                return System::Type::GetType4(cli::concat(elementType->get_FullName_7e8fa72ba225e1a4(), _T("[]")));
            }
            default: case_1478: {
                throw cli::gcnew<System::NotSupportedException>(_T("Unknow type tag"));
            }
        }
    }
    
    System::Object* ObjectReader::ReadPrimitiveTypeValue(System::IO::BinaryReader* reader, System::Type* type) {
        if(System::Type::op_Equality2(type, nullptr)) 
        {
            return nullptr;
        }
        switch(System::Type::GetTypeCode(type)) {
            case System::TypeCode::Boolean2: case_1479: {
                return cli::box(reader->ReadBoolean_ffac632a26c093b3());
            }
            case System::TypeCode::Byte2: case_1480: {
                return cli::box(reader->ReadByte_a8e935915607659b());
            }
            case System::TypeCode::Char2: case_1481: {
                return cli::box(reader->ReadChar_d9df7e93c29686d());
            }
            case System::TypeCode::DateTime2: case_1482: {
                return cli::box(System::DateTime::FromBinary(reader->ReadInt64_324b86c0d5995c31()));
            }
            case System::TypeCode::Decimal2: case_1483: {
                return cli::box(System::Decimal::Parse3(reader->ReadString_7b59e815ae441879(), System::Globalization::CultureInfo::get_InvariantCulture()));
            }
            case System::TypeCode::Double2: case_1484: {
                return cli::box(reader->ReadDouble_c4cf5262e4ca9658());
            }
            case System::TypeCode::Int162: case_1485: {
                return cli::box(reader->ReadInt16_cc677a86798a4911());
            }
            case System::TypeCode::Int322: case_1486: {
                return cli::box(reader->ReadInt32_e79bbed3af40f25f());
            }
            case System::TypeCode::Int642: case_1487: {
                return cli::box(reader->ReadInt64_324b86c0d5995c31());
            }
            case System::TypeCode::SByte2: case_1488: {
                return cli::box(reader->ReadSByte_de4608c911742c46());
            }
            case System::TypeCode::Single2: case_1489: {
                return cli::box(reader->ReadSingle_4a83108898ca41d7());
            }
            case System::TypeCode::UInt162: case_1490: {
                return cli::box(reader->ReadUInt16_12c320b7592221bf());
            }
            case System::TypeCode::UInt322: case_1491: {
                return cli::box(reader->ReadUInt32_3acc4b6c3fc21142());
            }
            case System::TypeCode::UInt642: case_1492: {
                return cli::box(reader->ReadUInt64_af37b8afdb6259c1());
            }
            case System::TypeCode::String2: case_1493: {
                return reader->ReadString_7b59e815ae441879();
            }
            default: case_1494: {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    return cli::box(cli::ctor<System::TimeSpan>(reader->ReadInt64_324b86c0d5995c31()));
                }
                 else 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Unsupported primitive type: "), type->get_FullName_7e8fa72ba225e1a4()));
                }
            }
        }
    }
    
    System::Object* ObjectReader::get_CurrentObject() {
        return this->_lastObject;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void TypeMetadata2::constructor() {
    }
    
    bool TypeMetadata2::IsCompatible_638da850e8ece74b(TypeMetadata2* other) {
        return true;
    }
    
    void TypeMetadata2::BindToName(System::String* assemblyName, System::String* typeName) {
        if((assemblyName != nullptr)) 
        {
            this->TypeAssemblyName = assemblyName;
        }
        if((typeName != nullptr)) 
        {
            this->InstanceTypeName = typeName;
        }
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void ClrTypeMetadata::constructor(System::Type* instanceType) {
        this->InstanceType = instanceType;
        this->InstanceTypeName = instanceType->get_FullName_7e8fa72ba225e1a4();
        this->TypeAssemblyName = instanceType->get_Assembly_3aae0acbf2a6d696()->get_FullName_abd52da7f47cce07();
    }
    
    bool ClrTypeMetadata::get_RequiresTypes_a63dc7473dcf7e12() {
        return false;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void SerializableTypeMetadata::constructor(System::Type* itype, System::Runtime::Serialization::SerializationInfo* info) {
        this->types = (new cli::array<System::Type*>(info->get_MemberCount()));
        this->names = (new cli::array<System::String*>(info->get_MemberCount()));
        System::Runtime::Serialization::SerializationInfoEnumerator *e = info->GetEnumerator();
        int32_t n = 0;
        while(e->MoveNext()) {
            this->types->at(n) = e->get_ObjectType();
            this->names->at(n) = e->get_Name();
            n++;
        }
        this->TypeAssemblyName = info->get_AssemblyName();
        this->InstanceTypeName = info->get_FullTypeName();
    }
    
    bool SerializableTypeMetadata::IsCompatible_638da850e8ece74b(TypeMetadata2* other) {
        if(!(cli::is<SerializableTypeMetadata>(other))) 
        {
            return false;
        }
        SerializableTypeMetadata *tm = cli::cast<SerializableTypeMetadata*>(other);
        if((this->types->get_Length() != tm->types->get_Length())) 
        {
            return false;
        }
        if(System::String::op_Inequality(this->TypeAssemblyName, tm->TypeAssemblyName)) 
        {
            return false;
        }
        if(System::String::op_Inequality(this->InstanceTypeName, tm->InstanceTypeName)) 
        {
            return false;
        }
        for(int32_t n = 0; (n < this->types->get_Length()); n++){
            if(System::Type::op_Inequality2(this->types->at(n), tm->types->at(n))) 
            {
                return false;
            }
            if(System::String::op_Inequality(this->names->at(n), tm->names->at(n))) 
            {
                return false;
            }
        }
        return true;
    }
    
    void SerializableTypeMetadata::WriteAssemblies_7d8a46adaa61eb93(ObjectWriter* ow, System::IO::BinaryWriter* writer) {
        for(auto tmp_437 : this->types) {
            auto mtype = cli::cast<System::Type*>(tmp_437);
            {
                System::Type *type = mtype;
                while(type->get_IsArray()) type = type->GetElementType_ab5070dbbfe66f5f();
                ow->WriteAssembly(writer, type->get_Assembly_3aae0acbf2a6d696());
            }
        }
    }
    
    void SerializableTypeMetadata::WriteTypeData_db79b0ed1d8b4a01(ObjectWriter* ow, System::IO::BinaryWriter* writer, bool writeTypes) {
        writer->Write_6382fee822de735b(this->types->get_Length());
        for(auto tmp_438 : this->names) {
            auto name = cli::cast<System::String*>(tmp_438);
            writer->Write_6de303e680f3eff5(name);
        }
        for(auto tmp_439 : this->types) {
            auto type = cli::cast<System::Type*>(tmp_439);
            ObjectWriter::WriteTypeCode(writer, type);
        }
        for(auto tmp_440 : this->types) {
            auto type = cli::cast<System::Type*>(tmp_440);
            ow->WriteTypeSpec(writer, type);
        }
    }
    
    void SerializableTypeMetadata::WriteObjectData_10db42bcb37f8b90(ObjectWriter* ow, System::IO::BinaryWriter* writer, System::Object* data) {
        System::Runtime::Serialization::SerializationInfo *info = cli::cast<System::Runtime::Serialization::SerializationInfo*>(data);
        System::Runtime::Serialization::SerializationInfoEnumerator *e = info->GetEnumerator();
        while(e->MoveNext()) ow->WriteValue(writer, e->get_ObjectType(), e->get_Value());
    }
    
    bool SerializableTypeMetadata::get_RequiresTypes_a63dc7473dcf7e12() {
        return true;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void MemberTypeMetadata::constructor(System::Type* type, System::Runtime::Serialization::StreamingContext context) {
        this->members = System::Runtime::Serialization::FormatterServices::GetSerializableMembers2(type, context);
    }
    
    void MemberTypeMetadata::WriteAssemblies_7d8a46adaa61eb93(ObjectWriter* ow, System::IO::BinaryWriter* writer) {
        for(auto tmp_441 : this->members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_441);
            {
                System::Type *type = field->get_FieldType_1dab4079098d7fff();
                while(type->get_IsArray()) type = type->GetElementType_ab5070dbbfe66f5f();
                ow->WriteAssembly(writer, type->get_Assembly_3aae0acbf2a6d696());
            }
        }
    }
    
    void MemberTypeMetadata::WriteTypeData_db79b0ed1d8b4a01(ObjectWriter* ow, System::IO::BinaryWriter* writer, bool writeTypes) {
        writer->Write_6382fee822de735b(this->members->get_Length());
        for(auto tmp_442 : this->members) {
            auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_442);
            writer->Write_6de303e680f3eff5(field->get_Name_50fad5fa936c3ae2());
        }
        if(writeTypes) 
        {
            for(auto tmp_443 : this->members) {
                auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_443);
                ObjectWriter::WriteTypeCode(writer, field->get_FieldType_1dab4079098d7fff());
            }
            for(auto tmp_444 : this->members) {
                auto field = cli::cast<System::Reflection::FieldInfo*>(tmp_444);
                ow->WriteTypeSpec(writer, field->get_FieldType_1dab4079098d7fff());
            }
        }
    }
    
    void MemberTypeMetadata::WriteObjectData_10db42bcb37f8b90(ObjectWriter* ow, System::IO::BinaryWriter* writer, System::Object* data) {
        cli::array<System::Object*> *values = System::Runtime::Serialization::FormatterServices::GetObjectData(data, this->members);
        for(int32_t n = 0; (n < values->get_Length()); n++) {
            ow->WriteValue(writer, cli::cast<System::Reflection::FieldInfo*>(this->members->at(n))->get_FieldType_1dab4079098d7fff(), values->at(n));
        }
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    
    void MetadataReference::constructor(TypeMetadata2* metadata, int64_t id) {
        this->Metadata = metadata;
        this->ObjectID = id;
    }
    
}}}}}
namespace System { namespace Runtime { namespace Serialization { namespace Formatters { namespace Binary {
    
    System::Collections::Hashtable*  ObjectWriter::_cachedTypes;
    System::Reflection::Assembly*  ObjectWriter::CorlibAssembly;
    System::String*  ObjectWriter::CorlibAssemblyName;
    
    ObjectWriter::ObjectWriter()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void ObjectWriter::constructor(BinaryFormatter* formatter) {
        this->_surrogateSelector = formatter->get_SurrogateSelector();
        this->_context = formatter->get_Context();
        this->_assemblyFormat = formatter->get_AssemblyFormat();
        this->_typeFormat = formatter->get_TypeFormat();
        this->_manager = cli::gcnew<System::Runtime::Serialization::SerializationObjectManager>(formatter->get_Context());
        this->_binder = formatter->get_Binder();
    }
    
    void ObjectWriter::static_constructor() {
    }
    
    void ObjectWriter::WriteObjectGraph(System::IO::BinaryWriter* writer, System::Object* obj, cli::array<System::Runtime::Remoting::Messaging::Header*>* headers) {
        this->_pendingObjects->Clear_861e11dd27e6c911();
        if((headers != nullptr)) 
        {
            QueueObject(headers);
        }
        QueueObject(obj);
        WriteQueuedObjects(writer);
        WriteSerializationEnd(writer);
        this->_manager->RaiseOnSerializedEvent();
    }
    
    void ObjectWriter::QueueObject(System::Object* obj) {
        this->_pendingObjects->Enqueue_7ab7b5c658b77bbe(obj);
    }
    
    void ObjectWriter::WriteQueuedObjects(System::IO::BinaryWriter* writer) {
        while((this->_pendingObjects->get_Count_d68471db5ed73aae() > 0)) WriteObjectInstance(writer, this->_pendingObjects->Dequeue_65b33648b3aa820f(), false);
    }
    
    void ObjectWriter::WriteObjectInstance(System::IO::BinaryWriter* writer, System::Object* obj, bool isValueObject) {
        bool firstTime;
        int64_t id;
        if(isValueObject) 
        {
            id = this->_idGenerator->get_NextId();
        }
         else 
        {
            id = this->_idGenerator->GetId_7b41c26f34516460(obj, firstTime);
        }
        if(cli::is<System::String>(obj)) 
        {
            WriteString(writer, id, cli::cast<System::String*>(obj));
        }
         else 
        {
            if(cli::is<System::Array>(obj)) 
            {
                WriteArray(writer, id, cli::cast<System::Array*>(obj));
            }
             else 
            {
                WriteObject(writer, id, obj);
            }
        }
    }
    
    void ObjectWriter::WriteSerializationEnd(System::IO::BinaryWriter* writer) {
        writer->Write_bc6e6f6f19ff3ad3(11);
    }
    
    void ObjectWriter::WriteObject(System::IO::BinaryWriter* writer, int64_t id, System::Object* obj) {
        System::Object *data;
        TypeMetadata2 *metadata;
        GetObjectData(obj, metadata, data);
        MetadataReference *metadataReference = cli::cast<MetadataReference*>(this->_cachedMetadata->get_Item_d75c6e706b965758(metadata->InstanceTypeName));
        if(((metadataReference != nullptr) && metadata->IsCompatible_638da850e8ece74b(metadataReference->Metadata))) 
        {
            writer->Write_bc6e6f6f19ff3ad3(1);
            writer->Write_6382fee822de735b((int32_t)id);
            writer->Write_6382fee822de735b((int32_t)metadataReference->ObjectID);
            metadata->WriteObjectData_10db42bcb37f8b90(this, writer, data);
            return;
        }
        if((metadataReference ==  nullptr)) 
        {
            metadataReference = cli::gcnew<MetadataReference>(metadata, id);
            this->_cachedMetadata->set_Item_84c7e24d9caa09(metadata->InstanceTypeName, metadataReference);
        }
        bool writeTypes = (metadata->get_RequiresTypes_a63dc7473dcf7e12() || ((int32_t)(this->_typeFormat) ==  1));
        BinaryElement objectTag;
        int32_t assemblyId;
        if(System::String::op_Equality(metadata->TypeAssemblyName, CorlibAssemblyName)) 
        {
            objectTag = writeTypes ? BinaryElement::RuntimeObject : BinaryElement::UntypedRuntimeObject;
            assemblyId = -1;
        }
         else 
        {
            objectTag = writeTypes ? BinaryElement::ExternalObject : BinaryElement::UntypedExternalObject;
            assemblyId = WriteAssemblyName(writer, metadata->TypeAssemblyName);
        }
        metadata->WriteAssemblies_7d8a46adaa61eb93(this, writer);
        writer->Write_bc6e6f6f19ff3ad3((unsigned char)(objectTag));
        writer->Write_6382fee822de735b((int32_t)id);
        writer->Write_6de303e680f3eff5(metadata->InstanceTypeName);
        metadata->WriteTypeData_db79b0ed1d8b4a01(this, writer, writeTypes);
        if((assemblyId != -1)) 
        {
            writer->Write_6382fee822de735b(assemblyId);
        }
        metadata->WriteObjectData_10db42bcb37f8b90(this, writer, data);
    }
    
    void ObjectWriter::GetObjectData(System::Object* obj, TypeMetadata2* metadata, System::Object* data) {
        System::Type *instanceType = obj->GetType();
        System::String *binderAssemblyName = nullptr;
        System::String *binderTypeName = nullptr;
        if((this->_binder != nullptr)) 
        {
            this->_binder->BindToName_4f5e7ffbf04d37a1(instanceType, binderAssemblyName, binderTypeName);
        }
        if((this->_surrogateSelector != nullptr)) 
        {
            System::Runtime::Serialization::ISurrogateSelector *selector;
            System::Runtime::Serialization::ISerializationSurrogate *surrogate = this->_surrogateSelector->GetSurrogate_9d3ffd4061f81ca8(instanceType, this->_context, selector);
            if((surrogate != nullptr)) 
            {
                System::Runtime::Serialization::SerializationInfo *info = cli::gcnew<System::Runtime::Serialization::SerializationInfo>(instanceType, cli::gcnew<System::Runtime::Serialization::FormatterConverter>());
                surrogate->GetObjectData_fb9d539912329654(obj, info, this->_context);
                metadata = cli::gcnew<SerializableTypeMetadata>(instanceType, info);
                if((this->_binder != nullptr)) 
                {
                    metadata->BindToName(binderAssemblyName, binderTypeName);
                }
                data = info;
                return;
            }
        }
        BinaryCommon::CheckSerializable(instanceType, this->_surrogateSelector, this->_context);
        this->_manager->RegisterObject(obj);
        System::Runtime::Serialization::ISerializable *ser = cli::as<System::Runtime::Serialization::ISerializable*>(obj);
        if((ser != nullptr)) 
        {
            System::Runtime::Serialization::SerializationInfo *info = cli::gcnew<System::Runtime::Serialization::SerializationInfo>(instanceType, cli::gcnew<System::Runtime::Serialization::FormatterConverter>());
            ser->GetObjectData_11b895a112e04409(info, this->_context);
            metadata = cli::gcnew<SerializableTypeMetadata>(instanceType, info);
            if((this->_binder != nullptr)) 
            {
                metadata->BindToName(binderAssemblyName, binderTypeName);
            }
            data = info;
        }
         else 
        {
            data = obj;
            if((this->_context->get_Context() != nullptr)) 
            {
                metadata = cli::gcnew<MemberTypeMetadata>(instanceType, this->_context);
                if((this->_binder != nullptr)) 
                {
                    metadata->BindToName(binderAssemblyName, binderTypeName);
                }
                return;
            }
            System::Collections::Hashtable *typesTable;
            bool isNew = false;
            {
                cli::lock_guard{_cachedTypes};
                typesTable = cli::cast<System::Collections::Hashtable*>(_cachedTypes->get_Item_d75c6e706b965758(cli::box(this->_context->get_State())));
                if((typesTable ==  nullptr)) 
                {
                    typesTable = cli::gcnew<System::Collections::Hashtable>();
                    _cachedTypes->set_Item_84c7e24d9caa09(cli::box(this->_context->get_State()), typesTable);
                    isNew = true;
                }
            }
            metadata = nullptr;
            {
                cli::lock_guard{typesTable};
                if(!(isNew)) 
                {
                    metadata = cli::cast<TypeMetadata2*>(typesTable->get_Item_d75c6e706b965758(instanceType));
                }
                if((metadata ==  nullptr)) 
                {
                    metadata = CreateMemberTypeMetadata(instanceType);
                    if((this->_binder != nullptr)) 
                    {
                        metadata->BindToName(binderAssemblyName, binderTypeName);
                    }
                }
                typesTable->set_Item_84c7e24d9caa09(instanceType, metadata);
            }
        }
    }
    
    TypeMetadata2* ObjectWriter::CreateMemberTypeMetadata(System::Type* type) {
        if(!(BinaryCommon::UseReflectionSerialization)) 
        {
            System::Type *metaType = CodeGenerator::GenerateMetadataType(type, this->_context);
            return cli::cast<TypeMetadata2*>(System::Activator::CreateInstance8(metaType));
        }
         else 
        {
            return cli::gcnew<MemberTypeMetadata>(type, this->_context);
        }
    }
    
    void ObjectWriter::WriteArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array) {
        System::Type *elementType = array->GetType()->GetElementType_ab5070dbbfe66f5f();
        if((System::Type::op_Equality2(elementType, cli::typeof<System::Type>::info) && (array->get_Rank() ==  1))) 
        {
            WriteObjectArray(writer, id, array);
        }
         else 
        {
            if((System::Type::op_Equality2(elementType, cli::typeof<System::Type>::info) && (array->get_Rank() ==  1))) 
            {
                WriteStringArray(writer, id, array);
            }
             else 
            {
                if((BinaryCommon::IsPrimitive(elementType) && (array->get_Rank() ==  1))) 
                {
                    WritePrimitiveTypeArray(writer, id, array);
                }
                 else 
                {
                    WriteGenericArray(writer, id, array);
                }
            }
        }
    }
    
    void ObjectWriter::WriteGenericArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array) {
        System::Type *elementType = array->GetType()->GetElementType_ab5070dbbfe66f5f();
        if(!(elementType->get_IsArray())) 
        {
            WriteAssembly(writer, elementType->get_Assembly_3aae0acbf2a6d696());
        }
        writer->Write_bc6e6f6f19ff3ad3(7);
        writer->Write_6382fee822de735b((int32_t)id);
        if(elementType->get_IsArray()) 
        {
            writer->Write_bc6e6f6f19ff3ad3(1);
        }
         else 
        {
            if((array->get_Rank() ==  1)) 
            {
                writer->Write_bc6e6f6f19ff3ad3(0);
            }
             else 
            {
                writer->Write_bc6e6f6f19ff3ad3(2);
            }
        }
        writer->Write_6382fee822de735b(array->get_Rank());
        for(int32_t n = 0; (n < array->get_Rank()); n++) {
            writer->Write_6382fee822de735b((array->GetUpperBound(n) + 1));
        }
        WriteTypeCode(writer, elementType);
        WriteTypeSpec(writer, elementType);
        if(((array->get_Rank() ==  1) && !(elementType->get_IsValueType()))) 
        {
            WriteSingleDimensionArrayElements(writer, array, elementType);
        }
         else 
        {
            for(auto tmp_445 : array) {
                auto item = cli::cast<System::Object*>(tmp_445);
                WriteValue(writer, elementType, item);
            }
        }
    }
    
    void ObjectWriter::WriteObjectArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array) {
        writer->Write_bc6e6f6f19ff3ad3(16);
        writer->Write_6382fee822de735b((int32_t)id);
        writer->Write_6382fee822de735b(array->get_Length());
        WriteSingleDimensionArrayElements(writer, array, cli::typeof<System::Type>::info);
    }
    
    void ObjectWriter::WriteStringArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array) {
        writer->Write_bc6e6f6f19ff3ad3(17);
        writer->Write_6382fee822de735b((int32_t)id);
        writer->Write_6382fee822de735b(array->get_Length());
        WriteSingleDimensionArrayElements(writer, array, cli::typeof<System::Type>::info);
    }
    
    void ObjectWriter::WritePrimitiveTypeArray(System::IO::BinaryWriter* writer, int64_t id, System::Array* array) {
        writer->Write_bc6e6f6f19ff3ad3(15);
        writer->Write_6382fee822de735b((int32_t)id);
        writer->Write_6382fee822de735b(array->get_Length());
        System::Type *elementType = array->GetType()->GetElementType_ab5070dbbfe66f5f();
        WriteTypeSpec(writer, elementType);
        switch(System::Type::GetTypeCode(elementType)) {
            case System::TypeCode::Boolean2: case_1495: {
                for(auto tmp_446 : cli::cast<cli::array<bool>*>(array)) {
                    auto item = cli::cast<bool>(tmp_446);
                    writer->Write_664daa13c7b699d4(item);
                }
                break;
            }
            case System::TypeCode::Byte2: case_1496: {
                writer->Write_748d33f0d08b528e(cli::cast<cli::array<unsigned char>*>(array));
                break;
            }
            case System::TypeCode::Char2: case_1497: {
                writer->Write_a7ab51ccd6658347(cli::cast<cli::array<char16_t>*>(array));
                break;
            }
            case System::TypeCode::DateTime2: case_1498: {
                for(auto tmp_447 : cli::cast<cli::array<System::DateTime>*>(array)) {
                    auto item = cli::cast<System::DateTime>(tmp_447);
                    writer->Write_f3b14072d1fca470(item->ToBinary());
                }
                break;
            }
            case System::TypeCode::Decimal2: case_1499: {
                for(auto tmp_448 : cli::cast<cli::array<System::Decimal>*>(array)) {
                    auto item = cli::cast<System::Decimal>(tmp_448);
                    writer->Write_8ba35d7f9fe8fd4b(item);
                }
                break;
            }
            case System::TypeCode::Double2: case_1500: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 8);
                }
                 else 
                {
                    for(auto tmp_449 : cli::cast<cli::array<double>*>(array)) {
                        auto item = cli::cast<double>(tmp_449);
                        writer->Write_f38f5e7709f76e33(item);
                    }
                }
                break;
            }
            case System::TypeCode::Int162: case_1501: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 2);
                }
                 else 
                {
                    for(auto tmp_450 : cli::cast<cli::array<int16_t>*>(array)) {
                        auto item = cli::cast<int16_t>(tmp_450);
                        writer->Write_263157ba3ce9bc51(item);
                    }
                }
                break;
            }
            case System::TypeCode::Int322: case_1502: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 4);
                }
                 else 
                {
                    for(auto tmp_451 : cli::cast<cli::array<int32_t>*>(array)) {
                        auto item = cli::cast<int32_t>(tmp_451);
                        writer->Write_6382fee822de735b(item);
                    }
                }
                break;
            }
            case System::TypeCode::Int642: case_1503: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 8);
                }
                 else 
                {
                    for(auto tmp_452 : cli::cast<cli::array<int64_t>*>(array)) {
                        auto item = cli::cast<int64_t>(tmp_452);
                        writer->Write_f3b14072d1fca470(item);
                    }
                }
                break;
            }
            case System::TypeCode::SByte2: case_1504: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 1);
                }
                 else 
                {
                    for(auto tmp_453 : cli::cast<cli::array<signed char>*>(array)) {
                        auto item = cli::cast<signed char>(tmp_453);
                        writer->Write_9eb51dc30d6ae1a5(item);
                    }
                }
                break;
            }
            case System::TypeCode::Single2: case_1505: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 4);
                }
                 else 
                {
                    for(auto tmp_454 : cli::cast<cli::array<float>*>(array)) {
                        auto item = cli::cast<float>(tmp_454);
                        writer->Write_6581fbda559dbe80(item);
                    }
                }
                break;
            }
            case System::TypeCode::UInt162: case_1506: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 2);
                }
                 else 
                {
                    for(auto tmp_455 : cli::cast<cli::array<uint16_t>*>(array)) {
                        auto item = cli::cast<uint16_t>(tmp_455);
                        writer->Write_7065176233f87453(item);
                    }
                }
                break;
            }
            case System::TypeCode::UInt322: case_1507: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 4);
                }
                 else 
                {
                    for(auto tmp_456 : cli::cast<cli::array<uint32_t>*>(array)) {
                        auto item = cli::cast<uint32_t>(tmp_456);
                        writer->Write_805c393976ef76e5(item);
                    }
                }
                break;
            }
            case System::TypeCode::UInt642: case_1508: {
                if((array->get_Length() > 2)) 
                {
                    BlockWrite(writer, array, 8);
                }
                 else 
                {
                    for(auto tmp_457 : cli::cast<cli::array<uint64_t>*>(array)) {
                        auto item = cli::cast<uint64_t>(tmp_457);
                        writer->Write_694a3defde87112b(item);
                    }
                }
                break;
            }
            case System::TypeCode::String2: case_1509: {
                for(auto tmp_458 : cli::cast<cli::array<System::String*>*>(array)) {
                    auto item = cli::cast<System::String*>(tmp_458);
                    writer->Write_6de303e680f3eff5(item);
                }
                break;
            }
            default: case_1510: {
                if(System::Type::op_Equality2(elementType, cli::typeof<System::Type>::info)) 
                {
                    for(auto tmp_459 : cli::cast<cli::array<System::TimeSpan>*>(array)) {
                        auto item = cli::cast<System::TimeSpan>(tmp_459);
                        writer->Write_f3b14072d1fca470(item->get_Ticks());
                    }
                }
                 else 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Unsupported primitive type: "), elementType->get_FullName_7e8fa72ba225e1a4()));
                }
                break;
            }
        }
    }
    
    void ObjectWriter::BlockWrite(System::IO::BinaryWriter* writer, System::Array* array, int32_t dataSize) {
        int32_t totalSize = System::Buffer::ByteLength(array);
        if(((this->arrayBuffer ==  nullptr) || ((totalSize > this->arrayBuffer->get_Length()) && (this->arrayBuffer->get_Length() != this->ArrayBufferLength)))) 
        {
            this->arrayBuffer = (new cli::array<unsigned char>((totalSize <= this->ArrayBufferLength) ? totalSize : this->ArrayBufferLength));
        }
        int32_t pos = 0;
        while((totalSize > 0)) {
            int32_t size = (totalSize < this->arrayBuffer->get_Length()) ? totalSize : this->arrayBuffer->get_Length();
            System::Buffer::BlockCopy(array, pos, this->arrayBuffer, 0, size);
            if((!(System::BitConverter::IsLittleEndian) && (dataSize > 1))) 
            {
                BinaryCommon::SwapBytes(this->arrayBuffer, size, dataSize);
            }
            writer->Write_67008f3e2ece1dc3(this->arrayBuffer, 0, size);
            (totalSize = totalSize - size);
            (pos = pos + size);
        }
    }
    
    void ObjectWriter::WriteSingleDimensionArrayElements(System::IO::BinaryWriter* writer, System::Array* array, System::Type* elementType) {
        int32_t numNulls = 0;
        for(auto tmp_460 : array) {
            auto val = cli::cast<System::Object*>(tmp_460);
            {
                if(((val != nullptr) && (numNulls > 0))) 
                {
                    WriteNullFiller(writer, numNulls);
                    WriteValue(writer, elementType, val);
                    numNulls = 0;
                }
                 else 
                {
                    if((val ==  nullptr)) 
                    {
                        numNulls++;
                    }
                     else 
                    {
                        WriteValue(writer, elementType, val);
                    }
                }
            }
        }
        if((numNulls > 0)) 
        {
            WriteNullFiller(writer, numNulls);
        }
    }
    
    void ObjectWriter::WriteNullFiller(System::IO::BinaryWriter* writer, int32_t numNulls) {
        if((numNulls ==  1)) 
        {
            writer->Write_bc6e6f6f19ff3ad3(10);
        }
         else 
        {
            if((numNulls ==  2)) 
            {
                writer->Write_bc6e6f6f19ff3ad3(10);
                writer->Write_bc6e6f6f19ff3ad3(10);
            }
             else 
            {
                if((numNulls <= 255)) 
                {
                    writer->Write_bc6e6f6f19ff3ad3(13);
                    writer->Write_bc6e6f6f19ff3ad3((unsigned char)numNulls);
                }
                 else 
                {
                    writer->Write_bc6e6f6f19ff3ad3(14);
                    writer->Write_6382fee822de735b(numNulls);
                }
            }
        }
    }
    
    void ObjectWriter::WriteObjectReference(System::IO::BinaryWriter* writer, int64_t id) {
        writer->Write_bc6e6f6f19ff3ad3(9);
        writer->Write_6382fee822de735b((int32_t)id);
    }
    
    void ObjectWriter::WriteValue(System::IO::BinaryWriter* writer, System::Type* valueType, System::Object* val) {
        if((val ==  nullptr)) 
        {
            BinaryCommon::CheckSerializable(valueType, this->_surrogateSelector, this->_context);
            writer->Write_bc6e6f6f19ff3ad3(10);
        }
         else 
        {
            if(BinaryCommon::IsPrimitive(val->GetType())) 
            {
                if(!(BinaryCommon::IsPrimitive(valueType))) 
                {
                    writer->Write_bc6e6f6f19ff3ad3(8);
                    WriteTypeSpec(writer, val->GetType());
                }
                WritePrimitiveValue(writer, val);
            }
             else 
            {
                if(valueType->get_IsValueType()) 
                {
                    WriteObjectInstance(writer, val, true);
                }
                 else 
                {
                    if(cli::is<System::String>(val)) 
                    {
                        bool firstTime;
                        int64_t id = this->_idGenerator->GetId_7b41c26f34516460(val, firstTime);
                        if(firstTime) 
                        {
                            WriteObjectInstance(writer, val, false);
                        }
                         else 
                        {
                            WriteObjectReference(writer, id);
                        }
                    }
                     else 
                    {
                        bool firstTime;
                        int64_t id = this->_idGenerator->GetId_7b41c26f34516460(val, firstTime);
                        if(firstTime) 
                        {
                            this->_pendingObjects->Enqueue_7ab7b5c658b77bbe(val);
                        }
                        WriteObjectReference(writer, id);
                    }
                }
            }
        }
    }
    
    void ObjectWriter::WriteString(System::IO::BinaryWriter* writer, int64_t id, System::String* str) {
        writer->Write_bc6e6f6f19ff3ad3(6);
        writer->Write_6382fee822de735b((int32_t)id);
        writer->Write_6de303e680f3eff5(str);
    }
    
    int32_t ObjectWriter::WriteAssembly(System::IO::BinaryWriter* writer, System::Reflection::Assembly* assembly) {
        return WriteAssemblyName(writer, assembly->get_FullName_abd52da7f47cce07());
    }
    
    int32_t ObjectWriter::WriteAssemblyName(System::IO::BinaryWriter* writer, System::String* assembly) {
        if(System::String::op_Equality(assembly, CorlibAssemblyName)) 
        {
            return -1;
        }
        bool firstTime;
        int32_t id = RegisterAssembly(assembly, firstTime);
        if(!(firstTime)) 
        {
            return id;
        }
        writer->Write_bc6e6f6f19ff3ad3(12);
        writer->Write_6382fee822de735b(id);
        if(((int32_t)(this->_assemblyFormat) ==  1)) 
        {
            writer->Write_6de303e680f3eff5(assembly);
        }
         else 
        {
            int32_t i = assembly->IndexOf4(u',');
            if((i != -1)) 
            {
                assembly = assembly->Substring2(0, i);
            }
            writer->Write_6de303e680f3eff5(assembly);
        }
        return id;
    }
    
    int32_t ObjectWriter::GetAssemblyId(System::Reflection::Assembly* assembly) {
        return GetAssemblyNameId(assembly->get_FullName_abd52da7f47cce07());
    }
    
    int32_t ObjectWriter::GetAssemblyNameId(System::String* assembly) {
        return cli::unbox<int32_t>(this->_assemblyCache->get_Item_d75c6e706b965758(assembly));
    }
    
    int32_t ObjectWriter::RegisterAssembly(System::String* assembly, bool firstTime) {
        if(this->_assemblyCache->ContainsKey_5de2e202a0290d76(assembly)) 
        {
            firstTime = false;
            return cli::unbox<int32_t>(this->_assemblyCache->get_Item_d75c6e706b965758(assembly));
        }
         else 
        {
            int32_t id = (int32_t)this->_idGenerator->GetId_7b41c26f34516460(cli::box(0), firstTime);
            this->_assemblyCache->Add_3f7ab157bcb41156(assembly, cli::box(id));
            return id;
        }
    }
    
    void ObjectWriter::WritePrimitiveValue(System::IO::BinaryWriter* writer, System::Object* value) {
        System::Type *type = value->GetType();
        switch(System::Type::GetTypeCode(type)) {
            case System::TypeCode::Boolean2: case_1511: {
                writer->Write_664daa13c7b699d4(cli::unbox<bool>(value));
                break;
            }
            case System::TypeCode::Byte2: case_1512: {
                writer->Write_bc6e6f6f19ff3ad3(cli::unbox<unsigned char>(value));
                break;
            }
            case System::TypeCode::Char2: case_1513: {
                writer->Write_8d30dac55ff57ff8(cli::unbox<char16_t>(value));
                break;
            }
            case System::TypeCode::DateTime2: case_1514: {
                writer->Write_f3b14072d1fca470(cli::unbox<System::DateTime>(value)->ToBinary());
                break;
            }
            case System::TypeCode::Decimal2: case_1515: {
                writer->Write_6de303e680f3eff5(cli::unbox<System::Decimal>(value)->ToString5(System::Globalization::CultureInfo::get_InvariantCulture()));
                break;
            }
            case System::TypeCode::Double2: case_1516: {
                writer->Write_f38f5e7709f76e33(cli::unbox<double>(value));
                break;
            }
            case System::TypeCode::Int162: case_1517: {
                writer->Write_263157ba3ce9bc51(cli::unbox<int16_t>(value));
                break;
            }
            case System::TypeCode::Int322: case_1518: {
                writer->Write_6382fee822de735b(cli::unbox<int32_t>(value));
                break;
            }
            case System::TypeCode::Int642: case_1519: {
                writer->Write_f3b14072d1fca470(cli::unbox<int64_t>(value));
                break;
            }
            case System::TypeCode::SByte2: case_1520: {
                writer->Write_9eb51dc30d6ae1a5(cli::unbox<signed char>(value));
                break;
            }
            case System::TypeCode::Single2: case_1521: {
                writer->Write_6581fbda559dbe80(cli::unbox<float>(value));
                break;
            }
            case System::TypeCode::UInt162: case_1522: {
                writer->Write_7065176233f87453(cli::unbox<uint16_t>(value));
                break;
            }
            case System::TypeCode::UInt322: case_1523: {
                writer->Write_805c393976ef76e5(cli::unbox<uint32_t>(value));
                break;
            }
            case System::TypeCode::UInt642: case_1524: {
                writer->Write_694a3defde87112b(cli::unbox<uint64_t>(value));
                break;
            }
            case System::TypeCode::String2: case_1525: {
                writer->Write_6de303e680f3eff5(cli::cast<System::String*>(value));
                break;
            }
            default: case_1526: {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    writer->Write_f3b14072d1fca470(cli::unbox<System::TimeSpan>(value)->get_Ticks());
                }
                 else 
                {
                    throw cli::gcnew<System::NotSupportedException>(cli::concat(_T("Unsupported primitive type: "), value->GetType()->get_FullName_7e8fa72ba225e1a4()));
                }
                break;
            }
        }
    }
    
    void ObjectWriter::WriteTypeCode(System::IO::BinaryWriter* writer, System::Type* type) {
        writer->Write_bc6e6f6f19ff3ad3((unsigned char)(GetTypeTag(type)));
    }
    
    TypeTag ObjectWriter::GetTypeTag(System::Type* type) {
        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
        {
            return TypeTag::String2;
        }
         else 
        {
            if(BinaryCommon::IsPrimitive(type)) 
            {
                return TypeTag::PrimitiveType;
            }
             else 
            {
                if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                {
                    return TypeTag::ObjectType;
                }
                 else 
                {
                    if(((type->get_IsArray() && (type->GetArrayRank_fccf91da5e4acf4f() ==  1)) && System::Type::op_Equality2(type->GetElementType_ab5070dbbfe66f5f(), cli::typeof<System::Type>::info))) 
                    {
                        return TypeTag::ArrayOfObject;
                    }
                     else 
                    {
                        if(((type->get_IsArray() && (type->GetArrayRank_fccf91da5e4acf4f() ==  1)) && System::Type::op_Equality2(type->GetElementType_ab5070dbbfe66f5f(), cli::typeof<System::Type>::info))) 
                        {
                            return TypeTag::ArrayOfString;
                        }
                         else 
                        {
                            if(((type->get_IsArray() && (type->GetArrayRank_fccf91da5e4acf4f() ==  1)) && BinaryCommon::IsPrimitive(type->GetElementType_ab5070dbbfe66f5f()))) 
                            {
                                return TypeTag::ArrayOfPrimitiveType;
                            }
                             else 
                            {
                                if(System::Reflection::Assembly::op_Equality(type->get_Assembly_3aae0acbf2a6d696(), CorlibAssembly)) 
                                {
                                    return TypeTag::RuntimeType;
                                }
                                 else 
                                {
                                    return TypeTag::GenericType;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    void ObjectWriter::WriteTypeSpec(System::IO::BinaryWriter* writer, System::Type* type) {
        switch(GetTypeTag(type)) {
            case TypeTag::PrimitiveType: case_1527: {
                writer->Write_bc6e6f6f19ff3ad3(BinaryCommon::GetTypeCode(type));
                break;
            }
            case TypeTag::RuntimeType: case_1528: {
                System::String *fullName = type->get_FullName_7e8fa72ba225e1a4();
                if(((int32_t)(this->_context->get_State()) ==  16)) 
                {
                    if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                    {
                        fullName = _T("System.RuntimeType");
                    }
                     else 
                    {
                        if(System::Type::op_Equality2(type, cli::typeof<System::Type>::info)) 
                        {
                            fullName = _T("System.RuntimeType[]");
                        }
                    }
                }
                writer->Write_6de303e680f3eff5(fullName);
                break;
            }
            case TypeTag::GenericType: case_1529: {
                writer->Write_6de303e680f3eff5(type->get_FullName_7e8fa72ba225e1a4());
                writer->Write_6382fee822de735b((int32_t)(GetAssemblyId(type->get_Assembly_3aae0acbf2a6d696())));
                break;
            }
            case TypeTag::ArrayOfPrimitiveType: case_1530: {
                writer->Write_bc6e6f6f19ff3ad3(BinaryCommon::GetTypeCode(type->GetElementType_ab5070dbbfe66f5f()));
                break;
            }
            default: case_1531: {
                break;
            }
        }
    }
    
}}}}}
namespace System { namespace Runtime { namespace Versioning {
    
    
    void ComponentGuaranteesAttribute::constructor(ComponentGuaranteesOptions guarantees) {
        this->guarantees = guarantees;
    }
    
    ComponentGuaranteesOptions ComponentGuaranteesAttribute::get_Guarantees() {
        return this->guarantees;
    }
    
}}}
namespace System { namespace Runtime { namespace Versioning {
    
    
    void ResourceConsumptionAttribute::constructor(ResourceScope resourceScope) {
        this->resource = resourceScope;
        this->consumption = resourceScope;
    }
    
    void ResourceConsumptionAttribute::constructor(ResourceScope resourceScope, ResourceScope consumptionScope) {
        this->resource = resourceScope;
        this->consumption = consumptionScope;
    }
    
    ResourceScope ResourceConsumptionAttribute::get_ConsumptionScope() {
        return this->consumption;
    }
    
    ResourceScope ResourceConsumptionAttribute::get_ResourceScope() {
        return this->resource;
    }
    
}}}
namespace System { namespace Runtime { namespace Versioning {
    
    
    void ResourceExposureAttribute::constructor(ResourceScope exposureLevel) {
        this->exposure = exposureLevel;
    }
    
    ResourceScope ResourceExposureAttribute::get_ResourceExposureLevel() {
        return this->exposure;
    }
    
}}}
namespace System { namespace Runtime { namespace Versioning {
    
    
    void TargetFrameworkAttribute::constructor(System::String* frameworkName) {
        if((frameworkName ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("frameworkName"));
        }
        this->set_FrameworkName(frameworkName);
    }
    
    System::String* TargetFrameworkAttribute::get_FrameworkName() {
        return this->_FrameworkName_k__BackingField;
    }
    
    System::String* TargetFrameworkAttribute::set_FrameworkName(System::String* value) {
        this->_FrameworkName_k__BackingField = value;
        return get_FrameworkName();
    }
    
    System::String* TargetFrameworkAttribute::get_FrameworkDisplayName() {
        return this->_FrameworkDisplayName_k__BackingField;
    }
    
    System::String* TargetFrameworkAttribute::set_FrameworkDisplayName(System::String* value) {
        this->_FrameworkDisplayName_k__BackingField = value;
        return get_FrameworkDisplayName();
    }
    
}}}
namespace System { namespace Runtime { namespace Versioning {
    
    
    int32_t VersioningHelper::GetDomainId() {
        return System::AppDomain::get_CurrentDomain()->get_Id();
    }
    
    int32_t VersioningHelper::GetProcessId() {
        return 0;
    }
    
    System::String* VersioningHelper::SafeName(System::String* name, bool process, bool appdomain) {
        if((process && appdomain)) 
        {
            return System::String::Concat9((new cli::array<System::String*>({name, _T("_"), cli::import(GetProcessId())->ToString_1636a0751cb9ac11(), _T("_"), cli::import(GetDomainId())->ToString_1636a0751cb9ac11()})));
        }
         else 
        {
            if(process) 
            {
                return System::String::Concat6(name, _T("_"), cli::import(GetProcessId())->ToString_1636a0751cb9ac11());
            }
             else 
            {
                if(appdomain) 
                {
                    return System::String::Concat6(name, _T("_"), cli::import(GetDomainId())->ToString_1636a0751cb9ac11());
                }
            }
        }
        return name;
    }
    
    System::String* VersioningHelper::ConvertFromMachine(System::String* name, ResourceScope to, System::Type* type) {
        switch(to) {
            case ResourceScope::Machine: case_1532: {
                return SafeName(name, false, false);
            }
            case ResourceScope::Process: case_1533: {
                return SafeName(name, true, false);
            }
            case ResourceScope::AppDomain2: case_1534: {
                return SafeName(name, true, true);
            }
            default: case_1535: {
                throw cli::gcnew<System::ArgumentException>(_T("to"));
            }
        }
    }
    
    System::String* VersioningHelper::ConvertFromProcess(System::String* name, ResourceScope to, System::Type* type) {
        if((((int32_t)(to) < 2) || ((int32_t)(to) >= 16))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("to"));
        }
        bool ad = ((int32_t)(((int32_t)(to) & 4)) ==  4);
        return SafeName(name, false, ad);
    }
    
    System::String* VersioningHelper::ConvertFromAppDomain(System::String* name, ResourceScope to, System::Type* type) {
        if((((int32_t)(to) < 4) || ((int32_t)(to) >= 16))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("to"));
        }
        return SafeName(name, false, false);
    }
    
    System::String* VersioningHelper::MakeVersionSafeName(System::String* name, ResourceScope from, ResourceScope to) {
        return MakeVersionSafeName2(name, from, to, nullptr);
    }
    
    System::String* VersioningHelper::MakeVersionSafeName2(System::String* name, ResourceScope from, ResourceScope to, System::Type* type) {
        if(((int32_t)(((int32_t)(from) & 16)) != 0)) 
        {
            (to = (ResourceScope)(((int32_t)(to) & -49)));
        }
         else 
        {
            if(((int32_t)(((int32_t)(from) & 32)) != 0)) 
            {
                (to = (ResourceScope)(((int32_t)(to) & -33)));
            }
        }
        System::String *result = (name ==  nullptr) ? System::String::Empty : name;
        switch(from) {
            case ResourceScope::Machine: case (ResourceScope)17L: case (ResourceScope)33L: case_1536: {
                return ConvertFromMachine(result, to, type);
            }
            case ResourceScope::Process: case (ResourceScope)18L: case (ResourceScope)34L: case_1537: {
                return ConvertFromProcess(result, to, type);
            }
            case ResourceScope::AppDomain2: case (ResourceScope)20L: case (ResourceScope)36L: case_1538: {
                return ConvertFromAppDomain(result, to, type);
            }
            default: case_1539: {
                throw cli::gcnew<System::ArgumentException>(_T("from"));
            }
        }
    }
    
}}}
namespace System { namespace Security {
    
    
    void AllowPartiallyTrustedCallersAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void CodeAccessPermission::constructor() {
    }
    
    void CodeAccessPermission::Assert() {
        cli::gcnew<PermissionSet>(this)->Assert();
    }
    
    bool CodeAccessPermission::CheckAssert(CodeAccessPermission* asserted) {
        if((asserted ==  nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Inequality2(asserted->GetType(), this->GetType())) 
        {
            return false;
        }
        return IsSubsetOf_76947f8575c4d81(asserted);
    }
    
    bool CodeAccessPermission::CheckDemand(CodeAccessPermission* target) {
        if((target ==  nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Inequality2(target->GetType(), this->GetType())) 
        {
            return false;
        }
        return IsSubsetOf_76947f8575c4d81(target);
    }
    
    bool CodeAccessPermission::CheckDeny(CodeAccessPermission* denied) {
        if((denied ==  nullptr)) 
        {
            return true;
        }
        System::Type *t = denied->GetType();
        if(System::Type::op_Inequality2(t, this->GetType())) 
        {
            return true;
        }
        IPermission *inter = Intersect_7dbf5aef702b16af(denied);
        if((inter ==  nullptr)) 
        {
            return true;
        }
        return denied->IsSubsetOf_76947f8575c4d81(PermissionBuilder::Create4(t));
    }
    
    bool CodeAccessPermission::CheckPermitOnly(CodeAccessPermission* target) {
        if((target ==  nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Inequality2(target->GetType(), this->GetType())) 
        {
            return false;
        }
        return IsSubsetOf_76947f8575c4d81(target);
    }
    
    void CodeAccessPermission::Demand() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        cli::gcnew<PermissionSet>(this)->CasOnlyDemand(3);
    }
    
    void CodeAccessPermission::Deny() {
        cli::gcnew<PermissionSet>(this)->Deny();
    }
    
    bool CodeAccessPermission::Equals_ed975d2f4a7d193e(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            return false;
        }
        if(System::Type::op_Inequality2(obj->GetType(), this->GetType())) 
        {
            return false;
        }
        CodeAccessPermission *cap = cli::as<CodeAccessPermission*>(obj);
        return (IsSubsetOf_76947f8575c4d81(cap) && cap->IsSubsetOf_76947f8575c4d81(this));
    }
    
    int32_t CodeAccessPermission::GetHashCode_6648aef0f235ee6c() {
        return System::Object::GetHashCode_6648aef0f235ee6c();
    }
    
    System::String* CodeAccessPermission::ToString_1636a0751cb9ac11() {
        SecurityElement *elem = ToXml_9ee4cd8af8e8f747();
        return elem->ToString_1636a0751cb9ac11();
    }
    
    IPermission* CodeAccessPermission::Union_b0ddcab6cb9c8441(IPermission* other) {
        if((other != nullptr)) 
        {
            throw cli::gcnew<System::NotSupportedException>();
        }
        return nullptr;
    }
    
    void CodeAccessPermission::PermitOnly() {
        cli::gcnew<PermissionSet>(this)->PermitOnly();
    }
    
    void CodeAccessPermission::RevertAll() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        SecurityFrame sf = cli::ctor<SecurityFrame>(1);
        bool revert = false;
        if(((sf->get_Assert() != nullptr) && !(sf->get_Assert()->get_DeclarativeSecurity()))) 
        {
            revert = true;
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Assert are supported."));
        }
        if(((sf->get_Deny() != nullptr) && !(sf->get_Deny()->get_DeclarativeSecurity()))) 
        {
            revert = true;
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Deny are supported."));
        }
        if(((sf->get_PermitOnly() != nullptr) && !(sf->get_PermitOnly()->get_DeclarativeSecurity()))) 
        {
            revert = true;
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative PermitOnly are supported."));
        }
        if(!(revert)) 
        {
            System::String *msg = Locale::GetText(_T("No stack modifiers are present on the current stack frame."));
            (msg = cli::concat(msg, System::Environment::get_NewLine()));
            throw cli::gcnew<System::ExecutionEngineException>(msg);
        }
    }
    
    void CodeAccessPermission::RevertAssert() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        SecurityFrame sf = cli::ctor<SecurityFrame>(1);
        if(((sf->get_Assert() != nullptr) && !(sf->get_Assert()->get_DeclarativeSecurity()))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Assert are supported."));
        }
         else 
        {
            ThrowExecutionEngineException(Permissions::SecurityAction::Assert);
        }
    }
    
    void CodeAccessPermission::RevertDeny() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        SecurityFrame sf = cli::ctor<SecurityFrame>(1);
        if(((sf->get_Deny() != nullptr) && !(sf->get_Deny()->get_DeclarativeSecurity()))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Deny are supported."));
        }
         else 
        {
            ThrowExecutionEngineException(Permissions::SecurityAction::Deny);
        }
    }
    
    void CodeAccessPermission::RevertPermitOnly() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        SecurityFrame sf = cli::ctor<SecurityFrame>(1);
        if(((sf->get_PermitOnly() != nullptr) && sf->get_PermitOnly()->get_DeclarativeSecurity())) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative PermitOnly are supported."));
        }
         else 
        {
            ThrowExecutionEngineException(Permissions::SecurityAction::PermitOnly);
        }
    }
    
    SecurityElement* CodeAccessPermission::Element2(int32_t version) {
        SecurityElement *se = cli::gcnew<SecurityElement>(_T("IPermission"));
        System::Type *type = this->GetType();
        se->AddAttribute(_T("class"), cli::concat(type->get_FullName_7e8fa72ba225e1a4(), _T(", ")));
        se->AddAttribute(_T("version"), cli::import(version)->ToString_1636a0751cb9ac11());
        return se;
    }
    
    Permissions::PermissionState CodeAccessPermission::CheckPermissionState(Permissions::PermissionState state, bool allowUnrestricted) {
        System::String *msg;
        switch(state) {
            case Permissions::PermissionState::None: case_1540: {
                break;
            }
            case Permissions::PermissionState::Unrestricted: case_1541: {
                break;
            }
            default: case_1542: {
                msg = System::String::Format2(Locale::GetText(_T("Invalid enum {0}")), cli::box(state));
                throw cli::gcnew<System::ArgumentException>(msg, _T("state"));
            }
        }
        return state;
    }
    
    int32_t CodeAccessPermission::CheckSecurityElement(SecurityElement* se, System::String* parameterName, int32_t minimumVersion, int32_t maximumVersion) {
        if((se ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(parameterName);
        }
        if(System::String::op_Inequality(se->get_Tag(), _T("IPermission"))) 
        {
            System::String *msg = System::String::Format2(Locale::GetText(_T("Invalid tag {0}")), se->get_Tag());
            throw cli::gcnew<System::ArgumentException>(msg, parameterName);
        }
        int32_t version = minimumVersion;
        System::String *v = se->Attribute2(_T("version"));
        if((v != nullptr)) 
        {
            try {
                version = System::Int32::Parse5(v);
            }
            catch(System::Exception* e) {
                System::String *msg = Locale::GetText(_T("Couldn\'t parse version from \'{0}\'."));
                msg = System::String::Format2(msg, v);
                throw cli::gcnew<System::ArgumentException>(msg, parameterName, e);
            }
        }
        if(((version < minimumVersion) || (version > maximumVersion))) 
        {
            System::String *msg = Locale::GetText(_T("Unknown version \'{0}\', expected versions between [\'{1}\',\'{2}\']."));
            msg = System::String::Format4(msg, cli::box(version), cli::box(minimumVersion), cli::box(maximumVersion));
            throw cli::gcnew<System::ArgumentException>(msg, parameterName);
        }
        return version;
    }
    
    bool CodeAccessPermission::IsUnrestricted(SecurityElement* se) {
        System::String *value = se->Attribute2(_T("Unrestricted"));
        if((value ==  nullptr)) 
        {
            return false;
        }
        return (System::String::Compare3(value, System::Boolean::TrueString, true, System::Globalization::CultureInfo::get_InvariantCulture()) ==  0);
    }
    
    bool CodeAccessPermission::ProcessFrame(SecurityFrame frame) {
        if((frame->get_PermitOnly() != nullptr)) 
        {
            bool permit = frame->get_PermitOnly()->IsUnrestricted();
            if(!(permit)) 
            {
                for(auto tmp_461 : frame->get_PermitOnly()) {
                    auto p = cli::cast<IPermission*>(tmp_461);
                    {
                        if(CheckPermitOnly(cli::as<CodeAccessPermission*>(p))) 
                        {
                            permit = true;
                            break;
                        }
                    }
                }
            }
            if(!(permit)) 
            {
                ThrowSecurityException(this, _T("PermitOnly"), frame, Permissions::SecurityAction::Demand, nullptr);
            }
        }
        if((frame->get_Deny() != nullptr)) 
        {
            if(frame->get_Deny()->IsUnrestricted()) 
            {
                ThrowSecurityException(this, _T("Deny"), frame, Permissions::SecurityAction::Demand, nullptr);
            }
            for(auto tmp_462 : frame->get_Deny()) {
                auto p = cli::cast<IPermission*>(tmp_462);
                {
                    if(!(CheckDeny(cli::as<CodeAccessPermission*>(p)))) 
                    {
                        ThrowSecurityException(this, _T("Deny"), frame, Permissions::SecurityAction::Demand, p);
                    }
                }
            }
        }
        if((frame->get_Assert() != nullptr)) 
        {
            if(frame->get_Assert()->IsUnrestricted()) 
            {
                return true;
            }
            for(auto tmp_463 : frame->get_Assert()) {
                auto p = cli::cast<IPermission*>(tmp_463);
                {
                    if(CheckAssert(cli::as<CodeAccessPermission*>(p))) 
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    void CodeAccessPermission::ThrowInvalidPermission(IPermission* target, System::Type* expected) {
        System::String *msg = Locale::GetText(_T("Invalid permission type \'{0}\', expected type \'{1}\'."));
        msg = System::String::Format3(msg, target->GetType(), expected);
        throw cli::gcnew<System::ArgumentException>(msg, _T("target"));
    }
    
    void CodeAccessPermission::ThrowExecutionEngineException(Permissions::SecurityAction stackmod) {
        System::String *msg = Locale::GetText(_T("No {0} modifier is present on the current stack frame."));
        (msg = cli::concat(msg, System::Environment::get_NewLine()));
        throw cli::gcnew<System::ExecutionEngineException>(System::String::Format2(msg, cli::box(stackmod)));
    }
    
    void CodeAccessPermission::ThrowSecurityException(System::Object* demanded, System::String* message, SecurityFrame frame, Permissions::SecurityAction action, IPermission* failed) {
        System::Reflection::Assembly *a = frame->get_Assembly();
        throw cli::gcnew<SecurityException>(Locale::GetText(message), a->UnprotectedGetName_b11b135b2412c023(), a->get_GrantedPermissionSet(), a->get_DeniedPermissionSet(), frame->get_Method(), action, demanded, failed, a->UnprotectedGetEvidence());
    }
    
}}
namespace System { namespace Security {
    
    
    void HostProtectionException::constructor() {
    }
    
    void HostProtectionException::constructor(System::String* message) {
    }
    
    void HostProtectionException::constructor(System::String* message, System::Exception* e) {
    }
    
    void HostProtectionException::constructor(System::String* message, Permissions::HostProtectionResource protectedResources, Permissions::HostProtectionResource demandedResources) {
        this->_protected = protectedResources;
        this->_demanded = demandedResources;
    }
    
    void HostProtectionException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::Exception::GetObjectData_bc9b88d7eb43b6d8(info, context);
    }
    
    void HostProtectionException::GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        if((info ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("info"));
        }
    }
    
    System::String* HostProtectionException::ToString_1636a0751cb9ac11() {
        return System::SystemException::ToString_1636a0751cb9ac11();
    }
    
    Permissions::HostProtectionResource HostProtectionException::get_DemandedResources() {
        return this->_demanded;
    }
    
    Permissions::HostProtectionResource HostProtectionException::get_ProtectedResources() {
        return this->_protected;
    }
    
}}
namespace System { namespace Security {
    
    
    void HostSecurityManager::constructor() {
    }
    
    Policy::ApplicationTrust* HostSecurityManager::DetermineApplicationTrust_9c3480c5892df261(Policy::Evidence* applicationEvidence, Policy::Evidence* activatorEvidence, Policy::TrustManagerContext* context) {
        if((applicationEvidence ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("applicationEvidence"));
        }
        System::Runtime::Hosting::ActivationArguments *aa = nullptr;
        for(auto tmp_464 : applicationEvidence) {
            auto o = cli::cast<System::Object*>(tmp_464);
            {
                aa = cli::as<System::Runtime::Hosting::ActivationArguments*>(o);
                if((aa != nullptr)) 
                {
                    break;
                }
            }
        }
        if((aa ==  nullptr)) 
        {
            System::String *msg = Locale::GetText(_T("No {0} found in {1}."));
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(msg, _T("ActivationArguments"), _T("Evidence")), _T("applicationEvidence"));
        }
        if((aa->get_ActivationContext() ==  nullptr)) 
        {
            System::String *msg = Locale::GetText(_T("No {0} found in {1}."));
            throw cli::gcnew<System::ArgumentException>(System::String::Format3(msg, _T("ActivationContext"), _T("ActivationArguments")), _T("applicationEvidence"));
        }
        if(Policy::ApplicationSecurityManager::DetermineApplicationTrust(aa->get_ActivationContext(), context)) 
        {
            if((aa->get_ApplicationIdentity() ==  nullptr)) 
            {
                return cli::gcnew<Policy::ApplicationTrust>();
            }
             else 
            {
                return cli::gcnew<Policy::ApplicationTrust>(aa->get_ApplicationIdentity());
            }
        }
        return nullptr;
    }
    
    Policy::Evidence* HostSecurityManager::ProvideAppDomainEvidence_f440e6aa53aa6cff(Policy::Evidence* inputEvidence) {
        return inputEvidence;
    }
    
    Policy::Evidence* HostSecurityManager::ProvideAssemblyEvidence_152b6b2161b9f01c(System::Reflection::Assembly* loadedAssembly, Policy::Evidence* inputEvidence) {
        return inputEvidence;
    }
    
    PermissionSet* HostSecurityManager::ResolvePolicy_3412fa76aada1919(Policy::Evidence* evidence) {
        if((evidence ==  nullptr)) 
        {
            throw cli::gcnew<System::NullReferenceException>(_T("evidence"));
        }
        return SecurityManager::ResolvePolicy(evidence);
    }
    
    Policy::PolicyLevel* HostSecurityManager::get_DomainPolicy_4232e39de784c0b3() {
        return nullptr;
    }
    
    HostSecurityManagerOptions HostSecurityManager::get_Flags_b631cff0eaaa13d7() {
        return HostSecurityManagerOptions::AllFlags;
    }
    
}}
namespace System { namespace Security {
    
    
    void NamedPermissionSet::constructor() {
    }
    
    void NamedPermissionSet::constructor(System::String* name, PermissionSet* permSet) {
        this->set_Name(name);
    }
    
    void NamedPermissionSet::constructor(System::String* name, Permissions::PermissionState state) {
        this->set_Name(name);
    }
    
    void NamedPermissionSet::constructor(NamedPermissionSet* permSet) {
        this->name = permSet->name;
        this->description = permSet->description;
    }
    
    void NamedPermissionSet::constructor(System::String* name) {
    }
    
    PermissionSet* NamedPermissionSet::Copy_cfeae72b3c523c4e() {
        return cli::gcnew<NamedPermissionSet>(this);
    }
    
    NamedPermissionSet* NamedPermissionSet::Copy3(System::String* name) {
        NamedPermissionSet *nps = cli::gcnew<NamedPermissionSet>(this);
        nps->set_Name(name);
        return nps;
    }
    
    void NamedPermissionSet::FromXml_2ac858dba9ca352b(SecurityElement* et) {
        PermissionSet::FromXml_2ac858dba9ca352b(et);
        this->name = et->Attribute2(_T("Name"));
        this->description = et->Attribute2(_T("Description"));
        if((this->description ==  nullptr)) 
        {
            this->description = System::String::Empty;
        }
    }
    
    SecurityElement* NamedPermissionSet::ToXml_c2a66662101c88c3() {
        SecurityElement *se = PermissionSet::ToXml_c2a66662101c88c3();
        if((this->name != nullptr)) 
        {
            se->AddAttribute(_T("Name"), this->name);
        }
        if((this->description != nullptr)) 
        {
            se->AddAttribute(_T("Description"), this->description);
        }
        return se;
    }
    
    bool NamedPermissionSet::Equals_ed975d2f4a7d193e(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            return false;
        }
        NamedPermissionSet *nps = cli::as<NamedPermissionSet*>(obj);
        if((nps ==  nullptr)) 
        {
            return false;
        }
        return (System::String::op_Equality(this->name, nps->get_Name()) && PermissionSet::Equals_ed975d2f4a7d193e(obj));
    }
    
    int32_t NamedPermissionSet::GetHashCode_6648aef0f235ee6c() {
        int32_t hc = PermissionSet::GetHashCode_6648aef0f235ee6c();
        if((this->name != nullptr)) 
        {
            (hc = hc ^ this->name->GetHashCode_6648aef0f235ee6c());
        }
        return hc;
    }
    
    System::String* NamedPermissionSet::get_Description() {
        return this->description;
    }
    
    System::String* NamedPermissionSet::set_Description(System::String* value) {
        this->description = value;
        return get_Description();
    }
    
    System::String* NamedPermissionSet::get_Name() {
        return this->name;
    }
    
    System::String* NamedPermissionSet::set_Name(System::String* value) {
        if(((value ==  nullptr) || System::String::op_Equality(value, System::String::Empty))) 
        {
            throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("invalid name")));
        }
        this->name = value;
        return get_Name();
    }
    
}}
namespace System { namespace Security {
    
    cli::array<System::Object*>*  PermissionBuilder::psNone;
    
    PermissionBuilder::PermissionBuilder()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void PermissionBuilder::static_constructor() {
    }
    
    IPermission* PermissionBuilder::Create(System::String* fullname, Permissions::PermissionState state) {
        if((fullname ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fullname"));
        }
        SecurityElement *se = cli::gcnew<SecurityElement>(_T("IPermission"));
        se->AddAttribute(_T("class"), fullname);
        se->AddAttribute(_T("version"), _T("1"));
        if(((int32_t)(state) ==  1)) 
        {
            se->AddAttribute(_T("Unrestricted"), _T("true"));
        }
        return CreatePermission(fullname, se);
    }
    
    IPermission* PermissionBuilder::Create2(SecurityElement* se) {
        if((se ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("se"));
        }
        System::String *className = se->Attribute2(_T("class"));
        if(((className ==  nullptr) || (className->get_Length() ==  0))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("class"));
        }
        return CreatePermission(className, se);
    }
    
    IPermission* PermissionBuilder::Create3(System::String* fullname, SecurityElement* se) {
        if((fullname ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("fullname"));
        }
        if((se ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("se"));
        }
        return CreatePermission(fullname, se);
    }
    
    IPermission* PermissionBuilder::Create4(System::Type* type) {
        return cli::cast<IPermission*>(System::Activator::CreateInstance9(type, psNone));
    }
    
    IPermission* PermissionBuilder::CreatePermission(System::String* fullname, SecurityElement* se) {
        System::Type *classType = System::Type::GetType4(fullname);
        if(System::Type::op_Equality2(classType, nullptr)) 
        {
            System::String *msg = Locale::GetText(_T("Can\'t create an instance of permission class {0}."));
            throw cli::gcnew<System::TypeLoadException>(System::String::Format2(msg, fullname));
        }
        IPermission *p = Create4(classType);
        p->FromXml_1053a148f0375461(se);
        return p;
    }
    
}}
namespace System { namespace Security {
    
    cli::array<System::Object*>*  PermissionSet::psUnrestricted;
    cli::array<System::Object*>*  PermissionSet::action;
    
    PermissionSet::PermissionSet()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void PermissionSet::constructor() {
        this->list = cli::gcnew<System::Collections::ArrayList>();
    }
    
    void PermissionSet::constructor(Permissions::PermissionState state) {
        this->state = CodeAccessPermission::CheckPermissionState(state, true);
    }
    
    void PermissionSet::constructor(PermissionSet* permSet) {
        if((permSet != nullptr)) 
        {
            this->state = permSet->state;
            for(auto tmp_465 : permSet->list) {
                auto p = cli::cast<IPermission*>(tmp_465);
                this->list->Add_e6a92085999ce388(p);
            }
        }
    }
    
    void PermissionSet::constructor(System::String* xml) {
        this->state = Permissions::PermissionState::None;
        if((xml != nullptr)) 
        {
            SecurityElement *se = SecurityElement::FromString(xml);
            FromXml_2ac858dba9ca352b(se);
        }
    }
    
    void PermissionSet::constructor(IPermission* perm) {
        if((perm != nullptr)) 
        {
            this->list->Add_e6a92085999ce388(perm);
        }
    }
    
    void PermissionSet::static_constructor() {
    }
    
    IPermission* PermissionSet::AddPermission(IPermission* perm) {
        if(((perm ==  nullptr) || this->_readOnly)) 
        {
            return perm;
        }
        if(((int32_t)(this->state) ==  1)) 
        {
            {
                return cli::cast<IPermission*>(System::Activator::CreateInstance9(perm->GetType(), psUnrestricted));
            }
        }
        IPermission *existing = RemovePermission(perm->GetType());
        if((existing != nullptr)) 
        {
            perm = perm->Union_ecfa27115d58cb44(existing);
        }
        this->list->Add_e6a92085999ce388(perm);
        return perm;
    }
    
    void PermissionSet::Assert() {
        int32_t count = this->get_Count_db378507423fcdb();
        for(auto tmp_466 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_466);
            {
                if(cli::is<IStackWalk>(p)) 
                {
                    if(!(SecurityManager::IsGranted(p))) 
                    {
                        return;
                    }
                }
                 else 
                {
                    count--;
                }
            }
        }
        if((SecurityManager::get_SecurityEnabled() && (count > 0))) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Assert are supported."));
        }
    }
    
    void PermissionSet::Clear() {
        this->list->Clear_cd6654e5a40f5056();
    }
    
    PermissionSet* PermissionSet::Copy_cfeae72b3c523c4e() {
        return cli::gcnew<PermissionSet>(this);
    }
    
    void PermissionSet::CopyTo_732d1dab1e90fd5a(System::Array* array, int32_t index) {
        if((array ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("array"));
        }
        if((this->list->get_Count_2354963792616712() > 0)) 
        {
            if((array->get_Rank() > 1)) 
            {
                throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Array has more than one dimension")));
            }
            if(((index < 0) || (index >= array->get_Length()))) 
            {
                throw cli::gcnew<System::IndexOutOfRangeException>(_T("index"));
            }
            this->list->CopyTo_2bc540dad3c25b9e(array, index);
        }
    }
    
    void PermissionSet::Demand() {
        if(IsEmpty()) 
        {
            return;
        }
        int32_t n = this->list->get_Count_2354963792616712();
        if(((this->_ignored ==  nullptr) || (this->_ignored->get_Length() != n))) 
        {
            this->_ignored = (new cli::array<bool>(n));
        }
        bool call_cas_only = this->IsUnrestricted();
        for(int32_t i = 0; (i < n); i++){
            IPermission *p = cli::cast<IPermission*>(this->list->get_Item_fd0155f142ae570(i));
            System::Type *t = p->GetType();
            if(t->IsSubclassOf_5d7dbe0215a30fda(cli::typeof<System::Type>::info)) 
            {
                this->_ignored->at(i) = false;
                call_cas_only = true;
            }
             else 
            {
                this->_ignored->at(i) = true;
                p->Demand_6a8bc305f8dfa903();
            }
        }
        if((call_cas_only && SecurityManager::get_SecurityEnabled())) 
        {
            CasOnlyDemand(this->_declsec ? 5 : 3);
        }
    }
    
    void PermissionSet::CasOnlyDemand(int32_t skip) {
        System::Reflection::Assembly *current = nullptr;
        System::AppDomain *domain = nullptr;
        if((this->_ignored ==  nullptr)) 
        {
            this->_ignored = (new cli::array<bool>(this->list->get_Count_2354963792616712()));
        }
        System::Collections::ArrayList *frames = SecurityFrame::GetStack(skip);
        if(((frames != nullptr) && (frames->get_Count_2354963792616712() > 0))) 
        {
            SecurityFrame first = cli::unbox<SecurityFrame>(frames->get_Item_fd0155f142ae570(0));
            current = first->get_Assembly();
            domain = first->get_Domain();
            for(auto tmp_467 : frames) {
                auto sf = cli::cast<SecurityFrame>(tmp_467);
                {
                    if(ProcessFrame(sf, current, domain)) 
                    {
                        if(AllIgnored()) 
                        {
                            return;
                        }
                    }
                }
            }
            SecurityFrame last = cli::unbox<SecurityFrame>(frames->get_Item_fd0155f142ae570((frames->get_Count_2354963792616712() - 1)));
            CheckAssembly(current, last);
            CheckAppDomain(domain, last);
        }
        System::Threading::CompressedStack *stack = System::Threading::Thread::get_CurrentThread()->GetCompressedStack();
        if(((stack != nullptr) && !(stack->IsEmpty()))) 
        {
            for(auto tmp_468 : stack->get_List()) {
                auto frame = cli::cast<SecurityFrame>(tmp_468);
                {
                    if(ProcessFrame(frame, current, domain)) 
                    {
                        if(AllIgnored()) 
                        {
                            return;
                        }
                    }
                }
            }
        }
    }
    
    void PermissionSet::Deny() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        for(auto tmp_469 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_469);
            {
                if(cli::is<IStackWalk>(p)) 
                {
                    throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Deny are supported."));
                }
            }
        }
    }
    
    void PermissionSet::FromXml_2ac858dba9ca352b(SecurityElement* et) {
        if((et ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("et"));
        }
        if(System::String::op_Inequality(et->get_Tag(), _T("PermissionSet"))) 
        {
            System::String *msg = System::String::Format3(_T("Invalid tag {0} expected {1}"), et->get_Tag(), _T("PermissionSet"));
            throw cli::gcnew<System::ArgumentException>(msg, _T("et"));
        }
        this->list->Clear_cd6654e5a40f5056();
        if(CodeAccessPermission::IsUnrestricted(et)) 
        {
            this->state = Permissions::PermissionState::Unrestricted;
            return;
        }
         else 
        {
            this->state = Permissions::PermissionState::None;
        }
        if((et->get_Children() != nullptr)) 
        {
            for(auto tmp_470 : et->get_Children()) {
                auto se = cli::cast<SecurityElement*>(tmp_470);
                {
                    System::String *className = se->Attribute2(_T("class"));
                    if((className ==  nullptr)) 
                    {
                        throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("No permission class is specified.")));
                    }
                    if((this->get_Resolver() != nullptr)) 
                    {
                        className = this->get_Resolver()->ResolveClassName(className);
                    }
                    this->list->Add_e6a92085999ce388(PermissionBuilder::Create3(className, se));
                }
            }
        }
    }
    
    System::Collections::IEnumerator* PermissionSet::GetEnumerator() {
        return this->list->GetEnumerator_84e3ba8f2fdefd62();
    }
    
    bool PermissionSet::IsSubsetOf(PermissionSet* target) {
        if(((target ==  nullptr) || target->IsEmpty())) 
        {
            return this->IsEmpty();
        }
        if(target->IsUnrestricted()) 
        {
            return true;
        }
        if(this->IsUnrestricted()) 
        {
            return false;
        }
        if((this->IsUnrestricted() && ((target ==  nullptr) || !(target->IsUnrestricted())))) 
        {
            return false;
        }
        for(auto tmp_471 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_471);
            {
                System::Type *t = p->GetType();
                IPermission *i = nullptr;
                if(((target->IsUnrestricted() && cli::is<CodeAccessPermission>(p)) && cli::is<Permissions::IUnrestrictedPermission>(p))) 
                {
                    i = cli::cast<IPermission*>(System::Activator::CreateInstance9(t, psUnrestricted));
                }
                 else 
                {
                    i = target->GetPermission(t);
                }
                if(!(p->IsSubsetOf_1923c54e11db177f(i))) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    void PermissionSet::PermitOnly() {
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return;
        }
        for(auto tmp_472 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_472);
            {
                if(cli::is<IStackWalk>(p)) 
                {
                    throw cli::gcnew<System::NotSupportedException>(_T("Currently only declarative Deny are supported."));
                }
            }
        }
    }
    
    bool PermissionSet::ContainsNonCodeAccessPermissions() {
        if((this->list->get_Count_2354963792616712() > 0)) 
        {
            for(auto tmp_473 : this->list) {
                auto p = cli::cast<IPermission*>(tmp_473);
                {
                    if(!(p->GetType()->IsSubclassOf_5d7dbe0215a30fda(cli::typeof<System::Type>::info))) 
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    cli::array<unsigned char>* PermissionSet::ConvertPermissionSet(System::String* inFormat, cli::array<unsigned char>* inData, System::String* outFormat) {
        if((inFormat ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("inFormat"));
        }
        if((outFormat ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("outFormat"));
        }
        if((inData ==  nullptr)) 
        {
            return nullptr;
        }
        if(System::String::op_Equality(inFormat, outFormat)) 
        {
            return inData;
        }
        PermissionSet *ps = nullptr;
        if(System::String::op_Equality(inFormat, _T("BINARY"))) 
        {
            if(outFormat->StartsWith(_T("XML"))) 
            {
                {
                    /* USING - BLOCK */
                    auto ms = cli::gcnew<System::IO::MemoryStream>(inData);
                    cli::using_guard{ms};
                    System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *formatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
                    ps = cli::cast<PermissionSet*>(formatter->Deserialize(ms));
                    ms->Close_59c62ed53ef2a481();
                }
                System::String *xml = ps->ToString_1636a0751cb9ac11();
                System::String* tmp_474 = outFormat;
                ::System::Int32 tmp_475 = -1;
                if(::System::String::Equals3(tmp_474, _T("XML")) ||
                ::System::String::Equals3(tmp_474, _T("XMLASCII"))) tmp_475 = 0;
                if(::System::String::Equals3(tmp_474, _T("XMLUNICODE"))) tmp_475 = 1;
                switch(tmp_475)
                {
                    case 0: case_1543: 
                    {
                        return System::Text::Encoding::get_ASCII()->GetBytes_49806e8e98b1c1db(xml);
                    }
                    case 1: case_1544: 
                    {
                        return System::Text::Encoding::get_Unicode()->GetBytes_49806e8e98b1c1db(xml);
                    }
                }
            }
        }
         else 
        {
            if(inFormat->StartsWith(_T("XML"))) 
            {
                if(System::String::op_Equality(outFormat, _T("BINARY"))) 
                {
                    System::String *xml = nullptr;
                    System::String* tmp_476 = inFormat;
                    ::System::Int32 tmp_477 = -1;
                    if(::System::String::Equals3(tmp_476, _T("XML")) ||
                    ::System::String::Equals3(tmp_476, _T("XMLASCII"))) tmp_477 = 0;
                    if(::System::String::Equals3(tmp_476, _T("XMLUNICODE"))) tmp_477 = 1;
                    switch(tmp_477)
                    {
                        case 0: case_1545: 
                        {
                            xml = System::Text::Encoding::get_ASCII()->GetString_12d22365648431d7(inData);
                            break;
                        }
                        case 1: case_1546: 
                        {
                            xml = System::Text::Encoding::get_Unicode()->GetString_12d22365648431d7(inData);
                            break;
                        }
                    }
                    if((xml != nullptr)) 
                    {
                        ps = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
                        ps->FromXml_2ac858dba9ca352b(SecurityElement::FromString(xml));
                        System::IO::MemoryStream *ms = cli::gcnew<System::IO::MemoryStream>();
                        System::Runtime::Serialization::Formatters::Binary::BinaryFormatter *formatter = cli::gcnew<System::Runtime::Serialization::Formatters::Binary::BinaryFormatter>();
                        formatter->Serialize(ms, ps);
                        ms->Close_59c62ed53ef2a481();
                        return ms->ToArray_ebf8bde16e9d2ad6();
                    }
                }
                 else 
                {
                    if(outFormat->StartsWith(_T("XML"))) 
                    {
                        System::String *msg = System::String::Format3(Locale::GetText(_T("Can\'t convert from {0} to {1}")), inFormat, outFormat);
                        throw cli::gcnew<XmlSyntaxException>(msg);
                    }
                }
            }
             else 
            {
                return nullptr;
            }
        }
        throw cli::gcnew<System::Runtime::Serialization::SerializationException>(System::String::Format2(Locale::GetText(_T("Unknown output format {0}.")), outFormat));
    }
    
    IPermission* PermissionSet::GetPermission(System::Type* permClass) {
        if((System::Type::op_Equality2(permClass, nullptr) || (this->list->get_Count_2354963792616712() ==  0))) 
        {
            return nullptr;
        }
        for(auto tmp_478 : this->list) {
            auto o = cli::cast<System::Object*>(tmp_478);
            {
                if(((o != nullptr) && o->GetType()->Equals_f28141a5881cf9e3(permClass))) 
                {
                    return cli::cast<IPermission*>(o);
                }
            }
        }
        return nullptr;
    }
    
    PermissionSet* PermissionSet::Intersect(PermissionSet* other) {
        if((((other ==  nullptr) || other->IsEmpty()) || this->IsEmpty())) 
        {
            return nullptr;
        }
        Permissions::PermissionState state = Permissions::PermissionState::None;
        if((this->IsUnrestricted() && other->IsUnrestricted())) 
        {
            state = Permissions::PermissionState::Unrestricted;
        }
        PermissionSet *interSet = nullptr;
        if(((int32_t)(state) ==  1)) 
        {
            interSet = cli::gcnew<PermissionSet>(state);
        }
         else 
        {
            if(this->IsUnrestricted()) 
            {
                interSet = other->Copy_cfeae72b3c523c4e();
            }
             else 
            {
                if(other->IsUnrestricted()) 
                {
                    interSet = this->Copy_cfeae72b3c523c4e();
                }
                 else 
                {
                    interSet = cli::gcnew<PermissionSet>(state);
                    InternalIntersect(interSet, this, other, false);
                }
            }
        }
        return interSet;
    }
    
    void PermissionSet::InternalIntersect(PermissionSet* intersect, PermissionSet* a, PermissionSet* b, bool unrestricted) {
        for(auto tmp_479 : b->list) {
            auto p = cli::cast<IPermission*>(tmp_479);
            {
                IPermission *i = a->GetPermission(p->GetType());
                if((i != nullptr)) 
                {
                    intersect->AddPermission(p->Intersect_593562530728a967(i));
                }
                 else 
                {
                    if(unrestricted) 
                    {
                        intersect->AddPermission(p);
                    }
                }
            }
        }
    }
    
    bool PermissionSet::IsEmpty() {
        if(((int32_t)(this->state) ==  1)) 
        {
            return false;
        }
        if(((this->list ==  nullptr) || (this->list->get_Count_2354963792616712() ==  0))) 
        {
            return true;
        }
        for(auto tmp_480 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_480);
            {
                if(!(p->IsSubsetOf_1923c54e11db177f(nullptr))) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    bool PermissionSet::IsUnrestricted() {
        return ((int32_t)(this->state) ==  1);
    }
    
    IPermission* PermissionSet::RemovePermission(System::Type* permClass) {
        if((System::Type::op_Equality2(permClass, nullptr) || this->_readOnly)) 
        {
            return nullptr;
        }
        for(auto tmp_481 : this->list) {
            auto o = cli::cast<System::Object*>(tmp_481);
            {
                if(o->GetType()->Equals_f28141a5881cf9e3(permClass)) 
                {
                    this->list->Remove_2225381aaf812c6d(o);
                    return cli::cast<IPermission*>(o);
                }
            }
        }
        return nullptr;
    }
    
    IPermission* PermissionSet::SetPermission(IPermission* perm) {
        if(((perm ==  nullptr) || this->_readOnly)) 
        {
            return perm;
        }
        Permissions::IUnrestrictedPermission *u = cli::as<Permissions::IUnrestrictedPermission*>(perm);
        if((u ==  nullptr)) 
        {
            this->state = Permissions::PermissionState::None;
        }
         else 
        {
            this->state = u->IsUnrestricted_c7d55a1eabc43262() ? this->state : Permissions::PermissionState::None;
        }
        RemovePermission(perm->GetType());
        this->list->Add_e6a92085999ce388(perm);
        return perm;
    }
    
    System::String* PermissionSet::ToString_1636a0751cb9ac11() {
        return ToXml_c2a66662101c88c3()->ToString_1636a0751cb9ac11();
    }
    
    SecurityElement* PermissionSet::ToXml_c2a66662101c88c3() {
        SecurityElement *se = cli::gcnew<SecurityElement>(_T("PermissionSet"));
        se->AddAttribute(_T("class"), System::Object::GetType()->get_FullName_7e8fa72ba225e1a4());
        se->AddAttribute(_T("version"), cli::import(1)->ToString_1636a0751cb9ac11());
        if(((int32_t)(this->state) ==  1)) 
        {
            se->AddAttribute(_T("Unrestricted"), _T("true"));
        }
        for(auto tmp_482 : this->list) {
            auto p = cli::cast<IPermission*>(tmp_482);
            {
                se->AddChild(p->ToXml_4868e697107d327());
            }
        }
        return se;
    }
    
    PermissionSet* PermissionSet::Union(PermissionSet* other) {
        if((other ==  nullptr)) 
        {
            return this->Copy_cfeae72b3c523c4e();
        }
        PermissionSet *copy = nullptr;
        if((this->IsUnrestricted() || other->IsUnrestricted())) 
        {
            return cli::gcnew<PermissionSet>(Permissions::PermissionState::Unrestricted);
        }
         else 
        {
            copy = this->Copy_cfeae72b3c523c4e();
            for(auto tmp_483 : other->list) {
                auto p = cli::cast<IPermission*>(tmp_483);
                {
                    copy->AddPermission(p);
                }
            }
        }
        return copy;
    }
    
    void PermissionSet::OnDeserialization(System::Object* sender) {
    }
    
    bool PermissionSet::Equals_ed975d2f4a7d193e(System::Object* obj) {
        if((obj ==  nullptr)) 
        {
            return false;
        }
        PermissionSet *ps = cli::as<PermissionSet*>(obj);
        if((ps ==  nullptr)) 
        {
            return false;
        }
        if(((int32_t)(this->state) != (int32_t)(ps->state))) 
        {
            return false;
        }
        if((this->list->get_Count_2354963792616712() != ps->get_Count_db378507423fcdb())) 
        {
            return false;
        }
        for(int32_t i = 0; (i < this->list->get_Count_2354963792616712()); i++){
            bool found = false;
            for(int32_t j = 0; (i < ps->list->get_Count_2354963792616712()); j++){
                if(this->list->get_Item_fd0155f142ae570(i)->Equals_ed975d2f4a7d193e(ps->list->get_Item_fd0155f142ae570(j))) 
                {
                    found = true;
                    break;
                }
            }
            if(!(found)) 
            {
                return false;
            }
        }
        return true;
    }
    
    int32_t PermissionSet::GetHashCode_6648aef0f235ee6c() {
        return (this->list->get_Count_2354963792616712() ==  0) ? (int32_t)(this->state) : System::Object::GetHashCode_6648aef0f235ee6c();
    }
    
    void PermissionSet::RevertAssert() {
        CodeAccessPermission::RevertAssert();
    }
    
    void PermissionSet::SetReadOnly(bool value) {
        this->_readOnly = value;
    }
    
    bool PermissionSet::AllIgnored() {
        if((this->_ignored ==  nullptr)) 
        {
            throw cli::gcnew<System::NotSupportedException>(_T("bad bad bad"));
        }
        for(int32_t i = 0; (i < this->_ignored->get_Length()); i++){
            if(!(this->_ignored->at(i))) 
            {
                return false;
            }
        }
        return true;
    }
    
    bool PermissionSet::ProcessFrame(SecurityFrame frame, System::Reflection::Assembly* current, System::AppDomain* domain) {
        if(IsUnrestricted()) 
        {
            if((frame->get_Deny() != nullptr)) 
            {
                CodeAccessPermission::ThrowSecurityException(this, _T("Deny"), frame, Permissions::SecurityAction::Demand, nullptr);
            }
             else 
            {
                if(((frame->get_PermitOnly() != nullptr) && !(frame->get_PermitOnly()->IsUnrestricted()))) 
                {
                    CodeAccessPermission::ThrowSecurityException(this, _T("PermitOnly"), frame, Permissions::SecurityAction::Demand, nullptr);
                }
            }
        }
        if(frame->get_HasStackModifiers()) 
        {
            for(int32_t i = 0; (i < this->list->get_Count_2354963792616712()); i++){
                CodeAccessPermission *cap = cli::cast<CodeAccessPermission*>(this->list->get_Item_fd0155f142ae570(i));
                if(cap->ProcessFrame(frame)) 
                {
                    this->_ignored->at(i) = true;
                    if(AllIgnored()) 
                    {
                        return true;
                    }
                }
            }
        }
        if(System::Reflection::Assembly::op_Inequality(frame->get_Assembly(), current)) 
        {
            CheckAssembly(current, frame);
            current = frame->get_Assembly();
        }
        if((frame->get_Domain() != domain)) 
        {
            CheckAppDomain(domain, frame);
            domain = frame->get_Domain();
        }
        return false;
    }
    
    void PermissionSet::CheckAssembly(System::Reflection::Assembly* a, SecurityFrame frame) {
        IPermission *p = SecurityManager::CheckPermissionSet(a, this, false);
        if((p != nullptr)) 
        {
            CodeAccessPermission::ThrowSecurityException(this, _T("Demand failed assembly permissions checks."), frame, Permissions::SecurityAction::Demand, p);
        }
    }
    
    void PermissionSet::CheckAppDomain(System::AppDomain* domain, SecurityFrame frame) {
        IPermission *p = SecurityManager::CheckPermissionSet2(domain, this);
        if((p != nullptr)) 
        {
            CodeAccessPermission::ThrowSecurityException(this, _T("Demand failed appdomain permissions checks."), frame, Permissions::SecurityAction::Demand, p);
        }
    }
    
    PermissionSet* PermissionSet::CreateFromBinaryFormat(cli::array<unsigned char>* data) {
        if((((data ==  nullptr) || ((int32_t)(data->at(0)) != 46)) || (data->get_Length() < 2))) 
        {
            System::String *msg = Locale::GetText(_T("Invalid data in 2.0 metadata format."));
            throw cli::gcnew<SecurityException>(msg);
        }
        int32_t pos = 1;
        int32_t numattr = ReadEncodedInt(data, pos);
        PermissionSet *ps = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
        for(int32_t i = 0; (i < numattr); i++){
            IPermission *p = ProcessAttribute(data, pos);
            if((p ==  nullptr)) 
            {
                System::String *msg = Locale::GetText(_T("Unsupported data found in 2.0 metadata format."));
                throw cli::gcnew<SecurityException>(msg);
            }
            ps->AddPermission(p);
        }
        return ps;
    }
    
    int32_t PermissionSet::ReadEncodedInt(cli::array<unsigned char>* data, int32_t position) {
        int32_t len = 0;
        if((((int32_t)(data->at(position)) & 128) ==  0)) 
        {
            len = (int32_t)(data->at(position));
            position++;
        }
         else 
        {
            if((((int32_t)(data->at(position)) & 64) ==  0)) 
            {
                len = ((((int32_t)(data->at(position)) & 63) << 8) | (int32_t)(data->at((position + 1))));
                (position = position + 2);
            }
             else 
            {
                len = ((((((int32_t)(data->at(position)) & 31) << 24) | ((int32_t)(data->at((position + 1))) << 16)) | ((int32_t)(data->at((position + 2))) << 8)) | (int32_t)(data->at((position + 3))));
                (position = position + 4);
            }
        }
        return len;
    }
    
    IPermission* PermissionSet::ProcessAttribute(cli::array<unsigned char>* data, int32_t position) {
        int32_t clen = ReadEncodedInt(data, position);
        System::String *cnam = System::Text::Encoding::get_UTF8()->GetString_39f4843197ddbe92(data, position, clen);
        (position = position + clen);
        System::Type *secattr = System::Type::GetType4(cnam);
        Permissions::SecurityAttribute2 *sa = cli::as<Permissions::SecurityAttribute2*>(System::Activator::CreateInstance9(secattr, action));
        if((sa ==  nullptr)) 
        {
            return nullptr;
        }
        ReadEncodedInt(data, position);
        int32_t numberOfParameters = ReadEncodedInt(data, position);
        for(int32_t j = 0; (j < numberOfParameters); j++){
            bool property = false;
            switch(data->at(position++)) {
                case 83: case_1547: {
                    property = false;
                    break;
                }
                case 84: case_1548: {
                    property = true;
                    break;
                }
                default: case_1549: {
                    return nullptr;
                }
            }
            bool array = false;
            unsigned char type = data->at(position++);
            if(((int32_t)(type) ==  29)) 
            {
                array = true;
                type = data->at(position++);
            }
            int32_t plen = ReadEncodedInt(data, position);
            System::String *pnam = System::Text::Encoding::get_UTF8()->GetString_39f4843197ddbe92(data, position, plen);
            (position = position + plen);
            int32_t arrayLength = 1;
            if(array) 
            {
                arrayLength = System::BitConverter::ToInt32(data, position);
                (position = position + 4);
            }
            System::Object *obj = nullptr;
            cli::array<System::Object*> *arrayIndex = nullptr;
            for(int32_t i = 0; (i < arrayLength); i++){
                if(array) 
                {
                }
                switch(type) {
                    case 2: case_1550: {
                        obj = cli::box(System::Convert::ToBoolean2(data->at(position++)));
                        break;
                    }
                    case 3: case_1551: {
                        obj = cli::box(System::Convert::ToChar2(data->at(position)));
                        (position = position + 2);
                        break;
                    }
                    case 4: case_1552: {
                        obj = cli::box(System::Convert::ToSByte2(data->at(position++)));
                        break;
                    }
                    case 5: case_1553: {
                        obj = cli::box(System::Convert::ToByte2(data->at(position++)));
                        break;
                    }
                    case 6: case_1554: {
                        obj = cli::box(System::Convert::ToInt162(data->at(position)));
                        (position = position + 2);
                        break;
                    }
                    case 7: case_1555: {
                        obj = cli::box(System::Convert::ToUInt162(data->at(position)));
                        (position = position + 2);
                        break;
                    }
                    case 8: case_1556: {
                        obj = cli::box(System::Convert::ToInt322(data->at(position)));
                        (position = position + 4);
                        break;
                    }
                    case 9: case_1557: {
                        obj = cli::box(System::Convert::ToUInt322(data->at(position)));
                        (position = position + 4);
                        break;
                    }
                    case 10: case_1558: {
                        obj = cli::box(System::Convert::ToInt642(data->at(position)));
                        (position = position + 8);
                        break;
                    }
                    case 11: case_1559: {
                        obj = cli::box(System::Convert::ToUInt642(data->at(position)));
                        (position = position + 8);
                        break;
                    }
                    case 12: case_1560: {
                        obj = cli::box(System::Convert::ToSingle2(data->at(position)));
                        (position = position + 4);
                        break;
                    }
                    case 13: case_1561: {
                        obj = cli::box(System::Convert::ToDouble2(data->at(position)));
                        (position = position + 8);
                        break;
                    }
                    case 14: case_1562: {
                        System::String *s = nullptr;
                        if(((int32_t)(data->at(position)) != 255)) 
                        {
                            int32_t slen = ReadEncodedInt(data, position);
                            s = System::Text::Encoding::get_UTF8()->GetString_39f4843197ddbe92(data, position, slen);
                            (position = position + slen);
                        }
                         else 
                        {
                            position++;
                        }
                        obj = cli::cast<System::Object*>(s);
                        break;
                    }
                    case 80: case_1563: {
                        int32_t tlen = ReadEncodedInt(data, position);
                        obj = cli::cast<System::Object*>(System::Type::GetType4(System::Text::Encoding::get_UTF8()->GetString_39f4843197ddbe92(data, position, tlen)));
                        (position = position + tlen);
                        break;
                    }
                    default: case_1564: {
                        return nullptr;
                    }
                }
                if(property) 
                {
                    System::Reflection::PropertyInfo *pi = secattr->GetProperty(pnam);
                    pi->SetValue_1695ad6de909516e(sa, obj, arrayIndex);
                }
                 else 
                {
                    System::Reflection::FieldInfo *fi = secattr->GetField(pnam);
                    fi->SetValue2(sa, obj);
                }
            }
        }
        return sa->CreatePermission_cae8413caba48c05();
    }
    
    int32_t PermissionSet::get_Count_db378507423fcdb() {
        return this->list->get_Count_2354963792616712();
    }
    
    bool PermissionSet::get_IsSynchronized_14b476662929a566() {
        return this->list->get_IsSynchronized_ffa26be0a148c3c0();
    }
    
    bool PermissionSet::get_IsReadOnly_e481161c49619fed() {
        return false;
    }
    
    System::Object* PermissionSet::get_SyncRoot_8a019b52a35087b9() {
        return this;
    }
    
    bool PermissionSet::get_DeclarativeSecurity() {
        return this->_declsec;
    }
    
    bool PermissionSet::set_DeclarativeSecurity(bool value) {
        this->_declsec = value;
        return get_DeclarativeSecurity();
    }
    
    Policy::PolicyLevel* PermissionSet::get_Resolver() {
        return this->_policyLevel;
    }
    
    Policy::PolicyLevel* PermissionSet::set_Resolver(Policy::PolicyLevel* value) {
        this->_policyLevel = value;
        return get_Resolver();
    }
    
}}
namespace System { namespace Security {
    
    System::String*  PermissionSetCollection::tagName;
    
    PermissionSetCollection::PermissionSetCollection()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void PermissionSetCollection::constructor() {
        this->_list = cli::cast<System::Collections::IList*>(cli::gcnew<System::Collections::ArrayList>());
    }
    
    void PermissionSetCollection::static_constructor() {
    }
    
    void PermissionSetCollection::Add(PermissionSet* permSet) {
        if((permSet ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("permSet"));
        }
        this->_list->Add_985508e3bf9b7a73(permSet);
    }
    
    PermissionSetCollection* PermissionSetCollection::Copy() {
        PermissionSetCollection *psc = cli::gcnew<PermissionSetCollection>();
        for(auto tmp_484 : this->_list) {
            auto ps = cli::cast<PermissionSet*>(tmp_484);
            {
                psc->_list->Add_985508e3bf9b7a73(ps->Copy_cfeae72b3c523c4e());
            }
        }
        return psc;
    }
    
    void PermissionSetCollection::CopyTo(cli::array<PermissionSet*>* array, int32_t index) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void PermissionSetCollection::CopyTo2(System::Array* array, int32_t index) {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    void PermissionSetCollection::Demand() {
        PermissionSet *superset = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
        for(auto tmp_485 : this->_list) {
            auto ps = cli::cast<PermissionSet*>(tmp_485);
            {
                for(auto tmp_486 : ps) {
                    auto p = cli::cast<IPermission*>(tmp_486);
                    {
                        superset->AddPermission(p);
                    }
                }
            }
        }
        superset->Demand();
    }
    
    void PermissionSetCollection::FromXml(SecurityElement* el) {
        if((el ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("el"));
        }
        if(System::String::op_Inequality(el->get_Tag(), tagName)) 
        {
            System::String *msg = System::String::Format3(_T("Invalid tag {0} expected {1}"), el->get_Tag(), tagName);
            throw cli::gcnew<System::ArgumentException>(msg, _T("el"));
        }
        this->_list->Clear_e0ee496065507a2f();
        if((el->get_Children() != nullptr)) 
        {
            for(auto tmp_487 : el->get_Children()) {
                auto child = cli::cast<SecurityElement*>(tmp_487);
                {
                    PermissionSet *ps = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
                    ps->FromXml_2ac858dba9ca352b(child);
                    this->_list->Add_985508e3bf9b7a73(ps);
                }
            }
        }
    }
    
    System::Collections::IEnumerator* PermissionSetCollection::GetEnumerator() {
        return this->_list->GetEnumerator_674ad93a972a4d67();
    }
    
    PermissionSet* PermissionSetCollection::GetSet(int32_t index) {
        if(((index < 0) || (index >= this->_list->get_Count_8f254f3dd8e2403()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"));
        }
        return cli::cast<PermissionSet*>(this->_list->get_Item_8550d21996ef9dc5(index));
    }
    
    void PermissionSetCollection::RemoveSet(int32_t index) {
        if(((index < 0) || (index >= this->_list->get_Count_8f254f3dd8e2403()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"));
        }
        this->_list->RemoveAt_dce190584913328b(index);
    }
    
    System::String* PermissionSetCollection::ToString_1636a0751cb9ac11() {
        return ToXml()->ToString_1636a0751cb9ac11();
    }
    
    SecurityElement* PermissionSetCollection::ToXml() {
        SecurityElement *se = cli::gcnew<SecurityElement>(tagName);
        for(auto tmp_488 : this->_list) {
            auto ps = cli::cast<PermissionSet*>(tmp_488);
            {
                se->AddChild(ps->ToXml_c2a66662101c88c3());
            }
        }
        return se;
    }
    
    void PermissionSetCollection::DemandChoice() {
        SecurityException *exception = nullptr;
        bool result = false;
        for(auto tmp_489 : this->_list) {
            auto pset = cli::cast<PermissionSet*>(tmp_489);
            {
                try {
                    pset->Demand();
                    result = true;
                    break;
                }
                catch(SecurityException* se) {
                    if((exception ==  nullptr)) 
                    {
                        exception = se;
                    }
                }
            }
        }
        if(!(result)) 
        {
            if((exception != nullptr)) 
            {
                throw exception;
            }
             else 
            {
                throw cli::gcnew<SecurityException>(_T("DemandChoice failed."));
            }
        }
    }
    
    PermissionSetCollection* PermissionSetCollection::CreateFromBinaryFormat(cli::array<unsigned char>* data) {
        if((((data ==  nullptr) || ((int32_t)(data->at(0)) != 46)) || (data->get_Length() < 2))) 
        {
            System::String *msg = Locale::GetText(_T("Invalid data in 2.0 metadata format."));
            throw cli::gcnew<SecurityException>(msg);
        }
        int32_t pos = 1;
        int32_t numattr = PermissionSet::ReadEncodedInt(data, pos);
        PermissionSetCollection *psc = cli::gcnew<PermissionSetCollection>();
        for(int32_t i = 0; (i < numattr); i++){
            IPermission *p = PermissionSet::ProcessAttribute(data, pos);
            if((p ==  nullptr)) 
            {
                System::String *msg = Locale::GetText(_T("Unsupported data found in 2.0 metadata format."));
                throw cli::gcnew<SecurityException>(msg);
            }
            PermissionSet *ps = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
            ps->set_DeclarativeSecurity(true);
            ps->AddPermission(p);
            psc->Add(ps);
        }
        return psc;
    }
    
    int32_t PermissionSetCollection::get_Count() {
        return this->_list->get_Count_8f254f3dd8e2403();
    }
    
    bool PermissionSetCollection::get_IsSynchronized() {
        return false;
    }
    
    System::Collections::IList* PermissionSetCollection::get_PermissionSets() {
        return this->_list;
    }
    
    System::Object* PermissionSetCollection::get_SyncRoot() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
}}
namespace System { namespace Security {
    
    
    SecureString::SecureString()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SecureString::static_constructor() {
    }
    
    void SecureString::constructor() {
        Alloc(8, false);
    }
    
    void SecureString::constructor(char16_t* value, int32_t length) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value"));
        }
        if(((length < 0) || (length > 65536))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("length"), _T("< 0 || > 65536"));
        }
        this->length = length;
        Alloc(length, false);
        int32_t n = 0;
        for(int32_t i = 0; (i < length); i++){
            char16_t c = (*value++);
            this->data->at(n++) = (unsigned char)((int32_t)(c) >> 8);
            this->data->at(n++) = (unsigned char)c;
        }
        Encrypt();
    }
    
    void SecureString::AppendChar(char16_t c) {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        if(this->read_only) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("SecureString is read-only.")));
        }
        if((this->length ==  65536)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("length"), _T("> 65536"));
        }
        {
            cli::finally_guard([&]() {
                Encrypt();
            });
            Decrypt();
            int32_t n = (this->length * 2);
            Alloc(++this->length, true);
            this->data->at(n++) = (unsigned char)((int32_t)(c) >> 8);
            this->data->at(n++) = (unsigned char)c;
        }
    }
    
    void SecureString::Clear() {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        if(this->read_only) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("SecureString is read-only.")));
        }
        System::Array::Clear2(this->data, 0, this->data->get_Length());
        this->length = 0;
    }
    
    SecureString* SecureString::Copy() {
        SecureString *ss = cli::gcnew<SecureString>();
        ss->data = cli::cast<cli::array<unsigned char>*>(cli::import(this->data)->Clone());
        ss->length = this->length;
        return ss;
    }
    
    void SecureString::Dispose() {
        this->disposed = true;
        if((this->data != nullptr)) 
        {
            System::Array::Clear2(this->data, 0, this->data->get_Length());
            this->data = nullptr;
        }
        this->length = 0;
    }
    
    void SecureString::InsertAt(int32_t index, char16_t c) {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        if(this->read_only) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("SecureString is read-only.")));
        }
        if(((index < 0) || (index > this->length))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"), _T("< 0 || > length"));
        }
        if((this->length >= 65536)) 
        {
            System::String *msg = Locale::GetText2(_T("Maximum string size is \'{0}\'."), (new cli::array<System::Object*>({cli::box(65536)})));
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"), msg);
        }
        {
            cli::finally_guard([&]() {
                Encrypt();
            });
            Decrypt();
            Alloc(++this->length, true);
            int32_t n = (index * 2);
            System::Buffer::BlockCopy(this->data, n, this->data, (n + 2), ((this->data->get_Length() - n) - 2));
            this->data->at(n++) = (unsigned char)((int32_t)(c) >> 8);
            this->data->at(n) = (unsigned char)c;
        }
    }
    
    bool SecureString::IsReadOnly() {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        return this->read_only;
    }
    
    void SecureString::MakeReadOnly() {
        this->read_only = true;
    }
    
    void SecureString::RemoveAt(int32_t index) {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        if(this->read_only) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("SecureString is read-only.")));
        }
        if(((index < 0) || (index >= this->length))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"), _T("< 0 || > length"));
        }
        {
            cli::finally_guard([&]() {
                Encrypt();
            });
            Decrypt();
            System::Buffer::BlockCopy(this->data, (index + 1), this->data, index, ((this->data->get_Length() - index) - 1));
            Alloc(--this->length, true);
        }
    }
    
    void SecureString::SetAt(int32_t index, char16_t c) {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        if(this->read_only) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("SecureString is read-only.")));
        }
        if(((index < 0) || (index >= this->length))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"), _T("< 0 || > length"));
        }
        {
            cli::finally_guard([&]() {
                Encrypt();
            });
            Decrypt();
            int32_t n = (index * 2);
            this->data->at(n++) = (unsigned char)((int32_t)(c) >> 8);
            this->data->at(n) = (unsigned char)c;
        }
    }
    
    void SecureString::Encrypt() {
        if(((this->data != nullptr) && (this->data->get_Length() > 0))) 
        {
        }
    }
    
    void SecureString::Decrypt() {
        if(((this->data != nullptr) && (this->data->get_Length() > 0))) 
        {
        }
    }
    
    void SecureString::Alloc(int32_t length, bool realloc) {
        if(((length < 0) || (length > 65536))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("length"), _T("< 0 || > 65536"));
        }
        int32_t size = (((length >> 3) + ((length & 7) ==  0) ? 0 : 1) << 4);
        if(((realloc && (this->data != nullptr)) && (size ==  this->data->get_Length()))) 
        {
            return;
        }
        if(realloc) 
        {
            cli::array<unsigned char> *newdata = (new cli::array<unsigned char>(size));
            System::Array::Copy2(this->data, 0, newdata, 0, System::Math::Min5(this->data->get_Length(), newdata->get_Length()));
            System::Array::Clear2(this->data, 0, this->data->get_Length());
            this->data = newdata;
        }
         else 
        {
            this->data = (new cli::array<unsigned char>(size));
        }
    }
    
    cli::array<unsigned char>* SecureString::GetBuffer() {
        cli::array<unsigned char> *secret = (new cli::array<unsigned char>((this->length << 1)));
        {
            cli::finally_guard([&]() {
                Encrypt();
            });
            Decrypt();
            System::Buffer::BlockCopy(this->data, 0, secret, 0, secret->get_Length());
        }
        return secret;
    }
    
    int32_t SecureString::get_Length() {
        if(this->disposed) 
        {
            throw cli::gcnew<System::ObjectDisposedException>(_T("SecureString"));
        }
        return this->length;
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityContext::constructor() {
    }
    
    void SecurityContext::constructor(SecurityContext* sc) {
        this->_capture = true;
        this->_winid = sc->_winid;
        if((sc->_stack != nullptr)) 
        {
            this->_stack = sc->_stack->CreateCopy();
        }
    }
    
    SecurityContext* SecurityContext::CreateCopy() {
        if(!(this->_capture)) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        return cli::gcnew<SecurityContext>(this);
    }
    
    SecurityContext* SecurityContext::Capture() {
        SecurityContext *sc = System::Threading::Thread::get_CurrentThread()->get_ExecutionContext()->get_SecurityContext();
        if(sc->get_FlowSuppressed()) 
        {
            return nullptr;
        }
        SecurityContext *capture = cli::gcnew<SecurityContext>();
        capture->_capture = true;
        capture->_winid = Principal::WindowsIdentity::GetCurrentToken();
        capture->_stack = System::Threading::CompressedStack::Capture();
        return capture;
    }
    
    void SecurityContext::Dispose() {
    }
    
    bool SecurityContext::IsFlowSuppressed() {
        return System::Threading::Thread::get_CurrentThread()->get_ExecutionContext()->get_SecurityContext()->get_FlowSuppressed();
    }
    
    bool SecurityContext::IsWindowsIdentityFlowSuppressed() {
        return System::Threading::Thread::get_CurrentThread()->get_ExecutionContext()->get_SecurityContext()->get_WindowsIdentityFlowSuppressed();
    }
    
    void SecurityContext::RestoreFlow() {
        SecurityContext *sc = System::Threading::Thread::get_CurrentThread()->get_ExecutionContext()->get_SecurityContext();
        if((!(sc->get_FlowSuppressed()) && !(sc->get_WindowsIdentityFlowSuppressed()))) 
        {
            throw cli::gcnew<System::InvalidOperationException>();
        }
        sc->set_FlowSuppressed(false);
        sc->set_WindowsIdentityFlowSuppressed(false);
    }
    
    void SecurityContext::Run(SecurityContext* securityContext, System::Threading::ContextCallback* callback, System::Object* state) {
        if((securityContext ==  nullptr)) 
        {
            throw cli::gcnew<System::InvalidOperationException>(Locale::GetText(_T("Null SecurityContext")));
        }
        SecurityContext *sc = System::Threading::Thread::get_CurrentThread()->get_ExecutionContext()->get_SecurityContext();
        Principal::IPrincipal *original = System::Threading::Thread::get_CurrentPrincipal();
        {
            cli::finally_guard([&]() {
                if(((original != nullptr) && ::System::IntPtr::op_Inequality(sc->get_IdentityToken(), (*::System::IntPtr::Zero)))) 
                {
                    System::Threading::Thread::set_CurrentPrincipal(original);
                }
            });
            if(::System::IntPtr::op_Inequality(sc->get_IdentityToken(), (*::System::IntPtr::Zero))) 
            {
                System::Threading::Thread::set_CurrentPrincipal(cli::gcnew<Principal::WindowsPrincipal>(cli::gcnew<Principal::WindowsIdentity>(sc->get_IdentityToken())));
            }
            if((securityContext->get_CompressedStack() != nullptr)) 
            {
                System::Threading::CompressedStack::Run(securityContext->get_CompressedStack(), callback, state);
            }
             else 
            {
                callback->Invoke(state);
            }
        }
    }
    
    System::Threading::AsyncFlowControl SecurityContext::SuppressFlow() {
        System::Threading::Thread *t = System::Threading::Thread::get_CurrentThread();
        t->get_ExecutionContext()->get_SecurityContext()->set_FlowSuppressed(true);
        t->get_ExecutionContext()->get_SecurityContext()->set_WindowsIdentityFlowSuppressed(true);
        return cli::ctor<System::Threading::AsyncFlowControl>(t, System::Threading::AsyncFlowControlType::Security);
    }
    
    System::Threading::AsyncFlowControl SecurityContext::SuppressFlowWindowsIdentity() {
        System::Threading::Thread *t = System::Threading::Thread::get_CurrentThread();
        t->get_ExecutionContext()->get_SecurityContext()->set_WindowsIdentityFlowSuppressed(true);
        return cli::ctor<System::Threading::AsyncFlowControl>(t, System::Threading::AsyncFlowControlType::Security);
    }
    
    bool SecurityContext::get_FlowSuppressed() {
        return this->_suppressFlow;
    }
    
    bool SecurityContext::set_FlowSuppressed(bool value) {
        this->_suppressFlow = value;
        return get_FlowSuppressed();
    }
    
    bool SecurityContext::get_WindowsIdentityFlowSuppressed() {
        return this->_suppressFlowWindowsIdentity;
    }
    
    bool SecurityContext::set_WindowsIdentityFlowSuppressed(bool value) {
        this->_suppressFlowWindowsIdentity = value;
        return get_WindowsIdentityFlowSuppressed();
    }
    
    System::Threading::CompressedStack* SecurityContext::get_CompressedStack() {
        return this->_stack;
    }
    
    System::Threading::CompressedStack* SecurityContext::set_CompressedStack(System::Threading::CompressedStack* value) {
        this->_stack = value;
        return get_CompressedStack();
    }
    
    void* SecurityContext::get_IdentityToken() {
        return this->_winid;
    }
    
    void* SecurityContext::set_IdentityToken(void* value) {
        this->_winid = value;
        return get_IdentityToken();
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityCriticalAttribute::constructor() {
        this->_scope = SecurityCriticalScope::Explicit;
    }
    
    void SecurityCriticalAttribute::constructor(SecurityCriticalScope scope) {
        switch(scope) {
            case SecurityCriticalScope::Everything: case_1565: {
                this->_scope = SecurityCriticalScope::Everything;
                break;
            }
            default: case_1566: {
                this->_scope = SecurityCriticalScope::Explicit;
                break;
            }
        }
    }
    
    SecurityCriticalScope SecurityCriticalAttribute::get_Scope() {
        return this->_scope;
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityAttribute::constructor(System::String* name, System::String* value) {
        if(!(SecurityElement::IsValidAttributeName(name))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(Locale::GetText(_T("Invalid XML attribute name")), _T(": ")));
        }
        if(!(SecurityElement::IsValidAttributeValue(value))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(Locale::GetText(_T("Invalid XML attribute value")), _T(": ")));
        }
        this->_name = name;
        this->_value = SecurityElement::Unescape(value);
    }
    
    System::String* SecurityAttribute::get_Name() {
        return this->_name;
    }
    
    System::String* SecurityAttribute::get_Value() {
        return this->_value;
    }
    
}}
namespace System { namespace Security {
    
    cli::array<char16_t>*  SecurityElement::invalid_tag_chars;
    cli::array<char16_t>*  SecurityElement::invalid_text_chars;
    cli::array<char16_t>*  SecurityElement::invalid_attr_name_chars;
    cli::array<char16_t>*  SecurityElement::invalid_attr_value_chars;
    cli::array<char16_t>*  SecurityElement::invalid_chars;
    
    SecurityElement::SecurityElement()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SecurityElement::constructor(System::String* tag) {
    }
    
    void SecurityElement::constructor(System::String* tag, System::String* text) {
        if((tag ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("tag"));
        }
        if(!(IsValidTag(tag))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(Locale::GetText(_T("Invalid XML string")), _T(": ")));
        }
        this->tag = tag;
        this->set_Text(text);
    }
    
    void SecurityElement::constructor(SecurityElement* se) {
        this->set_Tag(se->get_Tag());
        this->set_Text(se->get_Text());
        if((se->attributes != nullptr)) 
        {
            for(auto tmp_490 : se->attributes) {
                auto sa = cli::cast<SecurityAttribute*>(tmp_490);
                {
                    this->AddAttribute(sa->get_Name(), sa->get_Value());
                }
            }
        }
        if((se->children != nullptr)) 
        {
            for(auto tmp_491 : se->children) {
                auto child = cli::cast<SecurityElement*>(tmp_491);
                {
                    this->AddChild(child);
                }
            }
        }
    }
    
    void SecurityElement::static_constructor() {
    }
    
    void SecurityElement::AddAttribute(System::String* name, System::String* value) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("value"));
        }
        if((GetAttribute(name) != nullptr)) 
        {
            throw cli::gcnew<System::ArgumentException>(Locale::GetText(cli::concat(_T("Duplicate attribute : "), name)));
        }
        if((this->attributes ==  nullptr)) 
        {
            this->attributes = cli::gcnew<System::Collections::ArrayList>();
        }
        this->attributes->Add_e6a92085999ce388(cli::gcnew<SecurityAttribute>(name, value));
    }
    
    void SecurityElement::AddChild(SecurityElement* child) {
        if((child ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("child"));
        }
        if((this->children ==  nullptr)) 
        {
            this->children = cli::gcnew<System::Collections::ArrayList>();
        }
        this->children->Add_e6a92085999ce388(child);
    }
    
    System::String* SecurityElement::Attribute2(System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        SecurityAttribute *sa = GetAttribute(name);
        return (sa ==  nullptr) ? nullptr : sa->get_Value();
    }
    
    SecurityElement* SecurityElement::Copy() {
        return cli::gcnew<SecurityElement>(this);
    }
    
    bool SecurityElement::Equal(SecurityElement* other) {
        if((other ==  nullptr)) 
        {
            return false;
        }
        if((this ==  other)) 
        {
            return true;
        }
        if(System::String::op_Inequality(this->text, other->text)) 
        {
            return false;
        }
        if(System::String::op_Inequality(this->tag, other->tag)) 
        {
            return false;
        }
        if((((this->attributes ==  nullptr) && (other->attributes != nullptr)) && (other->attributes->get_Count_2354963792616712() != 0))) 
        {
            return false;
        }
        if((((other->attributes ==  nullptr) && (this->attributes != nullptr)) && (this->attributes->get_Count_2354963792616712() != 0))) 
        {
            return false;
        }
        if(((this->attributes != nullptr) && (other->attributes != nullptr))) 
        {
            if((this->attributes->get_Count_2354963792616712() != other->attributes->get_Count_2354963792616712())) 
            {
                return false;
            }
            for(auto tmp_492 : this->attributes) {
                auto sa1 = cli::cast<SecurityAttribute*>(tmp_492);
                {
                    SecurityAttribute *sa2 = other->GetAttribute(sa1->get_Name());
                    if(((sa2 ==  nullptr) || System::String::op_Inequality(sa1->get_Value(), sa2->get_Value()))) 
                    {
                        return false;
                    }
                }
            }
        }
        if((((this->children ==  nullptr) && (other->children != nullptr)) && (other->children->get_Count_2354963792616712() != 0))) 
        {
            return false;
        }
        if((((other->children ==  nullptr) && (this->children != nullptr)) && (this->children->get_Count_2354963792616712() != 0))) 
        {
            return false;
        }
        if(((this->children != nullptr) && (other->children != nullptr))) 
        {
            if((this->children->get_Count_2354963792616712() != other->children->get_Count_2354963792616712())) 
            {
                return false;
            }
            for(int32_t i = 0; (i < this->children->get_Count_2354963792616712()); i++) {
                if(!(cli::cast<SecurityElement*>(this->children->get_Item_fd0155f142ae570(i))->Equal(cli::cast<SecurityElement*>(other->children->get_Item_fd0155f142ae570(i))))) 
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    System::String* SecurityElement::Escape2(System::String* str) {
        System::Text::StringBuilder *sb;
        if((str ==  nullptr)) 
        {
            return nullptr;
        }
        if((str->IndexOfAny(invalid_chars) ==  -1)) 
        {
            return str;
        }
        sb = cli::gcnew<System::Text::StringBuilder>();
        int32_t len = str->get_Length();
        for(int32_t i = 0; (i < len); i++){
            char16_t c = str->get_Chars(i);
            switch(c) {
                case u'<': case_1567: {
                    sb->Append2(_T("&lt;"));
                    break;
                }
                case u'>': case_1568: {
                    sb->Append2(_T("&gt;"));
                    break;
                }
                case u'"': case_1569: {
                    sb->Append2(_T("&quot;"));
                    break;
                }
                case u'\'': case_1570: {
                    sb->Append2(_T("&apos;"));
                    break;
                }
                case u'&': case_1571: {
                    sb->Append2(_T("&amp;"));
                    break;
                }
                default: case_1572: {
                    sb->Append16(c);
                    break;
                }
            }
        }
        return sb->ToString_1636a0751cb9ac11();
    }
    
    System::String* SecurityElement::Unescape(System::String* str) {
        System::Text::StringBuilder *sb;
        if((str ==  nullptr)) 
        {
            return nullptr;
        }
        sb = cli::gcnew<System::Text::StringBuilder>(str);
        sb->Replace3(_T("&lt;"), _T("<"));
        sb->Replace3(_T("&gt;"), _T(">"));
        sb->Replace3(_T("&amp;"), _T("&"));
        sb->Replace3(_T("&quot;"), _T("\""));
        sb->Replace3(_T("&apos;"), _T("\'"));
        return sb->ToString_1636a0751cb9ac11();
    }
    
    SecurityElement* SecurityElement::FromString(System::String* xml) {
        if((xml ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("xml"));
        }
        if((xml->get_Length() ==  0)) 
        {
            throw cli::gcnew<XmlSyntaxException>(Locale::GetText(_T("Empty string.")));
        }
        try {
            Mono::Xml::SecurityParser *sp = cli::gcnew<Mono::Xml::SecurityParser>();
            sp->LoadXml(xml);
            return sp->ToXml();
        }
        catch(System::Exception* e) {
            System::String *msg = Locale::GetText(_T("Invalid XML."));
            throw cli::gcnew<XmlSyntaxException>(msg, e);
        }
    }
    
    bool SecurityElement::IsValidAttributeName(System::String* name) {
        return ((name != nullptr) && (name->IndexOfAny(invalid_attr_name_chars) ==  -1));
    }
    
    bool SecurityElement::IsValidAttributeValue(System::String* value) {
        return ((value != nullptr) && (value->IndexOfAny(invalid_attr_value_chars) ==  -1));
    }
    
    bool SecurityElement::IsValidTag(System::String* tag) {
        return ((tag != nullptr) && (tag->IndexOfAny(invalid_tag_chars) ==  -1));
    }
    
    bool SecurityElement::IsValidText(System::String* text) {
        return ((text != nullptr) && (text->IndexOfAny(invalid_text_chars) ==  -1));
    }
    
    SecurityElement* SecurityElement::SearchForChildByTag(System::String* tag) {
        if((tag ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("tag"));
        }
        if((this->children ==  nullptr)) 
        {
            return nullptr;
        }
        for(int32_t i = 0; (i < this->children->get_Count_2354963792616712()); i++){
            SecurityElement *elem = cli::cast<SecurityElement*>(this->children->get_Item_fd0155f142ae570(i));
            if(System::String::op_Equality(elem->tag, tag)) 
            {
                return elem;
            }
        }
        return nullptr;
    }
    
    System::String* SecurityElement::SearchForTextOfTag(System::String* tag) {
        if((tag ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("tag"));
        }
        if(System::String::op_Equality(this->tag, tag)) 
        {
            return this->text;
        }
        if((this->children ==  nullptr)) 
        {
            return nullptr;
        }
        for(int32_t i = 0; (i < this->children->get_Count_2354963792616712()); i++){
            System::String *result = cli::cast<SecurityElement*>(this->children->get_Item_fd0155f142ae570(i))->SearchForTextOfTag(tag);
            if((result != nullptr)) 
            {
                return result;
            }
        }
        return nullptr;
    }
    
    System::String* SecurityElement::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *s = cli::gcnew<System::Text::StringBuilder>();
        ToXml(s, 0);
        return s->ToString_1636a0751cb9ac11();
    }
    
    void SecurityElement::ToXml(System::Text::StringBuilder* s, int32_t level) {
        s->Append2(_T("<"));
        s->Append2(this->tag);
        if((this->attributes != nullptr)) 
        {
            s->Append2(_T(" "));
            for(int32_t i = 0; (i < this->attributes->get_Count_2354963792616712()); i++){
                SecurityAttribute *sa = cli::cast<SecurityAttribute*>(this->attributes->get_Item_fd0155f142ae570(i));
                s->Append2(sa->get_Name())->Append2(_T("=\""))->Append2(Escape2(sa->get_Value()))->Append2(_T("\""));
                if((i != (this->attributes->get_Count_2354963792616712() - 1))) 
                {
                    s->Append2(System::Environment::get_NewLine());
                }
            }
        }
        if((((this->text ==  nullptr) || System::String::op_Equality(this->text, System::String::Empty)) && ((this->children ==  nullptr) || (this->children->get_Count_2354963792616712() ==  0)))) 
        {
            s->Append2(_T("/>"))->Append2(System::Environment::get_NewLine());
        }
         else 
        {
            s->Append2(_T(">"))->Append2(Escape2(this->text));
            if((this->children != nullptr)) 
            {
                s->Append2(System::Environment::get_NewLine());
                for(auto tmp_493 : this->children) {
                    auto child = cli::cast<SecurityElement*>(tmp_493);
                    {
                        child->ToXml(s, (level + 1));
                    }
                }
            }
            s->Append2(_T("</"))->Append2(this->tag)->Append2(_T(">"))->Append2(System::Environment::get_NewLine());
        }
    }
    
    SecurityAttribute* SecurityElement::GetAttribute(System::String* name) {
        if((this->attributes != nullptr)) 
        {
            for(auto tmp_494 : this->attributes) {
                auto sa = cli::cast<SecurityAttribute*>(tmp_494);
                {
                    if(System::String::op_Equality(sa->get_Name(), name)) 
                    {
                        return sa;
                    }
                }
            }
        }
        return nullptr;
    }
    
    System::Collections::Hashtable* SecurityElement::get_Attributes() {
        if((this->attributes ==  nullptr)) 
        {
            return nullptr;
        }
        System::Collections::Hashtable *result = cli::gcnew<System::Collections::Hashtable>(this->attributes->get_Count_2354963792616712());
        for(auto tmp_495 : this->attributes) {
            auto sa = cli::cast<SecurityAttribute*>(tmp_495);
            {
                result->Add_3f7ab157bcb41156(sa->get_Name(), sa->get_Value());
            }
        }
        return result;
    }
    
    System::Collections::Hashtable* SecurityElement::set_Attributes(System::Collections::Hashtable* value) {
        if(((value ==  nullptr) || (value->get_Count_40aff81471a60b4c() ==  0))) 
        {
            this->attributes->Clear_cd6654e5a40f5056();
            return get_Attributes();
        }
        if((this->attributes ==  nullptr)) 
        {
            this->attributes = cli::gcnew<System::Collections::ArrayList>();
        }
         else 
        {
            this->attributes->Clear_cd6654e5a40f5056();
        }
        System::Collections::IDictionaryEnumerator *e = value->GetEnumerator_47df71de9b680069();
        while(e->MoveNext_4e78e145935f5417()) {
            this->attributes->Add_e6a92085999ce388(cli::gcnew<SecurityAttribute>(cli::cast<System::String*>(e->get_Key_ed7954531cb20258()), cli::cast<System::String*>(e->get_Value_889e0f410f0d67ef())));
        }
        return get_Attributes();
    }
    
    System::Collections::ArrayList* SecurityElement::get_Children() {
        return this->children;
    }
    
    System::Collections::ArrayList* SecurityElement::set_Children(System::Collections::ArrayList* value) {
        if((value != nullptr)) 
        {
            for(auto tmp_496 : value) {
                auto o = cli::cast<System::Object*>(tmp_496);
                {
                    if((o ==  nullptr)) 
                    {
                        throw cli::gcnew<System::ArgumentNullException>();
                    }
                }
            }
        }
        this->children = value;
        return get_Children();
    }
    
    System::String* SecurityElement::get_Tag() {
        return this->tag;
    }
    
    System::String* SecurityElement::set_Tag(System::String* value) {
        if((value ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("Tag"));
        }
        if(!(IsValidTag(value))) 
        {
            throw cli::gcnew<System::ArgumentException>(cli::concat(Locale::GetText(_T("Invalid XML string")), _T(": ")));
        }
        this->tag = value;
        return get_Tag();
    }
    
    System::String* SecurityElement::get_Text() {
        return this->text;
    }
    
    System::String* SecurityElement::set_Text(System::String* value) {
        if((value != nullptr)) 
        {
            if(!(IsValidText(value))) 
            {
                throw cli::gcnew<System::ArgumentException>(cli::concat(Locale::GetText(_T("Invalid XML string")), _T(": ")));
            }
        }
        this->text = Unescape(value);
        return get_Text();
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityException::constructor() {
        System::SystemException::set_HResult(-2146233078);
    }
    
    void SecurityException::constructor(System::String* message) {
        System::SystemException::set_HResult(-2146233078);
    }
    
    void SecurityException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::SystemException::set_HResult(-2146233078);
        System::Runtime::Serialization::SerializationInfoEnumerator *e = info->GetEnumerator();
        while(e->MoveNext()) {
            if(System::String::op_Equality(e->get_Name(), _T("PermissionState"))) 
            {
                this->permissionState = cli::cast<System::String*>(e->get_Value());
                break;
            }
        }
    }
    
    void SecurityException::constructor(System::String* message, System::Exception* inner) {
        System::SystemException::set_HResult(-2146233078);
    }
    
    void SecurityException::constructor(System::String* message, System::Type* type) {
        System::SystemException::set_HResult(-2146233078);
        this->permissionType = type;
    }
    
    void SecurityException::constructor(System::String* message, System::Type* type, System::String* state) {
        System::SystemException::set_HResult(-2146233078);
        this->permissionType = type;
        this->permissionState = state;
    }
    
    void SecurityException::constructor(System::String* message, PermissionSet* granted, PermissionSet* refused) {
        System::SystemException::set_HResult(-2146233078);
        this->_granted = granted->ToString_1636a0751cb9ac11();
        this->_refused = refused->ToString_1636a0751cb9ac11();
    }
    
    void SecurityException::constructor(System::String* message, System::Object* deny, System::Object* permitOnly, System::Reflection::MethodInfo* method, System::Object* demanded, IPermission* permThatFailed) {
        System::SystemException::set_HResult(-2146233078);
        this->_denyset = deny;
        this->_permitset = permitOnly;
        this->_method = method;
        this->_demanded = demanded;
        this->_firstperm = permThatFailed;
    }
    
    void SecurityException::constructor(System::String* message, System::Reflection::AssemblyName* assemblyName, PermissionSet* grant, PermissionSet* refused, System::Reflection::MethodInfo* method, Permissions::SecurityAction action, System::Object* demanded, IPermission* permThatFailed, Policy::Evidence* evidence) {
        System::SystemException::set_HResult(-2146233078);
        this->_assembly = assemblyName;
        this->_granted = (grant ==  nullptr) ? System::String::Empty : grant->ToString_1636a0751cb9ac11();
        this->_refused = (refused ==  nullptr) ? System::String::Empty : refused->ToString_1636a0751cb9ac11();
        this->_method = method;
        this->_action = action;
        this->_demanded = demanded;
        this->_firstperm = permThatFailed;
        if((this->_firstperm != nullptr)) 
        {
            this->permissionType = this->_firstperm->GetType();
        }
        this->_evidence = evidence;
    }
    
    void SecurityException::GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        System::SystemException::GetObjectData_bc9b88d7eb43b6d8(info, context);
        try {
            info->AddValue16(_T("PermissionState"), this->get_PermissionState());
        }
        catch(SecurityException*) {
        }
    }
    
    System::String* SecurityException::ToString_1636a0751cb9ac11() {
        System::Text::StringBuilder *sb = cli::gcnew<System::Text::StringBuilder>(System::SystemException::ToString_1636a0751cb9ac11());
        try {
            if(System::Type::op_Inequality2(this->permissionType, nullptr)) 
            {
                sb->AppendFormat4(_T("{0}Type: {1}"), System::Environment::get_NewLine(), this->get_PermissionType());
            }
            if(System::Reflection::MethodInfo::op_Inequality(this->_method, nullptr)) 
            {
                System::String *m = this->_method->ToString_1636a0751cb9ac11();
                int32_t ret = (m->IndexOf7(_T(" ")) + 1);
                sb->AppendFormat(_T("{0}Method: {1} {2}.{3}"), (new cli::array<System::Object*>({System::Environment::get_NewLine(), this->_method->get_ReturnType_832339e848f448fe()->get_Name_50fad5fa936c3ae2(), this->_method->get_ReflectedType_bf4971c0f442b9dc(), m->Substring(ret)})));
            }
            if((this->permissionState != nullptr)) 
            {
                sb->AppendFormat4(_T("{0}State: {1}"), System::Environment::get_NewLine(), this->get_PermissionState());
            }
            if(((this->_granted != nullptr) && (this->_granted->get_Length() > 0))) 
            {
                sb->AppendFormat4(_T("{0}Granted: {1}"), System::Environment::get_NewLine(), this->get_GrantedSet());
            }
            if(((this->_refused != nullptr) && (this->_refused->get_Length() > 0))) 
            {
                sb->AppendFormat4(_T("{0}Refused: {1}"), System::Environment::get_NewLine(), this->get_RefusedSet());
            }
            if((this->_demanded != nullptr)) 
            {
                sb->AppendFormat4(_T("{0}Demanded: {1}"), System::Environment::get_NewLine(), this->get_Demanded());
            }
            if((this->_firstperm != nullptr)) 
            {
                sb->AppendFormat4(_T("{0}Failed Permission: {1}"), System::Environment::get_NewLine(), this->get_FirstPermissionThatFailed());
            }
            if((this->_evidence != nullptr)) 
            {
                sb->AppendFormat3(_T("{0}Evidences:"), System::Environment::get_NewLine());
                for(auto tmp_497 : this->_evidence) {
                    auto o = cli::cast<System::Object*>(tmp_497);
                    {
                        if(!(cli::is<Policy::Hash>(o))) 
                        {
                            sb->AppendFormat4(_T("{0}\t{1}"), System::Environment::get_NewLine(), o);
                        }
                    }
                }
            }
        }
        catch(SecurityException*) {
        }
        return sb->ToString_1636a0751cb9ac11();
    }
    
    Permissions::SecurityAction SecurityException::get_Action() {
        return this->_action;
    }
    
    Permissions::SecurityAction SecurityException::set_Action(Permissions::SecurityAction value) {
        this->_action = value;
        return get_Action();
    }
    
    System::Object* SecurityException::get_DenySetInstance() {
        return this->_denyset;
    }
    
    System::Object* SecurityException::set_DenySetInstance(System::Object* value) {
        this->_denyset = value;
        return get_DenySetInstance();
    }
    
    System::Reflection::AssemblyName* SecurityException::get_FailedAssemblyInfo() {
        return this->_assembly;
    }
    
    System::Reflection::AssemblyName* SecurityException::set_FailedAssemblyInfo(System::Reflection::AssemblyName* value) {
        this->_assembly = value;
        return get_FailedAssemblyInfo();
    }
    
    System::Reflection::MethodInfo* SecurityException::get_Method() {
        return this->_method;
    }
    
    System::Reflection::MethodInfo* SecurityException::set_Method(System::Reflection::MethodInfo* value) {
        this->_method = value;
        return get_Method();
    }
    
    System::Object* SecurityException::get_PermitOnlySetInstance() {
        return this->_permitset;
    }
    
    System::Object* SecurityException::set_PermitOnlySetInstance(System::Object* value) {
        this->_permitset = value;
        return get_PermitOnlySetInstance();
    }
    
    System::String* SecurityException::get_Url() {
        return this->_url;
    }
    
    System::String* SecurityException::set_Url(System::String* value) {
        this->_url = value;
        return get_Url();
    }
    
    SecurityZone SecurityException::get_Zone() {
        return this->_zone;
    }
    
    SecurityZone SecurityException::set_Zone(SecurityZone value) {
        this->_zone = value;
        return get_Zone();
    }
    
    System::Object* SecurityException::get_Demanded() {
        return this->_demanded;
    }
    
    System::Object* SecurityException::set_Demanded(System::Object* value) {
        this->_demanded = value;
        return get_Demanded();
    }
    
    IPermission* SecurityException::get_FirstPermissionThatFailed() {
        return this->_firstperm;
    }
    
    IPermission* SecurityException::set_FirstPermissionThatFailed(IPermission* value) {
        this->_firstperm = value;
        return get_FirstPermissionThatFailed();
    }
    
    System::String* SecurityException::get_PermissionState() {
        return this->permissionState;
    }
    
    System::String* SecurityException::set_PermissionState(System::String* value) {
        this->permissionState = value;
        return get_PermissionState();
    }
    
    System::Type* SecurityException::get_PermissionType() {
        return this->permissionType;
    }
    
    System::Type* SecurityException::set_PermissionType(System::Type* value) {
        this->permissionType = value;
        return get_PermissionType();
    }
    
    System::String* SecurityException::get_GrantedSet() {
        return this->_granted;
    }
    
    System::String* SecurityException::set_GrantedSet(System::String* value) {
        this->_granted = value;
        return get_GrantedSet();
    }
    
    System::String* SecurityException::get_RefusedSet() {
        return this->_refused;
    }
    
    System::String* SecurityException::set_RefusedSet(System::String* value) {
        this->_refused = value;
        return get_RefusedSet();
    }
    
}}
namespace System { namespace Security {
    
    
    void RuntimeSecurityFrame::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    System::Object*  SecurityManager::_lockObject;
    System::Collections::ArrayList*  SecurityManager::_hierarchy;
    IPermission*  SecurityManager::_unmanagedCode;
    System::Collections::Hashtable*  SecurityManager::_declsecCache;
    Policy::PolicyLevel*  SecurityManager::_level;
    Permissions::SecurityPermission*  SecurityManager::_execution;
    
    SecurityManager::SecurityManager()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SecurityManager::static_constructor() {
        _lockObject = cli::gcnew<System::Object>();
    }
    
    bool SecurityManager::CheckElevatedPermissions() {
        return true;
    }
    
    void SecurityManager::EnsureElevatedPermissions() {
    }
    
    void SecurityManager::GetZoneAndOrigin(System::Collections::ArrayList* zone, System::Collections::ArrayList* origin) {
        zone = cli::gcnew<System::Collections::ArrayList>();
        origin = cli::gcnew<System::Collections::ArrayList>();
    }
    
    bool SecurityManager::IsGranted(IPermission* perm) {
        if((perm ==  nullptr)) 
        {
            return true;
        }
        if(!(SecurityManager::get_SecurityEnabled())) 
        {
            return true;
        }
        return IsGranted2(System::Reflection::Assembly::GetCallingAssembly(), perm);
    }
    
    bool SecurityManager::IsGranted2(System::Reflection::Assembly* a, IPermission* perm) {
        PermissionSet *granted = a->get_GrantedPermissionSet();
        if(((granted != nullptr) && !(granted->IsUnrestricted()))) 
        {
            CodeAccessPermission *grant = cli::cast<CodeAccessPermission*>(granted->GetPermission(perm->GetType()));
            if(!(perm->IsSubsetOf_1923c54e11db177f(grant))) 
            {
                return false;
            }
        }
        PermissionSet *denied = a->get_DeniedPermissionSet();
        if(((denied != nullptr) && !(denied->IsEmpty()))) 
        {
            if(denied->IsUnrestricted()) 
            {
                return false;
            }
            CodeAccessPermission *refuse = cli::cast<CodeAccessPermission*>(a->get_DeniedPermissionSet()->GetPermission(perm->GetType()));
            if(((refuse != nullptr) && perm->IsSubsetOf_1923c54e11db177f(refuse))) 
            {
                return false;
            }
        }
        return true;
    }
    
    IPermission* SecurityManager::CheckPermissionSet(System::Reflection::Assembly* a, PermissionSet* ps, bool noncas) {
        if(ps->IsEmpty()) 
        {
            return nullptr;
        }
        for(auto tmp_498 : ps) {
            auto p = cli::cast<IPermission*>(tmp_498);
            {
                if((!(noncas) && cli::is<CodeAccessPermission>(p))) 
                {
                    if(!(IsGranted2(a, p))) 
                    {
                        return p;
                    }
                }
                 else 
                {
                    try {
                        p->Demand_6a8bc305f8dfa903();
                    }
                    catch(SecurityException*) {
                        return p;
                    }
                }
            }
        }
        return nullptr;
    }
    
    IPermission* SecurityManager::CheckPermissionSet2(System::AppDomain* ad, PermissionSet* ps) {
        if(((ps ==  nullptr) || ps->IsEmpty())) 
        {
            return nullptr;
        }
        PermissionSet *granted = ad->get_GrantedPermissionSet();
        if((granted ==  nullptr)) 
        {
            return nullptr;
        }
        if(granted->IsUnrestricted()) 
        {
            return nullptr;
        }
        if(ps->IsUnrestricted()) 
        {
            return cli::gcnew<Permissions::SecurityPermission>(Permissions::SecurityPermissionFlag::NoFlags);
        }
        for(auto tmp_499 : ps) {
            auto p = cli::cast<IPermission*>(tmp_499);
            {
                if(cli::is<CodeAccessPermission>(p)) 
                {
                    CodeAccessPermission *grant = cli::cast<CodeAccessPermission*>(granted->GetPermission(p->GetType()));
                    if((grant ==  nullptr)) 
                    {
                        if((!(granted->IsUnrestricted()) || !(cli::is<Permissions::IUnrestrictedPermission>(p)))) 
                        {
                            if(!(p->IsSubsetOf_1923c54e11db177f(nullptr))) 
                            {
                                return p;
                            }
                        }
                    }
                     else 
                    {
                        if(!(p->IsSubsetOf_1923c54e11db177f(grant))) 
                        {
                            return p;
                        }
                    }
                }
                 else 
                {
                    try {
                        p->Demand_6a8bc305f8dfa903();
                    }
                    catch(SecurityException*) {
                        return p;
                    }
                }
            }
        }
        return nullptr;
    }
    
    Policy::PolicyLevel* SecurityManager::LoadPolicyLevelFromFile(System::String* path, PolicyLevelType type) {
        if((path ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("path"));
        }
        Policy::PolicyLevel *pl = nullptr;
        try {
            pl = cli::gcnew<Policy::PolicyLevel>(cli::import(type)->ToString_1636a0751cb9ac11(), type);
            pl->LoadFromFile(path);
        }
        catch(System::Exception* e) {
            throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Invalid policy XML")), e);
        }
        return pl;
    }
    
    Policy::PolicyLevel* SecurityManager::LoadPolicyLevelFromString(System::String* str, PolicyLevelType type) {
        if((str ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("str"));
        }
        Policy::PolicyLevel *pl = nullptr;
        try {
            pl = cli::gcnew<Policy::PolicyLevel>(cli::import(type)->ToString_1636a0751cb9ac11(), type);
            pl->LoadFromString(str);
        }
        catch(System::Exception* e) {
            throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Invalid policy XML")), e);
        }
        return pl;
    }
    
    System::Collections::IEnumerator* SecurityManager::PolicyHierarchy() {
        return SecurityManager::get_Hierarchy();
    }
    
    PermissionSet* SecurityManager::ResolvePolicy(Policy::Evidence* evidence) {
        if((evidence ==  nullptr)) 
        {
            return cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
        }
        PermissionSet *ps = nullptr;
        System::Collections::IEnumerator *ple = get_Hierarchy();
        while(ple->MoveNext_4e78e145935f5417()) {
            Policy::PolicyLevel *pl = cli::cast<Policy::PolicyLevel*>(ple->get_Current_8eca9b3da02b123a());
            if(ResolvePolicyLevel(ps, pl, evidence)) 
            {
                break;
            }
        }
        ResolveIdentityPermissions(ps, evidence);
        return ps;
    }
    
    PermissionSet* SecurityManager::ResolvePolicy2(cli::array<Policy::Evidence*>* evidences) {
        if((((evidences ==  nullptr) || (evidences->get_Length() ==  0)) || ((evidences->get_Length() ==  1) && (evidences->at(0)->get_Count() ==  0)))) 
        {
            return cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
        }
        PermissionSet *ps = ResolvePolicy(evidences->at(0));
        for(int32_t i = 1; (i < evidences->get_Length()); i++){
            ps = ps->Intersect(ResolvePolicy(evidences->at(i)));
        }
        return ps;
    }
    
    PermissionSet* SecurityManager::ResolveSystemPolicy(Policy::Evidence* evidence) {
        if((evidence ==  nullptr)) 
        {
            return cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
        }
        PermissionSet *ps = nullptr;
        System::Collections::IEnumerator *ple = get_Hierarchy();
        while(ple->MoveNext_4e78e145935f5417()) {
            Policy::PolicyLevel *pl = cli::cast<Policy::PolicyLevel*>(ple->get_Current_8eca9b3da02b123a());
            if(((int32_t)(pl->get_Type()) ==  3)) 
            {
                break;
            }
            if(ResolvePolicyLevel(ps, pl, evidence)) 
            {
                break;
            }
        }
        ResolveIdentityPermissions(ps, evidence);
        return ps;
    }
    
    PermissionSet* SecurityManager::ResolvePolicy3(Policy::Evidence* evidence, PermissionSet* reqdPset, PermissionSet* optPset, PermissionSet* denyPset, PermissionSet* denied) {
        PermissionSet *resolved = ResolvePolicy(evidence);
        if(((reqdPset != nullptr) && !(reqdPset->IsSubsetOf(resolved)))) 
        {
            throw cli::gcnew<Policy::PolicyException>(Locale::GetText(_T("Policy doesn\'t grant the minimal permissions required to execute the assembly.")));
        }
        if(SecurityManager::get_CheckExecutionRights()) 
        {
            bool execute = false;
            if((resolved != nullptr)) 
            {
                if(resolved->IsUnrestricted()) 
                {
                    execute = true;
                }
                 else 
                {
                    IPermission *security = resolved->GetPermission(cli::typeof<System::Type>::info);
                    execute = _execution->IsSubsetOf_76947f8575c4d81(security);
                }
            }
            if(!(execute)) 
            {
                throw cli::gcnew<Policy::PolicyException>(Locale::GetText(_T("Policy doesn\'t grant the right to execute the assembly.")));
            }
        }
        denied = denyPset;
        return resolved;
    }
    
    System::Collections::IEnumerator* SecurityManager::ResolvePolicyGroups(Policy::Evidence* evidence) {
        if((evidence ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("evidence"));
        }
        System::Collections::ArrayList *al = cli::gcnew<System::Collections::ArrayList>();
        System::Collections::IEnumerator *ple = get_Hierarchy();
        while(ple->MoveNext_4e78e145935f5417()) {
            Policy::PolicyLevel *pl = cli::cast<Policy::PolicyLevel*>(ple->get_Current_8eca9b3da02b123a());
            Policy::CodeGroup *cg = pl->ResolveMatchingCodeGroups(evidence);
            al->Add_e6a92085999ce388(cg);
        }
        return al->GetEnumerator_84e3ba8f2fdefd62();
    }
    
    void SecurityManager::SavePolicy() {
        System::Collections::IEnumerator *e = get_Hierarchy();
        while(e->MoveNext_4e78e145935f5417()) {
            Policy::PolicyLevel *level = cli::as<Policy::PolicyLevel*>(e->get_Current_8eca9b3da02b123a());
            level->Save();
        }
    }
    
    void SecurityManager::SavePolicyLevel(Policy::PolicyLevel* level) {
        level->Save();
    }
    
    void SecurityManager::InitializePolicyHierarchy() {
        System::String *machinePolicyPath = System::IO::Path::GetDirectoryName(System::Environment::GetMachineConfigPath());
        System::String *userPolicyPath = System::IO::Path::Combine(System::Environment::UnixGetFolderPath(System::SpecialFolder::ApplicationData, System::SpecialFolderOption::Create), _T("mono"));
        Policy::PolicyLevel *enterprise = cli::gcnew<Policy::PolicyLevel>(_T("Enterprise"), PolicyLevelType::Enterprise);
        _level = enterprise;
        enterprise->LoadFromFile(System::IO::Path::Combine(machinePolicyPath, _T("enterprisesec.config")));
        Policy::PolicyLevel *machine = cli::gcnew<Policy::PolicyLevel>(_T("Machine"), PolicyLevelType::Machine);
        _level = machine;
        machine->LoadFromFile(System::IO::Path::Combine(machinePolicyPath, _T("security.config")));
        Policy::PolicyLevel *user = cli::gcnew<Policy::PolicyLevel>(_T("User"), PolicyLevelType::User);
        _level = user;
        user->LoadFromFile(System::IO::Path::Combine(userPolicyPath, _T("security.config")));
        System::Collections::ArrayList *al = cli::gcnew<System::Collections::ArrayList>();
        al->Add_e6a92085999ce388(enterprise);
        al->Add_e6a92085999ce388(machine);
        al->Add_e6a92085999ce388(user);
        _hierarchy = System::Collections::ArrayList::Synchronized(al);
        _level = nullptr;
    }
    
    bool SecurityManager::ResolvePolicyLevel(PermissionSet* ps, Policy::PolicyLevel* pl, Policy::Evidence* evidence) {
        Policy::PolicyStatement *pst = pl->Resolve(evidence);
        if((pst != nullptr)) 
        {
            if((ps ==  nullptr)) 
            {
                ps = pst->get_PermissionSet();
            }
             else 
            {
                ps = ps->Intersect(pst->get_PermissionSet());
                if((ps ==  nullptr)) 
                {
                    ps = cli::gcnew<PermissionSet>(Permissions::PermissionState::None);
                }
            }
            if(((int32_t)(((int32_t)(pst->get_Attributes()) & 2)) ==  2)) 
            {
                return true;
            }
        }
        return false;
    }
    
    void SecurityManager::ResolveIdentityPermissions(PermissionSet* ps, Policy::Evidence* evidence) {
        if(ps->IsUnrestricted()) 
        {
            return;
        }
        System::Collections::IEnumerator *ee = evidence->GetHostEnumerator();
        while(ee->MoveNext_4e78e145935f5417()) {
            Policy::IIdentityPermissionFactory *ipf = cli::as<Policy::IIdentityPermissionFactory*>(ee->get_Current_8eca9b3da02b123a());
            if((ipf != nullptr)) 
            {
                IPermission *p = ipf->CreateIdentityPermission_889b07b8aadbac79(evidence);
                ps->AddPermission(p);
            }
        }
    }
    
    PermissionSet* SecurityManager::Decode(void* permissions, int32_t length) {
        PermissionSet *ps = nullptr;
        {
            cli::lock_guard{_lockObject};
            if((_declsecCache ==  nullptr)) 
            {
                _declsecCache = cli::gcnew<System::Collections::Hashtable>();
            }
            System::Object *key = cli::box((int32_t)permissions);
            ps = cli::cast<PermissionSet*>(_declsecCache->get_Item_d75c6e706b965758(key));
            if((ps ==  nullptr)) 
            {
                cli::array<unsigned char> *data = (new cli::array<unsigned char>(length));
                System::Runtime::InteropServices::Marshal::Copy9(permissions, data, 0, length);
                ps = Decode2(data);
                ps->set_DeclarativeSecurity(true);
                _declsecCache->Add_3f7ab157bcb41156(key, ps);
            }
        }
        return ps;
    }
    
    PermissionSet* SecurityManager::Decode2(cli::array<unsigned char>* encodedPermissions) {
        if(((encodedPermissions ==  nullptr) || (encodedPermissions->get_Length() < 1))) 
        {
            throw cli::gcnew<SecurityException>(_T("Invalid metadata format."));
        }
        switch(encodedPermissions->at(0)) {
            case 60: case_1573: {
                System::String *xml = System::Text::Encoding::get_Unicode()->GetString_12d22365648431d7(encodedPermissions);
                return cli::gcnew<PermissionSet>(xml);
            }
            case 46: case_1574: {
                return PermissionSet::CreateFromBinaryFormat(encodedPermissions);
            }
            default: case_1575: {
                throw cli::gcnew<SecurityException>(Locale::GetText(_T("Unknown metadata format.")));
            }
        }
    }
    
    bool SecurityManager::GetLinkDemandSecurity(System::Reflection::MethodBase* method, RuntimeDeclSecurityActions* cdecl, RuntimeDeclSecurityActions* mdecl) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SecurityManager::ReflectedLinkDemandInvoke(System::Reflection::MethodBase* mb) {
        RuntimeDeclSecurityActions klass;
        RuntimeDeclSecurityActions method;
        if(!(GetLinkDemandSecurity(mb, &(klass), &(method)))) 
        {
            return;
        }
        PermissionSet *ps = nullptr;
        if((klass->cas->size > 0)) 
        {
            ps = Decode(klass->cas->blob, klass->cas->size);
        }
        if((klass->noncas->size > 0)) 
        {
            PermissionSet *p = Decode(klass->noncas->blob, klass->noncas->size);
            ps = (ps ==  nullptr) ? p : ps->Union(p);
        }
        if((method->cas->size > 0)) 
        {
            PermissionSet *p = Decode(method->cas->blob, method->cas->size);
            ps = (ps ==  nullptr) ? p : ps->Union(p);
        }
        if((method->noncas->size > 0)) 
        {
            PermissionSet *p = Decode(method->noncas->blob, method->noncas->size);
            ps = (ps ==  nullptr) ? p : ps->Union(p);
        }
        if((ps != nullptr)) 
        {
            ps->Demand();
        }
    }
    
    bool SecurityManager::ReflectedLinkDemandQuery(System::Reflection::MethodBase* mb) {
        RuntimeDeclSecurityActions klass;
        RuntimeDeclSecurityActions method;
        if(!(GetLinkDemandSecurity(mb, &(klass), &(method)))) 
        {
            return true;
        }
        return LinkDemand(mb->get_ReflectedType_bf4971c0f442b9dc()->get_Assembly_3aae0acbf2a6d696(), &(klass), &(method));
    }
    
    bool SecurityManager::LinkDemand(System::Reflection::Assembly* a, RuntimeDeclSecurityActions* klass, RuntimeDeclSecurityActions* method) {
        try {
            PermissionSet *ps = nullptr;
            bool result = true;
            if(((*klass)->cas->size > 0)) 
            {
                ps = Decode((*klass)->cas->blob, (*klass)->cas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, false) ==  nullptr);
            }
            if((result && ((*klass)->noncas->size > 0))) 
            {
                ps = Decode((*klass)->noncas->blob, (*klass)->noncas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, true) ==  nullptr);
            }
            if((result && ((*method)->cas->size > 0))) 
            {
                ps = Decode((*method)->cas->blob, (*method)->cas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, false) ==  nullptr);
            }
            if((result && ((*method)->noncas->size > 0))) 
            {
                ps = Decode((*method)->noncas->blob, (*method)->noncas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, true) ==  nullptr);
            }
            return result;
        }
        catch(SecurityException*) {
            return false;
        }
    }
    
    bool SecurityManager::LinkDemandFullTrust(System::Reflection::Assembly* a) {
        PermissionSet *granted = a->get_GrantedPermissionSet();
        if(((granted != nullptr) && !(granted->IsUnrestricted()))) 
        {
            return false;
        }
        PermissionSet *denied = a->get_DeniedPermissionSet();
        if(((denied != nullptr) && !(denied->IsEmpty()))) 
        {
            return false;
        }
        return true;
    }
    
    bool SecurityManager::LinkDemandUnmanaged(System::Reflection::Assembly* a) {
        return IsGranted2(a, SecurityManager::get_UnmanagedCode());
    }
    
    void SecurityManager::LinkDemandSecurityException(int32_t securityViolation, void* methodHandle) {
        System::RuntimeMethodHandle runtimeHandle = cli::ctor<System::RuntimeMethodHandle>(methodHandle);
        System::Reflection::MethodInfo *method = cli::cast<System::Reflection::MethodInfo*>(System::Reflection::MethodBase::GetMethodFromHandle(runtimeHandle));
        System::Reflection::Assembly *a = method->get_DeclaringType_6121cd6a84393166()->get_Assembly_3aae0acbf2a6d696();
        System::String *message = nullptr;
        System::Reflection::AssemblyName *an = nullptr;
        PermissionSet *granted = nullptr;
        PermissionSet *refused = nullptr;
        System::Object *demanded = nullptr;
        IPermission *failed = nullptr;
        if(System::Reflection::Assembly::op_Inequality(a, nullptr)) 
        {
            an = a->UnprotectedGetName_b11b135b2412c023();
            granted = a->get_GrantedPermissionSet();
            refused = a->get_DeniedPermissionSet();
        }
        switch(securityViolation) {
            case 1: case_1576: {
                message = Locale::GetText(_T("Permissions refused to call this method."));
                break;
            }
            case 2: case_1577: {
                message = Locale::GetText(_T("Partially trusted callers aren\'t allowed to call into this assembly."));
                demanded = cli::cast<System::Object*>(Policy::DefaultPolicies::get_FullTrust());
                break;
            }
            case 4: case_1578: {
                message = Locale::GetText(_T("Calling internal calls is restricted to ECMA signed assemblies."));
                break;
            }
            case 8: case_1579: {
                message = Locale::GetText(_T("Calling unmanaged code isn\'t allowed from this assembly."));
                demanded = cli::cast<System::Object*>(_unmanagedCode);
                failed = _unmanagedCode;
                break;
            }
            default: case_1580: {
                message = Locale::GetText(_T("JIT time LinkDemand failed."));
                break;
            }
        }
        throw cli::gcnew<SecurityException>(message, an, granted, refused, method, Permissions::SecurityAction::LinkDemand, demanded, failed, nullptr);
    }
    
    void SecurityManager::InheritanceDemandSecurityException(int32_t securityViolation, System::Reflection::Assembly* a, System::Type* t, System::Reflection::MethodInfo* method) {
        System::String *message = nullptr;
        System::Reflection::AssemblyName *an = nullptr;
        PermissionSet *granted = nullptr;
        PermissionSet *refused = nullptr;
        if(System::Reflection::Assembly::op_Inequality(a, nullptr)) 
        {
            an = a->UnprotectedGetName_b11b135b2412c023();
            granted = a->get_GrantedPermissionSet();
            refused = a->get_DeniedPermissionSet();
        }
        switch(securityViolation) {
            case 1: case_1581: {
                message = System::String::Format2(Locale::GetText(_T("Class inheritance refused for {0}.")), t);
                break;
            }
            case 2: case_1582: {
                message = Locale::GetText(_T("Method override refused."));
                break;
            }
            default: case_1583: {
                message = Locale::GetText(_T("Load time InheritDemand failed."));
                break;
            }
        }
        throw cli::gcnew<SecurityException>(message, an, granted, refused, method, Permissions::SecurityAction::InheritanceDemand, nullptr, nullptr, nullptr);
    }
    
    void SecurityManager::ThrowException(System::Exception* ex) {
        throw ex;
    }
    
    bool SecurityManager::InheritanceDemand(System::AppDomain* ad, System::Reflection::Assembly* a, RuntimeDeclSecurityActions* actions) {
        try {
            PermissionSet *ps = nullptr;
            bool result = true;
            if(((*actions)->cas->size > 0)) 
            {
                ps = Decode((*actions)->cas->blob, (*actions)->cas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, false) ==  nullptr);
                if(result) 
                {
                    result = (SecurityManager::CheckPermissionSet2(ad, ps) ==  nullptr);
                }
            }
            if(((*actions)->noncas->size > 0)) 
            {
                ps = Decode((*actions)->noncas->blob, (*actions)->noncas->size);
                result = (SecurityManager::CheckPermissionSet(a, ps, true) ==  nullptr);
                if(result) 
                {
                    result = (SecurityManager::CheckPermissionSet2(ad, ps) ==  nullptr);
                }
            }
            return result;
        }
        catch(SecurityException*) {
            return false;
        }
    }
    
    void SecurityManager::DemandUnmanaged() {
        SecurityManager::get_UnmanagedCode()->Demand_6a8bc305f8dfa903();
    }
    
    void SecurityManager::InternalDemand(void* permissions, int32_t length) {
        PermissionSet *ps = Decode(permissions, length);
        ps->Demand();
    }
    
    void SecurityManager::InternalDemandChoice(void* permissions, int32_t length) {
        throw cli::gcnew<SecurityException>(_T("SecurityAction.DemandChoice was removed from 2.0"));
    }
    
    PermissionSet* SecurityManager::GetStandardSandbox(Policy::Evidence* evidence) {
        if((evidence ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("evidence"));
        }
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SecurityManager::CurrentThreadRequiresSecurityContextCapture() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SecurityManager::get_CheckExecutionRights() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SecurityManager::set_CheckExecutionRights(bool value) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SecurityManager::get_SecurityEnabled() {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SecurityManager::set_SecurityEnabled(bool value) {
      // TODO: "Unimplemented external method!"
      throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Collections::IEnumerator* SecurityManager::get_Hierarchy() {
        {
            cli::lock_guard{_lockObject};
            if((_hierarchy ==  nullptr)) 
            {
                InitializePolicyHierarchy();
            }
        }
        return _hierarchy->GetEnumerator_84e3ba8f2fdefd62();
    }
    
    Policy::PolicyLevel* SecurityManager::get_ResolvingPolicyLevel() {
        return _level;
    }
    
    Policy::PolicyLevel* SecurityManager::set_ResolvingPolicyLevel(Policy::PolicyLevel* value) {
        _level = value;
        return get_ResolvingPolicyLevel();
    }
    
    IPermission* SecurityManager::get_UnmanagedCode() {
        {
            cli::lock_guard{_lockObject};
            if((_unmanagedCode ==  nullptr)) 
            {
                _unmanagedCode = cli::gcnew<Permissions::SecurityPermission>(Permissions::SecurityPermissionFlag::UnmanagedCode);
            }
        }
        return _unmanagedCode;
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityRulesAttribute::constructor(SecurityRuleSet ruleSet) {
        this->set_RuleSet(ruleSet);
    }
    
    SecurityRuleSet SecurityRulesAttribute::get_RuleSet() {
        return this->_RuleSet_k__BackingField;
    }
    
    SecurityRuleSet SecurityRulesAttribute::set_RuleSet(SecurityRuleSet value) {
        this->_RuleSet_k__BackingField = value;
        return get_RuleSet();
    }
    
    bool SecurityRulesAttribute::get_SkipVerificationInFullTrust() {
        return this->_SkipVerificationInFullTrust_k__BackingField;
    }
    
    bool SecurityRulesAttribute::set_SkipVerificationInFullTrust(bool value) {
        this->_SkipVerificationInFullTrust_k__BackingField = value;
        return get_SkipVerificationInFullTrust();
    }
    
}}
namespace System { namespace Security {
    
    
    void SecuritySafeCriticalAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityState::constructor() {
    }
    
    bool SecurityState::IsStateAvailable() {
        System::AppDomainManager *adm = System::AppDomain::get_CurrentDomain()->get_DomainManager();
        if((adm ==  nullptr)) 
        {
            return false;
        }
        return adm->CheckSecuritySettings_2015fecad7c95253(this);
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityTransparentAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void SecurityTreatAsSafeAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void SuppressUnmanagedCodeSecurityAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void UnverifiableCodeAttribute::constructor() {
    }
    
}}
namespace System { namespace Security {
    
    
    void VerificationException::constructor() {
    }
    
    void VerificationException::constructor(System::String* message) {
    }
    
    void VerificationException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
    void VerificationException::constructor(System::String* message, System::Exception* innerException) {
    }
    
}}
namespace System { namespace Security {
    
    
    void XmlSyntaxException::constructor() {
    }
    
    void XmlSyntaxException::constructor(int32_t lineNumber) {
    }
    
    void XmlSyntaxException::constructor(int32_t lineNumber, System::String* message) {
    }
    
    void XmlSyntaxException::constructor(System::String* message) {
    }
    
    void XmlSyntaxException::constructor(System::String* message, System::Exception* inner) {
    }
    
    void XmlSyntaxException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void AccessRule::constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        if(!(cli::is<System::Security::Principal::SecurityIdentifier>(identity))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("identity"));
        }
        if((((int32_t)(type) < 0) || ((int32_t)(type) > 1))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("type"));
        }
        if((accessMask ==  0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>();
        }
        this->type = type;
    }
    
    AccessControlType AccessRule::get_AccessControlType() {
        return this->type;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void AceEnumerator::constructor(GenericAcl* owner) {
        this->owner = owner;
    }
    
    bool AceEnumerator::MoveNext() {
        if(((this->current + 1) ==  this->owner->get_Count_5cd77c86ebcd1b2c())) 
        {
            return false;
        }
        this->current++;
        return true;
    }
    
    void AceEnumerator::Reset() {
        this->current = -1;
    }
    
    GenericAce* AceEnumerator::get_Current() {
        return (this->current < 0) ? nullptr : this->owner->get_Item_60d48735f5e5392f(this->current);
    }
    
    System::Object* AceEnumerator::get_Current2() {
        return this->get_Current();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void AuditRule::constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags) {
        if(!(cli::is<System::Security::Principal::SecurityIdentifier>(identity))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("identity"));
        }
        if((accessMask ==  0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>();
        }
        this->auditFlags = auditFlags;
    }
    
    AuditFlags AuditRule::get_AuditFlags() {
        return this->auditFlags;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void AuthorizationRule::constructor() {
    }
    
    void AuthorizationRule::constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        if(!(cli::is<System::Security::Principal::SecurityIdentifier>(identity))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("identity"));
        }
        if((accessMask ==  0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>();
        }
        this->identity = identity;
        this->accessMask = accessMask;
        this->isInherited = isInherited;
        this->inheritanceFlags = inheritanceFlags;
        this->propagationFlags = propagationFlags;
    }
    
    System::Security::Principal::IdentityReference* AuthorizationRule::get_IdentityReference() {
        return this->identity;
    }
    
    InheritanceFlags AuthorizationRule::get_InheritanceFlags() {
        return this->inheritanceFlags;
    }
    
    bool AuthorizationRule::get_IsInherited() {
        return this->isInherited;
    }
    
    PropagationFlags AuthorizationRule::get_PropagationFlags() {
        return this->propagationFlags;
    }
    
    int32_t AuthorizationRule::get_AccessMask() {
        return this->accessMask;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void AuthorizationRuleCollection::constructor(cli::array<AuthorizationRule*>* rules) {
        this->get_InnerList()->AddRange_a8bb4db32a72ffe(rules);
    }
    
    void AuthorizationRuleCollection::CopyTo2(cli::array<AuthorizationRule*>* rules, int32_t index) {
        this->get_InnerList()->CopyTo_2bc540dad3c25b9e(rules, index);
    }
    
    AuthorizationRule* AuthorizationRuleCollection::get_Item(int32_t index) {
        return cli::cast<AuthorizationRule*>(this->get_InnerList()->get_Item_fd0155f142ae570(index));
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CommonAce::constructor(AceFlags flags, AceQualifier qualifier, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, bool isCallback, cli::array<unsigned char>* opaque) {
        this->set_AccessMask(accessMask);
        this->set_SecurityIdentifier(sid);
    }
    
    void CommonAce::constructor(AceType type, AceFlags flags, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, cli::array<unsigned char>* opaque) {
        this->set_AccessMask(accessMask);
        this->set_SecurityIdentifier(sid);
    }
    
    void CommonAce::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
        int32_t len = (int32_t)(GenericAce::ReadUShort(binaryForm, (offset + 2)));
        if((offset > (binaryForm->get_Length() - len))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACE - truncated"), _T("binaryForm"));
        }
        if((len < (8 + System::Security::Principal::SecurityIdentifier::MinBinaryLength))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACE"), _T("binaryForm"));
        }
        this->set_AccessMask(GenericAce::ReadInt(binaryForm, (offset + 4)));
        this->set_SecurityIdentifier(cli::gcnew<System::Security::Principal::SecurityIdentifier>(binaryForm, (offset + 8)));
        int32_t opaqueLen = (len - (8 + this->get_SecurityIdentifier()->get_BinaryLength()));
        if((opaqueLen > 0)) 
        {
            cli::array<unsigned char> *opaque = (new cli::array<unsigned char>(opaqueLen));
            System::Array::Copy2(binaryForm, ((offset + 8) + this->get_SecurityIdentifier()->get_BinaryLength()), opaque, 0, opaqueLen);
        }
    }
    
    void CommonAce::GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) {
        int32_t len = this->get_BinaryLength_9e9ea5e224e95c31();
        binaryForm->at(offset) = (unsigned char)((unsigned char)(int32_t)(this->get_AceType()));
        binaryForm->at((offset + 1)) = (unsigned char)(this->get_AceFlags());
        GenericAce::WriteUShort((uint16_t)len, binaryForm, (offset + 2));
        GenericAce::WriteInt(this->get_AccessMask(), binaryForm, (offset + 4));
        this->get_SecurityIdentifier()->GetBinaryForm(binaryForm, (offset + 8));
        cli::array<unsigned char> *opaque = QualifiedAce::GetOpaque();
        if((opaque != nullptr)) 
        {
            System::Array::Copy2(opaque, 0, binaryForm, ((offset + 8) + this->get_SecurityIdentifier()->get_BinaryLength()), opaque->get_Length());
        }
    }
    
    int32_t CommonAce::MaxOpaqueLength(bool isCallback) {
        return 65459;
    }
    
    System::String* CommonAce::GetSddlForm_9a01bbfdef8a4d87() {
        if((this->get_OpaqueLength() != 0)) 
        {
            throw cli::gcnew<System::NotImplementedException>(_T("Unable to convert conditional ACEs to SDDL"));
        }
        return System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("({0};{1};{2};;;{3})"), (new cli::array<System::Object*>({GenericAce::GetSddlAceType(this->get_AceType()), GenericAce::GetSddlAceFlags(this->get_AceFlags()), KnownAce::GetSddlAccessRights(this->get_AccessMask()), this->get_SecurityIdentifier()->GetSddlForm()})));
    }
    
    AceType CommonAce::ConvertType(AceQualifier qualifier, bool isCallback) {
        switch(qualifier) {
            case AceQualifier::AccessAllowed: case_1584: {
                if(isCallback) 
                {
                    return AceType::AccessAllowedCallback;
                }
                 else 
                {
                    return AceType::AccessAllowed;
                }
            }
            case AceQualifier::AccessDenied: case_1585: {
                if(isCallback) 
                {
                    return AceType::AccessDeniedCallback;
                }
                 else 
                {
                    return AceType::AccessDenied;
                }
            }
            case AceQualifier::SystemAlarm: case_1586: {
                if(isCallback) 
                {
                    return AceType::SystemAlarmCallback;
                }
                 else 
                {
                    return AceType::SystemAlarm;
                }
            }
            case AceQualifier::SystemAudit: case_1587: {
                if(isCallback) 
                {
                    return AceType::SystemAuditCallback;
                }
                 else 
                {
                    return AceType::SystemAudit;
                }
            }
            default: case_1588: {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Unrecognized ACE qualifier: "), cli::box(qualifier)), _T("qualifier"));
            }
        }
    }
    
    int32_t CommonAce::get_BinaryLength_9e9ea5e224e95c31() {
        return ((8 + this->get_SecurityIdentifier()->get_BinaryLength()) + this->get_OpaqueLength());
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CommonAcl::constructor(bool isContainer, bool isDS, unsigned char revision) {
    }
    
    void CommonAcl::constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity) {
        this->is_container = isContainer;
        this->is_ds = isDS;
        this->revision = revision;
        this->list = cli::gcnew<System::Collections::Generic::List<GenericAce*>>(capacity);
    }
    
    void CommonAcl::GetBinaryForm_f4afc682e7e10d18(cli::array<unsigned char>* binaryForm, int32_t offset) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonAcl::Purge(System::Security::Principal::SecurityIdentifier* sid) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonAcl::RemoveInheritedAces() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* CommonAcl::GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t CommonAcl::get_BinaryLength_4ea089e3a02d2299() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t CommonAcl::get_Count_5cd77c86ebcd1b2c() {
        return this->list->get_Count();
    }
    
    bool CommonAcl::get_IsCanonical() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CommonAcl::get_IsContainer() {
        return this->is_container;
    }
    
    bool CommonAcl::get_IsDS() {
        return this->is_ds;
    }
    
    GenericAce* CommonAcl::get_Item_60d48735f5e5392f(int32_t index) {
        return this->list->get_Item(index);
    }
    
    GenericAce* CommonAcl::set_Item_bfb6c47e01525adb(int32_t index, GenericAce* value) {
        this->list->set_Item(index, value);
        return get_Item_60d48735f5e5392f(index);
    }
    
    unsigned char CommonAcl::get_Revision_d515f8407d8d1240() {
        return this->revision;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CommonObjectSecurity::constructor(bool isContainer) {
    }
    
    AuthorizationRuleCollection* CommonObjectSecurity::GetAccessRules(bool includeExplicit, bool includeInherited, System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuthorizationRuleCollection* CommonObjectSecurity::GetAuditRules(bool includeExplicit, bool includeInherited, System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::AddAccessRule(AccessRule* rule) {
        this->access_rules->Add(rule);
        this->set_AccessRulesModified(true);
    }
    
    bool CommonObjectSecurity::RemoveAccessRule(AccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::RemoveAccessRuleAll(AccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::RemoveAccessRuleSpecific(AccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::ResetAccessRule(AccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::SetAccessRule(AccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CommonObjectSecurity::ModifyAccess_f072698aed397d6b(AccessControlModification modification, AccessRule* rule, bool modified) {
        for(auto tmp_500 : this->access_rules) {
            auto r = cli::cast<AccessRule*>(tmp_500);
            {
                if((rule != r)) 
                {
                    continue;
                }
                switch(modification) {
                    case AccessControlModification::Add: case_1589: {
                        AddAccessRule(rule);
                        break;
                    }
                    case AccessControlModification::Set: case_1590: {
                        SetAccessRule(rule);
                        break;
                    }
                    case AccessControlModification::Reset: case_1591: {
                        ResetAccessRule(rule);
                        break;
                    }
                    case AccessControlModification::Remove: case_1592: {
                        RemoveAccessRule(rule);
                        break;
                    }
                    case AccessControlModification::RemoveAll: case_1593: {
                        RemoveAccessRuleAll(rule);
                        break;
                    }
                    case AccessControlModification::RemoveSpecific: case_1594: {
                        RemoveAccessRuleSpecific(rule);
                        break;
                    }
                }
                modified = true;
                return true;
            }
        }
        modified = false;
        return false;
    }
    
    void CommonObjectSecurity::AddAuditRule(AuditRule* rule) {
        this->audit_rules->Add(rule);
        this->set_AuditRulesModified(true);
    }
    
    bool CommonObjectSecurity::RemoveAuditRule(AuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::RemoveAuditRuleAll(AuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::RemoveAuditRuleSpecific(AuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonObjectSecurity::SetAuditRule(AuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CommonObjectSecurity::ModifyAudit_f86f011c1cc059a7(AccessControlModification modification, AuditRule* rule, bool modified) {
        for(auto tmp_501 : this->audit_rules) {
            auto r = cli::cast<AuditRule*>(tmp_501);
            {
                if((rule != r)) 
                {
                    continue;
                }
                switch(modification) {
                    case AccessControlModification::Add: case_1595: {
                        AddAuditRule(rule);
                        break;
                    }
                    case AccessControlModification::Set: case_1596: {
                        SetAuditRule(rule);
                        break;
                    }
                    case AccessControlModification::Remove: case_1597: {
                        RemoveAuditRule(rule);
                        break;
                    }
                    case AccessControlModification::RemoveAll: case_1598: {
                        RemoveAuditRuleAll(rule);
                        break;
                    }
                    case AccessControlModification::RemoveSpecific: case_1599: {
                        RemoveAuditRuleSpecific(rule);
                        break;
                    }
                }
                this->set_AuditRulesModified(true);
                modified = true;
                return true;
            }
        }
        modified = false;
        return false;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CommonSecurityDescriptor::constructor(bool isContainer, bool isDS, RawSecurityDescriptor* rawSecurityDescriptor) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::constructor(bool isContainer, bool isDS, System::String* sddlForm) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::constructor(bool isContainer, bool isDS, cli::array<unsigned char>* binaryForm, int32_t offset) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::constructor(bool isContainer, bool isDS, ControlFlags flags, System::Security::Principal::SecurityIdentifier* owner, System::Security::Principal::SecurityIdentifier* group, SystemAcl* systemAcl, DiscretionaryAcl* discretionaryAcl) {
        this->isContainer = isContainer;
        this->isDS = isDS;
        this->flags = flags;
        this->owner = owner;
        this->group = group;
        this->systemAcl = systemAcl;
        this->discretionaryAcl = discretionaryAcl;
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::PurgeAccessControl(System::Security::Principal::SecurityIdentifier* sid) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::PurgeAudit(System::Security::Principal::SecurityIdentifier* sid) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CommonSecurityDescriptor::SetSystemAclProtection(bool isProtected, bool preserveInheritance) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    ControlFlags CommonSecurityDescriptor::get_ControlFlags_5819543aa2ed7520() {
        return this->flags;
    }
    
    DiscretionaryAcl* CommonSecurityDescriptor::get_DiscretionaryAcl() {
        return this->discretionaryAcl;
    }
    
    DiscretionaryAcl* CommonSecurityDescriptor::set_DiscretionaryAcl(DiscretionaryAcl* value) {
        if((value ==  nullptr)) 
        {
        }
        this->discretionaryAcl = value;
        return get_DiscretionaryAcl();
    }
    
    System::Security::Principal::SecurityIdentifier* CommonSecurityDescriptor::get_Group_86703f8c66d04ea6() {
        return this->group;
    }
    
    System::Security::Principal::SecurityIdentifier* CommonSecurityDescriptor::set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier* value) {
        this->group = value;
        return get_Group_86703f8c66d04ea6();
    }
    
    bool CommonSecurityDescriptor::get_IsContainer() {
        return this->isContainer;
    }
    
    bool CommonSecurityDescriptor::get_IsDiscretionaryAclCanonical() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CommonSecurityDescriptor::get_IsDS() {
        return this->isDS;
    }
    
    bool CommonSecurityDescriptor::get_IsSystemAclCanonical() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Security::Principal::SecurityIdentifier* CommonSecurityDescriptor::get_Owner_fe0200e7078f0b90() {
        return this->owner;
    }
    
    System::Security::Principal::SecurityIdentifier* CommonSecurityDescriptor::set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier* value) {
        this->owner = value;
        return get_Owner_fe0200e7078f0b90();
    }
    
    SystemAcl* CommonSecurityDescriptor::get_SystemAcl() {
        return this->systemAcl;
    }
    
    SystemAcl* CommonSecurityDescriptor::set_SystemAcl(SystemAcl* value) {
        this->systemAcl = value;
        return get_SystemAcl();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CompoundAce::constructor(AceFlags flags, int32_t accessMask, CompoundAceType compoundAceType, System::Security::Principal::SecurityIdentifier* sid) {
        this->compound_ace_type = compoundAceType;
        this->set_AccessMask(accessMask);
        this->set_SecurityIdentifier(sid);
    }
    
    void CompoundAce::GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* CompoundAce::GetSddlForm_9a01bbfdef8a4d87() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t CompoundAce::get_BinaryLength_9e9ea5e224e95c31() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    CompoundAceType CompoundAce::get_CompoundAceType() {
        return this->compound_ace_type;
    }
    
    CompoundAceType CompoundAce::set_CompoundAceType(CompoundAceType value) {
        this->compound_ace_type = value;
        return get_CompoundAceType();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CryptoKeyAccessRule::constructor(System::Security::Principal::IdentityReference* identity, CryptoKeyRights cryptoKeyRights, AccessControlType type) {
        this->rights = cryptoKeyRights;
    }
    
    void CryptoKeyAccessRule::constructor(System::String* identity, CryptoKeyRights cryptoKeyRights, AccessControlType type) {
    }
    
    CryptoKeyRights CryptoKeyAccessRule::get_CryptoKeyRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CryptoKeyAuditRule::constructor(System::Security::Principal::IdentityReference* identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags) {
        this->rights = cryptoKeyRights;
    }
    
    void CryptoKeyAuditRule::constructor(System::String* identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags) {
    }
    
    CryptoKeyRights CryptoKeyAuditRule::get_CryptoKeyRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void CryptoKeySecurity::constructor() {
    }
    
    void CryptoKeySecurity::constructor(CommonSecurityDescriptor* securityDescriptor) {
    }
    
    AccessRule* CryptoKeySecurity::AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        return cli::gcnew<CryptoKeyAccessRule>(identityReference, (CryptoKeyRights)(accessMask), type);
    }
    
    void CryptoKeySecurity::AddAccessRule(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CryptoKeySecurity::RemoveAccessRule(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::RemoveAccessRuleAll(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::RemoveAccessRuleSpecific(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::ResetAccessRule(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::SetAccessRule(CryptoKeyAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* CryptoKeySecurity::AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        return cli::gcnew<CryptoKeyAuditRule>(identityReference, (CryptoKeyRights)(accessMask), flags);
    }
    
    void CryptoKeySecurity::AddAuditRule(CryptoKeyAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool CryptoKeySecurity::RemoveAuditRule(CryptoKeyAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::RemoveAuditRuleAll(CryptoKeyAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::RemoveAuditRuleSpecific(CryptoKeyAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void CryptoKeySecurity::SetAuditRule(CryptoKeyAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* CryptoKeySecurity::get_AccessRightType_1a84bfe4f6428b49() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* CryptoKeySecurity::get_AccessRuleType_5fe73642cdc6c868() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* CryptoKeySecurity::get_AuditRuleType_9f84e3023e989cd7() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    int32_t  CustomAce::MaxOpaqueLength;
    
    void CustomAce::constructor(AceType type, AceFlags flags, cli::array<unsigned char>* opaque) {
        SetOpaque(opaque);
    }
    
    void CustomAce::GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<unsigned char>* CustomAce::GetOpaque() {
        return cli::cast<cli::array<unsigned char>*>(cli::import(this->opaque)->Clone());
    }
    
    void CustomAce::SetOpaque(cli::array<unsigned char>* opaque) {
        if((opaque ==  nullptr)) 
        {
            this->opaque = nullptr;
        }
         else 
        {
            this->opaque = cli::cast<cli::array<unsigned char>*>(cli::import(opaque)->Clone());
        }
    }
    
    System::String* CustomAce::GetSddlForm_9a01bbfdef8a4d87() {
        throw cli::gcnew<System::NotSupportedException>();
    }
    
    int32_t CustomAce::get_BinaryLength_9e9ea5e224e95c31() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    int32_t CustomAce::get_OpaqueLength() {
        return this->opaque->get_Length();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void DirectoryObjectSecurity::constructor() {
    }
    
    void DirectoryObjectSecurity::constructor(CommonSecurityDescriptor* securityDescriptor) {
        if((securityDescriptor ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("securityDescriptor"));
        }
    }
    
    AccessRule* DirectoryObjectSecurity::AccessRuleFactory_d3022bba09c70f96(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* DirectoryObjectSecurity::AuditRuleFactory_55a31b54ea3f623(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuthorizationRuleCollection* DirectoryObjectSecurity::GetAccessRules(bool includeExplicit, bool includeInherited, System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuthorizationRuleCollection* DirectoryObjectSecurity::GetAuditRules(bool includeExplicit, bool includeInherited, System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::AddAccessRule(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::AddAuditRule(ObjectAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DirectoryObjectSecurity::ModifyAccess_f072698aed397d6b(AccessControlModification modification, AccessRule* rule, bool modified) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DirectoryObjectSecurity::ModifyAudit_f86f011c1cc059a7(AccessControlModification modification, AuditRule* rule, bool modified) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DirectoryObjectSecurity::RemoveAccessRule(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::RemoveAccessRuleAll(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::RemoveAccessRuleSpecific(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DirectoryObjectSecurity::RemoveAuditRule(ObjectAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::RemoveAuditRuleAll(ObjectAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::RemoveAuditRuleSpecific(ObjectAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::ResetAccessRule(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::SetAccessRule(ObjectAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DirectoryObjectSecurity::SetAuditRule(ObjectAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void DirectorySecurity::constructor() {
        throw cli::gcnew<System::PlatformNotSupportedException>();
    }
    
    void DirectorySecurity::constructor(System::String* name, AccessControlSections includeSections) {
        throw cli::gcnew<System::PlatformNotSupportedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void DiscretionaryAcl::constructor(bool isContainer, bool isDS, int32_t capacity) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::constructor(bool isContainer, bool isDS, RawAcl* rawAcl) {
    }
    
    void DiscretionaryAcl::constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity) {
    }
    
    void DiscretionaryAcl::AddAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::AddAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DiscretionaryAcl::RemoveAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool DiscretionaryAcl::RemoveAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::RemoveAccessSpecific(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::RemoveAccessSpecific2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::SetAccess(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void DiscretionaryAcl::SetAccess2(AccessControlType accessType, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void EventWaitHandleAccessRule::constructor(System::Security::Principal::IdentityReference* identity, EventWaitHandleRights eventRights, AccessControlType type) {
        this->rights = eventRights;
    }
    
    void EventWaitHandleAccessRule::constructor(System::String* identity, EventWaitHandleRights eventRights, AccessControlType type) {
    }
    
    EventWaitHandleRights EventWaitHandleAccessRule::get_EventWaitHandleRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void EventWaitHandleAuditRule::constructor(System::Security::Principal::IdentityReference* identity, EventWaitHandleRights eventRights, AuditFlags flags) {
        if((((int32_t)(eventRights) < 2) || ((int32_t)(eventRights) > 2031619))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("eventRights"));
        }
        if((((int32_t)(flags) < 0) || ((int32_t)(flags) > 2))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("flags"));
        }
        if(System::Security::Principal::IdentityReference::op_Equality(identity, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("identity"));
        }
        if(((int32_t)(eventRights) ==  0)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("eventRights"));
        }
        if(((int32_t)(flags) ==  0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("flags"));
        }
        if(!(cli::is<System::Security::Principal::SecurityIdentifier>(identity))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("identity"));
        }
        this->rights = eventRights;
    }
    
    EventWaitHandleRights EventWaitHandleAuditRule::get_EventWaitHandleRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void EventWaitHandleSecurity::constructor() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AccessRule* EventWaitHandleSecurity::AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        return cli::gcnew<EventWaitHandleAccessRule>(identityReference, (EventWaitHandleRights)(accessMask), type);
    }
    
    void EventWaitHandleSecurity::AddAccessRule(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool EventWaitHandleSecurity::RemoveAccessRule(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::RemoveAccessRuleAll(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::RemoveAccessRuleSpecific(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::ResetAccessRule(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::SetAccessRule(EventWaitHandleAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* EventWaitHandleSecurity::AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        return cli::gcnew<EventWaitHandleAuditRule>(identityReference, (EventWaitHandleRights)(accessMask), flags);
    }
    
    void EventWaitHandleSecurity::AddAuditRule(EventWaitHandleAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool EventWaitHandleSecurity::RemoveAuditRule(EventWaitHandleAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::RemoveAuditRuleAll(EventWaitHandleAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::RemoveAuditRuleSpecific(EventWaitHandleAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void EventWaitHandleSecurity::SetAuditRule(EventWaitHandleAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* EventWaitHandleSecurity::get_AccessRightType_1a84bfe4f6428b49() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* EventWaitHandleSecurity::get_AccessRuleType_5fe73642cdc6c868() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* EventWaitHandleSecurity::get_AuditRuleType_9f84e3023e989cd7() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void FileSecurity::constructor() {
        throw cli::gcnew<System::PlatformNotSupportedException>();
    }
    
    void FileSecurity::constructor(System::String* fileName, AccessControlSections includeSections) {
        throw cli::gcnew<System::PlatformNotSupportedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void FileSystemAccessRule::constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, AccessControlType type) {
    }
    
    void FileSystemAccessRule::constructor(System::String* identity, FileSystemRights fileSystemRights, AccessControlType type) {
    }
    
    void FileSystemAccessRule::constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        this->rights = fileSystemRights;
    }
    
    void FileSystemAccessRule::constructor(System::String* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
    }
    
    FileSystemRights FileSystemAccessRule::get_FileSystemRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void FileSystemAuditRule::constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, AuditFlags flags) {
    }
    
    void FileSystemAuditRule::constructor(System::String* identity, FileSystemRights fileSystemRights, AuditFlags flags) {
    }
    
    void FileSystemAuditRule::constructor(System::Security::Principal::IdentityReference* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        this->rights = fileSystemRights;
    }
    
    void FileSystemAuditRule::constructor(System::String* identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
    }
    
    FileSystemRights FileSystemAuditRule::get_FileSystemRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void FileSystemSecurity::constructor(bool isContainer) {
    }
    
    void FileSystemSecurity::constructor(bool isContainer, System::String* name, AccessControlSections includeSections) {
    }
    
    AccessRule* FileSystemSecurity::AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        return cli::gcnew<FileSystemAccessRule>(identityReference, (FileSystemRights)(accessMask), inheritanceFlags, propagationFlags, type);
    }
    
    void FileSystemSecurity::AddAccessRule(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool FileSystemSecurity::RemoveAccessRule(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::RemoveAccessRuleAll(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::RemoveAccessRuleSpecific(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::ResetAccessRule(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::SetAccessRule(FileSystemAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* FileSystemSecurity::AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        return cli::gcnew<FileSystemAuditRule>(identityReference, (FileSystemRights)(accessMask), inheritanceFlags, propagationFlags, flags);
    }
    
    void FileSystemSecurity::AddAuditRule(FileSystemAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool FileSystemSecurity::RemoveAuditRule(FileSystemAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::RemoveAuditRuleAll(FileSystemAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::RemoveAuditRuleSpecific(FileSystemAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void FileSystemSecurity::SetAuditRule(FileSystemAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* FileSystemSecurity::get_AccessRightType_1a84bfe4f6428b49() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* FileSystemSecurity::get_AccessRuleType_5fe73642cdc6c868() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* FileSystemSecurity::get_AuditRuleType_9f84e3023e989cd7() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  GenericAce::__f__switch_mapD;
    System::Collections::Generic::Dictionary<System::String*, int32_t>*  GenericAce::__f__switch_mapE;
    
    void GenericAce::constructor(AceType type, AceFlags flags) {
        if(((int32_t)(type) > 16)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("type"));
        }
        this->ace_type = type;
        this->ace_flags = flags;
    }
    
    void GenericAce::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
        if((binaryForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryForm"));
        }
        if(((offset < 0) || (offset > (binaryForm->get_Length() - 2)))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), cli::box(offset), _T("Offset out of range"));
        }
        this->ace_type = (AceType)(binaryForm->at(offset));
        this->ace_flags = (AceFlags)(binaryForm->at((offset + 1)));
    }
    
    GenericAce* GenericAce::Copy() {
        cli::array<unsigned char> *buffer = (new cli::array<unsigned char>(this->get_BinaryLength_9e9ea5e224e95c31()));
        GetBinaryForm_69a46165f9f6ad87(buffer, 0);
        return GenericAce::CreateFromBinaryForm(buffer, 0);
    }
    
    GenericAce* GenericAce::CreateFromBinaryForm(cli::array<unsigned char>* binaryForm, int32_t offset) {
        if((binaryForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryForm"));
        }
        if(((offset < 0) || (offset > (binaryForm->get_Length() - 1)))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), cli::box(offset), _T("Offset out of range"));
        }
        AceType type = (AceType)(binaryForm->at(offset));
        if(IsObjectType(type)) 
        {
            return cli::gcnew<ObjectAce>(binaryForm, offset);
        }
         else 
        {
            return cli::gcnew<CommonAce>(binaryForm, offset);
        }
    }
    
    bool GenericAce::Equals_ed975d2f4a7d193e(System::Object* o) {
        return op_Equality(this, cli::as<GenericAce*>(o));
    }
    
    int32_t GenericAce::GetHashCode_6648aef0f235ee6c() {
        cli::array<unsigned char> *buffer = (new cli::array<unsigned char>(this->get_BinaryLength_9e9ea5e224e95c31()));
        GetBinaryForm_69a46165f9f6ad87(buffer, 0);
        int32_t code = 0;
        for(int32_t i = 0; (i < buffer->get_Length()); ++i){
            code = ((code << 3) | ((code >> 29) & 7));
            (code = code ^ ((int32_t)(buffer->at(i)) & 255));
        }
        return code;
    }
    
    GenericAce* GenericAce::CreateFromSddlForm(System::String* sddlForm, int32_t pos) {
        if(((int32_t)(sddlForm->get_Chars(pos)) != 40)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
        }
        int32_t endPos = sddlForm->IndexOf5(u')', pos);
        if((endPos < 0)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
        }
        int32_t count = (endPos - (pos + 1));
        System::String *elementsStr = sddlForm->Substring2((pos + 1), count);
        elementsStr = elementsStr->ToUpperInvariant();
        cli::array<System::String*> *elements = elementsStr->Split((new cli::array<char16_t>({u';'})));
        if((elements->get_Length() != 6)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
        }
        ObjectAceFlags objFlags = ObjectAceFlags::None;
        AceType type = ParseSddlAceType(elements->at(0));
        AceFlags flags = ParseSddlAceFlags(elements->at(1));
        int32_t accessMask = ParseSddlAccessRights(elements->at(2));
        System::Guid objectType = (*System::Guid::Empty);
        if(!(System::String::IsNullOrEmpty(elements->at(3)))) 
        {
            objectType = cli::ctor<System::Guid>(elements->at(3));
            (objFlags = (ObjectAceFlags)(((int32_t)(objFlags) | 1)));
        }
        System::Guid inhObjectType = (*System::Guid::Empty);
        if(!(System::String::IsNullOrEmpty(elements->at(4)))) 
        {
            inhObjectType = cli::ctor<System::Guid>(elements->at(4));
            (objFlags = (ObjectAceFlags)(((int32_t)(objFlags) | 2)));
        }
        System::Security::Principal::SecurityIdentifier *sid = cli::gcnew<System::Security::Principal::SecurityIdentifier>(elements->at(5));
        if((((int32_t)(type) ==  9) || ((int32_t)(type) ==  10))) 
        {
            throw cli::gcnew<System::NotImplementedException>(_T("Conditional ACEs not supported"));
        }
        pos = (endPos + 1);
        if(IsObjectType(type)) 
        {
            return cli::gcnew<ObjectAce>(type, flags, accessMask, sid, objFlags, objectType, inhObjectType, nullptr);
        }
         else 
        {
            if(((int32_t)(objFlags) != 0)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
            }
            return cli::gcnew<CommonAce>(type, flags, accessMask, sid, nullptr);
        }
    }
    
    bool GenericAce::IsObjectType(AceType type) {
        return (((((((((int32_t)(type) ==  11) || ((int32_t)(type) ==  5)) || ((int32_t)(type) ==  12)) || ((int32_t)(type) ==  6)) || ((int32_t)(type) ==  16)) || ((int32_t)(type) ==  8)) || ((int32_t)(type) ==  15)) || ((int32_t)(type) ==  7));
    }
    
    System::String* GenericAce::GetSddlAceType(AceType type) {
        switch(type) {
            case AceType::AccessAllowed: case_1600: {
                return _T("A");
            }
            case AceType::AccessDenied: case_1601: {
                return _T("D");
            }
            case AceType::AccessAllowedObject: case_1602: {
                return _T("OA");
            }
            case AceType::AccessDeniedObject: case_1603: {
                return _T("OD");
            }
            case AceType::SystemAudit: case_1604: {
                return _T("AU");
            }
            case AceType::SystemAlarm: case_1605: {
                return _T("AL");
            }
            case AceType::SystemAuditObject: case_1606: {
                return _T("OU");
            }
            case AceType::SystemAlarmObject: case_1607: {
                return _T("OL");
            }
            case AceType::AccessAllowedCallback: case_1608: {
                return _T("XA");
            }
            case AceType::AccessDeniedCallback: case_1609: {
                return _T("XD");
            }
            default: case_1610: {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Unable to convert to SDDL ACE type: "), cli::box(type)), _T("type"));
            }
        }
    }
    
    AceType GenericAce::ParseSddlAceType(System::String* type) {
        System::String* tmp_502 = type;
        ::System::Int32 tmp_503 = -1;
        if(::System::String::Equals3(tmp_502, _T("A"))) tmp_503 = 0;
        if(::System::String::Equals3(tmp_502, _T("D"))) tmp_503 = 1;
        if(::System::String::Equals3(tmp_502, _T("OA"))) tmp_503 = 2;
        if(::System::String::Equals3(tmp_502, _T("OD"))) tmp_503 = 3;
        if(::System::String::Equals3(tmp_502, _T("AU"))) tmp_503 = 4;
        if(::System::String::Equals3(tmp_502, _T("AL"))) tmp_503 = 5;
        if(::System::String::Equals3(tmp_502, _T("OU"))) tmp_503 = 6;
        if(::System::String::Equals3(tmp_502, _T("OL"))) tmp_503 = 7;
        if(::System::String::Equals3(tmp_502, _T("XA"))) tmp_503 = 8;
        if(::System::String::Equals3(tmp_502, _T("XD"))) tmp_503 = 9;
        switch(tmp_503)
        {
            case 0: case_1611: 
            {
                return AceType::AccessAllowed;
            }
            case 1: case_1612: 
            {
                return AceType::AccessDenied;
            }
            case 2: case_1613: 
            {
                return AceType::AccessAllowedObject;
            }
            case 3: case_1614: 
            {
                return AceType::AccessDeniedObject;
            }
            case 4: case_1615: 
            {
                return AceType::SystemAudit;
            }
            case 5: case_1616: 
            {
                return AceType::SystemAlarm;
            }
            case 6: case_1617: 
            {
                return AceType::SystemAuditObject;
            }
            case 7: case_1618: 
            {
                return AceType::SystemAlarmObject;
            }
            case 8: case_1619: 
            {
                return AceType::AccessAllowedCallback;
            }
            case 9: case_1620: 
            {
                return AceType::AccessDeniedCallback;
            }
            default: case_1621: 
            {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Unable to convert SDDL to ACE type: "), type), _T("type"));
            }
        }
    }
    
    System::String* GenericAce::GetSddlAceFlags(AceFlags flags) {
        System::Text::StringBuilder *result = cli::gcnew<System::Text::StringBuilder>();
        if(((int32_t)(((int32_t)(flags) & 1)) != 0)) 
        {
            result->Append2(_T("OI"));
        }
        if(((int32_t)(((int32_t)(flags) & 2)) != 0)) 
        {
            result->Append2(_T("CI"));
        }
        if(((int32_t)(((int32_t)(flags) & 4)) != 0)) 
        {
            result->Append2(_T("NP"));
        }
        if(((int32_t)(((int32_t)(flags) & 8)) != 0)) 
        {
            result->Append2(_T("IO"));
        }
        if(((int32_t)(((int32_t)(flags) & 16)) != 0)) 
        {
            result->Append2(_T("ID"));
        }
        if(((int32_t)(((int32_t)(flags) & 64)) != 0)) 
        {
            result->Append2(_T("SA"));
        }
        if(((int32_t)(((int32_t)(flags) & 128)) != 0)) 
        {
            result->Append2(_T("FA"));
        }
        return result->ToString_1636a0751cb9ac11();
    }
    
    AceFlags GenericAce::ParseSddlAceFlags(System::String* flags) {
        AceFlags ret = AceFlags::None;
        int32_t pos = 0;
        while((pos < (flags->get_Length() - 1))) {
            System::String *flag = flags->Substring2(pos, 2);
            System::String* tmp_504 = flag;
            ::System::Int32 tmp_505 = -1;
            if(::System::String::Equals3(tmp_504, _T("CI"))) tmp_505 = 0;
            if(::System::String::Equals3(tmp_504, _T("OI"))) tmp_505 = 1;
            if(::System::String::Equals3(tmp_504, _T("NP"))) tmp_505 = 2;
            if(::System::String::Equals3(tmp_504, _T("IO"))) tmp_505 = 3;
            if(::System::String::Equals3(tmp_504, _T("ID"))) tmp_505 = 4;
            if(::System::String::Equals3(tmp_504, _T("SA"))) tmp_505 = 5;
            if(::System::String::Equals3(tmp_504, _T("FA"))) tmp_505 = 6;
            switch(tmp_505)
            {
                case 0: case_1622: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 2)));
                    break;
                }
                case 1: case_1623: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 1)));
                    break;
                }
                case 2: case_1624: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 4)));
                    break;
                }
                case 3: case_1625: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 8)));
                    break;
                }
                case 4: case_1626: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 16)));
                    break;
                }
                case 5: case_1627: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 64)));
                    break;
                }
                case 6: case_1628: 
                {
                    (ret = (AceFlags)(((int32_t)(ret) | 128)));
                    break;
                }
                default: case_1629: 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("flags"));
                }
            }
            (pos = pos + 2);
        }
        if((pos != flags->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("flags"));
        }
        return ret;
    }
    
    int32_t GenericAce::ParseSddlAccessRights(System::String* accessMask) {
        if(accessMask->StartsWith(_T("0X"))) 
        {
            return System::Int32::Parse6(accessMask->Substring(2), System::Globalization::NumberStyles::HexNumber, System::Globalization::CultureInfo::get_InvariantCulture());
        }
         else 
        {
            if(System::Char::IsDigit2(accessMask, 0)) 
            {
                return System::Int32::Parse6(accessMask, System::Globalization::NumberStyles::Integer, System::Globalization::CultureInfo::get_InvariantCulture());
            }
             else 
            {
                return ParseSddlAliasRights(accessMask);
            }
        }
    }
    
    int32_t GenericAce::ParseSddlAliasRights(System::String* accessMask) {
        int32_t ret = 0;
        int32_t pos = 0;
        while((pos < (accessMask->get_Length() - 1))) {
            System::String *flag = accessMask->Substring2(pos, 2);
            SddlAccessRight *right = SddlAccessRight::LookupByName(flag);
            if((right ==  nullptr)) 
            {
                throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("accessMask"));
            }
            (ret = ret | right->get_Value());
            (pos = pos + 2);
        }
        if((pos != accessMask->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("accessMask"));
        }
        return ret;
    }
    
    uint16_t GenericAce::ReadUShort(cli::array<unsigned char>* buffer, int32_t offset) {
        return (uint16_t)((int32_t)(buffer->at(offset)) | ((int32_t)(buffer->at((offset + 1))) << 8));
    }
    
    int32_t GenericAce::ReadInt(cli::array<unsigned char>* buffer, int32_t offset) {
        return ((((int32_t)(buffer->at(offset)) | ((int32_t)(buffer->at((offset + 1))) << 8)) | ((int32_t)(buffer->at((offset + 2))) << 16)) | ((int32_t)(buffer->at((offset + 3))) << 24));
    }
    
    void GenericAce::WriteInt(int32_t val, cli::array<unsigned char>* buffer, int32_t offset) {
        buffer->at(offset) = (unsigned char)val;
        buffer->at((offset + 1)) = (unsigned char)(val >> 8);
        buffer->at((offset + 2)) = (unsigned char)(val >> 16);
        buffer->at((offset + 3)) = (unsigned char)(val >> 24);
    }
    
    void GenericAce::WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset) {
        buffer->at(offset) = (unsigned char)val;
        buffer->at((offset + 1)) = (unsigned char)((int32_t)(val) >> 8);
    }
    
    bool GenericAce::op_Equality(GenericAce* left, GenericAce* right) {
        if((cli::cast<System::Object*>(left) ==  nullptr)) 
        {
            return (cli::cast<System::Object*>(right) ==  nullptr);
        }
        if((cli::cast<System::Object*>(right) ==  nullptr)) 
        {
            return false;
        }
        int32_t leftLen = left->get_BinaryLength_9e9ea5e224e95c31();
        int32_t rightLen = right->get_BinaryLength_9e9ea5e224e95c31();
        if((leftLen != rightLen)) 
        {
            return false;
        }
        cli::array<unsigned char> *leftBuffer = (new cli::array<unsigned char>(leftLen));
        cli::array<unsigned char> *rightBuffer = (new cli::array<unsigned char>(rightLen));
        left->GetBinaryForm_69a46165f9f6ad87(leftBuffer, 0);
        right->GetBinaryForm_69a46165f9f6ad87(rightBuffer, 0);
        for(int32_t i = 0; (i < leftLen); ++i){
            if(((int32_t)(leftBuffer->at(i)) != (int32_t)(rightBuffer->at(i)))) 
            {
                return false;
            }
        }
        return true;
    }
    
    bool GenericAce::op_Inequality(GenericAce* left, GenericAce* right) {
        if((cli::cast<System::Object*>(left) ==  nullptr)) 
        {
            return (cli::cast<System::Object*>(right) != nullptr);
        }
        if((cli::cast<System::Object*>(right) ==  nullptr)) 
        {
            return true;
        }
        int32_t leftLen = left->get_BinaryLength_9e9ea5e224e95c31();
        int32_t rightLen = right->get_BinaryLength_9e9ea5e224e95c31();
        if((leftLen != rightLen)) 
        {
            return true;
        }
        cli::array<unsigned char> *leftBuffer = (new cli::array<unsigned char>(leftLen));
        cli::array<unsigned char> *rightBuffer = (new cli::array<unsigned char>(rightLen));
        left->GetBinaryForm_69a46165f9f6ad87(leftBuffer, 0);
        right->GetBinaryForm_69a46165f9f6ad87(rightBuffer, 0);
        for(int32_t i = 0; (i < leftLen); ++i){
            if(((int32_t)(leftBuffer->at(i)) != (int32_t)(rightBuffer->at(i)))) 
            {
                return true;
            }
        }
        return false;
    }
    
    AceFlags GenericAce::get_AceFlags() {
        return this->ace_flags;
    }
    
    AceFlags GenericAce::set_AceFlags(AceFlags value) {
        this->ace_flags = value;
        return get_AceFlags();
    }
    
    AceType GenericAce::get_AceType() {
        return this->ace_type;
    }
    
    AuditFlags GenericAce::get_AuditFlags() {
        AuditFlags ret = AuditFlags::None;
        if(((int32_t)(((int32_t)(this->ace_flags) & 64)) != 0)) 
        {
            (ret = (AuditFlags)(((int32_t)(ret) | 1)));
        }
        if(((int32_t)(((int32_t)(this->ace_flags) & 128)) != 0)) 
        {
            (ret = (AuditFlags)(((int32_t)(ret) | 2)));
        }
        return ret;
    }
    
    InheritanceFlags GenericAce::get_InheritanceFlags() {
        InheritanceFlags ret = InheritanceFlags::None;
        if(((int32_t)(((int32_t)(this->ace_flags) & 1)) != 0)) 
        {
            (ret = (InheritanceFlags)(((int32_t)(ret) | 2)));
        }
        if(((int32_t)(((int32_t)(this->ace_flags) & 2)) != 0)) 
        {
            (ret = (InheritanceFlags)(((int32_t)(ret) | 1)));
        }
        return ret;
    }
    
    bool GenericAce::get_IsInherited() {
        return ((int32_t)(((int32_t)(this->ace_flags) & 16)) != 0);
    }
    
    PropagationFlags GenericAce::get_PropagationFlags() {
        PropagationFlags ret = PropagationFlags::None;
        if(((int32_t)(((int32_t)(this->ace_flags) & 8)) != 0)) 
        {
            (ret = (PropagationFlags)(((int32_t)(ret) | 2)));
        }
        if(((int32_t)(((int32_t)(this->ace_flags) & 4)) != 0)) 
        {
            (ret = (PropagationFlags)(((int32_t)(ret) | 1)));
        }
        return ret;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    unsigned char  GenericAcl::AclRevision;
    unsigned char  GenericAcl::AclRevisionDS;
    int32_t  GenericAcl::MaxBinaryLength;
    
    GenericAcl::GenericAcl()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void GenericAcl::static_constructor() {
        AclRevision = 2;
        AclRevisionDS = 4;
        MaxBinaryLength = 65536;
    }
    
    void GenericAcl::constructor() {
    }
    
    void GenericAcl::CopyTo(cli::array<GenericAce*>* array, int32_t index) {
        if((array ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("array"));
        }
        if(((index < 0) || ((array->get_Length() - index) < this->get_Count_5cd77c86ebcd1b2c()))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("index"), _T("Index must be non-negative integer and must not exceed array length - count"));
        }
        for(int32_t i = 0; (i < this->get_Count_5cd77c86ebcd1b2c()); i++) {
            array->at((i + index)) = this->get_Item_60d48735f5e5392f(i);
        }
    }
    
    void GenericAcl::CopyTo2(System::Array* array, int32_t index) {
        CopyTo(cli::cast<cli::array<GenericAce*>*>(array), index);
    }
    
    AceEnumerator* GenericAcl::GetEnumerator() {
        return cli::gcnew<AceEnumerator>(this);
    }
    
    System::Collections::IEnumerator* GenericAcl::GetEnumerator2() {
        return GetEnumerator();
    }
    
    bool GenericAcl::get_IsSynchronized() {
        return false;
    }
    
    System::Object* GenericAcl::get_SyncRoot() {
        return this;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void GenericSecurityDescriptor::constructor() {
    }
    
    void GenericSecurityDescriptor::GetBinaryForm(cli::array<unsigned char>* binaryForm, int32_t offset) {
        ControlFlags controlFlags = this->get_ControlFlags_5819543aa2ed7520();
        binaryForm->at(offset) = get_Revision();
        binaryForm->at((offset + 1)) = this->get_InternalReservedField_e823bda30612d306();
        WriteUShort((uint16_t)((uint16_t)(int32_t)(controlFlags)), binaryForm, (offset + 2));
        int32_t pos = 20;
        if(System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Owner_fe0200e7078f0b90(), nullptr)) 
        {
            WriteInt(pos, binaryForm, (offset + 4));
            this->get_Owner_fe0200e7078f0b90()->GetBinaryForm(binaryForm, (offset + pos));
            (pos = pos + this->get_Owner_fe0200e7078f0b90()->get_BinaryLength());
        }
         else 
        {
            WriteInt(0, binaryForm, (offset + 4));
        }
        if(System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Group_86703f8c66d04ea6(), nullptr)) 
        {
            WriteInt(pos, binaryForm, (offset + 8));
            this->get_Group_86703f8c66d04ea6()->GetBinaryForm(binaryForm, (offset + pos));
            (pos = pos + this->get_Group_86703f8c66d04ea6()->get_BinaryLength());
        }
         else 
        {
            WriteInt(0, binaryForm, (offset + 8));
        }
        GenericAcl *sysAcl = this->get_InternalSacl_e5b16f647b074625();
        if(this->get_SaclPresent()) 
        {
            WriteInt(pos, binaryForm, (offset + 12));
            sysAcl->GetBinaryForm_f4afc682e7e10d18(binaryForm, (offset + pos));
            (pos = pos + this->get_InternalSacl_e5b16f647b074625()->get_BinaryLength_4ea089e3a02d2299());
        }
         else 
        {
            WriteInt(0, binaryForm, (offset + 12));
        }
        GenericAcl *discAcl = this->get_InternalDacl_5c63bd9d907ab726();
        if(this->get_DaclPresent()) 
        {
            WriteInt(pos, binaryForm, (offset + 16));
            discAcl->GetBinaryForm_f4afc682e7e10d18(binaryForm, (offset + pos));
            (pos = pos + this->get_InternalDacl_5c63bd9d907ab726()->get_BinaryLength_4ea089e3a02d2299());
        }
         else 
        {
            WriteInt(0, binaryForm, (offset + 16));
        }
    }
    
    System::String* GenericSecurityDescriptor::GetSddlForm(AccessControlSections includeSections) {
        System::Text::StringBuilder *result = cli::gcnew<System::Text::StringBuilder>();
        if((((int32_t)(((int32_t)(includeSections) & 4)) != 0) && System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Owner_fe0200e7078f0b90(), nullptr))) 
        {
            result->AppendFormat2(System::Globalization::CultureInfo::get_InvariantCulture(), _T("O:{0}"), (new cli::array<System::Object*>({this->get_Owner_fe0200e7078f0b90()->GetSddlForm()})));
        }
        if((((int32_t)(((int32_t)(includeSections) & 8)) != 0) && System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Group_86703f8c66d04ea6(), nullptr))) 
        {
            result->AppendFormat2(System::Globalization::CultureInfo::get_InvariantCulture(), _T("G:{0}"), (new cli::array<System::Object*>({this->get_Group_86703f8c66d04ea6()->GetSddlForm()})));
        }
        if((((int32_t)(((int32_t)(includeSections) & 2)) != 0) && (this->get_InternalDacl_5c63bd9d907ab726() != nullptr))) 
        {
            result->AppendFormat2(System::Globalization::CultureInfo::get_InvariantCulture(), _T("D:{0}"), (new cli::array<System::Object*>({this->get_InternalDacl_5c63bd9d907ab726()->GetSddlForm_94505cd63118717(this->get_ControlFlags_5819543aa2ed7520(), true)})));
        }
        if((((int32_t)(((int32_t)(includeSections) & 1)) != 0) && (this->get_InternalSacl_e5b16f647b074625() != nullptr))) 
        {
            result->AppendFormat2(System::Globalization::CultureInfo::get_InvariantCulture(), _T("S:{0}"), (new cli::array<System::Object*>({this->get_InternalSacl_e5b16f647b074625()->GetSddlForm_94505cd63118717(this->get_ControlFlags_5819543aa2ed7520(), false)})));
        }
        return result->ToString_1636a0751cb9ac11();
    }
    
    bool GenericSecurityDescriptor::IsSddlConversionSupported() {
        return true;
    }
    
    void GenericSecurityDescriptor::WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset) {
        buffer->at(offset) = (unsigned char)val;
        buffer->at((offset + 1)) = (unsigned char)((int32_t)(val) >> 8);
    }
    
    void GenericSecurityDescriptor::WriteInt(int32_t val, cli::array<unsigned char>* buffer, int32_t offset) {
        buffer->at(offset) = (unsigned char)val;
        buffer->at((offset + 1)) = (unsigned char)(val >> 8);
        buffer->at((offset + 2)) = (unsigned char)(val >> 16);
        buffer->at((offset + 3)) = (unsigned char)(val >> 24);
    }
    
    int32_t GenericSecurityDescriptor::get_BinaryLength() {
        int32_t len = 20;
        if(System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Owner_fe0200e7078f0b90(), nullptr)) 
        {
            (len = len + this->get_Owner_fe0200e7078f0b90()->get_BinaryLength());
        }
        if(System::Security::Principal::SecurityIdentifier::op_Inequality2(this->get_Group_86703f8c66d04ea6(), nullptr)) 
        {
            (len = len + this->get_Group_86703f8c66d04ea6()->get_BinaryLength());
        }
        if(this->get_DaclPresent()) 
        {
            (len = len + this->get_InternalDacl_5c63bd9d907ab726()->get_BinaryLength_4ea089e3a02d2299());
        }
        if(this->get_SaclPresent()) 
        {
            (len = len + this->get_InternalSacl_e5b16f647b074625()->get_BinaryLength_4ea089e3a02d2299());
        }
        return len;
    }
    
    unsigned char GenericSecurityDescriptor::get_Revision() {
        return 1;
    }
    
    GenericAcl* GenericSecurityDescriptor::get_InternalDacl_5c63bd9d907ab726() {
        return nullptr;
    }
    
    GenericAcl* GenericSecurityDescriptor::get_InternalSacl_e5b16f647b074625() {
        return nullptr;
    }
    
    unsigned char GenericSecurityDescriptor::get_InternalReservedField_e823bda30612d306() {
        return 0;
    }
    
    bool GenericSecurityDescriptor::get_DaclPresent() {
        return ((this->get_InternalDacl_5c63bd9d907ab726() != nullptr) && ((int32_t)(((int32_t)(this->get_ControlFlags_5819543aa2ed7520()) & 4)) != 0));
    }
    
    bool GenericSecurityDescriptor::get_SaclPresent() {
        return ((this->get_InternalSacl_e5b16f647b074625() != nullptr) && ((int32_t)(((int32_t)(this->get_ControlFlags_5819543aa2ed7520()) & 16)) != 0));
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void KnownAce::constructor(AceType type, AceFlags flags) {
    }
    
    void KnownAce::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
    }
    
    System::String* KnownAce::GetSddlAccessRights(int32_t accessMask) {
        System::String *ret = GetSddlAliasRights(accessMask);
        if(!(System::String::IsNullOrEmpty(ret))) 
        {
            return ret;
        }
        return System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("0x{0:x}"), (new cli::array<System::Object*>({cli::box(accessMask)})));
    }
    
    System::String* KnownAce::GetSddlAliasRights(int32_t accessMask) {
        cli::array<SddlAccessRight*> *rights = SddlAccessRight::Decompose(accessMask);
        if((rights ==  nullptr)) 
        {
            return nullptr;
        }
        System::Text::StringBuilder *ret = cli::gcnew<System::Text::StringBuilder>();
        for(auto tmp_506 : rights) {
            auto right = cli::cast<SddlAccessRight*>(tmp_506);
            {
                ret->Append2(right->get_Name());
            }
        }
        return ret->ToString_1636a0751cb9ac11();
    }
    
    int32_t KnownAce::get_AccessMask() {
        return this->access_mask;
    }
    
    int32_t KnownAce::set_AccessMask(int32_t value) {
        this->access_mask = value;
        return get_AccessMask();
    }
    
    System::Security::Principal::SecurityIdentifier* KnownAce::get_SecurityIdentifier() {
        return this->identifier;
    }
    
    System::Security::Principal::SecurityIdentifier* KnownAce::set_SecurityIdentifier(System::Security::Principal::SecurityIdentifier* value) {
        this->identifier = value;
        return get_SecurityIdentifier();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void MutexAccessRule::constructor(System::Security::Principal::IdentityReference* identity, MutexRights eventRights, AccessControlType type) {
        this->rights = eventRights;
    }
    
    void MutexAccessRule::constructor(System::String* identity, MutexRights eventRights, AccessControlType type) {
    }
    
    MutexRights MutexAccessRule::get_MutexRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void MutexAuditRule::constructor(System::Security::Principal::IdentityReference* identity, MutexRights eventRights, AuditFlags flags) {
        this->rights = eventRights;
    }
    
    MutexRights MutexAuditRule::get_MutexRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void MutexSecurity::constructor() {
    }
    
    void MutexSecurity::constructor(System::String* name, AccessControlSections includeSections) {
    }
    
    AccessRule* MutexSecurity::AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        return cli::gcnew<MutexAccessRule>(identityReference, (MutexRights)(accessMask), type);
    }
    
    void MutexSecurity::AddAccessRule(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MutexSecurity::RemoveAccessRule(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::RemoveAccessRuleAll(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::RemoveAccessRuleSpecific(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::ResetAccessRule(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::SetAccessRule(MutexAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* MutexSecurity::AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        return cli::gcnew<MutexAuditRule>(identityReference, (MutexRights)(accessMask), flags);
    }
    
    void MutexSecurity::AddAuditRule(MutexAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool MutexSecurity::RemoveAuditRule(MutexAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::RemoveAuditRuleAll(MutexAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::RemoveAuditRuleSpecific(MutexAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void MutexSecurity::SetAuditRule(MutexAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* MutexSecurity::get_AccessRightType_1a84bfe4f6428b49() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* MutexSecurity::get_AccessRuleType_5fe73642cdc6c868() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* MutexSecurity::get_AuditRuleType_9f84e3023e989cd7() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void NativeObjectSecurity::constructor() {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType) {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext) {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType, System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections) {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType, System::String* name, AccessControlSections includeSections) {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType, System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext) {
    }
    
    void NativeObjectSecurity::constructor(bool isContainer, ResourceType resourceType, System::String* name, AccessControlSections includeSections, ExceptionFromErrorCode* exceptionFromErrorCode, System::Object* exceptionContext) {
    }
    
    void NativeObjectSecurity::Persist_8df14ef0f469b740(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void NativeObjectSecurity::Persist_d34830fae35e2aad(System::String* name, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void NativeObjectSecurity::Persist3(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections, System::Object* exceptionContext) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void NativeObjectSecurity::Persist4(System::String* name, AccessControlSections includeSections, System::Object* exceptionContext) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void ObjectAccessRule::constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, System::Guid objectType, System::Guid inheritedObjectType, AccessControlType type) {
        this->object_type = objectType;
        this->inherited_object_type = inheritedObjectType;
    }
    
    System::Guid ObjectAccessRule::get_InheritedObjectType() {
        return this->inherited_object_type;
    }
    
    ObjectAceFlags ObjectAccessRule::get_ObjectFlags() {
        ObjectAceFlags ret = ObjectAceFlags::None;
        if(System::Guid::op_Inequality(this->object_type, (*System::Guid::Empty))) 
        {
            (ret = (ObjectAceFlags)(((int32_t)(ret) | 1)));
        }
        if(System::Guid::op_Inequality(this->inherited_object_type, (*System::Guid::Empty))) 
        {
            (ret = (ObjectAceFlags)(((int32_t)(ret) | 2)));
        }
        return ret;
    }
    
    System::Guid ObjectAccessRule::get_ObjectType() {
        return this->object_type;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void ObjectAce::constructor(AceFlags aceFlags, AceQualifier qualifier, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, ObjectAceFlags flags, System::Guid type, System::Guid inheritedType, bool isCallback, cli::array<unsigned char>* opaque) {
        this->set_AccessMask(accessMask);
        this->set_SecurityIdentifier(sid);
        this->object_ace_flags = flags;
        this->object_ace_type = type;
        this->inherited_object_type = inheritedType;
    }
    
    void ObjectAce::constructor(AceType type, AceFlags flags, int32_t accessMask, System::Security::Principal::SecurityIdentifier* sid, ObjectAceFlags objFlags, System::Guid objType, System::Guid inheritedType, cli::array<unsigned char>* opaque) {
        this->set_AccessMask(accessMask);
        this->set_SecurityIdentifier(sid);
        this->object_ace_flags = objFlags;
        this->object_ace_type = objType;
        this->inherited_object_type = inheritedType;
    }
    
    void ObjectAce::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
        int32_t len = (int32_t)(GenericAce::ReadUShort(binaryForm, (offset + 2)));
        if((offset > (binaryForm->get_Length() - len))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACE - truncated"), _T("binaryForm"));
        }
        if((len < (44 + System::Security::Principal::SecurityIdentifier::MinBinaryLength))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACE"), _T("binaryForm"));
        }
        this->set_AccessMask(GenericAce::ReadInt(binaryForm, (offset + 4)));
        this->object_ace_flags = (ObjectAceFlags)(GenericAce::ReadInt(binaryForm, (offset + 8)));
        this->object_ace_type = ReadGuid(binaryForm, (offset + 12));
        this->inherited_object_type = ReadGuid(binaryForm, (offset + 28));
        this->set_SecurityIdentifier(cli::gcnew<System::Security::Principal::SecurityIdentifier>(binaryForm, (offset + 44)));
        int32_t opaqueLen = (len - (44 + this->get_SecurityIdentifier()->get_BinaryLength()));
        if((opaqueLen > 0)) 
        {
            cli::array<unsigned char> *opaque = (new cli::array<unsigned char>(opaqueLen));
            System::Array::Copy2(binaryForm, ((offset + 44) + this->get_SecurityIdentifier()->get_BinaryLength()), opaque, 0, opaqueLen);
        }
    }
    
    void ObjectAce::GetBinaryForm_69a46165f9f6ad87(cli::array<unsigned char>* binaryForm, int32_t offset) {
        int32_t len = this->get_BinaryLength_9e9ea5e224e95c31();
        binaryForm->at(offset) = (unsigned char)((unsigned char)(int32_t)(this->get_AceType()));
        binaryForm->at((offset + 1)) = (unsigned char)(this->get_AceFlags());
        GenericAce::WriteUShort((uint16_t)len, binaryForm, (offset + 2));
        GenericAce::WriteInt(this->get_AccessMask(), binaryForm, (offset + 4));
        GenericAce::WriteInt((int32_t)(this->get_ObjectAceFlags()), binaryForm, (offset + 8));
        WriteGuid(this->get_ObjectAceType(), binaryForm, (offset + 12));
        WriteGuid(this->get_InheritedObjectAceType(), binaryForm, (offset + 28));
        this->get_SecurityIdentifier()->GetBinaryForm(binaryForm, (offset + 44));
        cli::array<unsigned char> *opaque = QualifiedAce::GetOpaque();
        if((opaque != nullptr)) 
        {
            System::Array::Copy2(opaque, 0, binaryForm, ((offset + 44) + this->get_SecurityIdentifier()->get_BinaryLength()), opaque->get_Length());
        }
    }
    
    int32_t ObjectAce::MaxOpaqueLength(bool isCallback) {
        return 65423;
    }
    
    System::String* ObjectAce::GetSddlForm_9a01bbfdef8a4d87() {
        if((this->get_OpaqueLength() != 0)) 
        {
            throw cli::gcnew<System::NotImplementedException>(_T("Unable to convert conditional ACEs to SDDL"));
        }
        System::String *objType = _T("");
        if(((int32_t)(((int32_t)(this->get_ObjectAceFlags()) & 1)) != 0)) 
        {
            objType = this->object_ace_type->ToString3(_T("D"));
        }
        System::String *inhObjType = _T("");
        if(((int32_t)(((int32_t)(this->get_ObjectAceFlags()) & 2)) != 0)) 
        {
            inhObjType = this->inherited_object_type->ToString3(_T("D"));
        }
        return System::String::Format6(System::Globalization::CultureInfo::get_InvariantCulture(), _T("({0};{1};{2};{3};{4};{5})"), (new cli::array<System::Object*>({GenericAce::GetSddlAceType(this->get_AceType()), GenericAce::GetSddlAceFlags(this->get_AceFlags()), KnownAce::GetSddlAccessRights(this->get_AccessMask()), objType, inhObjType, this->get_SecurityIdentifier()->GetSddlForm()})));
    }
    
    AceType ObjectAce::ConvertType(AceQualifier qualifier, bool isCallback) {
        switch(qualifier) {
            case AceQualifier::AccessAllowed: case_1630: {
                if(isCallback) 
                {
                    return AceType::AccessAllowedCallbackObject;
                }
                 else 
                {
                    return AceType::AccessAllowedObject;
                }
            }
            case AceQualifier::AccessDenied: case_1631: {
                if(isCallback) 
                {
                    return AceType::AccessDeniedCallbackObject;
                }
                 else 
                {
                    return AceType::AccessDeniedObject;
                }
            }
            case AceQualifier::SystemAlarm: case_1632: {
                if(isCallback) 
                {
                    return AceType::SystemAlarmCallbackObject;
                }
                 else 
                {
                    return AceType::SystemAlarmObject;
                }
            }
            case AceQualifier::SystemAudit: case_1633: {
                if(isCallback) 
                {
                    return AceType::SystemAuditCallbackObject;
                }
                 else 
                {
                    return AceType::SystemAuditObject;
                }
            }
            default: case_1634: {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Unrecognized ACE qualifier: "), cli::box(qualifier)), _T("qualifier"));
            }
        }
    }
    
    void ObjectAce::WriteGuid(System::Guid val, cli::array<unsigned char>* buffer, int32_t offset) {
        cli::array<unsigned char> *guidData = val->ToByteArray();
        System::Array::Copy2(guidData, 0, buffer, offset, 16);
    }
    
    System::Guid ObjectAce::ReadGuid(cli::array<unsigned char>* buffer, int32_t offset) {
        cli::array<unsigned char> *temp = (new cli::array<unsigned char>(16));
        System::Array::Copy2(buffer, offset, temp, 0, 16);
        return cli::ctor<System::Guid>(temp);
    }
    
    int32_t ObjectAce::get_BinaryLength_9e9ea5e224e95c31() {
        return ((44 + this->get_SecurityIdentifier()->get_BinaryLength()) + this->get_OpaqueLength());
    }
    
    System::Guid ObjectAce::get_InheritedObjectAceType() {
        return this->inherited_object_type;
    }
    
    System::Guid ObjectAce::set_InheritedObjectAceType(System::Guid value) {
        this->inherited_object_type = value;
        return get_InheritedObjectAceType();
    }
    
    ObjectAceFlags ObjectAce::get_ObjectAceFlags() {
        return this->object_ace_flags;
    }
    
    ObjectAceFlags ObjectAce::set_ObjectAceFlags(ObjectAceFlags value) {
        this->object_ace_flags = value;
        return get_ObjectAceFlags();
    }
    
    System::Guid ObjectAce::get_ObjectAceType() {
        return this->object_ace_type;
    }
    
    System::Guid ObjectAce::set_ObjectAceType(System::Guid value) {
        this->object_ace_type = value;
        return get_ObjectAceType();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void ObjectAuditRule::constructor(System::Security::Principal::IdentityReference* identity, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, System::Guid objectType, System::Guid inheritedObjectType, AuditFlags auditFlags) {
        this->object_type = objectType;
        this->inherited_object_type = inheritedObjectType;
    }
    
    System::Guid ObjectAuditRule::get_InheritedObjectType() {
        return this->inherited_object_type;
    }
    
    ObjectAceFlags ObjectAuditRule::get_ObjectFlags() {
        ObjectAceFlags ret = ObjectAceFlags::None;
        if(System::Guid::op_Inequality(this->object_type, (*System::Guid::Empty))) 
        {
            (ret = (ObjectAceFlags)(((int32_t)(ret) | 1)));
        }
        if(System::Guid::op_Inequality(this->inherited_object_type, (*System::Guid::Empty))) 
        {
            (ret = (ObjectAceFlags)(((int32_t)(ret) | 2)));
        }
        return ret;
    }
    
    System::Guid ObjectAuditRule::get_ObjectType() {
        return this->object_type;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void ObjectSecurity::constructor() {
    }
    
    void ObjectSecurity::constructor(bool isContainer, bool isDS) {
        this->is_container = isContainer;
        this->is_ds = isDS;
    }
    
    System::Security::Principal::IdentityReference* ObjectSecurity::GetGroup(System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Security::Principal::IdentityReference* ObjectSecurity::GetOwner(System::Type* targetType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    cli::array<unsigned char>* ObjectSecurity::GetSecurityDescriptorBinaryForm() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* ObjectSecurity::GetSecurityDescriptorSddlForm(AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::IsSddlConversionSupported() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::ModifyAccessRule_1fba4a106e0b76b4(AccessControlModification modification, AccessRule* rule, bool modified) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::ModifyAuditRule_d2c81e0c97784362(AccessControlModification modification, AuditRule* rule, bool modified) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::PurgeAccessRules_332a920868af627c(System::Security::Principal::IdentityReference* identity) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::PurgeAuditRules_8d00324958085747(System::Security::Principal::IdentityReference* identity) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetAccessRuleProtection(bool isProtected, bool preserveInheritance) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetAuditRuleProtection(bool isProtected, bool preserveInheritance) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetGroup(System::Security::Principal::IdentityReference* identity) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetOwner(System::Security::Principal::IdentityReference* identity) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetSecurityDescriptorBinaryForm(cli::array<unsigned char>* binaryForm) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetSecurityDescriptorBinaryForm2(cli::array<unsigned char>* binaryForm, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetSecurityDescriptorSddlForm(System::String* sddlForm) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::SetSecurityDescriptorSddlForm2(System::String* sddlForm, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::Persist_8df14ef0f469b740(System::Runtime::InteropServices::SafeHandle* handle, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::Persist_d34830fae35e2aad(System::String* name, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::Persist_69fe3700dea76a00(bool enableOwnershipPrivilege, System::String* name, AccessControlSections includeSections) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::ReadLock() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::ReadUnlock() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::WriteLock() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void ObjectSecurity::WriteUnlock() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::get_AreAccessRulesCanonical() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::get_AreAccessRulesProtected() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::get_AreAuditRulesCanonical() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::get_AreAuditRulesProtected() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool ObjectSecurity::get_AccessRulesModified() {
        return this->access_rules_modified;
    }
    
    bool ObjectSecurity::set_AccessRulesModified(bool value) {
        this->access_rules_modified = value;
        return get_AccessRulesModified();
    }
    
    bool ObjectSecurity::get_AuditRulesModified() {
        return this->audit_rules_modified;
    }
    
    bool ObjectSecurity::set_AuditRulesModified(bool value) {
        this->audit_rules_modified = value;
        return get_AuditRulesModified();
    }
    
    bool ObjectSecurity::get_GroupModified() {
        return this->group_modified;
    }
    
    bool ObjectSecurity::set_GroupModified(bool value) {
        this->group_modified = value;
        return get_GroupModified();
    }
    
    bool ObjectSecurity::get_IsContainer() {
        return this->is_container;
    }
    
    bool ObjectSecurity::get_IsDS() {
        return this->is_ds;
    }
    
    bool ObjectSecurity::get_OwnerModified() {
        return this->owner_modified;
    }
    
    bool ObjectSecurity::set_OwnerModified(bool value) {
        this->owner_modified = value;
        return get_OwnerModified();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void PrivilegeNotHeldException::constructor() {
    }
    
    void PrivilegeNotHeldException::constructor(System::String* privilege) {
    }
    
    void PrivilegeNotHeldException::constructor(System::String* privilege, System::Exception* inner) {
    }
    
    void PrivilegeNotHeldException::GetObjectData_bc9b88d7eb43b6d8(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* PrivilegeNotHeldException::get_PrivilegeName() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void QualifiedAce::constructor(AceType type, AceFlags flags, cli::array<unsigned char>* opaque) {
        SetOpaque(opaque);
    }
    
    void QualifiedAce::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
    }
    
    cli::array<unsigned char>* QualifiedAce::GetOpaque() {
        if((this->opaque ==  nullptr)) 
        {
            return nullptr;
        }
        return cli::cast<cli::array<unsigned char>*>(cli::import(this->opaque)->Clone());
    }
    
    void QualifiedAce::SetOpaque(cli::array<unsigned char>* opaque) {
        if((opaque ==  nullptr)) 
        {
            this->opaque = nullptr;
        }
         else 
        {
            this->opaque = cli::cast<cli::array<unsigned char>*>(cli::import(opaque)->Clone());
        }
    }
    
    AceQualifier QualifiedAce::get_AceQualifier() {
        switch(this->get_AceType()) {
            case AceType::AccessAllowed: case AceType::AccessAllowedCallback: case AceType::AccessAllowedCallbackObject: case AceType::AccessAllowedCompound: case AceType::AccessAllowedObject: case_1635: {
                return AceQualifier::AccessAllowed;
            }
            case AceType::AccessDenied: case AceType::AccessDeniedCallback: case AceType::AccessDeniedCallbackObject: case AceType::AccessDeniedObject: case_1636: {
                return AceQualifier::AccessDenied;
            }
            case AceType::SystemAlarm: case AceType::SystemAlarmCallback: case AceType::SystemAlarmCallbackObject: case AceType::SystemAlarmObject: case_1637: {
                return AceQualifier::SystemAlarm;
            }
            case AceType::SystemAudit: case AceType::SystemAuditCallback: case AceType::SystemAuditCallbackObject: case AceType::SystemAuditObject: case_1638: {
                return AceQualifier::SystemAudit;
            }
            default: case_1639: {
                throw cli::gcnew<System::ArgumentException>(cli::concat(_T("Unrecognised ACE type: "), cli::box(this->get_AceType())));
            }
        }
    }
    
    bool QualifiedAce::get_IsCallback() {
        return (((((((((int32_t)(this->get_AceType()) ==  9) || ((int32_t)(this->get_AceType()) ==  11)) || ((int32_t)(this->get_AceType()) ==  10)) || ((int32_t)(this->get_AceType()) ==  12)) || ((int32_t)(this->get_AceType()) ==  14)) || ((int32_t)(this->get_AceType()) ==  16)) || ((int32_t)(this->get_AceType()) ==  13)) || ((int32_t)(this->get_AceType()) ==  15));
    }
    
    int32_t QualifiedAce::get_OpaqueLength() {
        if((this->opaque ==  nullptr)) 
        {
            return 0;
        }
        return this->opaque->get_Length();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void RawAcl::constructor(unsigned char revision, int32_t capacity) {
        this->revision = revision;
        this->list = cli::gcnew<System::Collections::Generic::List<GenericAce*>>(capacity);
    }
    
    void RawAcl::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
        if((binaryForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryForm"));
        }
        if(((offset < 0) || (offset > (binaryForm->get_Length() - 8)))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), cli::box(offset), _T("Offset out of range"));
        }
        this->revision = binaryForm->at(offset);
        if((((int32_t)(this->revision) != (int32_t)(GenericAcl::AclRevision)) && ((int32_t)(this->revision) != (int32_t)(GenericAcl::AclRevisionDS)))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACL - unknown revision"), _T("binaryForm"));
        }
        int32_t binaryLength = (int32_t)(ReadUShort(binaryForm, (offset + 2)));
        if((offset > (binaryForm->get_Length() - binaryLength))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid ACL - truncated"), _T("binaryForm"));
        }
        int32_t pos = (offset + 8);
        int32_t numAces = (int32_t)(ReadUShort(binaryForm, (offset + 4)));
        this->list = cli::gcnew<System::Collections::Generic::List<GenericAce*>>(numAces);
        for(int32_t i = 0; (i < numAces); ++i){
            GenericAce *newAce = GenericAce::CreateFromBinaryForm(binaryForm, pos);
            this->list->Add(newAce);
            (pos = pos + newAce->get_BinaryLength_9e9ea5e224e95c31());
        }
    }
    
    void RawAcl::constructor(unsigned char revision, System::Collections::Generic::List<GenericAce*>* aces) {
        this->revision = revision;
        this->list = aces;
    }
    
    void RawAcl::GetBinaryForm_f4afc682e7e10d18(cli::array<unsigned char>* binaryForm, int32_t offset) {
        if((binaryForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryForm"));
        }
        if(((offset < 0) || (offset > (binaryForm->get_Length() - this->get_BinaryLength_4ea089e3a02d2299())))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Offset out of range"), _T("offset"));
        }
        binaryForm->at(offset) = this->get_Revision_d515f8407d8d1240();
        binaryForm->at((offset + 1)) = 0;
        WriteUShort((uint16_t)this->get_BinaryLength_4ea089e3a02d2299(), binaryForm, (offset + 2));
        WriteUShort((uint16_t)this->list->get_Count(), binaryForm, (offset + 4));
        WriteUShort(0, binaryForm, (offset + 6));
        int32_t pos = (offset + 8);
        for(auto tmp_507 : this->list) {
            auto ace = cli::cast<GenericAce*>(tmp_507);
            {
                ace->GetBinaryForm_69a46165f9f6ad87(binaryForm, pos);
                (pos = pos + ace->get_BinaryLength_9e9ea5e224e95c31());
            }
        }
    }
    
    void RawAcl::InsertAce(int32_t index, GenericAce* ace) {
        if(GenericAce::op_Equality(ace, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("ace"));
        }
        this->list->Insert(index, ace);
    }
    
    void RawAcl::RemoveAce(int32_t index) {
        this->list->RemoveAt(index);
    }
    
    System::String* RawAcl::GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) {
        System::Text::StringBuilder *result = cli::gcnew<System::Text::StringBuilder>();
        if(isDacl) 
        {
            if(((int32_t)(((int32_t)(sdFlags) & 4096)) != 0)) 
            {
                result->Append2(_T("P"));
            }
            if(((int32_t)(((int32_t)(sdFlags) & 256)) != 0)) 
            {
                result->Append2(_T("AR"));
            }
            if(((int32_t)(((int32_t)(sdFlags) & 1024)) != 0)) 
            {
                result->Append2(_T("AI"));
            }
        }
         else 
        {
            if(((int32_t)(((int32_t)(sdFlags) & 8192)) != 0)) 
            {
                result->Append2(_T("P"));
            }
            if(((int32_t)(((int32_t)(sdFlags) & 512)) != 0)) 
            {
                result->Append2(_T("AR"));
            }
            if(((int32_t)(((int32_t)(sdFlags) & 2048)) != 0)) 
            {
                result->Append2(_T("AI"));
            }
        }
        for(auto tmp_508 : this->list) {
            auto ace = cli::cast<GenericAce*>(tmp_508);
            {
                result->Append2(ace->GetSddlForm_9a01bbfdef8a4d87());
            }
        }
        return result->ToString_1636a0751cb9ac11();
    }
    
    RawAcl* RawAcl::ParseSddlForm(System::String* sddlForm, bool isDacl, ControlFlags sdFlags, int32_t pos) {
        ParseFlags(sddlForm, isDacl, sdFlags, pos);
        unsigned char revision = GenericAcl::AclRevision;
        System::Collections::Generic::List<GenericAce*> *aces = cli::gcnew<System::Collections::Generic::List<GenericAce*>>();
        while(((pos < sddlForm->get_Length()) && ((int32_t)(sddlForm->get_Chars(pos)) ==  40))) {
            GenericAce *ace = GenericAce::CreateFromSddlForm(sddlForm, pos);
            if(GenericAce::op_Inequality(cli::as<ObjectAce*>(ace), nullptr)) 
            {
                revision = GenericAcl::AclRevisionDS;
            }
            aces->Add(ace);
        }
        return cli::gcnew<RawAcl>(revision, aces);
    }
    
    void RawAcl::ParseFlags(System::String* sddlForm, bool isDacl, ControlFlags sdFlags, int32_t pos) {
        char16_t ch = System::Char::ToUpperInvariant(sddlForm->get_Chars(pos));
        while((((int32_t)(ch) ==  80) || ((int32_t)(ch) ==  65))) {
            if(((int32_t)(ch) ==  80)) 
            {
                if(isDacl) 
                {
                    (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 4096)));
                }
                 else 
                {
                    (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 8192)));
                }
                pos++;
            }
             else 
            {
                if((sddlForm->get_Length() > (pos + 1))) 
                {
                    ch = System::Char::ToUpperInvariant(sddlForm->get_Chars((pos + 1)));
                    if(((int32_t)(ch) ==  82)) 
                    {
                        if(isDacl) 
                        {
                            (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 256)));
                        }
                         else 
                        {
                            (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 512)));
                        }
                        (pos = pos + 2);
                    }
                     else 
                    {
                        if(((int32_t)(ch) ==  73)) 
                        {
                            if(isDacl) 
                            {
                                (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 1024)));
                            }
                             else 
                            {
                                (sdFlags = (ControlFlags)(((int32_t)(sdFlags) | 2048)));
                            }
                            (pos = pos + 2);
                        }
                         else 
                        {
                            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
                        }
                    }
                }
                 else 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL string."), _T("sddlForm"));
                }
            }
            ch = System::Char::ToUpperInvariant(sddlForm->get_Chars(pos));
        }
    }
    
    void RawAcl::WriteUShort(uint16_t val, cli::array<unsigned char>* buffer, int32_t offset) {
        buffer->at(offset) = (unsigned char)val;
        buffer->at((offset + 1)) = (unsigned char)((int32_t)(val) >> 8);
    }
    
    uint16_t RawAcl::ReadUShort(cli::array<unsigned char>* buffer, int32_t offset) {
        return (uint16_t)((int32_t)(buffer->at(offset)) | ((int32_t)(buffer->at((offset + 1))) << 8));
    }
    
    int32_t RawAcl::get_BinaryLength_4ea089e3a02d2299() {
        int32_t len = 8;
        for(auto tmp_509 : this->list) {
            auto ace = cli::cast<GenericAce*>(tmp_509);
            {
                (len = len + ace->get_BinaryLength_9e9ea5e224e95c31());
            }
        }
        return len;
    }
    
    int32_t RawAcl::get_Count_5cd77c86ebcd1b2c() {
        return this->list->get_Count();
    }
    
    GenericAce* RawAcl::get_Item_60d48735f5e5392f(int32_t index) {
        return this->list->get_Item(index);
    }
    
    GenericAce* RawAcl::set_Item_bfb6c47e01525adb(int32_t index, GenericAce* value) {
        this->list->set_Item(index, value);
        return get_Item_60d48735f5e5392f(index);
    }
    
    unsigned char RawAcl::get_Revision_d515f8407d8d1240() {
        return this->revision;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void RawSecurityDescriptor::constructor(System::String* sddlForm) {
        if((sddlForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("sddlForm"));
        }
        ParseSddl(sddlForm->Replace2(_T(" "), _T("")));
        (this->control_flags = (ControlFlags)(((int32_t)(this->control_flags) | 32768)));
    }
    
    void RawSecurityDescriptor::constructor(cli::array<unsigned char>* binaryForm, int32_t offset) {
        if((binaryForm ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("binaryForm"));
        }
        if(((offset < 0) || (offset > (binaryForm->get_Length() - 20)))) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), cli::box(offset), _T("Offset out of range"));
        }
        if(((int32_t)(binaryForm->at(offset)) != 1)) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Unrecognized Security Descriptor revision."), _T("binaryForm"));
        }
        this->resourcemgr_control = binaryForm->at((offset + 1));
        this->control_flags = (ControlFlags)(ReadUShort(binaryForm, (offset + 2)));
        int32_t ownerPos = ReadInt(binaryForm, (offset + 4));
        int32_t groupPos = ReadInt(binaryForm, (offset + 8));
        int32_t saclPos = ReadInt(binaryForm, (offset + 12));
        int32_t daclPos = ReadInt(binaryForm, (offset + 16));
        if((ownerPos != 0)) 
        {
            this->owner_sid = cli::gcnew<System::Security::Principal::SecurityIdentifier>(binaryForm, ownerPos);
        }
        if((groupPos != 0)) 
        {
            this->group_sid = cli::gcnew<System::Security::Principal::SecurityIdentifier>(binaryForm, groupPos);
        }
        if((saclPos != 0)) 
        {
            this->system_acl = cli::gcnew<RawAcl>(binaryForm, saclPos);
        }
        if((daclPos != 0)) 
        {
            this->discretionary_acl = cli::gcnew<RawAcl>(binaryForm, daclPos);
        }
    }
    
    void RawSecurityDescriptor::constructor(ControlFlags flags, System::Security::Principal::SecurityIdentifier* owner, System::Security::Principal::SecurityIdentifier* group, RawAcl* systemAcl, RawAcl* discretionaryAcl) {
        this->control_flags = flags;
        this->owner_sid = owner;
        this->group_sid = group;
        this->system_acl = systemAcl;
        this->discretionary_acl = discretionaryAcl;
    }
    
    void RawSecurityDescriptor::SetFlags(ControlFlags flags) {
        this->control_flags = (ControlFlags)(((int32_t)(flags) | 32768));
    }
    
    void RawSecurityDescriptor::ParseSddl(System::String* sddlForm) {
        ControlFlags flags = ControlFlags::None;
        int32_t pos = 0;
        while((pos < (sddlForm->get_Length() - 2))) {
            System::String* tmp_510 = sddlForm->Substring2(pos, 2);
            ::System::Int32 tmp_511 = -1;
            if(::System::String::Equals3(tmp_510, _T("O:"))) tmp_511 = 0;
            if(::System::String::Equals3(tmp_510, _T("G:"))) tmp_511 = 1;
            if(::System::String::Equals3(tmp_510, _T("D:"))) tmp_511 = 2;
            if(::System::String::Equals3(tmp_510, _T("S:"))) tmp_511 = 3;
            switch(tmp_511)
            {
                case 0: case_1640: 
                {
                    (pos = pos + 2);
                    this->set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier::ParseSddlForm(sddlForm, pos));
                    break;
                }
                case 1: case_1641: 
                {
                    (pos = pos + 2);
                    this->set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier::ParseSddlForm(sddlForm, pos));
                    break;
                }
                case 2: case_1642: 
                {
                    (pos = pos + 2);
                    this->set_DiscretionaryAcl(RawAcl::ParseSddlForm(sddlForm, true, flags, pos));
                    (flags = (ControlFlags)(((int32_t)(flags) | 4)));
                    break;
                }
                case 3: case_1643: 
                {
                    (pos = pos + 2);
                    this->set_SystemAcl(RawAcl::ParseSddlForm(sddlForm, false, flags, pos));
                    (flags = (ControlFlags)(((int32_t)(flags) | 16)));
                    break;
                }
                default: case_1644: 
                {
                    throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL."), _T("sddlForm"));
                }
            }
        }
        if((pos != sddlForm->get_Length())) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("Invalid SDDL."), _T("sddlForm"));
        }
        SetFlags(flags);
    }
    
    uint16_t RawSecurityDescriptor::ReadUShort(cli::array<unsigned char>* buffer, int32_t offset) {
        return (uint16_t)((int32_t)(buffer->at(offset)) | ((int32_t)(buffer->at((offset + 1))) << 8));
    }
    
    int32_t RawSecurityDescriptor::ReadInt(cli::array<unsigned char>* buffer, int32_t offset) {
        return ((((int32_t)(buffer->at(offset)) | ((int32_t)(buffer->at((offset + 1))) << 8)) | ((int32_t)(buffer->at((offset + 2))) << 16)) | ((int32_t)(buffer->at((offset + 3))) << 24));
    }
    
    ControlFlags RawSecurityDescriptor::get_ControlFlags_5819543aa2ed7520() {
        return this->control_flags;
    }
    
    RawAcl* RawSecurityDescriptor::get_DiscretionaryAcl() {
        return this->discretionary_acl;
    }
    
    RawAcl* RawSecurityDescriptor::set_DiscretionaryAcl(RawAcl* value) {
        this->discretionary_acl = value;
        return get_DiscretionaryAcl();
    }
    
    System::Security::Principal::SecurityIdentifier* RawSecurityDescriptor::get_Group_86703f8c66d04ea6() {
        return this->group_sid;
    }
    
    System::Security::Principal::SecurityIdentifier* RawSecurityDescriptor::set_Group_6a6a65f35d37608(System::Security::Principal::SecurityIdentifier* value) {
        this->group_sid = value;
        return get_Group_86703f8c66d04ea6();
    }
    
    System::Security::Principal::SecurityIdentifier* RawSecurityDescriptor::get_Owner_fe0200e7078f0b90() {
        return this->owner_sid;
    }
    
    System::Security::Principal::SecurityIdentifier* RawSecurityDescriptor::set_Owner_f96aa17dd2eb44b1(System::Security::Principal::SecurityIdentifier* value) {
        this->owner_sid = value;
        return get_Owner_fe0200e7078f0b90();
    }
    
    unsigned char RawSecurityDescriptor::get_ResourceManagerControl() {
        return this->resourcemgr_control;
    }
    
    unsigned char RawSecurityDescriptor::set_ResourceManagerControl(unsigned char value) {
        this->resourcemgr_control = value;
        return get_ResourceManagerControl();
    }
    
    RawAcl* RawSecurityDescriptor::get_SystemAcl() {
        return this->system_acl;
    }
    
    RawAcl* RawSecurityDescriptor::set_SystemAcl(RawAcl* value) {
        this->system_acl = value;
        return get_SystemAcl();
    }
    
    GenericAcl* RawSecurityDescriptor::get_InternalDacl_5c63bd9d907ab726() {
        return this->get_DiscretionaryAcl();
    }
    
    GenericAcl* RawSecurityDescriptor::get_InternalSacl_e5b16f647b074625() {
        return this->get_SystemAcl();
    }
    
    unsigned char RawSecurityDescriptor::get_InternalReservedField_e823bda30612d306() {
        return this->get_ResourceManagerControl();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void RegistryAccessRule::constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, AccessControlType type) {
    }
    
    void RegistryAccessRule::constructor(System::String* identity, RegistryRights registryRights, AccessControlType type) {
    }
    
    void RegistryAccessRule::constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        this->rights = registryRights;
    }
    
    void RegistryAccessRule::constructor(System::String* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
    }
    
    RegistryRights RegistryAccessRule::get_RegistryRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void RegistryAuditRule::constructor(System::Security::Principal::IdentityReference* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        this->rights = registryRights;
    }
    
    void RegistryAuditRule::constructor(System::String* identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
    }
    
    RegistryRights RegistryAuditRule::get_RegistryRights() {
        return this->rights;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void RegistrySecurity::constructor() {
    }
    
    AccessRule* RegistrySecurity::AccessRuleFactory_550094ab95f1f5f6(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) {
        return cli::gcnew<RegistryAccessRule>(identityReference, (RegistryRights)(accessMask), inheritanceFlags, propagationFlags, type);
    }
    
    void RegistrySecurity::AddAccessRule(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::AddAuditRule(RegistryAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    AuditRule* RegistrySecurity::AuditRuleFactory_1d5188c9a9f829df(System::Security::Principal::IdentityReference* identityReference, int32_t accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) {
        return cli::gcnew<RegistryAuditRule>(identityReference, (RegistryRights)(accessMask), inheritanceFlags, propagationFlags, flags);
    }
    
    bool RegistrySecurity::RemoveAccessRule(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::RemoveAccessRuleAll(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::RemoveAccessRuleSpecific(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool RegistrySecurity::RemoveAuditRule(RegistryAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::RemoveAuditRuleAll(RegistryAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::RemoveAuditRuleSpecific(RegistryAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::ResetAccessRule(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::SetAccessRule(RegistryAccessRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void RegistrySecurity::SetAuditRule(RegistryAuditRule* rule) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Type* RegistrySecurity::get_AccessRightType_1a84bfe4f6428b49() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* RegistrySecurity::get_AccessRuleType_5fe73642cdc6c868() {
        return cli::typeof<System::Type>::info;
    }
    
    System::Type* RegistrySecurity::get_AuditRuleType_9f84e3023e989cd7() {
        return cli::typeof<System::Type>::info;
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    cli::array<SddlAccessRight*>*  SddlAccessRight::rights;
    
    SddlAccessRight::SddlAccessRight()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void SddlAccessRight::constructor() {
    }
    
    void SddlAccessRight::static_constructor() {
    }
    
    SddlAccessRight* SddlAccessRight::LookupByName(System::String* s) {
        for(auto tmp_512 : rights) {
            auto right = cli::cast<SddlAccessRight*>(tmp_512);
            {
                if(System::String::op_Equality(right->get_Name(), s)) 
                {
                    return right;
                }
            }
        }
        return nullptr;
    }
    
    cli::array<SddlAccessRight*>* SddlAccessRight::Decompose(int32_t mask) {
        for(auto tmp_513 : rights) {
            auto right = cli::cast<SddlAccessRight*>(tmp_513);
            {
                if((mask ==  right->get_Value())) 
                {
                    return (new cli::array<SddlAccessRight*>({right}));
                }
            }
        }
        int32_t foundType = 0;
        System::Collections::Generic::List<SddlAccessRight*> *found = cli::gcnew<System::Collections::Generic::List<SddlAccessRight*>>();
        int32_t accountedBits = 0;
        for(auto tmp_514 : rights) {
            auto right = cli::cast<SddlAccessRight*>(tmp_514);
            {
                if((((mask & right->get_Value()) ==  right->get_Value()) && ((accountedBits | right->get_Value()) != accountedBits))) 
                {
                    if((foundType ==  0)) 
                    {
                        foundType = right->get_ObjectType();
                    }
                    if(((right->get_ObjectType() != 0) && (foundType != right->get_ObjectType()))) 
                    {
                        return nullptr;
                    }
                    found->Add(right);
                    (accountedBits = accountedBits | right->get_Value());
                }
                if((accountedBits ==  mask)) 
                {
                    return found->ToArray();
                }
            }
        }
        return nullptr;
    }
    
    System::String* SddlAccessRight::get_Name() {
        return this->_Name_k__BackingField;
    }
    
    System::String* SddlAccessRight::set_Name(System::String* value) {
        this->_Name_k__BackingField = value;
        return get_Name();
    }
    
    int32_t SddlAccessRight::get_Value() {
        return this->_Value_k__BackingField;
    }
    
    int32_t SddlAccessRight::set_Value(int32_t value) {
        this->_Value_k__BackingField = value;
        return get_Value();
    }
    
    int32_t SddlAccessRight::get_ObjectType() {
        return this->_ObjectType_k__BackingField;
    }
    
    int32_t SddlAccessRight::set_ObjectType(int32_t value) {
        this->_ObjectType_k__BackingField = value;
        return get_ObjectType();
    }
    
}}}
namespace System { namespace Security { namespace AccessControl {
    
    
    void SystemAcl::constructor(bool isContainer, bool isDS, int32_t capacity) {
    }
    
    void SystemAcl::constructor(bool isContainer, bool isDS, RawAcl* rawAcl) {
    }
    
    void SystemAcl::constructor(bool isContainer, bool isDS, unsigned char revision, int32_t capacity) {
    }
    
    void SystemAcl::AddAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SystemAcl::AddAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SystemAcl::RemoveAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    bool SystemAcl::RemoveAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SystemAcl::RemoveAuditSpecific(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SystemAcl::RemoveAuditSpecific2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SystemAcl::SetAudit(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    void SystemAcl::SetAudit2(AuditFlags auditFlags, System::Security::Principal::SecurityIdentifier* sid, int32_t accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, System::Guid objectType, System::Guid inheritedObjectType) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::String* SystemAcl::GetSddlForm_94505cd63118717(ControlFlags sdFlags, bool isDacl) {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void AsymmetricAlgorithm::constructor() {
    }
    
    void AsymmetricAlgorithm::Dispose() {
        Dispose_2369c0ba816a26e4(true);
        System::GC::SuppressFinalize(this);
    }
    
    void AsymmetricAlgorithm::Clear() {
        Dispose_2369c0ba816a26e4(false);
    }
    
    void AsymmetricAlgorithm::Dispose_2369c0ba816a26e4(bool disposing) {
    }
    
    AsymmetricAlgorithm* AsymmetricAlgorithm::Create() {
        return Create2(_T("System.Security.Cryptography.AsymmetricAlgorithm"));
    }
    
    AsymmetricAlgorithm* AsymmetricAlgorithm::Create2(System::String* algName) {
        return cli::cast<AsymmetricAlgorithm*>(CryptoConfig::CreateFromName(algName));
    }
    
    cli::array<unsigned char>* AsymmetricAlgorithm::GetNamedParam(System::String* xml, System::String* param) {
        System::String *start_element = cli::concat(_T("<"), param);
        int32_t start = xml->IndexOf7(start_element);
        if((start ==  -1)) 
        {
            return nullptr;
        }
        System::String *end_element = cli::concat(_T("</"), param);
        int32_t end = xml->IndexOf7(end_element);
        if(((end ==  -1) || (end <= start))) 
        {
            return nullptr;
        }
        (start = start + start_element->get_Length());
        System::String *base64 = xml->Substring2(start, (end - start));
        return System::Convert::FromBase64String(base64);
    }
    
    int32_t AsymmetricAlgorithm::get_KeySize_6bd474632c551ac() {
        return this->KeySizeValue;
    }
    
    int32_t AsymmetricAlgorithm::set_KeySize_16a33b99cbf5525b(int32_t value) {
        if(!(KeySizes::IsLegalKeySize(this->LegalKeySizesValue, value))) 
        {
            throw cli::gcnew<CryptographicException>(Locale::GetText(_T("Key size not supported by algorithm.")));
        }
        this->KeySizeValue = value;
        return get_KeySize_6bd474632c551ac();
    }
    
    cli::array<KeySizes*>* AsymmetricAlgorithm::get_LegalKeySizes_d0254e823f82d1d1() {
        return this->LegalKeySizesValue;
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void AsymmetricKeyExchangeDeformatter::constructor() {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void AsymmetricKeyExchangeFormatter::constructor() {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void AsymmetricSignatureDeformatter::constructor() {
    }
    
    bool AsymmetricSignatureDeformatter::VerifySignature_424b9406be3cf878(HashAlgorithm* hash, cli::array<unsigned char>* rgbSignature) {
        if((hash ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("hash"));
        }
        SetHashAlgorithm_5a7fb9c08aaf7ac9(hash->ToString_1636a0751cb9ac11());
        return VerifySignature_ecf649797288645c(hash->get_Hash_cb65a3f211aa16df(), rgbSignature);
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void AsymmetricSignatureFormatter::constructor() {
    }
    
    cli::array<unsigned char>* AsymmetricSignatureFormatter::CreateSignature_dc38abed6af1a66(HashAlgorithm* hash) {
        if((hash ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("hash"));
        }
        SetHashAlgorithm_9029a89c4cb706ce(hash->ToString_1636a0751cb9ac11());
        return CreateSignature_119f8aceb75b0d2(hash->get_Hash_cb65a3f211aa16df());
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    cli::array<unsigned char>*  Base64Constants::EncodeTable;
    cli::array<unsigned char>*  Base64Constants::DecodeTable;
    
    Base64Constants::Base64Constants()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void Base64Constants::static_constructor() {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CryptoAPITransform::constructor() {
        this->m_disposed = false;
    }
    
    void CryptoAPITransform::Dispose() {
        Dispose2(true);
        System::GC::SuppressFinalize(this);
    }
    
    void CryptoAPITransform::Clear() {
        Dispose2(false);
    }
    
    void CryptoAPITransform::Dispose2(bool disposing) {
        if(!(this->m_disposed)) 
        {
            if(disposing) 
            {
            }
            this->m_disposed = true;
        }
    }
    
    int32_t CryptoAPITransform::TransformBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount, cli::array<unsigned char>* outputBuffer, int32_t outputOffset) {
        return 0;
    }
    
    cli::array<unsigned char>* CryptoAPITransform::TransformFinalBlock(cli::array<unsigned char>* inputBuffer, int32_t inputOffset, int32_t inputCount) {
        return nullptr;
    }
    
    void CryptoAPITransform::Reset() {
    }
    
    bool CryptoAPITransform::get_CanReuseTransform() {
        return true;
    }
    
    bool CryptoAPITransform::get_CanTransformMultipleBlocks() {
        return true;
    }
    
    int32_t CryptoAPITransform::get_InputBlockSize() {
        return 0;
    }
    
    void* CryptoAPITransform::get_KeyHandle() {
        return (*::System::IntPtr::Zero);
    }
    
    int32_t CryptoAPITransform::get_OutputBlockSize() {
        return 0;
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CryptoHandler::constructor(System::Collections::Generic::IDictionary2<System::String*, System::Type*>* algorithms, System::Collections::Generic::IDictionary2<System::String*, System::String*>* oid) {
        this->algorithms = algorithms;
        this->oid = oid;
        this->names = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, System::String*>>();
        this->classnames = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, System::String*>>();
    }
    
    void CryptoHandler::OnStartParsing(Mono::Xml::SmallXmlParser* parser) {
    }
    
    void CryptoHandler::OnEndParsing(Mono::Xml::SmallXmlParser* parser) {
        for(auto tmp_515 : this->names) {
            auto kpv = cli::cast<System::Collections::Generic::KeyValuePair<System::String*, System::String*>>(tmp_515);
            {
                try {
                    this->algorithms->set_Item_9efe7d5d7f862add(kpv->get_Key(), System::Type::GetType4(this->classnames->get_Item(kpv->get_Value())));
                }
                catch(...) {
                }
            }
        }
        this->names->Clear();
        this->classnames->Clear();
    }
    
    System::String* CryptoHandler::Get(Mono::Xml::IAttrList* attrs, System::String* name) {
        for(int32_t i = 0; (i < attrs->get_Names_9f5e761023ba0c63()->get_Length()); i++){
            if(System::String::op_Equality(attrs->get_Names_9f5e761023ba0c63()->at(i), name)) 
            {
                return attrs->get_Values_56e80d7ef1a6a837()->at(i);
            }
        }
        return System::String::Empty;
    }
    
    void CryptoHandler::OnStartElement(System::String* name, Mono::Xml::IAttrList* attrs) {
        switch(this->level) {
            case 0: case_1645: {
                if(System::String::op_Equality(name, _T("configuration"))) 
                {
                    this->level++;
                }
                break;
            }
            case 1: case_1646: {
                if(System::String::op_Equality(name, _T("mscorlib"))) 
                {
                    this->level++;
                }
                break;
            }
            case 2: case_1647: {
                if(System::String::op_Equality(name, _T("cryptographySettings"))) 
                {
                    this->level++;
                }
                break;
            }
            case 3: case_1648: {
                if(System::String::op_Equality(name, _T("oidMap"))) 
                {
                    this->level++;
                }
                 else 
                {
                    if(System::String::op_Equality(name, _T("cryptoNameMapping"))) 
                    {
                        this->level++;
                    }
                }
                break;
            }
            case 4: case_1649: {
                if(System::String::op_Equality(name, _T("oidEntry"))) 
                {
                    this->oid->set_Item_9efe7d5d7f862add(Get(attrs, _T("name")), Get(attrs, _T("OID")));
                }
                 else 
                {
                    if(System::String::op_Equality(name, _T("nameEntry"))) 
                    {
                        this->names->set_Item(Get(attrs, _T("name")), Get(attrs, _T("class")));
                    }
                     else 
                    {
                        if(System::String::op_Equality(name, _T("cryptoClasses"))) 
                        {
                            this->level++;
                        }
                    }
                }
                break;
            }
            case 5: case_1650: {
                if(System::String::op_Equality(name, _T("cryptoClass"))) 
                {
                    this->classnames->set_Item(attrs->get_Names_9f5e761023ba0c63()->at(0), attrs->get_Values_56e80d7ef1a6a837()->at(0));
                }
                break;
            }
        }
    }
    
    void CryptoHandler::OnEndElement(System::String* name) {
        switch(this->level) {
            case 1: case_1651: {
                if(System::String::op_Equality(name, _T("configuration"))) 
                {
                    this->level--;
                }
                break;
            }
            case 2: case_1652: {
                if(System::String::op_Equality(name, _T("mscorlib"))) 
                {
                    this->level--;
                }
                break;
            }
            case 3: case_1653: {
                if(System::String::op_Equality(name, _T("cryptographySettings"))) 
                {
                    this->level--;
                }
                break;
            }
            case 4: case_1654: {
                if((System::String::op_Equality(name, _T("oidMap")) || System::String::op_Equality(name, _T("cryptoNameMapping")))) 
                {
                    this->level--;
                }
                break;
            }
            case 5: case_1655: {
                if(System::String::op_Equality(name, _T("cryptoClasses"))) 
                {
                    this->level--;
                }
                break;
            }
        }
    }
    
    void CryptoHandler::OnProcessingInstruction(System::String* name, System::String* text) {
    }
    
    void CryptoHandler::OnChars(System::String* text) {
    }
    
    void CryptoHandler::OnIgnorableWhitespace(System::String* text) {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    System::Object*  CryptoConfig::lockObject;
    System::Collections::Generic::Dictionary<System::String*, System::Type*>*  CryptoConfig::algorithms;
    System::Collections::Generic::Dictionary<System::String*, System::String*>*  CryptoConfig::unresolved_algorithms;
    System::Collections::Generic::Dictionary<System::String*, System::String*>*  CryptoConfig::oids;
    System::Type*  CryptoConfig::defaultSHA1;
    System::Type*  CryptoConfig::defaultMD5;
    System::Type*  CryptoConfig::defaultSHA256;
    System::Type*  CryptoConfig::defaultSHA384;
    System::Type*  CryptoConfig::defaultSHA512;
    System::Type*  CryptoConfig::defaultRSA;
    System::Type*  CryptoConfig::defaultDSA;
    System::Type*  CryptoConfig::defaultDES;
    System::Type*  CryptoConfig::default3DES;
    System::Type*  CryptoConfig::defaultRC2;
    System::Type*  CryptoConfig::defaultAES;
    System::Type*  CryptoConfig::defaultRNG;
    System::Type*  CryptoConfig::defaultHMAC;
    System::Type*  CryptoConfig::defaultMAC3DES;
    System::Type*  CryptoConfig::defaultDSASigDesc;
    System::Type*  CryptoConfig::defaultRSASigDesc;
    System::Type*  CryptoConfig::defaultRIPEMD160;
    System::Type*  CryptoConfig::defaultHMACMD5;
    System::Type*  CryptoConfig::defaultHMACRIPEMD160;
    System::Type*  CryptoConfig::defaultHMACSHA256;
    System::Type*  CryptoConfig::defaultHMACSHA384;
    System::Type*  CryptoConfig::defaultHMACSHA512;
    
    CryptoConfig::CryptoConfig()
    {
        static volatile bool initialized = false;
        static std::recursive_mutex mutex;
        if(!initialized)
        {
            std::lock_guard<std::recursive_mutex> lock(mutex);
            if(!initialized)
                static_constructor();
            initialized = true;
        }
        
    }
    
    void CryptoConfig::static_constructor() {
        lockObject = cli::gcnew<System::Object>();
    }
    
    void CryptoConfig::constructor() {
    }
    
    void CryptoConfig::Initialize() {
        System::Collections::Generic::Dictionary<System::String*, System::Type*> *algorithms = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, System::Type*>>(System::StringComparer::get_OrdinalIgnoreCase());
        algorithms->Add(_T("SHA"), defaultSHA1);
        algorithms->Add(_T("SHA1"), defaultSHA1);
        algorithms->Add(_T("System.Security.Cryptography.SHA1"), defaultSHA1);
        algorithms->Add(_T("System.Security.Cryptography.HashAlgorithm"), defaultSHA1);
        algorithms->Add(_T("MD5"), defaultMD5);
        algorithms->Add(_T("System.Security.Cryptography.MD5"), defaultMD5);
        algorithms->Add(_T("SHA256"), defaultSHA256);
        algorithms->Add(_T("SHA-256"), defaultSHA256);
        algorithms->Add(_T("System.Security.Cryptography.SHA256"), defaultSHA256);
        algorithms->Add(_T("SHA384"), defaultSHA384);
        algorithms->Add(_T("SHA-384"), defaultSHA384);
        algorithms->Add(_T("System.Security.Cryptography.SHA384"), defaultSHA384);
        algorithms->Add(_T("SHA512"), defaultSHA512);
        algorithms->Add(_T("SHA-512"), defaultSHA512);
        algorithms->Add(_T("System.Security.Cryptography.SHA512"), defaultSHA512);
        algorithms->Add(_T("RSA"), defaultRSA);
        algorithms->Add(_T("System.Security.Cryptography.RSA"), defaultRSA);
        algorithms->Add(_T("System.Security.Cryptography.AsymmetricAlgorithm"), defaultRSA);
        algorithms->Add(_T("DSA"), defaultDSA);
        algorithms->Add(_T("System.Security.Cryptography.DSA"), defaultDSA);
        algorithms->Add(_T("DES"), defaultDES);
        algorithms->Add(_T("System.Security.Cryptography.DES"), defaultDES);
        algorithms->Add(_T("3DES"), default3DES);
        algorithms->Add(_T("TripleDES"), default3DES);
        algorithms->Add(_T("Triple DES"), default3DES);
        algorithms->Add(_T("System.Security.Cryptography.TripleDES"), default3DES);
        algorithms->Add(_T("RC2"), defaultRC2);
        algorithms->Add(_T("System.Security.Cryptography.RC2"), defaultRC2);
        algorithms->Add(_T("Rijndael"), defaultAES);
        algorithms->Add(_T("System.Security.Cryptography.Rijndael"), defaultAES);
        algorithms->Add(_T("System.Security.Cryptography.SymmetricAlgorithm"), defaultAES);
        algorithms->Add(_T("RandomNumberGenerator"), defaultRNG);
        algorithms->Add(_T("System.Security.Cryptography.RandomNumberGenerator"), defaultRNG);
        algorithms->Add(_T("System.Security.Cryptography.KeyedHashAlgorithm"), defaultHMAC);
        algorithms->Add(_T("HMACSHA1"), defaultHMAC);
        algorithms->Add(_T("System.Security.Cryptography.HMACSHA1"), defaultHMAC);
        algorithms->Add(_T("MACTripleDES"), defaultMAC3DES);
        algorithms->Add(_T("System.Security.Cryptography.MACTripleDES"), defaultMAC3DES);
        algorithms->Add(_T("RIPEMD160"), defaultRIPEMD160);
        algorithms->Add(_T("RIPEMD-160"), defaultRIPEMD160);
        algorithms->Add(_T("System.Security.Cryptography.RIPEMD160"), defaultRIPEMD160);
        algorithms->Add(_T("System.Security.Cryptography.HMAC"), defaultHMAC);
        algorithms->Add(_T("HMACMD5"), defaultHMACMD5);
        algorithms->Add(_T("System.Security.Cryptography.HMACMD5"), defaultHMACMD5);
        algorithms->Add(_T("HMACRIPEMD160"), defaultHMACRIPEMD160);
        algorithms->Add(_T("System.Security.Cryptography.HMACRIPEMD160"), defaultHMACRIPEMD160);
        algorithms->Add(_T("HMACSHA256"), defaultHMACSHA256);
        algorithms->Add(_T("System.Security.Cryptography.HMACSHA256"), defaultHMACSHA256);
        algorithms->Add(_T("HMACSHA384"), defaultHMACSHA384);
        algorithms->Add(_T("System.Security.Cryptography.HMACSHA384"), defaultHMACSHA384);
        algorithms->Add(_T("HMACSHA512"), defaultHMACSHA512);
        algorithms->Add(_T("System.Security.Cryptography.HMACSHA512"), defaultHMACSHA512);
        System::Collections::Generic::Dictionary<System::String*, System::String*> *unresolved_algorithms = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, System::String*>>(System::StringComparer::get_OrdinalIgnoreCase());
        algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig#dsa-sha1"), defaultDSASigDesc);
        algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig#rsa-sha1"), defaultRSASigDesc);
        algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig#sha1"), defaultSHA1);
        unresolved_algorithms->Add(_T("http://www.w3.org/TR/2001/REC-xml-c14n-20010315"), _T("System.Security.Cryptography.Xml.XmlDsigC14NTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"), _T("System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig#base64"), _T("System.Security.Cryptography.Xml.XmlDsigBase64Transform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/TR/1999/REC-xpath-19991116"), _T("System.Security.Cryptography.Xml.XmlDsigXPathTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/TR/1999/REC-xslt-19991116"), _T("System.Security.Cryptography.Xml.XmlDsigXsltTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig#enveloped-signature"), _T("System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2001/10/xml-exc-c14n#"), _T("System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2001/10/xml-exc-c14n#WithComments"), _T("System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2002/07/decrypt#XML"), _T("System.Security.Cryptography.Xml.XmlDecryptionTransform, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        algorithms->Add(_T("http://www.w3.org/2001/04/xmlenc#sha256"), defaultSHA256);
        algorithms->Add(_T("http://www.w3.org/2001/04/xmlenc#sha512"), defaultSHA512);
        algorithms->Add(_T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"), defaultHMACSHA256);
        algorithms->Add(_T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha384"), defaultHMACSHA384);
        algorithms->Add(_T("http://www.w3.org/2001/04/xmldsig-more#hmac-sha512"), defaultHMACSHA512);
        algorithms->Add(_T("http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160"), defaultHMACRIPEMD160);
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig# X509Data"), _T("System.Security.Cryptography.Xml.KeyInfoX509Data, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig# KeyName"), _T("System.Security.Cryptography.Xml.KeyInfoName, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue"), _T("System.Security.Cryptography.Xml.DSAKeyValue, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue"), _T("System.Security.Cryptography.Xml.RSAKeyValue, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("http://www.w3.org/2000/09/xmldsig# RetrievalMethod"), _T("System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
        unresolved_algorithms->Add(_T("2.5.29.14"), _T("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("2.5.29.15"), _T("System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("2.5.29.19"), _T("System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("2.5.29.37"), _T("System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("X509Chain"), _T("System.Security.Cryptography.X509Certificates.X509Chain, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("AES"), _T("System.Security.Cryptography.AesCryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.AesCryptoServiceProvider"), _T("System.Security.Cryptography.AesCryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("AesManaged"), _T("System.Security.Cryptography.AesManaged, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.AesManaged"), _T("System.Security.Cryptography.AesManaged, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("ECDH"), _T("System.Security.Cryptography.ECDiffieHellmanCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("ECDiffieHellman"), _T("System.Security.Cryptography.ECDiffieHellmanCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("ECDiffieHellmanCng"), _T("System.Security.Cryptography.ECDiffieHellmanCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.ECDiffieHellmanCng"), _T("System.Security.Cryptography.ECDiffieHellmanCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("ECDsa"), _T("System.Security.Cryptography.ECDsaCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("ECDsaCng"), _T("System.Security.Cryptography.ECDsaCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.ECDsaCng"), _T("System.Security.Cryptography.ECDsaCng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA1Cng"), _T("System.Security.Cryptography.SHA1Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA256Cng"), _T("System.Security.Cryptography.SHA256Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA256CryptoServiceProvider"), _T("System.Security.Cryptography.SHA256CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA384Cng"), _T("System.Security.Cryptography.SHA384Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA384CryptoServiceProvider"), _T("System.Security.Cryptography.SHA384CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA512Cng"), _T("System.Security.Cryptography.SHA512Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        unresolved_algorithms->Add(_T("System.Security.Cryptography.SHA512CryptoServiceProvider"), _T("System.Security.Cryptography.SHA512CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"));
        System::Collections::Generic::Dictionary<System::String*, System::String*> *oid = cli::gcnew<System::Collections::Generic::Dictionary<System::String*, System::String*>>(System::StringComparer::get_OrdinalIgnoreCase());
        oid->Add(_T("System.Security.Cryptography.SHA1CryptoServiceProvider"), _T("1.3.14.3.2.26"));
        oid->Add(_T("System.Security.Cryptography.SHA1Managed"), _T("1.3.14.3.2.26"));
        oid->Add(_T("SHA1"), _T("1.3.14.3.2.26"));
        oid->Add(_T("System.Security.Cryptography.SHA1"), _T("1.3.14.3.2.26"));
        oid->Add(_T("System.Security.Cryptography.MD5CryptoServiceProvider"), _T("1.2.840.113549.2.5"));
        oid->Add(_T("MD5"), _T("1.2.840.113549.2.5"));
        oid->Add(_T("System.Security.Cryptography.MD5"), _T("1.2.840.113549.2.5"));
        oid->Add(_T("System.Security.Cryptography.SHA256Managed"), _T("2.16.840.1.101.3.4.2.1"));
        oid->Add(_T("SHA256"), _T("2.16.840.1.101.3.4.2.1"));
        oid->Add(_T("System.Security.Cryptography.SHA256"), _T("2.16.840.1.101.3.4.2.1"));
        oid->Add(_T("System.Security.Cryptography.SHA384Managed"), _T("2.16.840.1.101.3.4.2.2"));
        oid->Add(_T("SHA384"), _T("2.16.840.1.101.3.4.2.2"));
        oid->Add(_T("System.Security.Cryptography.SHA384"), _T("2.16.840.1.101.3.4.2.2"));
        oid->Add(_T("System.Security.Cryptography.SHA512Managed"), _T("2.16.840.1.101.3.4.2.3"));
        oid->Add(_T("SHA512"), _T("2.16.840.1.101.3.4.2.3"));
        oid->Add(_T("System.Security.Cryptography.SHA512"), _T("2.16.840.1.101.3.4.2.3"));
        oid->Add(_T("System.Security.Cryptography.RIPEMD160Managed"), _T("1.3.36.3.2.1"));
        oid->Add(_T("RIPEMD160"), _T("1.3.36.3.2.1"));
        oid->Add(_T("System.Security.Cryptography.RIPEMD160"), _T("1.3.36.3.2.1"));
        oid->Add(_T("TripleDESKeyWrap"), _T("1.2.840.113549.1.9.16.3.6"));
        oid->Add(_T("DES"), _T("1.3.14.3.2.7"));
        oid->Add(_T("TripleDES"), _T("1.2.840.113549.3.7"));
        oid->Add(_T("RC2"), _T("1.2.840.113549.3.2"));
        System::String *config = System::Environment::GetMachineConfigPath();
        LoadConfig(config, algorithms, oid);
        algorithms = algorithms;
        unresolved_algorithms = unresolved_algorithms;
        oids = oid;
    }
    
    void CryptoConfig::LoadConfig(System::String* filename, System::Collections::Generic::IDictionary2<System::String*, System::Type*>* algorithms, System::Collections::Generic::IDictionary2<System::String*, System::String*>* oid) {
        if(!(System::IO::File::Exists(filename))) 
        {
            return;
        }
        try {
            {
                /* USING - BLOCK */
                auto reader = cli::gcnew<System::IO::StreamReader>(filename);
                cli::using_guard{reader};
                CryptoHandler *handler = cli::gcnew<CryptoHandler>(algorithms, oid);
                Mono::Xml::SmallXmlParser *parser = cli::gcnew<Mono::Xml::SmallXmlParser>();
                parser->Parse(reader, handler);
            }
        }
        catch(...) {
        }
    }
    
    System::Object* CryptoConfig::CreateFromName(System::String* name) {
        return CreateFromName2(name, nullptr);
    }
    
    System::Object* CryptoConfig::CreateFromName2(System::String* name, cli::array<System::Object*>* args) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        {
            cli::lock_guard{lockObject};
            if((algorithms ==  nullptr)) 
            {
                Initialize();
            }
        }
        try {
            System::Type *algoClass = nullptr;
            if(!(algorithms->TryGetValue(name, algoClass))) 
            {
                System::String *algo = nullptr;
                if(!(unresolved_algorithms->TryGetValue(name, algo))) 
                {
                    algo = name;
                }
                algoClass = System::Type::GetType4(algo);
            }
            if(System::Type::op_Equality2(algoClass, nullptr)) 
            {
                return nullptr;
            }
            return System::Activator::CreateInstance9(algoClass, args);
        }
        catch(...) {
            return nullptr;
        }
    }
    
    System::String* CryptoConfig::MapNameToOID(System::String* name) {
        if((name ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("name"));
        }
        {
            cli::lock_guard{lockObject};
            if((oids ==  nullptr)) 
            {
                Initialize();
            }
        }
        System::String *result = nullptr;
        oids->TryGetValue(name, result);
        return result;
    }
    
    void CryptoConfig::AddAlgorithm(System::Type* algorithm, cli::array<System::String*>* names) {
        if(System::Type::op_Equality2(algorithm, nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("algorithm"));
        }
        if((names ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("names"));
        }
        for(auto tmp_516 : names) {
            auto name = cli::cast<System::String*>(tmp_516);
            {
                if(System::String::IsNullOrWhiteSpace(name)) 
                {
                    throw cli::gcnew<System::ArithmeticException>(_T("names"));
                }
                algorithms->set_Item(name, algorithm);
            }
        }
    }
    
    void CryptoConfig::AddOID(System::String* oid, cli::array<System::String*>* names) {
        if((oid ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("oid"));
        }
        if((names ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("names"));
        }
        for(auto tmp_517 : names) {
            auto name = cli::cast<System::String*>(tmp_517);
            {
                if(System::String::IsNullOrWhiteSpace(name)) 
                {
                    throw cli::gcnew<System::ArithmeticException>(_T("names"));
                }
                oids->set_Item(oid, name);
            }
        }
    }
    
    cli::array<unsigned char>* CryptoConfig::EncodeOID(System::String* str) {
        if((str ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("str"));
        }
        cli::array<char16_t> *delim = (new cli::array<char16_t>({u'.'}));
        cli::array<System::String*> *parts = str->Split(delim);
        if((parts->get_Length() < 2)) 
        {
            throw cli::gcnew<CryptographicUnexpectedOperationException>(Locale::GetText(_T("OID must have at least two parts")));
        }
        cli::array<unsigned char> *oid = (new cli::array<unsigned char>(str->get_Length()));
        try {
            unsigned char part0 = System::Convert::ToByte12(parts->at(0));
            unsigned char part1 = System::Convert::ToByte12(parts->at(1));
            oid->at(2) = System::Convert::ToByte8((((int32_t)(part0) * 40) + (int32_t)(part1)));
        }
        catch(...) {
            throw cli::gcnew<CryptographicUnexpectedOperationException>(Locale::GetText(_T("Invalid OID")));
        }
        int32_t j = 3;
        for(int32_t i = 2; (i < parts->get_Length()); i++){
            int64_t x = System::Convert::ToInt6412(parts->at(i));
            if((x > 127L)) 
            {
                cli::array<unsigned char> *num = EncodeLongNumber(x);
                System::Buffer::BlockCopy(num, 0, oid, j, num->get_Length());
                (j = j + num->get_Length());
            }
             else 
            {
                oid->at(j++) = System::Convert::ToByte9(x);
            }
        }
        int32_t k = 2;
        cli::array<unsigned char> *oid2 = (new cli::array<unsigned char>(j));
        oid2->at(0) = 6;
        if((j > 127)) 
        {
            throw cli::gcnew<CryptographicUnexpectedOperationException>(Locale::GetText(_T("OID > 127 bytes")));
        }
         else 
        {
            oid2->at(1) = System::Convert::ToByte8((j - 2));
        }
        System::Buffer::BlockCopy(oid, k, oid2, k, (j - k));
        return oid2;
    }
    
    cli::array<unsigned char>* CryptoConfig::EncodeLongNumber(int64_t x) {
        if(((x > 2147483647L) || (x < -2147483648L))) 
        {
            throw cli::gcnew<System::OverflowException>(Locale::GetText(_T("Part of OID doesn\'t fit in Int32")));
        }
        int64_t y = x;
        int32_t n = 1;
        while((y > 127L)) {
            y = (y >> 7);
            n++;
        }
        cli::array<unsigned char> *num = (new cli::array<unsigned char>(n));
        for(int32_t i = 0; (i < n); i++){
            y = (x >> ((7 * i) & 63));
            y = (y & 127L);
            if((i != 0)) 
            {
                (y = y + 128L);
            }
            num->at(((n - i) - 1)) = System::Convert::ToByte9(y);
        }
        return num;
    }
    
    bool CryptoConfig::get_AllowOnlyFipsAlgorithms() {
        return false;
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CryptographicException::constructor() {
        this->set_HResult(-2146233296);
    }
    
    void CryptographicException::constructor(int32_t hr) {
        this->set_HResult(hr);
    }
    
    void CryptographicException::constructor(System::String* message) {
        this->set_HResult(-2146233296);
    }
    
    void CryptographicException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233296);
    }
    
    void CryptographicException::constructor(System::String* format, System::String* insert) {
        this->set_HResult(-2146233296);
    }
    
    void CryptographicException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CryptographicUnexpectedOperationException::constructor() {
        this->set_HResult(-2146233295);
    }
    
    void CryptographicUnexpectedOperationException::constructor(System::String* message) {
        this->set_HResult(-2146233295);
    }
    
    void CryptographicUnexpectedOperationException::constructor(System::String* message, System::Exception* inner) {
        this->set_HResult(-2146233295);
    }
    
    void CryptographicUnexpectedOperationException::constructor(System::String* format, System::String* insert) {
        this->set_HResult(-2146233295);
    }
    
    void CryptographicUnexpectedOperationException::constructor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CryptoStream::constructor(System::IO::Stream* stream, ICryptoTransform* transform, CryptoStreamMode mode) {
        if(((int32_t)(mode) ==  0)) 
        {
            if(!(stream->get_CanRead_50a10d564be8aaa2())) 
            {
                throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Can\'t read on stream")));
            }
        }
         else 
        {
            if(((int32_t)(mode) ==  1)) 
            {
                if(!(stream->get_CanWrite_c8955eadfc77124c())) 
                {
                    throw cli::gcnew<System::ArgumentException>(Locale::GetText(_T("Can\'t write on stream")));
                }
            }
             else 
            {
                throw cli::gcnew<System::ArgumentException>(_T("mode"));
            }
        }
        this->_stream = stream;
        this->_transform = transform;
        this->_mode = mode;
        this->_disposed = false;
        if((transform != nullptr)) 
        {
            this->_workingBlock = (new cli::array<unsigned char>(transform->get_InputBlockSize_96223a4af50041fd()));
        }
    }
    
    void CryptoStream::Finalize_2dcb8da4e954a525() {
        {
            cli::finally_guard([&]() {
                Finalize_b946fbc32e26afd6();
            });
            System::IO::Stream::Dispose_b215be19126499b0(false);
        }
    }
    
    void CryptoStream::Clear() {
        System::IO::Stream::Close_59c62ed53ef2a481();
    }
    
    int32_t CryptoStream::Read_c0d6dde3943b413e(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) {
        if(((int32_t)(this->_mode) != 0)) 
        {
            throw cli::gcnew<System::NotSupportedException>(Locale::GetText(_T("not in Read mode")));
        }
        if((offset < 0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), Locale::GetText(_T("negative")));
        }
        if((count < 0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("count"), Locale::GetText(_T("negative")));
        }
        if((offset > (buffer->get_Length() - count))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("(offset+count)"), Locale::GetText(_T("buffer overflow")));
        }
        if((this->_workingBlock ==  nullptr)) 
        {
            return 0;
        }
        int32_t result = 0;
        if(((count ==  0) || ((this->_transformedPos ==  this->_transformedCount) && this->_endOfStream))) 
        {
            return result;
        }
        if((this->_waitingBlock ==  nullptr)) 
        {
            this->_transformedBlock = (new cli::array<unsigned char>((this->_transform->get_OutputBlockSize_970895ff24f2d445() << 2)));
            this->_transformedPos = 0;
            this->_transformedCount = 0;
            this->_waitingBlock = (new cli::array<unsigned char>(this->_transform->get_InputBlockSize_96223a4af50041fd()));
            this->_waitingCount = this->_stream->Read_c0d6dde3943b413e(this->_waitingBlock, 0, this->_waitingBlock->get_Length());
        }
        while((count > 0)) {
            int32_t length = (this->_transformedCount - this->_transformedPos);
            if((length < this->_transform->get_InputBlockSize_96223a4af50041fd())) 
            {
                int32_t transformed = 0;
                this->_workingCount = this->_stream->Read_c0d6dde3943b413e(this->_workingBlock, 0, this->_transform->get_InputBlockSize_96223a4af50041fd());
                this->_endOfStream = (this->_workingCount < this->_transform->get_InputBlockSize_96223a4af50041fd());
                if(!(this->_endOfStream)) 
                {
                    transformed = this->_transform->TransformBlock_66947c2464acaa4b(this->_waitingBlock, 0, this->_waitingBlock->get_Length(), this->_transformedBlock, this->_transformedCount);
                    System::Buffer::BlockCopy(this->_workingBlock, 0, this->_waitingBlock, 0, this->_workingCount);
                    this->_waitingCount = this->_workingCount;
                }
                 else 
                {
                    if((this->_workingCount > 0)) 
                    {
                        transformed = this->_transform->TransformBlock_66947c2464acaa4b(this->_waitingBlock, 0, this->_waitingBlock->get_Length(), this->_transformedBlock, this->_transformedCount);
                        System::Buffer::BlockCopy(this->_workingBlock, 0, this->_waitingBlock, 0, this->_workingCount);
                        this->_waitingCount = this->_workingCount;
                        (length = length + transformed);
                        (this->_transformedCount = this->_transformedCount + transformed);
                    }
                    if(!(this->_flushedFinalBlock)) 
                    {
                        cli::array<unsigned char> *input = this->_transform->TransformFinalBlock_24eabce3605cc4ff(this->_waitingBlock, 0, this->_waitingCount);
                        transformed = input->get_Length();
                        System::Buffer::BlockCopy(input, 0, this->_transformedBlock, this->_transformedCount, input->get_Length());
                        System::Array::Clear2(input, 0, input->get_Length());
                        this->_flushedFinalBlock = true;
                    }
                }
                (length = length + transformed);
                (this->_transformedCount = this->_transformedCount + transformed);
            }
            if((this->_transformedPos > this->_transform->get_OutputBlockSize_970895ff24f2d445())) 
            {
                System::Buffer::BlockCopy(this->_transformedBlock, this->_transformedPos, this->_transformedBlock, 0, length);
                (this->_transformedCount = this->_transformedCount - this->_transformedPos);
                this->_transformedPos = 0;
            }
            length = (count < length) ? count : length;
            if((length > 0)) 
            {
                System::Buffer::BlockCopy(this->_transformedBlock, this->_transformedPos, buffer, offset, length);
                (this->_transformedPos = this->_transformedPos + length);
                (result = result + length);
                (offset = offset + length);
                (count = count - length);
            }
            if((((length != this->_transform->get_InputBlockSize_96223a4af50041fd()) && (this->_waitingCount != this->_transform->get_InputBlockSize_96223a4af50041fd())) || this->_endOfStream)) 
            {
                count = 0;
            }
        }
        return result;
    }
    
    void CryptoStream::Write_1f8a1dbe71b0eb89(cli::array<unsigned char>* buffer, int32_t offset, int32_t count) {
        if(((int32_t)(this->_mode) != 1)) 
        {
            throw cli::gcnew<System::NotSupportedException>(Locale::GetText(_T("not in Write mode")));
        }
        if((offset < 0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("offset"), Locale::GetText(_T("negative")));
        }
        if((count < 0)) 
        {
            throw cli::gcnew<System::ArgumentOutOfRangeException>(_T("count"), Locale::GetText(_T("negative")));
        }
        if((offset > (buffer->get_Length() - count))) 
        {
            throw cli::gcnew<System::ArgumentException>(_T("(offset+count)"), Locale::GetText(_T("buffer overflow")));
        }
        if((this->_stream ==  nullptr)) 
        {
            throw cli::gcnew<System::ArgumentNullException>(_T("inner stream was disposed"));
        }
        int32_t buffer_length = count;
        if(((this->_partialCount > 0) && (this->_partialCount != this->_transform->get_InputBlockSize_96223a4af50041fd()))) 
        {
            int32_t remainder = (this->_transform->get_InputBlockSize_96223a4af50041fd() - this->_partialCount);
            remainder = (count < remainder) ? count : remainder;
            System::Buffer::BlockCopy(buffer, offset, this->_workingBlock, this->_partialCount, remainder);
            (this->_partialCount = this->_partialCount + remainder);
            (offset = offset + remainder);
            (count = count - remainder);
        }
        int32_t bufferPos = offset;
        while((count > 0)) {
            if((this->_partialCount ==  this->_transform->get_InputBlockSize_96223a4af50041fd())) 
            {
                if((this->_currentBlock ==  nullptr)) 
                {
                    this->_currentBlock = (new cli::array<unsigned char>(this->_transform->get_OutputBlockSize_970895ff24f2d445()));
                }
                int32_t len = this->_transform->TransformBlock_66947c2464acaa4b(this->_workingBlock, 0, this->_partialCount, this->_currentBlock, 0);
                this->_stream->Write_1f8a1dbe71b0eb89(this->_currentBlock, 0, len);
                this->_partialCount = 0;
            }
            if(this->_transform->get_CanTransformMultipleBlocks_711dcde861c62b70()) 
            {
                int32_t size = (count & ~((this->_transform->get_InputBlockSize_96223a4af50041fd() - 1)));
                int32_t rem = (count & (this->_transform->get_InputBlockSize_96223a4af50041fd() - 1));
                int32_t sizeWorkingBlock = ((1 + (size / this->_transform->get_InputBlockSize_96223a4af50041fd())) * this->_transform->get_OutputBlockSize_970895ff24f2d445());
                if((this->_workingBlock->get_Length() < sizeWorkingBlock)) 
                {
                    System::Array::Clear2(this->_workingBlock, 0, this->_workingBlock->get_Length());
                    this->_workingBlock = (new cli::array<unsigned char>(sizeWorkingBlock));
                }
                if((size > 0)) 
                {
                    int32_t len = this->_transform->TransformBlock_66947c2464acaa4b(buffer, offset, size, this->_workingBlock, 0);
                    this->_stream->Write_1f8a1dbe71b0eb89(this->_workingBlock, 0, len);
                }
                if((rem > 0)) 
                {
                    System::Buffer::BlockCopy(buffer, (buffer_length - rem), this->_workingBlock, 0, rem);
                }
                this->_partialCount = rem;
                count = 0;
            }
             else 
            {
                int32_t len = System::Math::Min5((this->_transform->get_InputBlockSize_96223a4af50041fd() - this->_partialCount), count);
                System::Buffer::BlockCopy(buffer, bufferPos, this->_workingBlock, this->_partialCount, len);
                (bufferPos = bufferPos + len);
                (this->_partialCount = this->_partialCount + len);
                (count = count - len);
            }
        }
    }
    
    void CryptoStream::Flush_132821400030c993() {
    }
    
    void CryptoStream::FlushFinalBlock() {
        if(this->_flushedFinalBlock) 
        {
            throw cli::gcnew<System::NotSupportedException>(Locale::GetText(_T("This method cannot be called twice.")));
        }
        if(this->_disposed) 
        {
            throw cli::gcnew<System::NotSupportedException>(Locale::GetText(_T("CryptoStream was disposed.")));
        }
        this->_flushedFinalBlock = true;
        cli::array<unsigned char> *finalBuffer = this->_transform->TransformFinalBlock_24eabce3605cc4ff(this->_workingBlock, 0, this->_partialCount);
        if(((this->_stream != nullptr) && ((int32_t)(this->_mode) ==  1))) 
        {
            this->_stream->Write_1f8a1dbe71b0eb89(finalBuffer, 0, finalBuffer->get_Length());
        }
        if(cli::is<CryptoStream>(this->_stream)) 
        {
            cli::as<CryptoStream*>(this->_stream)->FlushFinalBlock();
        }
         else 
        {
            this->_stream->Flush_132821400030c993();
        }
        System::Array::Clear2(finalBuffer, 0, finalBuffer->get_Length());
    }
    
    int64_t CryptoStream::Seek_df5b3eadfe9adf31(int64_t offset, System::IO::SeekOrigin origin) {
        throw cli::gcnew<System::NotSupportedException>(_T("Seek"));
    }
    
    void CryptoStream::SetLength_18d421048f3d4df5(int64_t value) {
        throw cli::gcnew<System::NotSupportedException>(_T("SetLength"));
    }
    
    void CryptoStream::Dispose_b215be19126499b0(bool disposing) {
        if(!(this->_disposed)) 
        {
            if(disposing) 
            {
                if(!(this->_flushedFinalBlock)) 
                {
                    FlushFinalBlock();
                }
                if((this->_stream != nullptr)) 
                {
                    this->_stream->Close_59c62ed53ef2a481();
                }
            }
            this->_disposed = true;
            if((this->_workingBlock != nullptr)) 
            {
                System::Array::Clear2(this->_workingBlock, 0, this->_workingBlock->get_Length());
            }
            if((this->_currentBlock != nullptr)) 
            {
                System::Array::Clear2(this->_currentBlock, 0, this->_currentBlock->get_Length());
            }
            if(disposing) 
            {
                this->_stream = nullptr;
                this->_workingBlock = nullptr;
                this->_currentBlock = nullptr;
            }
        }
    }
    
    bool CryptoStream::get_CanRead_50a10d564be8aaa2() {
        return ((int32_t)(this->_mode) ==  0);
    }
    
    bool CryptoStream::get_CanSeek_8c8861ce02c6bdeb() {
        return false;
    }
    
    bool CryptoStream::get_CanWrite_c8955eadfc77124c() {
        return ((int32_t)(this->_mode) ==  1);
    }
    
    int64_t CryptoStream::get_Length_ddb8b0d061db5350() {
        throw cli::gcnew<System::NotSupportedException>(_T("Length"));
    }
    
    int64_t CryptoStream::get_Position_5e75d5c458401f13() {
        throw cli::gcnew<System::NotSupportedException>(_T("Position"));
    }
    
    int64_t CryptoStream::set_Position_cfe1def757785ad(int64_t value) {
        throw cli::gcnew<System::NotSupportedException>(_T("Position"));
        return get_Position_5e75d5c458401f13();
    }
    
    bool CryptoStream::get_HasFlushedFinalBlock() {
        return this->_flushedFinalBlock;
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CspKeyContainerInfo::constructor(CspParameters* parameters) {
        this->_params = parameters;
        this->_random = true;
    }
    
    bool CspKeyContainerInfo::get_Accessible() {
        return true;
    }
    
    System::Security::AccessControl::CryptoKeySecurity* CspKeyContainerInfo::get_CryptoKeySecurity() {
        return nullptr;
    }
    
    bool CspKeyContainerInfo::get_Exportable() {
        return true;
    }
    
    bool CspKeyContainerInfo::get_HardwareDevice() {
        return false;
    }
    
    System::String* CspKeyContainerInfo::get_KeyContainerName() {
        return this->_params->KeyContainerName;
    }
    
    KeyNumber CspKeyContainerInfo::get_KeyNumber() {
        return (KeyNumber)(this->_params->KeyNumber2);
    }
    
    bool CspKeyContainerInfo::get_MachineKeyStore() {
        return false;
    }
    
    bool CspKeyContainerInfo::get_Protected() {
        return false;
    }
    
    System::String* CspKeyContainerInfo::get_ProviderName() {
        return this->_params->ProviderName;
    }
    
    int32_t CspKeyContainerInfo::get_ProviderType() {
        return this->_params->ProviderType;
    }
    
    bool CspKeyContainerInfo::get_RandomlyGenerated() {
        return this->_random;
    }
    
    bool CspKeyContainerInfo::get_Removable() {
        return false;
    }
    
    System::String* CspKeyContainerInfo::get_UniqueKeyContainerName() {
        return cli::concat(this->_params->ProviderName, _T("\\"));
    }
    
}}}
namespace System { namespace Security { namespace Cryptography {
    
    
    void CspParameters::constructor() {
    }
    
    void CspParameters::constructor(int32_t dwTypeIn) {
    }
    
    void CspParameters::constructor(int32_t dwTypeIn, System::String* strProviderNameIn) {
    }
    
    void CspParameters::constructor(int32_t dwTypeIn, System::String* strProviderNameIn, System::String* strContainerNameIn) {
        this->ProviderType = dwTypeIn;
        this->ProviderName = strProviderNameIn;
        this->KeyContainerName = strContainerNameIn;
        this->KeyNumber2 = -1;
    }
    
    void CspParameters::constructor(int32_t providerType, System::String* providerName, System::String* keyContainerName, System::Security::AccessControl::CryptoKeySecurity* cryptoKeySecurity, void* parentWindowHandle) {
        if((cryptoKeySecurity != nullptr)) 
        {
            this->set_CryptoKeySecurity(cryptoKeySecurity);
        }
        this->_windowHandle = parentWindowHandle;
    }
    
    void CspParameters::constructor(int32_t providerType, System::String* providerName, System::String* keyContainerName, System::Security::AccessControl::CryptoKeySecurity* cryptoKeySecurity, System::Security::SecureString* keyPassword) {
        if((cryptoKeySecurity != nullptr)) 
        {
            this->set_CryptoKeySecurity(cryptoKeySecurity);
        }
        this->_password = keyPassword;
    }
    
    void CspParameters::constructor(CspParameters* parameters) {
        if((parameters->get_CryptoKeySecurity() != nullptr)) 
        {
            this->set_CryptoKeySecurity(parameters->get_CryptoKeySecurity());
        }
        this->_Flags = parameters->get_Flags();
        this->KeyNumber2 = parameters->KeyNumber2;
        this->_password = parameters->get_KeyPassword();
        this->_windowHandle = parameters->get_ParentWindowHandle();
    }
    
    CspProviderFlags CspParameters::get_Flags() {
        return this->_Flags;
    }
    
    CspProviderFlags CspParameters::set_Flags(CspProviderFlags value) {
        this->_Flags = value;
        return get_Flags();
    }
    
    System::Security::AccessControl::CryptoKeySecurity* CspParameters::get_CryptoKeySecurity() {
        throw cli::gcnew<System::NotImplementedException>();
    }
    
    System::Security::AccessControl::CryptoKeySecurity* CspParameters::set_CryptoKeySecurity(System::Security::AccessControl::CryptoKeySecurity* value) {
        throw cli::gcnew<System::NotImplementedException>();
        return get_CryptoKeySecurity();
    }
    
    System::Security::SecureString* CspParameters::get_KeyPassword() {
        return this->_password;
    }
    
    System::Security::SecureString* CspParameters::set_KeyPassword(System::Security::SecureString* value) {
        this->_password = value;
        return get_KeyPassword();
    }
    
    void* CspParameters::get_ParentWindowHandle() {
        return this->_windowHandle;
    }
    
    void* CspParameters::set_ParentWindowHandle(void* value) {
        this->_windowHandle = value;
        return get_ParentWindowHandle();
    }
    
}}}
